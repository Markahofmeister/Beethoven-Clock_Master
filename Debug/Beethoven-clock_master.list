
Beethoven-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c9c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003d58  08003d58  00004d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e0c  08003e0c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e0c  08003e0c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e0c  08003e0c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e0c  08003e0c  00004e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e10  08003e10  00004e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003e14  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  08003e20  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003e20  00005198  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012340  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029bc  00000000  00000000  00017374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  00019d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f64  00000000  00000000  0001b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002baa  00000000  00000000  0001c044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174eb  00000000  00000000  0001ebee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009718e  00000000  00000000  000360d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd267  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f8  00000000  00000000  000cd2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d1aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003d40 	.word	0x08003d40

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003d40 	.word	0x08003d40

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fd6a 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f828 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 fa3e 	bl	80006a8 <MX_GPIO_Init>
  MX_RTC_Init();
 800022c:	f000 f8f2 	bl	8000414 <MX_RTC_Init>
  MX_I2C1_Init();
 8000230:	f000 f888 	bl	8000344 <MX_I2C1_Init>
  MX_I2S1_Init();
 8000234:	f000 f8c6 	bl	80003c4 <MX_I2S1_Init>
  MX_SPI2_Init();
 8000238:	f000 f998 	bl	800056c <MX_SPI2_Init>
  MX_TIM2_Init();
 800023c:	f000 f9d4 	bl	80005e8 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000240:	2380      	movs	r3, #128	@ 0x80
 8000242:	015b      	lsls	r3, r3, #5
 8000244:	480b      	ldr	r0, [pc, #44]	@ (8000274 <main+0x58>)
 8000246:	2201      	movs	r2, #1
 8000248:	0019      	movs	r1, r3
 800024a:	f001 f817 	bl	800127c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800024e:	23fa      	movs	r3, #250	@ 0xfa
 8000250:	005b      	lsls	r3, r3, #1
 8000252:	0018      	movs	r0, r3
 8000254:	f000 fdd6 	bl	8000e04 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000258:	2380      	movs	r3, #128	@ 0x80
 800025a:	015b      	lsls	r3, r3, #5
 800025c:	4805      	ldr	r0, [pc, #20]	@ (8000274 <main+0x58>)
 800025e:	2200      	movs	r2, #0
 8000260:	0019      	movs	r1, r3
 8000262:	f001 f80b 	bl	800127c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000266:	23fa      	movs	r3, #250	@ 0xfa
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fdca 	bl	8000e04 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000270:	46c0      	nop			@ (mov r8, r8)
 8000272:	e7e5      	b.n	8000240 <main+0x24>
 8000274:	50000400 	.word	0x50000400

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b093      	sub	sp, #76	@ 0x4c
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	2410      	movs	r4, #16
 8000280:	193b      	adds	r3, r7, r4
 8000282:	0018      	movs	r0, r3
 8000284:	2338      	movs	r3, #56	@ 0x38
 8000286:	001a      	movs	r2, r3
 8000288:	2100      	movs	r1, #0
 800028a:	f003 fd2d 	bl	8003ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	003b      	movs	r3, r7
 8000290:	0018      	movs	r0, r3
 8000292:	2310      	movs	r3, #16
 8000294:	001a      	movs	r2, r3
 8000296:	2100      	movs	r1, #0
 8000298:	f003 fd26 	bl	8003ce8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800029c:	2380      	movs	r3, #128	@ 0x80
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	0018      	movs	r0, r3
 80002a2:	f001 fa4b 	bl	800173c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002a6:	f001 fa3b 	bl	8001720 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002aa:	4b25      	ldr	r3, [pc, #148]	@ (8000340 <SystemClock_Config+0xc8>)
 80002ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80002ae:	4b24      	ldr	r3, [pc, #144]	@ (8000340 <SystemClock_Config+0xc8>)
 80002b0:	2118      	movs	r1, #24
 80002b2:	438a      	bics	r2, r1
 80002b4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80002b6:	193b      	adds	r3, r7, r4
 80002b8:	2205      	movs	r2, #5
 80002ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	2280      	movs	r2, #128	@ 0x80
 80002c0:	0252      	lsls	r2, r2, #9
 80002c2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002c4:	0021      	movs	r1, r4
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2201      	movs	r2, #1
 80002ca:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2202      	movs	r2, #2
 80002d0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2203      	movs	r2, #3
 80002d6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2200      	movs	r2, #0
 80002dc:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2208      	movs	r2, #8
 80002e2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	22c0      	movs	r2, #192	@ 0xc0
 80002e8:	02d2      	lsls	r2, r2, #11
 80002ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2280      	movs	r2, #128	@ 0x80
 80002f0:	0492      	lsls	r2, r2, #18
 80002f2:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2280      	movs	r2, #128	@ 0x80
 80002f8:	0592      	lsls	r2, r2, #22
 80002fa:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	0018      	movs	r0, r3
 8000300:	f001 fa68 	bl	80017d4 <HAL_RCC_OscConfig>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000308:	f000 faa6 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030c:	003b      	movs	r3, r7
 800030e:	2207      	movs	r2, #7
 8000310:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000312:	003b      	movs	r3, r7
 8000314:	2202      	movs	r2, #2
 8000316:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	003b      	movs	r3, r7
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031e:	003b      	movs	r3, r7
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000324:	003b      	movs	r3, r7
 8000326:	2102      	movs	r1, #2
 8000328:	0018      	movs	r0, r3
 800032a:	f001 fd6d 	bl	8001e08 <HAL_RCC_ClockConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000332:	f000 fa91 	bl	8000858 <Error_Handler>
  }
}
 8000336:	46c0      	nop			@ (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	b013      	add	sp, #76	@ 0x4c
 800033c:	bd90      	pop	{r4, r7, pc}
 800033e:	46c0      	nop			@ (mov r8, r8)
 8000340:	40021000 	.word	0x40021000

08000344 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000348:	4b1b      	ldr	r3, [pc, #108]	@ (80003b8 <MX_I2C1_Init+0x74>)
 800034a:	4a1c      	ldr	r2, [pc, #112]	@ (80003bc <MX_I2C1_Init+0x78>)
 800034c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800034e:	4b1a      	ldr	r3, [pc, #104]	@ (80003b8 <MX_I2C1_Init+0x74>)
 8000350:	4a1b      	ldr	r2, [pc, #108]	@ (80003c0 <MX_I2C1_Init+0x7c>)
 8000352:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000354:	4b18      	ldr	r3, [pc, #96]	@ (80003b8 <MX_I2C1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800035a:	4b17      	ldr	r3, [pc, #92]	@ (80003b8 <MX_I2C1_Init+0x74>)
 800035c:	2201      	movs	r2, #1
 800035e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000360:	4b15      	ldr	r3, [pc, #84]	@ (80003b8 <MX_I2C1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000366:	4b14      	ldr	r3, [pc, #80]	@ (80003b8 <MX_I2C1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800036c:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <MX_I2C1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000372:	4b11      	ldr	r3, [pc, #68]	@ (80003b8 <MX_I2C1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000378:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <MX_I2C1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800037e:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <MX_I2C1_Init+0x74>)
 8000380:	0018      	movs	r0, r3
 8000382:	f000 ff99 	bl	80012b8 <HAL_I2C_Init>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800038a:	f000 fa65 	bl	8000858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800038e:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <MX_I2C1_Init+0x74>)
 8000390:	2100      	movs	r1, #0
 8000392:	0018      	movs	r0, r3
 8000394:	f001 f836 	bl	8001404 <HAL_I2CEx_ConfigAnalogFilter>
 8000398:	1e03      	subs	r3, r0, #0
 800039a:	d001      	beq.n	80003a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800039c:	f000 fa5c 	bl	8000858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003a0:	4b05      	ldr	r3, [pc, #20]	@ (80003b8 <MX_I2C1_Init+0x74>)
 80003a2:	2100      	movs	r1, #0
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 f879 	bl	800149c <HAL_I2CEx_ConfigDigitalFilter>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003ae:	f000 fa53 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000028 	.word	0x20000028
 80003bc:	40005400 	.word	0x40005400
 80003c0:	10707dbc 	.word	0x10707dbc

080003c4 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80003c8:	4b10      	ldr	r3, [pc, #64]	@ (800040c <MX_I2S1_Init+0x48>)
 80003ca:	4a11      	ldr	r2, [pc, #68]	@ (8000410 <MX_I2S1_Init+0x4c>)
 80003cc:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80003ce:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <MX_I2S1_Init+0x48>)
 80003d0:	2280      	movs	r2, #128	@ 0x80
 80003d2:	0092      	lsls	r2, r2, #2
 80003d4:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80003d6:	4b0d      	ldr	r3, [pc, #52]	@ (800040c <MX_I2S1_Init+0x48>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80003dc:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <MX_I2S1_Init+0x48>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80003e2:	4b0a      	ldr	r3, [pc, #40]	@ (800040c <MX_I2S1_Init+0x48>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <MX_I2S1_Init+0x48>)
 80003ea:	22fa      	movs	r2, #250	@ 0xfa
 80003ec:	0152      	lsls	r2, r2, #5
 80003ee:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <MX_I2S1_Init+0x48>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80003f6:	4b05      	ldr	r3, [pc, #20]	@ (800040c <MX_I2S1_Init+0x48>)
 80003f8:	0018      	movs	r0, r3
 80003fa:	f001 f89b 	bl	8001534 <HAL_I2S_Init>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <MX_I2S1_Init+0x42>
  {
    Error_Handler();
 8000402:	f000 fa29 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	2000007c 	.word	0x2000007c
 8000410:	40013000 	.word	0x40013000

08000414 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b090      	sub	sp, #64	@ 0x40
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800041a:	232c      	movs	r3, #44	@ 0x2c
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	0018      	movs	r0, r3
 8000420:	2314      	movs	r3, #20
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f003 fc5f 	bl	8003ce8 <memset>
  RTC_DateTypeDef sDate = {0};
 800042a:	2328      	movs	r3, #40	@ 0x28
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000432:	003b      	movs	r3, r7
 8000434:	0018      	movs	r0, r3
 8000436:	2328      	movs	r3, #40	@ 0x28
 8000438:	001a      	movs	r2, r3
 800043a:	2100      	movs	r1, #0
 800043c:	f003 fc54 	bl	8003ce8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000440:	4b48      	ldr	r3, [pc, #288]	@ (8000564 <MX_RTC_Init+0x150>)
 8000442:	4a49      	ldr	r2, [pc, #292]	@ (8000568 <MX_RTC_Init+0x154>)
 8000444:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000446:	4b47      	ldr	r3, [pc, #284]	@ (8000564 <MX_RTC_Init+0x150>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800044c:	4b45      	ldr	r3, [pc, #276]	@ (8000564 <MX_RTC_Init+0x150>)
 800044e:	227f      	movs	r2, #127	@ 0x7f
 8000450:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000452:	4b44      	ldr	r3, [pc, #272]	@ (8000564 <MX_RTC_Init+0x150>)
 8000454:	22ff      	movs	r2, #255	@ 0xff
 8000456:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000458:	4b42      	ldr	r3, [pc, #264]	@ (8000564 <MX_RTC_Init+0x150>)
 800045a:	2200      	movs	r2, #0
 800045c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800045e:	4b41      	ldr	r3, [pc, #260]	@ (8000564 <MX_RTC_Init+0x150>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000464:	4b3f      	ldr	r3, [pc, #252]	@ (8000564 <MX_RTC_Init+0x150>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800046a:	4b3e      	ldr	r3, [pc, #248]	@ (8000564 <MX_RTC_Init+0x150>)
 800046c:	2280      	movs	r2, #128	@ 0x80
 800046e:	05d2      	lsls	r2, r2, #23
 8000470:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000472:	4b3c      	ldr	r3, [pc, #240]	@ (8000564 <MX_RTC_Init+0x150>)
 8000474:	2200      	movs	r2, #0
 8000476:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000478:	4b3a      	ldr	r3, [pc, #232]	@ (8000564 <MX_RTC_Init+0x150>)
 800047a:	0018      	movs	r0, r3
 800047c:	f002 fa7e 	bl	800297c <HAL_RTC_Init>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d001      	beq.n	8000488 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000484:	f000 f9e8 	bl	8000858 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000488:	212c      	movs	r1, #44	@ 0x2c
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2200      	movs	r2, #0
 800048e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2200      	movs	r2, #0
 8000494:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2200      	movs	r2, #0
 800049a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2200      	movs	r2, #0
 80004a0:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2200      	movs	r2, #0
 80004a6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80004ae:	1879      	adds	r1, r7, r1
 80004b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000564 <MX_RTC_Init+0x150>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	0018      	movs	r0, r3
 80004b6:	f002 fb03 	bl	8002ac0 <HAL_RTC_SetTime>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80004be:	f000 f9cb 	bl	8000858 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80004c2:	2128      	movs	r1, #40	@ 0x28
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2201      	movs	r2, #1
 80004c8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2201      	movs	r2, #1
 80004ce:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2201      	movs	r2, #1
 80004d4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2200      	movs	r2, #0
 80004da:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80004dc:	1879      	adds	r1, r7, r1
 80004de:	4b21      	ldr	r3, [pc, #132]	@ (8000564 <MX_RTC_Init+0x150>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	0018      	movs	r0, r3
 80004e4:	f002 fb94 	bl	8002c10 <HAL_RTC_SetDate>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80004ec:	f000 f9b4 	bl	8000858 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80004f0:	003b      	movs	r3, r7
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80004f6:	003b      	movs	r3, r7
 80004f8:	2200      	movs	r2, #0
 80004fa:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80004fc:	003b      	movs	r3, r7
 80004fe:	2200      	movs	r2, #0
 8000500:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000502:	003b      	movs	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000508:	003b      	movs	r3, r7
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800050e:	003b      	movs	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000514:	003b      	movs	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800051a:	003b      	movs	r3, r7
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000520:	003b      	movs	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000526:	003b      	movs	r3, r7
 8000528:	2220      	movs	r2, #32
 800052a:	2101      	movs	r1, #1
 800052c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800052e:	003b      	movs	r3, r7
 8000530:	2280      	movs	r2, #128	@ 0x80
 8000532:	0052      	lsls	r2, r2, #1
 8000534:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000536:	0039      	movs	r1, r7
 8000538:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <MX_RTC_Init+0x150>)
 800053a:	2201      	movs	r2, #1
 800053c:	0018      	movs	r0, r3
 800053e:	f002 fbf9 	bl	8002d34 <HAL_RTC_SetAlarm>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8000546:	f000 f987 	bl	8000858 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 800054a:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <MX_RTC_Init+0x150>)
 800054c:	2100      	movs	r1, #0
 800054e:	0018      	movs	r0, r3
 8000550:	f002 fdea 	bl	8003128 <HAL_RTCEx_SetCalibrationOutPut>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d001      	beq.n	800055c <MX_RTC_Init+0x148>
  {
    Error_Handler();
 8000558:	f000 f97e 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800055c:	46c0      	nop			@ (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b010      	add	sp, #64	@ 0x40
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200000b8 	.word	0x200000b8
 8000568:	40002800 	.word	0x40002800

0800056c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000570:	4b1b      	ldr	r3, [pc, #108]	@ (80005e0 <MX_SPI2_Init+0x74>)
 8000572:	4a1c      	ldr	r2, [pc, #112]	@ (80005e4 <MX_SPI2_Init+0x78>)
 8000574:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000576:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <MX_SPI2_Init+0x74>)
 8000578:	2282      	movs	r2, #130	@ 0x82
 800057a:	0052      	lsls	r2, r2, #1
 800057c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800057e:	4b18      	ldr	r3, [pc, #96]	@ (80005e0 <MX_SPI2_Init+0x74>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000584:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <MX_SPI2_Init+0x74>)
 8000586:	22e0      	movs	r2, #224	@ 0xe0
 8000588:	00d2      	lsls	r2, r2, #3
 800058a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800058c:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <MX_SPI2_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000592:	4b13      	ldr	r3, [pc, #76]	@ (80005e0 <MX_SPI2_Init+0x74>)
 8000594:	2201      	movs	r2, #1
 8000596:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000598:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <MX_SPI2_Init+0x74>)
 800059a:	2280      	movs	r2, #128	@ 0x80
 800059c:	0092      	lsls	r2, r2, #2
 800059e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	@ (80005e0 <MX_SPI2_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <MX_SPI2_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <MX_SPI2_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <MX_SPI2_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80005b8:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <MX_SPI2_Init+0x74>)
 80005ba:	2207      	movs	r2, #7
 80005bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005be:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <MX_SPI2_Init+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80005c4:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <MX_SPI2_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80005ca:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <MX_SPI2_Init+0x74>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f002 fdf3 	bl	80031b8 <HAL_SPI_Init>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80005d6:	f000 f93f 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200000e4 	.word	0x200000e4
 80005e4:	40003800 	.word	0x40003800

080005e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	@ 0x28
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ee:	231c      	movs	r3, #28
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	0018      	movs	r0, r3
 80005f4:	230c      	movs	r3, #12
 80005f6:	001a      	movs	r2, r3
 80005f8:	2100      	movs	r1, #0
 80005fa:	f003 fb75 	bl	8003ce8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005fe:	003b      	movs	r3, r7
 8000600:	0018      	movs	r0, r3
 8000602:	231c      	movs	r3, #28
 8000604:	001a      	movs	r2, r3
 8000606:	2100      	movs	r1, #0
 8000608:	f003 fb6e 	bl	8003ce8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800060c:	4b25      	ldr	r3, [pc, #148]	@ (80006a4 <MX_TIM2_Init+0xbc>)
 800060e:	2280      	movs	r2, #128	@ 0x80
 8000610:	05d2      	lsls	r2, r2, #23
 8000612:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000614:	4b23      	ldr	r3, [pc, #140]	@ (80006a4 <MX_TIM2_Init+0xbc>)
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061a:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <MX_TIM2_Init+0xbc>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000620:	4b20      	ldr	r3, [pc, #128]	@ (80006a4 <MX_TIM2_Init+0xbc>)
 8000622:	2201      	movs	r2, #1
 8000624:	4252      	negs	r2, r2
 8000626:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000628:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <MX_TIM2_Init+0xbc>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062e:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <MX_TIM2_Init+0xbc>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000634:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <MX_TIM2_Init+0xbc>)
 8000636:	0018      	movs	r0, r3
 8000638:	f002 fe76 	bl	8003328 <HAL_TIM_PWM_Init>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000640:	f000 f90a 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000644:	211c      	movs	r1, #28
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000652:	187a      	adds	r2, r7, r1
 8000654:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <MX_TIM2_Init+0xbc>)
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f003 fadd 	bl	8003c18 <HAL_TIMEx_MasterConfigSynchronization>
 800065e:	1e03      	subs	r3, r0, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000662:	f000 f8f9 	bl	8000858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000666:	003b      	movs	r3, r7
 8000668:	2260      	movs	r2, #96	@ 0x60
 800066a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800066c:	003b      	movs	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000672:	003b      	movs	r3, r7
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000678:	003b      	movs	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800067e:	0039      	movs	r1, r7
 8000680:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <MX_TIM2_Init+0xbc>)
 8000682:	2208      	movs	r2, #8
 8000684:	0018      	movs	r0, r3
 8000686:	f002 fea7 	bl	80033d8 <HAL_TIM_PWM_ConfigChannel>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800068e:	f000 f8e3 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000692:	4b04      	ldr	r3, [pc, #16]	@ (80006a4 <MX_TIM2_Init+0xbc>)
 8000694:	0018      	movs	r0, r3
 8000696:	f000 faab 	bl	8000bf0 <HAL_TIM_MspPostInit>

}
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b00a      	add	sp, #40	@ 0x28
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	20000148 	.word	0x20000148

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b08b      	sub	sp, #44	@ 0x2c
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	2414      	movs	r4, #20
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	0018      	movs	r0, r3
 80006b4:	2314      	movs	r3, #20
 80006b6:	001a      	movs	r2, r3
 80006b8:	2100      	movs	r1, #0
 80006ba:	f003 fb15 	bl	8003ce8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b61      	ldr	r3, [pc, #388]	@ (8000844 <MX_GPIO_Init+0x19c>)
 80006c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006c2:	4b60      	ldr	r3, [pc, #384]	@ (8000844 <MX_GPIO_Init+0x19c>)
 80006c4:	2104      	movs	r1, #4
 80006c6:	430a      	orrs	r2, r1
 80006c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ca:	4b5e      	ldr	r3, [pc, #376]	@ (8000844 <MX_GPIO_Init+0x19c>)
 80006cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ce:	2204      	movs	r2, #4
 80006d0:	4013      	ands	r3, r2
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d6:	4b5b      	ldr	r3, [pc, #364]	@ (8000844 <MX_GPIO_Init+0x19c>)
 80006d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006da:	4b5a      	ldr	r3, [pc, #360]	@ (8000844 <MX_GPIO_Init+0x19c>)
 80006dc:	2120      	movs	r1, #32
 80006de:	430a      	orrs	r2, r1
 80006e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006e2:	4b58      	ldr	r3, [pc, #352]	@ (8000844 <MX_GPIO_Init+0x19c>)
 80006e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006e6:	2220      	movs	r2, #32
 80006e8:	4013      	ands	r3, r2
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b55      	ldr	r3, [pc, #340]	@ (8000844 <MX_GPIO_Init+0x19c>)
 80006f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006f2:	4b54      	ldr	r3, [pc, #336]	@ (8000844 <MX_GPIO_Init+0x19c>)
 80006f4:	2101      	movs	r1, #1
 80006f6:	430a      	orrs	r2, r1
 80006f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006fa:	4b52      	ldr	r3, [pc, #328]	@ (8000844 <MX_GPIO_Init+0x19c>)
 80006fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006fe:	2201      	movs	r2, #1
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b4f      	ldr	r3, [pc, #316]	@ (8000844 <MX_GPIO_Init+0x19c>)
 8000708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800070a:	4b4e      	ldr	r3, [pc, #312]	@ (8000844 <MX_GPIO_Init+0x19c>)
 800070c:	2102      	movs	r1, #2
 800070e:	430a      	orrs	r2, r1
 8000710:	635a      	str	r2, [r3, #52]	@ 0x34
 8000712:	4b4c      	ldr	r3, [pc, #304]	@ (8000844 <MX_GPIO_Init+0x19c>)
 8000714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000716:	2202      	movs	r2, #2
 8000718:	4013      	ands	r3, r2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	4b49      	ldr	r3, [pc, #292]	@ (8000844 <MX_GPIO_Init+0x19c>)
 8000720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000722:	4b48      	ldr	r3, [pc, #288]	@ (8000844 <MX_GPIO_Init+0x19c>)
 8000724:	2108      	movs	r1, #8
 8000726:	430a      	orrs	r2, r1
 8000728:	635a      	str	r2, [r3, #52]	@ 0x34
 800072a:	4b46      	ldr	r3, [pc, #280]	@ (8000844 <MX_GPIO_Init+0x19c>)
 800072c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800072e:	2208      	movs	r2, #8
 8000730:	4013      	ands	r3, r2
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nRST_Pin|SHIFT_DATA_IN_Pin
 8000736:	23ee      	movs	r3, #238	@ 0xee
 8000738:	0119      	lsls	r1, r3, #4
 800073a:	23a0      	movs	r3, #160	@ 0xa0
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	2200      	movs	r2, #0
 8000740:	0018      	movs	r0, r3
 8000742:	f000 fd9b 	bl	800127c <HAL_GPIO_WritePin>
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin, GPIO_PIN_RESET);
 8000746:	4940      	ldr	r1, [pc, #256]	@ (8000848 <MX_GPIO_Init+0x1a0>)
 8000748:	4b40      	ldr	r3, [pc, #256]	@ (800084c <MX_GPIO_Init+0x1a4>)
 800074a:	2200      	movs	r2, #0
 800074c:	0018      	movs	r0, r3
 800074e:	f000 fd95 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 8000752:	4b3f      	ldr	r3, [pc, #252]	@ (8000850 <MX_GPIO_Init+0x1a8>)
 8000754:	2200      	movs	r2, #0
 8000756:	2180      	movs	r1, #128	@ 0x80
 8000758:	0018      	movs	r0, r3
 800075a:	f000 fd8f 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nRST_Pin SHIFT_DATA_IN_Pin
                           SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nRST_Pin|SHIFT_DATA_IN_Pin
 800075e:	193b      	adds	r3, r7, r4
 8000760:	22ee      	movs	r2, #238	@ 0xee
 8000762:	0112      	lsls	r2, r2, #4
 8000764:	601a      	str	r2, [r3, #0]
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2201      	movs	r2, #1
 800076a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	193a      	adds	r2, r7, r4
 800077a:	23a0      	movs	r3, #160	@ 0xa0
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	0011      	movs	r1, r2
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fc17 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_ENABLE_Pin DEBUG_LED_Pin CAPTOUCH_RESET_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	4a2f      	ldr	r2, [pc, #188]	@ (8000848 <MX_GPIO_Init+0x1a0>)
 800078a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2201      	movs	r2, #1
 8000790:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	4a2a      	ldr	r2, [pc, #168]	@ (800084c <MX_GPIO_Init+0x1a4>)
 80007a2:	0019      	movs	r1, r3
 80007a4:	0010      	movs	r0, r2
 80007a6:	f000 fc05 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	2280      	movs	r2, #128	@ 0x80
 80007ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	2201      	movs	r2, #1
 80007b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	4a22      	ldr	r2, [pc, #136]	@ (8000850 <MX_GPIO_Init+0x1a8>)
 80007c6:	0019      	movs	r1, r3
 80007c8:	0010      	movs	r0, r2
 80007ca:	f000 fbf3 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_SET_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = ALARM_SET_BUTTON_EXTI_Pin;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	2280      	movs	r2, #128	@ 0x80
 80007d2:	0212      	lsls	r2, r2, #8
 80007d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2288      	movs	r2, #136	@ 0x88
 80007da:	0352      	lsls	r2, r2, #13
 80007dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALARM_SET_BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 80007e4:	193a      	adds	r2, r7, r4
 80007e6:	23a0      	movs	r3, #160	@ 0xa0
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fbe1 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_EXTI_Pin MINUTE_SET_BUTTON_EXTI_Pin ALARM_EN_BUTTON_EXTI_Pin DISPLAY_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_EXTI_Pin|MINUTE_SET_BUTTON_EXTI_Pin|ALARM_EN_BUTTON_EXTI_Pin|DISPLAY_BUTTON_EXTI_Pin;
 80007f2:	0021      	movs	r1, r4
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	220f      	movs	r2, #15
 80007f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2288      	movs	r2, #136	@ 0x88
 80007fe:	0352      	lsls	r2, r2, #13
 8000800:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000808:	000c      	movs	r4, r1
 800080a:	187b      	adds	r3, r7, r1
 800080c:	4a11      	ldr	r2, [pc, #68]	@ (8000854 <MX_GPIO_Init+0x1ac>)
 800080e:	0019      	movs	r1, r3
 8000810:	0010      	movs	r0, r2
 8000812:	f000 fbcf 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIME_SWITCH_EXTI_Pin CAPTOUCH_CHANGE_EXTI_Pin */
  GPIO_InitStruct.Pin = TIME_SWITCH_EXTI_Pin|CAPTOUCH_CHANGE_EXTI_Pin;
 8000816:	0021      	movs	r1, r4
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2284      	movs	r2, #132	@ 0x84
 800081c:	0092      	lsls	r2, r2, #2
 800081e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2288      	movs	r2, #136	@ 0x88
 8000824:	0352      	lsls	r2, r2, #13
 8000826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	187b      	adds	r3, r7, r1
 8000830:	4a06      	ldr	r2, [pc, #24]	@ (800084c <MX_GPIO_Init+0x1a4>)
 8000832:	0019      	movs	r1, r3
 8000834:	0010      	movs	r0, r2
 8000836:	f000 fbbd 	bl	8000fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b00b      	add	sp, #44	@ 0x2c
 8000840:	bd90      	pop	{r4, r7, pc}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	40021000 	.word	0x40021000
 8000848:	00001102 	.word	0x00001102
 800084c:	50000400 	.word	0x50000400
 8000850:	50000800 	.word	0x50000800
 8000854:	50000c00 	.word	0x50000c00

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	46c0      	nop			@ (mov r8, r8)
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <HAL_MspInit+0x44>)
 800086c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <HAL_MspInit+0x44>)
 8000870:	2101      	movs	r1, #1
 8000872:	430a      	orrs	r2, r1
 8000874:	641a      	str	r2, [r3, #64]	@ 0x40
 8000876:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <HAL_MspInit+0x44>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	2201      	movs	r2, #1
 800087c:	4013      	ands	r3, r2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <HAL_MspInit+0x44>)
 8000884:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <HAL_MspInit+0x44>)
 8000888:	2180      	movs	r1, #128	@ 0x80
 800088a:	0549      	lsls	r1, r1, #21
 800088c:	430a      	orrs	r2, r1
 800088e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000890:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <HAL_MspInit+0x44>)
 8000892:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000894:	2380      	movs	r3, #128	@ 0x80
 8000896:	055b      	lsls	r3, r3, #21
 8000898:	4013      	ands	r3, r2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b095      	sub	sp, #84	@ 0x54
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	233c      	movs	r3, #60	@ 0x3c
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	0018      	movs	r0, r3
 80008ba:	2314      	movs	r3, #20
 80008bc:	001a      	movs	r2, r3
 80008be:	2100      	movs	r1, #0
 80008c0:	f003 fa12 	bl	8003ce8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	2414      	movs	r4, #20
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	0018      	movs	r0, r3
 80008ca:	2328      	movs	r3, #40	@ 0x28
 80008cc:	001a      	movs	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	f003 fa0a 	bl	8003ce8 <memset>
  if(hi2c->Instance==I2C1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a22      	ldr	r2, [pc, #136]	@ (8000964 <HAL_I2C_MspInit+0xb8>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d13d      	bne.n	800095a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2220      	movs	r2, #32
 80008e2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	0018      	movs	r0, r3
 80008ee:	f001 fc33 	bl	8002158 <HAL_RCCEx_PeriphCLKConfig>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80008f6:	f7ff ffaf 	bl	8000858 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <HAL_I2C_MspInit+0xbc>)
 80008fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <HAL_I2C_MspInit+0xbc>)
 8000900:	2102      	movs	r1, #2
 8000902:	430a      	orrs	r2, r1
 8000904:	635a      	str	r2, [r3, #52]	@ 0x34
 8000906:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <HAL_I2C_MspInit+0xbc>)
 8000908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800090a:	2202      	movs	r2, #2
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000912:	213c      	movs	r1, #60	@ 0x3c
 8000914:	187b      	adds	r3, r7, r1
 8000916:	22c0      	movs	r2, #192	@ 0xc0
 8000918:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2212      	movs	r2, #18
 800091e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2206      	movs	r2, #6
 8000930:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	187b      	adds	r3, r7, r1
 8000934:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <HAL_I2C_MspInit+0xc0>)
 8000936:	0019      	movs	r1, r3
 8000938:	0010      	movs	r0, r2
 800093a:	f000 fb3b 	bl	8000fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <HAL_I2C_MspInit+0xbc>)
 8000940:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <HAL_I2C_MspInit+0xbc>)
 8000944:	2180      	movs	r1, #128	@ 0x80
 8000946:	0389      	lsls	r1, r1, #14
 8000948:	430a      	orrs	r2, r1
 800094a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <HAL_I2C_MspInit+0xbc>)
 800094e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000950:	2380      	movs	r3, #128	@ 0x80
 8000952:	039b      	lsls	r3, r3, #14
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b015      	add	sp, #84	@ 0x54
 8000960:	bd90      	pop	{r4, r7, pc}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	40005400 	.word	0x40005400
 8000968:	40021000 	.word	0x40021000
 800096c:	50000400 	.word	0x50000400

08000970 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b095      	sub	sp, #84	@ 0x54
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	233c      	movs	r3, #60	@ 0x3c
 800097a:	18fb      	adds	r3, r7, r3
 800097c:	0018      	movs	r0, r3
 800097e:	2314      	movs	r3, #20
 8000980:	001a      	movs	r2, r3
 8000982:	2100      	movs	r1, #0
 8000984:	f003 f9b0 	bl	8003ce8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000988:	2414      	movs	r4, #20
 800098a:	193b      	adds	r3, r7, r4
 800098c:	0018      	movs	r0, r3
 800098e:	2328      	movs	r3, #40	@ 0x28
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f003 f9a8 	bl	8003ce8 <memset>
  if(hi2s->Instance==SPI1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a34      	ldr	r2, [pc, #208]	@ (8000a70 <HAL_I2S_MspInit+0x100>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d161      	bne.n	8000a66 <HAL_I2S_MspInit+0xf6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2280      	movs	r2, #128	@ 0x80
 80009a6:	0112      	lsls	r2, r2, #4
 80009a8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	0018      	movs	r0, r3
 80009b4:	f001 fbd0 	bl	8002158 <HAL_RCCEx_PeriphCLKConfig>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80009bc:	f7ff ff4c 	bl	8000858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <HAL_I2S_MspInit+0x104>)
 80009c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a74 <HAL_I2S_MspInit+0x104>)
 80009c6:	2180      	movs	r1, #128	@ 0x80
 80009c8:	0149      	lsls	r1, r1, #5
 80009ca:	430a      	orrs	r2, r1
 80009cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80009ce:	4b29      	ldr	r3, [pc, #164]	@ (8000a74 <HAL_I2S_MspInit+0x104>)
 80009d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009d2:	2380      	movs	r3, #128	@ 0x80
 80009d4:	015b      	lsls	r3, r3, #5
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b25      	ldr	r3, [pc, #148]	@ (8000a74 <HAL_I2S_MspInit+0x104>)
 80009de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009e0:	4b24      	ldr	r3, [pc, #144]	@ (8000a74 <HAL_I2S_MspInit+0x104>)
 80009e2:	2101      	movs	r1, #1
 80009e4:	430a      	orrs	r2, r1
 80009e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80009e8:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <HAL_I2S_MspInit+0x104>)
 80009ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ec:	2201      	movs	r2, #1
 80009ee:	4013      	ands	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <HAL_I2S_MspInit+0x104>)
 80009f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <HAL_I2S_MspInit+0x104>)
 80009fa:	2102      	movs	r1, #2
 80009fc:	430a      	orrs	r2, r1
 80009fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a00:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <HAL_I2S_MspInit+0x104>)
 8000a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a04:	2202      	movs	r2, #2
 8000a06:	4013      	ands	r3, r2
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PA2     ------> I2S1_SD
    PB0     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000a0c:	243c      	movs	r4, #60	@ 0x3c
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	2206      	movs	r2, #6
 8000a12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	2202      	movs	r2, #2
 8000a18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	193a      	adds	r2, r7, r4
 8000a2e:	23a0      	movs	r3, #160	@ 0xa0
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	0011      	movs	r1, r2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 fabd 	bl	8000fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a3a:	0021      	movs	r1, r4
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2202      	movs	r2, #2
 8000a46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	4a06      	ldr	r2, [pc, #24]	@ (8000a78 <HAL_I2S_MspInit+0x108>)
 8000a5e:	0019      	movs	r1, r3
 8000a60:	0010      	movs	r0, r2
 8000a62:	f000 faa7 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b015      	add	sp, #84	@ 0x54
 8000a6c:	bd90      	pop	{r4, r7, pc}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	40013000 	.word	0x40013000
 8000a74:	40021000 	.word	0x40021000
 8000a78:	50000400 	.word	0x50000400

08000a7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b08f      	sub	sp, #60	@ 0x3c
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	2410      	movs	r4, #16
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	0018      	movs	r0, r3
 8000a8a:	2328      	movs	r3, #40	@ 0x28
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f003 f92a 	bl	8003ce8 <memset>
  if(hrtc->Instance==RTC)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a15      	ldr	r2, [pc, #84]	@ (8000af0 <HAL_RTC_MspInit+0x74>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d124      	bne.n	8000ae8 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	2280      	movs	r2, #128	@ 0x80
 8000aa2:	0292      	lsls	r2, r2, #10
 8000aa4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2280      	movs	r2, #128	@ 0x80
 8000aaa:	0052      	lsls	r2, r2, #1
 8000aac:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f001 fb51 	bl	8002158 <HAL_RCCEx_PeriphCLKConfig>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000aba:	f7ff fecd 	bl	8000858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000abe:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <HAL_RTC_MspInit+0x78>)
 8000ac0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <HAL_RTC_MspInit+0x78>)
 8000ac4:	2180      	movs	r1, #128	@ 0x80
 8000ac6:	0209      	lsls	r1, r1, #8
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <HAL_RTC_MspInit+0x78>)
 8000ace:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <HAL_RTC_MspInit+0x78>)
 8000ad2:	2180      	movs	r1, #128	@ 0x80
 8000ad4:	00c9      	lsls	r1, r1, #3
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_RTC_MspInit+0x78>)
 8000adc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ade:	2380      	movs	r3, #128	@ 0x80
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b00f      	add	sp, #60	@ 0x3c
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	40002800 	.word	0x40002800
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b08b      	sub	sp, #44	@ 0x2c
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	2414      	movs	r4, #20
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	0018      	movs	r0, r3
 8000b06:	2314      	movs	r3, #20
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f003 f8ec 	bl	8003ce8 <memset>
  if(hspi->Instance==SPI2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a26      	ldr	r2, [pc, #152]	@ (8000bb0 <HAL_SPI_MspInit+0xb8>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d146      	bne.n	8000ba8 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b1a:	4b26      	ldr	r3, [pc, #152]	@ (8000bb4 <HAL_SPI_MspInit+0xbc>)
 8000b1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b1e:	4b25      	ldr	r3, [pc, #148]	@ (8000bb4 <HAL_SPI_MspInit+0xbc>)
 8000b20:	2180      	movs	r1, #128	@ 0x80
 8000b22:	01c9      	lsls	r1, r1, #7
 8000b24:	430a      	orrs	r2, r1
 8000b26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b28:	4b22      	ldr	r3, [pc, #136]	@ (8000bb4 <HAL_SPI_MspInit+0xbc>)
 8000b2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	01db      	lsls	r3, r3, #7
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb4 <HAL_SPI_MspInit+0xbc>)
 8000b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <HAL_SPI_MspInit+0xbc>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b42:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb4 <HAL_SPI_MspInit+0xbc>)
 8000b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	2209      	movs	r2, #9
 8000b52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	2202      	movs	r2, #2
 8000b58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	193a      	adds	r2, r7, r4
 8000b6e:	23a0      	movs	r3, #160	@ 0xa0
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f000 fa1d 	bl	8000fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b7a:	0021      	movs	r1, r4
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2210      	movs	r2, #16
 8000b80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2202      	movs	r2, #2
 8000b86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2201      	movs	r2, #1
 8000b98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	187a      	adds	r2, r7, r1
 8000b9c:	23a0      	movs	r3, #160	@ 0xa0
 8000b9e:	05db      	lsls	r3, r3, #23
 8000ba0:	0011      	movs	r1, r2
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f000 fa06 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ba8:	46c0      	nop			@ (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b00b      	add	sp, #44	@ 0x2c
 8000bae:	bd90      	pop	{r4, r7, pc}
 8000bb0:	40003800 	.word	0x40003800
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	2380      	movs	r3, #128	@ 0x80
 8000bc6:	05db      	lsls	r3, r3, #23
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d10b      	bne.n	8000be4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <HAL_TIM_PWM_MspInit+0x34>)
 8000bce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_TIM_PWM_MspInit+0x34>)
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bd8:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <HAL_TIM_PWM_MspInit+0x34>)
 8000bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4013      	ands	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000be4:	46c0      	nop			@ (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b004      	add	sp, #16
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	240c      	movs	r4, #12
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	2314      	movs	r3, #20
 8000c00:	001a      	movs	r2, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	f003 f870 	bl	8003ce8 <memset>
  if(htim->Instance==TIM2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	2380      	movs	r3, #128	@ 0x80
 8000c0e:	05db      	lsls	r3, r3, #23
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d121      	bne.n	8000c58 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c14:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <HAL_TIM_MspPostInit+0x70>)
 8000c16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <HAL_TIM_MspPostInit+0x70>)
 8000c1a:	2104      	movs	r1, #4
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <HAL_TIM_MspPostInit+0x70>)
 8000c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c24:	2204      	movs	r2, #4
 8000c26:	4013      	ands	r3, r2
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_SHIFT_nOE_Pin;
 8000c2c:	0021      	movs	r1, r4
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2240      	movs	r2, #64	@ 0x40
 8000c32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2202      	movs	r2, #2
 8000c38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2202      	movs	r2, #2
 8000c4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_SHIFT_nOE_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <HAL_TIM_MspPostInit+0x74>)
 8000c50:	0019      	movs	r1, r3
 8000c52:	0010      	movs	r0, r2
 8000c54:	f000 f9ae 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c58:	46c0      	nop			@ (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b009      	add	sp, #36	@ 0x24
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	40021000 	.word	0x40021000
 8000c64:	50000800 	.word	0x50000800

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	e7fd      	b.n	8000c6c <NMI_Handler+0x4>

08000c70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	e7fd      	b.n	8000c74 <HardFault_Handler+0x4>

08000c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 f89c 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	46c0      	nop			@ (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca4:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ca6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ca8:	f7ff fff7 	bl	8000c9a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cac:	480c      	ldr	r0, [pc, #48]	@ (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cae:	490d      	ldr	r1, [pc, #52]	@ (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cd2:	f003 f811 	bl	8003cf8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cd6:	f7ff faa1 	bl	800021c <main>

08000cda <LoopForever>:

LoopForever:
  b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   r0, =_estack
 8000cdc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ce8:	08003e14 	.word	0x08003e14
  ldr r2, =_sbss
 8000cec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cf0:	20000198 	.word	0x20000198

08000cf4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <HAL_Init+0x3c>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <HAL_Init+0x3c>)
 8000d0a:	2180      	movs	r1, #128	@ 0x80
 8000d0c:	0049      	lsls	r1, r1, #1
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d12:	2003      	movs	r0, #3
 8000d14:	f000 f810 	bl	8000d38 <HAL_InitTick>
 8000d18:	1e03      	subs	r3, r0, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	e001      	b.n	8000d28 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff fd9e 	bl	8000864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	781b      	ldrb	r3, [r3, #0]
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40022000 	.word	0x40022000

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d40:	230f      	movs	r3, #15
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d48:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <HAL_InitTick+0x88>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d02b      	beq.n	8000da8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d50:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc4 <HAL_InitTick+0x8c>)
 8000d52:	681c      	ldr	r4, [r3, #0]
 8000d54:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <HAL_InitTick+0x88>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	0019      	movs	r1, r3
 8000d5a:	23fa      	movs	r3, #250	@ 0xfa
 8000d5c:	0098      	lsls	r0, r3, #2
 8000d5e:	f7ff f9d1 	bl	8000104 <__udivsi3>
 8000d62:	0003      	movs	r3, r0
 8000d64:	0019      	movs	r1, r3
 8000d66:	0020      	movs	r0, r4
 8000d68:	f7ff f9cc 	bl	8000104 <__udivsi3>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 f913 	bl	8000f9a <HAL_SYSTICK_Config>
 8000d74:	1e03      	subs	r3, r0, #0
 8000d76:	d112      	bne.n	8000d9e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d80a      	bhi.n	8000d94 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	2301      	movs	r3, #1
 8000d82:	425b      	negs	r3, r3
 8000d84:	2200      	movs	r2, #0
 8000d86:	0018      	movs	r0, r3
 8000d88:	f000 f8f2 	bl	8000f70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <HAL_InitTick+0x90>)
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	e00d      	b.n	8000db0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d94:	230f      	movs	r3, #15
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	e008      	b.n	8000db0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d9e:	230f      	movs	r3, #15
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e003      	b.n	8000db0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da8:	230f      	movs	r3, #15
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	781b      	ldrb	r3, [r3, #0]
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b005      	add	sp, #20
 8000dbc:	bd90      	pop	{r4, r7, pc}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <HAL_IncTick+0x1c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <HAL_IncTick+0x20>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	18d2      	adds	r2, r2, r3
 8000ddc:	4b03      	ldr	r3, [pc, #12]	@ (8000dec <HAL_IncTick+0x20>)
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	46c0      	nop			@ (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000194 	.word	0x20000194

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b02      	ldr	r3, [pc, #8]	@ (8000e00 <HAL_GetTick+0x10>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	0018      	movs	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	20000194 	.word	0x20000194

08000e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e0c:	f7ff fff0 	bl	8000df0 <HAL_GetTick>
 8000e10:	0003      	movs	r3, r0
 8000e12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	d005      	beq.n	8000e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <HAL_Delay+0x44>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	001a      	movs	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	189b      	adds	r3, r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	f7ff ffe0 	bl	8000df0 <HAL_GetTick>
 8000e30:	0002      	movs	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d8f7      	bhi.n	8000e2c <HAL_Delay+0x28>
  {
  }
}
 8000e3c:	46c0      	nop			@ (mov r8, r8)
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b004      	add	sp, #16
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	20000008 	.word	0x20000008

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	0002      	movs	r2, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e60:	d828      	bhi.n	8000eb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e62:	4a2f      	ldr	r2, [pc, #188]	@ (8000f20 <__NVIC_SetPriority+0xd4>)
 8000e64:	1dfb      	adds	r3, r7, #7
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	33c0      	adds	r3, #192	@ 0xc0
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	589b      	ldr	r3, [r3, r2]
 8000e72:	1dfa      	adds	r2, r7, #7
 8000e74:	7812      	ldrb	r2, [r2, #0]
 8000e76:	0011      	movs	r1, r2
 8000e78:	2203      	movs	r2, #3
 8000e7a:	400a      	ands	r2, r1
 8000e7c:	00d2      	lsls	r2, r2, #3
 8000e7e:	21ff      	movs	r1, #255	@ 0xff
 8000e80:	4091      	lsls	r1, r2
 8000e82:	000a      	movs	r2, r1
 8000e84:	43d2      	mvns	r2, r2
 8000e86:	401a      	ands	r2, r3
 8000e88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	019b      	lsls	r3, r3, #6
 8000e8e:	22ff      	movs	r2, #255	@ 0xff
 8000e90:	401a      	ands	r2, r3
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	0018      	movs	r0, r3
 8000e98:	2303      	movs	r3, #3
 8000e9a:	4003      	ands	r3, r0
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea0:	481f      	ldr	r0, [pc, #124]	@ (8000f20 <__NVIC_SetPriority+0xd4>)
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	33c0      	adds	r3, #192	@ 0xc0
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eb2:	e031      	b.n	8000f18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f24 <__NVIC_SetPriority+0xd8>)
 8000eb6:	1dfb      	adds	r3, r7, #7
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	0019      	movs	r1, r3
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	400b      	ands	r3, r1
 8000ec0:	3b08      	subs	r3, #8
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3306      	adds	r3, #6
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	18d3      	adds	r3, r2, r3
 8000eca:	3304      	adds	r3, #4
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	1dfa      	adds	r2, r7, #7
 8000ed0:	7812      	ldrb	r2, [r2, #0]
 8000ed2:	0011      	movs	r1, r2
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	400a      	ands	r2, r1
 8000ed8:	00d2      	lsls	r2, r2, #3
 8000eda:	21ff      	movs	r1, #255	@ 0xff
 8000edc:	4091      	lsls	r1, r2
 8000ede:	000a      	movs	r2, r1
 8000ee0:	43d2      	mvns	r2, r2
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	019b      	lsls	r3, r3, #6
 8000eea:	22ff      	movs	r2, #255	@ 0xff
 8000eec:	401a      	ands	r2, r3
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	4003      	ands	r3, r0
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000efc:	4809      	ldr	r0, [pc, #36]	@ (8000f24 <__NVIC_SetPriority+0xd8>)
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	001c      	movs	r4, r3
 8000f04:	230f      	movs	r3, #15
 8000f06:	4023      	ands	r3, r4
 8000f08:	3b08      	subs	r3, #8
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	3306      	adds	r3, #6
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	18c3      	adds	r3, r0, r3
 8000f14:	3304      	adds	r3, #4
 8000f16:	601a      	str	r2, [r3, #0]
}
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b003      	add	sp, #12
 8000f1e:	bd90      	pop	{r4, r7, pc}
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	1e5a      	subs	r2, r3, #1
 8000f34:	2380      	movs	r3, #128	@ 0x80
 8000f36:	045b      	lsls	r3, r3, #17
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d301      	bcc.n	8000f40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e010      	b.n	8000f62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f40:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <SysTick_Config+0x44>)
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	3a01      	subs	r2, #1
 8000f46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f48:	2301      	movs	r3, #1
 8000f4a:	425b      	negs	r3, r3
 8000f4c:	2103      	movs	r1, #3
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f7ff ff7c 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f54:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <SysTick_Config+0x44>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5a:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <SysTick_Config+0x44>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	0018      	movs	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b002      	add	sp, #8
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	e000e010 	.word	0xe000e010

08000f70 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	1c02      	adds	r2, r0, #0
 8000f80:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff ff5d 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b004      	add	sp, #16
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f7ff ffbf 	bl	8000f28 <SysTick_Config>
 8000faa:	0003      	movs	r3, r0
}
 8000fac:	0018      	movs	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc2:	e147      	b.n	8001254 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	000a      	movs	r2, r1
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d100      	bne.n	8000fdc <HAL_GPIO_Init+0x28>
 8000fda:	e138      	b.n	800124e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d005      	beq.n	8000ff4 <HAL_GPIO_Init+0x40>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d130      	bne.n	8001056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	409a      	lsls	r2, r3
 8001002:	0013      	movs	r3, r2
 8001004:	43da      	mvns	r2, r3
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	409a      	lsls	r2, r3
 8001016:	0013      	movs	r3, r2
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800102a:	2201      	movs	r2, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	43da      	mvns	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	2201      	movs	r2, #1
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
 8001048:	0013      	movs	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2203      	movs	r2, #3
 800105c:	4013      	ands	r3, r2
 800105e:	2b03      	cmp	r3, #3
 8001060:	d017      	beq.n	8001092 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	43da      	mvns	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	409a      	lsls	r2, r3
 8001084:	0013      	movs	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2203      	movs	r2, #3
 8001098:	4013      	ands	r3, r2
 800109a:	2b02      	cmp	r3, #2
 800109c:	d123      	bne.n	80010e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	58d3      	ldr	r3, [r2, r3]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	2207      	movs	r2, #7
 80010b0:	4013      	ands	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	43da      	mvns	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	2107      	movs	r1, #7
 80010ca:	400b      	ands	r3, r1
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	6939      	ldr	r1, [r7, #16]
 80010e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	43da      	mvns	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2203      	movs	r2, #3
 8001104:	401a      	ands	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	23c0      	movs	r3, #192	@ 0xc0
 8001120:	029b      	lsls	r3, r3, #10
 8001122:	4013      	ands	r3, r2
 8001124:	d100      	bne.n	8001128 <HAL_GPIO_Init+0x174>
 8001126:	e092      	b.n	800124e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001128:	4a50      	ldr	r2, [pc, #320]	@ (800126c <HAL_GPIO_Init+0x2b8>)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3318      	adds	r3, #24
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	589b      	ldr	r3, [r3, r2]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2203      	movs	r2, #3
 800113a:	4013      	ands	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	220f      	movs	r2, #15
 8001140:	409a      	lsls	r2, r3
 8001142:	0013      	movs	r3, r2
 8001144:	43da      	mvns	r2, r3
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	23a0      	movs	r3, #160	@ 0xa0
 8001150:	05db      	lsls	r3, r3, #23
 8001152:	429a      	cmp	r2, r3
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0x1ca>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a45      	ldr	r2, [pc, #276]	@ (8001270 <HAL_GPIO_Init+0x2bc>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00d      	beq.n	800117a <HAL_GPIO_Init+0x1c6>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a44      	ldr	r2, [pc, #272]	@ (8001274 <HAL_GPIO_Init+0x2c0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d007      	beq.n	8001176 <HAL_GPIO_Init+0x1c2>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a43      	ldr	r2, [pc, #268]	@ (8001278 <HAL_GPIO_Init+0x2c4>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_GPIO_Init+0x1be>
 800116e:	2303      	movs	r3, #3
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x1cc>
 8001172:	2305      	movs	r3, #5
 8001174:	e004      	b.n	8001180 <HAL_GPIO_Init+0x1cc>
 8001176:	2302      	movs	r3, #2
 8001178:	e002      	b.n	8001180 <HAL_GPIO_Init+0x1cc>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_GPIO_Init+0x1cc>
 800117e:	2300      	movs	r3, #0
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	2103      	movs	r1, #3
 8001184:	400a      	ands	r2, r1
 8001186:	00d2      	lsls	r2, r2, #3
 8001188:	4093      	lsls	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001190:	4936      	ldr	r1, [pc, #216]	@ (800126c <HAL_GPIO_Init+0x2b8>)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3318      	adds	r3, #24
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800119e:	4b33      	ldr	r3, [pc, #204]	@ (800126c <HAL_GPIO_Init+0x2b8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43da      	mvns	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	2380      	movs	r3, #128	@ 0x80
 80011b4:	035b      	lsls	r3, r3, #13
 80011b6:	4013      	ands	r3, r2
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011c2:	4b2a      	ldr	r3, [pc, #168]	@ (800126c <HAL_GPIO_Init+0x2b8>)
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80011c8:	4b28      	ldr	r3, [pc, #160]	@ (800126c <HAL_GPIO_Init+0x2b8>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43da      	mvns	r2, r3
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	2380      	movs	r3, #128	@ 0x80
 80011de:	039b      	lsls	r3, r3, #14
 80011e0:	4013      	ands	r3, r2
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	@ (800126c <HAL_GPIO_Init+0x2b8>)
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011f2:	4a1e      	ldr	r2, [pc, #120]	@ (800126c <HAL_GPIO_Init+0x2b8>)
 80011f4:	2384      	movs	r3, #132	@ 0x84
 80011f6:	58d3      	ldr	r3, [r2, r3]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43da      	mvns	r2, r3
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	2380      	movs	r3, #128	@ 0x80
 800120a:	029b      	lsls	r3, r3, #10
 800120c:	4013      	ands	r3, r2
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001218:	4914      	ldr	r1, [pc, #80]	@ (800126c <HAL_GPIO_Init+0x2b8>)
 800121a:	2284      	movs	r2, #132	@ 0x84
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001220:	4a12      	ldr	r2, [pc, #72]	@ (800126c <HAL_GPIO_Init+0x2b8>)
 8001222:	2380      	movs	r3, #128	@ 0x80
 8001224:	58d3      	ldr	r3, [r2, r3]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43da      	mvns	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	2380      	movs	r3, #128	@ 0x80
 8001238:	025b      	lsls	r3, r3, #9
 800123a:	4013      	ands	r3, r2
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001246:	4909      	ldr	r1, [pc, #36]	@ (800126c <HAL_GPIO_Init+0x2b8>)
 8001248:	2280      	movs	r2, #128	@ 0x80
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	40da      	lsrs	r2, r3
 800125c:	1e13      	subs	r3, r2, #0
 800125e:	d000      	beq.n	8001262 <HAL_GPIO_Init+0x2ae>
 8001260:	e6b0      	b.n	8000fc4 <HAL_GPIO_Init+0x10>
  }
}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	46c0      	nop			@ (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b006      	add	sp, #24
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40021800 	.word	0x40021800
 8001270:	50000400 	.word	0x50000400
 8001274:	50000800 	.word	0x50000800
 8001278:	50000c00 	.word	0x50000c00

0800127c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	0008      	movs	r0, r1
 8001286:	0011      	movs	r1, r2
 8001288:	1cbb      	adds	r3, r7, #2
 800128a:	1c02      	adds	r2, r0, #0
 800128c:	801a      	strh	r2, [r3, #0]
 800128e:	1c7b      	adds	r3, r7, #1
 8001290:	1c0a      	adds	r2, r1, #0
 8001292:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001294:	1c7b      	adds	r3, r7, #1
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d004      	beq.n	80012a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800129c:	1cbb      	adds	r3, r7, #2
 800129e:	881a      	ldrh	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a4:	e003      	b.n	80012ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012a6:	1cbb      	adds	r3, r7, #2
 80012a8:	881a      	ldrh	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012ae:	46c0      	nop			@ (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b002      	add	sp, #8
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e08f      	b.n	80013ea <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2241      	movs	r2, #65	@ 0x41
 80012ce:	5c9b      	ldrb	r3, [r3, r2]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d107      	bne.n	80012e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2240      	movs	r2, #64	@ 0x40
 80012da:	2100      	movs	r1, #0
 80012dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff fae3 	bl	80008ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2241      	movs	r2, #65	@ 0x41
 80012ea:	2124      	movs	r1, #36	@ 0x24
 80012ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2101      	movs	r1, #1
 80012fa:	438a      	bics	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	493b      	ldr	r1, [pc, #236]	@ (80013f4 <HAL_I2C_Init+0x13c>)
 8001308:	400a      	ands	r2, r1
 800130a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4938      	ldr	r1, [pc, #224]	@ (80013f8 <HAL_I2C_Init+0x140>)
 8001318:	400a      	ands	r2, r1
 800131a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d108      	bne.n	8001336 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2180      	movs	r1, #128	@ 0x80
 800132e:	0209      	lsls	r1, r1, #8
 8001330:	430a      	orrs	r2, r1
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	e007      	b.n	8001346 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2184      	movs	r1, #132	@ 0x84
 8001340:	0209      	lsls	r1, r1, #8
 8001342:	430a      	orrs	r2, r1
 8001344:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d109      	bne.n	8001362 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2180      	movs	r1, #128	@ 0x80
 800135a:	0109      	lsls	r1, r1, #4
 800135c:	430a      	orrs	r2, r1
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	e007      	b.n	8001372 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4923      	ldr	r1, [pc, #140]	@ (80013fc <HAL_I2C_Init+0x144>)
 800136e:	400a      	ands	r2, r1
 8001370:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4920      	ldr	r1, [pc, #128]	@ (8001400 <HAL_I2C_Init+0x148>)
 800137e:	430a      	orrs	r2, r1
 8001380:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	491a      	ldr	r1, [pc, #104]	@ (80013f8 <HAL_I2C_Init+0x140>)
 800138e:	400a      	ands	r2, r1
 8001390:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	431a      	orrs	r2, r3
 800139c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69d9      	ldr	r1, [r3, #28]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1a      	ldr	r2, [r3, #32]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2101      	movs	r1, #1
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2241      	movs	r2, #65	@ 0x41
 80013d6:	2120      	movs	r1, #32
 80013d8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2242      	movs	r2, #66	@ 0x42
 80013e4:	2100      	movs	r1, #0
 80013e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	0018      	movs	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	f0ffffff 	.word	0xf0ffffff
 80013f8:	ffff7fff 	.word	0xffff7fff
 80013fc:	fffff7ff 	.word	0xfffff7ff
 8001400:	02008000 	.word	0x02008000

08001404 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2241      	movs	r2, #65	@ 0x41
 8001412:	5c9b      	ldrb	r3, [r3, r2]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b20      	cmp	r3, #32
 8001418:	d138      	bne.n	800148c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2240      	movs	r2, #64	@ 0x40
 800141e:	5c9b      	ldrb	r3, [r3, r2]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001424:	2302      	movs	r3, #2
 8001426:	e032      	b.n	800148e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2240      	movs	r2, #64	@ 0x40
 800142c:	2101      	movs	r1, #1
 800142e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2241      	movs	r2, #65	@ 0x41
 8001434:	2124      	movs	r1, #36	@ 0x24
 8001436:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2101      	movs	r1, #1
 8001444:	438a      	bics	r2, r1
 8001446:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4911      	ldr	r1, [pc, #68]	@ (8001498 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001454:	400a      	ands	r2, r1
 8001456:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6819      	ldr	r1, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2101      	movs	r1, #1
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2241      	movs	r2, #65	@ 0x41
 800147c:	2120      	movs	r1, #32
 800147e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2240      	movs	r2, #64	@ 0x40
 8001484:	2100      	movs	r1, #0
 8001486:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	e000      	b.n	800148e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800148c:	2302      	movs	r3, #2
  }
}
 800148e:	0018      	movs	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	b002      	add	sp, #8
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			@ (mov r8, r8)
 8001498:	ffffefff 	.word	0xffffefff

0800149c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2241      	movs	r2, #65	@ 0x41
 80014aa:	5c9b      	ldrb	r3, [r3, r2]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b20      	cmp	r3, #32
 80014b0:	d139      	bne.n	8001526 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2240      	movs	r2, #64	@ 0x40
 80014b6:	5c9b      	ldrb	r3, [r3, r2]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014bc:	2302      	movs	r3, #2
 80014be:	e033      	b.n	8001528 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2240      	movs	r2, #64	@ 0x40
 80014c4:	2101      	movs	r1, #1
 80014c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2241      	movs	r2, #65	@ 0x41
 80014cc:	2124      	movs	r1, #36	@ 0x24
 80014ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2101      	movs	r1, #1
 80014dc:	438a      	bics	r2, r1
 80014de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4a11      	ldr	r2, [pc, #68]	@ (8001530 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2101      	movs	r1, #1
 800150e:	430a      	orrs	r2, r1
 8001510:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2241      	movs	r2, #65	@ 0x41
 8001516:	2120      	movs	r1, #32
 8001518:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2240      	movs	r2, #64	@ 0x40
 800151e:	2100      	movs	r1, #0
 8001520:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001526:	2302      	movs	r3, #2
  }
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b004      	add	sp, #16
 800152e:	bd80      	pop	{r7, pc}
 8001530:	fffff0ff 	.word	0xfffff0ff

08001534 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e0e5      	b.n	8001712 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2235      	movs	r2, #53	@ 0x35
 800154a:	5c9b      	ldrb	r3, [r3, r2]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d107      	bne.n	8001562 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2234      	movs	r2, #52	@ 0x34
 8001556:	2100      	movs	r1, #0
 8001558:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	0018      	movs	r0, r3
 800155e:	f7ff fa07 	bl	8000970 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2235      	movs	r2, #53	@ 0x35
 8001566:	2102      	movs	r1, #2
 8001568:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	69da      	ldr	r2, [r3, #28]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4969      	ldr	r1, [pc, #420]	@ (800171c <HAL_I2S_Init+0x1e8>)
 8001576:	400a      	ands	r2, r1
 8001578:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2202      	movs	r2, #2
 8001580:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d100      	bne.n	800158c <HAL_I2S_Init+0x58>
 800158a:	e076      	b.n	800167a <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001594:	2310      	movs	r3, #16
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e001      	b.n	800159e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800159a:	2320      	movs	r3, #32
 800159c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b20      	cmp	r3, #32
 80015a4:	d802      	bhi.n	80015ac <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 80015ac:	2380      	movs	r3, #128	@ 0x80
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	0018      	movs	r0, r3
 80015b2:	f000 ff4b 	bl	800244c <HAL_RCCEx_GetPeriphCLKFreq>
 80015b6:	0003      	movs	r3, r0
 80015b8:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691a      	ldr	r2, [r3, #16]
 80015be:	2380      	movs	r3, #128	@ 0x80
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d131      	bne.n	800162a <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d016      	beq.n	80015fc <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	0019      	movs	r1, r3
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f7fe fd95 	bl	8000104 <__udivsi3>
 80015da:	0003      	movs	r3, r0
 80015dc:	001a      	movs	r2, r3
 80015de:	0013      	movs	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	189b      	adds	r3, r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	001a      	movs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	0019      	movs	r1, r3
 80015ee:	0010      	movs	r0, r2
 80015f0:	f7fe fd88 	bl	8000104 <__udivsi3>
 80015f4:	0003      	movs	r3, r0
 80015f6:	3305      	adds	r3, #5
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	e02a      	b.n	8001652 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	0019      	movs	r1, r3
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f7fe fd7e 	bl	8000104 <__udivsi3>
 8001608:	0003      	movs	r3, r0
 800160a:	001a      	movs	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	189b      	adds	r3, r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	001a      	movs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	0019      	movs	r1, r3
 800161c:	0010      	movs	r0, r2
 800161e:	f7fe fd71 	bl	8000104 <__udivsi3>
 8001622:	0003      	movs	r3, r0
 8001624:	3305      	adds	r3, #5
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	e013      	b.n	8001652 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800162a:	6979      	ldr	r1, [r7, #20]
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7fe fd69 	bl	8000104 <__udivsi3>
 8001632:	0003      	movs	r3, r0
 8001634:	001a      	movs	r2, r3
 8001636:	0013      	movs	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	189b      	adds	r3, r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	001a      	movs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	0019      	movs	r1, r3
 8001646:	0010      	movs	r0, r2
 8001648:	f7fe fd5c 	bl	8000104 <__udivsi3>
 800164c:	0003      	movs	r3, r0
 800164e:	3305      	adds	r3, #5
 8001650:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	210a      	movs	r1, #10
 8001656:	0018      	movs	r0, r3
 8001658:	f7fe fd54 	bl	8000104 <__udivsi3>
 800165c:	0003      	movs	r3, r0
 800165e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	2201      	movs	r2, #1
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	e003      	b.n	8001682 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800167a:	2302      	movs	r3, #2
 800167c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d902      	bls.n	800168e <HAL_I2S_Init+0x15a>
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	2bff      	cmp	r3, #255	@ 0xff
 800168c:	d907      	bls.n	800169e <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001692:	2210      	movs	r2, #16
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e039      	b.n	8001712 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	0011      	movs	r1, r2
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	4a18      	ldr	r2, [pc, #96]	@ (800171c <HAL_I2S_Init+0x1e8>)
 80016ba:	401a      	ands	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6859      	ldr	r1, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	4319      	orrs	r1, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	4319      	orrs	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	430b      	orrs	r3, r1
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2180      	movs	r1, #128	@ 0x80
 80016da:	0109      	lsls	r1, r1, #4
 80016dc:	430a      	orrs	r2, r1
 80016de:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b30      	cmp	r3, #48	@ 0x30
 80016e6:	d003      	beq.n	80016f0 <HAL_I2S_Init+0x1bc>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2bb0      	cmp	r3, #176	@ 0xb0
 80016ee:	d108      	bne.n	8001702 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	69da      	ldr	r2, [r3, #28]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2180      	movs	r1, #128	@ 0x80
 80016fc:	0149      	lsls	r1, r1, #5
 80016fe:	430a      	orrs	r2, r1
 8001700:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2235      	movs	r2, #53	@ 0x35
 800170c:	2101      	movs	r1, #1
 800170e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	0018      	movs	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	b008      	add	sp, #32
 8001718:	bd80      	pop	{r7, pc}
 800171a:	46c0      	nop			@ (mov r8, r8)
 800171c:	fffff040 	.word	0xfffff040

08001720 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b03      	ldr	r3, [pc, #12]	@ (8001738 <HAL_PWR_EnableBkUpAccess+0x18>)
 800172a:	2180      	movs	r1, #128	@ 0x80
 800172c:	0049      	lsls	r1, r1, #1
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
}
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40007000 	.word	0x40007000

0800173c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a19      	ldr	r2, [pc, #100]	@ (80017b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800174a:	4013      	ands	r3, r2
 800174c:	0019      	movs	r1, r3
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	2380      	movs	r3, #128	@ 0x80
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	429a      	cmp	r2, r3
 800175e:	d11f      	bne.n	80017a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001760:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	0013      	movs	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	189b      	adds	r3, r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4912      	ldr	r1, [pc, #72]	@ (80017b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800176e:	0018      	movs	r0, r3
 8001770:	f7fe fcc8 	bl	8000104 <__udivsi3>
 8001774:	0003      	movs	r3, r0
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800177a:	e008      	b.n	800178e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3b01      	subs	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	e001      	b.n	800178e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e009      	b.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001790:	695a      	ldr	r2, [r3, #20]
 8001792:	2380      	movs	r3, #128	@ 0x80
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	401a      	ands	r2, r3
 8001798:	2380      	movs	r3, #128	@ 0x80
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	429a      	cmp	r2, r3
 800179e:	d0ed      	beq.n	800177c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	0018      	movs	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b004      	add	sp, #16
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	40007000 	.word	0x40007000
 80017b0:	fffff9ff 	.word	0xfffff9ff
 80017b4:	20000000 	.word	0x20000000
 80017b8:	000f4240 	.word	0x000f4240

080017bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	23e0      	movs	r3, #224	@ 0xe0
 80017c6:	01db      	lsls	r3, r3, #7
 80017c8:	4013      	ands	r3, r2
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e2fe      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2201      	movs	r2, #1
 80017ec:	4013      	ands	r3, r2
 80017ee:	d100      	bne.n	80017f2 <HAL_RCC_OscConfig+0x1e>
 80017f0:	e07c      	b.n	80018ec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f2:	4bc3      	ldr	r3, [pc, #780]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2238      	movs	r2, #56	@ 0x38
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017fc:	4bc0      	ldr	r3, [pc, #768]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2203      	movs	r2, #3
 8001802:	4013      	ands	r3, r2
 8001804:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	2b10      	cmp	r3, #16
 800180a:	d102      	bne.n	8001812 <HAL_RCC_OscConfig+0x3e>
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	2b03      	cmp	r3, #3
 8001810:	d002      	beq.n	8001818 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	2b08      	cmp	r3, #8
 8001816:	d10b      	bne.n	8001830 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	4bb9      	ldr	r3, [pc, #740]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	029b      	lsls	r3, r3, #10
 8001820:	4013      	ands	r3, r2
 8001822:	d062      	beq.n	80018ea <HAL_RCC_OscConfig+0x116>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d15e      	bne.n	80018ea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e2d9      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	2380      	movs	r3, #128	@ 0x80
 8001836:	025b      	lsls	r3, r3, #9
 8001838:	429a      	cmp	r2, r3
 800183a:	d107      	bne.n	800184c <HAL_RCC_OscConfig+0x78>
 800183c:	4bb0      	ldr	r3, [pc, #704]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4baf      	ldr	r3, [pc, #700]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001842:	2180      	movs	r1, #128	@ 0x80
 8001844:	0249      	lsls	r1, r1, #9
 8001846:	430a      	orrs	r2, r1
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e020      	b.n	800188e <HAL_RCC_OscConfig+0xba>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	23a0      	movs	r3, #160	@ 0xa0
 8001852:	02db      	lsls	r3, r3, #11
 8001854:	429a      	cmp	r2, r3
 8001856:	d10e      	bne.n	8001876 <HAL_RCC_OscConfig+0xa2>
 8001858:	4ba9      	ldr	r3, [pc, #676]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4ba8      	ldr	r3, [pc, #672]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800185e:	2180      	movs	r1, #128	@ 0x80
 8001860:	02c9      	lsls	r1, r1, #11
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	4ba6      	ldr	r3, [pc, #664]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4ba5      	ldr	r3, [pc, #660]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800186c:	2180      	movs	r1, #128	@ 0x80
 800186e:	0249      	lsls	r1, r1, #9
 8001870:	430a      	orrs	r2, r1
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	e00b      	b.n	800188e <HAL_RCC_OscConfig+0xba>
 8001876:	4ba2      	ldr	r3, [pc, #648]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4ba1      	ldr	r3, [pc, #644]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 800187c:	49a1      	ldr	r1, [pc, #644]	@ (8001b04 <HAL_RCC_OscConfig+0x330>)
 800187e:	400a      	ands	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	4b9f      	ldr	r3, [pc, #636]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b9e      	ldr	r3, [pc, #632]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001888:	499f      	ldr	r1, [pc, #636]	@ (8001b08 <HAL_RCC_OscConfig+0x334>)
 800188a:	400a      	ands	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d014      	beq.n	80018c0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7ff faab 	bl	8000df0 <HAL_GetTick>
 800189a:	0003      	movs	r3, r0
 800189c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff faa6 	bl	8000df0 <HAL_GetTick>
 80018a4:	0002      	movs	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	@ 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e298      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018b2:	4b93      	ldr	r3, [pc, #588]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	2380      	movs	r3, #128	@ 0x80
 80018b8:	029b      	lsls	r3, r3, #10
 80018ba:	4013      	ands	r3, r2
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0xcc>
 80018be:	e015      	b.n	80018ec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff fa96 	bl	8000df0 <HAL_GetTick>
 80018c4:	0003      	movs	r3, r0
 80018c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ca:	f7ff fa91 	bl	8000df0 <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b64      	cmp	r3, #100	@ 0x64
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e283      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018dc:	4b88      	ldr	r3, [pc, #544]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2380      	movs	r3, #128	@ 0x80
 80018e2:	029b      	lsls	r3, r3, #10
 80018e4:	4013      	ands	r3, r2
 80018e6:	d1f0      	bne.n	80018ca <HAL_RCC_OscConfig+0xf6>
 80018e8:	e000      	b.n	80018ec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ea:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2202      	movs	r2, #2
 80018f2:	4013      	ands	r3, r2
 80018f4:	d100      	bne.n	80018f8 <HAL_RCC_OscConfig+0x124>
 80018f6:	e099      	b.n	8001a2c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f8:	4b81      	ldr	r3, [pc, #516]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2238      	movs	r2, #56	@ 0x38
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001902:	4b7f      	ldr	r3, [pc, #508]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2203      	movs	r2, #3
 8001908:	4013      	ands	r3, r2
 800190a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2b10      	cmp	r3, #16
 8001910:	d102      	bne.n	8001918 <HAL_RCC_OscConfig+0x144>
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d002      	beq.n	800191e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d135      	bne.n	800198a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800191e:	4b78      	ldr	r3, [pc, #480]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	2380      	movs	r3, #128	@ 0x80
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4013      	ands	r3, r2
 8001928:	d005      	beq.n	8001936 <HAL_RCC_OscConfig+0x162>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e256      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	4b72      	ldr	r3, [pc, #456]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4a74      	ldr	r2, [pc, #464]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 800193c:	4013      	ands	r3, r2
 800193e:	0019      	movs	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	021a      	lsls	r2, r3, #8
 8001946:	4b6e      	ldr	r3, [pc, #440]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001948:	430a      	orrs	r2, r1
 800194a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d112      	bne.n	8001978 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001952:	4b6b      	ldr	r3, [pc, #428]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a6e      	ldr	r2, [pc, #440]	@ (8001b10 <HAL_RCC_OscConfig+0x33c>)
 8001958:	4013      	ands	r3, r2
 800195a:	0019      	movs	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	4b67      	ldr	r3, [pc, #412]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001966:	4b66      	ldr	r3, [pc, #408]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	0adb      	lsrs	r3, r3, #11
 800196c:	2207      	movs	r2, #7
 800196e:	4013      	ands	r3, r2
 8001970:	4a68      	ldr	r2, [pc, #416]	@ (8001b14 <HAL_RCC_OscConfig+0x340>)
 8001972:	40da      	lsrs	r2, r3
 8001974:	4b68      	ldr	r3, [pc, #416]	@ (8001b18 <HAL_RCC_OscConfig+0x344>)
 8001976:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001978:	4b68      	ldr	r3, [pc, #416]	@ (8001b1c <HAL_RCC_OscConfig+0x348>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	0018      	movs	r0, r3
 800197e:	f7ff f9db 	bl	8000d38 <HAL_InitTick>
 8001982:	1e03      	subs	r3, r0, #0
 8001984:	d051      	beq.n	8001a2a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e22c      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d030      	beq.n	80019f4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001992:	4b5b      	ldr	r3, [pc, #364]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a5e      	ldr	r2, [pc, #376]	@ (8001b10 <HAL_RCC_OscConfig+0x33c>)
 8001998:	4013      	ands	r3, r2
 800199a:	0019      	movs	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	4b57      	ldr	r3, [pc, #348]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	430a      	orrs	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80019a6:	4b56      	ldr	r3, [pc, #344]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4b55      	ldr	r3, [pc, #340]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80019ac:	2180      	movs	r1, #128	@ 0x80
 80019ae:	0049      	lsls	r1, r1, #1
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff fa1c 	bl	8000df0 <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff fa17 	bl	8000df0 <HAL_GetTick>
 80019c2:	0002      	movs	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e209      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	@ 0x80
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4013      	ands	r3, r2
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019dc:	4b48      	ldr	r3, [pc, #288]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4a4a      	ldr	r2, [pc, #296]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	0019      	movs	r1, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	021a      	lsls	r2, r3, #8
 80019ec:	4b44      	ldr	r3, [pc, #272]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80019ee:	430a      	orrs	r2, r1
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	e01b      	b.n	8001a2c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80019f4:	4b42      	ldr	r3, [pc, #264]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b41      	ldr	r3, [pc, #260]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 80019fa:	4949      	ldr	r1, [pc, #292]	@ (8001b20 <HAL_RCC_OscConfig+0x34c>)
 80019fc:	400a      	ands	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff f9f6 	bl	8000df0 <HAL_GetTick>
 8001a04:	0003      	movs	r3, r0
 8001a06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0a:	f7ff f9f1 	bl	8000df0 <HAL_GetTick>
 8001a0e:	0002      	movs	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e1e3      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a1c:	4b38      	ldr	r3, [pc, #224]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	2380      	movs	r3, #128	@ 0x80
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4013      	ands	r3, r2
 8001a26:	d1f0      	bne.n	8001a0a <HAL_RCC_OscConfig+0x236>
 8001a28:	e000      	b.n	8001a2c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a2a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2208      	movs	r2, #8
 8001a32:	4013      	ands	r3, r2
 8001a34:	d047      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a36:	4b32      	ldr	r3, [pc, #200]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2238      	movs	r2, #56	@ 0x38
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b18      	cmp	r3, #24
 8001a40:	d10a      	bne.n	8001a58 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a42:	4b2f      	ldr	r3, [pc, #188]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a46:	2202      	movs	r2, #2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d03c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x2f2>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d138      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e1c5      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d019      	beq.n	8001a94 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a60:	4b27      	ldr	r3, [pc, #156]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a62:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a64:	4b26      	ldr	r3, [pc, #152]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a66:	2101      	movs	r1, #1
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f9c0 	bl	8000df0 <HAL_GetTick>
 8001a70:	0003      	movs	r3, r0
 8001a72:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a76:	f7ff f9bb 	bl	8000df0 <HAL_GetTick>
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e1ad      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a88:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d0f1      	beq.n	8001a76 <HAL_RCC_OscConfig+0x2a2>
 8001a92:	e018      	b.n	8001ac6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a96:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a98:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	438a      	bics	r2, r1
 8001a9e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f9a6 	bl	8000df0 <HAL_GetTick>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aaa:	f7ff f9a1 	bl	8000df0 <HAL_GetTick>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e193      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001abc:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d1f1      	bne.n	8001aaa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2204      	movs	r2, #4
 8001acc:	4013      	ands	r3, r2
 8001ace:	d100      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x2fe>
 8001ad0:	e0c6      	b.n	8001c60 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad2:	231f      	movs	r3, #31
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ada:	4b09      	ldr	r3, [pc, #36]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2238      	movs	r2, #56	@ 0x38
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b20      	cmp	r3, #32
 8001ae4:	d11e      	bne.n	8001b24 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ae6:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <HAL_RCC_OscConfig+0x32c>)
 8001ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aea:	2202      	movs	r2, #2
 8001aec:	4013      	ands	r3, r2
 8001aee:	d100      	bne.n	8001af2 <HAL_RCC_OscConfig+0x31e>
 8001af0:	e0b6      	b.n	8001c60 <HAL_RCC_OscConfig+0x48c>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d000      	beq.n	8001afc <HAL_RCC_OscConfig+0x328>
 8001afa:	e0b1      	b.n	8001c60 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e171      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
 8001b00:	40021000 	.word	0x40021000
 8001b04:	fffeffff 	.word	0xfffeffff
 8001b08:	fffbffff 	.word	0xfffbffff
 8001b0c:	ffff80ff 	.word	0xffff80ff
 8001b10:	ffffc7ff 	.word	0xffffc7ff
 8001b14:	00f42400 	.word	0x00f42400
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000004 	.word	0x20000004
 8001b20:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b24:	4bb1      	ldr	r3, [pc, #708]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001b26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b28:	2380      	movs	r3, #128	@ 0x80
 8001b2a:	055b      	lsls	r3, r3, #21
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_OscConfig+0x360>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x362>
 8001b34:	2300      	movs	r3, #0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d011      	beq.n	8001b5e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	4bac      	ldr	r3, [pc, #688]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001b3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b3e:	4bab      	ldr	r3, [pc, #684]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001b40:	2180      	movs	r1, #128	@ 0x80
 8001b42:	0549      	lsls	r1, r1, #21
 8001b44:	430a      	orrs	r2, r1
 8001b46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b48:	4ba8      	ldr	r3, [pc, #672]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001b4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b4c:	2380      	movs	r3, #128	@ 0x80
 8001b4e:	055b      	lsls	r3, r3, #21
 8001b50:	4013      	ands	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b56:	231f      	movs	r3, #31
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5e:	4ba4      	ldr	r3, [pc, #656]	@ (8001df0 <HAL_RCC_OscConfig+0x61c>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	@ 0x80
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4013      	ands	r3, r2
 8001b68:	d11a      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b6a:	4ba1      	ldr	r3, [pc, #644]	@ (8001df0 <HAL_RCC_OscConfig+0x61c>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4ba0      	ldr	r3, [pc, #640]	@ (8001df0 <HAL_RCC_OscConfig+0x61c>)
 8001b70:	2180      	movs	r1, #128	@ 0x80
 8001b72:	0049      	lsls	r1, r1, #1
 8001b74:	430a      	orrs	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b78:	f7ff f93a 	bl	8000df0 <HAL_GetTick>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b82:	f7ff f935 	bl	8000df0 <HAL_GetTick>
 8001b86:	0002      	movs	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e127      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b94:	4b96      	ldr	r3, [pc, #600]	@ (8001df0 <HAL_RCC_OscConfig+0x61c>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x3e2>
 8001ba8:	4b90      	ldr	r3, [pc, #576]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001baa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bac:	4b8f      	ldr	r3, [pc, #572]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001bae:	2101      	movs	r1, #1
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bb4:	e01c      	b.n	8001bf0 <HAL_RCC_OscConfig+0x41c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b05      	cmp	r3, #5
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x404>
 8001bbe:	4b8b      	ldr	r3, [pc, #556]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001bc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bc2:	4b8a      	ldr	r3, [pc, #552]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001bc4:	2104      	movs	r1, #4
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bca:	4b88      	ldr	r3, [pc, #544]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001bcc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bce:	4b87      	ldr	r3, [pc, #540]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bd6:	e00b      	b.n	8001bf0 <HAL_RCC_OscConfig+0x41c>
 8001bd8:	4b84      	ldr	r3, [pc, #528]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001bda:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bdc:	4b83      	ldr	r3, [pc, #524]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001bde:	2101      	movs	r1, #1
 8001be0:	438a      	bics	r2, r1
 8001be2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001be4:	4b81      	ldr	r3, [pc, #516]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001be6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001be8:	4b80      	ldr	r3, [pc, #512]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001bea:	2104      	movs	r1, #4
 8001bec:	438a      	bics	r2, r1
 8001bee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d014      	beq.n	8001c22 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f8fa 	bl	8000df0 <HAL_GetTick>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c00:	e009      	b.n	8001c16 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff f8f5 	bl	8000df0 <HAL_GetTick>
 8001c06:	0002      	movs	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	4a79      	ldr	r2, [pc, #484]	@ (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e0e6      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c16:	4b75      	ldr	r3, [pc, #468]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x42e>
 8001c20:	e013      	b.n	8001c4a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c22:	f7ff f8e5 	bl	8000df0 <HAL_GetTick>
 8001c26:	0003      	movs	r3, r0
 8001c28:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c2a:	e009      	b.n	8001c40 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2c:	f7ff f8e0 	bl	8000df0 <HAL_GetTick>
 8001c30:	0002      	movs	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	4a6f      	ldr	r2, [pc, #444]	@ (8001df4 <HAL_RCC_OscConfig+0x620>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e0d1      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c40:	4b6a      	ldr	r3, [pc, #424]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c44:	2202      	movs	r2, #2
 8001c46:	4013      	ands	r3, r2
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c4a:	231f      	movs	r3, #31
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d105      	bne.n	8001c60 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c54:	4b65      	ldr	r3, [pc, #404]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001c56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c58:	4b64      	ldr	r3, [pc, #400]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001c5a:	4967      	ldr	r1, [pc, #412]	@ (8001df8 <HAL_RCC_OscConfig+0x624>)
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d100      	bne.n	8001c6a <HAL_RCC_OscConfig+0x496>
 8001c68:	e0bb      	b.n	8001de2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c6a:	4b60      	ldr	r3, [pc, #384]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2238      	movs	r2, #56	@ 0x38
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b10      	cmp	r3, #16
 8001c74:	d100      	bne.n	8001c78 <HAL_RCC_OscConfig+0x4a4>
 8001c76:	e07b      	b.n	8001d70 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d156      	bne.n	8001d2e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c80:	4b5a      	ldr	r3, [pc, #360]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b59      	ldr	r3, [pc, #356]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001c86:	495d      	ldr	r1, [pc, #372]	@ (8001dfc <HAL_RCC_OscConfig+0x628>)
 8001c88:	400a      	ands	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f8b0 	bl	8000df0 <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7ff f8ab 	bl	8000df0 <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e09d      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca8:	4b50      	ldr	r3, [pc, #320]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	2380      	movs	r3, #128	@ 0x80
 8001cae:	049b      	lsls	r3, r3, #18
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4a51      	ldr	r2, [pc, #324]	@ (8001e00 <HAL_RCC_OscConfig+0x62c>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1a      	ldr	r2, [r3, #32]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	4b42      	ldr	r3, [pc, #264]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce8:	4b40      	ldr	r3, [pc, #256]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b3f      	ldr	r3, [pc, #252]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001cee:	2180      	movs	r1, #128	@ 0x80
 8001cf0:	0449      	lsls	r1, r1, #17
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001cfc:	2180      	movs	r1, #128	@ 0x80
 8001cfe:	0549      	lsls	r1, r1, #21
 8001d00:	430a      	orrs	r2, r1
 8001d02:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff f874 	bl	8000df0 <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7ff f86f 	bl	8000df0 <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e061      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d20:	4b32      	ldr	r3, [pc, #200]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2380      	movs	r3, #128	@ 0x80
 8001d26:	049b      	lsls	r3, r3, #18
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x53a>
 8001d2c:	e059      	b.n	8001de2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b2e      	ldr	r3, [pc, #184]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001d34:	4931      	ldr	r1, [pc, #196]	@ (8001dfc <HAL_RCC_OscConfig+0x628>)
 8001d36:	400a      	ands	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7ff f859 	bl	8000df0 <HAL_GetTick>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7ff f854 	bl	8000df0 <HAL_GetTick>
 8001d48:	0002      	movs	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e046      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d56:	4b25      	ldr	r3, [pc, #148]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	2380      	movs	r3, #128	@ 0x80
 8001d5c:	049b      	lsls	r3, r3, #18
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d62:	4b22      	ldr	r3, [pc, #136]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001d68:	4926      	ldr	r1, [pc, #152]	@ (8001e04 <HAL_RCC_OscConfig+0x630>)
 8001d6a:	400a      	ands	r2, r1
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	e038      	b.n	8001de2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e033      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dec <HAL_RCC_OscConfig+0x618>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2203      	movs	r2, #3
 8001d86:	401a      	ands	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d126      	bne.n	8001dde <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2270      	movs	r2, #112	@ 0x70
 8001d94:	401a      	ands	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d11f      	bne.n	8001dde <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	23fe      	movs	r3, #254	@ 0xfe
 8001da2:	01db      	lsls	r3, r3, #7
 8001da4:	401a      	ands	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001daa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d116      	bne.n	8001dde <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	23f8      	movs	r3, #248	@ 0xf8
 8001db4:	039b      	lsls	r3, r3, #14
 8001db6:	401a      	ands	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d10e      	bne.n	8001dde <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	23e0      	movs	r3, #224	@ 0xe0
 8001dc4:	051b      	lsls	r3, r3, #20
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d106      	bne.n	8001dde <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	0f5b      	lsrs	r3, r3, #29
 8001dd4:	075a      	lsls	r2, r3, #29
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	0018      	movs	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b008      	add	sp, #32
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40007000 	.word	0x40007000
 8001df4:	00001388 	.word	0x00001388
 8001df8:	efffffff 	.word	0xefffffff
 8001dfc:	feffffff 	.word	0xfeffffff
 8001e00:	11c1808c 	.word	0x11c1808c
 8001e04:	eefefffc 	.word	0xeefefffc

08001e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0e9      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b76      	ldr	r3, [pc, #472]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2207      	movs	r2, #7
 8001e22:	4013      	ands	r3, r2
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d91e      	bls.n	8001e68 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b73      	ldr	r3, [pc, #460]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2207      	movs	r2, #7
 8001e30:	4393      	bics	r3, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	4b70      	ldr	r3, [pc, #448]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e3c:	f7fe ffd8 	bl	8000df0 <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e44:	e009      	b.n	8001e5a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e46:	f7fe ffd3 	bl	8000df0 <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	4a6a      	ldr	r2, [pc, #424]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e0ca      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e5a:	4b67      	ldr	r3, [pc, #412]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2207      	movs	r2, #7
 8001e60:	4013      	ands	r3, r2
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d1ee      	bne.n	8001e46 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d015      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2204      	movs	r2, #4
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d006      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e7c:	4b60      	ldr	r3, [pc, #384]	@ (8002000 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	4b5f      	ldr	r3, [pc, #380]	@ (8002000 <HAL_RCC_ClockConfig+0x1f8>)
 8001e82:	21e0      	movs	r1, #224	@ 0xe0
 8001e84:	01c9      	lsls	r1, r1, #7
 8001e86:	430a      	orrs	r2, r1
 8001e88:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002000 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	4a5d      	ldr	r2, [pc, #372]	@ (8002004 <HAL_RCC_ClockConfig+0x1fc>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	0019      	movs	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	4b59      	ldr	r3, [pc, #356]	@ (8002000 <HAL_RCC_ClockConfig+0x1f8>)
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d057      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb0:	4b53      	ldr	r3, [pc, #332]	@ (8002000 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	029b      	lsls	r3, r3, #10
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d12b      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e097      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec8:	4b4d      	ldr	r3, [pc, #308]	@ (8002000 <HAL_RCC_ClockConfig+0x1f8>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	@ 0x80
 8001ece:	049b      	lsls	r3, r3, #18
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d11f      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e08b      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee0:	4b47      	ldr	r3, [pc, #284]	@ (8002000 <HAL_RCC_ClockConfig+0x1f8>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d113      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e07f      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef8:	4b41      	ldr	r3, [pc, #260]	@ (8002000 <HAL_RCC_ClockConfig+0x1f8>)
 8001efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001efc:	2202      	movs	r2, #2
 8001efe:	4013      	ands	r3, r2
 8001f00:	d108      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e074      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f06:	4b3e      	ldr	r3, [pc, #248]	@ (8002000 <HAL_RCC_ClockConfig+0x1f8>)
 8001f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e06d      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f14:	4b3a      	ldr	r3, [pc, #232]	@ (8002000 <HAL_RCC_ClockConfig+0x1f8>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2207      	movs	r2, #7
 8001f1a:	4393      	bics	r3, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4b37      	ldr	r3, [pc, #220]	@ (8002000 <HAL_RCC_ClockConfig+0x1f8>)
 8001f24:	430a      	orrs	r2, r1
 8001f26:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f28:	f7fe ff62 	bl	8000df0 <HAL_GetTick>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f30:	e009      	b.n	8001f46 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f32:	f7fe ff5d 	bl	8000df0 <HAL_GetTick>
 8001f36:	0002      	movs	r2, r0
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	4a2f      	ldr	r2, [pc, #188]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e054      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	4b2e      	ldr	r3, [pc, #184]	@ (8002000 <HAL_RCC_ClockConfig+0x1f8>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2238      	movs	r2, #56	@ 0x38
 8001f4c:	401a      	ands	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d1ec      	bne.n	8001f32 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f58:	4b27      	ldr	r3, [pc, #156]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2207      	movs	r2, #7
 8001f5e:	4013      	ands	r3, r2
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d21e      	bcs.n	8001fa4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b24      	ldr	r3, [pc, #144]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2207      	movs	r2, #7
 8001f6c:	4393      	bics	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	4b21      	ldr	r3, [pc, #132]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f78:	f7fe ff3a 	bl	8000df0 <HAL_GetTick>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f80:	e009      	b.n	8001f96 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f82:	f7fe ff35 	bl	8000df0 <HAL_GetTick>
 8001f86:	0002      	movs	r2, r0
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e02c      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f96:	4b18      	ldr	r3, [pc, #96]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2207      	movs	r2, #7
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1ee      	bne.n	8001f82 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	4013      	ands	r3, r2
 8001fac:	d009      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fae:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	4a15      	ldr	r2, [pc, #84]	@ (8002008 <HAL_RCC_ClockConfig+0x200>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <HAL_RCC_ClockConfig+0x1f8>)
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fc2:	f000 f829 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001fc6:	0001      	movs	r1, r0
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <HAL_RCC_ClockConfig+0x1f8>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	220f      	movs	r2, #15
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <HAL_RCC_ClockConfig+0x204>)
 8001fd4:	0092      	lsls	r2, r2, #2
 8001fd6:	58d3      	ldr	r3, [r2, r3]
 8001fd8:	221f      	movs	r2, #31
 8001fda:	4013      	ands	r3, r2
 8001fdc:	000a      	movs	r2, r1
 8001fde:	40da      	lsrs	r2, r3
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <HAL_RCC_ClockConfig+0x208>)
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <HAL_RCC_ClockConfig+0x20c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f7fe fea5 	bl	8000d38 <HAL_InitTick>
 8001fee:	0003      	movs	r3, r0
}
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b004      	add	sp, #16
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	00001388 	.word	0x00001388
 8002000:	40021000 	.word	0x40021000
 8002004:	fffff0ff 	.word	0xfffff0ff
 8002008:	ffff8fff 	.word	0xffff8fff
 800200c:	08003d58 	.word	0x08003d58
 8002010:	20000000 	.word	0x20000000
 8002014:	20000004 	.word	0x20000004

08002018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800201e:	4b3c      	ldr	r3, [pc, #240]	@ (8002110 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2238      	movs	r2, #56	@ 0x38
 8002024:	4013      	ands	r3, r2
 8002026:	d10f      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002028:	4b39      	ldr	r3, [pc, #228]	@ (8002110 <HAL_RCC_GetSysClockFreq+0xf8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0adb      	lsrs	r3, r3, #11
 800202e:	2207      	movs	r2, #7
 8002030:	4013      	ands	r3, r2
 8002032:	2201      	movs	r2, #1
 8002034:	409a      	lsls	r2, r3
 8002036:	0013      	movs	r3, r2
 8002038:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800203a:	6839      	ldr	r1, [r7, #0]
 800203c:	4835      	ldr	r0, [pc, #212]	@ (8002114 <HAL_RCC_GetSysClockFreq+0xfc>)
 800203e:	f7fe f861 	bl	8000104 <__udivsi3>
 8002042:	0003      	movs	r3, r0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	e05d      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002048:	4b31      	ldr	r3, [pc, #196]	@ (8002110 <HAL_RCC_GetSysClockFreq+0xf8>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2238      	movs	r2, #56	@ 0x38
 800204e:	4013      	ands	r3, r2
 8002050:	2b08      	cmp	r3, #8
 8002052:	d102      	bne.n	800205a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002054:	4b2f      	ldr	r3, [pc, #188]	@ (8002114 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	e054      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800205a:	4b2d      	ldr	r3, [pc, #180]	@ (8002110 <HAL_RCC_GetSysClockFreq+0xf8>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2238      	movs	r2, #56	@ 0x38
 8002060:	4013      	ands	r3, r2
 8002062:	2b10      	cmp	r3, #16
 8002064:	d138      	bne.n	80020d8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002066:	4b2a      	ldr	r3, [pc, #168]	@ (8002110 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	2203      	movs	r2, #3
 800206c:	4013      	ands	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002070:	4b27      	ldr	r3, [pc, #156]	@ (8002110 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	2207      	movs	r2, #7
 8002078:	4013      	ands	r3, r2
 800207a:	3301      	adds	r3, #1
 800207c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d10d      	bne.n	80020a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	4823      	ldr	r0, [pc, #140]	@ (8002114 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002088:	f7fe f83c 	bl	8000104 <__udivsi3>
 800208c:	0003      	movs	r3, r0
 800208e:	0019      	movs	r1, r3
 8002090:	4b1f      	ldr	r3, [pc, #124]	@ (8002110 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	227f      	movs	r2, #127	@ 0x7f
 8002098:	4013      	ands	r3, r2
 800209a:	434b      	muls	r3, r1
 800209c:	617b      	str	r3, [r7, #20]
        break;
 800209e:	e00d      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	481c      	ldr	r0, [pc, #112]	@ (8002114 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020a4:	f7fe f82e 	bl	8000104 <__udivsi3>
 80020a8:	0003      	movs	r3, r0
 80020aa:	0019      	movs	r1, r3
 80020ac:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	227f      	movs	r2, #127	@ 0x7f
 80020b4:	4013      	ands	r3, r2
 80020b6:	434b      	muls	r3, r1
 80020b8:	617b      	str	r3, [r7, #20]
        break;
 80020ba:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020bc:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0f5b      	lsrs	r3, r3, #29
 80020c2:	2207      	movs	r2, #7
 80020c4:	4013      	ands	r3, r2
 80020c6:	3301      	adds	r3, #1
 80020c8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	6978      	ldr	r0, [r7, #20]
 80020ce:	f7fe f819 	bl	8000104 <__udivsi3>
 80020d2:	0003      	movs	r3, r0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	e015      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002110 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2238      	movs	r2, #56	@ 0x38
 80020de:	4013      	ands	r3, r2
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d103      	bne.n	80020ec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80020e4:	2380      	movs	r3, #128	@ 0x80
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	e00b      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020ec:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2238      	movs	r2, #56	@ 0x38
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b18      	cmp	r3, #24
 80020f6:	d103      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020f8:	23fa      	movs	r3, #250	@ 0xfa
 80020fa:	01db      	lsls	r3, r3, #7
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	e001      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002104:	693b      	ldr	r3, [r7, #16]
}
 8002106:	0018      	movs	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	b006      	add	sp, #24
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			@ (mov r8, r8)
 8002110:	40021000 	.word	0x40021000
 8002114:	00f42400 	.word	0x00f42400

08002118 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800211c:	4b02      	ldr	r3, [pc, #8]	@ (8002128 <HAL_RCC_GetHCLKFreq+0x10>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	46c0      	nop			@ (mov r8, r8)
 8002128:	20000000 	.word	0x20000000

0800212c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800212c:	b5b0      	push	{r4, r5, r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002130:	f7ff fff2 	bl	8002118 <HAL_RCC_GetHCLKFreq>
 8002134:	0004      	movs	r4, r0
 8002136:	f7ff fb41 	bl	80017bc <LL_RCC_GetAPB1Prescaler>
 800213a:	0003      	movs	r3, r0
 800213c:	0b1a      	lsrs	r2, r3, #12
 800213e:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002140:	0092      	lsls	r2, r2, #2
 8002142:	58d3      	ldr	r3, [r2, r3]
 8002144:	221f      	movs	r2, #31
 8002146:	4013      	ands	r3, r2
 8002148:	40dc      	lsrs	r4, r3
 800214a:	0023      	movs	r3, r4
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	bdb0      	pop	{r4, r5, r7, pc}
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	08003d98 	.word	0x08003d98

08002158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002160:	2313      	movs	r3, #19
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002168:	2312      	movs	r3, #18
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	2380      	movs	r3, #128	@ 0x80
 8002176:	029b      	lsls	r3, r3, #10
 8002178:	4013      	ands	r3, r2
 800217a:	d100      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800217c:	e0a3      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800217e:	2011      	movs	r0, #17
 8002180:	183b      	adds	r3, r7, r0
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002186:	4ba5      	ldr	r3, [pc, #660]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002188:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800218a:	2380      	movs	r3, #128	@ 0x80
 800218c:	055b      	lsls	r3, r3, #21
 800218e:	4013      	ands	r3, r2
 8002190:	d110      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	4ba2      	ldr	r3, [pc, #648]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002194:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002196:	4ba1      	ldr	r3, [pc, #644]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002198:	2180      	movs	r1, #128	@ 0x80
 800219a:	0549      	lsls	r1, r1, #21
 800219c:	430a      	orrs	r2, r1
 800219e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021a0:	4b9e      	ldr	r3, [pc, #632]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021a4:	2380      	movs	r3, #128	@ 0x80
 80021a6:	055b      	lsls	r3, r3, #21
 80021a8:	4013      	ands	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ae:	183b      	adds	r3, r7, r0
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021b4:	4b9a      	ldr	r3, [pc, #616]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b99      	ldr	r3, [pc, #612]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80021ba:	2180      	movs	r1, #128	@ 0x80
 80021bc:	0049      	lsls	r1, r1, #1
 80021be:	430a      	orrs	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021c2:	f7fe fe15 	bl	8000df0 <HAL_GetTick>
 80021c6:	0003      	movs	r3, r0
 80021c8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021ca:	e00b      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021cc:	f7fe fe10 	bl	8000df0 <HAL_GetTick>
 80021d0:	0002      	movs	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d904      	bls.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80021da:	2313      	movs	r3, #19
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	2203      	movs	r2, #3
 80021e0:	701a      	strb	r2, [r3, #0]
        break;
 80021e2:	e005      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	2380      	movs	r3, #128	@ 0x80
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4013      	ands	r3, r2
 80021ee:	d0ed      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80021f0:	2313      	movs	r3, #19
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d154      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021fa:	4b88      	ldr	r3, [pc, #544]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021fe:	23c0      	movs	r3, #192	@ 0xc0
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4013      	ands	r3, r2
 8002204:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d019      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	429a      	cmp	r2, r3
 8002214:	d014      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002216:	4b81      	ldr	r3, [pc, #516]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221a:	4a82      	ldr	r2, [pc, #520]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800221c:	4013      	ands	r3, r2
 800221e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002220:	4b7e      	ldr	r3, [pc, #504]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002222:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002224:	4b7d      	ldr	r3, [pc, #500]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002226:	2180      	movs	r1, #128	@ 0x80
 8002228:	0249      	lsls	r1, r1, #9
 800222a:	430a      	orrs	r2, r1
 800222c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800222e:	4b7b      	ldr	r3, [pc, #492]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002230:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002232:	4b7a      	ldr	r3, [pc, #488]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002234:	497c      	ldr	r1, [pc, #496]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002236:	400a      	ands	r2, r1
 8002238:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800223a:	4b78      	ldr	r3, [pc, #480]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2201      	movs	r2, #1
 8002244:	4013      	ands	r3, r2
 8002246:	d016      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe fdd2 	bl	8000df0 <HAL_GetTick>
 800224c:	0003      	movs	r3, r0
 800224e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002250:	e00c      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7fe fdcd 	bl	8000df0 <HAL_GetTick>
 8002256:	0002      	movs	r2, r0
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	4a73      	ldr	r2, [pc, #460]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d904      	bls.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002262:	2313      	movs	r3, #19
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	2203      	movs	r2, #3
 8002268:	701a      	strb	r2, [r3, #0]
            break;
 800226a:	e004      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800226c:	4b6b      	ldr	r3, [pc, #428]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800226e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002270:	2202      	movs	r2, #2
 8002272:	4013      	ands	r3, r2
 8002274:	d0ed      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002276:	2313      	movs	r3, #19
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002280:	4b66      	ldr	r3, [pc, #408]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002284:	4a67      	ldr	r2, [pc, #412]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002286:	4013      	ands	r3, r2
 8002288:	0019      	movs	r1, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800228e:	4b63      	ldr	r3, [pc, #396]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002290:	430a      	orrs	r2, r1
 8002292:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002294:	e00c      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002296:	2312      	movs	r3, #18
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	2213      	movs	r2, #19
 800229c:	18ba      	adds	r2, r7, r2
 800229e:	7812      	ldrb	r2, [r2, #0]
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	e005      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a4:	2312      	movs	r3, #18
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	2213      	movs	r2, #19
 80022aa:	18ba      	adds	r2, r7, r2
 80022ac:	7812      	ldrb	r2, [r2, #0]
 80022ae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022b0:	2311      	movs	r3, #17
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d105      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ba:	4b58      	ldr	r3, [pc, #352]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022be:	4b57      	ldr	r3, [pc, #348]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022c0:	495b      	ldr	r1, [pc, #364]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80022c2:	400a      	ands	r2, r1
 80022c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2201      	movs	r2, #1
 80022cc:	4013      	ands	r3, r2
 80022ce:	d009      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022d0:	4b52      	ldr	r3, [pc, #328]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d4:	2203      	movs	r2, #3
 80022d6:	4393      	bics	r3, r2
 80022d8:	0019      	movs	r1, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	4b4f      	ldr	r3, [pc, #316]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022e0:	430a      	orrs	r2, r1
 80022e2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2210      	movs	r2, #16
 80022ea:	4013      	ands	r3, r2
 80022ec:	d009      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022ee:	4b4b      	ldr	r3, [pc, #300]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f2:	4a50      	ldr	r2, [pc, #320]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	0019      	movs	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	4b47      	ldr	r3, [pc, #284]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022fe:	430a      	orrs	r2, r1
 8002300:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	2380      	movs	r3, #128	@ 0x80
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4013      	ands	r3, r2
 800230c:	d009      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800230e:	4b43      	ldr	r3, [pc, #268]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002312:	4a49      	ldr	r2, [pc, #292]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002314:	4013      	ands	r3, r2
 8002316:	0019      	movs	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	4b3f      	ldr	r3, [pc, #252]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800231e:	430a      	orrs	r2, r1
 8002320:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4013      	ands	r3, r2
 800232c:	d009      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800232e:	4b3b      	ldr	r3, [pc, #236]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002332:	4a42      	ldr	r2, [pc, #264]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002334:	4013      	ands	r3, r2
 8002336:	0019      	movs	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699a      	ldr	r2, [r3, #24]
 800233c:	4b37      	ldr	r3, [pc, #220]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800233e:	430a      	orrs	r2, r1
 8002340:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2220      	movs	r2, #32
 8002348:	4013      	ands	r3, r2
 800234a:	d009      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800234c:	4b33      	ldr	r3, [pc, #204]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800234e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002350:	4a3b      	ldr	r2, [pc, #236]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002352:	4013      	ands	r3, r2
 8002354:	0019      	movs	r1, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	4b30      	ldr	r3, [pc, #192]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800235c:	430a      	orrs	r2, r1
 800235e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	01db      	lsls	r3, r3, #7
 8002368:	4013      	ands	r3, r2
 800236a:	d015      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800236c:	4b2b      	ldr	r3, [pc, #172]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800236e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	0899      	lsrs	r1, r3, #2
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69da      	ldr	r2, [r3, #28]
 8002378:	4b28      	ldr	r3, [pc, #160]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800237a:	430a      	orrs	r2, r1
 800237c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69da      	ldr	r2, [r3, #28]
 8002382:	2380      	movs	r3, #128	@ 0x80
 8002384:	05db      	lsls	r3, r3, #23
 8002386:	429a      	cmp	r2, r3
 8002388:	d106      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800238a:	4b24      	ldr	r3, [pc, #144]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	4b23      	ldr	r3, [pc, #140]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002390:	2180      	movs	r1, #128	@ 0x80
 8002392:	0249      	lsls	r1, r1, #9
 8002394:	430a      	orrs	r2, r1
 8002396:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2380      	movs	r3, #128	@ 0x80
 800239e:	039b      	lsls	r3, r3, #14
 80023a0:	4013      	ands	r3, r2
 80023a2:	d016      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023a4:	4b1d      	ldr	r3, [pc, #116]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a8:	4a26      	ldr	r2, [pc, #152]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	0019      	movs	r1, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1a      	ldr	r2, [r3, #32]
 80023b2:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023b4:	430a      	orrs	r2, r1
 80023b6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1a      	ldr	r2, [r3, #32]
 80023bc:	2380      	movs	r3, #128	@ 0x80
 80023be:	03db      	lsls	r3, r3, #15
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d106      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023c4:	4b15      	ldr	r3, [pc, #84]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	4b14      	ldr	r3, [pc, #80]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023ca:	2180      	movs	r1, #128	@ 0x80
 80023cc:	0449      	lsls	r1, r1, #17
 80023ce:	430a      	orrs	r2, r1
 80023d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	2380      	movs	r3, #128	@ 0x80
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	4013      	ands	r3, r2
 80023dc:	d016      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80023de:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e2:	4a19      	ldr	r2, [pc, #100]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	0019      	movs	r1, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023ee:	430a      	orrs	r2, r1
 80023f0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	2380      	movs	r3, #128	@ 0x80
 80023f8:	01db      	lsls	r3, r3, #7
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d106      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023fe:	4b07      	ldr	r3, [pc, #28]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	4b06      	ldr	r3, [pc, #24]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002404:	2180      	movs	r1, #128	@ 0x80
 8002406:	0249      	lsls	r1, r1, #9
 8002408:	430a      	orrs	r2, r1
 800240a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800240c:	2312      	movs	r3, #18
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	781b      	ldrb	r3, [r3, #0]
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b006      	add	sp, #24
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	40021000 	.word	0x40021000
 8002420:	40007000 	.word	0x40007000
 8002424:	fffffcff 	.word	0xfffffcff
 8002428:	fffeffff 	.word	0xfffeffff
 800242c:	00001388 	.word	0x00001388
 8002430:	efffffff 	.word	0xefffffff
 8002434:	fffff3ff 	.word	0xfffff3ff
 8002438:	fff3ffff 	.word	0xfff3ffff
 800243c:	ffcfffff 	.word	0xffcfffff
 8002440:	ffffcfff 	.word	0xffffcfff
 8002444:	ffbfffff 	.word	0xffbfffff
 8002448:	ffff3fff 	.word	0xffff3fff

0800244c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	2380      	movs	r3, #128	@ 0x80
 800245c:	029b      	lsls	r3, r3, #10
 800245e:	429a      	cmp	r2, r3
 8002460:	d136      	bne.n	80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002462:	4bcd      	ldr	r3, [pc, #820]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002464:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002466:	23c0      	movs	r3, #192	@ 0xc0
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4013      	ands	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800246e:	4bca      	ldr	r3, [pc, #808]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002472:	2202      	movs	r2, #2
 8002474:	4013      	ands	r3, r2
 8002476:	2b02      	cmp	r3, #2
 8002478:	d108      	bne.n	800248c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	429a      	cmp	r2, r3
 8002482:	d103      	bne.n	800248c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8002484:	2380      	movs	r3, #128	@ 0x80
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e26b      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800248c:	4bc2      	ldr	r3, [pc, #776]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800248e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002490:	2202      	movs	r2, #2
 8002492:	4013      	ands	r3, r2
 8002494:	2b02      	cmp	r3, #2
 8002496:	d108      	bne.n	80024aa <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	429a      	cmp	r2, r3
 80024a0:	d103      	bne.n	80024aa <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 80024a2:	23fa      	movs	r3, #250	@ 0xfa
 80024a4:	01db      	lsls	r3, r3, #7
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	e25c      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80024aa:	4bbb      	ldr	r3, [pc, #748]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	2380      	movs	r3, #128	@ 0x80
 80024b0:	029b      	lsls	r3, r3, #10
 80024b2:	401a      	ands	r2, r3
 80024b4:	2380      	movs	r3, #128	@ 0x80
 80024b6:	029b      	lsls	r3, r3, #10
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d000      	beq.n	80024be <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80024bc:	e252      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	23c0      	movs	r3, #192	@ 0xc0
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d000      	beq.n	80024ca <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 80024c8:	e24c      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 80024ca:	4bb4      	ldr	r3, [pc, #720]	@ (800279c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	e249      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 80024d0:	4bb1      	ldr	r3, [pc, #708]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2203      	movs	r2, #3
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d102      	bne.n	80024e2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 80024dc:	4bb0      	ldr	r3, [pc, #704]	@ (80027a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	e00a      	b.n	80024f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 80024e2:	4bad      	ldr	r3, [pc, #692]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2203      	movs	r2, #3
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	d102      	bne.n	80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 80024ee:	4bac      	ldr	r3, [pc, #688]	@ (80027a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	e001      	b.n	80024f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80024f8:	4ba7      	ldr	r3, [pc, #668]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	2207      	movs	r2, #7
 8002500:	4013      	ands	r3, r2
 8002502:	3301      	adds	r3, #1
 8002504:	0019      	movs	r1, r3
 8002506:	6938      	ldr	r0, [r7, #16]
 8002508:	f7fd fdfc 	bl	8000104 <__udivsi3>
 800250c:	0003      	movs	r3, r0
 800250e:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	2380      	movs	r3, #128	@ 0x80
 8002514:	039b      	lsls	r3, r3, #14
 8002516:	429a      	cmp	r2, r3
 8002518:	d100      	bne.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 800251a:	e1e3      	b.n	80028e4 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	2380      	movs	r3, #128	@ 0x80
 8002520:	039b      	lsls	r3, r3, #14
 8002522:	429a      	cmp	r2, r3
 8002524:	d900      	bls.n	8002528 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002526:	e20c      	b.n	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	2380      	movs	r3, #128	@ 0x80
 800252c:	01db      	lsls	r3, r3, #7
 800252e:	429a      	cmp	r2, r3
 8002530:	d100      	bne.n	8002534 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8002532:	e0a5      	b.n	8002680 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	2380      	movs	r3, #128	@ 0x80
 8002538:	01db      	lsls	r3, r3, #7
 800253a:	429a      	cmp	r2, r3
 800253c:	d900      	bls.n	8002540 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800253e:	e200      	b.n	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	2380      	movs	r3, #128	@ 0x80
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	429a      	cmp	r2, r3
 8002548:	d100      	bne.n	800254c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800254a:	e0fc      	b.n	8002746 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	2380      	movs	r3, #128	@ 0x80
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	429a      	cmp	r2, r3
 8002554:	d900      	bls.n	8002558 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8002556:	e1f4      	b.n	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	429a      	cmp	r2, r3
 8002560:	d100      	bne.n	8002564 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8002562:	e181      	b.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	429a      	cmp	r2, r3
 800256c:	d900      	bls.n	8002570 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800256e:	e1e8      	b.n	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	2380      	movs	r3, #128	@ 0x80
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	429a      	cmp	r2, r3
 8002578:	d100      	bne.n	800257c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800257a:	e135      	b.n	80027e8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	429a      	cmp	r2, r3
 8002584:	d900      	bls.n	8002588 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8002586:	e1dc      	b.n	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b20      	cmp	r3, #32
 800258c:	d100      	bne.n	8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800258e:	e0af      	b.n	80026f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b20      	cmp	r3, #32
 8002594:	d900      	bls.n	8002598 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8002596:	e1d4      	b.n	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d003      	beq.n	80025a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b10      	cmp	r3, #16
 80025a2:	d033      	beq.n	800260c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 80025a4:	e1cd      	b.n	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80025a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80025a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025aa:	2203      	movs	r2, #3
 80025ac:	4013      	ands	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 80025b6:	f7ff fdb9 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 80025ba:	0003      	movs	r3, r0
 80025bc:	617b      	str	r3, [r7, #20]
        break;
 80025be:	e1c2      	b.n	8002946 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d104      	bne.n	80025d0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 80025c6:	f7ff fd27 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 80025ca:	0003      	movs	r3, r0
 80025cc:	617b      	str	r3, [r7, #20]
        break;
 80025ce:	e1ba      	b.n	8002946 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80025d0:	4b71      	ldr	r3, [pc, #452]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	401a      	ands	r2, r3
 80025da:	2380      	movs	r3, #128	@ 0x80
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	429a      	cmp	r2, r3
 80025e0:	d105      	bne.n	80025ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d102      	bne.n	80025ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 80025e8:	4b6d      	ldr	r3, [pc, #436]	@ (80027a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80025ea:	617b      	str	r3, [r7, #20]
        break;
 80025ec:	e1ab      	b.n	8002946 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80025ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80025f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f2:	2202      	movs	r2, #2
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d000      	beq.n	80025fc <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 80025fa:	e1a4      	b.n	8002946 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d000      	beq.n	8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8002602:	e1a0      	b.n	8002946 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 8002604:	2380      	movs	r3, #128	@ 0x80
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	617b      	str	r3, [r7, #20]
        break;
 800260a:	e19c      	b.n	8002946 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800260c:	4b62      	ldr	r3, [pc, #392]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800260e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002610:	23c0      	movs	r3, #192	@ 0xc0
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	4013      	ands	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d104      	bne.n	8002628 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800261e:	f7ff fd85 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8002622:	0003      	movs	r3, r0
 8002624:	617b      	str	r3, [r7, #20]
        break;
 8002626:	e190      	b.n	800294a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	2380      	movs	r3, #128	@ 0x80
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	429a      	cmp	r2, r3
 8002630:	d104      	bne.n	800263c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8002632:	f7ff fcf1 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8002636:	0003      	movs	r3, r0
 8002638:	617b      	str	r3, [r7, #20]
        break;
 800263a:	e186      	b.n	800294a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800263c:	4b56      	ldr	r3, [pc, #344]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	2380      	movs	r3, #128	@ 0x80
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	401a      	ands	r2, r3
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	429a      	cmp	r2, r3
 800264c:	d107      	bne.n	800265e <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	429a      	cmp	r2, r3
 8002656:	d102      	bne.n	800265e <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 8002658:	4b51      	ldr	r3, [pc, #324]	@ (80027a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800265a:	617b      	str	r3, [r7, #20]
        break;
 800265c:	e175      	b.n	800294a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800265e:	4b4e      	ldr	r3, [pc, #312]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002662:	2202      	movs	r2, #2
 8002664:	4013      	ands	r3, r2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d000      	beq.n	800266c <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800266a:	e16e      	b.n	800294a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	23c0      	movs	r3, #192	@ 0xc0
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	429a      	cmp	r2, r3
 8002674:	d000      	beq.n	8002678 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8002676:	e168      	b.n	800294a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	617b      	str	r3, [r7, #20]
        break;
 800267e:	e164      	b.n	800294a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002680:	4b45      	ldr	r3, [pc, #276]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002684:	0f9b      	lsrs	r3, r3, #30
 8002686:	079b      	lsls	r3, r3, #30
 8002688:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d104      	bne.n	800269a <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 8002690:	f7ff fcc2 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8002694:	0003      	movs	r3, r0
 8002696:	617b      	str	r3, [r7, #20]
        break;
 8002698:	e159      	b.n	800294e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	2380      	movs	r3, #128	@ 0x80
 800269e:	061b      	lsls	r3, r3, #24
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d102      	bne.n	80026aa <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 80026a4:	4b3e      	ldr	r3, [pc, #248]	@ (80027a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80026a6:	617b      	str	r3, [r7, #20]
        break;
 80026a8:	e151      	b.n	800294e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	2380      	movs	r3, #128	@ 0x80
 80026ae:	05db      	lsls	r3, r3, #23
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d000      	beq.n	80026b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80026b4:	e14b      	b.n	800294e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80026b6:	4b38      	ldr	r3, [pc, #224]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	2380      	movs	r3, #128	@ 0x80
 80026bc:	025b      	lsls	r3, r3, #9
 80026be:	4013      	ands	r3, r2
 80026c0:	d100      	bne.n	80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 80026c2:	e144      	b.n	800294e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80026c4:	4b34      	ldr	r3, [pc, #208]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	227f      	movs	r2, #127	@ 0x7f
 80026cc:	4013      	ands	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	435a      	muls	r2, r3
 80026d6:	4b30      	ldr	r3, [pc, #192]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	0c5b      	lsrs	r3, r3, #17
 80026dc:	211f      	movs	r1, #31
 80026de:	400b      	ands	r3, r1
 80026e0:	3301      	adds	r3, #1
 80026e2:	0019      	movs	r1, r3
 80026e4:	0010      	movs	r0, r2
 80026e6:	f7fd fd0d 	bl	8000104 <__udivsi3>
 80026ea:	0003      	movs	r3, r0
 80026ec:	617b      	str	r3, [r7, #20]
        break;
 80026ee:	e12e      	b.n	800294e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80026f0:	4b29      	ldr	r3, [pc, #164]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80026f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026f4:	23c0      	movs	r3, #192	@ 0xc0
 80026f6:	019b      	lsls	r3, r3, #6
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d104      	bne.n	800270c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002702:	f7ff fd13 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8002706:	0003      	movs	r3, r0
 8002708:	617b      	str	r3, [r7, #20]
        break;
 800270a:	e122      	b.n	8002952 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	2380      	movs	r3, #128	@ 0x80
 8002710:	015b      	lsls	r3, r3, #5
 8002712:	429a      	cmp	r2, r3
 8002714:	d104      	bne.n	8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 8002716:	f7ff fc7f 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 800271a:	0003      	movs	r3, r0
 800271c:	617b      	str	r3, [r7, #20]
        break;
 800271e:	e118      	b.n	8002952 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8002720:	4b1d      	ldr	r3, [pc, #116]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	2380      	movs	r3, #128	@ 0x80
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	401a      	ands	r2, r3
 800272a:	2380      	movs	r3, #128	@ 0x80
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	429a      	cmp	r2, r3
 8002730:	d000      	beq.n	8002734 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8002732:	e10e      	b.n	8002952 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	2380      	movs	r3, #128	@ 0x80
 8002738:	019b      	lsls	r3, r3, #6
 800273a:	429a      	cmp	r2, r3
 800273c:	d000      	beq.n	8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800273e:	e108      	b.n	8002952 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 8002740:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8002742:	617b      	str	r3, [r7, #20]
        break;
 8002744:	e105      	b.n	8002952 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8002746:	4b14      	ldr	r3, [pc, #80]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002748:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800274a:	23c0      	movs	r3, #192	@ 0xc0
 800274c:	021b      	lsls	r3, r3, #8
 800274e:	4013      	ands	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	2380      	movs	r3, #128	@ 0x80
 8002756:	01db      	lsls	r3, r3, #7
 8002758:	429a      	cmp	r2, r3
 800275a:	d123      	bne.n	80027a4 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800275c:	4b0e      	ldr	r3, [pc, #56]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	025b      	lsls	r3, r3, #9
 8002764:	4013      	ands	r3, r2
 8002766:	d100      	bne.n	800276a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8002768:	e0f5      	b.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800276a:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	0a1b      	lsrs	r3, r3, #8
 8002770:	227f      	movs	r2, #127	@ 0x7f
 8002772:	4013      	ands	r3, r2
 8002774:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	435a      	muls	r2, r3
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	0c5b      	lsrs	r3, r3, #17
 8002782:	211f      	movs	r1, #31
 8002784:	400b      	ands	r3, r1
 8002786:	3301      	adds	r3, #1
 8002788:	0019      	movs	r1, r3
 800278a:	0010      	movs	r0, r2
 800278c:	f7fd fcba 	bl	8000104 <__udivsi3>
 8002790:	0003      	movs	r3, r0
 8002792:	617b      	str	r3, [r7, #20]
        break;
 8002794:	e0df      	b.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	40021000 	.word	0x40021000
 800279c:	0007a120 	.word	0x0007a120
 80027a0:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d104      	bne.n	80027b4 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 80027aa:	f7ff fc35 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 80027ae:	0003      	movs	r3, r0
 80027b0:	617b      	str	r3, [r7, #20]
        break;
 80027b2:	e0d0      	b.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 80027b4:	4b6e      	ldr	r3, [pc, #440]	@ (8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	2380      	movs	r3, #128	@ 0x80
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	401a      	ands	r2, r3
 80027be:	2380      	movs	r3, #128	@ 0x80
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d107      	bne.n	80027d6 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	2380      	movs	r3, #128	@ 0x80
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d102      	bne.n	80027d6 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 80027d0:	4b68      	ldr	r3, [pc, #416]	@ (8002974 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80027d2:	617b      	str	r3, [r7, #20]
        break;
 80027d4:	e0bf      	b.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	23c0      	movs	r3, #192	@ 0xc0
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	429a      	cmp	r2, r3
 80027de:	d000      	beq.n	80027e2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80027e0:	e0b9      	b.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 80027e2:	4b65      	ldr	r3, [pc, #404]	@ (8002978 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80027e4:	617b      	str	r3, [r7, #20]
        break;
 80027e6:	e0b6      	b.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80027e8:	4b61      	ldr	r3, [pc, #388]	@ (8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80027ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027ec:	23c0      	movs	r3, #192	@ 0xc0
 80027ee:	031b      	lsls	r3, r3, #12
 80027f0:	4013      	ands	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d104      	bne.n	8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80027fa:	f7ff fc97 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 80027fe:	0003      	movs	r3, r0
 8002800:	617b      	str	r3, [r7, #20]
        break;
 8002802:	e0aa      	b.n	800295a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8002804:	4b5a      	ldr	r3, [pc, #360]	@ (8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8002806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002808:	2202      	movs	r2, #2
 800280a:	4013      	ands	r3, r2
 800280c:	2b02      	cmp	r3, #2
 800280e:	d108      	bne.n	8002822 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	2380      	movs	r3, #128	@ 0x80
 8002814:	02db      	lsls	r3, r3, #11
 8002816:	429a      	cmp	r2, r3
 8002818:	d103      	bne.n	8002822 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 800281a:	23fa      	movs	r3, #250	@ 0xfa
 800281c:	01db      	lsls	r3, r3, #7
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	e021      	b.n	8002866 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8002822:	4b53      	ldr	r3, [pc, #332]	@ (8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	2380      	movs	r3, #128	@ 0x80
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	401a      	ands	r2, r3
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	429a      	cmp	r2, r3
 8002832:	d107      	bne.n	8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	2380      	movs	r3, #128	@ 0x80
 8002838:	031b      	lsls	r3, r3, #12
 800283a:	429a      	cmp	r2, r3
 800283c:	d102      	bne.n	8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 800283e:	4b4d      	ldr	r3, [pc, #308]	@ (8002974 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	e010      	b.n	8002866 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8002844:	4b4a      	ldr	r3, [pc, #296]	@ (8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8002846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002848:	2202      	movs	r2, #2
 800284a:	4013      	ands	r3, r2
 800284c:	2b02      	cmp	r3, #2
 800284e:	d000      	beq.n	8002852 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 8002850:	e083      	b.n	800295a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	23c0      	movs	r3, #192	@ 0xc0
 8002856:	031b      	lsls	r3, r3, #12
 8002858:	429a      	cmp	r2, r3
 800285a:	d000      	beq.n	800285e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 800285c:	e07d      	b.n	800295a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 800285e:	2380      	movs	r3, #128	@ 0x80
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	617b      	str	r3, [r7, #20]
        break;
 8002864:	e079      	b.n	800295a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8002866:	e078      	b.n	800295a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002868:	4b41      	ldr	r3, [pc, #260]	@ (8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800286a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800286c:	23c0      	movs	r3, #192	@ 0xc0
 800286e:	039b      	lsls	r3, r3, #14
 8002870:	4013      	ands	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d104      	bne.n	8002884 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 800287a:	f7ff fc57 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 800287e:	0003      	movs	r3, r0
 8002880:	617b      	str	r3, [r7, #20]
        break;
 8002882:	e06c      	b.n	800295e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8002884:	4b3a      	ldr	r3, [pc, #232]	@ (8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8002886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002888:	2202      	movs	r2, #2
 800288a:	4013      	ands	r3, r2
 800288c:	2b02      	cmp	r3, #2
 800288e:	d108      	bne.n	80028a2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	2380      	movs	r3, #128	@ 0x80
 8002894:	035b      	lsls	r3, r3, #13
 8002896:	429a      	cmp	r2, r3
 8002898:	d103      	bne.n	80028a2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 800289a:	23fa      	movs	r3, #250	@ 0xfa
 800289c:	01db      	lsls	r3, r3, #7
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	e01f      	b.n	80028e2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80028a2:	4b33      	ldr	r3, [pc, #204]	@ (8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	2380      	movs	r3, #128	@ 0x80
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	401a      	ands	r2, r3
 80028ac:	2380      	movs	r3, #128	@ 0x80
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d107      	bne.n	80028c4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	2380      	movs	r3, #128	@ 0x80
 80028b8:	039b      	lsls	r3, r3, #14
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d102      	bne.n	80028c4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 80028be:	4b2d      	ldr	r3, [pc, #180]	@ (8002974 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	e00e      	b.n	80028e2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80028c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80028c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c8:	2202      	movs	r2, #2
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d146      	bne.n	800295e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	23c0      	movs	r3, #192	@ 0xc0
 80028d4:	039b      	lsls	r3, r3, #14
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d141      	bne.n	800295e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 80028da:	2380      	movs	r3, #128	@ 0x80
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	617b      	str	r3, [r7, #20]
        break;
 80028e0:	e03d      	b.n	800295e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80028e2:	e03c      	b.n	800295e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80028e4:	4b22      	ldr	r3, [pc, #136]	@ (8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80028e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80028e8:	2380      	movs	r3, #128	@ 0x80
 80028ea:	03db      	lsls	r3, r3, #15
 80028ec:	4013      	ands	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	2380      	movs	r3, #128	@ 0x80
 80028f4:	03db      	lsls	r3, r3, #15
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d11b      	bne.n	8002932 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80028fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	2380      	movs	r3, #128	@ 0x80
 8002900:	045b      	lsls	r3, r3, #17
 8002902:	4013      	ands	r3, r2
 8002904:	d02d      	beq.n	8002962 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002906:	4b1a      	ldr	r3, [pc, #104]	@ (8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	227f      	movs	r2, #127	@ 0x7f
 800290e:	4013      	ands	r3, r2
 8002910:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	435a      	muls	r2, r3
 8002918:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	0e5b      	lsrs	r3, r3, #25
 800291e:	2107      	movs	r1, #7
 8002920:	400b      	ands	r3, r1
 8002922:	3301      	adds	r3, #1
 8002924:	0019      	movs	r1, r3
 8002926:	0010      	movs	r0, r2
 8002928:	f7fd fbec 	bl	8000104 <__udivsi3>
 800292c:	0003      	movs	r3, r0
 800292e:	617b      	str	r3, [r7, #20]
        break;
 8002930:	e017      	b.n	8002962 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d114      	bne.n	8002962 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002938:	f7ff fbf8 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 800293c:	0003      	movs	r3, r0
 800293e:	617b      	str	r3, [r7, #20]
        break;
 8002940:	e00f      	b.n	8002962 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 8002942:	46c0      	nop			@ (mov r8, r8)
 8002944:	e00e      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8002946:	46c0      	nop			@ (mov r8, r8)
 8002948:	e00c      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	e00a      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	e008      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8002952:	46c0      	nop			@ (mov r8, r8)
 8002954:	e006      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	e004      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800295a:	46c0      	nop			@ (mov r8, r8)
 800295c:	e002      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800295e:	46c0      	nop			@ (mov r8, r8)
 8002960:	e000      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8002962:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 8002964:	697b      	ldr	r3, [r7, #20]
}
 8002966:	0018      	movs	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	b006      	add	sp, #24
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			@ (mov r8, r8)
 8002970:	40021000 	.word	0x40021000
 8002974:	00f42400 	.word	0x00f42400
 8002978:	00bb8000 	.word	0x00bb8000

0800297c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800297c:	b5b0      	push	{r4, r5, r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002984:	230f      	movs	r3, #15
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d100      	bne.n	8002994 <HAL_RTC_Init+0x18>
 8002992:	e08c      	b.n	8002aae <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2229      	movs	r2, #41	@ 0x29
 8002998:	5c9b      	ldrb	r3, [r3, r2]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10b      	bne.n	80029b8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2228      	movs	r2, #40	@ 0x28
 80029a4:	2100      	movs	r1, #0
 80029a6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2288      	movs	r2, #136	@ 0x88
 80029ac:	0212      	lsls	r2, r2, #8
 80029ae:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f7fe f862 	bl	8000a7c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2229      	movs	r2, #41	@ 0x29
 80029bc:	2102      	movs	r1, #2
 80029be:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2210      	movs	r2, #16
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d062      	beq.n	8002a94 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	22ca      	movs	r2, #202	@ 0xca
 80029d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2253      	movs	r2, #83	@ 0x53
 80029dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80029de:	250f      	movs	r5, #15
 80029e0:	197c      	adds	r4, r7, r5
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 faf1 	bl	8002fcc <RTC_EnterInitMode>
 80029ea:	0003      	movs	r3, r0
 80029ec:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80029ee:	0028      	movs	r0, r5
 80029f0:	183b      	adds	r3, r7, r0
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d12c      	bne.n	8002a52 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	492e      	ldr	r1, [pc, #184]	@ (8002abc <HAL_RTC_Init+0x140>)
 8002a04:	400a      	ands	r2, r1
 8002a06:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6999      	ldr	r1, [r3, #24]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6912      	ldr	r2, [r2, #16]
 8002a2e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6919      	ldr	r1, [r3, #16]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	041a      	lsls	r2, r3, #16
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002a44:	183c      	adds	r4, r7, r0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f000 fb01 	bl	8003050 <RTC_ExitInitMode>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002a52:	230f      	movs	r3, #15
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d116      	bne.n	8002a8a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	00d2      	lsls	r2, r2, #3
 8002a68:	08d2      	lsrs	r2, r2, #3
 8002a6a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6999      	ldr	r1, [r3, #24]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	22ff      	movs	r2, #255	@ 0xff
 8002a90:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a92:	e003      	b.n	8002a9c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002a94:	230f      	movs	r3, #15
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002a9c:	230f      	movs	r3, #15
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2229      	movs	r2, #41	@ 0x29
 8002aaa:	2101      	movs	r1, #1
 8002aac:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002aae:	230f      	movs	r3, #15
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	781b      	ldrb	r3, [r3, #0]
}
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b004      	add	sp, #16
 8002aba:	bdb0      	pop	{r4, r5, r7, pc}
 8002abc:	fb8fffbf 	.word	0xfb8fffbf

08002ac0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ac0:	b5b0      	push	{r4, r5, r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2228      	movs	r2, #40	@ 0x28
 8002ad0:	5c9b      	ldrb	r3, [r3, r2]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_RTC_SetTime+0x1a>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e092      	b.n	8002c00 <HAL_RTC_SetTime+0x140>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2228      	movs	r2, #40	@ 0x28
 8002ade:	2101      	movs	r1, #1
 8002ae0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2229      	movs	r2, #41	@ 0x29
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	22ca      	movs	r2, #202	@ 0xca
 8002af0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2253      	movs	r2, #83	@ 0x53
 8002af8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002afa:	2513      	movs	r5, #19
 8002afc:	197c      	adds	r4, r7, r5
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f000 fa63 	bl	8002fcc <RTC_EnterInitMode>
 8002b06:	0003      	movs	r3, r0
 8002b08:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002b0a:	197b      	adds	r3, r7, r5
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d162      	bne.n	8002bd8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d125      	bne.n	8002b64 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2240      	movs	r2, #64	@ 0x40
 8002b20:	4013      	ands	r3, r2
 8002b22:	d102      	bne.n	8002b2a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2200      	movs	r2, #0
 8002b28:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f000 fad2 	bl	80030d8 <RTC_ByteToBcd2>
 8002b34:	0003      	movs	r3, r0
 8002b36:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	785b      	ldrb	r3, [r3, #1]
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f000 facb 	bl	80030d8 <RTC_ByteToBcd2>
 8002b42:	0003      	movs	r3, r0
 8002b44:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b46:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	789b      	ldrb	r3, [r3, #2]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 fac3 	bl	80030d8 <RTC_ByteToBcd2>
 8002b52:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b54:	0022      	movs	r2, r4
 8002b56:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	78db      	ldrb	r3, [r3, #3]
 8002b5c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e017      	b.n	8002b94 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2240      	movs	r2, #64	@ 0x40
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d102      	bne.n	8002b76 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2200      	movs	r2, #0
 8002b74:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	785b      	ldrb	r3, [r3, #1]
 8002b80:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b82:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b88:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	78db      	ldrb	r3, [r3, #3]
 8002b8e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	491b      	ldr	r1, [pc, #108]	@ (8002c08 <HAL_RTC_SetTime+0x148>)
 8002b9c:	400a      	ands	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4918      	ldr	r1, [pc, #96]	@ (8002c0c <HAL_RTC_SetTime+0x14c>)
 8002bac:	400a      	ands	r2, r1
 8002bae:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6999      	ldr	r1, [r3, #24]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002bc8:	2313      	movs	r3, #19
 8002bca:	18fc      	adds	r4, r7, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 fa3e 	bl	8003050 <RTC_ExitInitMode>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	22ff      	movs	r2, #255	@ 0xff
 8002bde:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8002be0:	2313      	movs	r3, #19
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2229      	movs	r2, #41	@ 0x29
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2228      	movs	r2, #40	@ 0x28
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	5499      	strb	r1, [r3, r2]

  return status;
 8002bfa:	2313      	movs	r3, #19
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	781b      	ldrb	r3, [r3, #0]
}
 8002c00:	0018      	movs	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b006      	add	sp, #24
 8002c06:	bdb0      	pop	{r4, r5, r7, pc}
 8002c08:	007f7f7f 	.word	0x007f7f7f
 8002c0c:	fffbffff 	.word	0xfffbffff

08002c10 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c10:	b5b0      	push	{r4, r5, r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2228      	movs	r2, #40	@ 0x28
 8002c20:	5c9b      	ldrb	r3, [r3, r2]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_RTC_SetDate+0x1a>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e07e      	b.n	8002d28 <HAL_RTC_SetDate+0x118>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2228      	movs	r2, #40	@ 0x28
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2229      	movs	r2, #41	@ 0x29
 8002c36:	2102      	movs	r1, #2
 8002c38:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10e      	bne.n	8002c5e <HAL_RTC_SetDate+0x4e>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	785b      	ldrb	r3, [r3, #1]
 8002c44:	001a      	movs	r2, r3
 8002c46:	2310      	movs	r3, #16
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d008      	beq.n	8002c5e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	785b      	ldrb	r3, [r3, #1]
 8002c50:	2210      	movs	r2, #16
 8002c52:	4393      	bics	r3, r2
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	330a      	adds	r3, #10
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d11c      	bne.n	8002c9e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	78db      	ldrb	r3, [r3, #3]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 fa35 	bl	80030d8 <RTC_ByteToBcd2>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	785b      	ldrb	r3, [r3, #1]
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 fa2e 	bl	80030d8 <RTC_ByteToBcd2>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002c80:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	789b      	ldrb	r3, [r3, #2]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 fa26 	bl	80030d8 <RTC_ByteToBcd2>
 8002c8c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002c8e:	0022      	movs	r2, r4
 8002c90:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e00e      	b.n	8002cbc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	78db      	ldrb	r3, [r3, #3]
 8002ca2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	785b      	ldrb	r3, [r3, #1]
 8002ca8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002caa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002cb0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	22ca      	movs	r2, #202	@ 0xca
 8002cc2:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2253      	movs	r2, #83	@ 0x53
 8002cca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ccc:	2513      	movs	r5, #19
 8002cce:	197c      	adds	r4, r7, r5
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 f97a 	bl	8002fcc <RTC_EnterInitMode>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002cdc:	0028      	movs	r0, r5
 8002cde:	183b      	adds	r3, r7, r0
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4910      	ldr	r1, [pc, #64]	@ (8002d30 <HAL_RTC_SetDate+0x120>)
 8002cee:	400a      	ands	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002cf2:	183c      	adds	r4, r7, r0
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f000 f9aa 	bl	8003050 <RTC_ExitInitMode>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	22ff      	movs	r2, #255	@ 0xff
 8002d06:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002d08:	2313      	movs	r3, #19
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d103      	bne.n	8002d1a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2229      	movs	r2, #41	@ 0x29
 8002d16:	2101      	movs	r1, #1
 8002d18:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2228      	movs	r2, #40	@ 0x28
 8002d1e:	2100      	movs	r1, #0
 8002d20:	5499      	strb	r1, [r3, r2]

  return status;
 8002d22:	2313      	movs	r3, #19
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	781b      	ldrb	r3, [r3, #0]
}
 8002d28:	0018      	movs	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b006      	add	sp, #24
 8002d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d30:	00ffff3f 	.word	0x00ffff3f

08002d34 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b089      	sub	sp, #36	@ 0x24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2228      	movs	r2, #40	@ 0x28
 8002d44:	5c9b      	ldrb	r3, [r3, r2]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_RTC_SetAlarm+0x1a>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e10c      	b.n	8002f68 <HAL_RTC_SetAlarm+0x234>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2228      	movs	r2, #40	@ 0x28
 8002d52:	2101      	movs	r1, #1
 8002d54:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2229      	movs	r2, #41	@ 0x29
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d136      	bne.n	8002dd2 <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2240      	movs	r2, #64	@ 0x40
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d102      	bne.n	8002d76 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2200      	movs	r2, #0
 8002d74:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 f9ac 	bl	80030d8 <RTC_ByteToBcd2>
 8002d80:	0003      	movs	r3, r0
 8002d82:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	785b      	ldrb	r3, [r3, #1]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 f9a5 	bl	80030d8 <RTC_ByteToBcd2>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002d92:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	789b      	ldrb	r3, [r3, #2]
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f000 f99d 	bl	80030d8 <RTC_ByteToBcd2>
 8002d9e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002da0:	0022      	movs	r2, r4
 8002da2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	78db      	ldrb	r3, [r3, #3]
 8002da8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002daa:	431a      	orrs	r2, r3
 8002dac:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2220      	movs	r2, #32
 8002db2:	5c9b      	ldrb	r3, [r3, r2]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f000 f98f 	bl	80030d8 <RTC_ByteToBcd2>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002dbe:	0022      	movs	r2, r4
 8002dc0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002dc6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	e022      	b.n	8002e18 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2240      	movs	r2, #64	@ 0x40
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d102      	bne.n	8002de4 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2200      	movs	r2, #0
 8002de2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	785b      	ldrb	r3, [r3, #1]
 8002dee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002df0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002df6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	78db      	ldrb	r3, [r3, #3]
 8002dfc:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002dfe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2120      	movs	r1, #32
 8002e04:	5c5b      	ldrb	r3, [r3, r1]
 8002e06:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002e08:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002e0e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	22ca      	movs	r2, #202	@ 0xca
 8002e2a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2253      	movs	r2, #83	@ 0x53
 8002e32:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d143      	bne.n	8002ec8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4949      	ldr	r1, [pc, #292]	@ (8002f70 <HAL_RTC_SetAlarm+0x23c>)
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4946      	ldr	r1, [pc, #280]	@ (8002f74 <HAL_RTC_SetAlarm+0x240>)
 8002e5c:	400a      	ands	r2, r1
 8002e5e:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8002e60:	f7fd ffc6 	bl	8000df0 <HAL_GetTick>
 8002e64:	0003      	movs	r3, r0
 8002e66:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002e68:	e016      	b.n	8002e98 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e6a:	f7fd ffc1 	bl	8000df0 <HAL_GetTick>
 8002e6e:	0002      	movs	r2, r0
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	1ad2      	subs	r2, r2, r3
 8002e74:	23fa      	movs	r3, #250	@ 0xfa
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d90d      	bls.n	8002e98 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	22ff      	movs	r2, #255	@ 0xff
 8002e82:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2229      	movs	r2, #41	@ 0x29
 8002e88:	2103      	movs	r1, #3
 8002e8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2228      	movs	r2, #40	@ 0x28
 8002e90:	2100      	movs	r1, #0
 8002e92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e067      	b.n	8002f68 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d0e2      	beq.n	8002e6a <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2180      	movs	r1, #128	@ 0x80
 8002ec0:	0049      	lsls	r1, r1, #1
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	619a      	str	r2, [r3, #24]
 8002ec6:	e042      	b.n	8002f4e <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4929      	ldr	r1, [pc, #164]	@ (8002f78 <HAL_RTC_SetAlarm+0x244>)
 8002ed4:	400a      	ands	r2, r1
 8002ed6:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4926      	ldr	r1, [pc, #152]	@ (8002f7c <HAL_RTC_SetAlarm+0x248>)
 8002ee4:	400a      	ands	r2, r1
 8002ee6:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8002ee8:	f7fd ff82 	bl	8000df0 <HAL_GetTick>
 8002eec:	0003      	movs	r3, r0
 8002eee:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002ef0:	e016      	b.n	8002f20 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002ef2:	f7fd ff7d 	bl	8000df0 <HAL_GetTick>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	1ad2      	subs	r2, r2, r3
 8002efc:	23fa      	movs	r3, #250	@ 0xfa
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d90d      	bls.n	8002f20 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	22ff      	movs	r2, #255	@ 0xff
 8002f0a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2229      	movs	r2, #41	@ 0x29
 8002f10:	2103      	movs	r1, #3
 8002f12:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2228      	movs	r2, #40	@ 0x28
 8002f18:	2100      	movs	r1, #0
 8002f1a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e023      	b.n	8002f68 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2202      	movs	r2, #2
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d0e2      	beq.n	8002ef2 <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2180      	movs	r1, #128	@ 0x80
 8002f48:	0089      	lsls	r1, r1, #2
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	22ff      	movs	r2, #255	@ 0xff
 8002f54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2229      	movs	r2, #41	@ 0x29
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2228      	movs	r2, #40	@ 0x28
 8002f62:	2100      	movs	r1, #0
 8002f64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	0018      	movs	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b009      	add	sp, #36	@ 0x24
 8002f6e:	bd90      	pop	{r4, r7, pc}
 8002f70:	fffffeff 	.word	0xfffffeff
 8002f74:	ffffefff 	.word	0xffffefff
 8002f78:	fffffdff 	.word	0xfffffdff
 8002f7c:	ffffdfff 	.word	0xffffdfff

08002f80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8002fc8 <HAL_RTC_WaitForSynchro+0x48>)
 8002f8e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002f90:	f7fd ff2e 	bl	8000df0 <HAL_GetTick>
 8002f94:	0003      	movs	r3, r0
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f9a:	f7fd ff29 	bl	8000df0 <HAL_GetTick>
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1ad2      	subs	r2, r2, r3
 8002fa4:	23fa      	movs	r3, #250	@ 0xfa
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d901      	bls.n	8002fb0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e006      	b.n	8002fbe <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d0ee      	beq.n	8002f9a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b004      	add	sp, #16
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	0001005f 	.word	0x0001005f

08002fcc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002fd4:	230f      	movs	r3, #15
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2240      	movs	r2, #64	@ 0x40
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d12c      	bne.n	8003042 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2180      	movs	r1, #128	@ 0x80
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002ff8:	f7fd fefa 	bl	8000df0 <HAL_GetTick>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003000:	e014      	b.n	800302c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003002:	f7fd fef5 	bl	8000df0 <HAL_GetTick>
 8003006:	0002      	movs	r2, r0
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	1ad2      	subs	r2, r2, r3
 800300c:	200f      	movs	r0, #15
 800300e:	183b      	adds	r3, r7, r0
 8003010:	1839      	adds	r1, r7, r0
 8003012:	7809      	ldrb	r1, [r1, #0]
 8003014:	7019      	strb	r1, [r3, #0]
 8003016:	23fa      	movs	r3, #250	@ 0xfa
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	429a      	cmp	r2, r3
 800301c:	d906      	bls.n	800302c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800301e:	183b      	adds	r3, r7, r0
 8003020:	2203      	movs	r2, #3
 8003022:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2229      	movs	r2, #41	@ 0x29
 8003028:	2103      	movs	r1, #3
 800302a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2240      	movs	r2, #64	@ 0x40
 8003034:	4013      	ands	r3, r2
 8003036:	d104      	bne.n	8003042 <RTC_EnterInitMode+0x76>
 8003038:	230f      	movs	r3, #15
 800303a:	18fb      	adds	r3, r7, r3
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b03      	cmp	r3, #3
 8003040:	d1df      	bne.n	8003002 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003042:	230f      	movs	r3, #15
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	781b      	ldrb	r3, [r3, #0]
}
 8003048:	0018      	movs	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	b004      	add	sp, #16
 800304e:	bd80      	pop	{r7, pc}

08003050 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003058:	240f      	movs	r4, #15
 800305a:	193b      	adds	r3, r7, r4
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003060:	4b1c      	ldr	r3, [pc, #112]	@ (80030d4 <RTC_ExitInitMode+0x84>)
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	4b1b      	ldr	r3, [pc, #108]	@ (80030d4 <RTC_ExitInitMode+0x84>)
 8003066:	2180      	movs	r1, #128	@ 0x80
 8003068:	438a      	bics	r2, r1
 800306a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800306c:	4b19      	ldr	r3, [pc, #100]	@ (80030d4 <RTC_ExitInitMode+0x84>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2220      	movs	r2, #32
 8003072:	4013      	ands	r3, r2
 8003074:	d10d      	bne.n	8003092 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	0018      	movs	r0, r3
 800307a:	f7ff ff81 	bl	8002f80 <HAL_RTC_WaitForSynchro>
 800307e:	1e03      	subs	r3, r0, #0
 8003080:	d021      	beq.n	80030c6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2229      	movs	r2, #41	@ 0x29
 8003086:	2103      	movs	r1, #3
 8003088:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800308a:	193b      	adds	r3, r7, r4
 800308c:	2203      	movs	r2, #3
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e019      	b.n	80030c6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003092:	4b10      	ldr	r3, [pc, #64]	@ (80030d4 <RTC_ExitInitMode+0x84>)
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <RTC_ExitInitMode+0x84>)
 8003098:	2120      	movs	r1, #32
 800309a:	438a      	bics	r2, r1
 800309c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f7ff ff6d 	bl	8002f80 <HAL_RTC_WaitForSynchro>
 80030a6:	1e03      	subs	r3, r0, #0
 80030a8:	d007      	beq.n	80030ba <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2229      	movs	r2, #41	@ 0x29
 80030ae:	2103      	movs	r1, #3
 80030b0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80030b2:	230f      	movs	r3, #15
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	2203      	movs	r2, #3
 80030b8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80030ba:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <RTC_ExitInitMode+0x84>)
 80030bc:	699a      	ldr	r2, [r3, #24]
 80030be:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <RTC_ExitInitMode+0x84>)
 80030c0:	2120      	movs	r1, #32
 80030c2:	430a      	orrs	r2, r1
 80030c4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80030c6:	230f      	movs	r3, #15
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	781b      	ldrb	r3, [r3, #0]
}
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b005      	add	sp, #20
 80030d2:	bd90      	pop	{r4, r7, pc}
 80030d4:	40002800 	.word	0x40002800

080030d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	0002      	movs	r2, r0
 80030e0:	1dfb      	adds	r3, r7, #7
 80030e2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80030e8:	230b      	movs	r3, #11
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	1dfa      	adds	r2, r7, #7
 80030ee:	7812      	ldrb	r2, [r2, #0]
 80030f0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80030f2:	e008      	b.n	8003106 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3301      	adds	r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80030fa:	220b      	movs	r2, #11
 80030fc:	18bb      	adds	r3, r7, r2
 80030fe:	18ba      	adds	r2, r7, r2
 8003100:	7812      	ldrb	r2, [r2, #0]
 8003102:	3a0a      	subs	r2, #10
 8003104:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003106:	210b      	movs	r1, #11
 8003108:	187b      	adds	r3, r7, r1
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b09      	cmp	r3, #9
 800310e:	d8f1      	bhi.n	80030f4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	b2da      	uxtb	r2, r3
 8003118:	187b      	adds	r3, r7, r1
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	4313      	orrs	r3, r2
 800311e:	b2db      	uxtb	r3, r3
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	b004      	add	sp, #16
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2228      	movs	r2, #40	@ 0x28
 8003136:	5c9b      	ldrb	r3, [r3, r2]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 800313c:	2302      	movs	r3, #2
 800313e:	e035      	b.n	80031ac <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2228      	movs	r2, #40	@ 0x28
 8003144:	2101      	movs	r1, #1
 8003146:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2229      	movs	r2, #41	@ 0x29
 800314c:	2102      	movs	r1, #2
 800314e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	22ca      	movs	r2, #202	@ 0xca
 8003156:	625a      	str	r2, [r3, #36]	@ 0x24
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2253      	movs	r2, #83	@ 0x53
 800315e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4912      	ldr	r1, [pc, #72]	@ (80031b4 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 800316c:	400a      	ands	r2, r1
 800316e:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6999      	ldr	r1, [r3, #24]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2180      	movs	r1, #128	@ 0x80
 800318c:	0409      	lsls	r1, r1, #16
 800318e:	430a      	orrs	r2, r1
 8003190:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	22ff      	movs	r2, #255	@ 0xff
 8003198:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2229      	movs	r2, #41	@ 0x29
 800319e:	2101      	movs	r1, #1
 80031a0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2228      	movs	r2, #40	@ 0x28
 80031a6:	2100      	movs	r1, #0
 80031a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	0018      	movs	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	fff7ffff 	.word	0xfff7ffff

080031b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e0a8      	b.n	800331c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	2382      	movs	r3, #130	@ 0x82
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	429a      	cmp	r2, r3
 80031dc:	d009      	beq.n	80031f2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	61da      	str	r2, [r3, #28]
 80031e4:	e005      	b.n	80031f2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	225d      	movs	r2, #93	@ 0x5d
 80031fc:	5c9b      	ldrb	r3, [r3, r2]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d107      	bne.n	8003214 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	225c      	movs	r2, #92	@ 0x5c
 8003208:	2100      	movs	r1, #0
 800320a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	0018      	movs	r0, r3
 8003210:	f7fd fc72 	bl	8000af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	225d      	movs	r2, #93	@ 0x5d
 8003218:	2102      	movs	r1, #2
 800321a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2140      	movs	r1, #64	@ 0x40
 8003228:	438a      	bics	r2, r1
 800322a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	23e0      	movs	r3, #224	@ 0xe0
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	429a      	cmp	r2, r3
 8003236:	d902      	bls.n	800323e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e002      	b.n	8003244 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800323e:	2380      	movs	r3, #128	@ 0x80
 8003240:	015b      	lsls	r3, r3, #5
 8003242:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	23f0      	movs	r3, #240	@ 0xf0
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	429a      	cmp	r2, r3
 800324e:	d008      	beq.n	8003262 <HAL_SPI_Init+0xaa>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	23e0      	movs	r3, #224	@ 0xe0
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	429a      	cmp	r2, r3
 800325a:	d002      	beq.n	8003262 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	2382      	movs	r3, #130	@ 0x82
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	401a      	ands	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6899      	ldr	r1, [r3, #8]
 8003270:	2384      	movs	r3, #132	@ 0x84
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	400b      	ands	r3, r1
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	2102      	movs	r1, #2
 800327e:	400b      	ands	r3, r1
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	2101      	movs	r1, #1
 8003288:	400b      	ands	r3, r1
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6999      	ldr	r1, [r3, #24]
 8003290:	2380      	movs	r3, #128	@ 0x80
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	400b      	ands	r3, r1
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	2138      	movs	r1, #56	@ 0x38
 800329e:	400b      	ands	r3, r1
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	2180      	movs	r1, #128	@ 0x80
 80032a8:	400b      	ands	r3, r1
 80032aa:	431a      	orrs	r2, r3
 80032ac:	0011      	movs	r1, r2
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032b2:	2380      	movs	r3, #128	@ 0x80
 80032b4:	019b      	lsls	r3, r3, #6
 80032b6:	401a      	ands	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	2204      	movs	r2, #4
 80032c8:	401a      	ands	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	2110      	movs	r1, #16
 80032d0:	400b      	ands	r3, r1
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d8:	2108      	movs	r1, #8
 80032da:	400b      	ands	r3, r1
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68d9      	ldr	r1, [r3, #12]
 80032e2:	23f0      	movs	r3, #240	@ 0xf0
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	400b      	ands	r3, r1
 80032e8:	431a      	orrs	r2, r3
 80032ea:	0011      	movs	r1, r2
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	2380      	movs	r3, #128	@ 0x80
 80032f0:	015b      	lsls	r3, r3, #5
 80032f2:	401a      	ands	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69da      	ldr	r2, [r3, #28]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4907      	ldr	r1, [pc, #28]	@ (8003324 <HAL_SPI_Init+0x16c>)
 8003308:	400a      	ands	r2, r1
 800330a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	225d      	movs	r2, #93	@ 0x5d
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	0018      	movs	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	b004      	add	sp, #16
 8003322:	bd80      	pop	{r7, pc}
 8003324:	fffff7ff 	.word	0xfffff7ff

08003328 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e04a      	b.n	80033d0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	223d      	movs	r2, #61	@ 0x3d
 800333e:	5c9b      	ldrb	r3, [r3, r2]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d107      	bne.n	8003356 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	223c      	movs	r2, #60	@ 0x3c
 800334a:	2100      	movs	r1, #0
 800334c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	0018      	movs	r0, r3
 8003352:	f7fd fc31 	bl	8000bb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	223d      	movs	r2, #61	@ 0x3d
 800335a:	2102      	movs	r1, #2
 800335c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	0019      	movs	r1, r3
 8003368:	0010      	movs	r0, r2
 800336a:	f000 f935 	bl	80035d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2248      	movs	r2, #72	@ 0x48
 8003372:	2101      	movs	r1, #1
 8003374:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	223e      	movs	r2, #62	@ 0x3e
 800337a:	2101      	movs	r1, #1
 800337c:	5499      	strb	r1, [r3, r2]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	223f      	movs	r2, #63	@ 0x3f
 8003382:	2101      	movs	r1, #1
 8003384:	5499      	strb	r1, [r3, r2]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2240      	movs	r2, #64	@ 0x40
 800338a:	2101      	movs	r1, #1
 800338c:	5499      	strb	r1, [r3, r2]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2241      	movs	r2, #65	@ 0x41
 8003392:	2101      	movs	r1, #1
 8003394:	5499      	strb	r1, [r3, r2]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2242      	movs	r2, #66	@ 0x42
 800339a:	2101      	movs	r1, #1
 800339c:	5499      	strb	r1, [r3, r2]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2243      	movs	r2, #67	@ 0x43
 80033a2:	2101      	movs	r1, #1
 80033a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2244      	movs	r2, #68	@ 0x44
 80033aa:	2101      	movs	r1, #1
 80033ac:	5499      	strb	r1, [r3, r2]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2245      	movs	r2, #69	@ 0x45
 80033b2:	2101      	movs	r1, #1
 80033b4:	5499      	strb	r1, [r3, r2]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2246      	movs	r2, #70	@ 0x46
 80033ba:	2101      	movs	r1, #1
 80033bc:	5499      	strb	r1, [r3, r2]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2247      	movs	r2, #71	@ 0x47
 80033c2:	2101      	movs	r1, #1
 80033c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	223d      	movs	r2, #61	@ 0x3d
 80033ca:	2101      	movs	r1, #1
 80033cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b002      	add	sp, #8
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e4:	2317      	movs	r3, #23
 80033e6:	18fb      	adds	r3, r7, r3
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	223c      	movs	r2, #60	@ 0x3c
 80033f0:	5c9b      	ldrb	r3, [r3, r2]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x22>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e0e5      	b.n	80035c6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	223c      	movs	r2, #60	@ 0x3c
 80033fe:	2101      	movs	r1, #1
 8003400:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b14      	cmp	r3, #20
 8003406:	d900      	bls.n	800340a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003408:	e0d1      	b.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	009a      	lsls	r2, r3, #2
 800340e:	4b70      	ldr	r3, [pc, #448]	@ (80035d0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003410:	18d3      	adds	r3, r2, r3
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	0011      	movs	r1, r2
 800341e:	0018      	movs	r0, r3
 8003420:	f000 f95e 	bl	80036e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2108      	movs	r1, #8
 8003430:	430a      	orrs	r2, r1
 8003432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2104      	movs	r1, #4
 8003440:	438a      	bics	r2, r1
 8003442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6999      	ldr	r1, [r3, #24]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	619a      	str	r2, [r3, #24]
      break;
 8003456:	e0af      	b.n	80035b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	0011      	movs	r1, r2
 8003460:	0018      	movs	r0, r3
 8003462:	f000 f9bd 	bl	80037e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699a      	ldr	r2, [r3, #24]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2180      	movs	r1, #128	@ 0x80
 8003472:	0109      	lsls	r1, r1, #4
 8003474:	430a      	orrs	r2, r1
 8003476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4954      	ldr	r1, [pc, #336]	@ (80035d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003484:	400a      	ands	r2, r1
 8003486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6999      	ldr	r1, [r3, #24]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	021a      	lsls	r2, r3, #8
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	619a      	str	r2, [r3, #24]
      break;
 800349c:	e08c      	b.n	80035b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	0011      	movs	r1, r2
 80034a6:	0018      	movs	r0, r3
 80034a8:	f000 fa18 	bl	80038dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2108      	movs	r1, #8
 80034b8:	430a      	orrs	r2, r1
 80034ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	69da      	ldr	r2, [r3, #28]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2104      	movs	r1, #4
 80034c8:	438a      	bics	r2, r1
 80034ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69d9      	ldr	r1, [r3, #28]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	61da      	str	r2, [r3, #28]
      break;
 80034de:	e06b      	b.n	80035b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	0011      	movs	r1, r2
 80034e8:	0018      	movs	r0, r3
 80034ea:	f000 fa79 	bl	80039e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2180      	movs	r1, #128	@ 0x80
 80034fa:	0109      	lsls	r1, r1, #4
 80034fc:	430a      	orrs	r2, r1
 80034fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69da      	ldr	r2, [r3, #28]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4932      	ldr	r1, [pc, #200]	@ (80035d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800350c:	400a      	ands	r2, r1
 800350e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69d9      	ldr	r1, [r3, #28]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	021a      	lsls	r2, r3, #8
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	61da      	str	r2, [r3, #28]
      break;
 8003524:	e048      	b.n	80035b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	0011      	movs	r1, r2
 800352e:	0018      	movs	r0, r3
 8003530:	f000 faba 	bl	8003aa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2108      	movs	r1, #8
 8003540:	430a      	orrs	r2, r1
 8003542:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2104      	movs	r1, #4
 8003550:	438a      	bics	r2, r1
 8003552:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003566:	e027      	b.n	80035b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	0011      	movs	r1, r2
 8003570:	0018      	movs	r0, r3
 8003572:	f000 faf3 	bl	8003b5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2180      	movs	r1, #128	@ 0x80
 8003582:	0109      	lsls	r1, r1, #4
 8003584:	430a      	orrs	r2, r1
 8003586:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4910      	ldr	r1, [pc, #64]	@ (80035d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003594:	400a      	ands	r2, r1
 8003596:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	021a      	lsls	r2, r3, #8
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80035ac:	e004      	b.n	80035b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80035ae:	2317      	movs	r3, #23
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	2201      	movs	r2, #1
 80035b4:	701a      	strb	r2, [r3, #0]
      break;
 80035b6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	223c      	movs	r2, #60	@ 0x3c
 80035bc:	2100      	movs	r1, #0
 80035be:	5499      	strb	r1, [r3, r2]

  return status;
 80035c0:	2317      	movs	r3, #23
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	781b      	ldrb	r3, [r3, #0]
}
 80035c6:	0018      	movs	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b006      	add	sp, #24
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	46c0      	nop			@ (mov r8, r8)
 80035d0:	08003db8 	.word	0x08003db8
 80035d4:	fffffbff 	.word	0xfffffbff

080035d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a37      	ldr	r2, [pc, #220]	@ (80036c8 <TIM_Base_SetConfig+0xf0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d008      	beq.n	8003602 <TIM_Base_SetConfig+0x2a>
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	2380      	movs	r3, #128	@ 0x80
 80035f4:	05db      	lsls	r3, r3, #23
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d003      	beq.n	8003602 <TIM_Base_SetConfig+0x2a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a33      	ldr	r2, [pc, #204]	@ (80036cc <TIM_Base_SetConfig+0xf4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d108      	bne.n	8003614 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2270      	movs	r2, #112	@ 0x70
 8003606:	4393      	bics	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a2c      	ldr	r2, [pc, #176]	@ (80036c8 <TIM_Base_SetConfig+0xf0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d014      	beq.n	8003646 <TIM_Base_SetConfig+0x6e>
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	2380      	movs	r3, #128	@ 0x80
 8003620:	05db      	lsls	r3, r3, #23
 8003622:	429a      	cmp	r2, r3
 8003624:	d00f      	beq.n	8003646 <TIM_Base_SetConfig+0x6e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a28      	ldr	r2, [pc, #160]	@ (80036cc <TIM_Base_SetConfig+0xf4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00b      	beq.n	8003646 <TIM_Base_SetConfig+0x6e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a27      	ldr	r2, [pc, #156]	@ (80036d0 <TIM_Base_SetConfig+0xf8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d007      	beq.n	8003646 <TIM_Base_SetConfig+0x6e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a26      	ldr	r2, [pc, #152]	@ (80036d4 <TIM_Base_SetConfig+0xfc>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d003      	beq.n	8003646 <TIM_Base_SetConfig+0x6e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a25      	ldr	r2, [pc, #148]	@ (80036d8 <TIM_Base_SetConfig+0x100>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d108      	bne.n	8003658 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a24      	ldr	r2, [pc, #144]	@ (80036dc <TIM_Base_SetConfig+0x104>)
 800364a:	4013      	ands	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2280      	movs	r2, #128	@ 0x80
 800365c:	4393      	bics	r3, r2
 800365e:	001a      	movs	r2, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a11      	ldr	r2, [pc, #68]	@ (80036c8 <TIM_Base_SetConfig+0xf0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d007      	beq.n	8003696 <TIM_Base_SetConfig+0xbe>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a12      	ldr	r2, [pc, #72]	@ (80036d4 <TIM_Base_SetConfig+0xfc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d003      	beq.n	8003696 <TIM_Base_SetConfig+0xbe>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a11      	ldr	r2, [pc, #68]	@ (80036d8 <TIM_Base_SetConfig+0x100>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d103      	bne.n	800369e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2201      	movs	r2, #1
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d106      	bne.n	80036be <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	2201      	movs	r2, #1
 80036b6:	4393      	bics	r3, r2
 80036b8:	001a      	movs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	611a      	str	r2, [r3, #16]
  }
}
 80036be:	46c0      	nop			@ (mov r8, r8)
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b004      	add	sp, #16
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	40012c00 	.word	0x40012c00
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40002000 	.word	0x40002000
 80036d4:	40014400 	.word	0x40014400
 80036d8:	40014800 	.word	0x40014800
 80036dc:	fffffcff 	.word	0xfffffcff

080036e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	2201      	movs	r2, #1
 80036f6:	4393      	bics	r3, r2
 80036f8:	001a      	movs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4a2e      	ldr	r2, [pc, #184]	@ (80037c8 <TIM_OC1_SetConfig+0xe8>)
 800370e:	4013      	ands	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2203      	movs	r2, #3
 8003716:	4393      	bics	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2202      	movs	r2, #2
 8003728:	4393      	bics	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a24      	ldr	r2, [pc, #144]	@ (80037cc <TIM_OC1_SetConfig+0xec>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d007      	beq.n	800374e <TIM_OC1_SetConfig+0x6e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a23      	ldr	r2, [pc, #140]	@ (80037d0 <TIM_OC1_SetConfig+0xf0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d003      	beq.n	800374e <TIM_OC1_SetConfig+0x6e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a22      	ldr	r2, [pc, #136]	@ (80037d4 <TIM_OC1_SetConfig+0xf4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d10c      	bne.n	8003768 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2208      	movs	r2, #8
 8003752:	4393      	bics	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2204      	movs	r2, #4
 8003764:	4393      	bics	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a18      	ldr	r2, [pc, #96]	@ (80037cc <TIM_OC1_SetConfig+0xec>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d007      	beq.n	8003780 <TIM_OC1_SetConfig+0xa0>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a17      	ldr	r2, [pc, #92]	@ (80037d0 <TIM_OC1_SetConfig+0xf0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d003      	beq.n	8003780 <TIM_OC1_SetConfig+0xa0>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a16      	ldr	r2, [pc, #88]	@ (80037d4 <TIM_OC1_SetConfig+0xf4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d111      	bne.n	80037a4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4a15      	ldr	r2, [pc, #84]	@ (80037d8 <TIM_OC1_SetConfig+0xf8>)
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4a14      	ldr	r2, [pc, #80]	@ (80037dc <TIM_OC1_SetConfig+0xfc>)
 800378c:	4013      	ands	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b006      	add	sp, #24
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	fffeff8f 	.word	0xfffeff8f
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40014400 	.word	0x40014400
 80037d4:	40014800 	.word	0x40014800
 80037d8:	fffffeff 	.word	0xfffffeff
 80037dc:	fffffdff 	.word	0xfffffdff

080037e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	2210      	movs	r2, #16
 80037f6:	4393      	bics	r3, r2
 80037f8:	001a      	movs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4a2c      	ldr	r2, [pc, #176]	@ (80038c0 <TIM_OC2_SetConfig+0xe0>)
 800380e:	4013      	ands	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4a2b      	ldr	r2, [pc, #172]	@ (80038c4 <TIM_OC2_SetConfig+0xe4>)
 8003816:	4013      	ands	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2220      	movs	r2, #32
 800382a:	4393      	bics	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a22      	ldr	r2, [pc, #136]	@ (80038c8 <TIM_OC2_SetConfig+0xe8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d10d      	bne.n	800385e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2280      	movs	r2, #128	@ 0x80
 8003846:	4393      	bics	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2240      	movs	r2, #64	@ 0x40
 800385a:	4393      	bics	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a19      	ldr	r2, [pc, #100]	@ (80038c8 <TIM_OC2_SetConfig+0xe8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d007      	beq.n	8003876 <TIM_OC2_SetConfig+0x96>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a18      	ldr	r2, [pc, #96]	@ (80038cc <TIM_OC2_SetConfig+0xec>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d003      	beq.n	8003876 <TIM_OC2_SetConfig+0x96>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a17      	ldr	r2, [pc, #92]	@ (80038d0 <TIM_OC2_SetConfig+0xf0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d113      	bne.n	800389e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4a16      	ldr	r2, [pc, #88]	@ (80038d4 <TIM_OC2_SetConfig+0xf4>)
 800387a:	4013      	ands	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	4a15      	ldr	r2, [pc, #84]	@ (80038d8 <TIM_OC2_SetConfig+0xf8>)
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	621a      	str	r2, [r3, #32]
}
 80038b8:	46c0      	nop			@ (mov r8, r8)
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b006      	add	sp, #24
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	feff8fff 	.word	0xfeff8fff
 80038c4:	fffffcff 	.word	0xfffffcff
 80038c8:	40012c00 	.word	0x40012c00
 80038cc:	40014400 	.word	0x40014400
 80038d0:	40014800 	.word	0x40014800
 80038d4:	fffffbff 	.word	0xfffffbff
 80038d8:	fffff7ff 	.word	0xfffff7ff

080038dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	4a31      	ldr	r2, [pc, #196]	@ (80039b8 <TIM_OC3_SetConfig+0xdc>)
 80038f2:	401a      	ands	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a2d      	ldr	r2, [pc, #180]	@ (80039bc <TIM_OC3_SetConfig+0xe0>)
 8003908:	4013      	ands	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2203      	movs	r2, #3
 8003910:	4393      	bics	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	4a27      	ldr	r2, [pc, #156]	@ (80039c0 <TIM_OC3_SetConfig+0xe4>)
 8003922:	4013      	ands	r3, r2
 8003924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a23      	ldr	r2, [pc, #140]	@ (80039c4 <TIM_OC3_SetConfig+0xe8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d10d      	bne.n	8003956 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	4a22      	ldr	r2, [pc, #136]	@ (80039c8 <TIM_OC3_SetConfig+0xec>)
 800393e:	4013      	ands	r3, r2
 8003940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	4a1e      	ldr	r2, [pc, #120]	@ (80039cc <TIM_OC3_SetConfig+0xf0>)
 8003952:	4013      	ands	r3, r2
 8003954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a1a      	ldr	r2, [pc, #104]	@ (80039c4 <TIM_OC3_SetConfig+0xe8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d007      	beq.n	800396e <TIM_OC3_SetConfig+0x92>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a1b      	ldr	r2, [pc, #108]	@ (80039d0 <TIM_OC3_SetConfig+0xf4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d003      	beq.n	800396e <TIM_OC3_SetConfig+0x92>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a1a      	ldr	r2, [pc, #104]	@ (80039d4 <TIM_OC3_SetConfig+0xf8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d113      	bne.n	8003996 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4a19      	ldr	r2, [pc, #100]	@ (80039d8 <TIM_OC3_SetConfig+0xfc>)
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4a18      	ldr	r2, [pc, #96]	@ (80039dc <TIM_OC3_SetConfig+0x100>)
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	621a      	str	r2, [r3, #32]
}
 80039b0:	46c0      	nop			@ (mov r8, r8)
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b006      	add	sp, #24
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	fffffeff 	.word	0xfffffeff
 80039bc:	fffeff8f 	.word	0xfffeff8f
 80039c0:	fffffdff 	.word	0xfffffdff
 80039c4:	40012c00 	.word	0x40012c00
 80039c8:	fffff7ff 	.word	0xfffff7ff
 80039cc:	fffffbff 	.word	0xfffffbff
 80039d0:	40014400 	.word	0x40014400
 80039d4:	40014800 	.word	0x40014800
 80039d8:	ffffefff 	.word	0xffffefff
 80039dc:	ffffdfff 	.word	0xffffdfff

080039e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4a24      	ldr	r2, [pc, #144]	@ (8003a88 <TIM_OC4_SetConfig+0xa8>)
 80039f6:	401a      	ands	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a20      	ldr	r2, [pc, #128]	@ (8003a8c <TIM_OC4_SetConfig+0xac>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a1f      	ldr	r2, [pc, #124]	@ (8003a90 <TIM_OC4_SetConfig+0xb0>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4a1b      	ldr	r2, [pc, #108]	@ (8003a94 <TIM_OC4_SetConfig+0xb4>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	031b      	lsls	r3, r3, #12
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a17      	ldr	r2, [pc, #92]	@ (8003a98 <TIM_OC4_SetConfig+0xb8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d007      	beq.n	8003a50 <TIM_OC4_SetConfig+0x70>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a16      	ldr	r2, [pc, #88]	@ (8003a9c <TIM_OC4_SetConfig+0xbc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_OC4_SetConfig+0x70>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a15      	ldr	r2, [pc, #84]	@ (8003aa0 <TIM_OC4_SetConfig+0xc0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d109      	bne.n	8003a64 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	4a14      	ldr	r2, [pc, #80]	@ (8003aa4 <TIM_OC4_SetConfig+0xc4>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	019b      	lsls	r3, r3, #6
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	621a      	str	r2, [r3, #32]
}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b006      	add	sp, #24
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	ffffefff 	.word	0xffffefff
 8003a8c:	feff8fff 	.word	0xfeff8fff
 8003a90:	fffffcff 	.word	0xfffffcff
 8003a94:	ffffdfff 	.word	0xffffdfff
 8003a98:	40012c00 	.word	0x40012c00
 8003a9c:	40014400 	.word	0x40014400
 8003aa0:	40014800 	.word	0x40014800
 8003aa4:	ffffbfff 	.word	0xffffbfff

08003aa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4a21      	ldr	r2, [pc, #132]	@ (8003b44 <TIM_OC5_SetConfig+0x9c>)
 8003abe:	401a      	ands	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8003b48 <TIM_OC5_SetConfig+0xa0>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4a19      	ldr	r2, [pc, #100]	@ (8003b4c <TIM_OC5_SetConfig+0xa4>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a15      	ldr	r2, [pc, #84]	@ (8003b50 <TIM_OC5_SetConfig+0xa8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d007      	beq.n	8003b0e <TIM_OC5_SetConfig+0x66>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a14      	ldr	r2, [pc, #80]	@ (8003b54 <TIM_OC5_SetConfig+0xac>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d003      	beq.n	8003b0e <TIM_OC5_SetConfig+0x66>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a13      	ldr	r2, [pc, #76]	@ (8003b58 <TIM_OC5_SetConfig+0xb0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d109      	bne.n	8003b22 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	4a0c      	ldr	r2, [pc, #48]	@ (8003b44 <TIM_OC5_SetConfig+0x9c>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	621a      	str	r2, [r3, #32]
}
 8003b3c:	46c0      	nop			@ (mov r8, r8)
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b006      	add	sp, #24
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	fffeffff 	.word	0xfffeffff
 8003b48:	fffeff8f 	.word	0xfffeff8f
 8003b4c:	fffdffff 	.word	0xfffdffff
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40014400 	.word	0x40014400
 8003b58:	40014800 	.word	0x40014800

08003b5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	4a22      	ldr	r2, [pc, #136]	@ (8003bfc <TIM_OC6_SetConfig+0xa0>)
 8003b72:	401a      	ands	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a1e      	ldr	r2, [pc, #120]	@ (8003c00 <TIM_OC6_SetConfig+0xa4>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8003c04 <TIM_OC6_SetConfig+0xa8>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	051b      	lsls	r3, r3, #20
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a16      	ldr	r2, [pc, #88]	@ (8003c08 <TIM_OC6_SetConfig+0xac>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d007      	beq.n	8003bc4 <TIM_OC6_SetConfig+0x68>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a15      	ldr	r2, [pc, #84]	@ (8003c0c <TIM_OC6_SetConfig+0xb0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d003      	beq.n	8003bc4 <TIM_OC6_SetConfig+0x68>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a14      	ldr	r2, [pc, #80]	@ (8003c10 <TIM_OC6_SetConfig+0xb4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d109      	bne.n	8003bd8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	4a13      	ldr	r2, [pc, #76]	@ (8003c14 <TIM_OC6_SetConfig+0xb8>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	029b      	lsls	r3, r3, #10
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	46c0      	nop			@ (mov r8, r8)
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b006      	add	sp, #24
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	ffefffff 	.word	0xffefffff
 8003c00:	feff8fff 	.word	0xfeff8fff
 8003c04:	ffdfffff 	.word	0xffdfffff
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40014400 	.word	0x40014400
 8003c10:	40014800 	.word	0x40014800
 8003c14:	fffbffff 	.word	0xfffbffff

08003c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	223c      	movs	r2, #60	@ 0x3c
 8003c26:	5c9b      	ldrb	r3, [r3, r2]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e050      	b.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	223c      	movs	r2, #60	@ 0x3c
 8003c34:	2101      	movs	r1, #1
 8003c36:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	223d      	movs	r2, #61	@ 0x3d
 8003c3c:	2102      	movs	r1, #2
 8003c3e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a21      	ldr	r2, [pc, #132]	@ (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d108      	bne.n	8003c6c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a20      	ldr	r2, [pc, #128]	@ (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2270      	movs	r2, #112	@ 0x70
 8003c70:	4393      	bics	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a14      	ldr	r2, [pc, #80]	@ (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00a      	beq.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	2380      	movs	r3, #128	@ 0x80
 8003c96:	05db      	lsls	r3, r3, #23
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d004      	beq.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a10      	ldr	r2, [pc, #64]	@ (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2280      	movs	r2, #128	@ 0x80
 8003caa:	4393      	bics	r3, r2
 8003cac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	223d      	movs	r2, #61	@ 0x3d
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	223c      	movs	r2, #60	@ 0x3c
 8003ccc:	2100      	movs	r1, #0
 8003cce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b004      	add	sp, #16
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	40012c00 	.word	0x40012c00
 8003ce0:	ff0fffff 	.word	0xff0fffff
 8003ce4:	40000400 	.word	0x40000400

08003ce8 <memset>:
 8003ce8:	0003      	movs	r3, r0
 8003cea:	1882      	adds	r2, r0, r2
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d100      	bne.n	8003cf2 <memset+0xa>
 8003cf0:	4770      	bx	lr
 8003cf2:	7019      	strb	r1, [r3, #0]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	e7f9      	b.n	8003cec <memset+0x4>

08003cf8 <__libc_init_array>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	2600      	movs	r6, #0
 8003cfc:	4c0c      	ldr	r4, [pc, #48]	@ (8003d30 <__libc_init_array+0x38>)
 8003cfe:	4d0d      	ldr	r5, [pc, #52]	@ (8003d34 <__libc_init_array+0x3c>)
 8003d00:	1b64      	subs	r4, r4, r5
 8003d02:	10a4      	asrs	r4, r4, #2
 8003d04:	42a6      	cmp	r6, r4
 8003d06:	d109      	bne.n	8003d1c <__libc_init_array+0x24>
 8003d08:	2600      	movs	r6, #0
 8003d0a:	f000 f819 	bl	8003d40 <_init>
 8003d0e:	4c0a      	ldr	r4, [pc, #40]	@ (8003d38 <__libc_init_array+0x40>)
 8003d10:	4d0a      	ldr	r5, [pc, #40]	@ (8003d3c <__libc_init_array+0x44>)
 8003d12:	1b64      	subs	r4, r4, r5
 8003d14:	10a4      	asrs	r4, r4, #2
 8003d16:	42a6      	cmp	r6, r4
 8003d18:	d105      	bne.n	8003d26 <__libc_init_array+0x2e>
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
 8003d1c:	00b3      	lsls	r3, r6, #2
 8003d1e:	58eb      	ldr	r3, [r5, r3]
 8003d20:	4798      	blx	r3
 8003d22:	3601      	adds	r6, #1
 8003d24:	e7ee      	b.n	8003d04 <__libc_init_array+0xc>
 8003d26:	00b3      	lsls	r3, r6, #2
 8003d28:	58eb      	ldr	r3, [r5, r3]
 8003d2a:	4798      	blx	r3
 8003d2c:	3601      	adds	r6, #1
 8003d2e:	e7f2      	b.n	8003d16 <__libc_init_array+0x1e>
 8003d30:	08003e0c 	.word	0x08003e0c
 8003d34:	08003e0c 	.word	0x08003e0c
 8003d38:	08003e10 	.word	0x08003e10
 8003d3c:	08003e0c 	.word	0x08003e0c

08003d40 <_init>:
 8003d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d46:	bc08      	pop	{r3}
 8003d48:	469e      	mov	lr, r3
 8003d4a:	4770      	bx	lr

08003d4c <_fini>:
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d52:	bc08      	pop	{r3}
 8003d54:	469e      	mov	lr, r3
 8003d56:	4770      	bx	lr
