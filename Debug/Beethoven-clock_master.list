
Beethoven-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e8c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006f48  08006f48  00007f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007030  08007030  0000906c  2**0
                  CONTENTS
  4 .ARM          00000000  08007030  08007030  0000906c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007030  08007030  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007030  08007030  00008030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007034  08007034  00008034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007038  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  2000006c  080070a4  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  080070a4  00009338  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ced  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c0  00000000  00000000  0001ed81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  00021e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001095  00000000  00000000  00023388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dac  00000000  00000000  0002441d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019eb1  00000000  00000000  0003d1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c059  00000000  00000000  0005707a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f30d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d68  00000000  00000000  000f3118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f7e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006f30 	.word	0x08006f30

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	08006f30 	.word	0x08006f30

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-low hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2200      	movs	r2, #0
 800025a:	0019      	movs	r1, r3
 800025c:	f002 fd09 	bl	8002c72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2201      	movs	r2, #1
 800026c:	0019      	movs	r1, r3
 800026e:	f002 fd00 	bl	8002c72 <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f005 fe5a 	bl	8005f30 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f005 fe09 	bl	8005e98 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f002 fd1d 	bl	8002e98 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f002 fe31 	bl	80030ec <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	08006f48 	.word	0x08006f48

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f002 fcdf 	bl	8002e98 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f002 fcb9 	bl	8002e98 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f002 fdcd 	bl	80030ec <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	08006f4c 	.word	0x08006f4c

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f002 fc75 	bl	8002e98 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f002 fd89 	bl	80030ec <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	08006f50 	.word	0x08006f50

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f002 fc25 	bl	8002e98 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f002 fd39 	bl	80030ec <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	08006f54 	.word	0x08006f54
 8000700:	08006f5c 	.word	0x08006f5c

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f002 fba3 	bl	8002e98 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f002 fcb7 	bl	80030ec <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f002 fb44 	bl	8002e98 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f002 fb23 	bl	8002e98 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f002 fc37 	bl	80030ec <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	08006f54 	.word	0x08006f54
 8000894:	08006f5c 	.word	0x08006f5c

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f002 fac9 	bl	8002e98 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f002 faa7 	bl	8002e98 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f002 fbc4 	bl	80030ec <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	08006f64 	.word	0x08006f64
 8000978:	08006f54 	.word	0x08006f54

0800097c <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b09a      	sub	sp, #104	@ 0x68
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000988:	2567      	movs	r5, #103	@ 0x67
 800098a:	197b      	adds	r3, r7, r5
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 8000990:	243c      	movs	r4, #60	@ 0x3c
 8000992:	193b      	adds	r3, r7, r4
 8000994:	0018      	movs	r0, r3
 8000996:	2328      	movs	r3, #40	@ 0x28
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f006 fa92 	bl	8006ec4 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	0021      	movs	r1, r4
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	789a      	ldrb	r2, [r3, #2]
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	78da      	ldrb	r2, [r3, #3]
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	78da      	ldrb	r2, [r3, #3]
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009d6:	0008      	movs	r0, r1
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009de:	183b      	adds	r3, r7, r0
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80009e4:	183b      	adds	r3, r7, r0
 80009e6:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <initRTCInternalAlarm+0xd0>)
 80009e8:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009ea:	183b      	adds	r3, r7, r0
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009f0:	183b      	adds	r3, r7, r0
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 80009f6:	183b      	adds	r3, r7, r0
 80009f8:	2220      	movs	r2, #32
 80009fa:	2101      	movs	r1, #1
 80009fc:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 80009fe:	0001      	movs	r1, r0
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8000a08:	197c      	adds	r4, r7, r5
 8000a0a:	1879      	adds	r1, r7, r1
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f004 fd11 	bl	8005438 <HAL_RTC_SetAlarm_IT>
 8000a16:	0003      	movs	r3, r0
 8000a18:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000a1a:	197b      	adds	r3, r7, r5
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <initRTCInternalAlarm+0xac>
		return halRet;
 8000a22:	197b      	adds	r3, r7, r5
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	e00d      	b.n	8000a44 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8000a28:	2567      	movs	r5, #103	@ 0x67
 8000a2a:	197c      	adds	r4, r7, r5
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	005a      	lsls	r2, r3, #1
 8000a30:	2314      	movs	r3, #20
 8000a32:	18f9      	adds	r1, r7, r3
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	2300      	movs	r3, #0
 8000a38:	f004 fe3e 	bl	80056b8 <HAL_RTC_GetAlarm>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	7023      	strb	r3, [r4, #0]
	return halRet;
 8000a40:	197b      	adds	r3, r7, r5
 8000a42:	781b      	ldrb	r3, [r3, #0]

}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b01a      	add	sp, #104	@ 0x68
 8000a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4c:	80800080 	.word	0x80800080

08000a50 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2200      	movs	r2, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f004 fbac 	bl	80051c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f004 fc94 	bl	800539c <HAL_RTC_GetDate>

}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b004      	add	sp, #16
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	b08d      	sub	sp, #52	@ 0x34
 8000a80:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f001 fe11 	bl	80026a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f95d 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 fbb3 	bl	80011f4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a8e:	f000 fa2f 	bl	8000ef0 <MX_RTC_Init>
  MX_I2C1_Init();
 8000a92:	f000 f9c3 	bl	8000e1c <MX_I2C1_Init>
  MX_I2S1_Init();
 8000a96:	f000 fa01 	bl	8000e9c <MX_I2S1_Init>
  MX_SPI2_Init();
 8000a9a:	f000 fabd 	bl	8001018 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000a9e:	f000 faf9 	bl	8001094 <MX_TIM2_Init>
  MX_TIM14_Init();
 8000aa2:	f000 fb57 	bl	8001154 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000aa6:	f000 fb7b 	bl	80011a0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // HAL Status handle for error-checking
  HAL_StatusTypeDef halRet = HAL_OK;
 8000aaa:	2517      	movs	r5, #23
 8000aac:	197b      	adds	r3, r7, r5
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]

  // Set Smooth Calibration Value
	  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8000ab2:	4b90      	ldr	r3, [pc, #576]	@ (8000cf4 <main+0x278>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	197c      	adds	r4, r7, r5
 8000ab8:	2280      	movs	r2, #128	@ 0x80
 8000aba:	01d1      	lsls	r1, r2, #7
 8000abc:	488e      	ldr	r0, [pc, #568]	@ (8000cf8 <main+0x27c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f004 ffef 	bl	8005aa2 <HAL_RTCEx_SetSmoothCalib>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	7023      	strb	r3, [r4, #0]
									RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
	  if(halRet != HAL_OK) {
 8000ac8:	197b      	adds	r3, r7, r5
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <main+0x58>
		  // Failure to talk to RTC is a hard failure
		  dispFailure();
 8000ad0:	f001 f88e 	bl	8001bf0 <dispFailure>
	  }

  // Init the internal RTC alarm time to track the current time
	  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8000ad4:	2517      	movs	r5, #23
 8000ad6:	197c      	adds	r4, r7, r5
 8000ad8:	4a88      	ldr	r2, [pc, #544]	@ (8000cfc <main+0x280>)
 8000ada:	4989      	ldr	r1, [pc, #548]	@ (8000d00 <main+0x284>)
 8000adc:	4b86      	ldr	r3, [pc, #536]	@ (8000cf8 <main+0x27c>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff ff4c 	bl	800097c <initRTCInternalAlarm>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	7023      	strb	r3, [r4, #0]
	  if(halRet != HAL_OK) {
 8000ae8:	197b      	adds	r3, r7, r5
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <main+0x78>
		  // Failure to initialize RTC alarm is a hard failure
		  dispFailure();
 8000af0:	f001 f87e 	bl	8001bf0 <dispFailure>
		}

  // Initialize all GPIOs to be used with 7 segment display
		sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000af4:	2380      	movs	r3, #128	@ 0x80
 8000af6:	009c      	lsls	r4, r3, #2
 8000af8:	2380      	movs	r3, #128	@ 0x80
 8000afa:	00dd      	lsls	r5, r3, #3
 8000afc:	2680      	movs	r6, #128	@ 0x80
 8000afe:	2340      	movs	r3, #64	@ 0x40
 8000b00:	469c      	mov	ip, r3
 8000b02:	2380      	movs	r3, #128	@ 0x80
 8000b04:	011a      	lsls	r2, r3, #4
 8000b06:	4b7f      	ldr	r3, [pc, #508]	@ (8000d04 <main+0x288>)
 8000b08:	6819      	ldr	r1, [r3, #0]
 8000b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8000d08 <main+0x28c>)
 8000b0c:	6818      	ldr	r0, [r3, #0]
 8000b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8000d0c <main+0x290>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	9304      	str	r3, [sp, #16]
 8000b14:	9003      	str	r0, [sp, #12]
 8000b16:	9102      	str	r1, [sp, #8]
 8000b18:	4b7d      	ldr	r3, [pc, #500]	@ (8000d10 <main+0x294>)
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	9200      	str	r2, [sp, #0]
 8000b1e:	4663      	mov	r3, ip
 8000b20:	0032      	movs	r2, r6
 8000b22:	0029      	movs	r1, r5
 8000b24:	0020      	movs	r0, r4
 8000b26:	f001 f8d5 	bl	8001cd4 <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


		halRet = updateAndDisplayTime();
 8000b2a:	2517      	movs	r5, #23
 8000b2c:	197c      	adds	r4, r7, r5
 8000b2e:	f000 fc73 	bl	8001418 <updateAndDisplayTime>
 8000b32:	0003      	movs	r3, r0
 8000b34:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000b36:	197b      	adds	r3, r7, r5
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <main+0xc6>
		  // Failure to display current time is a hard failure
		  dispFailure();
 8000b3e:	f001 f857 	bl	8001bf0 <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

		// Used to separate return initializations into critical and non-critical errors.
		uint8_t initRet = 0;
 8000b42:	2116      	movs	r1, #22
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]

		initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000b4a:	4b6e      	ldr	r3, [pc, #440]	@ (8000d04 <main+0x288>)
 8000b4c:	681d      	ldr	r5, [r3, #0]
 8000b4e:	2380      	movs	r3, #128	@ 0x80
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4a70      	ldr	r2, [pc, #448]	@ (8000d14 <main+0x298>)
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	187c      	adds	r4, r7, r1
 8000b58:	4e6f      	ldr	r6, [pc, #444]	@ (8000d18 <main+0x29c>)
 8000b5a:	4970      	ldr	r1, [pc, #448]	@ (8000d1c <main+0x2a0>)
 8000b5c:	4870      	ldr	r0, [pc, #448]	@ (8000d20 <main+0x2a4>)
 8000b5e:	9201      	str	r2, [sp, #4]
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	0033      	movs	r3, r6
 8000b64:	002a      	movs	r2, r5
 8000b66:	f7ff fb59 	bl	800021c <capTouch_Init>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	7023      	strb	r3, [r4, #0]
								&capTouchResetPort, capTouchResetPin, capTouchChannels);
		if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8000b6e:	2116      	movs	r1, #22
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d007      	beq.n	8000b88 <main+0x10c>
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d003      	beq.n	8000b88 <main+0x10c>
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d102      	bne.n	8000b8e <main+0x112>
			/* Critical Errors:
			 * 1 = Failure to read correct device ID
			 * 2 = Failure to read Keys
			 * 3 = Failure to enable keys
			 */
			dispFailure();
 8000b88:	f001 f832 	bl	8001bf0 <dispFailure>
 8000b8c:	e00d      	b.n	8000baa <main+0x12e>
		}
		else if (initRet == 2) {
 8000b8e:	2316      	movs	r3, #22
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d102      	bne.n	8000b9e <main+0x122>
			/*
			 * Non-critical Errors:
			 * 2 = Failure to Recalibrate
			 */
			dispFault();
 8000b98:	f001 f81a 	bl	8001bd0 <dispFault>
 8000b9c:	e005      	b.n	8000baa <main+0x12e>
		}
		else if(initRet == 0) {
 8000b9e:	2316      	movs	r3, #22
 8000ba0:	18fb      	adds	r3, r7, r3
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d100      	bne.n	8000baa <main+0x12e>
			// initRet = 0 = all is well
			__NOP();
 8000ba8:	46c0      	nop			@ (mov r8, r8)
		}

		// Set averaging factor
		uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000baa:	4b5e      	ldr	r3, [pc, #376]	@ (8000d24 <main+0x2a8>)
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	210c      	movs	r1, #12
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	701a      	strb	r2, [r3, #0]
 8000bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8000d24 <main+0x2a8>)
 8000bb6:	781a      	ldrb	r2, [r3, #0]
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	705a      	strb	r2, [r3, #1]
 8000bbc:	4b59      	ldr	r3, [pc, #356]	@ (8000d24 <main+0x2a8>)
 8000bbe:	781a      	ldrb	r2, [r3, #0]
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	709a      	strb	r2, [r3, #2]
 8000bc4:	4b57      	ldr	r3, [pc, #348]	@ (8000d24 <main+0x2a8>)
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	70da      	strb	r2, [r3, #3]
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	711a      	strb	r2, [r3, #4]
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	715a      	strb	r2, [r3, #5]
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2200      	movs	r2, #0
 8000bdc:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000bde:	2517      	movs	r5, #23
 8000be0:	197c      	adds	r4, r7, r5
 8000be2:	187a      	adds	r2, r7, r1
 8000be4:	4b4e      	ldr	r3, [pc, #312]	@ (8000d20 <main+0x2a4>)
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fd8b 	bl	8000704 <capTouch_SetAveragingFactor>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8000bf2:	197b      	adds	r3, r7, r5
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <main+0x182>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 8000bfa:	f000 ffe9 	bl	8001bd0 <dispFault>
		}

		// Set detection integration factors
		uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8000d28 <main+0x2ac>)
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	4b48      	ldr	r3, [pc, #288]	@ (8000d28 <main+0x2ac>)
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	705a      	strb	r2, [r3, #1]
 8000c0e:	4b46      	ldr	r3, [pc, #280]	@ (8000d28 <main+0x2ac>)
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	709a      	strb	r2, [r3, #2]
 8000c16:	4b44      	ldr	r3, [pc, #272]	@ (8000d28 <main+0x2ac>)
 8000c18:	781a      	ldrb	r2, [r3, #0]
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	70da      	strb	r2, [r3, #3]
 8000c1e:	4b42      	ldr	r3, [pc, #264]	@ (8000d28 <main+0x2ac>)
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	711a      	strb	r2, [r3, #4]
 8000c26:	4b40      	ldr	r3, [pc, #256]	@ (8000d28 <main+0x2ac>)
 8000c28:	781a      	ldrb	r2, [r3, #0]
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	715a      	strb	r2, [r3, #5]
 8000c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d28 <main+0x2ac>)
 8000c30:	781a      	ldrb	r2, [r3, #0]
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000c36:	2517      	movs	r5, #23
 8000c38:	197c      	adds	r4, r7, r5
 8000c3a:	1d3a      	adds	r2, r7, #4
 8000c3c:	4b38      	ldr	r3, [pc, #224]	@ (8000d20 <main+0x2a4>)
 8000c3e:	0011      	movs	r1, r2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff fe29 	bl	8000898 <capTouch_SetDetectionIntegrator>
 8000c46:	0003      	movs	r3, r0
 8000c48:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000c4a:	197b      	adds	r3, r7, r5
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <main+0x1da>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 8000c52:	f000 ffbd 	bl	8001bd0 <dispFault>
		}

    userAlarmToggle = false;			//Default to off
 8000c56:	4b35      	ldr	r3, [pc, #212]	@ (8000d2c <main+0x2b0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

		if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8000c5c:	4b34      	ldr	r3, [pc, #208]	@ (8000d30 <main+0x2b4>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <main+0x27c>)
 8000c62:	0011      	movs	r1, r2
 8000c64:	0018      	movs	r0, r3
 8000c66:	f004 ffec 	bl	8005c42 <HAL_RTCEx_BKUPRead>
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d11c      	bne.n	8000cac <main+0x230>

			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8000c72:	4b30      	ldr	r3, [pc, #192]	@ (8000d34 <main+0x2b8>)
 8000c74:	6819      	ldr	r1, [r3, #0]
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <main+0x27c>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f004 ffc4 	bl	8005c08 <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8000c80:	4b2d      	ldr	r3, [pc, #180]	@ (8000d38 <main+0x2bc>)
 8000c82:	6819      	ldr	r1, [r3, #0]
 8000c84:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <main+0x27c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f004 ffbd 	bl	8005c08 <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d3c <main+0x2c0>)
 8000c90:	6819      	ldr	r1, [r3, #0]
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <main+0x27c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f004 ffb6 	bl	8005c08 <HAL_RTCEx_BKUPWrite>

			// Write backup register with a non-zero value to signify that it has been initialized before
			HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8000c9c:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <main+0x2b4>)
 8000c9e:	6819      	ldr	r1, [r3, #0]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	425a      	negs	r2, r3
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <main+0x27c>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f004 ffae 	bl	8005c08 <HAL_RTCEx_BKUPWrite>

		}

		userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8000cac:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <main+0x2b8>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <main+0x27c>)
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f004 ffc4 	bl	8005c42 <HAL_RTCEx_BKUPRead>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b20      	ldr	r3, [pc, #128]	@ (8000d40 <main+0x2c4>)
 8000cc0:	701a      	strb	r2, [r3, #0]
		userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <main+0x2bc>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <main+0x27c>)
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f004 ffb9 	bl	8005c42 <HAL_RTCEx_BKUPRead>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <main+0x2c4>)
 8000cd6:	705a      	strb	r2, [r3, #1]
		userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <main+0x2c0>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <main+0x27c>)
 8000cde:	0011      	movs	r1, r2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f004 ffae 	bl	8005c42 <HAL_RTCEx_BKUPRead>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <main+0x2c4>)
 8000cec:	70da      	strb	r2, [r3, #3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

		__NOP();
 8000cee:	46c0      	nop			@ (mov r8, r8)

  while (1)
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	e7fd      	b.n	8000cf0 <main+0x274>
 8000cf4:	20000028 	.word	0x20000028
 8000cf8:	2000014c 	.word	0x2000014c
 8000cfc:	200000a0 	.word	0x200000a0
 8000d00:	2000008c 	.word	0x2000008c
 8000d04:	20000040 	.word	0x20000040
 8000d08:	2000003c 	.word	0x2000003c
 8000d0c:	2000002c 	.word	0x2000002c
 8000d10:	20000010 	.word	0x20000010
 8000d14:	2000000c 	.word	0x2000000c
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	200000bc 	.word	0x200000bc
 8000d20:	200002c4 	.word	0x200002c4
 8000d24:	2000000d 	.word	0x2000000d
 8000d28:	2000000e 	.word	0x2000000e
 8000d2c:	20000089 	.word	0x20000089
 8000d30:	20000038 	.word	0x20000038
 8000d34:	200000b8 	.word	0x200000b8
 8000d38:	20000030 	.word	0x20000030
 8000d3c:	20000034 	.word	0x20000034
 8000d40:	200000a4 	.word	0x200000a4

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b093      	sub	sp, #76	@ 0x4c
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	2410      	movs	r4, #16
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	0018      	movs	r0, r3
 8000d50:	2338      	movs	r3, #56	@ 0x38
 8000d52:	001a      	movs	r2, r3
 8000d54:	2100      	movs	r1, #0
 8000d56:	f006 f8b5 	bl	8006ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5a:	003b      	movs	r3, r7
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	2310      	movs	r3, #16
 8000d60:	001a      	movs	r2, r3
 8000d62:	2100      	movs	r1, #0
 8000d64:	f006 f8ae 	bl	8006ec4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d68:	2380      	movs	r3, #128	@ 0x80
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f002 ff45 	bl	8003bfc <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d72:	f002 ff25 	bl	8003bc0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d76:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <SystemClock_Config+0xd4>)
 8000d78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000d7a:	4b27      	ldr	r3, [pc, #156]	@ (8000e18 <SystemClock_Config+0xd4>)
 8000d7c:	2118      	movs	r1, #24
 8000d7e:	438a      	bics	r2, r1
 8000d80:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	220d      	movs	r2, #13
 8000d86:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	2280      	movs	r2, #128	@ 0x80
 8000d8c:	0252      	lsls	r2, r2, #9
 8000d8e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d90:	0021      	movs	r1, r4
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2201      	movs	r2, #1
 8000d96:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2202      	movs	r2, #2
 8000da2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2203      	movs	r2, #3
 8000da8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2208      	movs	r2, #8
 8000db4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	22c0      	movs	r2, #192	@ 0xc0
 8000dba:	02d2      	lsls	r2, r2, #11
 8000dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2280      	movs	r2, #128	@ 0x80
 8000dc2:	0492      	lsls	r2, r2, #18
 8000dc4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2280      	movs	r2, #128	@ 0x80
 8000dca:	0592      	lsls	r2, r2, #22
 8000dcc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f002 ff5f 	bl	8003c94 <HAL_RCC_OscConfig>
 8000dd6:	1e03      	subs	r3, r0, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dda:	f000 ff75 	bl	8001cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dde:	003b      	movs	r3, r7
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	003b      	movs	r3, r7
 8000de6:	2202      	movs	r2, #2
 8000de8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dea:	003b      	movs	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df0:	003b      	movs	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000df6:	003b      	movs	r3, r7
 8000df8:	2102      	movs	r1, #2
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f003 fa64 	bl	80042c8 <HAL_RCC_ClockConfig>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e04:	f000 ff60 	bl	8001cc8 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f004 f817 	bl	8004e3c <HAL_RCCEx_EnableLSCO>
}
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b013      	add	sp, #76	@ 0x4c
 8000e14:	bd90      	pop	{r4, r7, pc}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	40021000 	.word	0x40021000

08000e1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e22:	4a1c      	ldr	r2, [pc, #112]	@ (8000e94 <MX_I2C1_Init+0x78>)
 8000e24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e28:	4a1b      	ldr	r2, [pc, #108]	@ (8000e98 <MX_I2C1_Init+0x7c>)
 8000e2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e32:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e38:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e3e:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f001 ff77 	bl	8002d4c <HAL_I2C_Init>
 8000e5e:	1e03      	subs	r3, r0, #0
 8000e60:	d001      	beq.n	8000e66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e62:	f000 ff31 	bl	8001cc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e66:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e68:	2100      	movs	r1, #0
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f002 fd1a 	bl	80038a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000e70:	1e03      	subs	r3, r0, #0
 8000e72:	d001      	beq.n	8000e78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e74:	f000 ff28 	bl	8001cc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e78:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f002 fd5d 	bl	800393c <HAL_I2CEx_ConfigDigitalFilter>
 8000e82:	1e03      	subs	r3, r0, #0
 8000e84:	d001      	beq.n	8000e8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e86:	f000 ff1f 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200000bc 	.word	0x200000bc
 8000e94:	40005400 	.word	0x40005400
 8000e98:	00602173 	.word	0x00602173

08000e9c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <MX_I2S1_Init+0x48>)
 8000ea2:	4a11      	ldr	r2, [pc, #68]	@ (8000ee8 <MX_I2S1_Init+0x4c>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <MX_I2S1_Init+0x48>)
 8000ea8:	2280      	movs	r2, #128	@ 0x80
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000eae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <MX_I2S1_Init+0x48>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <MX_I2S1_Init+0x48>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <MX_I2S1_Init+0x48>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <MX_I2S1_Init+0x48>)
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <MX_I2S1_Init+0x50>)
 8000ec4:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <MX_I2S1_Init+0x48>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000ecc:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <MX_I2S1_Init+0x48>)
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f002 fd80 	bl	80039d4 <HAL_I2S_Init>
 8000ed4:	1e03      	subs	r3, r0, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2S1_Init+0x40>
  {
    Error_Handler();
 8000ed8:	f000 fef6 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000edc:	46c0      	nop			@ (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	20000110 	.word	0x20000110
 8000ee8:	40013000 	.word	0x40013000
 8000eec:	0000ac44 	.word	0x0000ac44

08000ef0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	@ 0x30
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_DateTypeDef sDate = {0};
 8000ef6:	232c      	movs	r3, #44	@ 0x2c
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	0018      	movs	r0, r3
 8000f02:	2328      	movs	r3, #40	@ 0x28
 8000f04:	001a      	movs	r2, r3
 8000f06:	2100      	movs	r1, #0
 8000f08:	f005 ffdc 	bl	8006ec4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800100c <MX_RTC_Init+0x11c>)
 8000f10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000f12:	4b3d      	ldr	r3, [pc, #244]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f14:	2240      	movs	r2, #64	@ 0x40
 8000f16:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000f18:	4b3b      	ldr	r3, [pc, #236]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f1a:	227f      	movs	r2, #127	@ 0x7f
 8000f1c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000f1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f20:	22ff      	movs	r2, #255	@ 0xff
 8000f22:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f24:	4b38      	ldr	r3, [pc, #224]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f2a:	4b37      	ldr	r3, [pc, #220]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f30:	4b35      	ldr	r3, [pc, #212]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f36:	4b34      	ldr	r3, [pc, #208]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f38:	2280      	movs	r2, #128	@ 0x80
 8000f3a:	05d2      	lsls	r2, r2, #23
 8000f3c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000f3e:	4b32      	ldr	r3, [pc, #200]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f44:	4b30      	ldr	r3, [pc, #192]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f003 fff0 	bl	8004f2c <HAL_RTC_Init>
 8000f4c:	1e03      	subs	r3, r0, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8000f50:	f000 feba 	bl	8001cc8 <Error_Handler>
//  {
//    Error_Handler();
//  }


  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f54:	212c      	movs	r1, #44	@ 0x2c
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2201      	movs	r2, #1
 8000f60:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2201      	movs	r2, #1
 8000f66:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f6e:	1879      	adds	r1, r7, r1
 8000f70:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	0018      	movs	r0, r3
 8000f76:	f004 f97f 	bl	8005278 <HAL_RTC_SetDate>
 8000f7a:	1e03      	subs	r3, r0, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000f7e:	f000 fea3 	bl	8001cc8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4a18      	ldr	r2, [pc, #96]	@ (8001010 <MX_RTC_Init+0x120>)
 8000fb0:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2220      	movs	r2, #32
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2280      	movs	r2, #128	@ 0x80
 8000fca:	0052      	lsls	r2, r2, #1
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000fce:	1d39      	adds	r1, r7, #4
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <MX_RTC_Init+0x118>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f004 fa2f 	bl	8005438 <HAL_RTC_SetAlarm_IT>
 8000fda:	1e03      	subs	r3, r0, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_RTC_Init+0xf2>
  {
    Error_Handler();
 8000fde:	f000 fe73 	bl	8001cc8 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000fe2:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <MX_RTC_Init+0x118>)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f004 fdbe 	bl	8005b68 <HAL_RTCEx_SetCalibrationOutPut>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_RTC_Init+0x104>
  {
    Error_Handler();
 8000ff0:	f000 fe6a 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8000ff4:	4907      	ldr	r1, [pc, #28]	@ (8001014 <MX_RTC_Init+0x124>)
 8000ff6:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <MX_RTC_Init+0x118>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f004 f8e0 	bl	80051c0 <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8001000:	46c0      	nop			@ (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b00c      	add	sp, #48	@ 0x30
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000014c 	.word	0x2000014c
 800100c:	40002800 	.word	0x40002800
 8001010:	80800080 	.word	0x80800080
 8001014:	2000008c 	.word	0x2000008c

08001018 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_SPI2_Init+0x74>)
 800101e:	4a1c      	ldr	r2, [pc, #112]	@ (8001090 <MX_SPI2_Init+0x78>)
 8001020:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001022:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <MX_SPI2_Init+0x74>)
 8001024:	2282      	movs	r2, #130	@ 0x82
 8001026:	0052      	lsls	r2, r2, #1
 8001028:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <MX_SPI2_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_SPI2_Init+0x74>)
 8001032:	22e0      	movs	r2, #224	@ 0xe0
 8001034:	00d2      	lsls	r2, r2, #3
 8001036:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001038:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_SPI2_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_SPI2_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_SPI2_Init+0x74>)
 8001046:	2280      	movs	r2, #128	@ 0x80
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_SPI2_Init+0x74>)
 800104e:	2210      	movs	r2, #16
 8001050:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_SPI2_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_SPI2_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <MX_SPI2_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001064:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_SPI2_Init+0x74>)
 8001066:	2207      	movs	r2, #7
 8001068:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <MX_SPI2_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_SPI2_Init+0x74>)
 8001072:	2208      	movs	r2, #8
 8001074:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001076:	4b05      	ldr	r3, [pc, #20]	@ (800108c <MX_SPI2_Init+0x74>)
 8001078:	0018      	movs	r0, r3
 800107a:	f004 fdfd 	bl	8005c78 <HAL_SPI_Init>
 800107e:	1e03      	subs	r3, r0, #0
 8001080:	d001      	beq.n	8001086 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001082:	f000 fe21 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001086:	46c0      	nop			@ (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000178 	.word	0x20000178
 8001090:	40003800 	.word	0x40003800

08001094 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109a:	231c      	movs	r3, #28
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	0018      	movs	r0, r3
 80010a0:	230c      	movs	r3, #12
 80010a2:	001a      	movs	r2, r3
 80010a4:	2100      	movs	r1, #0
 80010a6:	f005 ff0d 	bl	8006ec4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010aa:	003b      	movs	r3, r7
 80010ac:	0018      	movs	r0, r3
 80010ae:	231c      	movs	r3, #28
 80010b0:	001a      	movs	r2, r3
 80010b2:	2100      	movs	r1, #0
 80010b4:	f005 ff06 	bl	8006ec4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b8:	4b24      	ldr	r3, [pc, #144]	@ (800114c <MX_TIM2_Init+0xb8>)
 80010ba:	2280      	movs	r2, #128	@ 0x80
 80010bc:	05d2      	lsls	r2, r2, #23
 80010be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 80010c0:	4b22      	ldr	r3, [pc, #136]	@ (800114c <MX_TIM2_Init+0xb8>)
 80010c2:	4a23      	ldr	r2, [pc, #140]	@ (8001150 <MX_TIM2_Init+0xbc>)
 80010c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b21      	ldr	r3, [pc, #132]	@ (800114c <MX_TIM2_Init+0xb8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80010cc:	4b1f      	ldr	r3, [pc, #124]	@ (800114c <MX_TIM2_Init+0xb8>)
 80010ce:	2263      	movs	r2, #99	@ 0x63
 80010d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d2:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <MX_TIM2_Init+0xb8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d8:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <MX_TIM2_Init+0xb8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010de:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <MX_TIM2_Init+0xb8>)
 80010e0:	0018      	movs	r0, r3
 80010e2:	f004 ffcd 	bl	8006080 <HAL_TIM_PWM_Init>
 80010e6:	1e03      	subs	r3, r0, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80010ea:	f000 fded 	bl	8001cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ee:	211c      	movs	r1, #28
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010fc:	187a      	adds	r2, r7, r1
 80010fe:	4b13      	ldr	r3, [pc, #76]	@ (800114c <MX_TIM2_Init+0xb8>)
 8001100:	0011      	movs	r1, r2
 8001102:	0018      	movs	r0, r3
 8001104:	f005 fe5e 	bl	8006dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001108:	1e03      	subs	r3, r0, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800110c:	f000 fddc 	bl	8001cc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001110:	003b      	movs	r3, r7
 8001112:	2260      	movs	r2, #96	@ 0x60
 8001114:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001116:	003b      	movs	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111c:	003b      	movs	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001122:	003b      	movs	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001128:	0039      	movs	r1, r7
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <MX_TIM2_Init+0xb8>)
 800112c:	2208      	movs	r2, #8
 800112e:	0018      	movs	r0, r3
 8001130:	f005 f9e4 	bl	80064fc <HAL_TIM_PWM_ConfigChannel>
 8001134:	1e03      	subs	r3, r0, #0
 8001136:	d001      	beq.n	800113c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001138:	f000 fdc6 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <MX_TIM2_Init+0xb8>)
 800113e:	0018      	movs	r0, r3
 8001140:	f001 f9e6 	bl	8002510 <HAL_TIM_MspPostInit>

}
 8001144:	46c0      	nop			@ (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b00a      	add	sp, #40	@ 0x28
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200001dc 	.word	0x200001dc
 8001150:	0000031f 	.word	0x0000031f

08001154 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <MX_TIM14_Init+0x40>)
 800115a:	4a0f      	ldr	r2, [pc, #60]	@ (8001198 <MX_TIM14_Init+0x44>)
 800115c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 800115e:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <MX_TIM14_Init+0x40>)
 8001160:	22f4      	movs	r2, #244	@ 0xf4
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <MX_TIM14_Init+0x40>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800116c:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <MX_TIM14_Init+0x40>)
 800116e:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <MX_TIM14_Init+0x48>)
 8001170:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001172:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <MX_TIM14_Init+0x40>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <MX_TIM14_Init+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800117e:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <MX_TIM14_Init+0x40>)
 8001180:	0018      	movs	r0, r3
 8001182:	f004 fe31 	bl	8005de8 <HAL_TIM_Base_Init>
 8001186:	1e03      	subs	r3, r0, #0
 8001188:	d001      	beq.n	800118e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800118a:	f000 fd9d 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000228 	.word	0x20000228
 8001198:	40002000 	.word	0x40002000
 800119c:	0000ffff 	.word	0x0000ffff

080011a0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_TIM16_Init+0x44>)
 80011a6:	4a10      	ldr	r2, [pc, #64]	@ (80011e8 <MX_TIM16_Init+0x48>)
 80011a8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 58595;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_TIM16_Init+0x44>)
 80011ac:	4a0f      	ldr	r2, [pc, #60]	@ (80011ec <MX_TIM16_Init+0x4c>)
 80011ae:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <MX_TIM16_Init+0x44>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <MX_TIM16_Init+0x44>)
 80011b8:	4a0d      	ldr	r2, [pc, #52]	@ (80011f0 <MX_TIM16_Init+0x50>)
 80011ba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_TIM16_Init+0x44>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <MX_TIM16_Init+0x44>)
 80011c4:	220a      	movs	r2, #10
 80011c6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <MX_TIM16_Init+0x44>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011ce:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <MX_TIM16_Init+0x44>)
 80011d0:	0018      	movs	r0, r3
 80011d2:	f004 fe09 	bl	8005de8 <HAL_TIM_Base_Init>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80011da:	f000 fd75 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000274 	.word	0x20000274
 80011e8:	40014400 	.word	0x40014400
 80011ec:	0000e4e3 	.word	0x0000e4e3
 80011f0:	0000ffff 	.word	0x0000ffff

080011f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b08b      	sub	sp, #44	@ 0x2c
 80011f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fa:	2414      	movs	r4, #20
 80011fc:	193b      	adds	r3, r7, r4
 80011fe:	0018      	movs	r0, r3
 8001200:	2314      	movs	r3, #20
 8001202:	001a      	movs	r2, r3
 8001204:	2100      	movs	r1, #0
 8001206:	f005 fe5d 	bl	8006ec4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	4b7d      	ldr	r3, [pc, #500]	@ (8001400 <MX_GPIO_Init+0x20c>)
 800120c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800120e:	4b7c      	ldr	r3, [pc, #496]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001210:	2104      	movs	r1, #4
 8001212:	430a      	orrs	r2, r1
 8001214:	635a      	str	r2, [r3, #52]	@ 0x34
 8001216:	4b7a      	ldr	r3, [pc, #488]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800121a:	2204      	movs	r2, #4
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001222:	4b77      	ldr	r3, [pc, #476]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001224:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001226:	4b76      	ldr	r3, [pc, #472]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001228:	2120      	movs	r1, #32
 800122a:	430a      	orrs	r2, r1
 800122c:	635a      	str	r2, [r3, #52]	@ 0x34
 800122e:	4b74      	ldr	r3, [pc, #464]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001232:	2220      	movs	r2, #32
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b71      	ldr	r3, [pc, #452]	@ (8001400 <MX_GPIO_Init+0x20c>)
 800123c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800123e:	4b70      	ldr	r3, [pc, #448]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001240:	2101      	movs	r1, #1
 8001242:	430a      	orrs	r2, r1
 8001244:	635a      	str	r2, [r3, #52]	@ 0x34
 8001246:	4b6e      	ldr	r3, [pc, #440]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800124a:	2201      	movs	r2, #1
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	4b6b      	ldr	r3, [pc, #428]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001254:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001256:	4b6a      	ldr	r3, [pc, #424]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001258:	2102      	movs	r1, #2
 800125a:	430a      	orrs	r2, r1
 800125c:	635a      	str	r2, [r3, #52]	@ 0x34
 800125e:	4b68      	ldr	r3, [pc, #416]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001262:	2202      	movs	r2, #2
 8001264:	4013      	ands	r3, r2
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800126a:	4b65      	ldr	r3, [pc, #404]	@ (8001400 <MX_GPIO_Init+0x20c>)
 800126c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800126e:	4b64      	ldr	r3, [pc, #400]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001270:	2108      	movs	r1, #8
 8001272:	430a      	orrs	r2, r1
 8001274:	635a      	str	r2, [r3, #52]	@ 0x34
 8001276:	4b62      	ldr	r3, [pc, #392]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800127a:	2208      	movs	r2, #8
 800127c:	4013      	ands	r3, r2
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_MCLR_Pin, GPIO_PIN_SET);
 8001282:	238e      	movs	r3, #142	@ 0x8e
 8001284:	0119      	lsls	r1, r3, #4
 8001286:	23a0      	movs	r3, #160	@ 0xa0
 8001288:	05db      	lsls	r3, r3, #23
 800128a:	2201      	movs	r2, #1
 800128c:	0018      	movs	r0, r3
 800128e:	f001 fcf0 	bl	8002c72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_ENABLE_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001292:	495c      	ldr	r1, [pc, #368]	@ (8001404 <MX_GPIO_Init+0x210>)
 8001294:	4b5c      	ldr	r3, [pc, #368]	@ (8001408 <MX_GPIO_Init+0x214>)
 8001296:	2200      	movs	r2, #0
 8001298:	0018      	movs	r0, r3
 800129a:	f001 fcea 	bl	8002c72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin, GPIO_PIN_RESET);
 800129e:	23c0      	movs	r3, #192	@ 0xc0
 80012a0:	00d9      	lsls	r1, r3, #3
 80012a2:	23a0      	movs	r3, #160	@ 0xa0
 80012a4:	05db      	lsls	r3, r3, #23
 80012a6:	2200      	movs	r2, #0
 80012a8:	0018      	movs	r0, r3
 80012aa:	f001 fce2 	bl	8002c72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 80012ae:	4b57      	ldr	r3, [pc, #348]	@ (800140c <MX_GPIO_Init+0x218>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	2180      	movs	r1, #128	@ 0x80
 80012b4:	0018      	movs	r0, r3
 80012b6:	f001 fcdc 	bl	8002c72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAPTOUCH_RESET_GPIO_Port, CAPTOUCH_RESET_Pin, GPIO_PIN_SET);
 80012ba:	2380      	movs	r3, #128	@ 0x80
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4852      	ldr	r0, [pc, #328]	@ (8001408 <MX_GPIO_Init+0x214>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	0019      	movs	r1, r3
 80012c4:	f001 fcd5 	bl	8002c72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012c8:	193b      	adds	r3, r7, r4
 80012ca:	2204      	movs	r2, #4
 80012cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	2203      	movs	r2, #3
 80012d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	193b      	adds	r3, r7, r4
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	193a      	adds	r2, r7, r4
 80012dc:	23a0      	movs	r3, #160	@ 0xa0
 80012de:	05db      	lsls	r3, r3, #23
 80012e0:	0011      	movs	r1, r2
 80012e2:	0018      	movs	r0, r3
 80012e4:	f001 fb44 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nHOLD_Pin SHIFT_DATA_IN_Pin
                           SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_DATA_IN_Pin
 80012e8:	0021      	movs	r1, r4
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	22ee      	movs	r2, #238	@ 0xee
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	601a      	str	r2, [r3, #0]
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	000c      	movs	r4, r1
 80012f4:	193b      	adds	r3, r7, r4
 80012f6:	2201      	movs	r2, #1
 80012f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	193b      	adds	r3, r7, r4
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	193b      	adds	r3, r7, r4
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	193a      	adds	r2, r7, r4
 8001308:	23a0      	movs	r3, #160	@ 0xa0
 800130a:	05db      	lsls	r3, r3, #23
 800130c:	0011      	movs	r1, r2
 800130e:	0018      	movs	r0, r3
 8001310:	f001 fb2e 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_ENABLE_Pin DEBUG_LED_Pin CAPTOUCH_RESET_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin;
 8001314:	193b      	adds	r3, r7, r4
 8001316:	4a3e      	ldr	r2, [pc, #248]	@ (8001410 <MX_GPIO_Init+0x21c>)
 8001318:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	193b      	adds	r3, r7, r4
 800131c:	2201      	movs	r2, #1
 800131e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	193b      	adds	r3, r7, r4
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	193b      	adds	r3, r7, r4
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	193b      	adds	r3, r7, r4
 800132e:	4a36      	ldr	r2, [pc, #216]	@ (8001408 <MX_GPIO_Init+0x214>)
 8001330:	0019      	movs	r1, r3
 8001332:	0010      	movs	r0, r2
 8001334:	f001 fb1c 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8001338:	193b      	adds	r3, r7, r4
 800133a:	2280      	movs	r2, #128	@ 0x80
 800133c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	193b      	adds	r3, r7, r4
 8001340:	2201      	movs	r2, #1
 8001342:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	193b      	adds	r3, r7, r4
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	193b      	adds	r3, r7, r4
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 8001350:	193b      	adds	r3, r7, r4
 8001352:	4a2e      	ldr	r2, [pc, #184]	@ (800140c <MX_GPIO_Init+0x218>)
 8001354:	0019      	movs	r1, r3
 8001356:	0010      	movs	r0, r2
 8001358:	f001 fb0a 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_SET_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = ALARM_SET_BUTTON_EXTI_Pin;
 800135c:	193b      	adds	r3, r7, r4
 800135e:	2280      	movs	r2, #128	@ 0x80
 8001360:	0212      	lsls	r2, r2, #8
 8001362:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001364:	193b      	adds	r3, r7, r4
 8001366:	2284      	movs	r2, #132	@ 0x84
 8001368:	0392      	lsls	r2, r2, #14
 800136a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136c:	193b      	adds	r3, r7, r4
 800136e:	2201      	movs	r2, #1
 8001370:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALARM_SET_BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 8001372:	193a      	adds	r2, r7, r4
 8001374:	23a0      	movs	r3, #160	@ 0xa0
 8001376:	05db      	lsls	r3, r3, #23
 8001378:	0011      	movs	r1, r2
 800137a:	0018      	movs	r0, r3
 800137c:	f001 faf8 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_EXTI_Pin MINUTE_SET_BUTTON_EXTI_Pin ALARM_EN_BUTTON_EXTI_Pin DISPLAY_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_EXTI_Pin|MINUTE_SET_BUTTON_EXTI_Pin|ALARM_EN_BUTTON_EXTI_Pin|DISPLAY_BUTTON_EXTI_Pin;
 8001380:	0021      	movs	r1, r4
 8001382:	187b      	adds	r3, r7, r1
 8001384:	220f      	movs	r2, #15
 8001386:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001388:	187b      	adds	r3, r7, r1
 800138a:	2284      	movs	r2, #132	@ 0x84
 800138c:	0392      	lsls	r2, r2, #14
 800138e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001390:	187b      	adds	r3, r7, r1
 8001392:	2201      	movs	r2, #1
 8001394:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001396:	000c      	movs	r4, r1
 8001398:	187b      	adds	r3, r7, r1
 800139a:	4a1e      	ldr	r2, [pc, #120]	@ (8001414 <MX_GPIO_Init+0x220>)
 800139c:	0019      	movs	r1, r3
 800139e:	0010      	movs	r0, r2
 80013a0:	f001 fae6 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIME_SWITCH_EXTI_Pin CAPTOUCH_CHANGE_EXTI_Pin */
  GPIO_InitStruct.Pin = TIME_SWITCH_EXTI_Pin|CAPTOUCH_CHANGE_EXTI_Pin;
 80013a4:	0021      	movs	r1, r4
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2284      	movs	r2, #132	@ 0x84
 80013aa:	0092      	lsls	r2, r2, #2
 80013ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ae:	187b      	adds	r3, r7, r1
 80013b0:	2284      	movs	r2, #132	@ 0x84
 80013b2:	0392      	lsls	r2, r2, #14
 80013b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b6:	187b      	adds	r3, r7, r1
 80013b8:	2201      	movs	r2, #1
 80013ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <MX_GPIO_Init+0x214>)
 80013c0:	0019      	movs	r1, r3
 80013c2:	0010      	movs	r0, r2
 80013c4:	f001 fad4 	bl	8002970 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	2005      	movs	r0, #5
 80013ce:	f001 fa9d 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80013d2:	2005      	movs	r0, #5
 80013d4:	f001 faaf 	bl	8002936 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	2006      	movs	r0, #6
 80013de:	f001 fa95 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80013e2:	2006      	movs	r0, #6
 80013e4:	f001 faa7 	bl	8002936 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2007      	movs	r0, #7
 80013ee:	f001 fa8d 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80013f2:	2007      	movs	r0, #7
 80013f4:	f001 fa9f 	bl	8002936 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f8:	46c0      	nop			@ (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b00b      	add	sp, #44	@ 0x2c
 80013fe:	bd90      	pop	{r4, r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	00001002 	.word	0x00001002
 8001408:	50000400 	.word	0x50000400
 800140c:	50000800 	.word	0x50000800
 8001410:	00001102 	.word	0x00001102
 8001414:	50000c00 	.word	0x50000c00

08001418 <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8001424:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <updateAndDisplayTime+0x2c>)
 8001426:	4908      	ldr	r1, [pc, #32]	@ (8001448 <updateAndDisplayTime+0x30>)
 8001428:	4b08      	ldr	r3, [pc, #32]	@ (800144c <updateAndDisplayTime+0x34>)
 800142a:	0018      	movs	r0, r3
 800142c:	f7ff fb10 	bl	8000a50 <getRTCTime>
	sevSeg_updateDigits(&currTime);
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <updateAndDisplayTime+0x30>)
 8001432:	0018      	movs	r0, r3
 8001434:	f000 fd6e 	bl	8001f14 <sevSeg_updateDigits>

	return halRet;
 8001438:	1dfb      	adds	r3, r7, #7
 800143a:	781b      	ldrb	r3, [r3, #0]

}
 800143c:	0018      	movs	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	b002      	add	sp, #8
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200000a0 	.word	0x200000a0
 8001448:	2000008c 	.word	0x2000008c
 800144c:	2000014c 	.word	0x2000014c

08001450 <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime);
 800145c:	4b04      	ldr	r3, [pc, #16]	@ (8001470 <updateAndDisplayAlarm+0x20>)
 800145e:	0018      	movs	r0, r3
 8001460:	f000 fd58 	bl	8001f14 <sevSeg_updateDigits>

	return halRet;
 8001464:	1dfb      	adds	r3, r7, #7
 8001466:	781b      	ldrb	r3, [r3, #0]

}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b002      	add	sp, #8
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200000a4 	.word	0x200000a4

08001474 <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b08d      	sub	sp, #52	@ 0x34
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 800147c:	2408      	movs	r4, #8
 800147e:	193b      	adds	r3, r7, r4
 8001480:	0018      	movs	r0, r3
 8001482:	2328      	movs	r3, #40	@ 0x28
 8001484:	001a      	movs	r2, r3
 8001486:	2100      	movs	r1, #0
 8001488:	f005 fd1c 	bl	8006ec4 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 800148c:	2380      	movs	r3, #128	@ 0x80
 800148e:	005a      	lsls	r2, r3, #1
 8001490:	1939      	adds	r1, r7, r4
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	2300      	movs	r3, #0
 8001496:	f004 f90f 	bl	80056b8 <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 800149a:	193b      	adds	r3, r7, r4
 800149c:	785b      	ldrb	r3, [r3, #1]
 800149e:	2b3a      	cmp	r3, #58	@ 0x3a
 80014a0:	d903      	bls.n	80014aa <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 80014a2:	193b      	adds	r3, r7, r4
 80014a4:	2200      	movs	r2, #0
 80014a6:	705a      	strb	r2, [r3, #1]
 80014a8:	e006      	b.n	80014b8 <HAL_RTC_AlarmAEventCallback+0x44>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 80014aa:	2108      	movs	r1, #8
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	785b      	ldrb	r3, [r3, #1]
 80014b0:	3301      	adds	r3, #1
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	187b      	adds	r3, r7, r1
 80014b6:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80014b8:	46c0      	nop			@ (mov r8, r8)
 80014ba:	2308      	movs	r3, #8
 80014bc:	18f9      	adds	r1, r7, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	0018      	movs	r0, r3
 80014c4:	f003 ffb8 	bl	8005438 <HAL_RTC_SetAlarm_IT>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d1f6      	bne.n	80014ba <HAL_RTC_AlarmAEventCallback+0x46>

	  updateAndDisplayTime();
 80014cc:	f7ff ffa4 	bl	8001418 <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 80014d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <HAL_RTC_AlarmAEventCallback+0x94>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_RTC_AlarmAEventCallback+0x8c>
 80014d8:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <HAL_RTC_AlarmAEventCallback+0x98>)
 80014da:	781a      	ldrb	r2, [r3, #0]
 80014dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d10d      	bne.n	8001500 <HAL_RTC_AlarmAEventCallback+0x8c>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 80014e4:	4b09      	ldr	r3, [pc, #36]	@ (800150c <HAL_RTC_AlarmAEventCallback+0x98>)
 80014e6:	785a      	ldrb	r2, [r3, #1]
 80014e8:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d107      	bne.n	8001500 <HAL_RTC_AlarmAEventCallback+0x8c>
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_RTC_AlarmAEventCallback+0x98>)
 80014f2:	78da      	ldrb	r2, [r3, #3]
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80014f6:	78db      	ldrb	r3, [r3, #3]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d101      	bne.n	8001500 <HAL_RTC_AlarmAEventCallback+0x8c>
		  userAlarmBeep();
 80014fc:	f000 f80a 	bl	8001514 <userAlarmBeep>
	  }


}
 8001500:	46c0      	nop			@ (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b00d      	add	sp, #52	@ 0x34
 8001506:	bd90      	pop	{r4, r7, pc}
 8001508:	20000089 	.word	0x20000089
 800150c:	200000a4 	.word	0x200000a4
 8001510:	2000008c 	.word	0x2000008c

08001514 <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 800151a:	4b50      	ldr	r3, [pc, #320]	@ (800165c <userAlarmBeep+0x148>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d02d      	beq.n	800157e <userAlarmBeep+0x6a>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 8001522:	4b4f      	ldr	r3, [pc, #316]	@ (8001660 <userAlarmBeep+0x14c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	0018      	movs	r0, r3
 8001528:	f004 fd7c 	bl	8006024 <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 800152c:	4b4c      	ldr	r3, [pc, #304]	@ (8001660 <userAlarmBeep+0x14c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001534:	4b4a      	ldr	r3, [pc, #296]	@ (8001660 <userAlarmBeep+0x14c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	0c12      	lsrs	r2, r2, #16
 800153c:	0412      	lsls	r2, r2, #16
 800153e:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 8001540:	4b47      	ldr	r3, [pc, #284]	@ (8001660 <userAlarmBeep+0x14c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	4b45      	ldr	r3, [pc, #276]	@ (8001660 <userAlarmBeep+0x14c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4945      	ldr	r1, [pc, #276]	@ (8001664 <userAlarmBeep+0x150>)
 8001550:	400a      	ands	r2, r1
 8001552:	611a      	str	r2, [r3, #16]

			// Re-write RCR with 10
			timerSnooze->Instance->RCR &= 0xFF00;
 8001554:	4b42      	ldr	r3, [pc, #264]	@ (8001660 <userAlarmBeep+0x14c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800155c:	4b40      	ldr	r3, [pc, #256]	@ (8001660 <userAlarmBeep+0x14c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	22ff      	movs	r2, #255	@ 0xff
 8001564:	0212      	lsls	r2, r2, #8
 8001566:	400a      	ands	r2, r1
 8001568:	631a      	str	r2, [r3, #48]	@ 0x30
			timerSnooze->Instance->RCR |= timerSnooze_RCR;
 800156a:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <userAlarmBeep+0x14c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001572:	2164      	movs	r1, #100	@ 0x64
 8001574:	4b3a      	ldr	r3, [pc, #232]	@ (8001660 <userAlarmBeep+0x14c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	631a      	str	r2, [r3, #48]	@ 0x30

		}

	HAL_TIM_Base_Stop(timerDelay);
 800157e:	4b3a      	ldr	r3, [pc, #232]	@ (8001668 <userAlarmBeep+0x154>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	0018      	movs	r0, r3
 8001584:	f004 fcd4 	bl	8005f30 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001588:	4b37      	ldr	r3, [pc, #220]	@ (8001668 <userAlarmBeep+0x154>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	0018      	movs	r0, r3
 800158e:	f004 fc83 	bl	8005e98 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001592:	4b35      	ldr	r3, [pc, #212]	@ (8001668 <userAlarmBeep+0x154>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 800159c:	1cfb      	adds	r3, r7, #3
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 80015a2:	f7ff ff39 	bl	8001418 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 80015a6:	4b30      	ldr	r3, [pc, #192]	@ (8001668 <userAlarmBeep+0x154>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	4a2e      	ldr	r2, [pc, #184]	@ (800166c <userAlarmBeep+0x158>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d91a      	bls.n	80015ee <userAlarmBeep+0xda>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 80015b8:	1cfb      	adds	r3, r7, #3
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001670 <userAlarmBeep+0x15c>)
 80015be:	5cd3      	ldrb	r3, [r2, r3]
 80015c0:	0018      	movs	r0, r3
 80015c2:	f000 fd43 	bl	800204c <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80015c6:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <userAlarmBeep+0x154>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80015d0:	1cfb      	adds	r3, r7, #3
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	1e5a      	subs	r2, r3, #1
 80015d6:	4193      	sbcs	r3, r2
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2201      	movs	r2, #1
 80015dc:	4053      	eors	r3, r2
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	001a      	movs	r2, r3
 80015e2:	1cfb      	adds	r3, r7, #3
 80015e4:	701a      	strb	r2, [r3, #0]
 80015e6:	781a      	ldrb	r2, [r3, #0]
 80015e8:	2101      	movs	r1, #1
 80015ea:	400a      	ands	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 80015ee:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <userAlarmBeep+0x160>)
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7fe ffbf 	bl	8000574 <capTouch_readChannels>
//		HAL_StatusTypeDef halRet = capTouch_readChannels(&capTouch);
//		if(halRet != HAL_OK)
//			dispError();

	} while(capTouch.keyStat == 0x00 &&
 80015f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <userAlarmBeep+0x160>)
 80015f8:	7c1b      	ldrb	r3, [r3, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d108      	bne.n	8001610 <userAlarmBeep+0xfc>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 80015fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001678 <userAlarmBeep+0x164>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2204      	movs	r2, #4
 8001604:	0011      	movs	r1, r2
 8001606:	0018      	movs	r0, r3
 8001608:	f001 fb16 	bl	8002c38 <HAL_GPIO_ReadPin>
 800160c:	1e03      	subs	r3, r0, #0
	} while(capTouch.keyStat == 0x00 &&
 800160e:	d1c8      	bne.n	80015a2 <userAlarmBeep+0x8e>

	/*
	 * Stop blinking, turn off buzzer, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8001610:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <userAlarmBeep+0x154>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	0018      	movs	r0, r3
 8001616:	f004 fc8b 	bl	8005f30 <HAL_TIM_Base_Stop>

	updateAndDisplayTime();				// Update to current time and display
 800161a:	f7ff fefd 	bl	8001418 <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Set to 50% duty cycle
 800161e:	235a      	movs	r3, #90	@ 0x5a
 8001620:	0018      	movs	r0, r3
 8001622:	f000 fd13 	bl	800204c <sevSeg_setIntensity>
	displayToggle = 2;								// Set to 2 for future display button ISRs
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <userAlarmBeep+0x168>)
 8001628:	2202      	movs	r2, #2
 800162a:	701a      	strb	r2, [r3, #0]


	// If this is the first snooze,
	if(!secondSnooze) {
 800162c:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <userAlarmBeep+0x148>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2201      	movs	r2, #1
 8001632:	4053      	eors	r3, r2
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d008      	beq.n	800164c <userAlarmBeep+0x138>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <userAlarmBeep+0x14c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	0018      	movs	r0, r3
 8001640:	f004 fc9c 	bl	8005f7c <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 8001644:	4b05      	ldr	r3, [pc, #20]	@ (800165c <userAlarmBeep+0x148>)
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
		 * in the top conditional, the secondSnooze is always true;
		 */
		secondSnooze = false;

	}
}
 800164a:	e002      	b.n	8001652 <userAlarmBeep+0x13e>
		secondSnooze = false;
 800164c:	4b03      	ldr	r3, [pc, #12]	@ (800165c <userAlarmBeep+0x148>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
}
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	b002      	add	sp, #8
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			@ (mov r8, r8)
 800165c:	200002c1 	.word	0x200002c1
 8001660:	20000044 	.word	0x20000044
 8001664:	0000fffc 	.word	0x0000fffc
 8001668:	20000040 	.word	0x20000040
 800166c:	00007ffe 	.word	0x00007ffe
 8001670:	08006f6c 	.word	0x08006f6c
 8001674:	200002c4 	.word	0x200002c4
 8001678:	20000000 	.word	0x20000000
 800167c:	20000088 	.word	0x20000088

08001680 <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	0002      	movs	r2, r0
 8001688:	1dbb      	adds	r3, r7, #6
 800168a:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 800168c:	2208      	movs	r2, #8
 800168e:	1dbb      	adds	r3, r7, #6
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	4293      	cmp	r3, r2
 8001694:	d106      	bne.n	80016a4 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 8001696:	230f      	movs	r3, #15
 8001698:	18fc      	adds	r4, r7, r3
 800169a:	f000 f851 	bl	8001740 <displayButtonISR>
 800169e:	0003      	movs	r3, r0
 80016a0:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 80016a2:	e031      	b.n	8001708 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80016a4:	2204      	movs	r2, #4
 80016a6:	1dbb      	adds	r3, r7, #6
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d106      	bne.n	80016bc <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80016ae:	230f      	movs	r3, #15
 80016b0:	18fc      	adds	r4, r7, r3
 80016b2:	f000 f86d 	bl	8001790 <alarmEnableISR>
 80016b6:	0003      	movs	r3, r0
 80016b8:	7023      	strb	r3, [r4, #0]
}
 80016ba:	e025      	b.n	8001708 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80016bc:	2380      	movs	r3, #128	@ 0x80
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	1dba      	adds	r2, r7, #6
 80016c2:	8812      	ldrh	r2, [r2, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d106      	bne.n	80016d6 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 80016c8:	230f      	movs	r3, #15
 80016ca:	18fc      	adds	r4, r7, r3
 80016cc:	f000 f888 	bl	80017e0 <alarmSetISR>
 80016d0:	0003      	movs	r3, r0
 80016d2:	7023      	strb	r3, [r4, #0]
}
 80016d4:	e018      	b.n	8001708 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 80016d6:	2201      	movs	r2, #1
 80016d8:	1dbb      	adds	r3, r7, #6
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	4293      	cmp	r3, r2
 80016de:	d106      	bne.n	80016ee <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80016e0:	230f      	movs	r3, #15
 80016e2:	18fc      	adds	r4, r7, r3
 80016e4:	f000 f93c 	bl	8001960 <hourSetISR>
 80016e8:	0003      	movs	r3, r0
 80016ea:	7023      	strb	r3, [r4, #0]
}
 80016ec:	e00c      	b.n	8001708 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80016ee:	2202      	movs	r2, #2
 80016f0:	1dbb      	adds	r3, r7, #6
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d106      	bne.n	8001706 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 80016f8:	230f      	movs	r3, #15
 80016fa:	18fc      	adds	r4, r7, r3
 80016fc:	f000 f95c 	bl	80019b8 <minuteSetISR>
 8001700:	0003      	movs	r3, r0
 8001702:	7023      	strb	r3, [r4, #0]
}
 8001704:	e000      	b.n	8001708 <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 8001706:	46c0      	nop			@ (mov r8, r8)
}
 8001708:	46c0      	nop			@ (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	b005      	add	sp, #20
 800170e:	bd90      	pop	{r4, r7, pc}

08001710 <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

	if((htim == timerSnooze) && (secondSnooze == true)) {
 8001718:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	429a      	cmp	r2, r3
 8001720:	d105      	bne.n	800172e <HAL_TIM_PeriodElapsedCallback+0x1e>
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_TIM_PeriodElapsedCallback+0x1e>

		userAlarmBeep();
 800172a:	f7ff fef3 	bl	8001514 <userAlarmBeep>

	}

}
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	b002      	add	sp, #8
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	20000044 	.word	0x20000044
 800173c:	200002c1 	.word	0x200002c1

08001740 <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001746:	1dfb      	adds	r3, r7, #7
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 800174c:	f7ff fe64 	bl	8001418 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8001750:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <displayButtonISR+0x48>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	001a      	movs	r2, r3
 8001756:	4b0d      	ldr	r3, [pc, #52]	@ (800178c <displayButtonISR+0x4c>)
 8001758:	5c9b      	ldrb	r3, [r3, r2]
 800175a:	0018      	movs	r0, r3
 800175c:	f000 fc76 	bl	800204c <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8001760:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <displayButtonISR+0x48>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d903      	bls.n	8001770 <displayButtonISR+0x30>
		displayToggle = 0;
 8001768:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <displayButtonISR+0x48>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
 800176e:	e005      	b.n	800177c <displayButtonISR+0x3c>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8001770:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <displayButtonISR+0x48>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <displayButtonISR+0x48>)
 800177a:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 800177c:	1dfb      	adds	r3, r7, #7
 800177e:	781b      	ldrb	r3, [r3, #0]

}
 8001780:	0018      	movs	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	b002      	add	sp, #8
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000088 	.word	0x20000088
 800178c:	08006f6c 	.word	0x08006f6c

08001790 <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 800179c:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <alarmEnableISR+0x48>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2201      	movs	r2, #1
 80017a2:	4053      	eors	r3, r2
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <alarmEnableISR+0x22>

//		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_SET);			// Turn on alarm LED
		userAlarmToggle = true;								// Toggle internal flag to true
 80017aa:	4b0b      	ldr	r3, [pc, #44]	@ (80017d8 <alarmEnableISR+0x48>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	e008      	b.n	80017c4 <alarmEnableISR+0x34>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <alarmEnableISR+0x48>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <alarmEnableISR+0x32>

//		HAL_GPIO_WritePin(alarmLEDPort, alarmLEDPin, GPIO_PIN_RESET);			// Turn off alarm LED
		userAlarmToggle = false;							// Toggle internal flag to false
 80017ba:	4b07      	ldr	r3, [pc, #28]	@ (80017d8 <alarmEnableISR+0x48>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	e000      	b.n	80017c4 <alarmEnableISR+0x34>
	}
	else {
		__NOP();							//Code should never reach here.
 80017c2:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset snooze time
	secondSnooze = false;
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <alarmEnableISR+0x4c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]

	return halRet;
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]

}
 80017ce:	0018      	movs	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b002      	add	sp, #8
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			@ (mov r8, r8)
 80017d8:	20000089 	.word	0x20000089
 80017dc:	200002c1 	.word	0x200002c1

080017e0 <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80017e6:	1c7b      	adds	r3, r7, #1
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 80017ec:	1dfb      	adds	r3, r7, #7
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	e01a      	b.n	800182a <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 80017f4:	4b55      	ldr	r3, [pc, #340]	@ (800194c <alarmSetISR+0x16c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f004 fb99 	bl	8005f30 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 80017fe:	4b53      	ldr	r3, [pc, #332]	@ (800194c <alarmSetISR+0x16c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2200      	movs	r2, #0
 8001806:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001808:	4b50      	ldr	r3, [pc, #320]	@ (800194c <alarmSetISR+0x16c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0018      	movs	r0, r3
 800180e:	f004 fb43 	bl	8005e98 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 8001812:	4b4e      	ldr	r3, [pc, #312]	@ (800194c <alarmSetISR+0x16c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181a:	4a4d      	ldr	r2, [pc, #308]	@ (8001950 <alarmSetISR+0x170>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d9f8      	bls.n	8001812 <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 8001820:	1dfb      	adds	r3, r7, #7
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	1dfb      	adds	r3, r7, #7
 8001826:	3201      	adds	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	1dfb      	adds	r3, r7, #7
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d9e0      	bls.n	80017f4 <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 8001832:	4b48      	ldr	r3, [pc, #288]	@ (8001954 <alarmSetISR+0x174>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2280      	movs	r2, #128	@ 0x80
 8001838:	0212      	lsls	r2, r2, #8
 800183a:	0011      	movs	r1, r2
 800183c:	0018      	movs	r0, r3
 800183e:	f001 f9fb 	bl	8002c38 <HAL_GPIO_ReadPin>
 8001842:	1e03      	subs	r3, r0, #0
 8001844:	d11f      	bne.n	8001886 <alarmSetISR+0xa6>
		alarmSetMode = true;
 8001846:	4b44      	ldr	r3, [pc, #272]	@ (8001958 <alarmSetISR+0x178>)
 8001848:	2201      	movs	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 800184c:	4b3f      	ldr	r3, [pc, #252]	@ (800194c <alarmSetISR+0x16c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	0018      	movs	r0, r3
 8001852:	f004 fb6d 	bl	8005f30 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 8001856:	4b3d      	ldr	r3, [pc, #244]	@ (800194c <alarmSetISR+0x16c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2200      	movs	r2, #0
 800185e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001860:	4b3a      	ldr	r3, [pc, #232]	@ (800194c <alarmSetISR+0x16c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	0018      	movs	r0, r3
 8001866:	f004 fb17 	bl	8005e98 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800186a:	4b38      	ldr	r3, [pc, #224]	@ (800194c <alarmSetISR+0x16c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 8001876:	1cfb      	adds	r3, r7, #3
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 800187c:	4b36      	ldr	r3, [pc, #216]	@ (8001958 <alarmSetISR+0x178>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d059      	beq.n	8001938 <alarmSetISR+0x158>
 8001884:	e002      	b.n	800188c <alarmSetISR+0xac>
		return halRet;
 8001886:	1c7b      	adds	r3, r7, #1
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	e05a      	b.n	8001942 <alarmSetISR+0x162>

		bool displayBlink = false;
 800188c:	1cbb      	adds	r3, r7, #2
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 8001892:	4b30      	ldr	r3, [pc, #192]	@ (8001954 <alarmSetISR+0x174>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2280      	movs	r2, #128	@ 0x80
 8001898:	0212      	lsls	r2, r2, #8
 800189a:	0011      	movs	r1, r2
 800189c:	0018      	movs	r0, r3
 800189e:	f001 f9cb 	bl	8002c38 <HAL_GPIO_ReadPin>
 80018a2:	0003      	movs	r3, r0
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d102      	bne.n	80018ae <alarmSetISR+0xce>
				alarmSetButtonReset = true;
 80018a8:	1cfb      	adds	r3, r7, #3
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 80018ae:	f7ff fdcf 	bl	8001450 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 80018b2:	4b26      	ldr	r3, [pc, #152]	@ (800194c <alarmSetISR+0x16c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	1ad2      	subs	r2, r2, r3
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d31b      	bcc.n	8001900 <alarmSetISR+0x120>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 80018c8:	1cbb      	adds	r3, r7, #2
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4a23      	ldr	r2, [pc, #140]	@ (800195c <alarmSetISR+0x17c>)
 80018ce:	5cd3      	ldrb	r3, [r2, r3]
 80018d0:	0018      	movs	r0, r3
 80018d2:	f000 fbbb 	bl	800204c <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 80018d6:	4b1d      	ldr	r3, [pc, #116]	@ (800194c <alarmSetISR+0x16c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 80018e2:	1cbb      	adds	r3, r7, #2
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	1e5a      	subs	r2, r3, #1
 80018e8:	4193      	sbcs	r3, r2
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2201      	movs	r2, #1
 80018ee:	4053      	eors	r3, r2
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	001a      	movs	r2, r3
 80018f4:	1cbb      	adds	r3, r7, #2
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	2101      	movs	r1, #1
 80018fc:	400a      	ands	r2, r1
 80018fe:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <alarmSetISR+0x174>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2280      	movs	r2, #128	@ 0x80
 8001906:	0212      	lsls	r2, r2, #8
 8001908:	0011      	movs	r1, r2
 800190a:	0018      	movs	r0, r3
 800190c:	f001 f994 	bl	8002c38 <HAL_GPIO_ReadPin>
 8001910:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 8001912:	d1be      	bne.n	8001892 <alarmSetISR+0xb2>
 8001914:	1cfb      	adds	r3, r7, #3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2201      	movs	r2, #1
 800191a:	4053      	eors	r3, r2
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1b7      	bne.n	8001892 <alarmSetISR+0xb2>

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 8001922:	235a      	movs	r3, #90	@ 0x5a
 8001924:	0018      	movs	r0, r3
 8001926:	f000 fb91 	bl	800204c <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 800192a:	4b08      	ldr	r3, [pc, #32]	@ (800194c <alarmSetISR+0x16c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	0018      	movs	r0, r3
 8001930:	f004 fafe 	bl	8005f30 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001934:	f7ff fd70 	bl	8001418 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001938:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <alarmSetISR+0x178>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 800193e:	1c7b      	adds	r3, r7, #1
 8001940:	781b      	ldrb	r3, [r3, #0]

}
 8001942:	0018      	movs	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	b002      	add	sp, #8
 8001948:	bd80      	pop	{r7, pc}
 800194a:	46c0      	nop			@ (mov r8, r8)
 800194c:	20000040 	.word	0x20000040
 8001950:	0000fffe 	.word	0x0000fffe
 8001954:	20000004 	.word	0x20000004
 8001958:	200002c0 	.word	0x200002c0
 800195c:	08006f6c 	.word	0x08006f6c

08001960 <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 800196c:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <hourSetISR+0x48>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <hourSetISR+0x1a>

		alarmHourInc();
 8001974:	f000 f872 	bl	8001a5c <alarmHourInc>
 8001978:	e00f      	b.n	800199a <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 800197a:	f000 f89f 	bl	8001abc <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 800197e:	490b      	ldr	r1, [pc, #44]	@ (80019ac <hourSetISR+0x4c>)
 8001980:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <hourSetISR+0x50>)
 8001982:	2200      	movs	r2, #0
 8001984:	0018      	movs	r0, r3
 8001986:	f003 fb73 	bl	8005070 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 800198a:	f7ff fd45 	bl	8001418 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 800198e:	4a09      	ldr	r2, [pc, #36]	@ (80019b4 <hourSetISR+0x54>)
 8001990:	4906      	ldr	r1, [pc, #24]	@ (80019ac <hourSetISR+0x4c>)
 8001992:	4b07      	ldr	r3, [pc, #28]	@ (80019b0 <hourSetISR+0x50>)
 8001994:	0018      	movs	r0, r3
 8001996:	f7ff f85b 	bl	8000a50 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	781b      	ldrb	r3, [r3, #0]

}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b002      	add	sp, #8
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			@ (mov r8, r8)
 80019a8:	200002c0 	.word	0x200002c0
 80019ac:	2000008c 	.word	0x2000008c
 80019b0:	2000014c 	.word	0x2000014c
 80019b4:	200000a0 	.word	0x200000a0

080019b8 <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08c      	sub	sp, #48	@ 0x30
 80019bc:	af00      	add	r7, sp, #0


	HAL_StatusTypeDef halRet = HAL_OK;
 80019be:	232f      	movs	r3, #47	@ 0x2f
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80019c6:	4b21      	ldr	r3, [pc, #132]	@ (8001a4c <minuteSetISR+0x94>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <minuteSetISR+0x1c>

		alarmMinuteInc();
 80019ce:	f000 f8b5 	bl	8001b3c <alarmMinuteInc>
 80019d2:	e034      	b.n	8001a3e <minuteSetISR+0x86>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 80019d4:	f000 f8d0 	bl	8001b78 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80019d8:	491d      	ldr	r1, [pc, #116]	@ (8001a50 <minuteSetISR+0x98>)
 80019da:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <minuteSetISR+0x9c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	0018      	movs	r0, r3
 80019e0:	f003 fb46 	bl	8005070 <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	0018      	movs	r0, r3
 80019e8:	2328      	movs	r3, #40	@ 0x28
 80019ea:	001a      	movs	r2, r3
 80019ec:	2100      	movs	r1, #0
 80019ee:	f005 fa69 	bl	8006ec4 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 80019f2:	2380      	movs	r3, #128	@ 0x80
 80019f4:	005a      	lsls	r2, r3, #1
 80019f6:	1d39      	adds	r1, r7, #4
 80019f8:	4816      	ldr	r0, [pc, #88]	@ (8001a54 <minuteSetISR+0x9c>)
 80019fa:	2300      	movs	r3, #0
 80019fc:	f003 fe5c 	bl	80056b8 <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	785b      	ldrb	r3, [r3, #1]
 8001a04:	2b3a      	cmp	r3, #58	@ 0x3a
 8001a06:	d903      	bls.n	8001a10 <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	705a      	strb	r2, [r3, #1]
 8001a0e:	e005      	b.n	8001a1c <minuteSetISR+0x64>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	785b      	ldrb	r3, [r3, #1]
 8001a14:	3301      	adds	r3, #1
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8001a1c:	46c0      	nop			@ (mov r8, r8)
 8001a1e:	1d39      	adds	r1, r7, #4
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <minuteSetISR+0x9c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	0018      	movs	r0, r3
 8001a26:	f003 fd07 	bl	8005438 <HAL_RTC_SetAlarm_IT>
 8001a2a:	1e03      	subs	r3, r0, #0
 8001a2c:	d1f7      	bne.n	8001a1e <minuteSetISR+0x66>


		updateAndDisplayTime();
 8001a2e:	f7ff fcf3 	bl	8001418 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001a32:	4a09      	ldr	r2, [pc, #36]	@ (8001a58 <minuteSetISR+0xa0>)
 8001a34:	4906      	ldr	r1, [pc, #24]	@ (8001a50 <minuteSetISR+0x98>)
 8001a36:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <minuteSetISR+0x9c>)
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7ff f809 	bl	8000a50 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8001a3e:	232f      	movs	r3, #47	@ 0x2f
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	781b      	ldrb	r3, [r3, #0]
}
 8001a44:	0018      	movs	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b00c      	add	sp, #48	@ 0x30
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200002c0 	.word	0x200002c0
 8001a50:	2000008c 	.word	0x2000008c
 8001a54:	2000014c 	.word	0x2000014c
 8001a58:	200000a0 	.word	0x200000a0

08001a5c <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001a60:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <alarmHourInc+0x5c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b0b      	cmp	r3, #11
 8001a66:	d903      	bls.n	8001a70 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001a68:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <alarmHourInc+0x5c>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	e01e      	b.n	8001aae <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8001a70:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <alarmHourInc+0x5c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b0b      	cmp	r3, #11
 8001a76:	d10e      	bne.n	8001a96 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001a78:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <alarmHourInc+0x5c>)
 8001a7a:	78db      	ldrb	r3, [r3, #3]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d103      	bne.n	8001a88 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001a80:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <alarmHourInc+0x5c>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	70da      	strb	r2, [r3, #3]
 8001a86:	e002      	b.n	8001a8e <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001a88:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab8 <alarmHourInc+0x5c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <alarmHourInc+0x5c>)
 8001a90:	220c      	movs	r2, #12
 8001a92:	701a      	strb	r2, [r3, #0]
 8001a94:	e00b      	b.n	8001aae <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 8001a96:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <alarmHourInc+0x5c>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b0a      	cmp	r3, #10
 8001a9c:	d806      	bhi.n	8001aac <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001a9e:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <alarmHourInc+0x5c>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <alarmHourInc+0x5c>)
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	e000      	b.n	8001aae <alarmHourInc+0x52>
	}
	else {
		__NOP();
 8001aac:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001aae:	f000 f8e1 	bl	8001c74 <updateRTCBackupReg>

}
 8001ab2:	46c0      	nop			@ (mov r8, r8)
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200000a4 	.word	0x200000a4

08001abc <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8001b2c <currHourInc+0x70>)
 8001ac2:	491b      	ldr	r1, [pc, #108]	@ (8001b30 <currHourInc+0x74>)
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b34 <currHourInc+0x78>)
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f7fe ffc2 	bl	8000a50 <getRTCTime>

	if(currTime.Hours >= 12) {
 8001acc:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <currHourInc+0x74>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b0b      	cmp	r3, #11
 8001ad2:	d903      	bls.n	8001adc <currHourInc+0x20>
		currTime.Hours = 1;
 8001ad4:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <currHourInc+0x74>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	e01e      	b.n	8001b1a <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <currHourInc+0x74>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b0b      	cmp	r3, #11
 8001ae2:	d10e      	bne.n	8001b02 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001ae4:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <currHourInc+0x74>)
 8001ae6:	78db      	ldrb	r3, [r3, #3]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d103      	bne.n	8001af4 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001aec:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <currHourInc+0x74>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	70da      	strb	r2, [r3, #3]
 8001af2:	e002      	b.n	8001afa <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001af4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <currHourInc+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8001afa:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <currHourInc+0x74>)
 8001afc:	220c      	movs	r2, #12
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	e00b      	b.n	8001b1a <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 8001b02:	4b0d      	ldr	r3, [pc, #52]	@ (8001b38 <currHourInc+0x7c>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b0a      	cmp	r3, #10
 8001b08:	d806      	bhi.n	8001b18 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <currHourInc+0x74>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <currHourInc+0x74>)
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	e000      	b.n	8001b1a <currHourInc+0x5e>
	}
	else {
		__NOP();
 8001b18:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001b1a:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <currHourInc+0x74>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <currHourInc+0x74>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]

}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200000a0 	.word	0x200000a0
 8001b30:	2000008c 	.word	0x2000008c
 8001b34:	2000014c 	.word	0x2000014c
 8001b38:	200000a4 	.word	0x200000a4

08001b3c <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001b40:	4b0c      	ldr	r3, [pc, #48]	@ (8001b74 <alarmMinuteInc+0x38>)
 8001b42:	785b      	ldrb	r3, [r3, #1]
 8001b44:	2b3a      	cmp	r3, #58	@ 0x3a
 8001b46:	d903      	bls.n	8001b50 <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 8001b48:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <alarmMinuteInc+0x38>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	705a      	strb	r2, [r3, #1]
 8001b4e:	e00b      	b.n	8001b68 <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <alarmMinuteInc+0x38>)
 8001b52:	785b      	ldrb	r3, [r3, #1]
 8001b54:	2b3a      	cmp	r3, #58	@ 0x3a
 8001b56:	d806      	bhi.n	8001b66 <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <alarmMinuteInc+0x38>)
 8001b5a:	785b      	ldrb	r3, [r3, #1]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <alarmMinuteInc+0x38>)
 8001b62:	705a      	strb	r2, [r3, #1]
 8001b64:	e000      	b.n	8001b68 <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 8001b66:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001b68:	f000 f884 	bl	8001c74 <updateRTCBackupReg>

}
 8001b6c:	46c0      	nop			@ (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			@ (mov r8, r8)
 8001b74:	200000a4 	.word	0x200000a4

08001b78 <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001b7c:	4a11      	ldr	r2, [pc, #68]	@ (8001bc4 <currMinuteInc+0x4c>)
 8001b7e:	4912      	ldr	r1, [pc, #72]	@ (8001bc8 <currMinuteInc+0x50>)
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <currMinuteInc+0x54>)
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7fe ff64 	bl	8000a50 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8001b88:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <currMinuteInc+0x50>)
 8001b8a:	785b      	ldrb	r3, [r3, #1]
 8001b8c:	2b3a      	cmp	r3, #58	@ 0x3a
 8001b8e:	d903      	bls.n	8001b98 <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8001b90:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <currMinuteInc+0x50>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	705a      	strb	r2, [r3, #1]
 8001b96:	e00b      	b.n	8001bb0 <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8001b98:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <currMinuteInc+0x50>)
 8001b9a:	785b      	ldrb	r3, [r3, #1]
 8001b9c:	2b3a      	cmp	r3, #58	@ 0x3a
 8001b9e:	d806      	bhi.n	8001bae <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <currMinuteInc+0x50>)
 8001ba2:	785b      	ldrb	r3, [r3, #1]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <currMinuteInc+0x50>)
 8001baa:	705a      	strb	r2, [r3, #1]
 8001bac:	e000      	b.n	8001bb0 <currMinuteInc+0x38>
	}
	else {
		__NOP();
 8001bae:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001bb0:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <currMinuteInc+0x50>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001bb6:	4b04      	ldr	r3, [pc, #16]	@ (8001bc8 <currMinuteInc+0x50>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]

}
 8001bbc:	46c0      	nop			@ (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	200000a0 	.word	0x200000a0
 8001bc8:	2000008c 	.word	0x2000008c
 8001bcc:	2000014c 	.word	0x2000014c

08001bd0 <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <dispFault+0x1c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2280      	movs	r2, #128	@ 0x80
 8001bda:	0151      	lsls	r1, r2, #5
 8001bdc:	2201      	movs	r2, #1
 8001bde:	0018      	movs	r0, r3
 8001be0:	f001 f847 	bl	8002c72 <HAL_GPIO_WritePin>
}
 8001be4:	46c0      	nop			@ (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	20000024 	.word	0x20000024

08001bf0 <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c68 <dispFailure+0x78>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f004 f998 	bl	8005f30 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001c00:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <dispFailure+0x78>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0018      	movs	r0, r3
 8001c06:	f004 f947 	bl	8005e98 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001c0a:	4b17      	ldr	r3, [pc, #92]	@ (8001c68 <dispFailure+0x78>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001c14:	1cfb      	adds	r3, r7, #3
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001c1a:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <dispFailure+0x78>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	4a11      	ldr	r2, [pc, #68]	@ (8001c6c <dispFailure+0x7c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d9f6      	bls.n	8001c1a <dispFailure+0x2a>

			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8001c2c:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <dispFailure+0x80>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2280      	movs	r2, #128	@ 0x80
 8001c32:	0152      	lsls	r2, r2, #5
 8001c34:	0011      	movs	r1, r2
 8001c36:	0018      	movs	r0, r3
 8001c38:	f001 f838 	bl	8002cac <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <dispFailure+0x78>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c44:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001c46:	1cfb      	adds	r3, r7, #3
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	1e5a      	subs	r2, r3, #1
 8001c4c:	4193      	sbcs	r3, r2
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2201      	movs	r2, #1
 8001c52:	4053      	eors	r3, r2
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	001a      	movs	r2, r3
 8001c58:	1cfb      	adds	r3, r7, #3
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	781a      	ldrb	r2, [r3, #0]
 8001c5e:	2101      	movs	r1, #1
 8001c60:	400a      	ands	r2, r1
 8001c62:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001c64:	e7d9      	b.n	8001c1a <dispFailure+0x2a>
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	20000040 	.word	0x20000040
 8001c6c:	00003ffe 	.word	0x00003ffe
 8001c70:	20000024 	.word	0x20000024

08001c74 <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8001c78:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <updateRTCBackupReg+0x40>)
 8001c7a:	6819      	ldr	r1, [r3, #0]
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <updateRTCBackupReg+0x44>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	001a      	movs	r2, r3
 8001c82:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <updateRTCBackupReg+0x48>)
 8001c84:	0018      	movs	r0, r3
 8001c86:	f003 ffbf 	bl	8005c08 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <updateRTCBackupReg+0x4c>)
 8001c8c:	6819      	ldr	r1, [r3, #0]
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <updateRTCBackupReg+0x44>)
 8001c90:	785b      	ldrb	r3, [r3, #1]
 8001c92:	001a      	movs	r2, r3
 8001c94:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <updateRTCBackupReg+0x48>)
 8001c96:	0018      	movs	r0, r3
 8001c98:	f003 ffb6 	bl	8005c08 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <updateRTCBackupReg+0x50>)
 8001c9e:	6819      	ldr	r1, [r3, #0]
 8001ca0:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <updateRTCBackupReg+0x44>)
 8001ca2:	78db      	ldrb	r3, [r3, #3]
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <updateRTCBackupReg+0x48>)
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f003 ffad 	bl	8005c08 <HAL_RTCEx_BKUPWrite>

}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200000b8 	.word	0x200000b8
 8001cb8:	200000a4 	.word	0x200000a4
 8001cbc:	2000014c 	.word	0x2000014c
 8001cc0:	20000030 	.word	0x20000030
 8001cc4:	20000034 	.word	0x20000034

08001cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ccc:	b672      	cpsid	i
}
 8001cce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd0:	46c0      	nop			@ (mov r8, r8)
 8001cd2:	e7fd      	b.n	8001cd0 <Error_Handler+0x8>

08001cd4 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8001cd4:	b5b0      	push	{r4, r5, r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	0005      	movs	r5, r0
 8001cdc:	000c      	movs	r4, r1
 8001cde:	0010      	movs	r0, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	1dbb      	adds	r3, r7, #6
 8001ce4:	1c2a      	adds	r2, r5, #0
 8001ce6:	801a      	strh	r2, [r3, #0]
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	1c22      	adds	r2, r4, #0
 8001cec:	801a      	strh	r2, [r3, #0]
 8001cee:	1cbb      	adds	r3, r7, #2
 8001cf0:	1c02      	adds	r2, r0, #0
 8001cf2:	801a      	strh	r2, [r3, #0]
 8001cf4:	003b      	movs	r3, r7
 8001cf6:	1c0a      	adds	r2, r1, #0
 8001cf8:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001cfa:	4b7c      	ldr	r3, [pc, #496]	@ (8001eec <sevSeg_Init+0x218>)
 8001cfc:	1dba      	adds	r2, r7, #6
 8001cfe:	8812      	ldrh	r2, [r2, #0]
 8001d00:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001d02:	4b7b      	ldr	r3, [pc, #492]	@ (8001ef0 <sevSeg_Init+0x21c>)
 8001d04:	1d3a      	adds	r2, r7, #4
 8001d06:	8812      	ldrh	r2, [r2, #0]
 8001d08:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001d0a:	4b7a      	ldr	r3, [pc, #488]	@ (8001ef4 <sevSeg_Init+0x220>)
 8001d0c:	1cba      	adds	r2, r7, #2
 8001d0e:	8812      	ldrh	r2, [r2, #0]
 8001d10:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001d12:	4b79      	ldr	r3, [pc, #484]	@ (8001ef8 <sevSeg_Init+0x224>)
 8001d14:	003a      	movs	r2, r7
 8001d16:	8812      	ldrh	r2, [r2, #0]
 8001d18:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001d1a:	4a78      	ldr	r2, [pc, #480]	@ (8001efc <sevSeg_Init+0x228>)
 8001d1c:	2330      	movs	r3, #48	@ 0x30
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8001d24:	4a76      	ldr	r2, [pc, #472]	@ (8001f00 <sevSeg_Init+0x22c>)
 8001d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d28:	0010      	movs	r0, r2
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	234c      	movs	r3, #76	@ 0x4c
 8001d2e:	001a      	movs	r2, r3
 8001d30:	f005 f8f4 	bl	8006f1c <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8001d34:	4b73      	ldr	r3, [pc, #460]	@ (8001f04 <sevSeg_Init+0x230>)
 8001d36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d38:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	e00b      	b.n	8001d58 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d46:	18d3      	adds	r3, r2, r3
 8001d48:	6819      	ldr	r1, [r3, #0]
 8001d4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f08 <sevSeg_Init+0x234>)
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	0092      	lsls	r2, r2, #2
 8001d50:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3301      	adds	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	ddf0      	ble.n	8001d40 <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001f08 <sevSeg_Init+0x234>)
 8001d60:	6918      	ldr	r0, [r3, #16]
 8001d62:	4b66      	ldr	r3, [pc, #408]	@ (8001efc <sevSeg_Init+0x228>)
 8001d64:	8819      	ldrh	r1, [r3, #0]
 8001d66:	4b69      	ldr	r3, [pc, #420]	@ (8001f0c <sevSeg_Init+0x238>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	001a      	movs	r2, r3
 8001d6c:	f000 ff81 	bl	8002c72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001d70:	4b65      	ldr	r3, [pc, #404]	@ (8001f08 <sevSeg_Init+0x234>)
 8001d72:	6918      	ldr	r0, [r3, #16]
 8001d74:	4b61      	ldr	r3, [pc, #388]	@ (8001efc <sevSeg_Init+0x228>)
 8001d76:	8819      	ldrh	r1, [r3, #0]
 8001d78:	4b64      	ldr	r3, [pc, #400]	@ (8001f0c <sevSeg_Init+0x238>)
 8001d7a:	785b      	ldrb	r3, [r3, #1]
 8001d7c:	001a      	movs	r2, r3
 8001d7e:	f000 ff78 	bl	8002c72 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001d82:	4b61      	ldr	r3, [pc, #388]	@ (8001f08 <sevSeg_Init+0x234>)
 8001d84:	6898      	ldr	r0, [r3, #8]
 8001d86:	4b5b      	ldr	r3, [pc, #364]	@ (8001ef4 <sevSeg_Init+0x220>)
 8001d88:	8819      	ldrh	r1, [r3, #0]
 8001d8a:	4b60      	ldr	r3, [pc, #384]	@ (8001f0c <sevSeg_Init+0x238>)
 8001d8c:	785b      	ldrb	r3, [r3, #1]
 8001d8e:	001a      	movs	r2, r3
 8001d90:	f000 ff6f 	bl	8002c72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001d94:	4b5c      	ldr	r3, [pc, #368]	@ (8001f08 <sevSeg_Init+0x234>)
 8001d96:	6898      	ldr	r0, [r3, #8]
 8001d98:	4b56      	ldr	r3, [pc, #344]	@ (8001ef4 <sevSeg_Init+0x220>)
 8001d9a:	8819      	ldrh	r1, [r3, #0]
 8001d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8001f0c <sevSeg_Init+0x238>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	001a      	movs	r2, r3
 8001da2:	f000 ff66 	bl	8002c72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001da6:	4b58      	ldr	r3, [pc, #352]	@ (8001f08 <sevSeg_Init+0x234>)
 8001da8:	68d8      	ldr	r0, [r3, #12]
 8001daa:	4b53      	ldr	r3, [pc, #332]	@ (8001ef8 <sevSeg_Init+0x224>)
 8001dac:	8819      	ldrh	r1, [r3, #0]
 8001dae:	4b57      	ldr	r3, [pc, #348]	@ (8001f0c <sevSeg_Init+0x238>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	001a      	movs	r2, r3
 8001db4:	f000 ff5d 	bl	8002c72 <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8001db8:	2032      	movs	r0, #50	@ 0x32
 8001dba:	f000 f947 	bl	800204c <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001dbe:	2308      	movs	r3, #8
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	4a53      	ldr	r2, [pc, #332]	@ (8001f10 <sevSeg_Init+0x23c>)
 8001dc4:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e038      	b.n	8001e3e <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8001dcc:	231b      	movs	r3, #27
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	18b9      	adds	r1, r7, r2
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	188a      	adds	r2, r1, r2
 8001dd8:	7812      	ldrb	r2, [r2, #0]
 8001dda:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	e027      	b.n	8001e32 <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001de2:	4b49      	ldr	r3, [pc, #292]	@ (8001f08 <sevSeg_Init+0x234>)
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	4b41      	ldr	r3, [pc, #260]	@ (8001eec <sevSeg_Init+0x218>)
 8001de8:	8819      	ldrh	r1, [r3, #0]
 8001dea:	241b      	movs	r4, #27
 8001dec:	193b      	adds	r3, r7, r4
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	4013      	ands	r3, r2
 8001df4:	4a45      	ldr	r2, [pc, #276]	@ (8001f0c <sevSeg_Init+0x238>)
 8001df6:	5cd3      	ldrb	r3, [r2, r3]
 8001df8:	001a      	movs	r2, r3
 8001dfa:	f000 ff3a 	bl	8002c72 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001dfe:	4b42      	ldr	r3, [pc, #264]	@ (8001f08 <sevSeg_Init+0x234>)
 8001e00:	6858      	ldr	r0, [r3, #4]
 8001e02:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef0 <sevSeg_Init+0x21c>)
 8001e04:	8819      	ldrh	r1, [r3, #0]
 8001e06:	4b41      	ldr	r3, [pc, #260]	@ (8001f0c <sevSeg_Init+0x238>)
 8001e08:	785b      	ldrb	r3, [r3, #1]
 8001e0a:	001a      	movs	r2, r3
 8001e0c:	f000 ff31 	bl	8002c72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001e10:	4b3d      	ldr	r3, [pc, #244]	@ (8001f08 <sevSeg_Init+0x234>)
 8001e12:	6858      	ldr	r0, [r3, #4]
 8001e14:	4b36      	ldr	r3, [pc, #216]	@ (8001ef0 <sevSeg_Init+0x21c>)
 8001e16:	8819      	ldrh	r1, [r3, #0]
 8001e18:	4b3c      	ldr	r3, [pc, #240]	@ (8001f0c <sevSeg_Init+0x238>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	001a      	movs	r2, r3
 8001e1e:	f000 ff28 	bl	8002c72 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001e22:	193b      	adds	r3, r7, r4
 8001e24:	193a      	adds	r2, r7, r4
 8001e26:	7812      	ldrb	r2, [r2, #0]
 8001e28:	0852      	lsrs	r2, r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	2b07      	cmp	r3, #7
 8001e36:	ddd4      	ble.n	8001de2 <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	ddc3      	ble.n	8001dcc <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001e44:	4b30      	ldr	r3, [pc, #192]	@ (8001f08 <sevSeg_Init+0x234>)
 8001e46:	6898      	ldr	r0, [r3, #8]
 8001e48:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef4 <sevSeg_Init+0x220>)
 8001e4a:	8819      	ldrh	r1, [r3, #0]
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f0c <sevSeg_Init+0x238>)
 8001e4e:	785b      	ldrb	r3, [r3, #1]
 8001e50:	001a      	movs	r2, r3
 8001e52:	f000 ff0e 	bl	8002c72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001e56:	4b2c      	ldr	r3, [pc, #176]	@ (8001f08 <sevSeg_Init+0x234>)
 8001e58:	6898      	ldr	r0, [r3, #8]
 8001e5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <sevSeg_Init+0x220>)
 8001e5c:	8819      	ldrh	r1, [r3, #0]
 8001e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f0c <sevSeg_Init+0x238>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	001a      	movs	r2, r3
 8001e64:	f000 ff05 	bl	8002c72 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8001e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f004 f860 	bl	8005f30 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8001e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e72:	0018      	movs	r0, r3
 8001e74:	f004 f810 	bl	8005e98 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7e:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8001e80:	46c0      	nop			@ (mov r8, r8)
 8001e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1ad2      	subs	r2, r2, r3
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	01db      	lsls	r3, r3, #7
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d3f6      	bcc.n	8001e82 <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8001e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e96:	0018      	movs	r0, r3
 8001e98:	f004 f84a 	bl	8005f30 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <sevSeg_Init+0x234>)
 8001e9e:	6918      	ldr	r0, [r3, #16]
 8001ea0:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <sevSeg_Init+0x228>)
 8001ea2:	8819      	ldrh	r1, [r3, #0]
 8001ea4:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <sevSeg_Init+0x238>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	f000 fee2 	bl	8002c72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001eae:	4b16      	ldr	r3, [pc, #88]	@ (8001f08 <sevSeg_Init+0x234>)
 8001eb0:	6918      	ldr	r0, [r3, #16]
 8001eb2:	4b12      	ldr	r3, [pc, #72]	@ (8001efc <sevSeg_Init+0x228>)
 8001eb4:	8819      	ldrh	r1, [r3, #0]
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <sevSeg_Init+0x238>)
 8001eb8:	785b      	ldrb	r3, [r3, #1]
 8001eba:	001a      	movs	r2, r3
 8001ebc:	f000 fed9 	bl	8002c72 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <sevSeg_Init+0x234>)
 8001ec2:	6898      	ldr	r0, [r3, #8]
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <sevSeg_Init+0x220>)
 8001ec6:	8819      	ldrh	r1, [r3, #0]
 8001ec8:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <sevSeg_Init+0x238>)
 8001eca:	785b      	ldrb	r3, [r3, #1]
 8001ecc:	001a      	movs	r2, r3
 8001ece:	f000 fed0 	bl	8002c72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <sevSeg_Init+0x234>)
 8001ed4:	6898      	ldr	r0, [r3, #8]
 8001ed6:	4b07      	ldr	r3, [pc, #28]	@ (8001ef4 <sevSeg_Init+0x220>)
 8001ed8:	8819      	ldrh	r1, [r3, #0]
 8001eda:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <sevSeg_Init+0x238>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	001a      	movs	r2, r3
 8001ee0:	f000 fec7 	bl	8002c72 <HAL_GPIO_WritePin>

}
 8001ee4:	46c0      	nop			@ (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b008      	add	sp, #32
 8001eea:	bdb0      	pop	{r4, r5, r7, pc}
 8001eec:	200002d8 	.word	0x200002d8
 8001ef0:	200002da 	.word	0x200002da
 8001ef4:	200002dc 	.word	0x200002dc
 8001ef8:	200002de 	.word	0x200002de
 8001efc:	200002e0 	.word	0x200002e0
 8001f00:	200002e4 	.word	0x200002e4
 8001f04:	20000330 	.word	0x20000330
 8001f08:	20000048 	.word	0x20000048
 8001f0c:	2000005c 	.word	0x2000005c
 8001f10:	471d3700 	.word	0x471d3700

08001f14 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime) {
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	210a      	movs	r1, #10
 8001f22:	0018      	movs	r0, r3
 8001f24:	f7fe f8ee 	bl	8000104 <__udivsi3>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	240c      	movs	r4, #12
 8001f2e:	193b      	adds	r3, r7, r4
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	210a      	movs	r1, #10
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7fe f969 	bl	8000210 <__aeabi_uidivmod>
 8001f3e:	000b      	movs	r3, r1
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	193b      	adds	r3, r7, r4
 8001f44:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001f4a:	210a      	movs	r1, #10
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f7fe f8d9 	bl	8000104 <__udivsi3>
 8001f52:	0003      	movs	r3, r0
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	193b      	adds	r3, r7, r4
 8001f58:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001f5e:	210a      	movs	r1, #10
 8001f60:	0018      	movs	r0, r3
 8001f62:	f7fe f955 	bl	8000210 <__aeabi_uidivmod>
 8001f66:	000b      	movs	r3, r1
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	193b      	adds	r3, r7, r4
 8001f6c:	70da      	strb	r2, [r3, #3]

	/*
	 * If we are in PM, we should reflect this in the PM LED.
	 * This offset will update the digit 3 shift register value with the correct sequence.
	 */
	uint8_t dig3Offset = 0;
 8001f6e:	2113      	movs	r1, #19
 8001f70:	187b      	adds	r3, r7, r1
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]

	if(updateTime->TimeFormat == RTC_HOURFORMAT12_PM) {
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	78db      	ldrb	r3, [r3, #3]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d102      	bne.n	8001f84 <sevSeg_updateDigits+0x70>
		dig3Offset = 2;
 8001f7e:	187b      	adds	r3, r7, r1
 8001f80:	2202      	movs	r2, #2
 8001f82:	701a      	strb	r2, [r3, #0]
	}

	// TODO: Update alarm set decimal point here

	for(int i = 3; i >= 0; i--) {
 8001f84:	2303      	movs	r3, #3
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	e03b      	b.n	8002002 <sevSeg_updateDigits+0xee>

		sendByte = dispDigits[sendTime[i]];
 8001f8a:	230c      	movs	r3, #12
 8001f8c:	18fa      	adds	r2, r7, r3
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	18d3      	adds	r3, r2, r3
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	0019      	movs	r1, r3
 8001f96:	231f      	movs	r3, #31
 8001f98:	18fb      	adds	r3, r7, r3
 8001f9a:	4a26      	ldr	r2, [pc, #152]	@ (8002034 <sevSeg_updateDigits+0x120>)
 8001f9c:	5c52      	ldrb	r2, [r2, r1]
 8001f9e:	701a      	strb	r2, [r3, #0]

//		if(i == 0) {		// If tenth's place of hour, use special values
//			sendByte = dig3Seg[(updateTime->Hours / 10) + dig3Offset];
//		}

		for(int j = 0; j < 8; j++) {
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	e027      	b.n	8001ff6 <sevSeg_updateDigits+0xe2>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[(sendByte & 1)]);
 8001fa6:	4b24      	ldr	r3, [pc, #144]	@ (8002038 <sevSeg_updateDigits+0x124>)
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	4b24      	ldr	r3, [pc, #144]	@ (800203c <sevSeg_updateDigits+0x128>)
 8001fac:	8819      	ldrh	r1, [r3, #0]
 8001fae:	241f      	movs	r4, #31
 8001fb0:	193b      	adds	r3, r7, r4
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	4a21      	ldr	r2, [pc, #132]	@ (8002040 <sevSeg_updateDigits+0x12c>)
 8001fba:	5cd3      	ldrb	r3, [r2, r3]
 8001fbc:	001a      	movs	r2, r3
 8001fbe:	f000 fe58 	bl	8002c72 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <sevSeg_updateDigits+0x124>)
 8001fc4:	6858      	ldr	r0, [r3, #4]
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8002044 <sevSeg_updateDigits+0x130>)
 8001fc8:	8819      	ldrh	r1, [r3, #0]
 8001fca:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <sevSeg_updateDigits+0x12c>)
 8001fcc:	785b      	ldrb	r3, [r3, #1]
 8001fce:	001a      	movs	r2, r3
 8001fd0:	f000 fe4f 	bl	8002c72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001fd4:	4b18      	ldr	r3, [pc, #96]	@ (8002038 <sevSeg_updateDigits+0x124>)
 8001fd6:	6858      	ldr	r0, [r3, #4]
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002044 <sevSeg_updateDigits+0x130>)
 8001fda:	8819      	ldrh	r1, [r3, #0]
 8001fdc:	4b18      	ldr	r3, [pc, #96]	@ (8002040 <sevSeg_updateDigits+0x12c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	001a      	movs	r2, r3
 8001fe2:	f000 fe46 	bl	8002c72 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001fe6:	193b      	adds	r3, r7, r4
 8001fe8:	193a      	adds	r2, r7, r4
 8001fea:	7812      	ldrb	r2, [r2, #0]
 8001fec:	0852      	lsrs	r2, r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b07      	cmp	r3, #7
 8001ffa:	ddd4      	ble.n	8001fa6 <sevSeg_updateDigits+0x92>
	for(int i = 3; i >= 0; i--) {
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	dac0      	bge.n	8001f8a <sevSeg_updateDigits+0x76>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <sevSeg_updateDigits+0x124>)
 800200a:	6898      	ldr	r0, [r3, #8]
 800200c:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <sevSeg_updateDigits+0x134>)
 800200e:	8819      	ldrh	r1, [r3, #0]
 8002010:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <sevSeg_updateDigits+0x12c>)
 8002012:	785b      	ldrb	r3, [r3, #1]
 8002014:	001a      	movs	r2, r3
 8002016:	f000 fe2c 	bl	8002c72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800201a:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <sevSeg_updateDigits+0x124>)
 800201c:	6898      	ldr	r0, [r3, #8]
 800201e:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <sevSeg_updateDigits+0x134>)
 8002020:	8819      	ldrh	r1, [r3, #0]
 8002022:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <sevSeg_updateDigits+0x12c>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	001a      	movs	r2, r3
 8002028:	f000 fe23 	bl	8002c72 <HAL_GPIO_WritePin>

	return;
 800202c:	46c0      	nop			@ (mov r8, r8)

}
 800202e:	46bd      	mov	sp, r7
 8002030:	b009      	add	sp, #36	@ 0x24
 8002032:	bd90      	pop	{r4, r7, pc}
 8002034:	08006f70 	.word	0x08006f70
 8002038:	20000048 	.word	0x20000048
 800203c:	200002d8 	.word	0x200002d8
 8002040:	2000005c 	.word	0x2000005c
 8002044:	200002da 	.word	0x200002da
 8002048:	200002dc 	.word	0x200002dc

0800204c <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	0002      	movs	r2, r0
 8002054:	1dbb      	adds	r3, r7, #6
 8002056:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8002058:	4b20      	ldr	r3, [pc, #128]	@ (80020dc <sevSeg_setIntensity+0x90>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <sevSeg_setIntensity+0x20>
 8002060:	4b1f      	ldr	r3, [pc, #124]	@ (80020e0 <sevSeg_setIntensity+0x94>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	1dba      	adds	r2, r7, #6
 8002066:	8812      	ldrh	r2, [r2, #0]
 8002068:	635a      	str	r2, [r3, #52]	@ 0x34
 800206a:	e02c      	b.n	80020c6 <sevSeg_setIntensity+0x7a>
 800206c:	4b1b      	ldr	r3, [pc, #108]	@ (80020dc <sevSeg_setIntensity+0x90>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b04      	cmp	r3, #4
 8002072:	d105      	bne.n	8002080 <sevSeg_setIntensity+0x34>
 8002074:	4b1a      	ldr	r3, [pc, #104]	@ (80020e0 <sevSeg_setIntensity+0x94>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	1dbb      	adds	r3, r7, #6
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	6393      	str	r3, [r2, #56]	@ 0x38
 800207e:	e022      	b.n	80020c6 <sevSeg_setIntensity+0x7a>
 8002080:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <sevSeg_setIntensity+0x90>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d105      	bne.n	8002094 <sevSeg_setIntensity+0x48>
 8002088:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <sevSeg_setIntensity+0x94>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	1dbb      	adds	r3, r7, #6
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002092:	e018      	b.n	80020c6 <sevSeg_setIntensity+0x7a>
 8002094:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <sevSeg_setIntensity+0x90>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b0c      	cmp	r3, #12
 800209a:	d105      	bne.n	80020a8 <sevSeg_setIntensity+0x5c>
 800209c:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <sevSeg_setIntensity+0x94>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	1dbb      	adds	r3, r7, #6
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020a6:	e00e      	b.n	80020c6 <sevSeg_setIntensity+0x7a>
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <sevSeg_setIntensity+0x90>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	d105      	bne.n	80020bc <sevSeg_setIntensity+0x70>
 80020b0:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <sevSeg_setIntensity+0x94>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	1dbb      	adds	r3, r7, #6
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ba:	e004      	b.n	80020c6 <sevSeg_setIntensity+0x7a>
 80020bc:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <sevSeg_setIntensity+0x94>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	1dbb      	adds	r3, r7, #6
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 80020c6:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <sevSeg_setIntensity+0x90>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <sevSeg_setIntensity+0x94>)
 80020cc:	0011      	movs	r1, r2
 80020ce:	0018      	movs	r0, r3
 80020d0:	f004 f82e 	bl	8006130 <HAL_TIM_PWM_Start>

}
 80020d4:	46c0      	nop			@ (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000330 	.word	0x20000330
 80020e0:	200002e4 	.word	0x200002e4

080020e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <HAL_MspInit+0x54>)
 80020ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020ee:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <HAL_MspInit+0x54>)
 80020f0:	2101      	movs	r1, #1
 80020f2:	430a      	orrs	r2, r1
 80020f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80020f6:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <HAL_MspInit+0x54>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	2201      	movs	r2, #1
 80020fc:	4013      	ands	r3, r2
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b0d      	ldr	r3, [pc, #52]	@ (8002138 <HAL_MspInit+0x54>)
 8002104:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002106:	4b0c      	ldr	r3, [pc, #48]	@ (8002138 <HAL_MspInit+0x54>)
 8002108:	2180      	movs	r1, #128	@ 0x80
 800210a:	0549      	lsls	r1, r1, #21
 800210c:	430a      	orrs	r2, r1
 800210e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002110:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <HAL_MspInit+0x54>)
 8002112:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002114:	2380      	movs	r3, #128	@ 0x80
 8002116:	055b      	lsls	r3, r3, #21
 8002118:	4013      	ands	r3, r2
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	2004      	movs	r0, #4
 8002124:	f000 fbf2 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002128:	2004      	movs	r0, #4
 800212a:	f000 fc04 	bl	8002936 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800212e:	46c0      	nop			@ (mov r8, r8)
 8002130:	46bd      	mov	sp, r7
 8002132:	b002      	add	sp, #8
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			@ (mov r8, r8)
 8002138:	40021000 	.word	0x40021000

0800213c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b095      	sub	sp, #84	@ 0x54
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	233c      	movs	r3, #60	@ 0x3c
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	0018      	movs	r0, r3
 800214a:	2314      	movs	r3, #20
 800214c:	001a      	movs	r2, r3
 800214e:	2100      	movs	r1, #0
 8002150:	f004 feb8 	bl	8006ec4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002154:	2414      	movs	r4, #20
 8002156:	193b      	adds	r3, r7, r4
 8002158:	0018      	movs	r0, r3
 800215a:	2328      	movs	r3, #40	@ 0x28
 800215c:	001a      	movs	r2, r3
 800215e:	2100      	movs	r1, #0
 8002160:	f004 feb0 	bl	8006ec4 <memset>
  if(hi2c->Instance==I2C1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a22      	ldr	r2, [pc, #136]	@ (80021f4 <HAL_I2C_MspInit+0xb8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d13d      	bne.n	80021ea <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800216e:	193b      	adds	r3, r7, r4
 8002170:	2220      	movs	r2, #32
 8002172:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002174:	193b      	adds	r3, r7, r4
 8002176:	2200      	movs	r2, #0
 8002178:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800217a:	193b      	adds	r3, r7, r4
 800217c:	0018      	movs	r0, r3
 800217e:	f002 fa4b 	bl	8004618 <HAL_RCCEx_PeriphCLKConfig>
 8002182:	1e03      	subs	r3, r0, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002186:	f7ff fd9f 	bl	8001cc8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	4b1b      	ldr	r3, [pc, #108]	@ (80021f8 <HAL_I2C_MspInit+0xbc>)
 800218c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800218e:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <HAL_I2C_MspInit+0xbc>)
 8002190:	2102      	movs	r1, #2
 8002192:	430a      	orrs	r2, r1
 8002194:	635a      	str	r2, [r3, #52]	@ 0x34
 8002196:	4b18      	ldr	r3, [pc, #96]	@ (80021f8 <HAL_I2C_MspInit+0xbc>)
 8002198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800219a:	2202      	movs	r2, #2
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021a2:	213c      	movs	r1, #60	@ 0x3c
 80021a4:	187b      	adds	r3, r7, r1
 80021a6:	22c0      	movs	r2, #192	@ 0xc0
 80021a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021aa:	187b      	adds	r3, r7, r1
 80021ac:	2212      	movs	r2, #18
 80021ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	187b      	adds	r3, r7, r1
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	187b      	adds	r3, r7, r1
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80021bc:	187b      	adds	r3, r7, r1
 80021be:	2206      	movs	r2, #6
 80021c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c2:	187b      	adds	r3, r7, r1
 80021c4:	4a0d      	ldr	r2, [pc, #52]	@ (80021fc <HAL_I2C_MspInit+0xc0>)
 80021c6:	0019      	movs	r1, r3
 80021c8:	0010      	movs	r0, r2
 80021ca:	f000 fbd1 	bl	8002970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_I2C_MspInit+0xbc>)
 80021d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <HAL_I2C_MspInit+0xbc>)
 80021d4:	2180      	movs	r1, #128	@ 0x80
 80021d6:	0389      	lsls	r1, r1, #14
 80021d8:	430a      	orrs	r2, r1
 80021da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021dc:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <HAL_I2C_MspInit+0xbc>)
 80021de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021e0:	2380      	movs	r3, #128	@ 0x80
 80021e2:	039b      	lsls	r3, r3, #14
 80021e4:	4013      	ands	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021ea:	46c0      	nop			@ (mov r8, r8)
 80021ec:	46bd      	mov	sp, r7
 80021ee:	b015      	add	sp, #84	@ 0x54
 80021f0:	bd90      	pop	{r4, r7, pc}
 80021f2:	46c0      	nop			@ (mov r8, r8)
 80021f4:	40005400 	.word	0x40005400
 80021f8:	40021000 	.word	0x40021000
 80021fc:	50000400 	.word	0x50000400

08002200 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b095      	sub	sp, #84	@ 0x54
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	233c      	movs	r3, #60	@ 0x3c
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	0018      	movs	r0, r3
 800220e:	2314      	movs	r3, #20
 8002210:	001a      	movs	r2, r3
 8002212:	2100      	movs	r1, #0
 8002214:	f004 fe56 	bl	8006ec4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002218:	2414      	movs	r4, #20
 800221a:	193b      	adds	r3, r7, r4
 800221c:	0018      	movs	r0, r3
 800221e:	2328      	movs	r3, #40	@ 0x28
 8002220:	001a      	movs	r2, r3
 8002222:	2100      	movs	r1, #0
 8002224:	f004 fe4e 	bl	8006ec4 <memset>
  if(hi2s->Instance==SPI1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a34      	ldr	r2, [pc, #208]	@ (8002300 <HAL_I2S_MspInit+0x100>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d161      	bne.n	80022f6 <HAL_I2S_MspInit+0xf6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8002232:	193b      	adds	r3, r7, r4
 8002234:	2280      	movs	r2, #128	@ 0x80
 8002236:	0112      	lsls	r2, r2, #4
 8002238:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 800223a:	193b      	adds	r3, r7, r4
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002240:	193b      	adds	r3, r7, r4
 8002242:	0018      	movs	r0, r3
 8002244:	f002 f9e8 	bl	8004618 <HAL_RCCEx_PeriphCLKConfig>
 8002248:	1e03      	subs	r3, r0, #0
 800224a:	d001      	beq.n	8002250 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800224c:	f7ff fd3c 	bl	8001cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002250:	4b2c      	ldr	r3, [pc, #176]	@ (8002304 <HAL_I2S_MspInit+0x104>)
 8002252:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002254:	4b2b      	ldr	r3, [pc, #172]	@ (8002304 <HAL_I2S_MspInit+0x104>)
 8002256:	2180      	movs	r1, #128	@ 0x80
 8002258:	0149      	lsls	r1, r1, #5
 800225a:	430a      	orrs	r2, r1
 800225c:	641a      	str	r2, [r3, #64]	@ 0x40
 800225e:	4b29      	ldr	r3, [pc, #164]	@ (8002304 <HAL_I2S_MspInit+0x104>)
 8002260:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002262:	2380      	movs	r3, #128	@ 0x80
 8002264:	015b      	lsls	r3, r3, #5
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226c:	4b25      	ldr	r3, [pc, #148]	@ (8002304 <HAL_I2S_MspInit+0x104>)
 800226e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002270:	4b24      	ldr	r3, [pc, #144]	@ (8002304 <HAL_I2S_MspInit+0x104>)
 8002272:	2101      	movs	r1, #1
 8002274:	430a      	orrs	r2, r1
 8002276:	635a      	str	r2, [r3, #52]	@ 0x34
 8002278:	4b22      	ldr	r3, [pc, #136]	@ (8002304 <HAL_I2S_MspInit+0x104>)
 800227a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800227c:	2201      	movs	r2, #1
 800227e:	4013      	ands	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002284:	4b1f      	ldr	r3, [pc, #124]	@ (8002304 <HAL_I2S_MspInit+0x104>)
 8002286:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002288:	4b1e      	ldr	r3, [pc, #120]	@ (8002304 <HAL_I2S_MspInit+0x104>)
 800228a:	2102      	movs	r1, #2
 800228c:	430a      	orrs	r2, r1
 800228e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002290:	4b1c      	ldr	r3, [pc, #112]	@ (8002304 <HAL_I2S_MspInit+0x104>)
 8002292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002294:	2202      	movs	r2, #2
 8002296:	4013      	ands	r3, r2
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PB0     ------> I2S1_WS
    PA12 [PA10]     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 800229c:	243c      	movs	r4, #60	@ 0x3c
 800229e:	193b      	adds	r3, r7, r4
 80022a0:	4a19      	ldr	r2, [pc, #100]	@ (8002308 <HAL_I2S_MspInit+0x108>)
 80022a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	193b      	adds	r3, r7, r4
 80022a6:	2202      	movs	r2, #2
 80022a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	193b      	adds	r3, r7, r4
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	193b      	adds	r3, r7, r4
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80022b6:	193b      	adds	r3, r7, r4
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022bc:	193a      	adds	r2, r7, r4
 80022be:	23a0      	movs	r3, #160	@ 0xa0
 80022c0:	05db      	lsls	r3, r3, #23
 80022c2:	0011      	movs	r1, r2
 80022c4:	0018      	movs	r0, r3
 80022c6:	f000 fb53 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022ca:	0021      	movs	r1, r4
 80022cc:	187b      	adds	r3, r7, r1
 80022ce:	2201      	movs	r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	187b      	adds	r3, r7, r1
 80022d4:	2202      	movs	r2, #2
 80022d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	187b      	adds	r3, r7, r1
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	187b      	adds	r3, r7, r1
 80022e0:	2200      	movs	r2, #0
 80022e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80022e4:	187b      	adds	r3, r7, r1
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ea:	187b      	adds	r3, r7, r1
 80022ec:	4a07      	ldr	r2, [pc, #28]	@ (800230c <HAL_I2S_MspInit+0x10c>)
 80022ee:	0019      	movs	r1, r3
 80022f0:	0010      	movs	r0, r2
 80022f2:	f000 fb3d 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022f6:	46c0      	nop			@ (mov r8, r8)
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b015      	add	sp, #84	@ 0x54
 80022fc:	bd90      	pop	{r4, r7, pc}
 80022fe:	46c0      	nop			@ (mov r8, r8)
 8002300:	40013000 	.word	0x40013000
 8002304:	40021000 	.word	0x40021000
 8002308:	00001002 	.word	0x00001002
 800230c:	50000400 	.word	0x50000400

08002310 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b08f      	sub	sp, #60	@ 0x3c
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002318:	2410      	movs	r4, #16
 800231a:	193b      	adds	r3, r7, r4
 800231c:	0018      	movs	r0, r3
 800231e:	2328      	movs	r3, #40	@ 0x28
 8002320:	001a      	movs	r2, r3
 8002322:	2100      	movs	r1, #0
 8002324:	f004 fdce 	bl	8006ec4 <memset>
  if(hrtc->Instance==RTC)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a19      	ldr	r2, [pc, #100]	@ (8002394 <HAL_RTC_MspInit+0x84>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d12c      	bne.n	800238c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002332:	193b      	adds	r3, r7, r4
 8002334:	2280      	movs	r2, #128	@ 0x80
 8002336:	0292      	lsls	r2, r2, #10
 8002338:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800233a:	193b      	adds	r3, r7, r4
 800233c:	2280      	movs	r2, #128	@ 0x80
 800233e:	0052      	lsls	r2, r2, #1
 8002340:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002342:	193b      	adds	r3, r7, r4
 8002344:	0018      	movs	r0, r3
 8002346:	f002 f967 	bl	8004618 <HAL_RCCEx_PeriphCLKConfig>
 800234a:	1e03      	subs	r3, r0, #0
 800234c:	d001      	beq.n	8002352 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800234e:	f7ff fcbb 	bl	8001cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002352:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <HAL_RTC_MspInit+0x88>)
 8002354:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002356:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <HAL_RTC_MspInit+0x88>)
 8002358:	2180      	movs	r1, #128	@ 0x80
 800235a:	0209      	lsls	r1, r1, #8
 800235c:	430a      	orrs	r2, r1
 800235e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002360:	4b0d      	ldr	r3, [pc, #52]	@ (8002398 <HAL_RTC_MspInit+0x88>)
 8002362:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002364:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <HAL_RTC_MspInit+0x88>)
 8002366:	2180      	movs	r1, #128	@ 0x80
 8002368:	00c9      	lsls	r1, r1, #3
 800236a:	430a      	orrs	r2, r1
 800236c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800236e:	4b0a      	ldr	r3, [pc, #40]	@ (8002398 <HAL_RTC_MspInit+0x88>)
 8002370:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4013      	ands	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	2100      	movs	r1, #0
 8002380:	2002      	movs	r0, #2
 8002382:	f000 fac3 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8002386:	2002      	movs	r0, #2
 8002388:	f000 fad5 	bl	8002936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800238c:	46c0      	nop			@ (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b00f      	add	sp, #60	@ 0x3c
 8002392:	bd90      	pop	{r4, r7, pc}
 8002394:	40002800 	.word	0x40002800
 8002398:	40021000 	.word	0x40021000

0800239c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b08b      	sub	sp, #44	@ 0x2c
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	2414      	movs	r4, #20
 80023a6:	193b      	adds	r3, r7, r4
 80023a8:	0018      	movs	r0, r3
 80023aa:	2314      	movs	r3, #20
 80023ac:	001a      	movs	r2, r3
 80023ae:	2100      	movs	r1, #0
 80023b0:	f004 fd88 	bl	8006ec4 <memset>
  if(hspi->Instance==SPI2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a26      	ldr	r2, [pc, #152]	@ (8002454 <HAL_SPI_MspInit+0xb8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d146      	bne.n	800244c <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023be:	4b26      	ldr	r3, [pc, #152]	@ (8002458 <HAL_SPI_MspInit+0xbc>)
 80023c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023c2:	4b25      	ldr	r3, [pc, #148]	@ (8002458 <HAL_SPI_MspInit+0xbc>)
 80023c4:	2180      	movs	r1, #128	@ 0x80
 80023c6:	01c9      	lsls	r1, r1, #7
 80023c8:	430a      	orrs	r2, r1
 80023ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023cc:	4b22      	ldr	r3, [pc, #136]	@ (8002458 <HAL_SPI_MspInit+0xbc>)
 80023ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023d0:	2380      	movs	r3, #128	@ 0x80
 80023d2:	01db      	lsls	r3, r3, #7
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	4b1f      	ldr	r3, [pc, #124]	@ (8002458 <HAL_SPI_MspInit+0xbc>)
 80023dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023de:	4b1e      	ldr	r3, [pc, #120]	@ (8002458 <HAL_SPI_MspInit+0xbc>)
 80023e0:	2101      	movs	r1, #1
 80023e2:	430a      	orrs	r2, r1
 80023e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80023e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002458 <HAL_SPI_MspInit+0xbc>)
 80023e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ea:	2201      	movs	r2, #1
 80023ec:	4013      	ands	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80023f2:	193b      	adds	r3, r7, r4
 80023f4:	2209      	movs	r2, #9
 80023f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f8:	193b      	adds	r3, r7, r4
 80023fa:	2202      	movs	r2, #2
 80023fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	193b      	adds	r3, r7, r4
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	193b      	adds	r3, r7, r4
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800240a:	193b      	adds	r3, r7, r4
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002410:	193a      	adds	r2, r7, r4
 8002412:	23a0      	movs	r3, #160	@ 0xa0
 8002414:	05db      	lsls	r3, r3, #23
 8002416:	0011      	movs	r1, r2
 8002418:	0018      	movs	r0, r3
 800241a:	f000 faa9 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800241e:	0021      	movs	r1, r4
 8002420:	187b      	adds	r3, r7, r1
 8002422:	2210      	movs	r2, #16
 8002424:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	187b      	adds	r3, r7, r1
 8002428:	2202      	movs	r2, #2
 800242a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	187b      	adds	r3, r7, r1
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	187b      	adds	r3, r7, r1
 8002434:	2200      	movs	r2, #0
 8002436:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002438:	187b      	adds	r3, r7, r1
 800243a:	2201      	movs	r2, #1
 800243c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	187a      	adds	r2, r7, r1
 8002440:	23a0      	movs	r3, #160	@ 0xa0
 8002442:	05db      	lsls	r3, r3, #23
 8002444:	0011      	movs	r1, r2
 8002446:	0018      	movs	r0, r3
 8002448:	f000 fa92 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800244c:	46c0      	nop			@ (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b00b      	add	sp, #44	@ 0x2c
 8002452:	bd90      	pop	{r4, r7, pc}
 8002454:	40003800 	.word	0x40003800
 8002458:	40021000 	.word	0x40021000

0800245c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	@ 0x80
 800246a:	05db      	lsls	r3, r3, #23
 800246c:	429a      	cmp	r2, r3
 800246e:	d10b      	bne.n	8002488 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002470:	4b07      	ldr	r3, [pc, #28]	@ (8002490 <HAL_TIM_PWM_MspInit+0x34>)
 8002472:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002474:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <HAL_TIM_PWM_MspInit+0x34>)
 8002476:	2101      	movs	r1, #1
 8002478:	430a      	orrs	r2, r1
 800247a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800247c:	4b04      	ldr	r3, [pc, #16]	@ (8002490 <HAL_TIM_PWM_MspInit+0x34>)
 800247e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002480:	2201      	movs	r2, #1
 8002482:	4013      	ands	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002488:	46c0      	nop			@ (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	b004      	add	sp, #16
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021000 	.word	0x40021000

08002494 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a18      	ldr	r2, [pc, #96]	@ (8002504 <HAL_TIM_Base_MspInit+0x70>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d10e      	bne.n	80024c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80024a6:	4b18      	ldr	r3, [pc, #96]	@ (8002508 <HAL_TIM_Base_MspInit+0x74>)
 80024a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024aa:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <HAL_TIM_Base_MspInit+0x74>)
 80024ac:	2180      	movs	r1, #128	@ 0x80
 80024ae:	0209      	lsls	r1, r1, #8
 80024b0:	430a      	orrs	r2, r1
 80024b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80024b4:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <HAL_TIM_Base_MspInit+0x74>)
 80024b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024b8:	2380      	movs	r3, #128	@ 0x80
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	4013      	ands	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80024c2:	e01a      	b.n	80024fa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a10      	ldr	r2, [pc, #64]	@ (800250c <HAL_TIM_Base_MspInit+0x78>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d115      	bne.n	80024fa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80024ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <HAL_TIM_Base_MspInit+0x74>)
 80024d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002508 <HAL_TIM_Base_MspInit+0x74>)
 80024d4:	2180      	movs	r1, #128	@ 0x80
 80024d6:	0289      	lsls	r1, r1, #10
 80024d8:	430a      	orrs	r2, r1
 80024da:	641a      	str	r2, [r3, #64]	@ 0x40
 80024dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002508 <HAL_TIM_Base_MspInit+0x74>)
 80024de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024e0:	2380      	movs	r3, #128	@ 0x80
 80024e2:	029b      	lsls	r3, r3, #10
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	2015      	movs	r0, #21
 80024f0:	f000 fa0c 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80024f4:	2015      	movs	r0, #21
 80024f6:	f000 fa1e 	bl	8002936 <HAL_NVIC_EnableIRQ>
}
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b004      	add	sp, #16
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	40002000 	.word	0x40002000
 8002508:	40021000 	.word	0x40021000
 800250c:	40014400 	.word	0x40014400

08002510 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b089      	sub	sp, #36	@ 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	240c      	movs	r4, #12
 800251a:	193b      	adds	r3, r7, r4
 800251c:	0018      	movs	r0, r3
 800251e:	2314      	movs	r3, #20
 8002520:	001a      	movs	r2, r3
 8002522:	2100      	movs	r1, #0
 8002524:	f004 fcce 	bl	8006ec4 <memset>
  if(htim->Instance==TIM2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2380      	movs	r3, #128	@ 0x80
 800252e:	05db      	lsls	r3, r3, #23
 8002530:	429a      	cmp	r2, r3
 8002532:	d121      	bne.n	8002578 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002534:	4b12      	ldr	r3, [pc, #72]	@ (8002580 <HAL_TIM_MspPostInit+0x70>)
 8002536:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002538:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <HAL_TIM_MspPostInit+0x70>)
 800253a:	2104      	movs	r1, #4
 800253c:	430a      	orrs	r2, r1
 800253e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002540:	4b0f      	ldr	r3, [pc, #60]	@ (8002580 <HAL_TIM_MspPostInit+0x70>)
 8002542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002544:	2204      	movs	r2, #4
 8002546:	4013      	ands	r3, r2
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_SHIFT_nOE_Pin;
 800254c:	0021      	movs	r1, r4
 800254e:	187b      	adds	r3, r7, r1
 8002550:	2240      	movs	r2, #64	@ 0x40
 8002552:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	187b      	adds	r3, r7, r1
 8002556:	2202      	movs	r2, #2
 8002558:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	187b      	adds	r3, r7, r1
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002560:	187b      	adds	r3, r7, r1
 8002562:	2200      	movs	r2, #0
 8002564:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002566:	187b      	adds	r3, r7, r1
 8002568:	2202      	movs	r2, #2
 800256a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_SHIFT_nOE_GPIO_Port, &GPIO_InitStruct);
 800256c:	187b      	adds	r3, r7, r1
 800256e:	4a05      	ldr	r2, [pc, #20]	@ (8002584 <HAL_TIM_MspPostInit+0x74>)
 8002570:	0019      	movs	r1, r3
 8002572:	0010      	movs	r0, r2
 8002574:	f000 f9fc 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002578:	46c0      	nop			@ (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b009      	add	sp, #36	@ 0x24
 800257e:	bd90      	pop	{r4, r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	50000800 	.word	0x50000800

08002588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800258c:	46c0      	nop			@ (mov r8, r8)
 800258e:	e7fd      	b.n	800258c <NMI_Handler+0x4>

08002590 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002594:	46c0      	nop			@ (mov r8, r8)
 8002596:	e7fd      	b.n	8002594 <HardFault_Handler+0x4>

08002598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800259c:	46c0      	nop			@ (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a6:	46c0      	nop			@ (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b0:	f000 f8e4 	bl	800277c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b4:	46c0      	nop			@ (mov r8, r8)
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80025c0:	4b03      	ldr	r3, [pc, #12]	@ (80025d0 <RTC_TAMP_IRQHandler+0x14>)
 80025c2:	0018      	movs	r0, r3
 80025c4:	f003 f93e 	bl	8005844 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80025c8:	46c0      	nop			@ (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	2000014c 	.word	0x2000014c

080025d4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80025d8:	46c0      	nop			@ (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_EXTI_Pin);
 80025e2:	2001      	movs	r0, #1
 80025e4:	f000 fb7e 	bl	8002ce4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_EXTI_Pin);
 80025e8:	2002      	movs	r0, #2
 80025ea:	f000 fb7b 	bl	8002ce4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80025ee:	46c0      	nop			@ (mov r8, r8)
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_EXTI_Pin);
 80025f8:	2004      	movs	r0, #4
 80025fa:	f000 fb73 	bl	8002ce4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_EXTI_Pin);
 80025fe:	2008      	movs	r0, #8
 8002600:	f000 fb70 	bl	8002ce4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002604:	46c0      	nop			@ (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_SWITCH_EXTI_Pin);
 800260e:	2010      	movs	r0, #16
 8002610:	f000 fb68 	bl	8002ce4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAPTOUCH_CHANGE_EXTI_Pin);
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	0018      	movs	r0, r3
 800261a:	f000 fb63 	bl	8002ce4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_EXTI_Pin);
 800261e:	2380      	movs	r3, #128	@ 0x80
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	0018      	movs	r0, r3
 8002624:	f000 fb5e 	bl	8002ce4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002628:	46c0      	nop			@ (mov r8, r8)
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002634:	4b03      	ldr	r3, [pc, #12]	@ (8002644 <TIM16_IRQHandler+0x14>)
 8002636:	0018      	movs	r0, r3
 8002638:	f003 fe58 	bl	80062ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800263c:	46c0      	nop			@ (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	20000274 	.word	0x20000274

08002648 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800264c:	46c0      	nop			@ (mov r8, r8)
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002654:	480d      	ldr	r0, [pc, #52]	@ (800268c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002656:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002658:	f7ff fff6 	bl	8002648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800265c:	480c      	ldr	r0, [pc, #48]	@ (8002690 <LoopForever+0x6>)
  ldr r1, =_edata
 800265e:	490d      	ldr	r1, [pc, #52]	@ (8002694 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002660:	4a0d      	ldr	r2, [pc, #52]	@ (8002698 <LoopForever+0xe>)
  movs r3, #0
 8002662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002664:	e002      	b.n	800266c <LoopCopyDataInit>

08002666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800266a:	3304      	adds	r3, #4

0800266c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800266c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800266e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002670:	d3f9      	bcc.n	8002666 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002672:	4a0a      	ldr	r2, [pc, #40]	@ (800269c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002674:	4c0a      	ldr	r4, [pc, #40]	@ (80026a0 <LoopForever+0x16>)
  movs r3, #0
 8002676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002678:	e001      	b.n	800267e <LoopFillZerobss>

0800267a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800267a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800267c:	3204      	adds	r2, #4

0800267e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800267e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002680:	d3fb      	bcc.n	800267a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002682:	f004 fc27 	bl	8006ed4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002686:	f7fe f9f9 	bl	8000a7c <main>

0800268a <LoopForever>:

LoopForever:
  b LoopForever
 800268a:	e7fe      	b.n	800268a <LoopForever>
  ldr   r0, =_estack
 800268c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002694:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002698:	08007038 	.word	0x08007038
  ldr r2, =_sbss
 800269c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80026a0:	20000338 	.word	0x20000338

080026a4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026a4:	e7fe      	b.n	80026a4 <ADC1_IRQHandler>
	...

080026a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026ae:	1dfb      	adds	r3, r7, #7
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b4:	4b0b      	ldr	r3, [pc, #44]	@ (80026e4 <HAL_Init+0x3c>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <HAL_Init+0x3c>)
 80026ba:	2180      	movs	r1, #128	@ 0x80
 80026bc:	0049      	lsls	r1, r1, #1
 80026be:	430a      	orrs	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026c2:	2003      	movs	r0, #3
 80026c4:	f000 f810 	bl	80026e8 <HAL_InitTick>
 80026c8:	1e03      	subs	r3, r0, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80026cc:	1dfb      	adds	r3, r7, #7
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	e001      	b.n	80026d8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80026d4:	f7ff fd06 	bl	80020e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026d8:	1dfb      	adds	r3, r7, #7
 80026da:	781b      	ldrb	r3, [r3, #0]
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40022000 	.word	0x40022000

080026e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e8:	b590      	push	{r4, r7, lr}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026f0:	230f      	movs	r3, #15
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80026f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <HAL_InitTick+0x88>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d02b      	beq.n	8002758 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002700:	4b1c      	ldr	r3, [pc, #112]	@ (8002774 <HAL_InitTick+0x8c>)
 8002702:	681c      	ldr	r4, [r3, #0]
 8002704:	4b1a      	ldr	r3, [pc, #104]	@ (8002770 <HAL_InitTick+0x88>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	0019      	movs	r1, r3
 800270a:	23fa      	movs	r3, #250	@ 0xfa
 800270c:	0098      	lsls	r0, r3, #2
 800270e:	f7fd fcf9 	bl	8000104 <__udivsi3>
 8002712:	0003      	movs	r3, r0
 8002714:	0019      	movs	r1, r3
 8002716:	0020      	movs	r0, r4
 8002718:	f7fd fcf4 	bl	8000104 <__udivsi3>
 800271c:	0003      	movs	r3, r0
 800271e:	0018      	movs	r0, r3
 8002720:	f000 f919 	bl	8002956 <HAL_SYSTICK_Config>
 8002724:	1e03      	subs	r3, r0, #0
 8002726:	d112      	bne.n	800274e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b03      	cmp	r3, #3
 800272c:	d80a      	bhi.n	8002744 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	2301      	movs	r3, #1
 8002732:	425b      	negs	r3, r3
 8002734:	2200      	movs	r2, #0
 8002736:	0018      	movs	r0, r3
 8002738:	f000 f8e8 	bl	800290c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800273c:	4b0e      	ldr	r3, [pc, #56]	@ (8002778 <HAL_InitTick+0x90>)
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	e00d      	b.n	8002760 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002744:	230f      	movs	r3, #15
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	2201      	movs	r2, #1
 800274a:	701a      	strb	r2, [r3, #0]
 800274c:	e008      	b.n	8002760 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800274e:	230f      	movs	r3, #15
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
 8002756:	e003      	b.n	8002760 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002758:	230f      	movs	r3, #15
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002760:	230f      	movs	r3, #15
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	781b      	ldrb	r3, [r3, #0]
}
 8002766:	0018      	movs	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	b005      	add	sp, #20
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	20000068 	.word	0x20000068
 8002774:	20000060 	.word	0x20000060
 8002778:	20000064 	.word	0x20000064

0800277c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002780:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <HAL_IncTick+0x1c>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	001a      	movs	r2, r3
 8002786:	4b05      	ldr	r3, [pc, #20]	@ (800279c <HAL_IncTick+0x20>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	18d2      	adds	r2, r2, r3
 800278c:	4b03      	ldr	r3, [pc, #12]	@ (800279c <HAL_IncTick+0x20>)
 800278e:	601a      	str	r2, [r3, #0]
}
 8002790:	46c0      	nop			@ (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	20000068 	.word	0x20000068
 800279c:	20000334 	.word	0x20000334

080027a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  return uwTick;
 80027a4:	4b02      	ldr	r3, [pc, #8]	@ (80027b0 <HAL_GetTick+0x10>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			@ (mov r8, r8)
 80027b0:	20000334 	.word	0x20000334

080027b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	0002      	movs	r2, r0
 80027bc:	1dfb      	adds	r3, r7, #7
 80027be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027c0:	1dfb      	adds	r3, r7, #7
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80027c6:	d809      	bhi.n	80027dc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c8:	1dfb      	adds	r3, r7, #7
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	001a      	movs	r2, r3
 80027ce:	231f      	movs	r3, #31
 80027d0:	401a      	ands	r2, r3
 80027d2:	4b04      	ldr	r3, [pc, #16]	@ (80027e4 <__NVIC_EnableIRQ+0x30>)
 80027d4:	2101      	movs	r1, #1
 80027d6:	4091      	lsls	r1, r2
 80027d8:	000a      	movs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80027dc:	46c0      	nop			@ (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	e000e100 	.word	0xe000e100

080027e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	0002      	movs	r2, r0
 80027f0:	6039      	str	r1, [r7, #0]
 80027f2:	1dfb      	adds	r3, r7, #7
 80027f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027f6:	1dfb      	adds	r3, r7, #7
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80027fc:	d828      	bhi.n	8002850 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027fe:	4a2f      	ldr	r2, [pc, #188]	@ (80028bc <__NVIC_SetPriority+0xd4>)
 8002800:	1dfb      	adds	r3, r7, #7
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	b25b      	sxtb	r3, r3
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	33c0      	adds	r3, #192	@ 0xc0
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	589b      	ldr	r3, [r3, r2]
 800280e:	1dfa      	adds	r2, r7, #7
 8002810:	7812      	ldrb	r2, [r2, #0]
 8002812:	0011      	movs	r1, r2
 8002814:	2203      	movs	r2, #3
 8002816:	400a      	ands	r2, r1
 8002818:	00d2      	lsls	r2, r2, #3
 800281a:	21ff      	movs	r1, #255	@ 0xff
 800281c:	4091      	lsls	r1, r2
 800281e:	000a      	movs	r2, r1
 8002820:	43d2      	mvns	r2, r2
 8002822:	401a      	ands	r2, r3
 8002824:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	019b      	lsls	r3, r3, #6
 800282a:	22ff      	movs	r2, #255	@ 0xff
 800282c:	401a      	ands	r2, r3
 800282e:	1dfb      	adds	r3, r7, #7
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	0018      	movs	r0, r3
 8002834:	2303      	movs	r3, #3
 8002836:	4003      	ands	r3, r0
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800283c:	481f      	ldr	r0, [pc, #124]	@ (80028bc <__NVIC_SetPriority+0xd4>)
 800283e:	1dfb      	adds	r3, r7, #7
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	b25b      	sxtb	r3, r3
 8002844:	089b      	lsrs	r3, r3, #2
 8002846:	430a      	orrs	r2, r1
 8002848:	33c0      	adds	r3, #192	@ 0xc0
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800284e:	e031      	b.n	80028b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002850:	4a1b      	ldr	r2, [pc, #108]	@ (80028c0 <__NVIC_SetPriority+0xd8>)
 8002852:	1dfb      	adds	r3, r7, #7
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	0019      	movs	r1, r3
 8002858:	230f      	movs	r3, #15
 800285a:	400b      	ands	r3, r1
 800285c:	3b08      	subs	r3, #8
 800285e:	089b      	lsrs	r3, r3, #2
 8002860:	3306      	adds	r3, #6
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	18d3      	adds	r3, r2, r3
 8002866:	3304      	adds	r3, #4
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	1dfa      	adds	r2, r7, #7
 800286c:	7812      	ldrb	r2, [r2, #0]
 800286e:	0011      	movs	r1, r2
 8002870:	2203      	movs	r2, #3
 8002872:	400a      	ands	r2, r1
 8002874:	00d2      	lsls	r2, r2, #3
 8002876:	21ff      	movs	r1, #255	@ 0xff
 8002878:	4091      	lsls	r1, r2
 800287a:	000a      	movs	r2, r1
 800287c:	43d2      	mvns	r2, r2
 800287e:	401a      	ands	r2, r3
 8002880:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	019b      	lsls	r3, r3, #6
 8002886:	22ff      	movs	r2, #255	@ 0xff
 8002888:	401a      	ands	r2, r3
 800288a:	1dfb      	adds	r3, r7, #7
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	0018      	movs	r0, r3
 8002890:	2303      	movs	r3, #3
 8002892:	4003      	ands	r3, r0
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002898:	4809      	ldr	r0, [pc, #36]	@ (80028c0 <__NVIC_SetPriority+0xd8>)
 800289a:	1dfb      	adds	r3, r7, #7
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	001c      	movs	r4, r3
 80028a0:	230f      	movs	r3, #15
 80028a2:	4023      	ands	r3, r4
 80028a4:	3b08      	subs	r3, #8
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	430a      	orrs	r2, r1
 80028aa:	3306      	adds	r3, #6
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	18c3      	adds	r3, r0, r3
 80028b0:	3304      	adds	r3, #4
 80028b2:	601a      	str	r2, [r3, #0]
}
 80028b4:	46c0      	nop			@ (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b003      	add	sp, #12
 80028ba:	bd90      	pop	{r4, r7, pc}
 80028bc:	e000e100 	.word	0xe000e100
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	1e5a      	subs	r2, r3, #1
 80028d0:	2380      	movs	r3, #128	@ 0x80
 80028d2:	045b      	lsls	r3, r3, #17
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d301      	bcc.n	80028dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d8:	2301      	movs	r3, #1
 80028da:	e010      	b.n	80028fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <SysTick_Config+0x44>)
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	3a01      	subs	r2, #1
 80028e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028e4:	2301      	movs	r3, #1
 80028e6:	425b      	negs	r3, r3
 80028e8:	2103      	movs	r1, #3
 80028ea:	0018      	movs	r0, r3
 80028ec:	f7ff ff7c 	bl	80027e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f0:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <SysTick_Config+0x44>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028f6:	4b04      	ldr	r3, [pc, #16]	@ (8002908 <SysTick_Config+0x44>)
 80028f8:	2207      	movs	r2, #7
 80028fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	0018      	movs	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	b002      	add	sp, #8
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			@ (mov r8, r8)
 8002908:	e000e010 	.word	0xe000e010

0800290c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	210f      	movs	r1, #15
 8002918:	187b      	adds	r3, r7, r1
 800291a:	1c02      	adds	r2, r0, #0
 800291c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	187b      	adds	r3, r7, r1
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	b25b      	sxtb	r3, r3
 8002926:	0011      	movs	r1, r2
 8002928:	0018      	movs	r0, r3
 800292a:	f7ff ff5d 	bl	80027e8 <__NVIC_SetPriority>
}
 800292e:	46c0      	nop			@ (mov r8, r8)
 8002930:	46bd      	mov	sp, r7
 8002932:	b004      	add	sp, #16
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	0002      	movs	r2, r0
 800293e:	1dfb      	adds	r3, r7, #7
 8002940:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002942:	1dfb      	adds	r3, r7, #7
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	b25b      	sxtb	r3, r3
 8002948:	0018      	movs	r0, r3
 800294a:	f7ff ff33 	bl	80027b4 <__NVIC_EnableIRQ>
}
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	46bd      	mov	sp, r7
 8002952:	b002      	add	sp, #8
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	0018      	movs	r0, r3
 8002962:	f7ff ffaf 	bl	80028c4 <SysTick_Config>
 8002966:	0003      	movs	r3, r0
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	b002      	add	sp, #8
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297e:	e147      	b.n	8002c10 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2101      	movs	r1, #1
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4091      	lsls	r1, r2
 800298a:	000a      	movs	r2, r1
 800298c:	4013      	ands	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d100      	bne.n	8002998 <HAL_GPIO_Init+0x28>
 8002996:	e138      	b.n	8002c0a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2203      	movs	r2, #3
 800299e:	4013      	ands	r3, r2
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d005      	beq.n	80029b0 <HAL_GPIO_Init+0x40>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2203      	movs	r2, #3
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d130      	bne.n	8002a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	2203      	movs	r2, #3
 80029bc:	409a      	lsls	r2, r3
 80029be:	0013      	movs	r3, r2
 80029c0:	43da      	mvns	r2, r3
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	409a      	lsls	r2, r3
 80029d2:	0013      	movs	r3, r2
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029e6:	2201      	movs	r2, #1
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	409a      	lsls	r2, r3
 80029ec:	0013      	movs	r3, r2
 80029ee:	43da      	mvns	r2, r3
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	091b      	lsrs	r3, r3, #4
 80029fc:	2201      	movs	r2, #1
 80029fe:	401a      	ands	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	409a      	lsls	r2, r3
 8002a04:	0013      	movs	r3, r2
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2203      	movs	r2, #3
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d017      	beq.n	8002a4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	2203      	movs	r2, #3
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4013      	ands	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	0013      	movs	r3, r2
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2203      	movs	r2, #3
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d123      	bne.n	8002aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	08da      	lsrs	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3208      	adds	r2, #8
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	58d3      	ldr	r3, [r2, r3]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2207      	movs	r2, #7
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	220f      	movs	r2, #15
 8002a72:	409a      	lsls	r2, r3
 8002a74:	0013      	movs	r3, r2
 8002a76:	43da      	mvns	r2, r3
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2107      	movs	r1, #7
 8002a86:	400b      	ands	r3, r1
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	0013      	movs	r3, r2
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	08da      	lsrs	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3208      	adds	r2, #8
 8002a9c:	0092      	lsls	r2, r2, #2
 8002a9e:	6939      	ldr	r1, [r7, #16]
 8002aa0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	2203      	movs	r2, #3
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	0013      	movs	r3, r2
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2203      	movs	r2, #3
 8002ac0:	401a      	ands	r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	0013      	movs	r3, r2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	23c0      	movs	r3, #192	@ 0xc0
 8002adc:	029b      	lsls	r3, r3, #10
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d100      	bne.n	8002ae4 <HAL_GPIO_Init+0x174>
 8002ae2:	e092      	b.n	8002c0a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002ae4:	4a50      	ldr	r2, [pc, #320]	@ (8002c28 <HAL_GPIO_Init+0x2b8>)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	3318      	adds	r3, #24
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	589b      	ldr	r3, [r3, r2]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2203      	movs	r2, #3
 8002af6:	4013      	ands	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	220f      	movs	r2, #15
 8002afc:	409a      	lsls	r2, r3
 8002afe:	0013      	movs	r3, r2
 8002b00:	43da      	mvns	r2, r3
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	23a0      	movs	r3, #160	@ 0xa0
 8002b0c:	05db      	lsls	r3, r3, #23
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d013      	beq.n	8002b3a <HAL_GPIO_Init+0x1ca>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a45      	ldr	r2, [pc, #276]	@ (8002c2c <HAL_GPIO_Init+0x2bc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00d      	beq.n	8002b36 <HAL_GPIO_Init+0x1c6>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a44      	ldr	r2, [pc, #272]	@ (8002c30 <HAL_GPIO_Init+0x2c0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d007      	beq.n	8002b32 <HAL_GPIO_Init+0x1c2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a43      	ldr	r2, [pc, #268]	@ (8002c34 <HAL_GPIO_Init+0x2c4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d101      	bne.n	8002b2e <HAL_GPIO_Init+0x1be>
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e006      	b.n	8002b3c <HAL_GPIO_Init+0x1cc>
 8002b2e:	2305      	movs	r3, #5
 8002b30:	e004      	b.n	8002b3c <HAL_GPIO_Init+0x1cc>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e002      	b.n	8002b3c <HAL_GPIO_Init+0x1cc>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_GPIO_Init+0x1cc>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	2103      	movs	r1, #3
 8002b40:	400a      	ands	r2, r1
 8002b42:	00d2      	lsls	r2, r2, #3
 8002b44:	4093      	lsls	r3, r2
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002b4c:	4936      	ldr	r1, [pc, #216]	@ (8002c28 <HAL_GPIO_Init+0x2b8>)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	089b      	lsrs	r3, r3, #2
 8002b52:	3318      	adds	r3, #24
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b5a:	4b33      	ldr	r3, [pc, #204]	@ (8002c28 <HAL_GPIO_Init+0x2b8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	43da      	mvns	r2, r3
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	2380      	movs	r3, #128	@ 0x80
 8002b70:	035b      	lsls	r3, r3, #13
 8002b72:	4013      	ands	r3, r2
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002c28 <HAL_GPIO_Init+0x2b8>)
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002b84:	4b28      	ldr	r3, [pc, #160]	@ (8002c28 <HAL_GPIO_Init+0x2b8>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	43da      	mvns	r2, r3
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	2380      	movs	r3, #128	@ 0x80
 8002b9a:	039b      	lsls	r3, r3, #14
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c28 <HAL_GPIO_Init+0x2b8>)
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bae:	4a1e      	ldr	r2, [pc, #120]	@ (8002c28 <HAL_GPIO_Init+0x2b8>)
 8002bb0:	2384      	movs	r3, #132	@ 0x84
 8002bb2:	58d3      	ldr	r3, [r2, r3]
 8002bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	43da      	mvns	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	2380      	movs	r3, #128	@ 0x80
 8002bc6:	029b      	lsls	r3, r3, #10
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bd4:	4914      	ldr	r1, [pc, #80]	@ (8002c28 <HAL_GPIO_Init+0x2b8>)
 8002bd6:	2284      	movs	r2, #132	@ 0x84
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002bdc:	4a12      	ldr	r2, [pc, #72]	@ (8002c28 <HAL_GPIO_Init+0x2b8>)
 8002bde:	2380      	movs	r3, #128	@ 0x80
 8002be0:	58d3      	ldr	r3, [r2, r3]
 8002be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	43da      	mvns	r2, r3
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4013      	ands	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	025b      	lsls	r3, r3, #9
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c02:	4909      	ldr	r1, [pc, #36]	@ (8002c28 <HAL_GPIO_Init+0x2b8>)
 8002c04:	2280      	movs	r2, #128	@ 0x80
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	40da      	lsrs	r2, r3
 8002c18:	1e13      	subs	r3, r2, #0
 8002c1a:	d000      	beq.n	8002c1e <HAL_GPIO_Init+0x2ae>
 8002c1c:	e6b0      	b.n	8002980 <HAL_GPIO_Init+0x10>
  }
}
 8002c1e:	46c0      	nop			@ (mov r8, r8)
 8002c20:	46c0      	nop			@ (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b006      	add	sp, #24
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40021800 	.word	0x40021800
 8002c2c:	50000400 	.word	0x50000400
 8002c30:	50000800 	.word	0x50000800
 8002c34:	50000c00 	.word	0x50000c00

08002c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	000a      	movs	r2, r1
 8002c42:	1cbb      	adds	r3, r7, #2
 8002c44:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	1cba      	adds	r2, r7, #2
 8002c4c:	8812      	ldrh	r2, [r2, #0]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d004      	beq.n	8002c5c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002c52:	230f      	movs	r3, #15
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e003      	b.n	8002c64 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c5c:	230f      	movs	r3, #15
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002c64:	230f      	movs	r3, #15
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	781b      	ldrb	r3, [r3, #0]
}
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b004      	add	sp, #16
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	0008      	movs	r0, r1
 8002c7c:	0011      	movs	r1, r2
 8002c7e:	1cbb      	adds	r3, r7, #2
 8002c80:	1c02      	adds	r2, r0, #0
 8002c82:	801a      	strh	r2, [r3, #0]
 8002c84:	1c7b      	adds	r3, r7, #1
 8002c86:	1c0a      	adds	r2, r1, #0
 8002c88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c8a:	1c7b      	adds	r3, r7, #1
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c92:	1cbb      	adds	r3, r7, #2
 8002c94:	881a      	ldrh	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c9a:	e003      	b.n	8002ca4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c9c:	1cbb      	adds	r3, r7, #2
 8002c9e:	881a      	ldrh	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ca4:	46c0      	nop			@ (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b002      	add	sp, #8
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	000a      	movs	r2, r1
 8002cb6:	1cbb      	adds	r3, r7, #2
 8002cb8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cc0:	1cbb      	adds	r3, r7, #2
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	041a      	lsls	r2, r3, #16
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	1cb9      	adds	r1, r7, #2
 8002cd0:	8809      	ldrh	r1, [r1, #0]
 8002cd2:	400b      	ands	r3, r1
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	619a      	str	r2, [r3, #24]
}
 8002cda:	46c0      	nop			@ (mov r8, r8)
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b004      	add	sp, #16
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	0002      	movs	r2, r0
 8002cec:	1dbb      	adds	r3, r7, #6
 8002cee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002cf0:	4b10      	ldr	r3, [pc, #64]	@ (8002d34 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	1dba      	adds	r2, r7, #6
 8002cf6:	8812      	ldrh	r2, [r2, #0]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d008      	beq.n	8002d0e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8002d34 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002cfe:	1dba      	adds	r2, r7, #6
 8002d00:	8812      	ldrh	r2, [r2, #0]
 8002d02:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002d04:	1dbb      	adds	r3, r7, #6
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f000 f815 	bl	8002d38 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002d0e:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	1dba      	adds	r2, r7, #6
 8002d14:	8812      	ldrh	r2, [r2, #0]
 8002d16:	4013      	ands	r3, r2
 8002d18:	d008      	beq.n	8002d2c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002d1a:	4b06      	ldr	r3, [pc, #24]	@ (8002d34 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002d1c:	1dba      	adds	r2, r7, #6
 8002d1e:	8812      	ldrh	r2, [r2, #0]
 8002d20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002d22:	1dbb      	adds	r3, r7, #6
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7fe fcaa 	bl	8001680 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002d2c:	46c0      	nop			@ (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b002      	add	sp, #8
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021800 	.word	0x40021800

08002d38 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	0002      	movs	r2, r0
 8002d40:	1dbb      	adds	r3, r7, #6
 8002d42:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002d44:	46c0      	nop			@ (mov r8, r8)
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b002      	add	sp, #8
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e08f      	b.n	8002e7e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2241      	movs	r2, #65	@ 0x41
 8002d62:	5c9b      	ldrb	r3, [r3, r2]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d107      	bne.n	8002d7a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2240      	movs	r2, #64	@ 0x40
 8002d6e:	2100      	movs	r1, #0
 8002d70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7ff f9e1 	bl	800213c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2241      	movs	r2, #65	@ 0x41
 8002d7e:	2124      	movs	r1, #36	@ 0x24
 8002d80:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	438a      	bics	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	493b      	ldr	r1, [pc, #236]	@ (8002e88 <HAL_I2C_Init+0x13c>)
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4938      	ldr	r1, [pc, #224]	@ (8002e8c <HAL_I2C_Init+0x140>)
 8002dac:	400a      	ands	r2, r1
 8002dae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d108      	bne.n	8002dca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2180      	movs	r1, #128	@ 0x80
 8002dc2:	0209      	lsls	r1, r1, #8
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	e007      	b.n	8002dda <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2184      	movs	r1, #132	@ 0x84
 8002dd4:	0209      	lsls	r1, r1, #8
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d109      	bne.n	8002df6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2180      	movs	r1, #128	@ 0x80
 8002dee:	0109      	lsls	r1, r1, #4
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	e007      	b.n	8002e06 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4923      	ldr	r1, [pc, #140]	@ (8002e90 <HAL_I2C_Init+0x144>)
 8002e02:	400a      	ands	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4920      	ldr	r1, [pc, #128]	@ (8002e94 <HAL_I2C_Init+0x148>)
 8002e12:	430a      	orrs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	491a      	ldr	r1, [pc, #104]	@ (8002e8c <HAL_I2C_Init+0x140>)
 8002e22:	400a      	ands	r2, r1
 8002e24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69d9      	ldr	r1, [r3, #28]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1a      	ldr	r2, [r3, #32]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2241      	movs	r2, #65	@ 0x41
 8002e6a:	2120      	movs	r1, #32
 8002e6c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2242      	movs	r2, #66	@ 0x42
 8002e78:	2100      	movs	r1, #0
 8002e7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b002      	add	sp, #8
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	f0ffffff 	.word	0xf0ffffff
 8002e8c:	ffff7fff 	.word	0xffff7fff
 8002e90:	fffff7ff 	.word	0xfffff7ff
 8002e94:	02008000 	.word	0x02008000

08002e98 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b089      	sub	sp, #36	@ 0x24
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	0008      	movs	r0, r1
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	230a      	movs	r3, #10
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	1c02      	adds	r2, r0, #0
 8002eac:	801a      	strh	r2, [r3, #0]
 8002eae:	2308      	movs	r3, #8
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	1c0a      	adds	r2, r1, #0
 8002eb4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2241      	movs	r2, #65	@ 0x41
 8002eba:	5c9b      	ldrb	r3, [r3, r2]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d000      	beq.n	8002ec4 <HAL_I2C_Master_Transmit+0x2c>
 8002ec2:	e10a      	b.n	80030da <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2240      	movs	r2, #64	@ 0x40
 8002ec8:	5c9b      	ldrb	r3, [r3, r2]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_I2C_Master_Transmit+0x3a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e104      	b.n	80030dc <HAL_I2C_Master_Transmit+0x244>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2240      	movs	r2, #64	@ 0x40
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002eda:	f7ff fc61 	bl	80027a0 <HAL_GetTick>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ee2:	2380      	movs	r3, #128	@ 0x80
 8002ee4:	0219      	lsls	r1, r3, #8
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2319      	movs	r3, #25
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f000 fa26 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8002ef4:	1e03      	subs	r3, r0, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0ef      	b.n	80030dc <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2241      	movs	r2, #65	@ 0x41
 8002f00:	2121      	movs	r1, #33	@ 0x21
 8002f02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2242      	movs	r2, #66	@ 0x42
 8002f08:	2110      	movs	r1, #16
 8002f0a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	18ba      	adds	r2, r7, r2
 8002f1e:	8812      	ldrh	r2, [r2, #0]
 8002f20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2bff      	cmp	r3, #255	@ 0xff
 8002f30:	d906      	bls.n	8002f40 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	22ff      	movs	r2, #255	@ 0xff
 8002f36:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002f38:	2380      	movs	r3, #128	@ 0x80
 8002f3a:	045b      	lsls	r3, r3, #17
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	e007      	b.n	8002f50 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002f4a:	2380      	movs	r3, #128	@ 0x80
 8002f4c:	049b      	lsls	r3, r3, #18
 8002f4e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d027      	beq.n	8002fa8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	781a      	ldrb	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	697c      	ldr	r4, [r7, #20]
 8002f94:	230a      	movs	r3, #10
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	8819      	ldrh	r1, [r3, #0]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	4b51      	ldr	r3, [pc, #324]	@ (80030e4 <HAL_I2C_Master_Transmit+0x24c>)
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	0023      	movs	r3, r4
 8002fa2:	f000 fc45 	bl	8003830 <I2C_TransferConfig>
 8002fa6:	e06f      	b.n	8003088 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	697c      	ldr	r4, [r7, #20]
 8002fb0:	230a      	movs	r3, #10
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	8819      	ldrh	r1, [r3, #0]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	4b4a      	ldr	r3, [pc, #296]	@ (80030e4 <HAL_I2C_Master_Transmit+0x24c>)
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	0023      	movs	r3, r4
 8002fbe:	f000 fc37 	bl	8003830 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002fc2:	e061      	b.n	8003088 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f000 fa10 	bl	80033f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fd0:	1e03      	subs	r3, r0, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e081      	b.n	80030dc <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d03a      	beq.n	8003088 <HAL_I2C_Master_Transmit+0x1f0>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003016:	2b00      	cmp	r3, #0
 8003018:	d136      	bne.n	8003088 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800301a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	0013      	movs	r3, r2
 8003024:	2200      	movs	r2, #0
 8003026:	2180      	movs	r1, #128	@ 0x80
 8003028:	f000 f98a 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 800302c:	1e03      	subs	r3, r0, #0
 800302e:	d001      	beq.n	8003034 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e053      	b.n	80030dc <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003038:	b29b      	uxth	r3, r3
 800303a:	2bff      	cmp	r3, #255	@ 0xff
 800303c:	d911      	bls.n	8003062 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	22ff      	movs	r2, #255	@ 0xff
 8003042:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003048:	b2da      	uxtb	r2, r3
 800304a:	2380      	movs	r3, #128	@ 0x80
 800304c:	045c      	lsls	r4, r3, #17
 800304e:	230a      	movs	r3, #10
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	8819      	ldrh	r1, [r3, #0]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	2300      	movs	r3, #0
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	0023      	movs	r3, r4
 800305c:	f000 fbe8 	bl	8003830 <I2C_TransferConfig>
 8003060:	e012      	b.n	8003088 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003070:	b2da      	uxtb	r2, r3
 8003072:	2380      	movs	r3, #128	@ 0x80
 8003074:	049c      	lsls	r4, r3, #18
 8003076:	230a      	movs	r3, #10
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	8819      	ldrh	r1, [r3, #0]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	2300      	movs	r3, #0
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	0023      	movs	r3, r4
 8003084:	f000 fbd4 	bl	8003830 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d198      	bne.n	8002fc4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	0018      	movs	r0, r3
 800309a:	f000 f9ef 	bl	800347c <I2C_WaitOnSTOPFlagUntilTimeout>
 800309e:	1e03      	subs	r3, r0, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e01a      	b.n	80030dc <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2220      	movs	r2, #32
 80030ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	490b      	ldr	r1, [pc, #44]	@ (80030e8 <HAL_I2C_Master_Transmit+0x250>)
 80030ba:	400a      	ands	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2241      	movs	r2, #65	@ 0x41
 80030c2:	2120      	movs	r1, #32
 80030c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2242      	movs	r2, #66	@ 0x42
 80030ca:	2100      	movs	r1, #0
 80030cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2240      	movs	r2, #64	@ 0x40
 80030d2:	2100      	movs	r1, #0
 80030d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	e000      	b.n	80030dc <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80030da:	2302      	movs	r3, #2
  }
}
 80030dc:	0018      	movs	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	b007      	add	sp, #28
 80030e2:	bd90      	pop	{r4, r7, pc}
 80030e4:	80002000 	.word	0x80002000
 80030e8:	fe00e800 	.word	0xfe00e800

080030ec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b089      	sub	sp, #36	@ 0x24
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	0008      	movs	r0, r1
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	0019      	movs	r1, r3
 80030fa:	230a      	movs	r3, #10
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	1c02      	adds	r2, r0, #0
 8003100:	801a      	strh	r2, [r3, #0]
 8003102:	2308      	movs	r3, #8
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	1c0a      	adds	r2, r1, #0
 8003108:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2241      	movs	r2, #65	@ 0x41
 800310e:	5c9b      	ldrb	r3, [r3, r2]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b20      	cmp	r3, #32
 8003114:	d000      	beq.n	8003118 <HAL_I2C_Master_Receive+0x2c>
 8003116:	e0e8      	b.n	80032ea <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2240      	movs	r2, #64	@ 0x40
 800311c:	5c9b      	ldrb	r3, [r3, r2]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_I2C_Master_Receive+0x3a>
 8003122:	2302      	movs	r3, #2
 8003124:	e0e2      	b.n	80032ec <HAL_I2C_Master_Receive+0x200>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2240      	movs	r2, #64	@ 0x40
 800312a:	2101      	movs	r1, #1
 800312c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800312e:	f7ff fb37 	bl	80027a0 <HAL_GetTick>
 8003132:	0003      	movs	r3, r0
 8003134:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003136:	2380      	movs	r3, #128	@ 0x80
 8003138:	0219      	lsls	r1, r3, #8
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	2319      	movs	r3, #25
 8003142:	2201      	movs	r2, #1
 8003144:	f000 f8fc 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8003148:	1e03      	subs	r3, r0, #0
 800314a:	d001      	beq.n	8003150 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0cd      	b.n	80032ec <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2241      	movs	r2, #65	@ 0x41
 8003154:	2122      	movs	r1, #34	@ 0x22
 8003156:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2242      	movs	r2, #66	@ 0x42
 800315c:	2110      	movs	r1, #16
 800315e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2208      	movs	r2, #8
 8003170:	18ba      	adds	r2, r7, r2
 8003172:	8812      	ldrh	r2, [r2, #0]
 8003174:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2bff      	cmp	r3, #255	@ 0xff
 8003184:	d911      	bls.n	80031aa <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	22ff      	movs	r2, #255	@ 0xff
 800318a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003190:	b2da      	uxtb	r2, r3
 8003192:	2380      	movs	r3, #128	@ 0x80
 8003194:	045c      	lsls	r4, r3, #17
 8003196:	230a      	movs	r3, #10
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	8819      	ldrh	r1, [r3, #0]
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	4b55      	ldr	r3, [pc, #340]	@ (80032f4 <HAL_I2C_Master_Receive+0x208>)
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	0023      	movs	r3, r4
 80031a4:	f000 fb44 	bl	8003830 <I2C_TransferConfig>
 80031a8:	e076      	b.n	8003298 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	2380      	movs	r3, #128	@ 0x80
 80031bc:	049c      	lsls	r4, r3, #18
 80031be:	230a      	movs	r3, #10
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	8819      	ldrh	r1, [r3, #0]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	4b4b      	ldr	r3, [pc, #300]	@ (80032f4 <HAL_I2C_Master_Receive+0x208>)
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	0023      	movs	r3, r4
 80031cc:	f000 fb30 	bl	8003830 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80031d0:	e062      	b.n	8003298 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	0018      	movs	r0, r3
 80031da:	f000 f993 	bl	8003504 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031de:	1e03      	subs	r3, r0, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e082      	b.n	80032ec <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d03a      	beq.n	8003298 <HAL_I2C_Master_Receive+0x1ac>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003226:	2b00      	cmp	r3, #0
 8003228:	d136      	bne.n	8003298 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800322a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	0013      	movs	r3, r2
 8003234:	2200      	movs	r2, #0
 8003236:	2180      	movs	r1, #128	@ 0x80
 8003238:	f000 f882 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 800323c:	1e03      	subs	r3, r0, #0
 800323e:	d001      	beq.n	8003244 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e053      	b.n	80032ec <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	2bff      	cmp	r3, #255	@ 0xff
 800324c:	d911      	bls.n	8003272 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	22ff      	movs	r2, #255	@ 0xff
 8003252:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003258:	b2da      	uxtb	r2, r3
 800325a:	2380      	movs	r3, #128	@ 0x80
 800325c:	045c      	lsls	r4, r3, #17
 800325e:	230a      	movs	r3, #10
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	8819      	ldrh	r1, [r3, #0]
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	2300      	movs	r3, #0
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	0023      	movs	r3, r4
 800326c:	f000 fae0 	bl	8003830 <I2C_TransferConfig>
 8003270:	e012      	b.n	8003298 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003280:	b2da      	uxtb	r2, r3
 8003282:	2380      	movs	r3, #128	@ 0x80
 8003284:	049c      	lsls	r4, r3, #18
 8003286:	230a      	movs	r3, #10
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	8819      	ldrh	r1, [r3, #0]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	2300      	movs	r3, #0
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	0023      	movs	r3, r4
 8003294:	f000 facc 	bl	8003830 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d197      	bne.n	80031d2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f000 f8e7 	bl	800347c <I2C_WaitOnSTOPFlagUntilTimeout>
 80032ae:	1e03      	subs	r3, r0, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e01a      	b.n	80032ec <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2220      	movs	r2, #32
 80032bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	490b      	ldr	r1, [pc, #44]	@ (80032f8 <HAL_I2C_Master_Receive+0x20c>)
 80032ca:	400a      	ands	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2241      	movs	r2, #65	@ 0x41
 80032d2:	2120      	movs	r1, #32
 80032d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2242      	movs	r2, #66	@ 0x42
 80032da:	2100      	movs	r1, #0
 80032dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2240      	movs	r2, #64	@ 0x40
 80032e2:	2100      	movs	r1, #0
 80032e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e000      	b.n	80032ec <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80032ea:	2302      	movs	r3, #2
  }
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b007      	add	sp, #28
 80032f2:	bd90      	pop	{r4, r7, pc}
 80032f4:	80002400 	.word	0x80002400
 80032f8:	fe00e800 	.word	0xfe00e800

080032fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2202      	movs	r2, #2
 800330c:	4013      	ands	r3, r2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d103      	bne.n	800331a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2200      	movs	r2, #0
 8003318:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	2201      	movs	r2, #1
 8003322:	4013      	ands	r3, r2
 8003324:	2b01      	cmp	r3, #1
 8003326:	d007      	beq.n	8003338 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2101      	movs	r1, #1
 8003334:	430a      	orrs	r2, r1
 8003336:	619a      	str	r2, [r3, #24]
  }
}
 8003338:	46c0      	nop			@ (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b002      	add	sp, #8
 800333e:	bd80      	pop	{r7, pc}

08003340 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	1dfb      	adds	r3, r7, #7
 800334e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003350:	e03a      	b.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	6839      	ldr	r1, [r7, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	0018      	movs	r0, r3
 800335a:	f000 f971 	bl	8003640 <I2C_IsErrorOccurred>
 800335e:	1e03      	subs	r3, r0, #0
 8003360:	d001      	beq.n	8003366 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e040      	b.n	80033e8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	3301      	adds	r3, #1
 800336a:	d02d      	beq.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336c:	f7ff fa18 	bl	80027a0 <HAL_GetTick>
 8003370:	0002      	movs	r2, r0
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d302      	bcc.n	8003382 <I2C_WaitOnFlagUntilTimeout+0x42>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d122      	bne.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	4013      	ands	r3, r2
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	425a      	negs	r2, r3
 8003392:	4153      	adcs	r3, r2
 8003394:	b2db      	uxtb	r3, r3
 8003396:	001a      	movs	r2, r3
 8003398:	1dfb      	adds	r3, r7, #7
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d113      	bne.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a4:	2220      	movs	r2, #32
 80033a6:	431a      	orrs	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2241      	movs	r2, #65	@ 0x41
 80033b0:	2120      	movs	r1, #32
 80033b2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2242      	movs	r2, #66	@ 0x42
 80033b8:	2100      	movs	r1, #0
 80033ba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2240      	movs	r2, #64	@ 0x40
 80033c0:	2100      	movs	r1, #0
 80033c2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e00f      	b.n	80033e8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	4013      	ands	r3, r2
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	425a      	negs	r2, r3
 80033d8:	4153      	adcs	r3, r2
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	001a      	movs	r2, r3
 80033de:	1dfb      	adds	r3, r7, #7
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d0b5      	beq.n	8003352 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	0018      	movs	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b004      	add	sp, #16
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033fc:	e032      	b.n	8003464 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	0018      	movs	r0, r3
 8003406:	f000 f91b 	bl	8003640 <I2C_IsErrorOccurred>
 800340a:	1e03      	subs	r3, r0, #0
 800340c:	d001      	beq.n	8003412 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e030      	b.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	3301      	adds	r3, #1
 8003416:	d025      	beq.n	8003464 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003418:	f7ff f9c2 	bl	80027a0 <HAL_GetTick>
 800341c:	0002      	movs	r2, r0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	429a      	cmp	r2, r3
 8003426:	d302      	bcc.n	800342e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d11a      	bne.n	8003464 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2202      	movs	r2, #2
 8003436:	4013      	ands	r3, r2
 8003438:	2b02      	cmp	r3, #2
 800343a:	d013      	beq.n	8003464 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003440:	2220      	movs	r2, #32
 8003442:	431a      	orrs	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2241      	movs	r2, #65	@ 0x41
 800344c:	2120      	movs	r1, #32
 800344e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2242      	movs	r2, #66	@ 0x42
 8003454:	2100      	movs	r1, #0
 8003456:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2240      	movs	r2, #64	@ 0x40
 800345c:	2100      	movs	r1, #0
 800345e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e007      	b.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	2202      	movs	r2, #2
 800346c:	4013      	ands	r3, r2
 800346e:	2b02      	cmp	r3, #2
 8003470:	d1c5      	bne.n	80033fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bd80      	pop	{r7, pc}

0800347c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003488:	e02f      	b.n	80034ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	0018      	movs	r0, r3
 8003492:	f000 f8d5 	bl	8003640 <I2C_IsErrorOccurred>
 8003496:	1e03      	subs	r3, r0, #0
 8003498:	d001      	beq.n	800349e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e02d      	b.n	80034fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7ff f97f 	bl	80027a0 <HAL_GetTick>
 80034a2:	0002      	movs	r2, r0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d11a      	bne.n	80034ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2220      	movs	r2, #32
 80034bc:	4013      	ands	r3, r2
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d013      	beq.n	80034ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c6:	2220      	movs	r2, #32
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2241      	movs	r2, #65	@ 0x41
 80034d2:	2120      	movs	r1, #32
 80034d4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2242      	movs	r2, #66	@ 0x42
 80034da:	2100      	movs	r1, #0
 80034dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2240      	movs	r2, #64	@ 0x40
 80034e2:	2100      	movs	r1, #0
 80034e4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e007      	b.n	80034fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2220      	movs	r2, #32
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d1c8      	bne.n	800348a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	0018      	movs	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b004      	add	sp, #16
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2317      	movs	r3, #23
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003518:	e07b      	b.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	0018      	movs	r0, r3
 8003522:	f000 f88d 	bl	8003640 <I2C_IsErrorOccurred>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d003      	beq.n	8003532 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800352a:	2317      	movs	r3, #23
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	2201      	movs	r2, #1
 8003530:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2220      	movs	r2, #32
 800353a:	4013      	ands	r3, r2
 800353c:	2b20      	cmp	r3, #32
 800353e:	d140      	bne.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003540:	2117      	movs	r1, #23
 8003542:	187b      	adds	r3, r7, r1
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d13b      	bne.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	2204      	movs	r2, #4
 8003552:	4013      	ands	r3, r2
 8003554:	2b04      	cmp	r3, #4
 8003556:	d106      	bne.n	8003566 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003560:	187b      	adds	r3, r7, r1
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2210      	movs	r2, #16
 800356e:	4013      	ands	r3, r2
 8003570:	2b10      	cmp	r3, #16
 8003572:	d123      	bne.n	80035bc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2210      	movs	r2, #16
 800357a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2204      	movs	r2, #4
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2220      	movs	r2, #32
 8003588:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4929      	ldr	r1, [pc, #164]	@ (800363c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003596:	400a      	ands	r2, r1
 8003598:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2241      	movs	r2, #65	@ 0x41
 800359e:	2120      	movs	r1, #32
 80035a0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2242      	movs	r2, #66	@ 0x42
 80035a6:	2100      	movs	r1, #0
 80035a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2240      	movs	r2, #64	@ 0x40
 80035ae:	2100      	movs	r1, #0
 80035b0:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80035b2:	2317      	movs	r3, #23
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
 80035ba:	e002      	b.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80035c2:	f7ff f8ed 	bl	80027a0 <HAL_GetTick>
 80035c6:	0002      	movs	r2, r0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d11c      	bne.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80035d8:	2017      	movs	r0, #23
 80035da:	183b      	adds	r3, r7, r0
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d117      	bne.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2204      	movs	r2, #4
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d010      	beq.n	8003612 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f4:	2220      	movs	r2, #32
 80035f6:	431a      	orrs	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2241      	movs	r2, #65	@ 0x41
 8003600:	2120      	movs	r1, #32
 8003602:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2240      	movs	r2, #64	@ 0x40
 8003608:	2100      	movs	r1, #0
 800360a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800360c:	183b      	adds	r3, r7, r0
 800360e:	2201      	movs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	2204      	movs	r2, #4
 800361a:	4013      	ands	r3, r2
 800361c:	2b04      	cmp	r3, #4
 800361e:	d005      	beq.n	800362c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003620:	2317      	movs	r3, #23
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d100      	bne.n	800362c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800362a:	e776      	b.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 800362c:	2317      	movs	r3, #23
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	781b      	ldrb	r3, [r3, #0]
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b006      	add	sp, #24
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			@ (mov r8, r8)
 800363c:	fe00e800 	.word	0xfe00e800

08003640 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	@ 0x28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800364c:	2327      	movs	r3, #39	@ 0x27
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2210      	movs	r2, #16
 8003668:	4013      	ands	r3, r2
 800366a:	d100      	bne.n	800366e <I2C_IsErrorOccurred+0x2e>
 800366c:	e079      	b.n	8003762 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2210      	movs	r2, #16
 8003674:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003676:	e057      	b.n	8003728 <I2C_IsErrorOccurred+0xe8>
 8003678:	2227      	movs	r2, #39	@ 0x27
 800367a:	18bb      	adds	r3, r7, r2
 800367c:	18ba      	adds	r2, r7, r2
 800367e:	7812      	ldrb	r2, [r2, #0]
 8003680:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	3301      	adds	r3, #1
 8003686:	d04f      	beq.n	8003728 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003688:	f7ff f88a 	bl	80027a0 <HAL_GetTick>
 800368c:	0002      	movs	r2, r0
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	429a      	cmp	r2, r3
 8003696:	d302      	bcc.n	800369e <I2C_IsErrorOccurred+0x5e>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d144      	bne.n	8003728 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	2380      	movs	r3, #128	@ 0x80
 80036a6:	01db      	lsls	r3, r3, #7
 80036a8:	4013      	ands	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036ac:	2013      	movs	r0, #19
 80036ae:	183b      	adds	r3, r7, r0
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	2142      	movs	r1, #66	@ 0x42
 80036b4:	5c52      	ldrb	r2, [r2, r1]
 80036b6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	2380      	movs	r3, #128	@ 0x80
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	401a      	ands	r2, r3
 80036c4:	2380      	movs	r3, #128	@ 0x80
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d126      	bne.n	800371a <I2C_IsErrorOccurred+0xda>
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	2380      	movs	r3, #128	@ 0x80
 80036d0:	01db      	lsls	r3, r3, #7
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d021      	beq.n	800371a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80036d6:	183b      	adds	r3, r7, r0
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d01d      	beq.n	800371a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2180      	movs	r1, #128	@ 0x80
 80036ea:	01c9      	lsls	r1, r1, #7
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036f0:	f7ff f856 	bl	80027a0 <HAL_GetTick>
 80036f4:	0003      	movs	r3, r0
 80036f6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036f8:	e00f      	b.n	800371a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036fa:	f7ff f851 	bl	80027a0 <HAL_GetTick>
 80036fe:	0002      	movs	r2, r0
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b19      	cmp	r3, #25
 8003706:	d908      	bls.n	800371a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	2220      	movs	r2, #32
 800370c:	4313      	orrs	r3, r2
 800370e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003710:	2327      	movs	r3, #39	@ 0x27
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	2201      	movs	r2, #1
 8003716:	701a      	strb	r2, [r3, #0]

              break;
 8003718:	e006      	b.n	8003728 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	2220      	movs	r2, #32
 8003722:	4013      	ands	r3, r2
 8003724:	2b20      	cmp	r3, #32
 8003726:	d1e8      	bne.n	80036fa <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2220      	movs	r2, #32
 8003730:	4013      	ands	r3, r2
 8003732:	2b20      	cmp	r3, #32
 8003734:	d004      	beq.n	8003740 <I2C_IsErrorOccurred+0x100>
 8003736:	2327      	movs	r3, #39	@ 0x27
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d09b      	beq.n	8003678 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003740:	2327      	movs	r3, #39	@ 0x27
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d103      	bne.n	8003752 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2220      	movs	r2, #32
 8003750:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	2204      	movs	r2, #4
 8003756:	4313      	orrs	r3, r2
 8003758:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800375a:	2327      	movs	r3, #39	@ 0x27
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	2380      	movs	r3, #128	@ 0x80
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4013      	ands	r3, r2
 8003772:	d00c      	beq.n	800378e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	2201      	movs	r2, #1
 8003778:	4313      	orrs	r3, r2
 800377a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2280      	movs	r2, #128	@ 0x80
 8003782:	0052      	lsls	r2, r2, #1
 8003784:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003786:	2327      	movs	r3, #39	@ 0x27
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	2201      	movs	r2, #1
 800378c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	2380      	movs	r3, #128	@ 0x80
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4013      	ands	r3, r2
 8003796:	d00c      	beq.n	80037b2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	2208      	movs	r2, #8
 800379c:	4313      	orrs	r3, r2
 800379e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2280      	movs	r2, #128	@ 0x80
 80037a6:	00d2      	lsls	r2, r2, #3
 80037a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037aa:	2327      	movs	r3, #39	@ 0x27
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	2201      	movs	r2, #1
 80037b0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	2380      	movs	r3, #128	@ 0x80
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4013      	ands	r3, r2
 80037ba:	d00c      	beq.n	80037d6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	2202      	movs	r2, #2
 80037c0:	4313      	orrs	r3, r2
 80037c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2280      	movs	r2, #128	@ 0x80
 80037ca:	0092      	lsls	r2, r2, #2
 80037cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037ce:	2327      	movs	r3, #39	@ 0x27
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80037d6:	2327      	movs	r3, #39	@ 0x27
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01d      	beq.n	800381c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	0018      	movs	r0, r3
 80037e4:	f7ff fd8a 	bl	80032fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	490e      	ldr	r1, [pc, #56]	@ (800382c <I2C_IsErrorOccurred+0x1ec>)
 80037f4:	400a      	ands	r2, r1
 80037f6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	431a      	orrs	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2241      	movs	r2, #65	@ 0x41
 8003808:	2120      	movs	r1, #32
 800380a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2242      	movs	r2, #66	@ 0x42
 8003810:	2100      	movs	r1, #0
 8003812:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2240      	movs	r2, #64	@ 0x40
 8003818:	2100      	movs	r1, #0
 800381a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800381c:	2327      	movs	r3, #39	@ 0x27
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	781b      	ldrb	r3, [r3, #0]
}
 8003822:	0018      	movs	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	b00a      	add	sp, #40	@ 0x28
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			@ (mov r8, r8)
 800382c:	fe00e800 	.word	0xfe00e800

08003830 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003830:	b590      	push	{r4, r7, lr}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	0008      	movs	r0, r1
 800383a:	0011      	movs	r1, r2
 800383c:	607b      	str	r3, [r7, #4]
 800383e:	240a      	movs	r4, #10
 8003840:	193b      	adds	r3, r7, r4
 8003842:	1c02      	adds	r2, r0, #0
 8003844:	801a      	strh	r2, [r3, #0]
 8003846:	2009      	movs	r0, #9
 8003848:	183b      	adds	r3, r7, r0
 800384a:	1c0a      	adds	r2, r1, #0
 800384c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800384e:	193b      	adds	r3, r7, r4
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	059b      	lsls	r3, r3, #22
 8003854:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003856:	183b      	adds	r3, r7, r0
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	0419      	lsls	r1, r3, #16
 800385c:	23ff      	movs	r3, #255	@ 0xff
 800385e:	041b      	lsls	r3, r3, #16
 8003860:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003862:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386a:	4313      	orrs	r3, r2
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	085b      	lsrs	r3, r3, #1
 8003870:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800387a:	0d51      	lsrs	r1, r2, #21
 800387c:	2280      	movs	r2, #128	@ 0x80
 800387e:	00d2      	lsls	r2, r2, #3
 8003880:	400a      	ands	r2, r1
 8003882:	4907      	ldr	r1, [pc, #28]	@ (80038a0 <I2C_TransferConfig+0x70>)
 8003884:	430a      	orrs	r2, r1
 8003886:	43d2      	mvns	r2, r2
 8003888:	401a      	ands	r2, r3
 800388a:	0011      	movs	r1, r2
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003896:	46c0      	nop			@ (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b007      	add	sp, #28
 800389c:	bd90      	pop	{r4, r7, pc}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	03ff63ff 	.word	0x03ff63ff

080038a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2241      	movs	r2, #65	@ 0x41
 80038b2:	5c9b      	ldrb	r3, [r3, r2]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d138      	bne.n	800392c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2240      	movs	r2, #64	@ 0x40
 80038be:	5c9b      	ldrb	r3, [r3, r2]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e032      	b.n	800392e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2240      	movs	r2, #64	@ 0x40
 80038cc:	2101      	movs	r1, #1
 80038ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2241      	movs	r2, #65	@ 0x41
 80038d4:	2124      	movs	r1, #36	@ 0x24
 80038d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2101      	movs	r1, #1
 80038e4:	438a      	bics	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4911      	ldr	r1, [pc, #68]	@ (8003938 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80038f4:	400a      	ands	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6819      	ldr	r1, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2101      	movs	r1, #1
 8003914:	430a      	orrs	r2, r1
 8003916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2241      	movs	r2, #65	@ 0x41
 800391c:	2120      	movs	r1, #32
 800391e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2240      	movs	r2, #64	@ 0x40
 8003924:	2100      	movs	r1, #0
 8003926:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e000      	b.n	800392e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
  }
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b002      	add	sp, #8
 8003934:	bd80      	pop	{r7, pc}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	ffffefff 	.word	0xffffefff

0800393c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2241      	movs	r2, #65	@ 0x41
 800394a:	5c9b      	ldrb	r3, [r3, r2]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b20      	cmp	r3, #32
 8003950:	d139      	bne.n	80039c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2240      	movs	r2, #64	@ 0x40
 8003956:	5c9b      	ldrb	r3, [r3, r2]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800395c:	2302      	movs	r3, #2
 800395e:	e033      	b.n	80039c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2240      	movs	r2, #64	@ 0x40
 8003964:	2101      	movs	r1, #1
 8003966:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2241      	movs	r2, #65	@ 0x41
 800396c:	2124      	movs	r1, #36	@ 0x24
 800396e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2101      	movs	r1, #1
 800397c:	438a      	bics	r2, r1
 800397e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4a11      	ldr	r2, [pc, #68]	@ (80039d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800398c:	4013      	ands	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2101      	movs	r1, #1
 80039ae:	430a      	orrs	r2, r1
 80039b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2241      	movs	r2, #65	@ 0x41
 80039b6:	2120      	movs	r1, #32
 80039b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2240      	movs	r2, #64	@ 0x40
 80039be:	2100      	movs	r1, #0
 80039c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e000      	b.n	80039c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
  }
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b004      	add	sp, #16
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	fffff0ff 	.word	0xfffff0ff

080039d4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e0e5      	b.n	8003bb2 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2235      	movs	r2, #53	@ 0x35
 80039ea:	5c9b      	ldrb	r3, [r3, r2]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d107      	bne.n	8003a02 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2234      	movs	r2, #52	@ 0x34
 80039f6:	2100      	movs	r1, #0
 80039f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7fe fbff 	bl	8002200 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2235      	movs	r2, #53	@ 0x35
 8003a06:	2102      	movs	r1, #2
 8003a08:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4969      	ldr	r1, [pc, #420]	@ (8003bbc <HAL_I2S_Init+0x1e8>)
 8003a16:	400a      	ands	r2, r1
 8003a18:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d100      	bne.n	8003a2c <HAL_I2S_Init+0x58>
 8003a2a:	e076      	b.n	8003b1a <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a34:	2310      	movs	r3, #16
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e001      	b.n	8003a3e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a3a:	2320      	movs	r3, #32
 8003a3c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d802      	bhi.n	8003a4c <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8003a4c:	2380      	movs	r3, #128	@ 0x80
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	0018      	movs	r0, r3
 8003a52:	f000 ff5b 	bl	800490c <HAL_RCCEx_GetPeriphCLKFreq>
 8003a56:	0003      	movs	r3, r0
 8003a58:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	2380      	movs	r3, #128	@ 0x80
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d131      	bne.n	8003aca <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d016      	beq.n	8003a9c <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	0019      	movs	r1, r3
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7fc fb45 	bl	8000104 <__udivsi3>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	001a      	movs	r2, r3
 8003a7e:	0013      	movs	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	189b      	adds	r3, r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	001a      	movs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	0010      	movs	r0, r2
 8003a90:	f7fc fb38 	bl	8000104 <__udivsi3>
 8003a94:	0003      	movs	r3, r0
 8003a96:	3305      	adds	r3, #5
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	e02a      	b.n	8003af2 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	0019      	movs	r1, r3
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7fc fb2e 	bl	8000104 <__udivsi3>
 8003aa8:	0003      	movs	r3, r0
 8003aaa:	001a      	movs	r2, r3
 8003aac:	0013      	movs	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	189b      	adds	r3, r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	001a      	movs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	0019      	movs	r1, r3
 8003abc:	0010      	movs	r0, r2
 8003abe:	f7fc fb21 	bl	8000104 <__udivsi3>
 8003ac2:	0003      	movs	r3, r0
 8003ac4:	3305      	adds	r3, #5
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	e013      	b.n	8003af2 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aca:	6979      	ldr	r1, [r7, #20]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f7fc fb19 	bl	8000104 <__udivsi3>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	0013      	movs	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	189b      	adds	r3, r3, r2
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	001a      	movs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	0010      	movs	r0, r2
 8003ae8:	f7fc fb0c 	bl	8000104 <__udivsi3>
 8003aec:	0003      	movs	r3, r0
 8003aee:	3305      	adds	r3, #5
 8003af0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	210a      	movs	r1, #10
 8003af6:	0018      	movs	r0, r3
 8003af8:	f7fc fb04 	bl	8000104 <__udivsi3>
 8003afc:	0003      	movs	r3, r0
 8003afe:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	2201      	movs	r2, #1
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	e003      	b.n	8003b22 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d902      	bls.n	8003b2e <HAL_I2S_Init+0x15a>
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2bff      	cmp	r3, #255	@ 0xff
 8003b2c:	d907      	bls.n	8003b3e <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b32:	2210      	movs	r2, #16
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e039      	b.n	8003bb2 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	0011      	movs	r1, r2
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69fa      	ldr	r2, [r7, #28]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	4a18      	ldr	r2, [pc, #96]	@ (8003bbc <HAL_I2S_Init+0x1e8>)
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6859      	ldr	r1, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4319      	orrs	r1, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	4319      	orrs	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	430b      	orrs	r3, r1
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2180      	movs	r1, #128	@ 0x80
 8003b7a:	0109      	lsls	r1, r1, #4
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b30      	cmp	r3, #48	@ 0x30
 8003b86:	d003      	beq.n	8003b90 <HAL_I2S_Init+0x1bc>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2bb0      	cmp	r3, #176	@ 0xb0
 8003b8e:	d108      	bne.n	8003ba2 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69da      	ldr	r2, [r3, #28]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2180      	movs	r1, #128	@ 0x80
 8003b9c:	0149      	lsls	r1, r1, #5
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2235      	movs	r2, #53	@ 0x35
 8003bac:	2101      	movs	r1, #1
 8003bae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b008      	add	sp, #32
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	fffff040 	.word	0xfffff040

08003bc0 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc4:	4b04      	ldr	r3, [pc, #16]	@ (8003bd8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b03      	ldr	r3, [pc, #12]	@ (8003bd8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003bca:	2180      	movs	r1, #128	@ 0x80
 8003bcc:	0049      	lsls	r1, r1, #1
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40007000 	.word	0x40007000

08003bdc <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be0:	4b04      	ldr	r3, [pc, #16]	@ (8003bf4 <HAL_PWR_DisableBkUpAccess+0x18>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b03      	ldr	r3, [pc, #12]	@ (8003bf4 <HAL_PWR_DisableBkUpAccess+0x18>)
 8003be6:	4904      	ldr	r1, [pc, #16]	@ (8003bf8 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8003be8:	400a      	ands	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
}
 8003bec:	46c0      	nop			@ (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	46c0      	nop			@ (mov r8, r8)
 8003bf4:	40007000 	.word	0x40007000
 8003bf8:	fffffeff 	.word	0xfffffeff

08003bfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003c04:	4b19      	ldr	r3, [pc, #100]	@ (8003c6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a19      	ldr	r2, [pc, #100]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	4b17      	ldr	r3, [pc, #92]	@ (8003c6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	2380      	movs	r3, #128	@ 0x80
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d11f      	bne.n	8003c60 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003c20:	4b14      	ldr	r3, [pc, #80]	@ (8003c74 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	0013      	movs	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	189b      	adds	r3, r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4912      	ldr	r1, [pc, #72]	@ (8003c78 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f7fc fa68 	bl	8000104 <__udivsi3>
 8003c34:	0003      	movs	r3, r0
 8003c36:	3301      	adds	r3, #1
 8003c38:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c3a:	e008      	b.n	8003c4e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	e001      	b.n	8003c4e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e009      	b.n	8003c62 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c4e:	4b07      	ldr	r3, [pc, #28]	@ (8003c6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	2380      	movs	r3, #128	@ 0x80
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	401a      	ands	r2, r3
 8003c58:	2380      	movs	r3, #128	@ 0x80
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d0ed      	beq.n	8003c3c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	0018      	movs	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b004      	add	sp, #16
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	40007000 	.word	0x40007000
 8003c70:	fffff9ff 	.word	0xfffff9ff
 8003c74:	20000060 	.word	0x20000060
 8003c78:	000f4240 	.word	0x000f4240

08003c7c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003c80:	4b03      	ldr	r3, [pc, #12]	@ (8003c90 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	23e0      	movs	r3, #224	@ 0xe0
 8003c86:	01db      	lsls	r3, r3, #7
 8003c88:	4013      	ands	r3, r2
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000

08003c94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e2fe      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2201      	movs	r2, #1
 8003cac:	4013      	ands	r3, r2
 8003cae:	d100      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x1e>
 8003cb0:	e07c      	b.n	8003dac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb2:	4bc3      	ldr	r3, [pc, #780]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2238      	movs	r2, #56	@ 0x38
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cbc:	4bc0      	ldr	r3, [pc, #768]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d102      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x3e>
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d002      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d10b      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	4bb9      	ldr	r3, [pc, #740]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	2380      	movs	r3, #128	@ 0x80
 8003cde:	029b      	lsls	r3, r3, #10
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d062      	beq.n	8003daa <HAL_RCC_OscConfig+0x116>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d15e      	bne.n	8003daa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e2d9      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	2380      	movs	r3, #128	@ 0x80
 8003cf6:	025b      	lsls	r3, r3, #9
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_OscConfig+0x78>
 8003cfc:	4bb0      	ldr	r3, [pc, #704]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4baf      	ldr	r3, [pc, #700]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003d02:	2180      	movs	r1, #128	@ 0x80
 8003d04:	0249      	lsls	r1, r1, #9
 8003d06:	430a      	orrs	r2, r1
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e020      	b.n	8003d4e <HAL_RCC_OscConfig+0xba>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	23a0      	movs	r3, #160	@ 0xa0
 8003d12:	02db      	lsls	r3, r3, #11
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d10e      	bne.n	8003d36 <HAL_RCC_OscConfig+0xa2>
 8003d18:	4ba9      	ldr	r3, [pc, #676]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	4ba8      	ldr	r3, [pc, #672]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003d1e:	2180      	movs	r1, #128	@ 0x80
 8003d20:	02c9      	lsls	r1, r1, #11
 8003d22:	430a      	orrs	r2, r1
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	4ba6      	ldr	r3, [pc, #664]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4ba5      	ldr	r3, [pc, #660]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003d2c:	2180      	movs	r1, #128	@ 0x80
 8003d2e:	0249      	lsls	r1, r1, #9
 8003d30:	430a      	orrs	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	e00b      	b.n	8003d4e <HAL_RCC_OscConfig+0xba>
 8003d36:	4ba2      	ldr	r3, [pc, #648]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4ba1      	ldr	r3, [pc, #644]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003d3c:	49a1      	ldr	r1, [pc, #644]	@ (8003fc4 <HAL_RCC_OscConfig+0x330>)
 8003d3e:	400a      	ands	r2, r1
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	4b9f      	ldr	r3, [pc, #636]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4b9e      	ldr	r3, [pc, #632]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003d48:	499f      	ldr	r1, [pc, #636]	@ (8003fc8 <HAL_RCC_OscConfig+0x334>)
 8003d4a:	400a      	ands	r2, r1
 8003d4c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d014      	beq.n	8003d80 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d56:	f7fe fd23 	bl	80027a0 <HAL_GetTick>
 8003d5a:	0003      	movs	r3, r0
 8003d5c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d60:	f7fe fd1e 	bl	80027a0 <HAL_GetTick>
 8003d64:	0002      	movs	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b64      	cmp	r3, #100	@ 0x64
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e298      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d72:	4b93      	ldr	r3, [pc, #588]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	2380      	movs	r3, #128	@ 0x80
 8003d78:	029b      	lsls	r3, r3, #10
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0xcc>
 8003d7e:	e015      	b.n	8003dac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fe fd0e 	bl	80027a0 <HAL_GetTick>
 8003d84:	0003      	movs	r3, r0
 8003d86:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d8a:	f7fe fd09 	bl	80027a0 <HAL_GetTick>
 8003d8e:	0002      	movs	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b64      	cmp	r3, #100	@ 0x64
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e283      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d9c:	4b88      	ldr	r3, [pc, #544]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	2380      	movs	r3, #128	@ 0x80
 8003da2:	029b      	lsls	r3, r3, #10
 8003da4:	4013      	ands	r3, r2
 8003da6:	d1f0      	bne.n	8003d8a <HAL_RCC_OscConfig+0xf6>
 8003da8:	e000      	b.n	8003dac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003daa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2202      	movs	r2, #2
 8003db2:	4013      	ands	r3, r2
 8003db4:	d100      	bne.n	8003db8 <HAL_RCC_OscConfig+0x124>
 8003db6:	e099      	b.n	8003eec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003db8:	4b81      	ldr	r3, [pc, #516]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2238      	movs	r2, #56	@ 0x38
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dc2:	4b7f      	ldr	r3, [pc, #508]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	4013      	ands	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b10      	cmp	r3, #16
 8003dd0:	d102      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x144>
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d002      	beq.n	8003dde <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d135      	bne.n	8003e4a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dde:	4b78      	ldr	r3, [pc, #480]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	2380      	movs	r3, #128	@ 0x80
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4013      	ands	r3, r2
 8003de8:	d005      	beq.n	8003df6 <HAL_RCC_OscConfig+0x162>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e256      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df6:	4b72      	ldr	r3, [pc, #456]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4a74      	ldr	r2, [pc, #464]	@ (8003fcc <HAL_RCC_OscConfig+0x338>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	0019      	movs	r1, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	021a      	lsls	r2, r3, #8
 8003e06:	4b6e      	ldr	r3, [pc, #440]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d112      	bne.n	8003e38 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e12:	4b6b      	ldr	r3, [pc, #428]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a6e      	ldr	r2, [pc, #440]	@ (8003fd0 <HAL_RCC_OscConfig+0x33c>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	0019      	movs	r1, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	4b67      	ldr	r3, [pc, #412]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003e22:	430a      	orrs	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003e26:	4b66      	ldr	r3, [pc, #408]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	0adb      	lsrs	r3, r3, #11
 8003e2c:	2207      	movs	r2, #7
 8003e2e:	4013      	ands	r3, r2
 8003e30:	4a68      	ldr	r2, [pc, #416]	@ (8003fd4 <HAL_RCC_OscConfig+0x340>)
 8003e32:	40da      	lsrs	r2, r3
 8003e34:	4b68      	ldr	r3, [pc, #416]	@ (8003fd8 <HAL_RCC_OscConfig+0x344>)
 8003e36:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e38:	4b68      	ldr	r3, [pc, #416]	@ (8003fdc <HAL_RCC_OscConfig+0x348>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f7fe fc53 	bl	80026e8 <HAL_InitTick>
 8003e42:	1e03      	subs	r3, r0, #0
 8003e44:	d051      	beq.n	8003eea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e22c      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d030      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e52:	4b5b      	ldr	r3, [pc, #364]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a5e      	ldr	r2, [pc, #376]	@ (8003fd0 <HAL_RCC_OscConfig+0x33c>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	0019      	movs	r1, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	4b57      	ldr	r3, [pc, #348]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003e62:	430a      	orrs	r2, r1
 8003e64:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003e66:	4b56      	ldr	r3, [pc, #344]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b55      	ldr	r3, [pc, #340]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003e6c:	2180      	movs	r1, #128	@ 0x80
 8003e6e:	0049      	lsls	r1, r1, #1
 8003e70:	430a      	orrs	r2, r1
 8003e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fe fc94 	bl	80027a0 <HAL_GetTick>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e7e:	f7fe fc8f 	bl	80027a0 <HAL_GetTick>
 8003e82:	0002      	movs	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e209      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e90:	4b4b      	ldr	r3, [pc, #300]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	2380      	movs	r3, #128	@ 0x80
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9c:	4b48      	ldr	r3, [pc, #288]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8003fcc <HAL_RCC_OscConfig+0x338>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	0019      	movs	r1, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	021a      	lsls	r2, r3, #8
 8003eac:	4b44      	ldr	r3, [pc, #272]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	e01b      	b.n	8003eec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003eb4:	4b42      	ldr	r3, [pc, #264]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b41      	ldr	r3, [pc, #260]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003eba:	4949      	ldr	r1, [pc, #292]	@ (8003fe0 <HAL_RCC_OscConfig+0x34c>)
 8003ebc:	400a      	ands	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fe fc6e 	bl	80027a0 <HAL_GetTick>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eca:	f7fe fc69 	bl	80027a0 <HAL_GetTick>
 8003ece:	0002      	movs	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e1e3      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003edc:	4b38      	ldr	r3, [pc, #224]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	2380      	movs	r3, #128	@ 0x80
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d1f0      	bne.n	8003eca <HAL_RCC_OscConfig+0x236>
 8003ee8:	e000      	b.n	8003eec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eea:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d047      	beq.n	8003f86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ef6:	4b32      	ldr	r3, [pc, #200]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2238      	movs	r2, #56	@ 0x38
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b18      	cmp	r3, #24
 8003f00:	d10a      	bne.n	8003f18 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003f02:	4b2f      	ldr	r3, [pc, #188]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f06:	2202      	movs	r2, #2
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d03c      	beq.n	8003f86 <HAL_RCC_OscConfig+0x2f2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d138      	bne.n	8003f86 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e1c5      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d019      	beq.n	8003f54 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003f20:	4b27      	ldr	r3, [pc, #156]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003f22:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f24:	4b26      	ldr	r3, [pc, #152]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003f26:	2101      	movs	r1, #1
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fe fc38 	bl	80027a0 <HAL_GetTick>
 8003f30:	0003      	movs	r3, r0
 8003f32:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f36:	f7fe fc33 	bl	80027a0 <HAL_GetTick>
 8003f3a:	0002      	movs	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e1ad      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f48:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d0f1      	beq.n	8003f36 <HAL_RCC_OscConfig+0x2a2>
 8003f52:	e018      	b.n	8003f86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003f54:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003f56:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f58:	4b19      	ldr	r3, [pc, #100]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	438a      	bics	r2, r1
 8003f5e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fe fc1e 	bl	80027a0 <HAL_GetTick>
 8003f64:	0003      	movs	r3, r0
 8003f66:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f6a:	f7fe fc19 	bl	80027a0 <HAL_GetTick>
 8003f6e:	0002      	movs	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e193      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f7c:	4b10      	ldr	r3, [pc, #64]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f80:	2202      	movs	r2, #2
 8003f82:	4013      	ands	r3, r2
 8003f84:	d1f1      	bne.n	8003f6a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d100      	bne.n	8003f92 <HAL_RCC_OscConfig+0x2fe>
 8003f90:	e0c6      	b.n	8004120 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f92:	231f      	movs	r3, #31
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	2200      	movs	r2, #0
 8003f98:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f9a:	4b09      	ldr	r3, [pc, #36]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2238      	movs	r2, #56	@ 0x38
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d11e      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003fa6:	4b06      	ldr	r3, [pc, #24]	@ (8003fc0 <HAL_RCC_OscConfig+0x32c>)
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003faa:	2202      	movs	r2, #2
 8003fac:	4013      	ands	r3, r2
 8003fae:	d100      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x31e>
 8003fb0:	e0b6      	b.n	8004120 <HAL_RCC_OscConfig+0x48c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d000      	beq.n	8003fbc <HAL_RCC_OscConfig+0x328>
 8003fba:	e0b1      	b.n	8004120 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e171      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	fffeffff 	.word	0xfffeffff
 8003fc8:	fffbffff 	.word	0xfffbffff
 8003fcc:	ffff80ff 	.word	0xffff80ff
 8003fd0:	ffffc7ff 	.word	0xffffc7ff
 8003fd4:	00f42400 	.word	0x00f42400
 8003fd8:	20000060 	.word	0x20000060
 8003fdc:	20000064 	.word	0x20000064
 8003fe0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fe4:	4bb1      	ldr	r3, [pc, #708]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 8003fe6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fe8:	2380      	movs	r3, #128	@ 0x80
 8003fea:	055b      	lsls	r3, r3, #21
 8003fec:	4013      	ands	r3, r2
 8003fee:	d101      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x360>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCC_OscConfig+0x362>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d011      	beq.n	800401e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003ffa:	4bac      	ldr	r3, [pc, #688]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 8003ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ffe:	4bab      	ldr	r3, [pc, #684]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 8004000:	2180      	movs	r1, #128	@ 0x80
 8004002:	0549      	lsls	r1, r1, #21
 8004004:	430a      	orrs	r2, r1
 8004006:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004008:	4ba8      	ldr	r3, [pc, #672]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 800400a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800400c:	2380      	movs	r3, #128	@ 0x80
 800400e:	055b      	lsls	r3, r3, #21
 8004010:	4013      	ands	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004016:	231f      	movs	r3, #31
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	2201      	movs	r2, #1
 800401c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800401e:	4ba4      	ldr	r3, [pc, #656]	@ (80042b0 <HAL_RCC_OscConfig+0x61c>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	2380      	movs	r3, #128	@ 0x80
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4013      	ands	r3, r2
 8004028:	d11a      	bne.n	8004060 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800402a:	4ba1      	ldr	r3, [pc, #644]	@ (80042b0 <HAL_RCC_OscConfig+0x61c>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4ba0      	ldr	r3, [pc, #640]	@ (80042b0 <HAL_RCC_OscConfig+0x61c>)
 8004030:	2180      	movs	r1, #128	@ 0x80
 8004032:	0049      	lsls	r1, r1, #1
 8004034:	430a      	orrs	r2, r1
 8004036:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004038:	f7fe fbb2 	bl	80027a0 <HAL_GetTick>
 800403c:	0003      	movs	r3, r0
 800403e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004042:	f7fe fbad 	bl	80027a0 <HAL_GetTick>
 8004046:	0002      	movs	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e127      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004054:	4b96      	ldr	r3, [pc, #600]	@ (80042b0 <HAL_RCC_OscConfig+0x61c>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	2380      	movs	r3, #128	@ 0x80
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	4013      	ands	r3, r2
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d106      	bne.n	8004076 <HAL_RCC_OscConfig+0x3e2>
 8004068:	4b90      	ldr	r3, [pc, #576]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 800406a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800406c:	4b8f      	ldr	r3, [pc, #572]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 800406e:	2101      	movs	r1, #1
 8004070:	430a      	orrs	r2, r1
 8004072:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004074:	e01c      	b.n	80040b0 <HAL_RCC_OscConfig+0x41c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b05      	cmp	r3, #5
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x404>
 800407e:	4b8b      	ldr	r3, [pc, #556]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 8004080:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004082:	4b8a      	ldr	r3, [pc, #552]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 8004084:	2104      	movs	r1, #4
 8004086:	430a      	orrs	r2, r1
 8004088:	65da      	str	r2, [r3, #92]	@ 0x5c
 800408a:	4b88      	ldr	r3, [pc, #544]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 800408c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800408e:	4b87      	ldr	r3, [pc, #540]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 8004090:	2101      	movs	r1, #1
 8004092:	430a      	orrs	r2, r1
 8004094:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004096:	e00b      	b.n	80040b0 <HAL_RCC_OscConfig+0x41c>
 8004098:	4b84      	ldr	r3, [pc, #528]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 800409a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800409c:	4b83      	ldr	r3, [pc, #524]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 800409e:	2101      	movs	r1, #1
 80040a0:	438a      	bics	r2, r1
 80040a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040a4:	4b81      	ldr	r3, [pc, #516]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 80040a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040a8:	4b80      	ldr	r3, [pc, #512]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 80040aa:	2104      	movs	r1, #4
 80040ac:	438a      	bics	r2, r1
 80040ae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d014      	beq.n	80040e2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b8:	f7fe fb72 	bl	80027a0 <HAL_GetTick>
 80040bc:	0003      	movs	r3, r0
 80040be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c0:	e009      	b.n	80040d6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c2:	f7fe fb6d 	bl	80027a0 <HAL_GetTick>
 80040c6:	0002      	movs	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	4a79      	ldr	r2, [pc, #484]	@ (80042b4 <HAL_RCC_OscConfig+0x620>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e0e6      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d6:	4b75      	ldr	r3, [pc, #468]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 80040d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040da:	2202      	movs	r2, #2
 80040dc:	4013      	ands	r3, r2
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x42e>
 80040e0:	e013      	b.n	800410a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e2:	f7fe fb5d 	bl	80027a0 <HAL_GetTick>
 80040e6:	0003      	movs	r3, r0
 80040e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040ea:	e009      	b.n	8004100 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ec:	f7fe fb58 	bl	80027a0 <HAL_GetTick>
 80040f0:	0002      	movs	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	4a6f      	ldr	r2, [pc, #444]	@ (80042b4 <HAL_RCC_OscConfig+0x620>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e0d1      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004100:	4b6a      	ldr	r3, [pc, #424]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 8004102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004104:	2202      	movs	r2, #2
 8004106:	4013      	ands	r3, r2
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800410a:	231f      	movs	r3, #31
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d105      	bne.n	8004120 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004114:	4b65      	ldr	r3, [pc, #404]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 8004116:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004118:	4b64      	ldr	r3, [pc, #400]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 800411a:	4967      	ldr	r1, [pc, #412]	@ (80042b8 <HAL_RCC_OscConfig+0x624>)
 800411c:	400a      	ands	r2, r1
 800411e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d100      	bne.n	800412a <HAL_RCC_OscConfig+0x496>
 8004128:	e0bb      	b.n	80042a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800412a:	4b60      	ldr	r3, [pc, #384]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2238      	movs	r2, #56	@ 0x38
 8004130:	4013      	ands	r3, r2
 8004132:	2b10      	cmp	r3, #16
 8004134:	d100      	bne.n	8004138 <HAL_RCC_OscConfig+0x4a4>
 8004136:	e07b      	b.n	8004230 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d156      	bne.n	80041ee <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004140:	4b5a      	ldr	r3, [pc, #360]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b59      	ldr	r3, [pc, #356]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 8004146:	495d      	ldr	r1, [pc, #372]	@ (80042bc <HAL_RCC_OscConfig+0x628>)
 8004148:	400a      	ands	r2, r1
 800414a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fe fb28 	bl	80027a0 <HAL_GetTick>
 8004150:	0003      	movs	r3, r0
 8004152:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004156:	f7fe fb23 	bl	80027a0 <HAL_GetTick>
 800415a:	0002      	movs	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e09d      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004168:	4b50      	ldr	r3, [pc, #320]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	2380      	movs	r3, #128	@ 0x80
 800416e:	049b      	lsls	r3, r3, #18
 8004170:	4013      	ands	r3, r2
 8004172:	d1f0      	bne.n	8004156 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004174:	4b4d      	ldr	r3, [pc, #308]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a51      	ldr	r2, [pc, #324]	@ (80042c0 <HAL_RCC_OscConfig+0x62c>)
 800417a:	4013      	ands	r3, r2
 800417c:	0019      	movs	r1, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1a      	ldr	r2, [r3, #32]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	021b      	lsls	r3, r3, #8
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a0:	431a      	orrs	r2, r3
 80041a2:	4b42      	ldr	r3, [pc, #264]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 80041a4:	430a      	orrs	r2, r1
 80041a6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a8:	4b40      	ldr	r3, [pc, #256]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b3f      	ldr	r3, [pc, #252]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 80041ae:	2180      	movs	r1, #128	@ 0x80
 80041b0:	0449      	lsls	r1, r1, #17
 80041b2:	430a      	orrs	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80041b6:	4b3d      	ldr	r3, [pc, #244]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	4b3c      	ldr	r3, [pc, #240]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 80041bc:	2180      	movs	r1, #128	@ 0x80
 80041be:	0549      	lsls	r1, r1, #21
 80041c0:	430a      	orrs	r2, r1
 80041c2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c4:	f7fe faec 	bl	80027a0 <HAL_GetTick>
 80041c8:	0003      	movs	r3, r0
 80041ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ce:	f7fe fae7 	bl	80027a0 <HAL_GetTick>
 80041d2:	0002      	movs	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e061      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e0:	4b32      	ldr	r3, [pc, #200]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	2380      	movs	r3, #128	@ 0x80
 80041e6:	049b      	lsls	r3, r3, #18
 80041e8:	4013      	ands	r3, r2
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCC_OscConfig+0x53a>
 80041ec:	e059      	b.n	80042a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ee:	4b2f      	ldr	r3, [pc, #188]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	4b2e      	ldr	r3, [pc, #184]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 80041f4:	4931      	ldr	r1, [pc, #196]	@ (80042bc <HAL_RCC_OscConfig+0x628>)
 80041f6:	400a      	ands	r2, r1
 80041f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fa:	f7fe fad1 	bl	80027a0 <HAL_GetTick>
 80041fe:	0003      	movs	r3, r0
 8004200:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004204:	f7fe facc 	bl	80027a0 <HAL_GetTick>
 8004208:	0002      	movs	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e046      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004216:	4b25      	ldr	r3, [pc, #148]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	2380      	movs	r3, #128	@ 0x80
 800421c:	049b      	lsls	r3, r3, #18
 800421e:	4013      	ands	r3, r2
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004222:	4b22      	ldr	r3, [pc, #136]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	4b21      	ldr	r3, [pc, #132]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 8004228:	4926      	ldr	r1, [pc, #152]	@ (80042c4 <HAL_RCC_OscConfig+0x630>)
 800422a:	400a      	ands	r2, r1
 800422c:	60da      	str	r2, [r3, #12]
 800422e:	e038      	b.n	80042a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e033      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800423c:	4b1b      	ldr	r3, [pc, #108]	@ (80042ac <HAL_RCC_OscConfig+0x618>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2203      	movs	r2, #3
 8004246:	401a      	ands	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	429a      	cmp	r2, r3
 800424e:	d126      	bne.n	800429e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2270      	movs	r2, #112	@ 0x70
 8004254:	401a      	ands	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d11f      	bne.n	800429e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	23fe      	movs	r3, #254	@ 0xfe
 8004262:	01db      	lsls	r3, r3, #7
 8004264:	401a      	ands	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d116      	bne.n	800429e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	23f8      	movs	r3, #248	@ 0xf8
 8004274:	039b      	lsls	r3, r3, #14
 8004276:	401a      	ands	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d10e      	bne.n	800429e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	23e0      	movs	r3, #224	@ 0xe0
 8004284:	051b      	lsls	r3, r3, #20
 8004286:	401a      	ands	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d106      	bne.n	800429e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	0f5b      	lsrs	r3, r3, #29
 8004294:	075a      	lsls	r2, r3, #29
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800429a:	429a      	cmp	r2, r3
 800429c:	d001      	beq.n	80042a2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	0018      	movs	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b008      	add	sp, #32
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40007000 	.word	0x40007000
 80042b4:	00001388 	.word	0x00001388
 80042b8:	efffffff 	.word	0xefffffff
 80042bc:	feffffff 	.word	0xfeffffff
 80042c0:	11c1808c 	.word	0x11c1808c
 80042c4:	eefefffc 	.word	0xeefefffc

080042c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0e9      	b.n	80044b0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042dc:	4b76      	ldr	r3, [pc, #472]	@ (80044b8 <HAL_RCC_ClockConfig+0x1f0>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2207      	movs	r2, #7
 80042e2:	4013      	ands	r3, r2
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d91e      	bls.n	8004328 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ea:	4b73      	ldr	r3, [pc, #460]	@ (80044b8 <HAL_RCC_ClockConfig+0x1f0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2207      	movs	r2, #7
 80042f0:	4393      	bics	r3, r2
 80042f2:	0019      	movs	r1, r3
 80042f4:	4b70      	ldr	r3, [pc, #448]	@ (80044b8 <HAL_RCC_ClockConfig+0x1f0>)
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042fc:	f7fe fa50 	bl	80027a0 <HAL_GetTick>
 8004300:	0003      	movs	r3, r0
 8004302:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004304:	e009      	b.n	800431a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004306:	f7fe fa4b 	bl	80027a0 <HAL_GetTick>
 800430a:	0002      	movs	r2, r0
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	4a6a      	ldr	r2, [pc, #424]	@ (80044bc <HAL_RCC_ClockConfig+0x1f4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e0ca      	b.n	80044b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800431a:	4b67      	ldr	r3, [pc, #412]	@ (80044b8 <HAL_RCC_ClockConfig+0x1f0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2207      	movs	r2, #7
 8004320:	4013      	ands	r3, r2
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d1ee      	bne.n	8004306 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2202      	movs	r2, #2
 800432e:	4013      	ands	r3, r2
 8004330:	d015      	beq.n	800435e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2204      	movs	r2, #4
 8004338:	4013      	ands	r3, r2
 800433a:	d006      	beq.n	800434a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800433c:	4b60      	ldr	r3, [pc, #384]	@ (80044c0 <HAL_RCC_ClockConfig+0x1f8>)
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	4b5f      	ldr	r3, [pc, #380]	@ (80044c0 <HAL_RCC_ClockConfig+0x1f8>)
 8004342:	21e0      	movs	r1, #224	@ 0xe0
 8004344:	01c9      	lsls	r1, r1, #7
 8004346:	430a      	orrs	r2, r1
 8004348:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434a:	4b5d      	ldr	r3, [pc, #372]	@ (80044c0 <HAL_RCC_ClockConfig+0x1f8>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	4a5d      	ldr	r2, [pc, #372]	@ (80044c4 <HAL_RCC_ClockConfig+0x1fc>)
 8004350:	4013      	ands	r3, r2
 8004352:	0019      	movs	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	4b59      	ldr	r3, [pc, #356]	@ (80044c0 <HAL_RCC_ClockConfig+0x1f8>)
 800435a:	430a      	orrs	r2, r1
 800435c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2201      	movs	r2, #1
 8004364:	4013      	ands	r3, r2
 8004366:	d057      	beq.n	8004418 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d107      	bne.n	8004380 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004370:	4b53      	ldr	r3, [pc, #332]	@ (80044c0 <HAL_RCC_ClockConfig+0x1f8>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	2380      	movs	r3, #128	@ 0x80
 8004376:	029b      	lsls	r3, r3, #10
 8004378:	4013      	ands	r3, r2
 800437a:	d12b      	bne.n	80043d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e097      	b.n	80044b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d107      	bne.n	8004398 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004388:	4b4d      	ldr	r3, [pc, #308]	@ (80044c0 <HAL_RCC_ClockConfig+0x1f8>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	2380      	movs	r3, #128	@ 0x80
 800438e:	049b      	lsls	r3, r3, #18
 8004390:	4013      	ands	r3, r2
 8004392:	d11f      	bne.n	80043d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e08b      	b.n	80044b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d107      	bne.n	80043b0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a0:	4b47      	ldr	r3, [pc, #284]	@ (80044c0 <HAL_RCC_ClockConfig+0x1f8>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	2380      	movs	r3, #128	@ 0x80
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	4013      	ands	r3, r2
 80043aa:	d113      	bne.n	80043d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e07f      	b.n	80044b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d106      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043b8:	4b41      	ldr	r3, [pc, #260]	@ (80044c0 <HAL_RCC_ClockConfig+0x1f8>)
 80043ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043bc:	2202      	movs	r2, #2
 80043be:	4013      	ands	r3, r2
 80043c0:	d108      	bne.n	80043d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e074      	b.n	80044b0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043c6:	4b3e      	ldr	r3, [pc, #248]	@ (80044c0 <HAL_RCC_ClockConfig+0x1f8>)
 80043c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ca:	2202      	movs	r2, #2
 80043cc:	4013      	ands	r3, r2
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e06d      	b.n	80044b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043d4:	4b3a      	ldr	r3, [pc, #232]	@ (80044c0 <HAL_RCC_ClockConfig+0x1f8>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2207      	movs	r2, #7
 80043da:	4393      	bics	r3, r2
 80043dc:	0019      	movs	r1, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	4b37      	ldr	r3, [pc, #220]	@ (80044c0 <HAL_RCC_ClockConfig+0x1f8>)
 80043e4:	430a      	orrs	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e8:	f7fe f9da 	bl	80027a0 <HAL_GetTick>
 80043ec:	0003      	movs	r3, r0
 80043ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f0:	e009      	b.n	8004406 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f2:	f7fe f9d5 	bl	80027a0 <HAL_GetTick>
 80043f6:	0002      	movs	r2, r0
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	4a2f      	ldr	r2, [pc, #188]	@ (80044bc <HAL_RCC_ClockConfig+0x1f4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e054      	b.n	80044b0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	4b2e      	ldr	r3, [pc, #184]	@ (80044c0 <HAL_RCC_ClockConfig+0x1f8>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2238      	movs	r2, #56	@ 0x38
 800440c:	401a      	ands	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	429a      	cmp	r2, r3
 8004416:	d1ec      	bne.n	80043f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004418:	4b27      	ldr	r3, [pc, #156]	@ (80044b8 <HAL_RCC_ClockConfig+0x1f0>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2207      	movs	r2, #7
 800441e:	4013      	ands	r3, r2
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d21e      	bcs.n	8004464 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004426:	4b24      	ldr	r3, [pc, #144]	@ (80044b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2207      	movs	r2, #7
 800442c:	4393      	bics	r3, r2
 800442e:	0019      	movs	r1, r3
 8004430:	4b21      	ldr	r3, [pc, #132]	@ (80044b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004438:	f7fe f9b2 	bl	80027a0 <HAL_GetTick>
 800443c:	0003      	movs	r3, r0
 800443e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004440:	e009      	b.n	8004456 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004442:	f7fe f9ad 	bl	80027a0 <HAL_GetTick>
 8004446:	0002      	movs	r2, r0
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	4a1b      	ldr	r2, [pc, #108]	@ (80044bc <HAL_RCC_ClockConfig+0x1f4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e02c      	b.n	80044b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004456:	4b18      	ldr	r3, [pc, #96]	@ (80044b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2207      	movs	r2, #7
 800445c:	4013      	ands	r3, r2
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d1ee      	bne.n	8004442 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2204      	movs	r2, #4
 800446a:	4013      	ands	r3, r2
 800446c:	d009      	beq.n	8004482 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800446e:	4b14      	ldr	r3, [pc, #80]	@ (80044c0 <HAL_RCC_ClockConfig+0x1f8>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	4a15      	ldr	r2, [pc, #84]	@ (80044c8 <HAL_RCC_ClockConfig+0x200>)
 8004474:	4013      	ands	r3, r2
 8004476:	0019      	movs	r1, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	4b10      	ldr	r3, [pc, #64]	@ (80044c0 <HAL_RCC_ClockConfig+0x1f8>)
 800447e:	430a      	orrs	r2, r1
 8004480:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004482:	f000 f829 	bl	80044d8 <HAL_RCC_GetSysClockFreq>
 8004486:	0001      	movs	r1, r0
 8004488:	4b0d      	ldr	r3, [pc, #52]	@ (80044c0 <HAL_RCC_ClockConfig+0x1f8>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	0a1b      	lsrs	r3, r3, #8
 800448e:	220f      	movs	r2, #15
 8004490:	401a      	ands	r2, r3
 8004492:	4b0e      	ldr	r3, [pc, #56]	@ (80044cc <HAL_RCC_ClockConfig+0x204>)
 8004494:	0092      	lsls	r2, r2, #2
 8004496:	58d3      	ldr	r3, [r2, r3]
 8004498:	221f      	movs	r2, #31
 800449a:	4013      	ands	r3, r2
 800449c:	000a      	movs	r2, r1
 800449e:	40da      	lsrs	r2, r3
 80044a0:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <HAL_RCC_ClockConfig+0x208>)
 80044a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80044a4:	4b0b      	ldr	r3, [pc, #44]	@ (80044d4 <HAL_RCC_ClockConfig+0x20c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	0018      	movs	r0, r3
 80044aa:	f7fe f91d 	bl	80026e8 <HAL_InitTick>
 80044ae:	0003      	movs	r3, r0
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b004      	add	sp, #16
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40022000 	.word	0x40022000
 80044bc:	00001388 	.word	0x00001388
 80044c0:	40021000 	.word	0x40021000
 80044c4:	fffff0ff 	.word	0xfffff0ff
 80044c8:	ffff8fff 	.word	0xffff8fff
 80044cc:	08006f7c 	.word	0x08006f7c
 80044d0:	20000060 	.word	0x20000060
 80044d4:	20000064 	.word	0x20000064

080044d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044de:	4b3c      	ldr	r3, [pc, #240]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2238      	movs	r2, #56	@ 0x38
 80044e4:	4013      	ands	r3, r2
 80044e6:	d10f      	bne.n	8004508 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80044e8:	4b39      	ldr	r3, [pc, #228]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	0adb      	lsrs	r3, r3, #11
 80044ee:	2207      	movs	r2, #7
 80044f0:	4013      	ands	r3, r2
 80044f2:	2201      	movs	r2, #1
 80044f4:	409a      	lsls	r2, r3
 80044f6:	0013      	movs	r3, r2
 80044f8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80044fa:	6839      	ldr	r1, [r7, #0]
 80044fc:	4835      	ldr	r0, [pc, #212]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80044fe:	f7fb fe01 	bl	8000104 <__udivsi3>
 8004502:	0003      	movs	r3, r0
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	e05d      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004508:	4b31      	ldr	r3, [pc, #196]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2238      	movs	r2, #56	@ 0x38
 800450e:	4013      	ands	r3, r2
 8004510:	2b08      	cmp	r3, #8
 8004512:	d102      	bne.n	800451a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004514:	4b2f      	ldr	r3, [pc, #188]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	e054      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800451a:	4b2d      	ldr	r3, [pc, #180]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2238      	movs	r2, #56	@ 0x38
 8004520:	4013      	ands	r3, r2
 8004522:	2b10      	cmp	r3, #16
 8004524:	d138      	bne.n	8004598 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004526:	4b2a      	ldr	r3, [pc, #168]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2203      	movs	r2, #3
 800452c:	4013      	ands	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004530:	4b27      	ldr	r3, [pc, #156]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	2207      	movs	r2, #7
 8004538:	4013      	ands	r3, r2
 800453a:	3301      	adds	r3, #1
 800453c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b03      	cmp	r3, #3
 8004542:	d10d      	bne.n	8004560 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004544:	68b9      	ldr	r1, [r7, #8]
 8004546:	4823      	ldr	r0, [pc, #140]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004548:	f7fb fddc 	bl	8000104 <__udivsi3>
 800454c:	0003      	movs	r3, r0
 800454e:	0019      	movs	r1, r3
 8004550:	4b1f      	ldr	r3, [pc, #124]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	0a1b      	lsrs	r3, r3, #8
 8004556:	227f      	movs	r2, #127	@ 0x7f
 8004558:	4013      	ands	r3, r2
 800455a:	434b      	muls	r3, r1
 800455c:	617b      	str	r3, [r7, #20]
        break;
 800455e:	e00d      	b.n	800457c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	481c      	ldr	r0, [pc, #112]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004564:	f7fb fdce 	bl	8000104 <__udivsi3>
 8004568:	0003      	movs	r3, r0
 800456a:	0019      	movs	r1, r3
 800456c:	4b18      	ldr	r3, [pc, #96]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	0a1b      	lsrs	r3, r3, #8
 8004572:	227f      	movs	r2, #127	@ 0x7f
 8004574:	4013      	ands	r3, r2
 8004576:	434b      	muls	r3, r1
 8004578:	617b      	str	r3, [r7, #20]
        break;
 800457a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800457c:	4b14      	ldr	r3, [pc, #80]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	0f5b      	lsrs	r3, r3, #29
 8004582:	2207      	movs	r2, #7
 8004584:	4013      	ands	r3, r2
 8004586:	3301      	adds	r3, #1
 8004588:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	6978      	ldr	r0, [r7, #20]
 800458e:	f7fb fdb9 	bl	8000104 <__udivsi3>
 8004592:	0003      	movs	r3, r0
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	e015      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004598:	4b0d      	ldr	r3, [pc, #52]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2238      	movs	r2, #56	@ 0x38
 800459e:	4013      	ands	r3, r2
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	d103      	bne.n	80045ac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80045a4:	2380      	movs	r3, #128	@ 0x80
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80045ac:	4b08      	ldr	r3, [pc, #32]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2238      	movs	r2, #56	@ 0x38
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b18      	cmp	r3, #24
 80045b6:	d103      	bne.n	80045c0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80045b8:	23fa      	movs	r3, #250	@ 0xfa
 80045ba:	01db      	lsls	r3, r3, #7
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	e001      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80045c4:	693b      	ldr	r3, [r7, #16]
}
 80045c6:	0018      	movs	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b006      	add	sp, #24
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	46c0      	nop			@ (mov r8, r8)
 80045d0:	40021000 	.word	0x40021000
 80045d4:	00f42400 	.word	0x00f42400

080045d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045dc:	4b02      	ldr	r3, [pc, #8]	@ (80045e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80045de:	681b      	ldr	r3, [r3, #0]
}
 80045e0:	0018      	movs	r0, r3
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	46c0      	nop			@ (mov r8, r8)
 80045e8:	20000060 	.word	0x20000060

080045ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045ec:	b5b0      	push	{r4, r5, r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80045f0:	f7ff fff2 	bl	80045d8 <HAL_RCC_GetHCLKFreq>
 80045f4:	0004      	movs	r4, r0
 80045f6:	f7ff fb41 	bl	8003c7c <LL_RCC_GetAPB1Prescaler>
 80045fa:	0003      	movs	r3, r0
 80045fc:	0b1a      	lsrs	r2, r3, #12
 80045fe:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004600:	0092      	lsls	r2, r2, #2
 8004602:	58d3      	ldr	r3, [r2, r3]
 8004604:	221f      	movs	r2, #31
 8004606:	4013      	ands	r3, r2
 8004608:	40dc      	lsrs	r4, r3
 800460a:	0023      	movs	r3, r4
}
 800460c:	0018      	movs	r0, r3
 800460e:	46bd      	mov	sp, r7
 8004610:	bdb0      	pop	{r4, r5, r7, pc}
 8004612:	46c0      	nop			@ (mov r8, r8)
 8004614:	08006fbc 	.word	0x08006fbc

08004618 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004620:	2313      	movs	r3, #19
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004628:	2312      	movs	r3, #18
 800462a:	18fb      	adds	r3, r7, r3
 800462c:	2200      	movs	r2, #0
 800462e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	2380      	movs	r3, #128	@ 0x80
 8004636:	029b      	lsls	r3, r3, #10
 8004638:	4013      	ands	r3, r2
 800463a:	d100      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800463c:	e0a3      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800463e:	2011      	movs	r0, #17
 8004640:	183b      	adds	r3, r7, r0
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004646:	4ba5      	ldr	r3, [pc, #660]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004648:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800464a:	2380      	movs	r3, #128	@ 0x80
 800464c:	055b      	lsls	r3, r3, #21
 800464e:	4013      	ands	r3, r2
 8004650:	d110      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004652:	4ba2      	ldr	r3, [pc, #648]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004654:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004656:	4ba1      	ldr	r3, [pc, #644]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004658:	2180      	movs	r1, #128	@ 0x80
 800465a:	0549      	lsls	r1, r1, #21
 800465c:	430a      	orrs	r2, r1
 800465e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004660:	4b9e      	ldr	r3, [pc, #632]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004662:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004664:	2380      	movs	r3, #128	@ 0x80
 8004666:	055b      	lsls	r3, r3, #21
 8004668:	4013      	ands	r3, r2
 800466a:	60bb      	str	r3, [r7, #8]
 800466c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800466e:	183b      	adds	r3, r7, r0
 8004670:	2201      	movs	r2, #1
 8004672:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004674:	4b9a      	ldr	r3, [pc, #616]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	4b99      	ldr	r3, [pc, #612]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800467a:	2180      	movs	r1, #128	@ 0x80
 800467c:	0049      	lsls	r1, r1, #1
 800467e:	430a      	orrs	r2, r1
 8004680:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004682:	f7fe f88d 	bl	80027a0 <HAL_GetTick>
 8004686:	0003      	movs	r3, r0
 8004688:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800468a:	e00b      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800468c:	f7fe f888 	bl	80027a0 <HAL_GetTick>
 8004690:	0002      	movs	r2, r0
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d904      	bls.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800469a:	2313      	movs	r3, #19
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	2203      	movs	r2, #3
 80046a0:	701a      	strb	r2, [r3, #0]
        break;
 80046a2:	e005      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046a4:	4b8e      	ldr	r3, [pc, #568]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	2380      	movs	r3, #128	@ 0x80
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	4013      	ands	r3, r2
 80046ae:	d0ed      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80046b0:	2313      	movs	r3, #19
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d154      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046ba:	4b88      	ldr	r3, [pc, #544]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046be:	23c0      	movs	r3, #192	@ 0xc0
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4013      	ands	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d019      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d014      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046d6:	4b81      	ldr	r3, [pc, #516]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046da:	4a82      	ldr	r2, [pc, #520]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80046dc:	4013      	ands	r3, r2
 80046de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046e0:	4b7e      	ldr	r3, [pc, #504]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046e4:	4b7d      	ldr	r3, [pc, #500]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046e6:	2180      	movs	r1, #128	@ 0x80
 80046e8:	0249      	lsls	r1, r1, #9
 80046ea:	430a      	orrs	r2, r1
 80046ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046ee:	4b7b      	ldr	r3, [pc, #492]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046f2:	4b7a      	ldr	r3, [pc, #488]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046f4:	497c      	ldr	r1, [pc, #496]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80046f6:	400a      	ands	r2, r1
 80046f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046fa:	4b78      	ldr	r3, [pc, #480]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2201      	movs	r2, #1
 8004704:	4013      	ands	r3, r2
 8004706:	d016      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fe f84a 	bl	80027a0 <HAL_GetTick>
 800470c:	0003      	movs	r3, r0
 800470e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004710:	e00c      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004712:	f7fe f845 	bl	80027a0 <HAL_GetTick>
 8004716:	0002      	movs	r2, r0
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	4a73      	ldr	r2, [pc, #460]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d904      	bls.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004722:	2313      	movs	r3, #19
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	2203      	movs	r2, #3
 8004728:	701a      	strb	r2, [r3, #0]
            break;
 800472a:	e004      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800472c:	4b6b      	ldr	r3, [pc, #428]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800472e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004730:	2202      	movs	r2, #2
 8004732:	4013      	ands	r3, r2
 8004734:	d0ed      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004736:	2313      	movs	r3, #19
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004740:	4b66      	ldr	r3, [pc, #408]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004744:	4a67      	ldr	r2, [pc, #412]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004746:	4013      	ands	r3, r2
 8004748:	0019      	movs	r1, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800474e:	4b63      	ldr	r3, [pc, #396]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004750:	430a      	orrs	r2, r1
 8004752:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004754:	e00c      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004756:	2312      	movs	r3, #18
 8004758:	18fb      	adds	r3, r7, r3
 800475a:	2213      	movs	r2, #19
 800475c:	18ba      	adds	r2, r7, r2
 800475e:	7812      	ldrb	r2, [r2, #0]
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	e005      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004764:	2312      	movs	r3, #18
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	2213      	movs	r2, #19
 800476a:	18ba      	adds	r2, r7, r2
 800476c:	7812      	ldrb	r2, [r2, #0]
 800476e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004770:	2311      	movs	r3, #17
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d105      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800477a:	4b58      	ldr	r3, [pc, #352]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800477c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800477e:	4b57      	ldr	r3, [pc, #348]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004780:	495b      	ldr	r1, [pc, #364]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004782:	400a      	ands	r2, r1
 8004784:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2201      	movs	r2, #1
 800478c:	4013      	ands	r3, r2
 800478e:	d009      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004790:	4b52      	ldr	r3, [pc, #328]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004794:	2203      	movs	r2, #3
 8004796:	4393      	bics	r3, r2
 8004798:	0019      	movs	r1, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	4b4f      	ldr	r3, [pc, #316]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047a0:	430a      	orrs	r2, r1
 80047a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2210      	movs	r2, #16
 80047aa:	4013      	ands	r3, r2
 80047ac:	d009      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047ae:	4b4b      	ldr	r3, [pc, #300]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b2:	4a50      	ldr	r2, [pc, #320]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	0019      	movs	r1, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	4b47      	ldr	r3, [pc, #284]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047be:	430a      	orrs	r2, r1
 80047c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	2380      	movs	r3, #128	@ 0x80
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4013      	ands	r3, r2
 80047cc:	d009      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ce:	4b43      	ldr	r3, [pc, #268]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d2:	4a49      	ldr	r2, [pc, #292]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	0019      	movs	r1, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695a      	ldr	r2, [r3, #20]
 80047dc:	4b3f      	ldr	r3, [pc, #252]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047de:	430a      	orrs	r2, r1
 80047e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	2380      	movs	r3, #128	@ 0x80
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	4013      	ands	r3, r2
 80047ec:	d009      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047ee:	4b3b      	ldr	r3, [pc, #236]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f2:	4a42      	ldr	r2, [pc, #264]	@ (80048fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	0019      	movs	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	4b37      	ldr	r3, [pc, #220]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047fe:	430a      	orrs	r2, r1
 8004800:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2220      	movs	r2, #32
 8004808:	4013      	ands	r3, r2
 800480a:	d009      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800480c:	4b33      	ldr	r3, [pc, #204]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800480e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004810:	4a3b      	ldr	r2, [pc, #236]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004812:	4013      	ands	r3, r2
 8004814:	0019      	movs	r1, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	4b30      	ldr	r3, [pc, #192]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800481c:	430a      	orrs	r2, r1
 800481e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	2380      	movs	r3, #128	@ 0x80
 8004826:	01db      	lsls	r3, r3, #7
 8004828:	4013      	ands	r3, r2
 800482a:	d015      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800482c:	4b2b      	ldr	r3, [pc, #172]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800482e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	0899      	lsrs	r1, r3, #2
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69da      	ldr	r2, [r3, #28]
 8004838:	4b28      	ldr	r3, [pc, #160]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800483a:	430a      	orrs	r2, r1
 800483c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69da      	ldr	r2, [r3, #28]
 8004842:	2380      	movs	r3, #128	@ 0x80
 8004844:	05db      	lsls	r3, r3, #23
 8004846:	429a      	cmp	r2, r3
 8004848:	d106      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800484a:	4b24      	ldr	r3, [pc, #144]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	4b23      	ldr	r3, [pc, #140]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004850:	2180      	movs	r1, #128	@ 0x80
 8004852:	0249      	lsls	r1, r1, #9
 8004854:	430a      	orrs	r2, r1
 8004856:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	2380      	movs	r3, #128	@ 0x80
 800485e:	039b      	lsls	r3, r3, #14
 8004860:	4013      	ands	r3, r2
 8004862:	d016      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004864:	4b1d      	ldr	r3, [pc, #116]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004868:	4a26      	ldr	r2, [pc, #152]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800486a:	4013      	ands	r3, r2
 800486c:	0019      	movs	r1, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1a      	ldr	r2, [r3, #32]
 8004872:	4b1a      	ldr	r3, [pc, #104]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004874:	430a      	orrs	r2, r1
 8004876:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1a      	ldr	r2, [r3, #32]
 800487c:	2380      	movs	r3, #128	@ 0x80
 800487e:	03db      	lsls	r3, r3, #15
 8004880:	429a      	cmp	r2, r3
 8004882:	d106      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004884:	4b15      	ldr	r3, [pc, #84]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	4b14      	ldr	r3, [pc, #80]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800488a:	2180      	movs	r1, #128	@ 0x80
 800488c:	0449      	lsls	r1, r1, #17
 800488e:	430a      	orrs	r2, r1
 8004890:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	2380      	movs	r3, #128	@ 0x80
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	4013      	ands	r3, r2
 800489c:	d016      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800489e:	4b0f      	ldr	r3, [pc, #60]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a2:	4a19      	ldr	r2, [pc, #100]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	0019      	movs	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048ae:	430a      	orrs	r2, r1
 80048b0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	2380      	movs	r3, #128	@ 0x80
 80048b8:	01db      	lsls	r3, r3, #7
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d106      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80048be:	4b07      	ldr	r3, [pc, #28]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048c4:	2180      	movs	r1, #128	@ 0x80
 80048c6:	0249      	lsls	r1, r1, #9
 80048c8:	430a      	orrs	r2, r1
 80048ca:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80048cc:	2312      	movs	r3, #18
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	781b      	ldrb	r3, [r3, #0]
}
 80048d2:	0018      	movs	r0, r3
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b006      	add	sp, #24
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	46c0      	nop			@ (mov r8, r8)
 80048dc:	40021000 	.word	0x40021000
 80048e0:	40007000 	.word	0x40007000
 80048e4:	fffffcff 	.word	0xfffffcff
 80048e8:	fffeffff 	.word	0xfffeffff
 80048ec:	00001388 	.word	0x00001388
 80048f0:	efffffff 	.word	0xefffffff
 80048f4:	fffff3ff 	.word	0xfffff3ff
 80048f8:	fff3ffff 	.word	0xfff3ffff
 80048fc:	ffcfffff 	.word	0xffcfffff
 8004900:	ffffcfff 	.word	0xffffcfff
 8004904:	ffbfffff 	.word	0xffbfffff
 8004908:	ffff3fff 	.word	0xffff3fff

0800490c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	2380      	movs	r3, #128	@ 0x80
 800491c:	029b      	lsls	r3, r3, #10
 800491e:	429a      	cmp	r2, r3
 8004920:	d136      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004922:	4bcd      	ldr	r3, [pc, #820]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004924:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004926:	23c0      	movs	r3, #192	@ 0xc0
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4013      	ands	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800492e:	4bca      	ldr	r3, [pc, #808]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004932:	2202      	movs	r2, #2
 8004934:	4013      	ands	r3, r2
 8004936:	2b02      	cmp	r3, #2
 8004938:	d108      	bne.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	2380      	movs	r3, #128	@ 0x80
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	429a      	cmp	r2, r3
 8004942:	d103      	bne.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8004944:	2380      	movs	r3, #128	@ 0x80
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	e26b      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800494c:	4bc2      	ldr	r3, [pc, #776]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800494e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004950:	2202      	movs	r2, #2
 8004952:	4013      	ands	r3, r2
 8004954:	2b02      	cmp	r3, #2
 8004956:	d108      	bne.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	2380      	movs	r3, #128	@ 0x80
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	429a      	cmp	r2, r3
 8004960:	d103      	bne.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8004962:	23fa      	movs	r3, #250	@ 0xfa
 8004964:	01db      	lsls	r3, r3, #7
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	e25c      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800496a:	4bbb      	ldr	r3, [pc, #748]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	2380      	movs	r3, #128	@ 0x80
 8004970:	029b      	lsls	r3, r3, #10
 8004972:	401a      	ands	r2, r3
 8004974:	2380      	movs	r3, #128	@ 0x80
 8004976:	029b      	lsls	r3, r3, #10
 8004978:	429a      	cmp	r2, r3
 800497a:	d000      	beq.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800497c:	e252      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	23c0      	movs	r3, #192	@ 0xc0
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	429a      	cmp	r2, r3
 8004986:	d000      	beq.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8004988:	e24c      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 800498a:	4bb4      	ldr	r3, [pc, #720]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	e249      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8004990:	4bb1      	ldr	r3, [pc, #708]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	2203      	movs	r2, #3
 8004996:	4013      	ands	r3, r2
 8004998:	2b02      	cmp	r3, #2
 800499a:	d102      	bne.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 800499c:	4bb0      	ldr	r3, [pc, #704]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	e00a      	b.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 80049a2:	4bad      	ldr	r3, [pc, #692]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2203      	movs	r2, #3
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d102      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 80049ae:	4bac      	ldr	r3, [pc, #688]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	e001      	b.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80049b8:	4ba7      	ldr	r3, [pc, #668]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	2207      	movs	r2, #7
 80049c0:	4013      	ands	r3, r2
 80049c2:	3301      	adds	r3, #1
 80049c4:	0019      	movs	r1, r3
 80049c6:	6938      	ldr	r0, [r7, #16]
 80049c8:	f7fb fb9c 	bl	8000104 <__udivsi3>
 80049cc:	0003      	movs	r3, r0
 80049ce:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	2380      	movs	r3, #128	@ 0x80
 80049d4:	039b      	lsls	r3, r3, #14
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d100      	bne.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 80049da:	e1e3      	b.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	2380      	movs	r3, #128	@ 0x80
 80049e0:	039b      	lsls	r3, r3, #14
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d900      	bls.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80049e6:	e20c      	b.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	2380      	movs	r3, #128	@ 0x80
 80049ec:	01db      	lsls	r3, r3, #7
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d100      	bne.n	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80049f2:	e0a5      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	2380      	movs	r3, #128	@ 0x80
 80049f8:	01db      	lsls	r3, r3, #7
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d900      	bls.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80049fe:	e200      	b.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	2380      	movs	r3, #128	@ 0x80
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d100      	bne.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004a0a:	e0fc      	b.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	2380      	movs	r3, #128	@ 0x80
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d900      	bls.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004a16:	e1f4      	b.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	2380      	movs	r3, #128	@ 0x80
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d100      	bne.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8004a22:	e181      	b.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	2380      	movs	r3, #128	@ 0x80
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d900      	bls.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004a2e:	e1e8      	b.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	2380      	movs	r3, #128	@ 0x80
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d100      	bne.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8004a3a:	e135      	b.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	2380      	movs	r3, #128	@ 0x80
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d900      	bls.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004a46:	e1dc      	b.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	d100      	bne.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004a4e:	e0af      	b.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	d900      	bls.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8004a56:	e1d4      	b.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d003      	beq.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b10      	cmp	r3, #16
 8004a62:	d033      	beq.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8004a64:	e1cd      	b.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004a66:	4b7c      	ldr	r3, [pc, #496]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6a:	2203      	movs	r2, #3
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d104      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a76:	f7ff fdb9 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 8004a7a:	0003      	movs	r3, r0
 8004a7c:	617b      	str	r3, [r7, #20]
        break;
 8004a7e:	e1c2      	b.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d104      	bne.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a86:	f7ff fd27 	bl	80044d8 <HAL_RCC_GetSysClockFreq>
 8004a8a:	0003      	movs	r3, r0
 8004a8c:	617b      	str	r3, [r7, #20]
        break;
 8004a8e:	e1ba      	b.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004a90:	4b71      	ldr	r3, [pc, #452]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	2380      	movs	r3, #128	@ 0x80
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	401a      	ands	r2, r3
 8004a9a:	2380      	movs	r3, #128	@ 0x80
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d105      	bne.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d102      	bne.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 8004aa8:	4b6d      	ldr	r3, [pc, #436]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004aaa:	617b      	str	r3, [r7, #20]
        break;
 8004aac:	e1ab      	b.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004aae:	4b6a      	ldr	r3, [pc, #424]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d000      	beq.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8004aba:	e1a4      	b.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d000      	beq.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8004ac2:	e1a0      	b.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 8004ac4:	2380      	movs	r3, #128	@ 0x80
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	617b      	str	r3, [r7, #20]
        break;
 8004aca:	e19c      	b.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004acc:	4b62      	ldr	r3, [pc, #392]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004ace:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ad0:	23c0      	movs	r3, #192	@ 0xc0
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d104      	bne.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ade:	f7ff fd85 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 8004ae2:	0003      	movs	r3, r0
 8004ae4:	617b      	str	r3, [r7, #20]
        break;
 8004ae6:	e190      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	2380      	movs	r3, #128	@ 0x80
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d104      	bne.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004af2:	f7ff fcf1 	bl	80044d8 <HAL_RCC_GetSysClockFreq>
 8004af6:	0003      	movs	r3, r0
 8004af8:	617b      	str	r3, [r7, #20]
        break;
 8004afa:	e186      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004afc:	4b56      	ldr	r3, [pc, #344]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	2380      	movs	r3, #128	@ 0x80
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	401a      	ands	r2, r3
 8004b06:	2380      	movs	r3, #128	@ 0x80
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d107      	bne.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	2380      	movs	r3, #128	@ 0x80
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d102      	bne.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 8004b18:	4b51      	ldr	r3, [pc, #324]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004b1a:	617b      	str	r3, [r7, #20]
        break;
 8004b1c:	e175      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004b1e:	4b4e      	ldr	r3, [pc, #312]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b22:	2202      	movs	r2, #2
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d000      	beq.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 8004b2a:	e16e      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	23c0      	movs	r3, #192	@ 0xc0
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d000      	beq.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8004b36:	e168      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 8004b38:	2380      	movs	r3, #128	@ 0x80
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	617b      	str	r3, [r7, #20]
        break;
 8004b3e:	e164      	b.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004b40:	4b45      	ldr	r3, [pc, #276]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b44:	0f9b      	lsrs	r3, r3, #30
 8004b46:	079b      	lsls	r3, r3, #30
 8004b48:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d104      	bne.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b50:	f7ff fcc2 	bl	80044d8 <HAL_RCC_GetSysClockFreq>
 8004b54:	0003      	movs	r3, r0
 8004b56:	617b      	str	r3, [r7, #20]
        break;
 8004b58:	e159      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	2380      	movs	r3, #128	@ 0x80
 8004b5e:	061b      	lsls	r3, r3, #24
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d102      	bne.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 8004b64:	4b3e      	ldr	r3, [pc, #248]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004b66:	617b      	str	r3, [r7, #20]
        break;
 8004b68:	e151      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	2380      	movs	r3, #128	@ 0x80
 8004b6e:	05db      	lsls	r3, r3, #23
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d000      	beq.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004b74:	e14b      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8004b76:	4b38      	ldr	r3, [pc, #224]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	2380      	movs	r3, #128	@ 0x80
 8004b7c:	025b      	lsls	r3, r3, #9
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d100      	bne.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 8004b82:	e144      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004b84:	4b34      	ldr	r3, [pc, #208]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	0a1b      	lsrs	r3, r3, #8
 8004b8a:	227f      	movs	r2, #127	@ 0x7f
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	435a      	muls	r2, r3
 8004b96:	4b30      	ldr	r3, [pc, #192]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	0c5b      	lsrs	r3, r3, #17
 8004b9c:	211f      	movs	r1, #31
 8004b9e:	400b      	ands	r3, r1
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	0010      	movs	r0, r2
 8004ba6:	f7fb faad 	bl	8000104 <__udivsi3>
 8004baa:	0003      	movs	r3, r0
 8004bac:	617b      	str	r3, [r7, #20]
        break;
 8004bae:	e12e      	b.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004bb0:	4b29      	ldr	r3, [pc, #164]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004bb2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bb4:	23c0      	movs	r3, #192	@ 0xc0
 8004bb6:	019b      	lsls	r3, r3, #6
 8004bb8:	4013      	ands	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d104      	bne.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bc2:	f7ff fd13 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	617b      	str	r3, [r7, #20]
        break;
 8004bca:	e122      	b.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	2380      	movs	r3, #128	@ 0x80
 8004bd0:	015b      	lsls	r3, r3, #5
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d104      	bne.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 8004bd6:	f7ff fc7f 	bl	80044d8 <HAL_RCC_GetSysClockFreq>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	617b      	str	r3, [r7, #20]
        break;
 8004bde:	e118      	b.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004be0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	2380      	movs	r3, #128	@ 0x80
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	401a      	ands	r2, r3
 8004bea:	2380      	movs	r3, #128	@ 0x80
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d000      	beq.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8004bf2:	e10e      	b.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	2380      	movs	r3, #128	@ 0x80
 8004bf8:	019b      	lsls	r3, r3, #6
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d000      	beq.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004bfe:	e108      	b.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 8004c00:	4b17      	ldr	r3, [pc, #92]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004c02:	617b      	str	r3, [r7, #20]
        break;
 8004c04:	e105      	b.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8004c06:	4b14      	ldr	r3, [pc, #80]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004c08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c0a:	23c0      	movs	r3, #192	@ 0xc0
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	4013      	ands	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	2380      	movs	r3, #128	@ 0x80
 8004c16:	01db      	lsls	r3, r3, #7
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d123      	bne.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8004c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	2380      	movs	r3, #128	@ 0x80
 8004c22:	025b      	lsls	r3, r3, #9
 8004c24:	4013      	ands	r3, r2
 8004c26:	d100      	bne.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004c28:	e0f5      	b.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	0a1b      	lsrs	r3, r3, #8
 8004c30:	227f      	movs	r2, #127	@ 0x7f
 8004c32:	4013      	ands	r3, r2
 8004c34:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	435a      	muls	r2, r3
 8004c3c:	4b06      	ldr	r3, [pc, #24]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	0c5b      	lsrs	r3, r3, #17
 8004c42:	211f      	movs	r1, #31
 8004c44:	400b      	ands	r3, r1
 8004c46:	3301      	adds	r3, #1
 8004c48:	0019      	movs	r1, r3
 8004c4a:	0010      	movs	r0, r2
 8004c4c:	f7fb fa5a 	bl	8000104 <__udivsi3>
 8004c50:	0003      	movs	r3, r0
 8004c52:	617b      	str	r3, [r7, #20]
        break;
 8004c54:	e0df      	b.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8004c56:	46c0      	nop			@ (mov r8, r8)
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	0007a120 	.word	0x0007a120
 8004c60:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d104      	bne.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c6a:	f7ff fc35 	bl	80044d8 <HAL_RCC_GetSysClockFreq>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	617b      	str	r3, [r7, #20]
        break;
 8004c72:	e0d0      	b.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8004c74:	4b6e      	ldr	r3, [pc, #440]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	2380      	movs	r3, #128	@ 0x80
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	401a      	ands	r2, r3
 8004c7e:	2380      	movs	r3, #128	@ 0x80
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d107      	bne.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	2380      	movs	r3, #128	@ 0x80
 8004c8a:	021b      	lsls	r3, r3, #8
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d102      	bne.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 8004c90:	4b68      	ldr	r3, [pc, #416]	@ (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8004c92:	617b      	str	r3, [r7, #20]
        break;
 8004c94:	e0bf      	b.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	23c0      	movs	r3, #192	@ 0xc0
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d000      	beq.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8004ca0:	e0b9      	b.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8004ca2:	4b65      	ldr	r3, [pc, #404]	@ (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8004ca4:	617b      	str	r3, [r7, #20]
        break;
 8004ca6:	e0b6      	b.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004ca8:	4b61      	ldr	r3, [pc, #388]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004caa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cac:	23c0      	movs	r3, #192	@ 0xc0
 8004cae:	031b      	lsls	r3, r3, #12
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d104      	bne.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cba:	f7ff fc97 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 8004cbe:	0003      	movs	r3, r0
 8004cc0:	617b      	str	r3, [r7, #20]
        break;
 8004cc2:	e0aa      	b.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004cc4:	4b5a      	ldr	r3, [pc, #360]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc8:	2202      	movs	r2, #2
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d108      	bne.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	2380      	movs	r3, #128	@ 0x80
 8004cd4:	02db      	lsls	r3, r3, #11
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d103      	bne.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 8004cda:	23fa      	movs	r3, #250	@ 0xfa
 8004cdc:	01db      	lsls	r3, r3, #7
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	e021      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004ce2:	4b53      	ldr	r3, [pc, #332]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	2380      	movs	r3, #128	@ 0x80
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	401a      	ands	r2, r3
 8004cec:	2380      	movs	r3, #128	@ 0x80
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d107      	bne.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	2380      	movs	r3, #128	@ 0x80
 8004cf8:	031b      	lsls	r3, r3, #12
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d102      	bne.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 8004cfe:	4b4d      	ldr	r3, [pc, #308]	@ (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	e010      	b.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004d04:	4b4a      	ldr	r3, [pc, #296]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d08:	2202      	movs	r2, #2
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d000      	beq.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 8004d10:	e083      	b.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	23c0      	movs	r3, #192	@ 0xc0
 8004d16:	031b      	lsls	r3, r3, #12
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d000      	beq.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8004d1c:	e07d      	b.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 8004d1e:	2380      	movs	r3, #128	@ 0x80
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	617b      	str	r3, [r7, #20]
        break;
 8004d24:	e079      	b.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8004d26:	e078      	b.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004d28:	4b41      	ldr	r3, [pc, #260]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004d2a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d2c:	23c0      	movs	r3, #192	@ 0xc0
 8004d2e:	039b      	lsls	r3, r3, #14
 8004d30:	4013      	ands	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d104      	bne.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d3a:	f7ff fc57 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	617b      	str	r3, [r7, #20]
        break;
 8004d42:	e06c      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004d44:	4b3a      	ldr	r3, [pc, #232]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d48:	2202      	movs	r2, #2
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d108      	bne.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	2380      	movs	r3, #128	@ 0x80
 8004d54:	035b      	lsls	r3, r3, #13
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d103      	bne.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 8004d5a:	23fa      	movs	r3, #250	@ 0xfa
 8004d5c:	01db      	lsls	r3, r3, #7
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	e01f      	b.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004d62:	4b33      	ldr	r3, [pc, #204]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	2380      	movs	r3, #128	@ 0x80
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	401a      	ands	r2, r3
 8004d6c:	2380      	movs	r3, #128	@ 0x80
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d107      	bne.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	2380      	movs	r3, #128	@ 0x80
 8004d78:	039b      	lsls	r3, r3, #14
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d102      	bne.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 8004d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	e00e      	b.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004d84:	4b2a      	ldr	r3, [pc, #168]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d88:	2202      	movs	r2, #2
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d146      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	23c0      	movs	r3, #192	@ 0xc0
 8004d94:	039b      	lsls	r3, r3, #14
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d141      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 8004d9a:	2380      	movs	r3, #128	@ 0x80
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	617b      	str	r3, [r7, #20]
        break;
 8004da0:	e03d      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 8004da2:	e03c      	b.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8004da4:	4b22      	ldr	r3, [pc, #136]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004da6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004da8:	2380      	movs	r3, #128	@ 0x80
 8004daa:	03db      	lsls	r3, r3, #15
 8004dac:	4013      	ands	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	2380      	movs	r3, #128	@ 0x80
 8004db4:	03db      	lsls	r3, r3, #15
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d11b      	bne.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8004dba:	4b1d      	ldr	r3, [pc, #116]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	2380      	movs	r3, #128	@ 0x80
 8004dc0:	045b      	lsls	r3, r3, #17
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d02d      	beq.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	227f      	movs	r2, #127	@ 0x7f
 8004dce:	4013      	ands	r3, r2
 8004dd0:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	435a      	muls	r2, r3
 8004dd8:	4b15      	ldr	r3, [pc, #84]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	0e5b      	lsrs	r3, r3, #25
 8004dde:	2107      	movs	r1, #7
 8004de0:	400b      	ands	r3, r1
 8004de2:	3301      	adds	r3, #1
 8004de4:	0019      	movs	r1, r3
 8004de6:	0010      	movs	r0, r2
 8004de8:	f7fb f98c 	bl	8000104 <__udivsi3>
 8004dec:	0003      	movs	r3, r0
 8004dee:	617b      	str	r3, [r7, #20]
        break;
 8004df0:	e017      	b.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d114      	bne.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004df8:	f7ff fbf8 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	617b      	str	r3, [r7, #20]
        break;
 8004e00:	e00f      	b.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	e00e      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004e06:	46c0      	nop			@ (mov r8, r8)
 8004e08:	e00c      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004e0a:	46c0      	nop			@ (mov r8, r8)
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004e0e:	46c0      	nop			@ (mov r8, r8)
 8004e10:	e008      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	e006      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004e16:	46c0      	nop			@ (mov r8, r8)
 8004e18:	e004      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004e1a:	46c0      	nop			@ (mov r8, r8)
 8004e1c:	e002      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004e1e:	46c0      	nop			@ (mov r8, r8)
 8004e20:	e000      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004e22:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 8004e24:	697b      	ldr	r3, [r7, #20]
}
 8004e26:	0018      	movs	r0, r3
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	b006      	add	sp, #24
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	46c0      	nop			@ (mov r8, r8)
 8004e30:	40021000 	.word	0x40021000
 8004e34:	00f42400 	.word	0x00f42400
 8004e38:	00bb8000 	.word	0x00bb8000

08004e3c <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8004e3c:	b590      	push	{r4, r7, lr}
 8004e3e:	b08b      	sub	sp, #44	@ 0x2c
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8004e44:	2427      	movs	r4, #39	@ 0x27
 8004e46:	193b      	adds	r3, r7, r4
 8004e48:	2200      	movs	r2, #0
 8004e4a:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 8004e4c:	2326      	movs	r3, #38	@ 0x26
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 8004e54:	4b31      	ldr	r3, [pc, #196]	@ (8004f1c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004e56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e58:	4b30      	ldr	r3, [pc, #192]	@ (8004f1c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e60:	4b2e      	ldr	r3, [pc, #184]	@ (8004f1c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e64:	2201      	movs	r2, #1
 8004e66:	4013      	ands	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8004e6c:	2110      	movs	r1, #16
 8004e6e:	187b      	adds	r3, r7, r1
 8004e70:	2204      	movs	r2, #4
 8004e72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e74:	187b      	adds	r3, r7, r1
 8004e76:	2203      	movs	r2, #3
 8004e78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e7a:	187b      	adds	r3, r7, r1
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e80:	187b      	adds	r3, r7, r1
 8004e82:	2200      	movs	r2, #0
 8004e84:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8004e86:	187a      	adds	r2, r7, r1
 8004e88:	23a0      	movs	r3, #160	@ 0xa0
 8004e8a:	05db      	lsls	r3, r3, #23
 8004e8c:	0011      	movs	r1, r2
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f7fd fd6e 	bl	8002970 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e94:	4b21      	ldr	r3, [pc, #132]	@ (8004f1c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004e96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e98:	2380      	movs	r3, #128	@ 0x80
 8004e9a:	055b      	lsls	r3, r3, #21
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d110      	bne.n	8004ec2 <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8004f1c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004ea2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f1c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004ea6:	2180      	movs	r1, #128	@ 0x80
 8004ea8:	0549      	lsls	r1, r1, #21
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004eae:	4b1b      	ldr	r3, [pc, #108]	@ (8004f1c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004eb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004eb2:	2380      	movs	r3, #128	@ 0x80
 8004eb4:	055b      	lsls	r3, r3, #21
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8004ebc:	193b      	adds	r3, r7, r4
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ec2:	4b17      	ldr	r3, [pc, #92]	@ (8004f20 <HAL_RCCEx_EnableLSCO+0xe4>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	2380      	movs	r3, #128	@ 0x80
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d105      	bne.n	8004eda <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 8004ece:	f7fe fe77 	bl	8003bc0 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 8004ed2:	2326      	movs	r3, #38	@ 0x26
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8004eda:	4b10      	ldr	r3, [pc, #64]	@ (8004f1c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ede:	4a11      	ldr	r2, [pc, #68]	@ (8004f24 <HAL_RCCEx_EnableLSCO+0xe8>)
 8004ee0:	401a      	ands	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f1c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004ee8:	2180      	movs	r1, #128	@ 0x80
 8004eea:	0449      	lsls	r1, r1, #17
 8004eec:	430a      	orrs	r2, r1
 8004eee:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 8004ef0:	2326      	movs	r3, #38	@ 0x26
 8004ef2:	18fb      	adds	r3, r7, r3
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 8004efa:	f7fe fe6f 	bl	8003bdc <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 8004efe:	2327      	movs	r3, #39	@ 0x27
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d105      	bne.n	8004f14 <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f08:	4b04      	ldr	r3, [pc, #16]	@ (8004f1c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004f0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f0c:	4b03      	ldr	r3, [pc, #12]	@ (8004f1c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004f0e:	4906      	ldr	r1, [pc, #24]	@ (8004f28 <HAL_RCCEx_EnableLSCO+0xec>)
 8004f10:	400a      	ands	r2, r1
 8004f12:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8004f14:	46c0      	nop			@ (mov r8, r8)
 8004f16:	46bd      	mov	sp, r7
 8004f18:	b00b      	add	sp, #44	@ 0x2c
 8004f1a:	bd90      	pop	{r4, r7, pc}
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	40007000 	.word	0x40007000
 8004f24:	fcffffff 	.word	0xfcffffff
 8004f28:	efffffff 	.word	0xefffffff

08004f2c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f2c:	b5b0      	push	{r4, r5, r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f34:	230f      	movs	r3, #15
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	2201      	movs	r2, #1
 8004f3a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d100      	bne.n	8004f44 <HAL_RTC_Init+0x18>
 8004f42:	e08c      	b.n	800505e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2229      	movs	r2, #41	@ 0x29
 8004f48:	5c9b      	ldrb	r3, [r3, r2]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2228      	movs	r2, #40	@ 0x28
 8004f54:	2100      	movs	r1, #0
 8004f56:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2288      	movs	r2, #136	@ 0x88
 8004f5c:	0212      	lsls	r2, r2, #8
 8004f5e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	0018      	movs	r0, r3
 8004f64:	f7fd f9d4 	bl	8002310 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2229      	movs	r2, #41	@ 0x29
 8004f6c:	2102      	movs	r1, #2
 8004f6e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	2210      	movs	r2, #16
 8004f78:	4013      	ands	r3, r2
 8004f7a:	2b10      	cmp	r3, #16
 8004f7c:	d062      	beq.n	8005044 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	22ca      	movs	r2, #202	@ 0xca
 8004f84:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2253      	movs	r2, #83	@ 0x53
 8004f8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004f8e:	250f      	movs	r5, #15
 8004f90:	197c      	adds	r4, r7, r5
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	0018      	movs	r0, r3
 8004f96:	f000 fcb9 	bl	800590c <RTC_EnterInitMode>
 8004f9a:	0003      	movs	r3, r0
 8004f9c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004f9e:	0028      	movs	r0, r5
 8004fa0:	183b      	adds	r3, r7, r0
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d12c      	bne.n	8005002 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	492e      	ldr	r1, [pc, #184]	@ (800506c <HAL_RTC_Init+0x140>)
 8004fb4:	400a      	ands	r2, r1
 8004fb6:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6999      	ldr	r1, [r3, #24]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6912      	ldr	r2, [r2, #16]
 8004fde:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6919      	ldr	r1, [r3, #16]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	041a      	lsls	r2, r3, #16
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004ff4:	183c      	adds	r4, r7, r0
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f000 fcc9 	bl	8005990 <RTC_ExitInitMode>
 8004ffe:	0003      	movs	r3, r0
 8005000:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005002:	230f      	movs	r3, #15
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d116      	bne.n	800503a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	00d2      	lsls	r2, r2, #3
 8005018:	08d2      	lsrs	r2, r2, #3
 800501a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6999      	ldr	r1, [r3, #24]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	22ff      	movs	r2, #255	@ 0xff
 8005040:	625a      	str	r2, [r3, #36]	@ 0x24
 8005042:	e003      	b.n	800504c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005044:	230f      	movs	r3, #15
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	2200      	movs	r2, #0
 800504a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800504c:	230f      	movs	r3, #15
 800504e:	18fb      	adds	r3, r7, r3
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d103      	bne.n	800505e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2229      	movs	r2, #41	@ 0x29
 800505a:	2101      	movs	r1, #1
 800505c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800505e:	230f      	movs	r3, #15
 8005060:	18fb      	adds	r3, r7, r3
 8005062:	781b      	ldrb	r3, [r3, #0]
}
 8005064:	0018      	movs	r0, r3
 8005066:	46bd      	mov	sp, r7
 8005068:	b004      	add	sp, #16
 800506a:	bdb0      	pop	{r4, r5, r7, pc}
 800506c:	fb8fffbf 	.word	0xfb8fffbf

08005070 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005070:	b5b0      	push	{r4, r5, r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2228      	movs	r2, #40	@ 0x28
 8005080:	5c9b      	ldrb	r3, [r3, r2]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_RTC_SetTime+0x1a>
 8005086:	2302      	movs	r3, #2
 8005088:	e092      	b.n	80051b0 <HAL_RTC_SetTime+0x140>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2228      	movs	r2, #40	@ 0x28
 800508e:	2101      	movs	r1, #1
 8005090:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2229      	movs	r2, #41	@ 0x29
 8005096:	2102      	movs	r1, #2
 8005098:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	22ca      	movs	r2, #202	@ 0xca
 80050a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2253      	movs	r2, #83	@ 0x53
 80050a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80050aa:	2513      	movs	r5, #19
 80050ac:	197c      	adds	r4, r7, r5
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	0018      	movs	r0, r3
 80050b2:	f000 fc2b 	bl	800590c <RTC_EnterInitMode>
 80050b6:	0003      	movs	r3, r0
 80050b8:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80050ba:	197b      	adds	r3, r7, r5
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d162      	bne.n	8005188 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d125      	bne.n	8005114 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	2240      	movs	r2, #64	@ 0x40
 80050d0:	4013      	ands	r3, r2
 80050d2:	d102      	bne.n	80050da <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2200      	movs	r2, #0
 80050d8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	0018      	movs	r0, r3
 80050e0:	f000 fc9a 	bl	8005a18 <RTC_ByteToBcd2>
 80050e4:	0003      	movs	r3, r0
 80050e6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	785b      	ldrb	r3, [r3, #1]
 80050ec:	0018      	movs	r0, r3
 80050ee:	f000 fc93 	bl	8005a18 <RTC_ByteToBcd2>
 80050f2:	0003      	movs	r3, r0
 80050f4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050f6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	789b      	ldrb	r3, [r3, #2]
 80050fc:	0018      	movs	r0, r3
 80050fe:	f000 fc8b 	bl	8005a18 <RTC_ByteToBcd2>
 8005102:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005104:	0022      	movs	r2, r4
 8005106:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	78db      	ldrb	r3, [r3, #3]
 800510c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	e017      	b.n	8005144 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	2240      	movs	r2, #64	@ 0x40
 800511c:	4013      	ands	r3, r2
 800511e:	d102      	bne.n	8005126 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2200      	movs	r2, #0
 8005124:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005132:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005138:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	78db      	ldrb	r3, [r3, #3]
 800513e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	491b      	ldr	r1, [pc, #108]	@ (80051b8 <HAL_RTC_SetTime+0x148>)
 800514c:	400a      	ands	r2, r1
 800514e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4918      	ldr	r1, [pc, #96]	@ (80051bc <HAL_RTC_SetTime+0x14c>)
 800515c:	400a      	ands	r2, r1
 800515e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6999      	ldr	r1, [r3, #24]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	431a      	orrs	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005178:	2313      	movs	r3, #19
 800517a:	18fc      	adds	r4, r7, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	0018      	movs	r0, r3
 8005180:	f000 fc06 	bl	8005990 <RTC_ExitInitMode>
 8005184:	0003      	movs	r3, r0
 8005186:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	22ff      	movs	r2, #255	@ 0xff
 800518e:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8005190:	2313      	movs	r3, #19
 8005192:	18fb      	adds	r3, r7, r3
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d103      	bne.n	80051a2 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2229      	movs	r2, #41	@ 0x29
 800519e:	2101      	movs	r1, #1
 80051a0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2228      	movs	r2, #40	@ 0x28
 80051a6:	2100      	movs	r1, #0
 80051a8:	5499      	strb	r1, [r3, r2]

  return status;
 80051aa:	2313      	movs	r3, #19
 80051ac:	18fb      	adds	r3, r7, r3
 80051ae:	781b      	ldrb	r3, [r3, #0]
}
 80051b0:	0018      	movs	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b006      	add	sp, #24
 80051b6:	bdb0      	pop	{r4, r5, r7, pc}
 80051b8:	007f7f7f 	.word	0x007f7f7f
 80051bc:	fffbffff 	.word	0xfffbffff

080051c0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	045b      	lsls	r3, r3, #17
 80051de:	0c5a      	lsrs	r2, r3, #17
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a22      	ldr	r2, [pc, #136]	@ (8005274 <HAL_RTC_GetTime+0xb4>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	0c1b      	lsrs	r3, r3, #16
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	223f      	movs	r2, #63	@ 0x3f
 80051f8:	4013      	ands	r3, r2
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	0a1b      	lsrs	r3, r3, #8
 8005204:	b2db      	uxtb	r3, r3
 8005206:	227f      	movs	r2, #127	@ 0x7f
 8005208:	4013      	ands	r3, r2
 800520a:	b2da      	uxtb	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	227f      	movs	r2, #127	@ 0x7f
 8005216:	4013      	ands	r3, r2
 8005218:	b2da      	uxtb	r2, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	0d9b      	lsrs	r3, r3, #22
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2201      	movs	r2, #1
 8005226:	4013      	ands	r3, r2
 8005228:	b2da      	uxtb	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d11a      	bne.n	800526a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	0018      	movs	r0, r3
 800523a:	f000 fc15 	bl	8005a68 <RTC_Bcd2ToByte>
 800523e:	0003      	movs	r3, r0
 8005240:	001a      	movs	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	785b      	ldrb	r3, [r3, #1]
 800524a:	0018      	movs	r0, r3
 800524c:	f000 fc0c 	bl	8005a68 <RTC_Bcd2ToByte>
 8005250:	0003      	movs	r3, r0
 8005252:	001a      	movs	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	789b      	ldrb	r3, [r3, #2]
 800525c:	0018      	movs	r0, r3
 800525e:	f000 fc03 	bl	8005a68 <RTC_Bcd2ToByte>
 8005262:	0003      	movs	r3, r0
 8005264:	001a      	movs	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	0018      	movs	r0, r3
 800526e:	46bd      	mov	sp, r7
 8005270:	b006      	add	sp, #24
 8005272:	bd80      	pop	{r7, pc}
 8005274:	007f7f7f 	.word	0x007f7f7f

08005278 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005278:	b5b0      	push	{r4, r5, r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2228      	movs	r2, #40	@ 0x28
 8005288:	5c9b      	ldrb	r3, [r3, r2]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_RTC_SetDate+0x1a>
 800528e:	2302      	movs	r3, #2
 8005290:	e07e      	b.n	8005390 <HAL_RTC_SetDate+0x118>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2228      	movs	r2, #40	@ 0x28
 8005296:	2101      	movs	r1, #1
 8005298:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2229      	movs	r2, #41	@ 0x29
 800529e:	2102      	movs	r1, #2
 80052a0:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10e      	bne.n	80052c6 <HAL_RTC_SetDate+0x4e>
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	001a      	movs	r2, r3
 80052ae:	2310      	movs	r3, #16
 80052b0:	4013      	ands	r3, r2
 80052b2:	d008      	beq.n	80052c6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	785b      	ldrb	r3, [r3, #1]
 80052b8:	2210      	movs	r2, #16
 80052ba:	4393      	bics	r3, r2
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	330a      	adds	r3, #10
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d11c      	bne.n	8005306 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	78db      	ldrb	r3, [r3, #3]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f000 fba1 	bl	8005a18 <RTC_ByteToBcd2>
 80052d6:	0003      	movs	r3, r0
 80052d8:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	785b      	ldrb	r3, [r3, #1]
 80052de:	0018      	movs	r0, r3
 80052e0:	f000 fb9a 	bl	8005a18 <RTC_ByteToBcd2>
 80052e4:	0003      	movs	r3, r0
 80052e6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80052e8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	789b      	ldrb	r3, [r3, #2]
 80052ee:	0018      	movs	r0, r3
 80052f0:	f000 fb92 	bl	8005a18 <RTC_ByteToBcd2>
 80052f4:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80052f6:	0022      	movs	r2, r4
 80052f8:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	e00e      	b.n	8005324 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	78db      	ldrb	r3, [r3, #3]
 800530a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	785b      	ldrb	r3, [r3, #1]
 8005310:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005312:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005318:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	22ca      	movs	r2, #202	@ 0xca
 800532a:	625a      	str	r2, [r3, #36]	@ 0x24
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2253      	movs	r2, #83	@ 0x53
 8005332:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005334:	2513      	movs	r5, #19
 8005336:	197c      	adds	r4, r7, r5
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	0018      	movs	r0, r3
 800533c:	f000 fae6 	bl	800590c <RTC_EnterInitMode>
 8005340:	0003      	movs	r3, r0
 8005342:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005344:	0028      	movs	r0, r5
 8005346:	183b      	adds	r3, r7, r0
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10c      	bne.n	8005368 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4910      	ldr	r1, [pc, #64]	@ (8005398 <HAL_RTC_SetDate+0x120>)
 8005356:	400a      	ands	r2, r1
 8005358:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800535a:	183c      	adds	r4, r7, r0
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	0018      	movs	r0, r3
 8005360:	f000 fb16 	bl	8005990 <RTC_ExitInitMode>
 8005364:	0003      	movs	r3, r0
 8005366:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	22ff      	movs	r2, #255	@ 0xff
 800536e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005370:	2313      	movs	r3, #19
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d103      	bne.n	8005382 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2229      	movs	r2, #41	@ 0x29
 800537e:	2101      	movs	r1, #1
 8005380:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2228      	movs	r2, #40	@ 0x28
 8005386:	2100      	movs	r1, #0
 8005388:	5499      	strb	r1, [r3, r2]

  return status;
 800538a:	2313      	movs	r3, #19
 800538c:	18fb      	adds	r3, r7, r3
 800538e:	781b      	ldrb	r3, [r3, #0]
}
 8005390:	0018      	movs	r0, r3
 8005392:	46bd      	mov	sp, r7
 8005394:	b006      	add	sp, #24
 8005396:	bdb0      	pop	{r4, r5, r7, pc}
 8005398:	00ffff3f 	.word	0x00ffff3f

0800539c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4a21      	ldr	r2, [pc, #132]	@ (8005434 <HAL_RTC_GetDate+0x98>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	0c1b      	lsrs	r3, r3, #16
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	0a1b      	lsrs	r3, r3, #8
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	221f      	movs	r2, #31
 80053c6:	4013      	ands	r3, r2
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	223f      	movs	r2, #63	@ 0x3f
 80053d4:	4013      	ands	r3, r2
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	0b5b      	lsrs	r3, r3, #13
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2207      	movs	r2, #7
 80053e4:	4013      	ands	r3, r2
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d11a      	bne.n	8005428 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	78db      	ldrb	r3, [r3, #3]
 80053f6:	0018      	movs	r0, r3
 80053f8:	f000 fb36 	bl	8005a68 <RTC_Bcd2ToByte>
 80053fc:	0003      	movs	r3, r0
 80053fe:	001a      	movs	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	0018      	movs	r0, r3
 800540a:	f000 fb2d 	bl	8005a68 <RTC_Bcd2ToByte>
 800540e:	0003      	movs	r3, r0
 8005410:	001a      	movs	r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	789b      	ldrb	r3, [r3, #2]
 800541a:	0018      	movs	r0, r3
 800541c:	f000 fb24 	bl	8005a68 <RTC_Bcd2ToByte>
 8005420:	0003      	movs	r3, r0
 8005422:	001a      	movs	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	0018      	movs	r0, r3
 800542c:	46bd      	mov	sp, r7
 800542e:	b006      	add	sp, #24
 8005430:	bd80      	pop	{r7, pc}
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	00ffff3f 	.word	0x00ffff3f

08005438 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005438:	b590      	push	{r4, r7, lr}
 800543a:	b089      	sub	sp, #36	@ 0x24
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2228      	movs	r2, #40	@ 0x28
 8005448:	5c9b      	ldrb	r3, [r3, r2]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_RTC_SetAlarm_IT+0x1a>
 800544e:	2302      	movs	r3, #2
 8005450:	e127      	b.n	80056a2 <HAL_RTC_SetAlarm_IT+0x26a>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2228      	movs	r2, #40	@ 0x28
 8005456:	2101      	movs	r1, #1
 8005458:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2229      	movs	r2, #41	@ 0x29
 800545e:	2102      	movs	r1, #2
 8005460:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d136      	bne.n	80054d6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	2240      	movs	r2, #64	@ 0x40
 8005470:	4013      	ands	r3, r2
 8005472:	d102      	bne.n	800547a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2200      	movs	r2, #0
 8005478:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	0018      	movs	r0, r3
 8005480:	f000 faca 	bl	8005a18 <RTC_ByteToBcd2>
 8005484:	0003      	movs	r3, r0
 8005486:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	785b      	ldrb	r3, [r3, #1]
 800548c:	0018      	movs	r0, r3
 800548e:	f000 fac3 	bl	8005a18 <RTC_ByteToBcd2>
 8005492:	0003      	movs	r3, r0
 8005494:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005496:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	789b      	ldrb	r3, [r3, #2]
 800549c:	0018      	movs	r0, r3
 800549e:	f000 fabb 	bl	8005a18 <RTC_ByteToBcd2>
 80054a2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054a4:	0022      	movs	r2, r4
 80054a6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	78db      	ldrb	r3, [r3, #3]
 80054ac:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054ae:	431a      	orrs	r2, r3
 80054b0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2220      	movs	r2, #32
 80054b6:	5c9b      	ldrb	r3, [r3, r2]
 80054b8:	0018      	movs	r0, r3
 80054ba:	f000 faad 	bl	8005a18 <RTC_ByteToBcd2>
 80054be:	0003      	movs	r3, r0
 80054c0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054c2:	0022      	movs	r2, r4
 80054c4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054ca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054d0:	4313      	orrs	r3, r2
 80054d2:	61fb      	str	r3, [r7, #28]
 80054d4:	e022      	b.n	800551c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	2240      	movs	r2, #64	@ 0x40
 80054de:	4013      	ands	r3, r2
 80054e0:	d102      	bne.n	80054e8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2200      	movs	r2, #0
 80054e6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	785b      	ldrb	r3, [r3, #1]
 80054f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054f4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054fa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	78db      	ldrb	r3, [r3, #3]
 8005500:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005502:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2120      	movs	r1, #32
 8005508:	5c5b      	ldrb	r3, [r3, r1]
 800550a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800550c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005512:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005518:	4313      	orrs	r3, r2
 800551a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	4313      	orrs	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	22ca      	movs	r2, #202	@ 0xca
 800552e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2253      	movs	r2, #83	@ 0x53
 8005536:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800553c:	2380      	movs	r3, #128	@ 0x80
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	429a      	cmp	r2, r3
 8005542:	d14c      	bne.n	80055de <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4957      	ldr	r1, [pc, #348]	@ (80056ac <HAL_RTC_SetAlarm_IT+0x274>)
 8005550:	400a      	ands	r2, r1
 8005552:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2101      	movs	r1, #1
 8005560:	430a      	orrs	r2, r1
 8005562:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8005564:	f7fd f91c 	bl	80027a0 <HAL_GetTick>
 8005568:	0003      	movs	r3, r0
 800556a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800556c:	e016      	b.n	800559c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800556e:	f7fd f917 	bl	80027a0 <HAL_GetTick>
 8005572:	0002      	movs	r2, r0
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	1ad2      	subs	r2, r2, r3
 8005578:	23fa      	movs	r3, #250	@ 0xfa
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	429a      	cmp	r2, r3
 800557e:	d90d      	bls.n	800559c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	22ff      	movs	r2, #255	@ 0xff
 8005586:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2229      	movs	r2, #41	@ 0x29
 800558c:	2103      	movs	r1, #3
 800558e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2228      	movs	r2, #40	@ 0x28
 8005594:	2100      	movs	r1, #0
 8005596:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e082      	b.n	80056a2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	4013      	ands	r3, r2
 80055a6:	d0e2      	beq.n	800556e <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2180      	movs	r1, #128	@ 0x80
 80055c4:	0049      	lsls	r1, r1, #1
 80055c6:	430a      	orrs	r2, r1
 80055c8:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699a      	ldr	r2, [r3, #24]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2180      	movs	r1, #128	@ 0x80
 80055d6:	0149      	lsls	r1, r1, #5
 80055d8:	430a      	orrs	r2, r1
 80055da:	619a      	str	r2, [r3, #24]
 80055dc:	e04b      	b.n	8005676 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699a      	ldr	r2, [r3, #24]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4931      	ldr	r1, [pc, #196]	@ (80056b0 <HAL_RTC_SetAlarm_IT+0x278>)
 80055ea:	400a      	ands	r2, r1
 80055ec:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2102      	movs	r1, #2
 80055fa:	430a      	orrs	r2, r1
 80055fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80055fe:	f7fd f8cf 	bl	80027a0 <HAL_GetTick>
 8005602:	0003      	movs	r3, r0
 8005604:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005606:	e016      	b.n	8005636 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005608:	f7fd f8ca 	bl	80027a0 <HAL_GetTick>
 800560c:	0002      	movs	r2, r0
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	1ad2      	subs	r2, r2, r3
 8005612:	23fa      	movs	r3, #250	@ 0xfa
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	429a      	cmp	r2, r3
 8005618:	d90d      	bls.n	8005636 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	22ff      	movs	r2, #255	@ 0xff
 8005620:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2229      	movs	r2, #41	@ 0x29
 8005626:	2103      	movs	r1, #3
 8005628:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2228      	movs	r2, #40	@ 0x28
 800562e:	2100      	movs	r1, #0
 8005630:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e035      	b.n	80056a2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	2202      	movs	r2, #2
 800563e:	4013      	ands	r3, r2
 8005640:	d0e2      	beq.n	8005608 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2180      	movs	r1, #128	@ 0x80
 800565e:	0089      	lsls	r1, r1, #2
 8005660:	430a      	orrs	r2, r1
 8005662:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2180      	movs	r1, #128	@ 0x80
 8005670:	0189      	lsls	r1, r1, #6
 8005672:	430a      	orrs	r2, r1
 8005674:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005676:	4a0f      	ldr	r2, [pc, #60]	@ (80056b4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005678:	2380      	movs	r3, #128	@ 0x80
 800567a:	58d3      	ldr	r3, [r2, r3]
 800567c:	490d      	ldr	r1, [pc, #52]	@ (80056b4 <HAL_RTC_SetAlarm_IT+0x27c>)
 800567e:	2280      	movs	r2, #128	@ 0x80
 8005680:	0312      	lsls	r2, r2, #12
 8005682:	4313      	orrs	r3, r2
 8005684:	2280      	movs	r2, #128	@ 0x80
 8005686:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	22ff      	movs	r2, #255	@ 0xff
 800568e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2229      	movs	r2, #41	@ 0x29
 8005694:	2101      	movs	r1, #1
 8005696:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2228      	movs	r2, #40	@ 0x28
 800569c:	2100      	movs	r1, #0
 800569e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	0018      	movs	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	b009      	add	sp, #36	@ 0x24
 80056a8:	bd90      	pop	{r4, r7, pc}
 80056aa:	46c0      	nop			@ (mov r8, r8)
 80056ac:	fffffeff 	.word	0xfffffeff
 80056b0:	fffffdff 	.word	0xfffffdff
 80056b4:	40021800 	.word	0x40021800

080056b8 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	2380      	movs	r3, #128	@ 0x80
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d144      	bne.n	800575a <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2280      	movs	r2, #128	@ 0x80
 80056d4:	0052      	lsls	r2, r2, #1
 80056d6:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056de:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e6:	045b      	lsls	r3, r3, #17
 80056e8:	0c5b      	lsrs	r3, r3, #17
 80056ea:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	0c1b      	lsrs	r3, r3, #16
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	223f      	movs	r2, #63	@ 0x3f
 80056f4:	4013      	ands	r3, r2
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	0a1b      	lsrs	r3, r3, #8
 8005700:	b2db      	uxtb	r3, r3
 8005702:	227f      	movs	r2, #127	@ 0x7f
 8005704:	4013      	ands	r3, r2
 8005706:	b2da      	uxtb	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	227f      	movs	r2, #127	@ 0x7f
 8005712:	4013      	ands	r3, r2
 8005714:	b2da      	uxtb	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	0d9b      	lsrs	r3, r3, #22
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2201      	movs	r2, #1
 8005722:	4013      	ands	r3, r2
 8005724:	b2da      	uxtb	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	0e1b      	lsrs	r3, r3, #24
 8005734:	b2db      	uxtb	r3, r3
 8005736:	223f      	movs	r2, #63	@ 0x3f
 8005738:	4013      	ands	r3, r2
 800573a:	b2d9      	uxtb	r1, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2220      	movs	r2, #32
 8005740:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	2380      	movs	r3, #128	@ 0x80
 8005746:	05db      	lsls	r3, r3, #23
 8005748:	401a      	ands	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	4a3b      	ldr	r2, [pc, #236]	@ (8005840 <HAL_RTC_GetAlarm+0x188>)
 8005752:	401a      	ands	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	615a      	str	r2, [r3, #20]
 8005758:	e043      	b.n	80057e2 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2280      	movs	r2, #128	@ 0x80
 800575e:	0092      	lsls	r2, r2, #2
 8005760:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005768:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005770:	045b      	lsls	r3, r3, #17
 8005772:	0c5b      	lsrs	r3, r3, #17
 8005774:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	0c1b      	lsrs	r3, r3, #16
 800577a:	b2db      	uxtb	r3, r3
 800577c:	223f      	movs	r2, #63	@ 0x3f
 800577e:	4013      	ands	r3, r2
 8005780:	b2da      	uxtb	r2, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	0a1b      	lsrs	r3, r3, #8
 800578a:	b2db      	uxtb	r3, r3
 800578c:	227f      	movs	r2, #127	@ 0x7f
 800578e:	4013      	ands	r3, r2
 8005790:	b2da      	uxtb	r2, r3
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	227f      	movs	r2, #127	@ 0x7f
 800579c:	4013      	ands	r3, r2
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	0d9b      	lsrs	r3, r3, #22
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2201      	movs	r2, #1
 80057ac:	4013      	ands	r3, r2
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	0e1b      	lsrs	r3, r3, #24
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	223f      	movs	r2, #63	@ 0x3f
 80057c2:	4013      	ands	r3, r2
 80057c4:	b2d9      	uxtb	r1, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2220      	movs	r2, #32
 80057ca:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	2380      	movs	r3, #128	@ 0x80
 80057d0:	05db      	lsls	r3, r3, #23
 80057d2:	401a      	ands	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	4a19      	ldr	r2, [pc, #100]	@ (8005840 <HAL_RTC_GetAlarm+0x188>)
 80057dc:	401a      	ands	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d125      	bne.n	8005834 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	0018      	movs	r0, r3
 80057ee:	f000 f93b 	bl	8005a68 <RTC_Bcd2ToByte>
 80057f2:	0003      	movs	r3, r0
 80057f4:	001a      	movs	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	0018      	movs	r0, r3
 8005800:	f000 f932 	bl	8005a68 <RTC_Bcd2ToByte>
 8005804:	0003      	movs	r3, r0
 8005806:	001a      	movs	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	789b      	ldrb	r3, [r3, #2]
 8005810:	0018      	movs	r0, r3
 8005812:	f000 f929 	bl	8005a68 <RTC_Bcd2ToByte>
 8005816:	0003      	movs	r3, r0
 8005818:	001a      	movs	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2220      	movs	r2, #32
 8005822:	5c9b      	ldrb	r3, [r3, r2]
 8005824:	0018      	movs	r0, r3
 8005826:	f000 f91f 	bl	8005a68 <RTC_Bcd2ToByte>
 800582a:	0003      	movs	r3, r0
 800582c:	0019      	movs	r1, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2220      	movs	r2, #32
 8005832:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	0018      	movs	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	b006      	add	sp, #24
 800583c:	bd80      	pop	{r7, pc}
 800583e:	46c0      	nop			@ (mov r8, r8)
 8005840:	80808080 	.word	0x80808080

08005844 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	2380      	movs	r3, #128	@ 0x80
 8005854:	015b      	lsls	r3, r3, #5
 8005856:	4013      	ands	r3, r2
 8005858:	d011      	beq.n	800587e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005860:	2201      	movs	r2, #1
 8005862:	4013      	ands	r3, r2
 8005864:	d00b      	beq.n	800587e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2101      	movs	r1, #1
 8005872:	430a      	orrs	r2, r1
 8005874:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	0018      	movs	r0, r3
 800587a:	f7fb fdfb 	bl	8001474 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699a      	ldr	r2, [r3, #24]
 8005884:	2380      	movs	r3, #128	@ 0x80
 8005886:	019b      	lsls	r3, r3, #6
 8005888:	4013      	ands	r3, r2
 800588a:	d011      	beq.n	80058b0 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005892:	2202      	movs	r2, #2
 8005894:	4013      	ands	r3, r2
 8005896:	d00b      	beq.n	80058b0 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2102      	movs	r1, #2
 80058a4:	430a      	orrs	r2, r1
 80058a6:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	0018      	movs	r0, r3
 80058ac:	f000 f9a4 	bl	8005bf8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2229      	movs	r2, #41	@ 0x29
 80058b4:	2101      	movs	r1, #1
 80058b6:	5499      	strb	r1, [r3, r2]
}
 80058b8:	46c0      	nop			@ (mov r8, r8)
 80058ba:	46bd      	mov	sp, r7
 80058bc:	b002      	add	sp, #8
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a0e      	ldr	r2, [pc, #56]	@ (8005908 <HAL_RTC_WaitForSynchro+0x48>)
 80058ce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80058d0:	f7fc ff66 	bl	80027a0 <HAL_GetTick>
 80058d4:	0003      	movs	r3, r0
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80058d8:	e00a      	b.n	80058f0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80058da:	f7fc ff61 	bl	80027a0 <HAL_GetTick>
 80058de:	0002      	movs	r2, r0
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	1ad2      	subs	r2, r2, r3
 80058e4:	23fa      	movs	r3, #250	@ 0xfa
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d901      	bls.n	80058f0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e006      	b.n	80058fe <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	2220      	movs	r2, #32
 80058f8:	4013      	ands	r3, r2
 80058fa:	d0ee      	beq.n	80058da <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	0018      	movs	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	b004      	add	sp, #16
 8005904:	bd80      	pop	{r7, pc}
 8005906:	46c0      	nop			@ (mov r8, r8)
 8005908:	0001005f 	.word	0x0001005f

0800590c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005914:	230f      	movs	r3, #15
 8005916:	18fb      	adds	r3, r7, r3
 8005918:	2200      	movs	r2, #0
 800591a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	2240      	movs	r2, #64	@ 0x40
 8005924:	4013      	ands	r3, r2
 8005926:	d12c      	bne.n	8005982 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2180      	movs	r1, #128	@ 0x80
 8005934:	430a      	orrs	r2, r1
 8005936:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005938:	f7fc ff32 	bl	80027a0 <HAL_GetTick>
 800593c:	0003      	movs	r3, r0
 800593e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005940:	e014      	b.n	800596c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005942:	f7fc ff2d 	bl	80027a0 <HAL_GetTick>
 8005946:	0002      	movs	r2, r0
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	1ad2      	subs	r2, r2, r3
 800594c:	200f      	movs	r0, #15
 800594e:	183b      	adds	r3, r7, r0
 8005950:	1839      	adds	r1, r7, r0
 8005952:	7809      	ldrb	r1, [r1, #0]
 8005954:	7019      	strb	r1, [r3, #0]
 8005956:	23fa      	movs	r3, #250	@ 0xfa
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	429a      	cmp	r2, r3
 800595c:	d906      	bls.n	800596c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800595e:	183b      	adds	r3, r7, r0
 8005960:	2203      	movs	r2, #3
 8005962:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2229      	movs	r2, #41	@ 0x29
 8005968:	2103      	movs	r1, #3
 800596a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	2240      	movs	r2, #64	@ 0x40
 8005974:	4013      	ands	r3, r2
 8005976:	d104      	bne.n	8005982 <RTC_EnterInitMode+0x76>
 8005978:	230f      	movs	r3, #15
 800597a:	18fb      	adds	r3, r7, r3
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b03      	cmp	r3, #3
 8005980:	d1df      	bne.n	8005942 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005982:	230f      	movs	r3, #15
 8005984:	18fb      	adds	r3, r7, r3
 8005986:	781b      	ldrb	r3, [r3, #0]
}
 8005988:	0018      	movs	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	b004      	add	sp, #16
 800598e:	bd80      	pop	{r7, pc}

08005990 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005990:	b590      	push	{r4, r7, lr}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005998:	240f      	movs	r4, #15
 800599a:	193b      	adds	r3, r7, r4
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80059a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005a14 <RTC_ExitInitMode+0x84>)
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005a14 <RTC_ExitInitMode+0x84>)
 80059a6:	2180      	movs	r1, #128	@ 0x80
 80059a8:	438a      	bics	r2, r1
 80059aa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80059ac:	4b19      	ldr	r3, [pc, #100]	@ (8005a14 <RTC_ExitInitMode+0x84>)
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	2220      	movs	r2, #32
 80059b2:	4013      	ands	r3, r2
 80059b4:	d10d      	bne.n	80059d2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	0018      	movs	r0, r3
 80059ba:	f7ff ff81 	bl	80058c0 <HAL_RTC_WaitForSynchro>
 80059be:	1e03      	subs	r3, r0, #0
 80059c0:	d021      	beq.n	8005a06 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2229      	movs	r2, #41	@ 0x29
 80059c6:	2103      	movs	r1, #3
 80059c8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80059ca:	193b      	adds	r3, r7, r4
 80059cc:	2203      	movs	r2, #3
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	e019      	b.n	8005a06 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80059d2:	4b10      	ldr	r3, [pc, #64]	@ (8005a14 <RTC_ExitInitMode+0x84>)
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005a14 <RTC_ExitInitMode+0x84>)
 80059d8:	2120      	movs	r1, #32
 80059da:	438a      	bics	r2, r1
 80059dc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	0018      	movs	r0, r3
 80059e2:	f7ff ff6d 	bl	80058c0 <HAL_RTC_WaitForSynchro>
 80059e6:	1e03      	subs	r3, r0, #0
 80059e8:	d007      	beq.n	80059fa <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2229      	movs	r2, #41	@ 0x29
 80059ee:	2103      	movs	r1, #3
 80059f0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80059f2:	230f      	movs	r3, #15
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	2203      	movs	r2, #3
 80059f8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80059fa:	4b06      	ldr	r3, [pc, #24]	@ (8005a14 <RTC_ExitInitMode+0x84>)
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	4b05      	ldr	r3, [pc, #20]	@ (8005a14 <RTC_ExitInitMode+0x84>)
 8005a00:	2120      	movs	r1, #32
 8005a02:	430a      	orrs	r2, r1
 8005a04:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005a06:	230f      	movs	r3, #15
 8005a08:	18fb      	adds	r3, r7, r3
 8005a0a:	781b      	ldrb	r3, [r3, #0]
}
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	b005      	add	sp, #20
 8005a12:	bd90      	pop	{r4, r7, pc}
 8005a14:	40002800 	.word	0x40002800

08005a18 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	0002      	movs	r2, r0
 8005a20:	1dfb      	adds	r3, r7, #7
 8005a22:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005a28:	230b      	movs	r3, #11
 8005a2a:	18fb      	adds	r3, r7, r3
 8005a2c:	1dfa      	adds	r2, r7, #7
 8005a2e:	7812      	ldrb	r2, [r2, #0]
 8005a30:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005a32:	e008      	b.n	8005a46 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3301      	adds	r3, #1
 8005a38:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005a3a:	220b      	movs	r2, #11
 8005a3c:	18bb      	adds	r3, r7, r2
 8005a3e:	18ba      	adds	r2, r7, r2
 8005a40:	7812      	ldrb	r2, [r2, #0]
 8005a42:	3a0a      	subs	r2, #10
 8005a44:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005a46:	210b      	movs	r1, #11
 8005a48:	187b      	adds	r3, r7, r1
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b09      	cmp	r3, #9
 8005a4e:	d8f1      	bhi.n	8005a34 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	187b      	adds	r3, r7, r1
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	b2db      	uxtb	r3, r3
}
 8005a60:	0018      	movs	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b004      	add	sp, #16
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	0002      	movs	r2, r0
 8005a70:	1dfb      	adds	r3, r7, #7
 8005a72:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005a74:	1dfb      	adds	r3, r7, #7
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	091b      	lsrs	r3, r3, #4
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	001a      	movs	r2, r3
 8005a7e:	0013      	movs	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	189b      	adds	r3, r3, r2
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	1dfb      	adds	r3, r7, #7
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	210f      	movs	r1, #15
 8005a92:	400b      	ands	r3, r1
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	18d3      	adds	r3, r2, r3
 8005a98:	b2db      	uxtb	r3, r3
}
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	b004      	add	sp, #16
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2228      	movs	r2, #40	@ 0x28
 8005ab4:	5c9b      	ldrb	r3, [r3, r2]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d101      	bne.n	8005abe <HAL_RTCEx_SetSmoothCalib+0x1c>
 8005aba:	2302      	movs	r3, #2
 8005abc:	e04f      	b.n	8005b5e <HAL_RTCEx_SetSmoothCalib+0xbc>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2228      	movs	r2, #40	@ 0x28
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2229      	movs	r2, #41	@ 0x29
 8005aca:	2102      	movs	r1, #2
 8005acc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	22ca      	movs	r2, #202	@ 0xca
 8005ad4:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2253      	movs	r2, #83	@ 0x53
 8005adc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	2380      	movs	r3, #128	@ 0x80
 8005ae6:	025b      	lsls	r3, r3, #9
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d022      	beq.n	8005b32 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8005aec:	f7fc fe58 	bl	80027a0 <HAL_GetTick>
 8005af0:	0003      	movs	r3, r0
 8005af2:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8005af4:	e016      	b.n	8005b24 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005af6:	f7fc fe53 	bl	80027a0 <HAL_GetTick>
 8005afa:	0002      	movs	r2, r0
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	1ad2      	subs	r2, r2, r3
 8005b00:	23fa      	movs	r3, #250	@ 0xfa
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d90d      	bls.n	8005b24 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	22ff      	movs	r2, #255	@ 0xff
 8005b0e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2229      	movs	r2, #41	@ 0x29
 8005b14:	2103      	movs	r1, #3
 8005b16:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2228      	movs	r2, #40	@ 0x28
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e01c      	b.n	8005b5e <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	2380      	movs	r3, #128	@ 0x80
 8005b2c:	025b      	lsls	r3, r3, #9
 8005b2e:	4013      	ands	r3, r2
 8005b30:	d1e1      	bne.n	8005af6 <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	0011      	movs	r1, r2
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	22ff      	movs	r2, #255	@ 0xff
 8005b4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2229      	movs	r2, #41	@ 0x29
 8005b50:	2101      	movs	r1, #1
 8005b52:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2228      	movs	r2, #40	@ 0x28
 8005b58:	2100      	movs	r1, #0
 8005b5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	0018      	movs	r0, r3
 8005b60:	46bd      	mov	sp, r7
 8005b62:	b006      	add	sp, #24
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2228      	movs	r2, #40	@ 0x28
 8005b76:	5c9b      	ldrb	r3, [r3, r2]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e035      	b.n	8005bec <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2228      	movs	r2, #40	@ 0x28
 8005b84:	2101      	movs	r1, #1
 8005b86:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2229      	movs	r2, #41	@ 0x29
 8005b8c:	2102      	movs	r1, #2
 8005b8e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	22ca      	movs	r2, #202	@ 0xca
 8005b96:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2253      	movs	r2, #83	@ 0x53
 8005b9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4912      	ldr	r1, [pc, #72]	@ (8005bf4 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8005bac:	400a      	ands	r2, r1
 8005bae:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6999      	ldr	r1, [r3, #24]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699a      	ldr	r2, [r3, #24]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2180      	movs	r1, #128	@ 0x80
 8005bcc:	0409      	lsls	r1, r1, #16
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	22ff      	movs	r2, #255	@ 0xff
 8005bd8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2229      	movs	r2, #41	@ 0x29
 8005bde:	2101      	movs	r1, #1
 8005be0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2228      	movs	r2, #40	@ 0x28
 8005be6:	2100      	movs	r1, #0
 8005be8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	0018      	movs	r0, r3
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	b002      	add	sp, #8
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	fff7ffff 	.word	0xfff7ffff

08005bf8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005c00:	46c0      	nop			@ (mov r8, r8)
 8005c02:	46bd      	mov	sp, r7
 8005c04:	b002      	add	sp, #8
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	001a      	movs	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	18d3      	adds	r3, r2, r3
 8005c20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	3301      	adds	r3, #1
 8005c26:	33ff      	adds	r3, #255	@ 0xff
 8005c28:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	18d3      	adds	r3, r2, r3
 8005c32:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	601a      	str	r2, [r3, #0]
}
 8005c3a:	46c0      	nop			@ (mov r8, r8)
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	b006      	add	sp, #24
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	001a      	movs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	18d3      	adds	r3, r2, r3
 8005c58:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	33ff      	adds	r3, #255	@ 0xff
 8005c60:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	18d3      	adds	r3, r2, r3
 8005c6a:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	681b      	ldr	r3, [r3, #0]
}
 8005c70:	0018      	movs	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b004      	add	sp, #16
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e0a8      	b.n	8005ddc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d109      	bne.n	8005ca6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	2382      	movs	r3, #130	@ 0x82
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d009      	beq.n	8005cb2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	61da      	str	r2, [r3, #28]
 8005ca4:	e005      	b.n	8005cb2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	225d      	movs	r2, #93	@ 0x5d
 8005cbc:	5c9b      	ldrb	r3, [r3, r2]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d107      	bne.n	8005cd4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	225c      	movs	r2, #92	@ 0x5c
 8005cc8:	2100      	movs	r1, #0
 8005cca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f7fc fb64 	bl	800239c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	225d      	movs	r2, #93	@ 0x5d
 8005cd8:	2102      	movs	r1, #2
 8005cda:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2140      	movs	r1, #64	@ 0x40
 8005ce8:	438a      	bics	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	23e0      	movs	r3, #224	@ 0xe0
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d902      	bls.n	8005cfe <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	e002      	b.n	8005d04 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cfe:	2380      	movs	r3, #128	@ 0x80
 8005d00:	015b      	lsls	r3, r3, #5
 8005d02:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	23f0      	movs	r3, #240	@ 0xf0
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d008      	beq.n	8005d22 <HAL_SPI_Init+0xaa>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	23e0      	movs	r3, #224	@ 0xe0
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d002      	beq.n	8005d22 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	2382      	movs	r3, #130	@ 0x82
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6899      	ldr	r1, [r3, #8]
 8005d30:	2384      	movs	r3, #132	@ 0x84
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	400b      	ands	r3, r1
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	400b      	ands	r3, r1
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	2101      	movs	r1, #1
 8005d48:	400b      	ands	r3, r1
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6999      	ldr	r1, [r3, #24]
 8005d50:	2380      	movs	r3, #128	@ 0x80
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	400b      	ands	r3, r1
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	2138      	movs	r1, #56	@ 0x38
 8005d5e:	400b      	ands	r3, r1
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	2180      	movs	r1, #128	@ 0x80
 8005d68:	400b      	ands	r3, r1
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	0011      	movs	r1, r2
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d72:	2380      	movs	r3, #128	@ 0x80
 8005d74:	019b      	lsls	r3, r3, #6
 8005d76:	401a      	ands	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	0c1b      	lsrs	r3, r3, #16
 8005d86:	2204      	movs	r2, #4
 8005d88:	401a      	ands	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	2110      	movs	r1, #16
 8005d90:	400b      	ands	r3, r1
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d98:	2108      	movs	r1, #8
 8005d9a:	400b      	ands	r3, r1
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68d9      	ldr	r1, [r3, #12]
 8005da2:	23f0      	movs	r3, #240	@ 0xf0
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	400b      	ands	r3, r1
 8005da8:	431a      	orrs	r2, r3
 8005daa:	0011      	movs	r1, r2
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	2380      	movs	r3, #128	@ 0x80
 8005db0:	015b      	lsls	r3, r3, #5
 8005db2:	401a      	ands	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69da      	ldr	r2, [r3, #28]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4907      	ldr	r1, [pc, #28]	@ (8005de4 <HAL_SPI_Init+0x16c>)
 8005dc8:	400a      	ands	r2, r1
 8005dca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	225d      	movs	r2, #93	@ 0x5d
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	0018      	movs	r0, r3
 8005dde:	46bd      	mov	sp, r7
 8005de0:	b004      	add	sp, #16
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	fffff7ff 	.word	0xfffff7ff

08005de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e04a      	b.n	8005e90 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	223d      	movs	r2, #61	@ 0x3d
 8005dfe:	5c9b      	ldrb	r3, [r3, r2]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d107      	bne.n	8005e16 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	223c      	movs	r2, #60	@ 0x3c
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	0018      	movs	r0, r3
 8005e12:	f7fc fb3f 	bl	8002494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	223d      	movs	r2, #61	@ 0x3d
 8005e1a:	2102      	movs	r1, #2
 8005e1c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3304      	adds	r3, #4
 8005e26:	0019      	movs	r1, r3
 8005e28:	0010      	movs	r0, r2
 8005e2a:	f000 fc87 	bl	800673c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2248      	movs	r2, #72	@ 0x48
 8005e32:	2101      	movs	r1, #1
 8005e34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	223e      	movs	r2, #62	@ 0x3e
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	5499      	strb	r1, [r3, r2]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	223f      	movs	r2, #63	@ 0x3f
 8005e42:	2101      	movs	r1, #1
 8005e44:	5499      	strb	r1, [r3, r2]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2240      	movs	r2, #64	@ 0x40
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	5499      	strb	r1, [r3, r2]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2241      	movs	r2, #65	@ 0x41
 8005e52:	2101      	movs	r1, #1
 8005e54:	5499      	strb	r1, [r3, r2]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2242      	movs	r2, #66	@ 0x42
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	5499      	strb	r1, [r3, r2]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2243      	movs	r2, #67	@ 0x43
 8005e62:	2101      	movs	r1, #1
 8005e64:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2244      	movs	r2, #68	@ 0x44
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	5499      	strb	r1, [r3, r2]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2245      	movs	r2, #69	@ 0x45
 8005e72:	2101      	movs	r1, #1
 8005e74:	5499      	strb	r1, [r3, r2]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2246      	movs	r2, #70	@ 0x46
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	5499      	strb	r1, [r3, r2]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2247      	movs	r2, #71	@ 0x47
 8005e82:	2101      	movs	r1, #1
 8005e84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	223d      	movs	r2, #61	@ 0x3d
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	0018      	movs	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	b002      	add	sp, #8
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	223d      	movs	r2, #61	@ 0x3d
 8005ea4:	5c9b      	ldrb	r3, [r3, r2]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d001      	beq.n	8005eb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e035      	b.n	8005f1c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	223d      	movs	r2, #61	@ 0x3d
 8005eb4:	2102      	movs	r1, #2
 8005eb6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a19      	ldr	r2, [pc, #100]	@ (8005f24 <HAL_TIM_Base_Start+0x8c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_TIM_Base_Start+0x40>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	2380      	movs	r3, #128	@ 0x80
 8005ec8:	05db      	lsls	r3, r3, #23
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d004      	beq.n	8005ed8 <HAL_TIM_Base_Start+0x40>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a15      	ldr	r2, [pc, #84]	@ (8005f28 <HAL_TIM_Base_Start+0x90>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d116      	bne.n	8005f06 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	4a13      	ldr	r2, [pc, #76]	@ (8005f2c <HAL_TIM_Base_Start+0x94>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b06      	cmp	r3, #6
 8005ee8:	d016      	beq.n	8005f18 <HAL_TIM_Base_Start+0x80>
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	2380      	movs	r3, #128	@ 0x80
 8005eee:	025b      	lsls	r3, r3, #9
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d011      	beq.n	8005f18 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2101      	movs	r1, #1
 8005f00:	430a      	orrs	r2, r1
 8005f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f04:	e008      	b.n	8005f18 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2101      	movs	r1, #1
 8005f12:	430a      	orrs	r2, r1
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	e000      	b.n	8005f1a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f18:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	b004      	add	sp, #16
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40012c00 	.word	0x40012c00
 8005f28:	40000400 	.word	0x40000400
 8005f2c:	00010007 	.word	0x00010007

08005f30 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	4a0d      	ldr	r2, [pc, #52]	@ (8005f74 <HAL_TIM_Base_Stop+0x44>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	d10d      	bne.n	8005f60 <HAL_TIM_Base_Stop+0x30>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	4a0b      	ldr	r2, [pc, #44]	@ (8005f78 <HAL_TIM_Base_Stop+0x48>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d107      	bne.n	8005f60 <HAL_TIM_Base_Stop+0x30>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	438a      	bics	r2, r1
 8005f5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	223d      	movs	r2, #61	@ 0x3d
 8005f64:	2101      	movs	r1, #1
 8005f66:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	b002      	add	sp, #8
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	46c0      	nop			@ (mov r8, r8)
 8005f74:	00001111 	.word	0x00001111
 8005f78:	00000444 	.word	0x00000444

08005f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	223d      	movs	r2, #61	@ 0x3d
 8005f88:	5c9b      	ldrb	r3, [r3, r2]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d001      	beq.n	8005f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e03d      	b.n	8006010 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	223d      	movs	r2, #61	@ 0x3d
 8005f98:	2102      	movs	r1, #2
 8005f9a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a19      	ldr	r2, [pc, #100]	@ (8006018 <HAL_TIM_Base_Start_IT+0x9c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00a      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x50>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	2380      	movs	r3, #128	@ 0x80
 8005fbc:	05db      	lsls	r3, r3, #23
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d004      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x50>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a15      	ldr	r2, [pc, #84]	@ (800601c <HAL_TIM_Base_Start_IT+0xa0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d116      	bne.n	8005ffa <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	4a13      	ldr	r2, [pc, #76]	@ (8006020 <HAL_TIM_Base_Start_IT+0xa4>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b06      	cmp	r3, #6
 8005fdc:	d016      	beq.n	800600c <HAL_TIM_Base_Start_IT+0x90>
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	2380      	movs	r3, #128	@ 0x80
 8005fe2:	025b      	lsls	r3, r3, #9
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d011      	beq.n	800600c <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff8:	e008      	b.n	800600c <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2101      	movs	r1, #1
 8006006:	430a      	orrs	r2, r1
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	e000      	b.n	800600e <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	0018      	movs	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	b004      	add	sp, #16
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40012c00 	.word	0x40012c00
 800601c:	40000400 	.word	0x40000400
 8006020:	00010007 	.word	0x00010007

08006024 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2101      	movs	r1, #1
 8006038:	438a      	bics	r2, r1
 800603a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	4a0d      	ldr	r2, [pc, #52]	@ (8006078 <HAL_TIM_Base_Stop_IT+0x54>)
 8006044:	4013      	ands	r3, r2
 8006046:	d10d      	bne.n	8006064 <HAL_TIM_Base_Stop_IT+0x40>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	4a0b      	ldr	r2, [pc, #44]	@ (800607c <HAL_TIM_Base_Stop_IT+0x58>)
 8006050:	4013      	ands	r3, r2
 8006052:	d107      	bne.n	8006064 <HAL_TIM_Base_Stop_IT+0x40>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2101      	movs	r1, #1
 8006060:	438a      	bics	r2, r1
 8006062:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	223d      	movs	r2, #61	@ 0x3d
 8006068:	2101      	movs	r1, #1
 800606a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	0018      	movs	r0, r3
 8006070:	46bd      	mov	sp, r7
 8006072:	b002      	add	sp, #8
 8006074:	bd80      	pop	{r7, pc}
 8006076:	46c0      	nop			@ (mov r8, r8)
 8006078:	00001111 	.word	0x00001111
 800607c:	00000444 	.word	0x00000444

08006080 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e04a      	b.n	8006128 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	223d      	movs	r2, #61	@ 0x3d
 8006096:	5c9b      	ldrb	r3, [r3, r2]
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d107      	bne.n	80060ae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	223c      	movs	r2, #60	@ 0x3c
 80060a2:	2100      	movs	r1, #0
 80060a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	0018      	movs	r0, r3
 80060aa:	f7fc f9d7 	bl	800245c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	223d      	movs	r2, #61	@ 0x3d
 80060b2:	2102      	movs	r1, #2
 80060b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3304      	adds	r3, #4
 80060be:	0019      	movs	r1, r3
 80060c0:	0010      	movs	r0, r2
 80060c2:	f000 fb3b 	bl	800673c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2248      	movs	r2, #72	@ 0x48
 80060ca:	2101      	movs	r1, #1
 80060cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	223e      	movs	r2, #62	@ 0x3e
 80060d2:	2101      	movs	r1, #1
 80060d4:	5499      	strb	r1, [r3, r2]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	223f      	movs	r2, #63	@ 0x3f
 80060da:	2101      	movs	r1, #1
 80060dc:	5499      	strb	r1, [r3, r2]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2240      	movs	r2, #64	@ 0x40
 80060e2:	2101      	movs	r1, #1
 80060e4:	5499      	strb	r1, [r3, r2]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2241      	movs	r2, #65	@ 0x41
 80060ea:	2101      	movs	r1, #1
 80060ec:	5499      	strb	r1, [r3, r2]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2242      	movs	r2, #66	@ 0x42
 80060f2:	2101      	movs	r1, #1
 80060f4:	5499      	strb	r1, [r3, r2]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2243      	movs	r2, #67	@ 0x43
 80060fa:	2101      	movs	r1, #1
 80060fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2244      	movs	r2, #68	@ 0x44
 8006102:	2101      	movs	r1, #1
 8006104:	5499      	strb	r1, [r3, r2]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2245      	movs	r2, #69	@ 0x45
 800610a:	2101      	movs	r1, #1
 800610c:	5499      	strb	r1, [r3, r2]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2246      	movs	r2, #70	@ 0x46
 8006112:	2101      	movs	r1, #1
 8006114:	5499      	strb	r1, [r3, r2]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2247      	movs	r2, #71	@ 0x47
 800611a:	2101      	movs	r1, #1
 800611c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	223d      	movs	r2, #61	@ 0x3d
 8006122:	2101      	movs	r1, #1
 8006124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	0018      	movs	r0, r3
 800612a:	46bd      	mov	sp, r7
 800612c:	b002      	add	sp, #8
 800612e:	bd80      	pop	{r7, pc}

08006130 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d108      	bne.n	8006152 <HAL_TIM_PWM_Start+0x22>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	223e      	movs	r2, #62	@ 0x3e
 8006144:	5c9b      	ldrb	r3, [r3, r2]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	3b01      	subs	r3, #1
 800614a:	1e5a      	subs	r2, r3, #1
 800614c:	4193      	sbcs	r3, r2
 800614e:	b2db      	uxtb	r3, r3
 8006150:	e037      	b.n	80061c2 <HAL_TIM_PWM_Start+0x92>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b04      	cmp	r3, #4
 8006156:	d108      	bne.n	800616a <HAL_TIM_PWM_Start+0x3a>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	223f      	movs	r2, #63	@ 0x3f
 800615c:	5c9b      	ldrb	r3, [r3, r2]
 800615e:	b2db      	uxtb	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	1e5a      	subs	r2, r3, #1
 8006164:	4193      	sbcs	r3, r2
 8006166:	b2db      	uxtb	r3, r3
 8006168:	e02b      	b.n	80061c2 <HAL_TIM_PWM_Start+0x92>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b08      	cmp	r3, #8
 800616e:	d108      	bne.n	8006182 <HAL_TIM_PWM_Start+0x52>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2240      	movs	r2, #64	@ 0x40
 8006174:	5c9b      	ldrb	r3, [r3, r2]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	3b01      	subs	r3, #1
 800617a:	1e5a      	subs	r2, r3, #1
 800617c:	4193      	sbcs	r3, r2
 800617e:	b2db      	uxtb	r3, r3
 8006180:	e01f      	b.n	80061c2 <HAL_TIM_PWM_Start+0x92>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b0c      	cmp	r3, #12
 8006186:	d108      	bne.n	800619a <HAL_TIM_PWM_Start+0x6a>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2241      	movs	r2, #65	@ 0x41
 800618c:	5c9b      	ldrb	r3, [r3, r2]
 800618e:	b2db      	uxtb	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	1e5a      	subs	r2, r3, #1
 8006194:	4193      	sbcs	r3, r2
 8006196:	b2db      	uxtb	r3, r3
 8006198:	e013      	b.n	80061c2 <HAL_TIM_PWM_Start+0x92>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b10      	cmp	r3, #16
 800619e:	d108      	bne.n	80061b2 <HAL_TIM_PWM_Start+0x82>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2242      	movs	r2, #66	@ 0x42
 80061a4:	5c9b      	ldrb	r3, [r3, r2]
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	1e5a      	subs	r2, r3, #1
 80061ac:	4193      	sbcs	r3, r2
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	e007      	b.n	80061c2 <HAL_TIM_PWM_Start+0x92>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2243      	movs	r2, #67	@ 0x43
 80061b6:	5c9b      	ldrb	r3, [r3, r2]
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	1e5a      	subs	r2, r3, #1
 80061be:	4193      	sbcs	r3, r2
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e081      	b.n	80062ce <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d104      	bne.n	80061da <HAL_TIM_PWM_Start+0xaa>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	223e      	movs	r2, #62	@ 0x3e
 80061d4:	2102      	movs	r1, #2
 80061d6:	5499      	strb	r1, [r3, r2]
 80061d8:	e023      	b.n	8006222 <HAL_TIM_PWM_Start+0xf2>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d104      	bne.n	80061ea <HAL_TIM_PWM_Start+0xba>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	223f      	movs	r2, #63	@ 0x3f
 80061e4:	2102      	movs	r1, #2
 80061e6:	5499      	strb	r1, [r3, r2]
 80061e8:	e01b      	b.n	8006222 <HAL_TIM_PWM_Start+0xf2>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d104      	bne.n	80061fa <HAL_TIM_PWM_Start+0xca>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2240      	movs	r2, #64	@ 0x40
 80061f4:	2102      	movs	r1, #2
 80061f6:	5499      	strb	r1, [r3, r2]
 80061f8:	e013      	b.n	8006222 <HAL_TIM_PWM_Start+0xf2>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b0c      	cmp	r3, #12
 80061fe:	d104      	bne.n	800620a <HAL_TIM_PWM_Start+0xda>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2241      	movs	r2, #65	@ 0x41
 8006204:	2102      	movs	r1, #2
 8006206:	5499      	strb	r1, [r3, r2]
 8006208:	e00b      	b.n	8006222 <HAL_TIM_PWM_Start+0xf2>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b10      	cmp	r3, #16
 800620e:	d104      	bne.n	800621a <HAL_TIM_PWM_Start+0xea>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2242      	movs	r2, #66	@ 0x42
 8006214:	2102      	movs	r1, #2
 8006216:	5499      	strb	r1, [r3, r2]
 8006218:	e003      	b.n	8006222 <HAL_TIM_PWM_Start+0xf2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2243      	movs	r2, #67	@ 0x43
 800621e:	2102      	movs	r1, #2
 8006220:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	2201      	movs	r2, #1
 800622a:	0018      	movs	r0, r3
 800622c:	f000 fda6 	bl	8006d7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a28      	ldr	r2, [pc, #160]	@ (80062d8 <HAL_TIM_PWM_Start+0x1a8>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d009      	beq.n	800624e <HAL_TIM_PWM_Start+0x11e>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a27      	ldr	r2, [pc, #156]	@ (80062dc <HAL_TIM_PWM_Start+0x1ac>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d004      	beq.n	800624e <HAL_TIM_PWM_Start+0x11e>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a25      	ldr	r2, [pc, #148]	@ (80062e0 <HAL_TIM_PWM_Start+0x1b0>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d101      	bne.n	8006252 <HAL_TIM_PWM_Start+0x122>
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <HAL_TIM_PWM_Start+0x124>
 8006252:	2300      	movs	r3, #0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d008      	beq.n	800626a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2180      	movs	r1, #128	@ 0x80
 8006264:	0209      	lsls	r1, r1, #8
 8006266:	430a      	orrs	r2, r1
 8006268:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1a      	ldr	r2, [pc, #104]	@ (80062d8 <HAL_TIM_PWM_Start+0x1a8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00a      	beq.n	800628a <HAL_TIM_PWM_Start+0x15a>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	2380      	movs	r3, #128	@ 0x80
 800627a:	05db      	lsls	r3, r3, #23
 800627c:	429a      	cmp	r2, r3
 800627e:	d004      	beq.n	800628a <HAL_TIM_PWM_Start+0x15a>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a17      	ldr	r2, [pc, #92]	@ (80062e4 <HAL_TIM_PWM_Start+0x1b4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d116      	bne.n	80062b8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	4a15      	ldr	r2, [pc, #84]	@ (80062e8 <HAL_TIM_PWM_Start+0x1b8>)
 8006292:	4013      	ands	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b06      	cmp	r3, #6
 800629a:	d016      	beq.n	80062ca <HAL_TIM_PWM_Start+0x19a>
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	2380      	movs	r3, #128	@ 0x80
 80062a0:	025b      	lsls	r3, r3, #9
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d011      	beq.n	80062ca <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2101      	movs	r1, #1
 80062b2:	430a      	orrs	r2, r1
 80062b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b6:	e008      	b.n	80062ca <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2101      	movs	r1, #1
 80062c4:	430a      	orrs	r2, r1
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	e000      	b.n	80062cc <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ca:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	0018      	movs	r0, r3
 80062d0:	46bd      	mov	sp, r7
 80062d2:	b004      	add	sp, #16
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	46c0      	nop			@ (mov r8, r8)
 80062d8:	40012c00 	.word	0x40012c00
 80062dc:	40014400 	.word	0x40014400
 80062e0:	40014800 	.word	0x40014800
 80062e4:	40000400 	.word	0x40000400
 80062e8:	00010007 	.word	0x00010007

080062ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2202      	movs	r2, #2
 8006308:	4013      	ands	r3, r2
 800630a:	d021      	beq.n	8006350 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2202      	movs	r2, #2
 8006310:	4013      	ands	r3, r2
 8006312:	d01d      	beq.n	8006350 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2203      	movs	r2, #3
 800631a:	4252      	negs	r2, r2
 800631c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	2203      	movs	r2, #3
 800632c:	4013      	ands	r3, r2
 800632e:	d004      	beq.n	800633a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	0018      	movs	r0, r3
 8006334:	f000 f9ea 	bl	800670c <HAL_TIM_IC_CaptureCallback>
 8006338:	e007      	b.n	800634a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	0018      	movs	r0, r3
 800633e:	f000 f9dd 	bl	80066fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	0018      	movs	r0, r3
 8006346:	f000 f9e9 	bl	800671c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2204      	movs	r2, #4
 8006354:	4013      	ands	r3, r2
 8006356:	d022      	beq.n	800639e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2204      	movs	r2, #4
 800635c:	4013      	ands	r3, r2
 800635e:	d01e      	beq.n	800639e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2205      	movs	r2, #5
 8006366:	4252      	negs	r2, r2
 8006368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2202      	movs	r2, #2
 800636e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	23c0      	movs	r3, #192	@ 0xc0
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4013      	ands	r3, r2
 800637c:	d004      	beq.n	8006388 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	0018      	movs	r0, r3
 8006382:	f000 f9c3 	bl	800670c <HAL_TIM_IC_CaptureCallback>
 8006386:	e007      	b.n	8006398 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	0018      	movs	r0, r3
 800638c:	f000 f9b6 	bl	80066fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	0018      	movs	r0, r3
 8006394:	f000 f9c2 	bl	800671c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2208      	movs	r2, #8
 80063a2:	4013      	ands	r3, r2
 80063a4:	d021      	beq.n	80063ea <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2208      	movs	r2, #8
 80063aa:	4013      	ands	r3, r2
 80063ac:	d01d      	beq.n	80063ea <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2209      	movs	r2, #9
 80063b4:	4252      	negs	r2, r2
 80063b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2204      	movs	r2, #4
 80063bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	2203      	movs	r2, #3
 80063c6:	4013      	ands	r3, r2
 80063c8:	d004      	beq.n	80063d4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	0018      	movs	r0, r3
 80063ce:	f000 f99d 	bl	800670c <HAL_TIM_IC_CaptureCallback>
 80063d2:	e007      	b.n	80063e4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	0018      	movs	r0, r3
 80063d8:	f000 f990 	bl	80066fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	0018      	movs	r0, r3
 80063e0:	f000 f99c 	bl	800671c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2210      	movs	r2, #16
 80063ee:	4013      	ands	r3, r2
 80063f0:	d022      	beq.n	8006438 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2210      	movs	r2, #16
 80063f6:	4013      	ands	r3, r2
 80063f8:	d01e      	beq.n	8006438 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2211      	movs	r2, #17
 8006400:	4252      	negs	r2, r2
 8006402:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2208      	movs	r2, #8
 8006408:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69da      	ldr	r2, [r3, #28]
 8006410:	23c0      	movs	r3, #192	@ 0xc0
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4013      	ands	r3, r2
 8006416:	d004      	beq.n	8006422 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	0018      	movs	r0, r3
 800641c:	f000 f976 	bl	800670c <HAL_TIM_IC_CaptureCallback>
 8006420:	e007      	b.n	8006432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	0018      	movs	r0, r3
 8006426:	f000 f969 	bl	80066fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	0018      	movs	r0, r3
 800642e:	f000 f975 	bl	800671c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2201      	movs	r2, #1
 800643c:	4013      	ands	r3, r2
 800643e:	d00c      	beq.n	800645a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2201      	movs	r2, #1
 8006444:	4013      	ands	r3, r2
 8006446:	d008      	beq.n	800645a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2202      	movs	r2, #2
 800644e:	4252      	negs	r2, r2
 8006450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	0018      	movs	r0, r3
 8006456:	f7fb f95b 	bl	8001710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2280      	movs	r2, #128	@ 0x80
 800645e:	4013      	ands	r3, r2
 8006460:	d104      	bne.n	800646c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	2380      	movs	r3, #128	@ 0x80
 8006466:	019b      	lsls	r3, r3, #6
 8006468:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800646a:	d00b      	beq.n	8006484 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2280      	movs	r2, #128	@ 0x80
 8006470:	4013      	ands	r3, r2
 8006472:	d007      	beq.n	8006484 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1e      	ldr	r2, [pc, #120]	@ (80064f4 <HAL_TIM_IRQHandler+0x208>)
 800647a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	0018      	movs	r0, r3
 8006480:	f000 fd10 	bl	8006ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	2380      	movs	r3, #128	@ 0x80
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	4013      	ands	r3, r2
 800648c:	d00b      	beq.n	80064a6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2280      	movs	r2, #128	@ 0x80
 8006492:	4013      	ands	r3, r2
 8006494:	d007      	beq.n	80064a6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a17      	ldr	r2, [pc, #92]	@ (80064f8 <HAL_TIM_IRQHandler+0x20c>)
 800649c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	0018      	movs	r0, r3
 80064a2:	f000 fd07 	bl	8006eb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2240      	movs	r2, #64	@ 0x40
 80064aa:	4013      	ands	r3, r2
 80064ac:	d00c      	beq.n	80064c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2240      	movs	r2, #64	@ 0x40
 80064b2:	4013      	ands	r3, r2
 80064b4:	d008      	beq.n	80064c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2241      	movs	r2, #65	@ 0x41
 80064bc:	4252      	negs	r2, r2
 80064be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	0018      	movs	r0, r3
 80064c4:	f000 f932 	bl	800672c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2220      	movs	r2, #32
 80064cc:	4013      	ands	r3, r2
 80064ce:	d00c      	beq.n	80064ea <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	4013      	ands	r3, r2
 80064d6:	d008      	beq.n	80064ea <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2221      	movs	r2, #33	@ 0x21
 80064de:	4252      	negs	r2, r2
 80064e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	0018      	movs	r0, r3
 80064e6:	f000 fcd5 	bl	8006e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064ea:	46c0      	nop			@ (mov r8, r8)
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b004      	add	sp, #16
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	46c0      	nop			@ (mov r8, r8)
 80064f4:	ffffdf7f 	.word	0xffffdf7f
 80064f8:	fffffeff 	.word	0xfffffeff

080064fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006508:	2317      	movs	r3, #23
 800650a:	18fb      	adds	r3, r7, r3
 800650c:	2200      	movs	r2, #0
 800650e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	223c      	movs	r2, #60	@ 0x3c
 8006514:	5c9b      	ldrb	r3, [r3, r2]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_TIM_PWM_ConfigChannel+0x22>
 800651a:	2302      	movs	r3, #2
 800651c:	e0e5      	b.n	80066ea <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	223c      	movs	r2, #60	@ 0x3c
 8006522:	2101      	movs	r1, #1
 8006524:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b14      	cmp	r3, #20
 800652a:	d900      	bls.n	800652e <HAL_TIM_PWM_ConfigChannel+0x32>
 800652c:	e0d1      	b.n	80066d2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	009a      	lsls	r2, r3, #2
 8006532:	4b70      	ldr	r3, [pc, #448]	@ (80066f4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006534:	18d3      	adds	r3, r2, r3
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	0011      	movs	r1, r2
 8006542:	0018      	movs	r0, r3
 8006544:	f000 f97e 	bl	8006844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699a      	ldr	r2, [r3, #24]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2108      	movs	r1, #8
 8006554:	430a      	orrs	r2, r1
 8006556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2104      	movs	r1, #4
 8006564:	438a      	bics	r2, r1
 8006566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6999      	ldr	r1, [r3, #24]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	691a      	ldr	r2, [r3, #16]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	619a      	str	r2, [r3, #24]
      break;
 800657a:	e0af      	b.n	80066dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	0011      	movs	r1, r2
 8006584:	0018      	movs	r0, r3
 8006586:	f000 f9dd 	bl	8006944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	699a      	ldr	r2, [r3, #24]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2180      	movs	r1, #128	@ 0x80
 8006596:	0109      	lsls	r1, r1, #4
 8006598:	430a      	orrs	r2, r1
 800659a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4954      	ldr	r1, [pc, #336]	@ (80066f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80065a8:	400a      	ands	r2, r1
 80065aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6999      	ldr	r1, [r3, #24]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	021a      	lsls	r2, r3, #8
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	619a      	str	r2, [r3, #24]
      break;
 80065c0:	e08c      	b.n	80066dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	0011      	movs	r1, r2
 80065ca:	0018      	movs	r0, r3
 80065cc:	f000 fa38 	bl	8006a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	69da      	ldr	r2, [r3, #28]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2108      	movs	r1, #8
 80065dc:	430a      	orrs	r2, r1
 80065de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69da      	ldr	r2, [r3, #28]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2104      	movs	r1, #4
 80065ec:	438a      	bics	r2, r1
 80065ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69d9      	ldr	r1, [r3, #28]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	691a      	ldr	r2, [r3, #16]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	61da      	str	r2, [r3, #28]
      break;
 8006602:	e06b      	b.n	80066dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	0011      	movs	r1, r2
 800660c:	0018      	movs	r0, r3
 800660e:	f000 fa99 	bl	8006b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69da      	ldr	r2, [r3, #28]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2180      	movs	r1, #128	@ 0x80
 800661e:	0109      	lsls	r1, r1, #4
 8006620:	430a      	orrs	r2, r1
 8006622:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	69da      	ldr	r2, [r3, #28]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4932      	ldr	r1, [pc, #200]	@ (80066f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006630:	400a      	ands	r2, r1
 8006632:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	69d9      	ldr	r1, [r3, #28]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	021a      	lsls	r2, r3, #8
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	61da      	str	r2, [r3, #28]
      break;
 8006648:	e048      	b.n	80066dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	0011      	movs	r1, r2
 8006652:	0018      	movs	r0, r3
 8006654:	f000 fada 	bl	8006c0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2108      	movs	r1, #8
 8006664:	430a      	orrs	r2, r1
 8006666:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2104      	movs	r1, #4
 8006674:	438a      	bics	r2, r1
 8006676:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	691a      	ldr	r2, [r3, #16]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800668a:	e027      	b.n	80066dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	0011      	movs	r1, r2
 8006694:	0018      	movs	r0, r3
 8006696:	f000 fb13 	bl	8006cc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2180      	movs	r1, #128	@ 0x80
 80066a6:	0109      	lsls	r1, r1, #4
 80066a8:	430a      	orrs	r2, r1
 80066aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4910      	ldr	r1, [pc, #64]	@ (80066f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80066b8:	400a      	ands	r2, r1
 80066ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	021a      	lsls	r2, r3, #8
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80066d0:	e004      	b.n	80066dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80066d2:	2317      	movs	r3, #23
 80066d4:	18fb      	adds	r3, r7, r3
 80066d6:	2201      	movs	r2, #1
 80066d8:	701a      	strb	r2, [r3, #0]
      break;
 80066da:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	223c      	movs	r2, #60	@ 0x3c
 80066e0:	2100      	movs	r1, #0
 80066e2:	5499      	strb	r1, [r3, r2]

  return status;
 80066e4:	2317      	movs	r3, #23
 80066e6:	18fb      	adds	r3, r7, r3
 80066e8:	781b      	ldrb	r3, [r3, #0]
}
 80066ea:	0018      	movs	r0, r3
 80066ec:	46bd      	mov	sp, r7
 80066ee:	b006      	add	sp, #24
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	46c0      	nop			@ (mov r8, r8)
 80066f4:	08006fdc 	.word	0x08006fdc
 80066f8:	fffffbff 	.word	0xfffffbff

080066fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006704:	46c0      	nop			@ (mov r8, r8)
 8006706:	46bd      	mov	sp, r7
 8006708:	b002      	add	sp, #8
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006714:	46c0      	nop			@ (mov r8, r8)
 8006716:	46bd      	mov	sp, r7
 8006718:	b002      	add	sp, #8
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006724:	46c0      	nop			@ (mov r8, r8)
 8006726:	46bd      	mov	sp, r7
 8006728:	b002      	add	sp, #8
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006734:	46c0      	nop			@ (mov r8, r8)
 8006736:	46bd      	mov	sp, r7
 8006738:	b002      	add	sp, #8
 800673a:	bd80      	pop	{r7, pc}

0800673c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a37      	ldr	r2, [pc, #220]	@ (800682c <TIM_Base_SetConfig+0xf0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d008      	beq.n	8006766 <TIM_Base_SetConfig+0x2a>
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	2380      	movs	r3, #128	@ 0x80
 8006758:	05db      	lsls	r3, r3, #23
 800675a:	429a      	cmp	r2, r3
 800675c:	d003      	beq.n	8006766 <TIM_Base_SetConfig+0x2a>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a33      	ldr	r2, [pc, #204]	@ (8006830 <TIM_Base_SetConfig+0xf4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d108      	bne.n	8006778 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2270      	movs	r2, #112	@ 0x70
 800676a:	4393      	bics	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	4313      	orrs	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a2c      	ldr	r2, [pc, #176]	@ (800682c <TIM_Base_SetConfig+0xf0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d014      	beq.n	80067aa <TIM_Base_SetConfig+0x6e>
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	2380      	movs	r3, #128	@ 0x80
 8006784:	05db      	lsls	r3, r3, #23
 8006786:	429a      	cmp	r2, r3
 8006788:	d00f      	beq.n	80067aa <TIM_Base_SetConfig+0x6e>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a28      	ldr	r2, [pc, #160]	@ (8006830 <TIM_Base_SetConfig+0xf4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00b      	beq.n	80067aa <TIM_Base_SetConfig+0x6e>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a27      	ldr	r2, [pc, #156]	@ (8006834 <TIM_Base_SetConfig+0xf8>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d007      	beq.n	80067aa <TIM_Base_SetConfig+0x6e>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a26      	ldr	r2, [pc, #152]	@ (8006838 <TIM_Base_SetConfig+0xfc>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d003      	beq.n	80067aa <TIM_Base_SetConfig+0x6e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a25      	ldr	r2, [pc, #148]	@ (800683c <TIM_Base_SetConfig+0x100>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d108      	bne.n	80067bc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4a24      	ldr	r2, [pc, #144]	@ (8006840 <TIM_Base_SetConfig+0x104>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2280      	movs	r2, #128	@ 0x80
 80067c0:	4393      	bics	r3, r2
 80067c2:	001a      	movs	r2, r3
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a11      	ldr	r2, [pc, #68]	@ (800682c <TIM_Base_SetConfig+0xf0>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d007      	beq.n	80067fa <TIM_Base_SetConfig+0xbe>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a12      	ldr	r2, [pc, #72]	@ (8006838 <TIM_Base_SetConfig+0xfc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d003      	beq.n	80067fa <TIM_Base_SetConfig+0xbe>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a11      	ldr	r2, [pc, #68]	@ (800683c <TIM_Base_SetConfig+0x100>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d103      	bne.n	8006802 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	691a      	ldr	r2, [r3, #16]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	2201      	movs	r2, #1
 800680e:	4013      	ands	r3, r2
 8006810:	2b01      	cmp	r3, #1
 8006812:	d106      	bne.n	8006822 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2201      	movs	r2, #1
 800681a:	4393      	bics	r3, r2
 800681c:	001a      	movs	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	611a      	str	r2, [r3, #16]
  }
}
 8006822:	46c0      	nop			@ (mov r8, r8)
 8006824:	46bd      	mov	sp, r7
 8006826:	b004      	add	sp, #16
 8006828:	bd80      	pop	{r7, pc}
 800682a:	46c0      	nop			@ (mov r8, r8)
 800682c:	40012c00 	.word	0x40012c00
 8006830:	40000400 	.word	0x40000400
 8006834:	40002000 	.word	0x40002000
 8006838:	40014400 	.word	0x40014400
 800683c:	40014800 	.word	0x40014800
 8006840:	fffffcff 	.word	0xfffffcff

08006844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	2201      	movs	r2, #1
 800685a:	4393      	bics	r3, r2
 800685c:	001a      	movs	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4a2e      	ldr	r2, [pc, #184]	@ (800692c <TIM_OC1_SetConfig+0xe8>)
 8006872:	4013      	ands	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2203      	movs	r2, #3
 800687a:	4393      	bics	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	2202      	movs	r2, #2
 800688c:	4393      	bics	r3, r2
 800688e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	4313      	orrs	r3, r2
 8006898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a24      	ldr	r2, [pc, #144]	@ (8006930 <TIM_OC1_SetConfig+0xec>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d007      	beq.n	80068b2 <TIM_OC1_SetConfig+0x6e>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a23      	ldr	r2, [pc, #140]	@ (8006934 <TIM_OC1_SetConfig+0xf0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d003      	beq.n	80068b2 <TIM_OC1_SetConfig+0x6e>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a22      	ldr	r2, [pc, #136]	@ (8006938 <TIM_OC1_SetConfig+0xf4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d10c      	bne.n	80068cc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2208      	movs	r2, #8
 80068b6:	4393      	bics	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2204      	movs	r2, #4
 80068c8:	4393      	bics	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a18      	ldr	r2, [pc, #96]	@ (8006930 <TIM_OC1_SetConfig+0xec>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d007      	beq.n	80068e4 <TIM_OC1_SetConfig+0xa0>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a17      	ldr	r2, [pc, #92]	@ (8006934 <TIM_OC1_SetConfig+0xf0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d003      	beq.n	80068e4 <TIM_OC1_SetConfig+0xa0>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a16      	ldr	r2, [pc, #88]	@ (8006938 <TIM_OC1_SetConfig+0xf4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d111      	bne.n	8006908 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4a15      	ldr	r2, [pc, #84]	@ (800693c <TIM_OC1_SetConfig+0xf8>)
 80068e8:	4013      	ands	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	4a14      	ldr	r2, [pc, #80]	@ (8006940 <TIM_OC1_SetConfig+0xfc>)
 80068f0:	4013      	ands	r3, r2
 80068f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	621a      	str	r2, [r3, #32]
}
 8006922:	46c0      	nop			@ (mov r8, r8)
 8006924:	46bd      	mov	sp, r7
 8006926:	b006      	add	sp, #24
 8006928:	bd80      	pop	{r7, pc}
 800692a:	46c0      	nop			@ (mov r8, r8)
 800692c:	fffeff8f 	.word	0xfffeff8f
 8006930:	40012c00 	.word	0x40012c00
 8006934:	40014400 	.word	0x40014400
 8006938:	40014800 	.word	0x40014800
 800693c:	fffffeff 	.word	0xfffffeff
 8006940:	fffffdff 	.word	0xfffffdff

08006944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	2210      	movs	r2, #16
 800695a:	4393      	bics	r3, r2
 800695c:	001a      	movs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4a2c      	ldr	r2, [pc, #176]	@ (8006a24 <TIM_OC2_SetConfig+0xe0>)
 8006972:	4013      	ands	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4a2b      	ldr	r2, [pc, #172]	@ (8006a28 <TIM_OC2_SetConfig+0xe4>)
 800697a:	4013      	ands	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2220      	movs	r2, #32
 800698e:	4393      	bics	r3, r2
 8006990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a22      	ldr	r2, [pc, #136]	@ (8006a2c <TIM_OC2_SetConfig+0xe8>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d10d      	bne.n	80069c2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2280      	movs	r2, #128	@ 0x80
 80069aa:	4393      	bics	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	011b      	lsls	r3, r3, #4
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2240      	movs	r2, #64	@ 0x40
 80069be:	4393      	bics	r3, r2
 80069c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a19      	ldr	r2, [pc, #100]	@ (8006a2c <TIM_OC2_SetConfig+0xe8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d007      	beq.n	80069da <TIM_OC2_SetConfig+0x96>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a18      	ldr	r2, [pc, #96]	@ (8006a30 <TIM_OC2_SetConfig+0xec>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d003      	beq.n	80069da <TIM_OC2_SetConfig+0x96>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a17      	ldr	r2, [pc, #92]	@ (8006a34 <TIM_OC2_SetConfig+0xf0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d113      	bne.n	8006a02 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	4a16      	ldr	r2, [pc, #88]	@ (8006a38 <TIM_OC2_SetConfig+0xf4>)
 80069de:	4013      	ands	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	4a15      	ldr	r2, [pc, #84]	@ (8006a3c <TIM_OC2_SetConfig+0xf8>)
 80069e6:	4013      	ands	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	621a      	str	r2, [r3, #32]
}
 8006a1c:	46c0      	nop			@ (mov r8, r8)
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	b006      	add	sp, #24
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	feff8fff 	.word	0xfeff8fff
 8006a28:	fffffcff 	.word	0xfffffcff
 8006a2c:	40012c00 	.word	0x40012c00
 8006a30:	40014400 	.word	0x40014400
 8006a34:	40014800 	.word	0x40014800
 8006a38:	fffffbff 	.word	0xfffffbff
 8006a3c:	fffff7ff 	.word	0xfffff7ff

08006a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	4a31      	ldr	r2, [pc, #196]	@ (8006b1c <TIM_OC3_SetConfig+0xdc>)
 8006a56:	401a      	ands	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4a2d      	ldr	r2, [pc, #180]	@ (8006b20 <TIM_OC3_SetConfig+0xe0>)
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2203      	movs	r2, #3
 8006a74:	4393      	bics	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	4a27      	ldr	r2, [pc, #156]	@ (8006b24 <TIM_OC3_SetConfig+0xe4>)
 8006a86:	4013      	ands	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	021b      	lsls	r3, r3, #8
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a23      	ldr	r2, [pc, #140]	@ (8006b28 <TIM_OC3_SetConfig+0xe8>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d10d      	bne.n	8006aba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	4a22      	ldr	r2, [pc, #136]	@ (8006b2c <TIM_OC3_SetConfig+0xec>)
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	021b      	lsls	r3, r3, #8
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8006b30 <TIM_OC3_SetConfig+0xf0>)
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a1a      	ldr	r2, [pc, #104]	@ (8006b28 <TIM_OC3_SetConfig+0xe8>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d007      	beq.n	8006ad2 <TIM_OC3_SetConfig+0x92>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b34 <TIM_OC3_SetConfig+0xf4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d003      	beq.n	8006ad2 <TIM_OC3_SetConfig+0x92>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a1a      	ldr	r2, [pc, #104]	@ (8006b38 <TIM_OC3_SetConfig+0xf8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d113      	bne.n	8006afa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	4a19      	ldr	r2, [pc, #100]	@ (8006b3c <TIM_OC3_SetConfig+0xfc>)
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	4a18      	ldr	r2, [pc, #96]	@ (8006b40 <TIM_OC3_SetConfig+0x100>)
 8006ade:	4013      	ands	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	621a      	str	r2, [r3, #32]
}
 8006b14:	46c0      	nop			@ (mov r8, r8)
 8006b16:	46bd      	mov	sp, r7
 8006b18:	b006      	add	sp, #24
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	fffffeff 	.word	0xfffffeff
 8006b20:	fffeff8f 	.word	0xfffeff8f
 8006b24:	fffffdff 	.word	0xfffffdff
 8006b28:	40012c00 	.word	0x40012c00
 8006b2c:	fffff7ff 	.word	0xfffff7ff
 8006b30:	fffffbff 	.word	0xfffffbff
 8006b34:	40014400 	.word	0x40014400
 8006b38:	40014800 	.word	0x40014800
 8006b3c:	ffffefff 	.word	0xffffefff
 8006b40:	ffffdfff 	.word	0xffffdfff

08006b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	4a24      	ldr	r2, [pc, #144]	@ (8006bec <TIM_OC4_SetConfig+0xa8>)
 8006b5a:	401a      	ands	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4a20      	ldr	r2, [pc, #128]	@ (8006bf0 <TIM_OC4_SetConfig+0xac>)
 8006b70:	4013      	ands	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4a1f      	ldr	r2, [pc, #124]	@ (8006bf4 <TIM_OC4_SetConfig+0xb0>)
 8006b78:	4013      	ands	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006bf8 <TIM_OC4_SetConfig+0xb4>)
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	031b      	lsls	r3, r3, #12
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a17      	ldr	r2, [pc, #92]	@ (8006bfc <TIM_OC4_SetConfig+0xb8>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d007      	beq.n	8006bb4 <TIM_OC4_SetConfig+0x70>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a16      	ldr	r2, [pc, #88]	@ (8006c00 <TIM_OC4_SetConfig+0xbc>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d003      	beq.n	8006bb4 <TIM_OC4_SetConfig+0x70>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a15      	ldr	r2, [pc, #84]	@ (8006c04 <TIM_OC4_SetConfig+0xc0>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d109      	bne.n	8006bc8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	4a14      	ldr	r2, [pc, #80]	@ (8006c08 <TIM_OC4_SetConfig+0xc4>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	019b      	lsls	r3, r3, #6
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	621a      	str	r2, [r3, #32]
}
 8006be2:	46c0      	nop			@ (mov r8, r8)
 8006be4:	46bd      	mov	sp, r7
 8006be6:	b006      	add	sp, #24
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	46c0      	nop			@ (mov r8, r8)
 8006bec:	ffffefff 	.word	0xffffefff
 8006bf0:	feff8fff 	.word	0xfeff8fff
 8006bf4:	fffffcff 	.word	0xfffffcff
 8006bf8:	ffffdfff 	.word	0xffffdfff
 8006bfc:	40012c00 	.word	0x40012c00
 8006c00:	40014400 	.word	0x40014400
 8006c04:	40014800 	.word	0x40014800
 8006c08:	ffffbfff 	.word	0xffffbfff

08006c0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	4a21      	ldr	r2, [pc, #132]	@ (8006ca8 <TIM_OC5_SetConfig+0x9c>)
 8006c22:	401a      	ands	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4a1d      	ldr	r2, [pc, #116]	@ (8006cac <TIM_OC5_SetConfig+0xa0>)
 8006c38:	4013      	ands	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	4a19      	ldr	r2, [pc, #100]	@ (8006cb0 <TIM_OC5_SetConfig+0xa4>)
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	041b      	lsls	r3, r3, #16
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a15      	ldr	r2, [pc, #84]	@ (8006cb4 <TIM_OC5_SetConfig+0xa8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d007      	beq.n	8006c72 <TIM_OC5_SetConfig+0x66>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a14      	ldr	r2, [pc, #80]	@ (8006cb8 <TIM_OC5_SetConfig+0xac>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d003      	beq.n	8006c72 <TIM_OC5_SetConfig+0x66>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a13      	ldr	r2, [pc, #76]	@ (8006cbc <TIM_OC5_SetConfig+0xb0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d109      	bne.n	8006c86 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	4a0c      	ldr	r2, [pc, #48]	@ (8006ca8 <TIM_OC5_SetConfig+0x9c>)
 8006c76:	4013      	ands	r3, r2
 8006c78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	021b      	lsls	r3, r3, #8
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	621a      	str	r2, [r3, #32]
}
 8006ca0:	46c0      	nop			@ (mov r8, r8)
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	b006      	add	sp, #24
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	fffeffff 	.word	0xfffeffff
 8006cac:	fffeff8f 	.word	0xfffeff8f
 8006cb0:	fffdffff 	.word	0xfffdffff
 8006cb4:	40012c00 	.word	0x40012c00
 8006cb8:	40014400 	.word	0x40014400
 8006cbc:	40014800 	.word	0x40014800

08006cc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	4a22      	ldr	r2, [pc, #136]	@ (8006d60 <TIM_OC6_SetConfig+0xa0>)
 8006cd6:	401a      	ands	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4a1e      	ldr	r2, [pc, #120]	@ (8006d64 <TIM_OC6_SetConfig+0xa4>)
 8006cec:	4013      	ands	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	021b      	lsls	r3, r3, #8
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8006d68 <TIM_OC6_SetConfig+0xa8>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	051b      	lsls	r3, r3, #20
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a16      	ldr	r2, [pc, #88]	@ (8006d6c <TIM_OC6_SetConfig+0xac>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d007      	beq.n	8006d28 <TIM_OC6_SetConfig+0x68>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a15      	ldr	r2, [pc, #84]	@ (8006d70 <TIM_OC6_SetConfig+0xb0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d003      	beq.n	8006d28 <TIM_OC6_SetConfig+0x68>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a14      	ldr	r2, [pc, #80]	@ (8006d74 <TIM_OC6_SetConfig+0xb4>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d109      	bne.n	8006d3c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	4a13      	ldr	r2, [pc, #76]	@ (8006d78 <TIM_OC6_SetConfig+0xb8>)
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	029b      	lsls	r3, r3, #10
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	621a      	str	r2, [r3, #32]
}
 8006d56:	46c0      	nop			@ (mov r8, r8)
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	b006      	add	sp, #24
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	46c0      	nop			@ (mov r8, r8)
 8006d60:	ffefffff 	.word	0xffefffff
 8006d64:	feff8fff 	.word	0xfeff8fff
 8006d68:	ffdfffff 	.word	0xffdfffff
 8006d6c:	40012c00 	.word	0x40012c00
 8006d70:	40014400 	.word	0x40014400
 8006d74:	40014800 	.word	0x40014800
 8006d78:	fffbffff 	.word	0xfffbffff

08006d7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	221f      	movs	r2, #31
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	2201      	movs	r2, #1
 8006d90:	409a      	lsls	r2, r3
 8006d92:	0013      	movs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	43d2      	mvns	r2, r2
 8006d9e:	401a      	ands	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a1a      	ldr	r2, [r3, #32]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	211f      	movs	r1, #31
 8006dac:	400b      	ands	r3, r1
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	4099      	lsls	r1, r3
 8006db2:	000b      	movs	r3, r1
 8006db4:	431a      	orrs	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	621a      	str	r2, [r3, #32]
}
 8006dba:	46c0      	nop			@ (mov r8, r8)
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	b006      	add	sp, #24
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	223c      	movs	r2, #60	@ 0x3c
 8006dd2:	5c9b      	ldrb	r3, [r3, r2]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d101      	bne.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e050      	b.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	223c      	movs	r2, #60	@ 0x3c
 8006de0:	2101      	movs	r1, #1
 8006de2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	223d      	movs	r2, #61	@ 0x3d
 8006de8:	2102      	movs	r1, #2
 8006dea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a21      	ldr	r2, [pc, #132]	@ (8006e88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d108      	bne.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4a20      	ldr	r2, [pc, #128]	@ (8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2270      	movs	r2, #112	@ 0x70
 8006e1c:	4393      	bics	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a14      	ldr	r2, [pc, #80]	@ (8006e88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d00a      	beq.n	8006e52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	2380      	movs	r3, #128	@ 0x80
 8006e42:	05db      	lsls	r3, r3, #23
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d004      	beq.n	8006e52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a10      	ldr	r2, [pc, #64]	@ (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d10c      	bne.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2280      	movs	r2, #128	@ 0x80
 8006e56:	4393      	bics	r3, r2
 8006e58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	223d      	movs	r2, #61	@ 0x3d
 8006e70:	2101      	movs	r1, #1
 8006e72:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	223c      	movs	r2, #60	@ 0x3c
 8006e78:	2100      	movs	r1, #0
 8006e7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	0018      	movs	r0, r3
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b004      	add	sp, #16
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	46c0      	nop			@ (mov r8, r8)
 8006e88:	40012c00 	.word	0x40012c00
 8006e8c:	ff0fffff 	.word	0xff0fffff
 8006e90:	40000400 	.word	0x40000400

08006e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e9c:	46c0      	nop			@ (mov r8, r8)
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	b002      	add	sp, #8
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006eac:	46c0      	nop			@ (mov r8, r8)
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	b002      	add	sp, #8
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ebc:	46c0      	nop			@ (mov r8, r8)
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	b002      	add	sp, #8
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <memset>:
 8006ec4:	0003      	movs	r3, r0
 8006ec6:	1882      	adds	r2, r0, r2
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d100      	bne.n	8006ece <memset+0xa>
 8006ecc:	4770      	bx	lr
 8006ece:	7019      	strb	r1, [r3, #0]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	e7f9      	b.n	8006ec8 <memset+0x4>

08006ed4 <__libc_init_array>:
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	2600      	movs	r6, #0
 8006ed8:	4c0c      	ldr	r4, [pc, #48]	@ (8006f0c <__libc_init_array+0x38>)
 8006eda:	4d0d      	ldr	r5, [pc, #52]	@ (8006f10 <__libc_init_array+0x3c>)
 8006edc:	1b64      	subs	r4, r4, r5
 8006ede:	10a4      	asrs	r4, r4, #2
 8006ee0:	42a6      	cmp	r6, r4
 8006ee2:	d109      	bne.n	8006ef8 <__libc_init_array+0x24>
 8006ee4:	2600      	movs	r6, #0
 8006ee6:	f000 f823 	bl	8006f30 <_init>
 8006eea:	4c0a      	ldr	r4, [pc, #40]	@ (8006f14 <__libc_init_array+0x40>)
 8006eec:	4d0a      	ldr	r5, [pc, #40]	@ (8006f18 <__libc_init_array+0x44>)
 8006eee:	1b64      	subs	r4, r4, r5
 8006ef0:	10a4      	asrs	r4, r4, #2
 8006ef2:	42a6      	cmp	r6, r4
 8006ef4:	d105      	bne.n	8006f02 <__libc_init_array+0x2e>
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	00b3      	lsls	r3, r6, #2
 8006efa:	58eb      	ldr	r3, [r5, r3]
 8006efc:	4798      	blx	r3
 8006efe:	3601      	adds	r6, #1
 8006f00:	e7ee      	b.n	8006ee0 <__libc_init_array+0xc>
 8006f02:	00b3      	lsls	r3, r6, #2
 8006f04:	58eb      	ldr	r3, [r5, r3]
 8006f06:	4798      	blx	r3
 8006f08:	3601      	adds	r6, #1
 8006f0a:	e7f2      	b.n	8006ef2 <__libc_init_array+0x1e>
 8006f0c:	08007030 	.word	0x08007030
 8006f10:	08007030 	.word	0x08007030
 8006f14:	08007034 	.word	0x08007034
 8006f18:	08007030 	.word	0x08007030

08006f1c <memcpy>:
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	b510      	push	{r4, lr}
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d100      	bne.n	8006f26 <memcpy+0xa>
 8006f24:	bd10      	pop	{r4, pc}
 8006f26:	5ccc      	ldrb	r4, [r1, r3]
 8006f28:	54c4      	strb	r4, [r0, r3]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	e7f8      	b.n	8006f20 <memcpy+0x4>
	...

08006f30 <_init>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	46c0      	nop			@ (mov r8, r8)
 8006f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f36:	bc08      	pop	{r3}
 8006f38:	469e      	mov	lr, r3
 8006f3a:	4770      	bx	lr

08006f3c <_fini>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	46c0      	nop			@ (mov r8, r8)
 8006f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f42:	bc08      	pop	{r3}
 8006f44:	469e      	mov	lr, r3
 8006f46:	4770      	bx	lr
