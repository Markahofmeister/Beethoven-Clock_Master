
Beethoven-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c20  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003cdc  08003cdc  00004cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d90  08003d90  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d90  08003d90  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d90  08003d90  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d90  08003d90  00004d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d94  08003d94  00004d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d98  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  08003da4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003da4  00005198  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012329  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029be  00000000  00000000  0001735d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  00019d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f64  00000000  00000000  0001b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176e2  00000000  00000000  0001c034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174c6  00000000  00000000  00033716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009717c  00000000  00000000  0004abdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1d58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f8  00000000  00000000  000e1d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e6594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003cc4 	.word	0x08003cc4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003cc4 	.word	0x08003cc4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fd50 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f80e 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 fa24 	bl	8000674 <MX_GPIO_Init>
  MX_RTC_Init();
 800022c:	f000 f8d8 	bl	80003e0 <MX_RTC_Init>
  MX_I2C1_Init();
 8000230:	f000 f86e 	bl	8000310 <MX_I2C1_Init>
  MX_I2S1_Init();
 8000234:	f000 f8ac 	bl	8000390 <MX_I2S1_Init>
  MX_SPI2_Init();
 8000238:	f000 f97e 	bl	8000538 <MX_SPI2_Init>
  MX_TIM2_Init();
 800023c:	f000 f9ba 	bl	80005b4 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	46c0      	nop			@ (mov r8, r8)
 8000242:	e7fd      	b.n	8000240 <main+0x24>

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b093      	sub	sp, #76	@ 0x4c
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	2410      	movs	r4, #16
 800024c:	193b      	adds	r3, r7, r4
 800024e:	0018      	movs	r0, r3
 8000250:	2338      	movs	r3, #56	@ 0x38
 8000252:	001a      	movs	r2, r3
 8000254:	2100      	movs	r1, #0
 8000256:	f003 fd09 	bl	8003c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025a:	003b      	movs	r3, r7
 800025c:	0018      	movs	r0, r3
 800025e:	2310      	movs	r3, #16
 8000260:	001a      	movs	r2, r3
 8000262:	2100      	movs	r1, #0
 8000264:	f003 fd02 	bl	8003c6c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000268:	2380      	movs	r3, #128	@ 0x80
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	0018      	movs	r0, r3
 800026e:	f001 fa27 	bl	80016c0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000272:	f001 fa17 	bl	80016a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000276:	4b25      	ldr	r3, [pc, #148]	@ (800030c <SystemClock_Config+0xc8>)
 8000278:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800027a:	4b24      	ldr	r3, [pc, #144]	@ (800030c <SystemClock_Config+0xc8>)
 800027c:	2118      	movs	r1, #24
 800027e:	438a      	bics	r2, r1
 8000280:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000282:	193b      	adds	r3, r7, r4
 8000284:	2205      	movs	r2, #5
 8000286:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000288:	193b      	adds	r3, r7, r4
 800028a:	2280      	movs	r2, #128	@ 0x80
 800028c:	0252      	lsls	r2, r2, #9
 800028e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000290:	0021      	movs	r1, r4
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2201      	movs	r2, #1
 8000296:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2202      	movs	r2, #2
 800029c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2203      	movs	r2, #3
 80002a2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2200      	movs	r2, #0
 80002a8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2208      	movs	r2, #8
 80002ae:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	22c0      	movs	r2, #192	@ 0xc0
 80002b4:	02d2      	lsls	r2, r2, #11
 80002b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2280      	movs	r2, #128	@ 0x80
 80002bc:	0492      	lsls	r2, r2, #18
 80002be:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2280      	movs	r2, #128	@ 0x80
 80002c4:	0592      	lsls	r2, r2, #22
 80002c6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	0018      	movs	r0, r3
 80002cc:	f001 fa44 	bl	8001758 <HAL_RCC_OscConfig>
 80002d0:	1e03      	subs	r3, r0, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80002d4:	f000 faa6 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d8:	003b      	movs	r3, r7
 80002da:	2207      	movs	r2, #7
 80002dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002de:	003b      	movs	r3, r7
 80002e0:	2202      	movs	r2, #2
 80002e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	003b      	movs	r3, r7
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ea:	003b      	movs	r3, r7
 80002ec:	2200      	movs	r2, #0
 80002ee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f0:	003b      	movs	r3, r7
 80002f2:	2102      	movs	r1, #2
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 fd49 	bl	8001d8c <HAL_RCC_ClockConfig>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80002fe:	f000 fa91 	bl	8000824 <Error_Handler>
  }
}
 8000302:	46c0      	nop			@ (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	b013      	add	sp, #76	@ 0x4c
 8000308:	bd90      	pop	{r4, r7, pc}
 800030a:	46c0      	nop			@ (mov r8, r8)
 800030c:	40021000 	.word	0x40021000

08000310 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000314:	4b1b      	ldr	r3, [pc, #108]	@ (8000384 <MX_I2C1_Init+0x74>)
 8000316:	4a1c      	ldr	r2, [pc, #112]	@ (8000388 <MX_I2C1_Init+0x78>)
 8000318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800031a:	4b1a      	ldr	r3, [pc, #104]	@ (8000384 <MX_I2C1_Init+0x74>)
 800031c:	4a1b      	ldr	r2, [pc, #108]	@ (800038c <MX_I2C1_Init+0x7c>)
 800031e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000320:	4b18      	ldr	r3, [pc, #96]	@ (8000384 <MX_I2C1_Init+0x74>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000326:	4b17      	ldr	r3, [pc, #92]	@ (8000384 <MX_I2C1_Init+0x74>)
 8000328:	2201      	movs	r2, #1
 800032a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800032c:	4b15      	ldr	r3, [pc, #84]	@ (8000384 <MX_I2C1_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000332:	4b14      	ldr	r3, [pc, #80]	@ (8000384 <MX_I2C1_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000338:	4b12      	ldr	r3, [pc, #72]	@ (8000384 <MX_I2C1_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800033e:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <MX_I2C1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000344:	4b0f      	ldr	r3, [pc, #60]	@ (8000384 <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800034a:	4b0e      	ldr	r3, [pc, #56]	@ (8000384 <MX_I2C1_Init+0x74>)
 800034c:	0018      	movs	r0, r3
 800034e:	f000 ff75 	bl	800123c <HAL_I2C_Init>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000356:	f000 fa65 	bl	8000824 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800035a:	4b0a      	ldr	r3, [pc, #40]	@ (8000384 <MX_I2C1_Init+0x74>)
 800035c:	2100      	movs	r1, #0
 800035e:	0018      	movs	r0, r3
 8000360:	f001 f812 	bl	8001388 <HAL_I2CEx_ConfigAnalogFilter>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d001      	beq.n	800036c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000368:	f000 fa5c 	bl	8000824 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800036c:	4b05      	ldr	r3, [pc, #20]	@ (8000384 <MX_I2C1_Init+0x74>)
 800036e:	2100      	movs	r1, #0
 8000370:	0018      	movs	r0, r3
 8000372:	f001 f855 	bl	8001420 <HAL_I2CEx_ConfigDigitalFilter>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800037a:	f000 fa53 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800037e:	46c0      	nop			@ (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000028 	.word	0x20000028
 8000388:	40005400 	.word	0x40005400
 800038c:	10707dbc 	.word	0x10707dbc

08000390 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000394:	4b10      	ldr	r3, [pc, #64]	@ (80003d8 <MX_I2S1_Init+0x48>)
 8000396:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <MX_I2S1_Init+0x4c>)
 8000398:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800039a:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <MX_I2S1_Init+0x48>)
 800039c:	2280      	movs	r2, #128	@ 0x80
 800039e:	0092      	lsls	r2, r2, #2
 80003a0:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80003a2:	4b0d      	ldr	r3, [pc, #52]	@ (80003d8 <MX_I2S1_Init+0x48>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80003a8:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <MX_I2S1_Init+0x48>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80003ae:	4b0a      	ldr	r3, [pc, #40]	@ (80003d8 <MX_I2S1_Init+0x48>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80003b4:	4b08      	ldr	r3, [pc, #32]	@ (80003d8 <MX_I2S1_Init+0x48>)
 80003b6:	22fa      	movs	r2, #250	@ 0xfa
 80003b8:	0152      	lsls	r2, r2, #5
 80003ba:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80003bc:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <MX_I2S1_Init+0x48>)
 80003be:	2200      	movs	r2, #0
 80003c0:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80003c2:	4b05      	ldr	r3, [pc, #20]	@ (80003d8 <MX_I2S1_Init+0x48>)
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 f877 	bl	80014b8 <HAL_I2S_Init>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <MX_I2S1_Init+0x42>
  {
    Error_Handler();
 80003ce:	f000 fa29 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80003d2:	46c0      	nop			@ (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	2000007c 	.word	0x2000007c
 80003dc:	40013000 	.word	0x40013000

080003e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b090      	sub	sp, #64	@ 0x40
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80003e6:	232c      	movs	r3, #44	@ 0x2c
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	0018      	movs	r0, r3
 80003ec:	2314      	movs	r3, #20
 80003ee:	001a      	movs	r2, r3
 80003f0:	2100      	movs	r1, #0
 80003f2:	f003 fc3b 	bl	8003c6c <memset>
  RTC_DateTypeDef sDate = {0};
 80003f6:	2328      	movs	r3, #40	@ 0x28
 80003f8:	18fb      	adds	r3, r7, r3
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80003fe:	003b      	movs	r3, r7
 8000400:	0018      	movs	r0, r3
 8000402:	2328      	movs	r3, #40	@ 0x28
 8000404:	001a      	movs	r2, r3
 8000406:	2100      	movs	r1, #0
 8000408:	f003 fc30 	bl	8003c6c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800040c:	4b48      	ldr	r3, [pc, #288]	@ (8000530 <MX_RTC_Init+0x150>)
 800040e:	4a49      	ldr	r2, [pc, #292]	@ (8000534 <MX_RTC_Init+0x154>)
 8000410:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000412:	4b47      	ldr	r3, [pc, #284]	@ (8000530 <MX_RTC_Init+0x150>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000418:	4b45      	ldr	r3, [pc, #276]	@ (8000530 <MX_RTC_Init+0x150>)
 800041a:	227f      	movs	r2, #127	@ 0x7f
 800041c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800041e:	4b44      	ldr	r3, [pc, #272]	@ (8000530 <MX_RTC_Init+0x150>)
 8000420:	22ff      	movs	r2, #255	@ 0xff
 8000422:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000424:	4b42      	ldr	r3, [pc, #264]	@ (8000530 <MX_RTC_Init+0x150>)
 8000426:	2200      	movs	r2, #0
 8000428:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800042a:	4b41      	ldr	r3, [pc, #260]	@ (8000530 <MX_RTC_Init+0x150>)
 800042c:	2200      	movs	r2, #0
 800042e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000430:	4b3f      	ldr	r3, [pc, #252]	@ (8000530 <MX_RTC_Init+0x150>)
 8000432:	2200      	movs	r2, #0
 8000434:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000436:	4b3e      	ldr	r3, [pc, #248]	@ (8000530 <MX_RTC_Init+0x150>)
 8000438:	2280      	movs	r2, #128	@ 0x80
 800043a:	05d2      	lsls	r2, r2, #23
 800043c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800043e:	4b3c      	ldr	r3, [pc, #240]	@ (8000530 <MX_RTC_Init+0x150>)
 8000440:	2200      	movs	r2, #0
 8000442:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000444:	4b3a      	ldr	r3, [pc, #232]	@ (8000530 <MX_RTC_Init+0x150>)
 8000446:	0018      	movs	r0, r3
 8000448:	f002 fa5a 	bl	8002900 <HAL_RTC_Init>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000450:	f000 f9e8 	bl	8000824 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000454:	212c      	movs	r1, #44	@ 0x2c
 8000456:	187b      	adds	r3, r7, r1
 8000458:	2200      	movs	r2, #0
 800045a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2200      	movs	r2, #0
 8000460:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2200      	movs	r2, #0
 8000466:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2200      	movs	r2, #0
 800046c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2200      	movs	r2, #0
 8000472:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000474:	187b      	adds	r3, r7, r1
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800047a:	1879      	adds	r1, r7, r1
 800047c:	4b2c      	ldr	r3, [pc, #176]	@ (8000530 <MX_RTC_Init+0x150>)
 800047e:	2201      	movs	r2, #1
 8000480:	0018      	movs	r0, r3
 8000482:	f002 fadf 	bl	8002a44 <HAL_RTC_SetTime>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800048a:	f000 f9cb 	bl	8000824 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800048e:	2128      	movs	r1, #40	@ 0x28
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2201      	movs	r2, #1
 8000494:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2201      	movs	r2, #1
 800049a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2201      	movs	r2, #1
 80004a0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2200      	movs	r2, #0
 80004a6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80004a8:	1879      	adds	r1, r7, r1
 80004aa:	4b21      	ldr	r3, [pc, #132]	@ (8000530 <MX_RTC_Init+0x150>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	0018      	movs	r0, r3
 80004b0:	f002 fb70 	bl	8002b94 <HAL_RTC_SetDate>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d001      	beq.n	80004bc <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80004b8:	f000 f9b4 	bl	8000824 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80004bc:	003b      	movs	r3, r7
 80004be:	2200      	movs	r2, #0
 80004c0:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80004c2:	003b      	movs	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80004c8:	003b      	movs	r3, r7
 80004ca:	2200      	movs	r2, #0
 80004cc:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80004ce:	003b      	movs	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80004d4:	003b      	movs	r3, r7
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80004da:	003b      	movs	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80004e0:	003b      	movs	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80004e6:	003b      	movs	r3, r7
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80004ec:	003b      	movs	r3, r7
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80004f2:	003b      	movs	r3, r7
 80004f4:	2220      	movs	r2, #32
 80004f6:	2101      	movs	r1, #1
 80004f8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80004fa:	003b      	movs	r3, r7
 80004fc:	2280      	movs	r2, #128	@ 0x80
 80004fe:	0052      	lsls	r2, r2, #1
 8000500:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000502:	0039      	movs	r1, r7
 8000504:	4b0a      	ldr	r3, [pc, #40]	@ (8000530 <MX_RTC_Init+0x150>)
 8000506:	2201      	movs	r2, #1
 8000508:	0018      	movs	r0, r3
 800050a:	f002 fbd5 	bl	8002cb8 <HAL_RTC_SetAlarm>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d001      	beq.n	8000516 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8000512:	f000 f987 	bl	8000824 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000516:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <MX_RTC_Init+0x150>)
 8000518:	2100      	movs	r1, #0
 800051a:	0018      	movs	r0, r3
 800051c:	f002 fdc6 	bl	80030ac <HAL_RTCEx_SetCalibrationOutPut>
 8000520:	1e03      	subs	r3, r0, #0
 8000522:	d001      	beq.n	8000528 <MX_RTC_Init+0x148>
  {
    Error_Handler();
 8000524:	f000 f97e 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000528:	46c0      	nop			@ (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b010      	add	sp, #64	@ 0x40
 800052e:	bd80      	pop	{r7, pc}
 8000530:	200000b8 	.word	0x200000b8
 8000534:	40002800 	.word	0x40002800

08000538 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800053c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ac <MX_SPI2_Init+0x74>)
 800053e:	4a1c      	ldr	r2, [pc, #112]	@ (80005b0 <MX_SPI2_Init+0x78>)
 8000540:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000542:	4b1a      	ldr	r3, [pc, #104]	@ (80005ac <MX_SPI2_Init+0x74>)
 8000544:	2282      	movs	r2, #130	@ 0x82
 8000546:	0052      	lsls	r2, r2, #1
 8000548:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800054a:	4b18      	ldr	r3, [pc, #96]	@ (80005ac <MX_SPI2_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000550:	4b16      	ldr	r3, [pc, #88]	@ (80005ac <MX_SPI2_Init+0x74>)
 8000552:	22e0      	movs	r2, #224	@ 0xe0
 8000554:	00d2      	lsls	r2, r2, #3
 8000556:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000558:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <MX_SPI2_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800055e:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <MX_SPI2_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000564:	4b11      	ldr	r3, [pc, #68]	@ (80005ac <MX_SPI2_Init+0x74>)
 8000566:	2280      	movs	r2, #128	@ 0x80
 8000568:	0092      	lsls	r2, r2, #2
 800056a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800056c:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <MX_SPI2_Init+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000572:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <MX_SPI2_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <MX_SPI2_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800057e:	4b0b      	ldr	r3, [pc, #44]	@ (80005ac <MX_SPI2_Init+0x74>)
 8000580:	2200      	movs	r2, #0
 8000582:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000584:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <MX_SPI2_Init+0x74>)
 8000586:	2207      	movs	r2, #7
 8000588:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800058a:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <MX_SPI2_Init+0x74>)
 800058c:	2200      	movs	r2, #0
 800058e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <MX_SPI2_Init+0x74>)
 8000592:	2208      	movs	r2, #8
 8000594:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000596:	4b05      	ldr	r3, [pc, #20]	@ (80005ac <MX_SPI2_Init+0x74>)
 8000598:	0018      	movs	r0, r3
 800059a:	f002 fdcf 	bl	800313c <HAL_SPI_Init>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80005a2:	f000 f93f 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200000e4 	.word	0x200000e4
 80005b0:	40003800 	.word	0x40003800

080005b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	@ 0x28
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ba:	231c      	movs	r3, #28
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	0018      	movs	r0, r3
 80005c0:	230c      	movs	r3, #12
 80005c2:	001a      	movs	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	f003 fb51 	bl	8003c6c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ca:	003b      	movs	r3, r7
 80005cc:	0018      	movs	r0, r3
 80005ce:	231c      	movs	r3, #28
 80005d0:	001a      	movs	r2, r3
 80005d2:	2100      	movs	r1, #0
 80005d4:	f003 fb4a 	bl	8003c6c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005d8:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <MX_TIM2_Init+0xbc>)
 80005da:	2280      	movs	r2, #128	@ 0x80
 80005dc:	05d2      	lsls	r2, r2, #23
 80005de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005e0:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <MX_TIM2_Init+0xbc>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e6:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <MX_TIM2_Init+0xbc>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80005ec:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <MX_TIM2_Init+0xbc>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	4252      	negs	r2, r2
 80005f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <MX_TIM2_Init+0xbc>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <MX_TIM2_Init+0xbc>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000600:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <MX_TIM2_Init+0xbc>)
 8000602:	0018      	movs	r0, r3
 8000604:	f002 fe52 	bl	80032ac <HAL_TIM_PWM_Init>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800060c:	f000 f90a 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000610:	211c      	movs	r1, #28
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800061e:	187a      	adds	r2, r7, r1
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <MX_TIM2_Init+0xbc>)
 8000622:	0011      	movs	r1, r2
 8000624:	0018      	movs	r0, r3
 8000626:	f003 fab9 	bl	8003b9c <HAL_TIMEx_MasterConfigSynchronization>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800062e:	f000 f8f9 	bl	8000824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000632:	003b      	movs	r3, r7
 8000634:	2260      	movs	r2, #96	@ 0x60
 8000636:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000638:	003b      	movs	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800063e:	003b      	movs	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000644:	003b      	movs	r3, r7
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800064a:	0039      	movs	r1, r7
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <MX_TIM2_Init+0xbc>)
 800064e:	2208      	movs	r2, #8
 8000650:	0018      	movs	r0, r3
 8000652:	f002 fe83 	bl	800335c <HAL_TIM_PWM_ConfigChannel>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800065a:	f000 f8e3 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800065e:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <MX_TIM2_Init+0xbc>)
 8000660:	0018      	movs	r0, r3
 8000662:	f000 faab 	bl	8000bbc <HAL_TIM_MspPostInit>

}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	b00a      	add	sp, #40	@ 0x28
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	20000148 	.word	0x20000148

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b08b      	sub	sp, #44	@ 0x2c
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	2414      	movs	r4, #20
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	2314      	movs	r3, #20
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f003 faf1 	bl	8003c6c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b61      	ldr	r3, [pc, #388]	@ (8000810 <MX_GPIO_Init+0x19c>)
 800068c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800068e:	4b60      	ldr	r3, [pc, #384]	@ (8000810 <MX_GPIO_Init+0x19c>)
 8000690:	2104      	movs	r1, #4
 8000692:	430a      	orrs	r2, r1
 8000694:	635a      	str	r2, [r3, #52]	@ 0x34
 8000696:	4b5e      	ldr	r3, [pc, #376]	@ (8000810 <MX_GPIO_Init+0x19c>)
 8000698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800069a:	2204      	movs	r2, #4
 800069c:	4013      	ands	r3, r2
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a2:	4b5b      	ldr	r3, [pc, #364]	@ (8000810 <MX_GPIO_Init+0x19c>)
 80006a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006a6:	4b5a      	ldr	r3, [pc, #360]	@ (8000810 <MX_GPIO_Init+0x19c>)
 80006a8:	2120      	movs	r1, #32
 80006aa:	430a      	orrs	r2, r1
 80006ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ae:	4b58      	ldr	r3, [pc, #352]	@ (8000810 <MX_GPIO_Init+0x19c>)
 80006b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006b2:	2220      	movs	r2, #32
 80006b4:	4013      	ands	r3, r2
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b55      	ldr	r3, [pc, #340]	@ (8000810 <MX_GPIO_Init+0x19c>)
 80006bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006be:	4b54      	ldr	r3, [pc, #336]	@ (8000810 <MX_GPIO_Init+0x19c>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	430a      	orrs	r2, r1
 80006c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80006c6:	4b52      	ldr	r3, [pc, #328]	@ (8000810 <MX_GPIO_Init+0x19c>)
 80006c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ca:	2201      	movs	r2, #1
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b4f      	ldr	r3, [pc, #316]	@ (8000810 <MX_GPIO_Init+0x19c>)
 80006d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006d6:	4b4e      	ldr	r3, [pc, #312]	@ (8000810 <MX_GPIO_Init+0x19c>)
 80006d8:	2102      	movs	r1, #2
 80006da:	430a      	orrs	r2, r1
 80006dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80006de:	4b4c      	ldr	r3, [pc, #304]	@ (8000810 <MX_GPIO_Init+0x19c>)
 80006e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006e2:	2202      	movs	r2, #2
 80006e4:	4013      	ands	r3, r2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ea:	4b49      	ldr	r3, [pc, #292]	@ (8000810 <MX_GPIO_Init+0x19c>)
 80006ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ee:	4b48      	ldr	r3, [pc, #288]	@ (8000810 <MX_GPIO_Init+0x19c>)
 80006f0:	2108      	movs	r1, #8
 80006f2:	430a      	orrs	r2, r1
 80006f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80006f6:	4b46      	ldr	r3, [pc, #280]	@ (8000810 <MX_GPIO_Init+0x19c>)
 80006f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006fa:	2208      	movs	r2, #8
 80006fc:	4013      	ands	r3, r2
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nRST_Pin|SHIFT_DATA_IN_Pin
 8000702:	23ee      	movs	r3, #238	@ 0xee
 8000704:	0119      	lsls	r1, r3, #4
 8000706:	23a0      	movs	r3, #160	@ 0xa0
 8000708:	05db      	lsls	r3, r3, #23
 800070a:	2200      	movs	r2, #0
 800070c:	0018      	movs	r0, r3
 800070e:	f000 fd77 	bl	8001200 <HAL_GPIO_WritePin>
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin, GPIO_PIN_RESET);
 8000712:	4940      	ldr	r1, [pc, #256]	@ (8000814 <MX_GPIO_Init+0x1a0>)
 8000714:	4b40      	ldr	r3, [pc, #256]	@ (8000818 <MX_GPIO_Init+0x1a4>)
 8000716:	2200      	movs	r2, #0
 8000718:	0018      	movs	r0, r3
 800071a:	f000 fd71 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 800071e:	4b3f      	ldr	r3, [pc, #252]	@ (800081c <MX_GPIO_Init+0x1a8>)
 8000720:	2200      	movs	r2, #0
 8000722:	2180      	movs	r1, #128	@ 0x80
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fd6b 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nRST_Pin SHIFT_DATA_IN_Pin
                           SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nRST_Pin|SHIFT_DATA_IN_Pin
 800072a:	193b      	adds	r3, r7, r4
 800072c:	22ee      	movs	r2, #238	@ 0xee
 800072e:	0112      	lsls	r2, r2, #4
 8000730:	601a      	str	r2, [r3, #0]
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	2201      	movs	r2, #1
 8000736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	193a      	adds	r2, r7, r4
 8000746:	23a0      	movs	r3, #160	@ 0xa0
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f000 fbf3 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_ENABLE_Pin DEBUG_LED_Pin CAPTOUCH_RESET_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	4a2f      	ldr	r2, [pc, #188]	@ (8000814 <MX_GPIO_Init+0x1a0>)
 8000756:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2201      	movs	r2, #1
 800075c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	193b      	adds	r3, r7, r4
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	193b      	adds	r3, r7, r4
 800076c:	4a2a      	ldr	r2, [pc, #168]	@ (8000818 <MX_GPIO_Init+0x1a4>)
 800076e:	0019      	movs	r1, r3
 8000770:	0010      	movs	r0, r2
 8000772:	f000 fbe1 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8000776:	193b      	adds	r3, r7, r4
 8000778:	2280      	movs	r2, #128	@ 0x80
 800077a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	193b      	adds	r3, r7, r4
 800077e:	2201      	movs	r2, #1
 8000780:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	193b      	adds	r3, r7, r4
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 800078e:	193b      	adds	r3, r7, r4
 8000790:	4a22      	ldr	r2, [pc, #136]	@ (800081c <MX_GPIO_Init+0x1a8>)
 8000792:	0019      	movs	r1, r3
 8000794:	0010      	movs	r0, r2
 8000796:	f000 fbcf 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_SET_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = ALARM_SET_BUTTON_EXTI_Pin;
 800079a:	193b      	adds	r3, r7, r4
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	0212      	lsls	r2, r2, #8
 80007a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2288      	movs	r2, #136	@ 0x88
 80007a6:	0352      	lsls	r2, r2, #13
 80007a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALARM_SET_BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 80007b0:	193a      	adds	r2, r7, r4
 80007b2:	23a0      	movs	r3, #160	@ 0xa0
 80007b4:	05db      	lsls	r3, r3, #23
 80007b6:	0011      	movs	r1, r2
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 fbbd 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_EXTI_Pin MINUTE_SET_BUTTON_EXTI_Pin ALARM_EN_BUTTON_EXTI_Pin DISPLAY_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_EXTI_Pin|MINUTE_SET_BUTTON_EXTI_Pin|ALARM_EN_BUTTON_EXTI_Pin|DISPLAY_BUTTON_EXTI_Pin;
 80007be:	0021      	movs	r1, r4
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	220f      	movs	r2, #15
 80007c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2288      	movs	r2, #136	@ 0x88
 80007ca:	0352      	lsls	r2, r2, #13
 80007cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d4:	000c      	movs	r4, r1
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	4a11      	ldr	r2, [pc, #68]	@ (8000820 <MX_GPIO_Init+0x1ac>)
 80007da:	0019      	movs	r1, r3
 80007dc:	0010      	movs	r0, r2
 80007de:	f000 fbab 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIME_SWITCH_EXTI_Pin CAPTOUCH_CHANGE_EXTI_Pin */
  GPIO_InitStruct.Pin = TIME_SWITCH_EXTI_Pin|CAPTOUCH_CHANGE_EXTI_Pin;
 80007e2:	0021      	movs	r1, r4
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2284      	movs	r2, #132	@ 0x84
 80007e8:	0092      	lsls	r2, r2, #2
 80007ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2288      	movs	r2, #136	@ 0x88
 80007f0:	0352      	lsls	r2, r2, #13
 80007f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	4a06      	ldr	r2, [pc, #24]	@ (8000818 <MX_GPIO_Init+0x1a4>)
 80007fe:	0019      	movs	r1, r3
 8000800:	0010      	movs	r0, r2
 8000802:	f000 fb99 	bl	8000f38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b00b      	add	sp, #44	@ 0x2c
 800080c:	bd90      	pop	{r4, r7, pc}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	40021000 	.word	0x40021000
 8000814:	00001102 	.word	0x00001102
 8000818:	50000400 	.word	0x50000400
 800081c:	50000800 	.word	0x50000800
 8000820:	50000c00 	.word	0x50000c00

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	46c0      	nop			@ (mov r8, r8)
 800082e:	e7fd      	b.n	800082c <Error_Handler+0x8>

08000830 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <HAL_MspInit+0x44>)
 8000838:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <HAL_MspInit+0x44>)
 800083c:	2101      	movs	r1, #1
 800083e:	430a      	orrs	r2, r1
 8000840:	641a      	str	r2, [r3, #64]	@ 0x40
 8000842:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <HAL_MspInit+0x44>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	2201      	movs	r2, #1
 8000848:	4013      	ands	r3, r2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <HAL_MspInit+0x44>)
 8000850:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <HAL_MspInit+0x44>)
 8000854:	2180      	movs	r1, #128	@ 0x80
 8000856:	0549      	lsls	r1, r1, #21
 8000858:	430a      	orrs	r2, r1
 800085a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <HAL_MspInit+0x44>)
 800085e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000860:	2380      	movs	r3, #128	@ 0x80
 8000862:	055b      	lsls	r3, r3, #21
 8000864:	4013      	ands	r3, r2
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b002      	add	sp, #8
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b095      	sub	sp, #84	@ 0x54
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	233c      	movs	r3, #60	@ 0x3c
 8000882:	18fb      	adds	r3, r7, r3
 8000884:	0018      	movs	r0, r3
 8000886:	2314      	movs	r3, #20
 8000888:	001a      	movs	r2, r3
 800088a:	2100      	movs	r1, #0
 800088c:	f003 f9ee 	bl	8003c6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000890:	2414      	movs	r4, #20
 8000892:	193b      	adds	r3, r7, r4
 8000894:	0018      	movs	r0, r3
 8000896:	2328      	movs	r3, #40	@ 0x28
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f003 f9e6 	bl	8003c6c <memset>
  if(hi2c->Instance==I2C1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a22      	ldr	r2, [pc, #136]	@ (8000930 <HAL_I2C_MspInit+0xb8>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d13d      	bne.n	8000926 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2220      	movs	r2, #32
 80008ae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	0018      	movs	r0, r3
 80008ba:	f001 fc0f 	bl	80020dc <HAL_RCCEx_PeriphCLKConfig>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80008c2:	f7ff ffaf 	bl	8000824 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <HAL_I2C_MspInit+0xbc>)
 80008c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <HAL_I2C_MspInit+0xbc>)
 80008cc:	2102      	movs	r1, #2
 80008ce:	430a      	orrs	r2, r1
 80008d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <HAL_I2C_MspInit+0xbc>)
 80008d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008d6:	2202      	movs	r2, #2
 80008d8:	4013      	ands	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008de:	213c      	movs	r1, #60	@ 0x3c
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	22c0      	movs	r2, #192	@ 0xc0
 80008e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2212      	movs	r2, #18
 80008ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2206      	movs	r2, #6
 80008fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <HAL_I2C_MspInit+0xc0>)
 8000902:	0019      	movs	r1, r3
 8000904:	0010      	movs	r0, r2
 8000906:	f000 fb17 	bl	8000f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800090a:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <HAL_I2C_MspInit+0xbc>)
 800090c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <HAL_I2C_MspInit+0xbc>)
 8000910:	2180      	movs	r1, #128	@ 0x80
 8000912:	0389      	lsls	r1, r1, #14
 8000914:	430a      	orrs	r2, r1
 8000916:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_I2C_MspInit+0xbc>)
 800091a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800091c:	2380      	movs	r3, #128	@ 0x80
 800091e:	039b      	lsls	r3, r3, #14
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b015      	add	sp, #84	@ 0x54
 800092c:	bd90      	pop	{r4, r7, pc}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	40005400 	.word	0x40005400
 8000934:	40021000 	.word	0x40021000
 8000938:	50000400 	.word	0x50000400

0800093c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b095      	sub	sp, #84	@ 0x54
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	233c      	movs	r3, #60	@ 0x3c
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	0018      	movs	r0, r3
 800094a:	2314      	movs	r3, #20
 800094c:	001a      	movs	r2, r3
 800094e:	2100      	movs	r1, #0
 8000950:	f003 f98c 	bl	8003c6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000954:	2414      	movs	r4, #20
 8000956:	193b      	adds	r3, r7, r4
 8000958:	0018      	movs	r0, r3
 800095a:	2328      	movs	r3, #40	@ 0x28
 800095c:	001a      	movs	r2, r3
 800095e:	2100      	movs	r1, #0
 8000960:	f003 f984 	bl	8003c6c <memset>
  if(hi2s->Instance==SPI1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a34      	ldr	r2, [pc, #208]	@ (8000a3c <HAL_I2S_MspInit+0x100>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d161      	bne.n	8000a32 <HAL_I2S_MspInit+0xf6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2280      	movs	r2, #128	@ 0x80
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000976:	193b      	adds	r3, r7, r4
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097c:	193b      	adds	r3, r7, r4
 800097e:	0018      	movs	r0, r3
 8000980:	f001 fbac 	bl	80020dc <HAL_RCCEx_PeriphCLKConfig>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000988:	f7ff ff4c 	bl	8000824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800098c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a40 <HAL_I2S_MspInit+0x104>)
 800098e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000990:	4b2b      	ldr	r3, [pc, #172]	@ (8000a40 <HAL_I2S_MspInit+0x104>)
 8000992:	2180      	movs	r1, #128	@ 0x80
 8000994:	0149      	lsls	r1, r1, #5
 8000996:	430a      	orrs	r2, r1
 8000998:	641a      	str	r2, [r3, #64]	@ 0x40
 800099a:	4b29      	ldr	r3, [pc, #164]	@ (8000a40 <HAL_I2S_MspInit+0x104>)
 800099c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800099e:	2380      	movs	r3, #128	@ 0x80
 80009a0:	015b      	lsls	r3, r3, #5
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b25      	ldr	r3, [pc, #148]	@ (8000a40 <HAL_I2S_MspInit+0x104>)
 80009aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ac:	4b24      	ldr	r3, [pc, #144]	@ (8000a40 <HAL_I2S_MspInit+0x104>)
 80009ae:	2101      	movs	r1, #1
 80009b0:	430a      	orrs	r2, r1
 80009b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80009b4:	4b22      	ldr	r3, [pc, #136]	@ (8000a40 <HAL_I2S_MspInit+0x104>)
 80009b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009b8:	2201      	movs	r2, #1
 80009ba:	4013      	ands	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <HAL_I2S_MspInit+0x104>)
 80009c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <HAL_I2S_MspInit+0x104>)
 80009c6:	2102      	movs	r1, #2
 80009c8:	430a      	orrs	r2, r1
 80009ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80009cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <HAL_I2S_MspInit+0x104>)
 80009ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009d0:	2202      	movs	r2, #2
 80009d2:	4013      	ands	r3, r2
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PA2     ------> I2S1_SD
    PB0     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80009d8:	243c      	movs	r4, #60	@ 0x3c
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	2206      	movs	r2, #6
 80009de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	2202      	movs	r2, #2
 80009e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	193a      	adds	r2, r7, r4
 80009fa:	23a0      	movs	r3, #160	@ 0xa0
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fa99 	bl	8000f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a06:	0021      	movs	r1, r4
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2202      	movs	r2, #2
 8000a12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	4a06      	ldr	r2, [pc, #24]	@ (8000a44 <HAL_I2S_MspInit+0x108>)
 8000a2a:	0019      	movs	r1, r3
 8000a2c:	0010      	movs	r0, r2
 8000a2e:	f000 fa83 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b015      	add	sp, #84	@ 0x54
 8000a38:	bd90      	pop	{r4, r7, pc}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	40013000 	.word	0x40013000
 8000a40:	40021000 	.word	0x40021000
 8000a44:	50000400 	.word	0x50000400

08000a48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b08f      	sub	sp, #60	@ 0x3c
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a50:	2410      	movs	r4, #16
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	0018      	movs	r0, r3
 8000a56:	2328      	movs	r3, #40	@ 0x28
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f003 f906 	bl	8003c6c <memset>
  if(hrtc->Instance==RTC)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a15      	ldr	r2, [pc, #84]	@ (8000abc <HAL_RTC_MspInit+0x74>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d124      	bne.n	8000ab4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	2280      	movs	r2, #128	@ 0x80
 8000a6e:	0292      	lsls	r2, r2, #10
 8000a70:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2280      	movs	r2, #128	@ 0x80
 8000a76:	0052      	lsls	r2, r2, #1
 8000a78:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f001 fb2d 	bl	80020dc <HAL_RCCEx_PeriphCLKConfig>
 8000a82:	1e03      	subs	r3, r0, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000a86:	f7ff fecd 	bl	8000824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac0 <HAL_RTC_MspInit+0x78>)
 8000a8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <HAL_RTC_MspInit+0x78>)
 8000a90:	2180      	movs	r1, #128	@ 0x80
 8000a92:	0209      	lsls	r1, r1, #8
 8000a94:	430a      	orrs	r2, r1
 8000a96:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000a98:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <HAL_RTC_MspInit+0x78>)
 8000a9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <HAL_RTC_MspInit+0x78>)
 8000a9e:	2180      	movs	r1, #128	@ 0x80
 8000aa0:	00c9      	lsls	r1, r1, #3
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000aa6:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <HAL_RTC_MspInit+0x78>)
 8000aa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000aaa:	2380      	movs	r3, #128	@ 0x80
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	4013      	ands	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b00f      	add	sp, #60	@ 0x3c
 8000aba:	bd90      	pop	{r4, r7, pc}
 8000abc:	40002800 	.word	0x40002800
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b08b      	sub	sp, #44	@ 0x2c
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	2414      	movs	r4, #20
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	2314      	movs	r3, #20
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f003 f8c8 	bl	8003c6c <memset>
  if(hspi->Instance==SPI2)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a26      	ldr	r2, [pc, #152]	@ (8000b7c <HAL_SPI_MspInit+0xb8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d146      	bne.n	8000b74 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ae6:	4b26      	ldr	r3, [pc, #152]	@ (8000b80 <HAL_SPI_MspInit+0xbc>)
 8000ae8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000aea:	4b25      	ldr	r3, [pc, #148]	@ (8000b80 <HAL_SPI_MspInit+0xbc>)
 8000aec:	2180      	movs	r1, #128	@ 0x80
 8000aee:	01c9      	lsls	r1, r1, #7
 8000af0:	430a      	orrs	r2, r1
 8000af2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000af4:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <HAL_SPI_MspInit+0xbc>)
 8000af6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000af8:	2380      	movs	r3, #128	@ 0x80
 8000afa:	01db      	lsls	r3, r3, #7
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <HAL_SPI_MspInit+0xbc>)
 8000b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b06:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <HAL_SPI_MspInit+0xbc>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <HAL_SPI_MspInit+0xbc>)
 8000b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b12:	2201      	movs	r2, #1
 8000b14:	4013      	ands	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	2209      	movs	r2, #9
 8000b1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	2202      	movs	r2, #2
 8000b24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	193a      	adds	r2, r7, r4
 8000b3a:	23a0      	movs	r3, #160	@ 0xa0
 8000b3c:	05db      	lsls	r3, r3, #23
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f000 f9f9 	bl	8000f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b46:	0021      	movs	r1, r4
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2210      	movs	r2, #16
 8000b4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2202      	movs	r2, #2
 8000b52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2201      	movs	r2, #1
 8000b64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	187a      	adds	r2, r7, r1
 8000b68:	23a0      	movs	r3, #160	@ 0xa0
 8000b6a:	05db      	lsls	r3, r3, #23
 8000b6c:	0011      	movs	r1, r2
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f000 f9e2 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b74:	46c0      	nop			@ (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b00b      	add	sp, #44	@ 0x2c
 8000b7a:	bd90      	pop	{r4, r7, pc}
 8000b7c:	40003800 	.word	0x40003800
 8000b80:	40021000 	.word	0x40021000

08000b84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	2380      	movs	r3, #128	@ 0x80
 8000b92:	05db      	lsls	r3, r3, #23
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d10b      	bne.n	8000bb0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b98:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <HAL_TIM_PWM_MspInit+0x34>)
 8000b9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_TIM_PWM_MspInit+0x34>)
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ba4:	4b04      	ldr	r3, [pc, #16]	@ (8000bb8 <HAL_TIM_PWM_MspInit+0x34>)
 8000ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4013      	ands	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b004      	add	sp, #16
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b089      	sub	sp, #36	@ 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	240c      	movs	r4, #12
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	0018      	movs	r0, r3
 8000bca:	2314      	movs	r3, #20
 8000bcc:	001a      	movs	r2, r3
 8000bce:	2100      	movs	r1, #0
 8000bd0:	f003 f84c 	bl	8003c6c <memset>
  if(htim->Instance==TIM2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	2380      	movs	r3, #128	@ 0x80
 8000bda:	05db      	lsls	r3, r3, #23
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d121      	bne.n	8000c24 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <HAL_TIM_MspPostInit+0x70>)
 8000be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <HAL_TIM_MspPostInit+0x70>)
 8000be6:	2104      	movs	r1, #4
 8000be8:	430a      	orrs	r2, r1
 8000bea:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <HAL_TIM_MspPostInit+0x70>)
 8000bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_SHIFT_nOE_Pin;
 8000bf8:	0021      	movs	r1, r4
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2240      	movs	r2, #64	@ 0x40
 8000bfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2202      	movs	r2, #2
 8000c04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2202      	movs	r2, #2
 8000c16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_SHIFT_nOE_GPIO_Port, &GPIO_InitStruct);
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <HAL_TIM_MspPostInit+0x74>)
 8000c1c:	0019      	movs	r1, r3
 8000c1e:	0010      	movs	r0, r2
 8000c20:	f000 f98a 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c24:	46c0      	nop			@ (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b009      	add	sp, #36	@ 0x24
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	50000800 	.word	0x50000800

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	e7fd      	b.n	8000c38 <NMI_Handler+0x4>

08000c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	e7fd      	b.n	8000c40 <HardFault_Handler+0x4>

08000c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f89c 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c70:	480d      	ldr	r0, [pc, #52]	@ (8000ca8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c72:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c74:	f7ff fff7 	bl	8000c66 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	@ (8000cac <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	@ (8000cb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <LoopForever+0xe>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	@ (8000cbc <LoopForever+0x16>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c9e:	f002 ffed 	bl	8003c7c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ca2:	f7ff fabb 	bl	800021c <main>

08000ca6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ca6:	e7fe      	b.n	8000ca6 <LoopForever>
  ldr   r0, =_estack
 8000ca8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cb4:	08003d98 	.word	0x08003d98
  ldr r2, =_sbss
 8000cb8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cbc:	20000198 	.word	0x20000198

08000cc0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC1_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <HAL_Init+0x3c>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_Init+0x3c>)
 8000cd6:	2180      	movs	r1, #128	@ 0x80
 8000cd8:	0049      	lsls	r1, r1, #1
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f000 f810 	bl	8000d04 <HAL_InitTick>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d003      	beq.n	8000cf0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	e001      	b.n	8000cf4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fd9e 	bl	8000830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	781b      	ldrb	r3, [r3, #0]
}
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b002      	add	sp, #8
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40022000 	.word	0x40022000

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d14:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <HAL_InitTick+0x88>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d02b      	beq.n	8000d74 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <HAL_InitTick+0x8c>)
 8000d1e:	681c      	ldr	r4, [r3, #0]
 8000d20:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <HAL_InitTick+0x88>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	0019      	movs	r1, r3
 8000d26:	23fa      	movs	r3, #250	@ 0xfa
 8000d28:	0098      	lsls	r0, r3, #2
 8000d2a:	f7ff f9eb 	bl	8000104 <__udivsi3>
 8000d2e:	0003      	movs	r3, r0
 8000d30:	0019      	movs	r1, r3
 8000d32:	0020      	movs	r0, r4
 8000d34:	f7ff f9e6 	bl	8000104 <__udivsi3>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 f8ef 	bl	8000f1e <HAL_SYSTICK_Config>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d112      	bne.n	8000d6a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d80a      	bhi.n	8000d60 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	425b      	negs	r3, r3
 8000d50:	2200      	movs	r2, #0
 8000d52:	0018      	movs	r0, r3
 8000d54:	f000 f8ce 	bl	8000ef4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d58:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <HAL_InitTick+0x90>)
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	e00d      	b.n	8000d7c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d60:	230f      	movs	r3, #15
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	e008      	b.n	8000d7c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e003      	b.n	8000d7c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d74:	230f      	movs	r3, #15
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	18fb      	adds	r3, r7, r3
 8000d80:	781b      	ldrb	r3, [r3, #0]
}
 8000d82:	0018      	movs	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b005      	add	sp, #20
 8000d88:	bd90      	pop	{r4, r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d9c:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <HAL_IncTick+0x1c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	001a      	movs	r2, r3
 8000da2:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <HAL_IncTick+0x20>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	18d2      	adds	r2, r2, r3
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <HAL_IncTick+0x20>)
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	46c0      	nop			@ (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000194 	.word	0x20000194

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b02      	ldr	r3, [pc, #8]	@ (8000dcc <HAL_GetTick+0x10>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	20000194 	.word	0x20000194

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000de4:	d828      	bhi.n	8000e38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de6:	4a2f      	ldr	r2, [pc, #188]	@ (8000ea4 <__NVIC_SetPriority+0xd4>)
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b25b      	sxtb	r3, r3
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	33c0      	adds	r3, #192	@ 0xc0
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	589b      	ldr	r3, [r3, r2]
 8000df6:	1dfa      	adds	r2, r7, #7
 8000df8:	7812      	ldrb	r2, [r2, #0]
 8000dfa:	0011      	movs	r1, r2
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	400a      	ands	r2, r1
 8000e00:	00d2      	lsls	r2, r2, #3
 8000e02:	21ff      	movs	r1, #255	@ 0xff
 8000e04:	4091      	lsls	r1, r2
 8000e06:	000a      	movs	r2, r1
 8000e08:	43d2      	mvns	r2, r2
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	019b      	lsls	r3, r3, #6
 8000e12:	22ff      	movs	r2, #255	@ 0xff
 8000e14:	401a      	ands	r2, r3
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	4003      	ands	r3, r0
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e24:	481f      	ldr	r0, [pc, #124]	@ (8000ea4 <__NVIC_SetPriority+0xd4>)
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	33c0      	adds	r3, #192	@ 0xc0
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e36:	e031      	b.n	8000e9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea8 <__NVIC_SetPriority+0xd8>)
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	0019      	movs	r1, r3
 8000e40:	230f      	movs	r3, #15
 8000e42:	400b      	ands	r3, r1
 8000e44:	3b08      	subs	r3, #8
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3306      	adds	r3, #6
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	18d3      	adds	r3, r2, r3
 8000e4e:	3304      	adds	r3, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	1dfa      	adds	r2, r7, #7
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	0011      	movs	r1, r2
 8000e58:	2203      	movs	r2, #3
 8000e5a:	400a      	ands	r2, r1
 8000e5c:	00d2      	lsls	r2, r2, #3
 8000e5e:	21ff      	movs	r1, #255	@ 0xff
 8000e60:	4091      	lsls	r1, r2
 8000e62:	000a      	movs	r2, r1
 8000e64:	43d2      	mvns	r2, r2
 8000e66:	401a      	ands	r2, r3
 8000e68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	019b      	lsls	r3, r3, #6
 8000e6e:	22ff      	movs	r2, #255	@ 0xff
 8000e70:	401a      	ands	r2, r3
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	0018      	movs	r0, r3
 8000e78:	2303      	movs	r3, #3
 8000e7a:	4003      	ands	r3, r0
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e80:	4809      	ldr	r0, [pc, #36]	@ (8000ea8 <__NVIC_SetPriority+0xd8>)
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	001c      	movs	r4, r3
 8000e88:	230f      	movs	r3, #15
 8000e8a:	4023      	ands	r3, r4
 8000e8c:	3b08      	subs	r3, #8
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	430a      	orrs	r2, r1
 8000e92:	3306      	adds	r3, #6
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	18c3      	adds	r3, r0, r3
 8000e98:	3304      	adds	r3, #4
 8000e9a:	601a      	str	r2, [r3, #0]
}
 8000e9c:	46c0      	nop			@ (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b003      	add	sp, #12
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	1e5a      	subs	r2, r3, #1
 8000eb8:	2380      	movs	r3, #128	@ 0x80
 8000eba:	045b      	lsls	r3, r3, #17
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d301      	bcc.n	8000ec4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e010      	b.n	8000ee6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <SysTick_Config+0x44>)
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	3a01      	subs	r2, #1
 8000eca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ecc:	2301      	movs	r3, #1
 8000ece:	425b      	negs	r3, r3
 8000ed0:	2103      	movs	r1, #3
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff ff7c 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <SysTick_Config+0x44>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <SysTick_Config+0x44>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b002      	add	sp, #8
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	210f      	movs	r1, #15
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	1c02      	adds	r2, r0, #0
 8000f04:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b004      	add	sp, #16
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff ffbf 	bl	8000eac <SysTick_Config>
 8000f2e:	0003      	movs	r3, r0
}
 8000f30:	0018      	movs	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b002      	add	sp, #8
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f46:	e147      	b.n	80011d8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4091      	lsls	r1, r2
 8000f52:	000a      	movs	r2, r1
 8000f54:	4013      	ands	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d100      	bne.n	8000f60 <HAL_GPIO_Init+0x28>
 8000f5e:	e138      	b.n	80011d2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2203      	movs	r2, #3
 8000f66:	4013      	ands	r3, r2
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d005      	beq.n	8000f78 <HAL_GPIO_Init+0x40>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2203      	movs	r2, #3
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d130      	bne.n	8000fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	409a      	lsls	r2, r3
 8000f9a:	0013      	movs	r3, r2
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fae:	2201      	movs	r2, #1
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	0013      	movs	r3, r2
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	091b      	lsrs	r3, r3, #4
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2203      	movs	r2, #3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d017      	beq.n	8001016 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	409a      	lsls	r2, r3
 8001008:	0013      	movs	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2203      	movs	r2, #3
 800101c:	4013      	ands	r3, r2
 800101e:	2b02      	cmp	r3, #2
 8001020:	d123      	bne.n	800106a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	0092      	lsls	r2, r2, #2
 800102c:	58d3      	ldr	r3, [r2, r3]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	2207      	movs	r2, #7
 8001034:	4013      	ands	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	220f      	movs	r2, #15
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	691a      	ldr	r2, [r3, #16]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	2107      	movs	r1, #7
 800104e:	400b      	ands	r3, r1
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	6939      	ldr	r1, [r7, #16]
 8001068:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	43da      	mvns	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2203      	movs	r2, #3
 8001088:	401a      	ands	r2, r3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	23c0      	movs	r3, #192	@ 0xc0
 80010a4:	029b      	lsls	r3, r3, #10
 80010a6:	4013      	ands	r3, r2
 80010a8:	d100      	bne.n	80010ac <HAL_GPIO_Init+0x174>
 80010aa:	e092      	b.n	80011d2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80010ac:	4a50      	ldr	r2, [pc, #320]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3318      	adds	r3, #24
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	589b      	ldr	r3, [r3, r2]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2203      	movs	r2, #3
 80010be:	4013      	ands	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	220f      	movs	r2, #15
 80010c4:	409a      	lsls	r2, r3
 80010c6:	0013      	movs	r3, r2
 80010c8:	43da      	mvns	r2, r3
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	23a0      	movs	r3, #160	@ 0xa0
 80010d4:	05db      	lsls	r3, r3, #23
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0x1ca>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a45      	ldr	r2, [pc, #276]	@ (80011f4 <HAL_GPIO_Init+0x2bc>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00d      	beq.n	80010fe <HAL_GPIO_Init+0x1c6>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a44      	ldr	r2, [pc, #272]	@ (80011f8 <HAL_GPIO_Init+0x2c0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x1c2>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a43      	ldr	r2, [pc, #268]	@ (80011fc <HAL_GPIO_Init+0x2c4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_GPIO_Init+0x1be>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e006      	b.n	8001104 <HAL_GPIO_Init+0x1cc>
 80010f6:	2305      	movs	r3, #5
 80010f8:	e004      	b.n	8001104 <HAL_GPIO_Init+0x1cc>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e002      	b.n	8001104 <HAL_GPIO_Init+0x1cc>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <HAL_GPIO_Init+0x1cc>
 8001102:	2300      	movs	r3, #0
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	2103      	movs	r1, #3
 8001108:	400a      	ands	r2, r1
 800110a:	00d2      	lsls	r2, r2, #3
 800110c:	4093      	lsls	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001114:	4936      	ldr	r1, [pc, #216]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	3318      	adds	r3, #24
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001122:	4b33      	ldr	r3, [pc, #204]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43da      	mvns	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	035b      	lsls	r3, r3, #13
 800113a:	4013      	ands	r3, r2
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001146:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800114c:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43da      	mvns	r2, r3
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	2380      	movs	r3, #128	@ 0x80
 8001162:	039b      	lsls	r3, r3, #14
 8001164:	4013      	ands	r3, r2
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001170:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001176:	4a1e      	ldr	r2, [pc, #120]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 8001178:	2384      	movs	r3, #132	@ 0x84
 800117a:	58d3      	ldr	r3, [r2, r3]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43da      	mvns	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	2380      	movs	r3, #128	@ 0x80
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	4013      	ands	r3, r2
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800119c:	4914      	ldr	r1, [pc, #80]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 800119e:	2284      	movs	r2, #132	@ 0x84
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80011a4:	4a12      	ldr	r2, [pc, #72]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 80011a6:	2380      	movs	r3, #128	@ 0x80
 80011a8:	58d3      	ldr	r3, [r2, r3]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43da      	mvns	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	025b      	lsls	r3, r3, #9
 80011be:	4013      	ands	r3, r2
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ca:	4909      	ldr	r1, [pc, #36]	@ (80011f0 <HAL_GPIO_Init+0x2b8>)
 80011cc:	2280      	movs	r2, #128	@ 0x80
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	40da      	lsrs	r2, r3
 80011e0:	1e13      	subs	r3, r2, #0
 80011e2:	d000      	beq.n	80011e6 <HAL_GPIO_Init+0x2ae>
 80011e4:	e6b0      	b.n	8000f48 <HAL_GPIO_Init+0x10>
  }
}
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b006      	add	sp, #24
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021800 	.word	0x40021800
 80011f4:	50000400 	.word	0x50000400
 80011f8:	50000800 	.word	0x50000800
 80011fc:	50000c00 	.word	0x50000c00

08001200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	0008      	movs	r0, r1
 800120a:	0011      	movs	r1, r2
 800120c:	1cbb      	adds	r3, r7, #2
 800120e:	1c02      	adds	r2, r0, #0
 8001210:	801a      	strh	r2, [r3, #0]
 8001212:	1c7b      	adds	r3, r7, #1
 8001214:	1c0a      	adds	r2, r1, #0
 8001216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001218:	1c7b      	adds	r3, r7, #1
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001220:	1cbb      	adds	r3, r7, #2
 8001222:	881a      	ldrh	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001228:	e003      	b.n	8001232 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800122a:	1cbb      	adds	r3, r7, #2
 800122c:	881a      	ldrh	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e08f      	b.n	800136e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2241      	movs	r2, #65	@ 0x41
 8001252:	5c9b      	ldrb	r3, [r3, r2]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d107      	bne.n	800126a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2240      	movs	r2, #64	@ 0x40
 800125e:	2100      	movs	r1, #0
 8001260:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	0018      	movs	r0, r3
 8001266:	f7ff fb07 	bl	8000878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2241      	movs	r2, #65	@ 0x41
 800126e:	2124      	movs	r1, #36	@ 0x24
 8001270:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2101      	movs	r1, #1
 800127e:	438a      	bics	r2, r1
 8001280:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	493b      	ldr	r1, [pc, #236]	@ (8001378 <HAL_I2C_Init+0x13c>)
 800128c:	400a      	ands	r2, r1
 800128e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4938      	ldr	r1, [pc, #224]	@ (800137c <HAL_I2C_Init+0x140>)
 800129c:	400a      	ands	r2, r1
 800129e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d108      	bne.n	80012ba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2180      	movs	r1, #128	@ 0x80
 80012b2:	0209      	lsls	r1, r1, #8
 80012b4:	430a      	orrs	r2, r1
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	e007      	b.n	80012ca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2184      	movs	r1, #132	@ 0x84
 80012c4:	0209      	lsls	r1, r1, #8
 80012c6:	430a      	orrs	r2, r1
 80012c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d109      	bne.n	80012e6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2180      	movs	r1, #128	@ 0x80
 80012de:	0109      	lsls	r1, r1, #4
 80012e0:	430a      	orrs	r2, r1
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	e007      	b.n	80012f6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4923      	ldr	r1, [pc, #140]	@ (8001380 <HAL_I2C_Init+0x144>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4920      	ldr	r1, [pc, #128]	@ (8001384 <HAL_I2C_Init+0x148>)
 8001302:	430a      	orrs	r2, r1
 8001304:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	491a      	ldr	r1, [pc, #104]	@ (800137c <HAL_I2C_Init+0x140>)
 8001312:	400a      	ands	r2, r1
 8001314:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691a      	ldr	r2, [r3, #16]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	431a      	orrs	r2, r3
 8001320:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69d9      	ldr	r1, [r3, #28]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1a      	ldr	r2, [r3, #32]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2101      	movs	r1, #1
 800134c:	430a      	orrs	r2, r1
 800134e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2241      	movs	r2, #65	@ 0x41
 800135a:	2120      	movs	r1, #32
 800135c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2242      	movs	r2, #66	@ 0x42
 8001368:	2100      	movs	r1, #0
 800136a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	0018      	movs	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	b002      	add	sp, #8
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	f0ffffff 	.word	0xf0ffffff
 800137c:	ffff7fff 	.word	0xffff7fff
 8001380:	fffff7ff 	.word	0xfffff7ff
 8001384:	02008000 	.word	0x02008000

08001388 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2241      	movs	r2, #65	@ 0x41
 8001396:	5c9b      	ldrb	r3, [r3, r2]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b20      	cmp	r3, #32
 800139c:	d138      	bne.n	8001410 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2240      	movs	r2, #64	@ 0x40
 80013a2:	5c9b      	ldrb	r3, [r3, r2]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013a8:	2302      	movs	r3, #2
 80013aa:	e032      	b.n	8001412 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2240      	movs	r2, #64	@ 0x40
 80013b0:	2101      	movs	r1, #1
 80013b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2241      	movs	r2, #65	@ 0x41
 80013b8:	2124      	movs	r1, #36	@ 0x24
 80013ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2101      	movs	r1, #1
 80013c8:	438a      	bics	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4911      	ldr	r1, [pc, #68]	@ (800141c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80013d8:	400a      	ands	r2, r1
 80013da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6819      	ldr	r1, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2101      	movs	r1, #1
 80013f8:	430a      	orrs	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2241      	movs	r2, #65	@ 0x41
 8001400:	2120      	movs	r1, #32
 8001402:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2240      	movs	r2, #64	@ 0x40
 8001408:	2100      	movs	r1, #0
 800140a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	e000      	b.n	8001412 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001410:	2302      	movs	r3, #2
  }
}
 8001412:	0018      	movs	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	b002      	add	sp, #8
 8001418:	bd80      	pop	{r7, pc}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	ffffefff 	.word	0xffffefff

08001420 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2241      	movs	r2, #65	@ 0x41
 800142e:	5c9b      	ldrb	r3, [r3, r2]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b20      	cmp	r3, #32
 8001434:	d139      	bne.n	80014aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2240      	movs	r2, #64	@ 0x40
 800143a:	5c9b      	ldrb	r3, [r3, r2]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001440:	2302      	movs	r3, #2
 8001442:	e033      	b.n	80014ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2240      	movs	r2, #64	@ 0x40
 8001448:	2101      	movs	r1, #1
 800144a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2241      	movs	r2, #65	@ 0x41
 8001450:	2124      	movs	r1, #36	@ 0x24
 8001452:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2101      	movs	r1, #1
 8001460:	438a      	bics	r2, r1
 8001462:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4a11      	ldr	r2, [pc, #68]	@ (80014b4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001470:	4013      	ands	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2101      	movs	r1, #1
 8001492:	430a      	orrs	r2, r1
 8001494:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2241      	movs	r2, #65	@ 0x41
 800149a:	2120      	movs	r1, #32
 800149c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2240      	movs	r2, #64	@ 0x40
 80014a2:	2100      	movs	r1, #0
 80014a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e000      	b.n	80014ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014aa:	2302      	movs	r3, #2
  }
}
 80014ac:	0018      	movs	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b004      	add	sp, #16
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	fffff0ff 	.word	0xfffff0ff

080014b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0e5      	b.n	8001696 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2235      	movs	r2, #53	@ 0x35
 80014ce:	5c9b      	ldrb	r3, [r3, r2]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d107      	bne.n	80014e6 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2234      	movs	r2, #52	@ 0x34
 80014da:	2100      	movs	r1, #0
 80014dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff fa2b 	bl	800093c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2235      	movs	r2, #53	@ 0x35
 80014ea:	2102      	movs	r1, #2
 80014ec:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	69da      	ldr	r2, [r3, #28]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4969      	ldr	r1, [pc, #420]	@ (80016a0 <HAL_I2S_Init+0x1e8>)
 80014fa:	400a      	ands	r2, r1
 80014fc:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2202      	movs	r2, #2
 8001504:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d100      	bne.n	8001510 <HAL_I2S_Init+0x58>
 800150e:	e076      	b.n	80015fe <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001518:	2310      	movs	r3, #16
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	e001      	b.n	8001522 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800151e:	2320      	movs	r3, #32
 8001520:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b20      	cmp	r3, #32
 8001528:	d802      	bhi.n	8001530 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8001530:	2380      	movs	r3, #128	@ 0x80
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	0018      	movs	r0, r3
 8001536:	f000 ff4b 	bl	80023d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800153a:	0003      	movs	r3, r0
 800153c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	2380      	movs	r3, #128	@ 0x80
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	429a      	cmp	r2, r3
 8001548:	d131      	bne.n	80015ae <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d016      	beq.n	8001580 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	0019      	movs	r1, r3
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f7fe fdd3 	bl	8000104 <__udivsi3>
 800155e:	0003      	movs	r3, r0
 8001560:	001a      	movs	r2, r3
 8001562:	0013      	movs	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	189b      	adds	r3, r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	001a      	movs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	0019      	movs	r1, r3
 8001572:	0010      	movs	r0, r2
 8001574:	f7fe fdc6 	bl	8000104 <__udivsi3>
 8001578:	0003      	movs	r3, r0
 800157a:	3305      	adds	r3, #5
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	e02a      	b.n	80015d6 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	0019      	movs	r1, r3
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f7fe fdbc 	bl	8000104 <__udivsi3>
 800158c:	0003      	movs	r3, r0
 800158e:	001a      	movs	r2, r3
 8001590:	0013      	movs	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	189b      	adds	r3, r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	001a      	movs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	0019      	movs	r1, r3
 80015a0:	0010      	movs	r0, r2
 80015a2:	f7fe fdaf 	bl	8000104 <__udivsi3>
 80015a6:	0003      	movs	r3, r0
 80015a8:	3305      	adds	r3, #5
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	e013      	b.n	80015d6 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80015ae:	6979      	ldr	r1, [r7, #20]
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f7fe fda7 	bl	8000104 <__udivsi3>
 80015b6:	0003      	movs	r3, r0
 80015b8:	001a      	movs	r2, r3
 80015ba:	0013      	movs	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	189b      	adds	r3, r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	001a      	movs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	0019      	movs	r1, r3
 80015ca:	0010      	movs	r0, r2
 80015cc:	f7fe fd9a 	bl	8000104 <__udivsi3>
 80015d0:	0003      	movs	r3, r0
 80015d2:	3305      	adds	r3, #5
 80015d4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	210a      	movs	r1, #10
 80015da:	0018      	movs	r0, r3
 80015dc:	f7fe fd92 	bl	8000104 <__udivsi3>
 80015e0:	0003      	movs	r3, r0
 80015e2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	2201      	movs	r2, #1
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	085b      	lsrs	r3, r3, #1
 80015f4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	61bb      	str	r3, [r7, #24]
 80015fc:	e003      	b.n	8001606 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80015fe:	2302      	movs	r3, #2
 8001600:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d902      	bls.n	8001612 <HAL_I2S_Init+0x15a>
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	2bff      	cmp	r3, #255	@ 0xff
 8001610:	d907      	bls.n	8001622 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001616:	2210      	movs	r2, #16
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e039      	b.n	8001696 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691a      	ldr	r2, [r3, #16]
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	431a      	orrs	r2, r3
 800162a:	0011      	movs	r1, r2
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	430a      	orrs	r2, r1
 8001634:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	4a18      	ldr	r2, [pc, #96]	@ (80016a0 <HAL_I2S_Init+0x1e8>)
 800163e:	401a      	ands	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4319      	orrs	r1, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	4319      	orrs	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	430b      	orrs	r3, r1
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2180      	movs	r1, #128	@ 0x80
 800165e:	0109      	lsls	r1, r1, #4
 8001660:	430a      	orrs	r2, r1
 8001662:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b30      	cmp	r3, #48	@ 0x30
 800166a:	d003      	beq.n	8001674 <HAL_I2S_Init+0x1bc>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2bb0      	cmp	r3, #176	@ 0xb0
 8001672:	d108      	bne.n	8001686 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	69da      	ldr	r2, [r3, #28]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2180      	movs	r1, #128	@ 0x80
 8001680:	0149      	lsls	r1, r1, #5
 8001682:	430a      	orrs	r2, r1
 8001684:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2235      	movs	r2, #53	@ 0x35
 8001690:	2101      	movs	r1, #1
 8001692:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b008      	add	sp, #32
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	fffff040 	.word	0xfffff040

080016a4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016a8:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <HAL_PWR_EnableBkUpAccess+0x18>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b03      	ldr	r3, [pc, #12]	@ (80016bc <HAL_PWR_EnableBkUpAccess+0x18>)
 80016ae:	2180      	movs	r1, #128	@ 0x80
 80016b0:	0049      	lsls	r1, r1, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]
}
 80016b6:	46c0      	nop			@ (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40007000 	.word	0x40007000

080016c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80016c8:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a19      	ldr	r2, [pc, #100]	@ (8001734 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	0019      	movs	r1, r3
 80016d2:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d11f      	bne.n	8001724 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80016e4:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	0013      	movs	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	189b      	adds	r3, r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4912      	ldr	r1, [pc, #72]	@ (800173c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7fe fd06 	bl	8000104 <__udivsi3>
 80016f8:	0003      	movs	r3, r0
 80016fa:	3301      	adds	r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016fe:	e008      	b.n	8001712 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3b01      	subs	r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e001      	b.n	8001712 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e009      	b.n	8001726 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	2380      	movs	r3, #128	@ 0x80
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	401a      	ands	r2, r3
 800171c:	2380      	movs	r3, #128	@ 0x80
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	429a      	cmp	r2, r3
 8001722:	d0ed      	beq.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	0018      	movs	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	b004      	add	sp, #16
 800172c:	bd80      	pop	{r7, pc}
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	40007000 	.word	0x40007000
 8001734:	fffff9ff 	.word	0xfffff9ff
 8001738:	20000000 	.word	0x20000000
 800173c:	000f4240 	.word	0x000f4240

08001740 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001744:	4b03      	ldr	r3, [pc, #12]	@ (8001754 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	23e0      	movs	r3, #224	@ 0xe0
 800174a:	01db      	lsls	r3, r3, #7
 800174c:	4013      	ands	r3, r2
}
 800174e:	0018      	movs	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000

08001758 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e2fe      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2201      	movs	r2, #1
 8001770:	4013      	ands	r3, r2
 8001772:	d100      	bne.n	8001776 <HAL_RCC_OscConfig+0x1e>
 8001774:	e07c      	b.n	8001870 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001776:	4bc3      	ldr	r3, [pc, #780]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2238      	movs	r2, #56	@ 0x38
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001780:	4bc0      	ldr	r3, [pc, #768]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2203      	movs	r2, #3
 8001786:	4013      	ands	r3, r2
 8001788:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b10      	cmp	r3, #16
 800178e:	d102      	bne.n	8001796 <HAL_RCC_OscConfig+0x3e>
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	2b03      	cmp	r3, #3
 8001794:	d002      	beq.n	800179c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	2b08      	cmp	r3, #8
 800179a:	d10b      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179c:	4bb9      	ldr	r3, [pc, #740]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	@ 0x80
 80017a2:	029b      	lsls	r3, r3, #10
 80017a4:	4013      	ands	r3, r2
 80017a6:	d062      	beq.n	800186e <HAL_RCC_OscConfig+0x116>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d15e      	bne.n	800186e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e2d9      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	2380      	movs	r3, #128	@ 0x80
 80017ba:	025b      	lsls	r3, r3, #9
 80017bc:	429a      	cmp	r2, r3
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_OscConfig+0x78>
 80017c0:	4bb0      	ldr	r3, [pc, #704]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4baf      	ldr	r3, [pc, #700]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80017c6:	2180      	movs	r1, #128	@ 0x80
 80017c8:	0249      	lsls	r1, r1, #9
 80017ca:	430a      	orrs	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	e020      	b.n	8001812 <HAL_RCC_OscConfig+0xba>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	23a0      	movs	r3, #160	@ 0xa0
 80017d6:	02db      	lsls	r3, r3, #11
 80017d8:	429a      	cmp	r2, r3
 80017da:	d10e      	bne.n	80017fa <HAL_RCC_OscConfig+0xa2>
 80017dc:	4ba9      	ldr	r3, [pc, #676]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4ba8      	ldr	r3, [pc, #672]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80017e2:	2180      	movs	r1, #128	@ 0x80
 80017e4:	02c9      	lsls	r1, r1, #11
 80017e6:	430a      	orrs	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	4ba6      	ldr	r3, [pc, #664]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4ba5      	ldr	r3, [pc, #660]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80017f0:	2180      	movs	r1, #128	@ 0x80
 80017f2:	0249      	lsls	r1, r1, #9
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e00b      	b.n	8001812 <HAL_RCC_OscConfig+0xba>
 80017fa:	4ba2      	ldr	r3, [pc, #648]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4ba1      	ldr	r3, [pc, #644]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001800:	49a1      	ldr	r1, [pc, #644]	@ (8001a88 <HAL_RCC_OscConfig+0x330>)
 8001802:	400a      	ands	r2, r1
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	4b9f      	ldr	r3, [pc, #636]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b9e      	ldr	r3, [pc, #632]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 800180c:	499f      	ldr	r1, [pc, #636]	@ (8001a8c <HAL_RCC_OscConfig+0x334>)
 800180e:	400a      	ands	r2, r1
 8001810:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d014      	beq.n	8001844 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff facf 	bl	8000dbc <HAL_GetTick>
 800181e:	0003      	movs	r3, r0
 8001820:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff faca 	bl	8000dbc <HAL_GetTick>
 8001828:	0002      	movs	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	@ 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e298      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001836:	4b93      	ldr	r3, [pc, #588]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2380      	movs	r3, #128	@ 0x80
 800183c:	029b      	lsls	r3, r3, #10
 800183e:	4013      	ands	r3, r2
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0xcc>
 8001842:	e015      	b.n	8001870 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff faba 	bl	8000dbc <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184e:	f7ff fab5 	bl	8000dbc <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b64      	cmp	r3, #100	@ 0x64
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e283      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001860:	4b88      	ldr	r3, [pc, #544]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2380      	movs	r3, #128	@ 0x80
 8001866:	029b      	lsls	r3, r3, #10
 8001868:	4013      	ands	r3, r2
 800186a:	d1f0      	bne.n	800184e <HAL_RCC_OscConfig+0xf6>
 800186c:	e000      	b.n	8001870 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2202      	movs	r2, #2
 8001876:	4013      	ands	r3, r2
 8001878:	d100      	bne.n	800187c <HAL_RCC_OscConfig+0x124>
 800187a:	e099      	b.n	80019b0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800187c:	4b81      	ldr	r3, [pc, #516]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2238      	movs	r2, #56	@ 0x38
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001886:	4b7f      	ldr	r3, [pc, #508]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2203      	movs	r2, #3
 800188c:	4013      	ands	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2b10      	cmp	r3, #16
 8001894:	d102      	bne.n	800189c <HAL_RCC_OscConfig+0x144>
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d002      	beq.n	80018a2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d135      	bne.n	800190e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a2:	4b78      	ldr	r3, [pc, #480]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	@ 0x80
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4013      	ands	r3, r2
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_OscConfig+0x162>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e256      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	4b72      	ldr	r3, [pc, #456]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4a74      	ldr	r2, [pc, #464]	@ (8001a90 <HAL_RCC_OscConfig+0x338>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	0019      	movs	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	021a      	lsls	r2, r3, #8
 80018ca:	4b6e      	ldr	r3, [pc, #440]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80018cc:	430a      	orrs	r2, r1
 80018ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d112      	bne.n	80018fc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018d6:	4b6b      	ldr	r3, [pc, #428]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a6e      	ldr	r2, [pc, #440]	@ (8001a94 <HAL_RCC_OscConfig+0x33c>)
 80018dc:	4013      	ands	r3, r2
 80018de:	0019      	movs	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	4b67      	ldr	r3, [pc, #412]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80018e6:	430a      	orrs	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018ea:	4b66      	ldr	r3, [pc, #408]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	0adb      	lsrs	r3, r3, #11
 80018f0:	2207      	movs	r2, #7
 80018f2:	4013      	ands	r3, r2
 80018f4:	4a68      	ldr	r2, [pc, #416]	@ (8001a98 <HAL_RCC_OscConfig+0x340>)
 80018f6:	40da      	lsrs	r2, r3
 80018f8:	4b68      	ldr	r3, [pc, #416]	@ (8001a9c <HAL_RCC_OscConfig+0x344>)
 80018fa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018fc:	4b68      	ldr	r3, [pc, #416]	@ (8001aa0 <HAL_RCC_OscConfig+0x348>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0018      	movs	r0, r3
 8001902:	f7ff f9ff 	bl	8000d04 <HAL_InitTick>
 8001906:	1e03      	subs	r3, r0, #0
 8001908:	d051      	beq.n	80019ae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e22c      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d030      	beq.n	8001978 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001916:	4b5b      	ldr	r3, [pc, #364]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a5e      	ldr	r2, [pc, #376]	@ (8001a94 <HAL_RCC_OscConfig+0x33c>)
 800191c:	4013      	ands	r3, r2
 800191e:	0019      	movs	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691a      	ldr	r2, [r3, #16]
 8001924:	4b57      	ldr	r3, [pc, #348]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001926:	430a      	orrs	r2, r1
 8001928:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800192a:	4b56      	ldr	r3, [pc, #344]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b55      	ldr	r3, [pc, #340]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001930:	2180      	movs	r1, #128	@ 0x80
 8001932:	0049      	lsls	r1, r1, #1
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff fa40 	bl	8000dbc <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff fa3b 	bl	8000dbc <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e209      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001954:	4b4b      	ldr	r3, [pc, #300]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2380      	movs	r3, #128	@ 0x80
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	4013      	ands	r3, r2
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b48      	ldr	r3, [pc, #288]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4a4a      	ldr	r2, [pc, #296]	@ (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001966:	4013      	ands	r3, r2
 8001968:	0019      	movs	r1, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	021a      	lsls	r2, r3, #8
 8001970:	4b44      	ldr	r3, [pc, #272]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001972:	430a      	orrs	r2, r1
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	e01b      	b.n	80019b0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001978:	4b42      	ldr	r3, [pc, #264]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b41      	ldr	r3, [pc, #260]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 800197e:	4949      	ldr	r1, [pc, #292]	@ (8001aa4 <HAL_RCC_OscConfig+0x34c>)
 8001980:	400a      	ands	r2, r1
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fa1a 	bl	8000dbc <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198e:	f7ff fa15 	bl	8000dbc <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1e3      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019a0:	4b38      	ldr	r3, [pc, #224]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	@ 0x80
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4013      	ands	r3, r2
 80019aa:	d1f0      	bne.n	800198e <HAL_RCC_OscConfig+0x236>
 80019ac:	e000      	b.n	80019b0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2208      	movs	r2, #8
 80019b6:	4013      	ands	r3, r2
 80019b8:	d047      	beq.n	8001a4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019ba:	4b32      	ldr	r3, [pc, #200]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2238      	movs	r2, #56	@ 0x38
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b18      	cmp	r3, #24
 80019c4:	d10a      	bne.n	80019dc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80019c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80019c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ca:	2202      	movs	r2, #2
 80019cc:	4013      	ands	r3, r2
 80019ce:	d03c      	beq.n	8001a4a <HAL_RCC_OscConfig+0x2f2>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d138      	bne.n	8001a4a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e1c5      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d019      	beq.n	8001a18 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80019e4:	4b27      	ldr	r3, [pc, #156]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019e8:	4b26      	ldr	r3, [pc, #152]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	430a      	orrs	r2, r1
 80019ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff f9e4 	bl	8000dbc <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019fa:	f7ff f9df 	bl	8000dbc <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1ad      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a10:	2202      	movs	r2, #2
 8001a12:	4013      	ands	r3, r2
 8001a14:	d0f1      	beq.n	80019fa <HAL_RCC_OscConfig+0x2a2>
 8001a16:	e018      	b.n	8001a4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a18:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a1c:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001a1e:	2101      	movs	r1, #1
 8001a20:	438a      	bics	r2, r1
 8001a22:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7ff f9ca 	bl	8000dbc <HAL_GetTick>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2e:	f7ff f9c5 	bl	8000dbc <HAL_GetTick>
 8001a32:	0002      	movs	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e193      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a40:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a44:	2202      	movs	r2, #2
 8001a46:	4013      	ands	r3, r2
 8001a48:	d1f1      	bne.n	8001a2e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2204      	movs	r2, #4
 8001a50:	4013      	ands	r3, r2
 8001a52:	d100      	bne.n	8001a56 <HAL_RCC_OscConfig+0x2fe>
 8001a54:	e0c6      	b.n	8001be4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a56:	231f      	movs	r3, #31
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2238      	movs	r2, #56	@ 0x38
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b20      	cmp	r3, #32
 8001a68:	d11e      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a6a:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <HAL_RCC_OscConfig+0x32c>)
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a6e:	2202      	movs	r2, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	d100      	bne.n	8001a76 <HAL_RCC_OscConfig+0x31e>
 8001a74:	e0b6      	b.n	8001be4 <HAL_RCC_OscConfig+0x48c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d000      	beq.n	8001a80 <HAL_RCC_OscConfig+0x328>
 8001a7e:	e0b1      	b.n	8001be4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e171      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
 8001a84:	40021000 	.word	0x40021000
 8001a88:	fffeffff 	.word	0xfffeffff
 8001a8c:	fffbffff 	.word	0xfffbffff
 8001a90:	ffff80ff 	.word	0xffff80ff
 8001a94:	ffffc7ff 	.word	0xffffc7ff
 8001a98:	00f42400 	.word	0x00f42400
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	20000004 	.word	0x20000004
 8001aa4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001aa8:	4bb1      	ldr	r3, [pc, #708]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001aaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001aac:	2380      	movs	r3, #128	@ 0x80
 8001aae:	055b      	lsls	r3, r3, #21
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x360>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <HAL_RCC_OscConfig+0x362>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d011      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	4bac      	ldr	r3, [pc, #688]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001ac0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ac2:	4bab      	ldr	r3, [pc, #684]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001ac4:	2180      	movs	r1, #128	@ 0x80
 8001ac6:	0549      	lsls	r1, r1, #21
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001acc:	4ba8      	ldr	r3, [pc, #672]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001ace:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	055b      	lsls	r3, r3, #21
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001ada:	231f      	movs	r3, #31
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae2:	4ba4      	ldr	r3, [pc, #656]	@ (8001d74 <HAL_RCC_OscConfig+0x61c>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4013      	ands	r3, r2
 8001aec:	d11a      	bne.n	8001b24 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aee:	4ba1      	ldr	r3, [pc, #644]	@ (8001d74 <HAL_RCC_OscConfig+0x61c>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4ba0      	ldr	r3, [pc, #640]	@ (8001d74 <HAL_RCC_OscConfig+0x61c>)
 8001af4:	2180      	movs	r1, #128	@ 0x80
 8001af6:	0049      	lsls	r1, r1, #1
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001afc:	f7ff f95e 	bl	8000dbc <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b06:	f7ff f959 	bl	8000dbc <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e127      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b18:	4b96      	ldr	r3, [pc, #600]	@ (8001d74 <HAL_RCC_OscConfig+0x61c>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2380      	movs	r3, #128	@ 0x80
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4013      	ands	r3, r2
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3e2>
 8001b2c:	4b90      	ldr	r3, [pc, #576]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001b2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b30:	4b8f      	ldr	r3, [pc, #572]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001b32:	2101      	movs	r1, #1
 8001b34:	430a      	orrs	r2, r1
 8001b36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b38:	e01c      	b.n	8001b74 <HAL_RCC_OscConfig+0x41c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b05      	cmp	r3, #5
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x404>
 8001b42:	4b8b      	ldr	r3, [pc, #556]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001b44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b46:	4b8a      	ldr	r3, [pc, #552]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001b48:	2104      	movs	r1, #4
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b4e:	4b88      	ldr	r3, [pc, #544]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001b50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b52:	4b87      	ldr	r3, [pc, #540]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001b54:	2101      	movs	r1, #1
 8001b56:	430a      	orrs	r2, r1
 8001b58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b5a:	e00b      	b.n	8001b74 <HAL_RCC_OscConfig+0x41c>
 8001b5c:	4b84      	ldr	r3, [pc, #528]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001b5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b60:	4b83      	ldr	r3, [pc, #524]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001b62:	2101      	movs	r1, #1
 8001b64:	438a      	bics	r2, r1
 8001b66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b68:	4b81      	ldr	r3, [pc, #516]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001b6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b6c:	4b80      	ldr	r3, [pc, #512]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001b6e:	2104      	movs	r1, #4
 8001b70:	438a      	bics	r2, r1
 8001b72:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d014      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f91e 	bl	8000dbc <HAL_GetTick>
 8001b80:	0003      	movs	r3, r0
 8001b82:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b84:	e009      	b.n	8001b9a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f7ff f919 	bl	8000dbc <HAL_GetTick>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	4a79      	ldr	r2, [pc, #484]	@ (8001d78 <HAL_RCC_OscConfig+0x620>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e0e6      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b9a:	4b75      	ldr	r3, [pc, #468]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x42e>
 8001ba4:	e013      	b.n	8001bce <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba6:	f7ff f909 	bl	8000dbc <HAL_GetTick>
 8001baa:	0003      	movs	r3, r0
 8001bac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bae:	e009      	b.n	8001bc4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f7ff f904 	bl	8000dbc <HAL_GetTick>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	4a6f      	ldr	r2, [pc, #444]	@ (8001d78 <HAL_RCC_OscConfig+0x620>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e0d1      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bc4:	4b6a      	ldr	r3, [pc, #424]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc8:	2202      	movs	r2, #2
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001bce:	231f      	movs	r3, #31
 8001bd0:	18fb      	adds	r3, r7, r3
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d105      	bne.n	8001be4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001bd8:	4b65      	ldr	r3, [pc, #404]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001bda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bdc:	4b64      	ldr	r3, [pc, #400]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001bde:	4967      	ldr	r1, [pc, #412]	@ (8001d7c <HAL_RCC_OscConfig+0x624>)
 8001be0:	400a      	ands	r2, r1
 8001be2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d100      	bne.n	8001bee <HAL_RCC_OscConfig+0x496>
 8001bec:	e0bb      	b.n	8001d66 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bee:	4b60      	ldr	r3, [pc, #384]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2238      	movs	r2, #56	@ 0x38
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	d100      	bne.n	8001bfc <HAL_RCC_OscConfig+0x4a4>
 8001bfa:	e07b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d156      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c04:	4b5a      	ldr	r3, [pc, #360]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b59      	ldr	r3, [pc, #356]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001c0a:	495d      	ldr	r1, [pc, #372]	@ (8001d80 <HAL_RCC_OscConfig+0x628>)
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff f8d4 	bl	8000dbc <HAL_GetTick>
 8001c14:	0003      	movs	r3, r0
 8001c16:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7ff f8cf 	bl	8000dbc <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e09d      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2c:	4b50      	ldr	r3, [pc, #320]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	@ 0x80
 8001c32:	049b      	lsls	r3, r3, #18
 8001c34:	4013      	ands	r3, r2
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c38:	4b4d      	ldr	r3, [pc, #308]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4a51      	ldr	r2, [pc, #324]	@ (8001d84 <HAL_RCC_OscConfig+0x62c>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1a      	ldr	r2, [r3, #32]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c64:	431a      	orrs	r2, r3
 8001c66:	4b42      	ldr	r3, [pc, #264]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c6c:	4b40      	ldr	r3, [pc, #256]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b3f      	ldr	r3, [pc, #252]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001c72:	2180      	movs	r1, #128	@ 0x80
 8001c74:	0449      	lsls	r1, r1, #17
 8001c76:	430a      	orrs	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001c80:	2180      	movs	r1, #128	@ 0x80
 8001c82:	0549      	lsls	r1, r1, #21
 8001c84:	430a      	orrs	r2, r1
 8001c86:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7ff f898 	bl	8000dbc <HAL_GetTick>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c92:	f7ff f893 	bl	8000dbc <HAL_GetTick>
 8001c96:	0002      	movs	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e061      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca4:	4b32      	ldr	r3, [pc, #200]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2380      	movs	r3, #128	@ 0x80
 8001caa:	049b      	lsls	r3, r3, #18
 8001cac:	4013      	ands	r3, r2
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x53a>
 8001cb0:	e059      	b.n	8001d66 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001cb8:	4931      	ldr	r1, [pc, #196]	@ (8001d80 <HAL_RCC_OscConfig+0x628>)
 8001cba:	400a      	ands	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbe:	f7ff f87d 	bl	8000dbc <HAL_GetTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff f878 	bl	8000dbc <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e046      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cda:	4b25      	ldr	r3, [pc, #148]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	2380      	movs	r3, #128	@ 0x80
 8001ce0:	049b      	lsls	r3, r3, #18
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001ce6:	4b22      	ldr	r3, [pc, #136]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	4b21      	ldr	r3, [pc, #132]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001cec:	4926      	ldr	r1, [pc, #152]	@ (8001d88 <HAL_RCC_OscConfig+0x630>)
 8001cee:	400a      	ands	r2, r1
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	e038      	b.n	8001d66 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e033      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d00:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <HAL_RCC_OscConfig+0x618>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d126      	bne.n	8001d62 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2270      	movs	r2, #112	@ 0x70
 8001d18:	401a      	ands	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d11f      	bne.n	8001d62 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	23fe      	movs	r3, #254	@ 0xfe
 8001d26:	01db      	lsls	r3, r3, #7
 8001d28:	401a      	ands	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d116      	bne.n	8001d62 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	23f8      	movs	r3, #248	@ 0xf8
 8001d38:	039b      	lsls	r3, r3, #14
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d10e      	bne.n	8001d62 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	23e0      	movs	r3, #224	@ 0xe0
 8001d48:	051b      	lsls	r3, r3, #20
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	0f5b      	lsrs	r3, r3, #29
 8001d58:	075a      	lsls	r2, r3, #29
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	0018      	movs	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b008      	add	sp, #32
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40007000 	.word	0x40007000
 8001d78:	00001388 	.word	0x00001388
 8001d7c:	efffffff 	.word	0xefffffff
 8001d80:	feffffff 	.word	0xfeffffff
 8001d84:	11c1808c 	.word	0x11c1808c
 8001d88:	eefefffc 	.word	0xeefefffc

08001d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0e9      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b76      	ldr	r3, [pc, #472]	@ (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2207      	movs	r2, #7
 8001da6:	4013      	ands	r3, r2
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d91e      	bls.n	8001dec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b73      	ldr	r3, [pc, #460]	@ (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2207      	movs	r2, #7
 8001db4:	4393      	bics	r3, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	4b70      	ldr	r3, [pc, #448]	@ (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dc0:	f7fe fffc 	bl	8000dbc <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dc8:	e009      	b.n	8001dde <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dca:	f7fe fff7 	bl	8000dbc <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	4a6a      	ldr	r2, [pc, #424]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e0ca      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dde:	4b67      	ldr	r3, [pc, #412]	@ (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2207      	movs	r2, #7
 8001de4:	4013      	ands	r3, r2
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d1ee      	bne.n	8001dca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	d015      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d006      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e00:	4b60      	ldr	r3, [pc, #384]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f8>)
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	4b5f      	ldr	r3, [pc, #380]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f8>)
 8001e06:	21e0      	movs	r1, #224	@ 0xe0
 8001e08:	01c9      	lsls	r1, r1, #7
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f8>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	4a5d      	ldr	r2, [pc, #372]	@ (8001f88 <HAL_RCC_ClockConfig+0x1fc>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	0019      	movs	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	4b59      	ldr	r3, [pc, #356]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f8>)
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2201      	movs	r2, #1
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d057      	beq.n	8001edc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d107      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e34:	4b53      	ldr	r3, [pc, #332]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f8>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2380      	movs	r3, #128	@ 0x80
 8001e3a:	029b      	lsls	r3, r3, #10
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d12b      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e097      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d107      	bne.n	8001e5c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2380      	movs	r3, #128	@ 0x80
 8001e52:	049b      	lsls	r3, r3, #18
 8001e54:	4013      	ands	r3, r2
 8001e56:	d11f      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e08b      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e64:	4b47      	ldr	r3, [pc, #284]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f8>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	@ 0x80
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d113      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e07f      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e7c:	4b41      	ldr	r3, [pc, #260]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e80:	2202      	movs	r2, #2
 8001e82:	4013      	ands	r3, r2
 8001e84:	d108      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e074      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8e:	2202      	movs	r2, #2
 8001e90:	4013      	ands	r3, r2
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e06d      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e98:	4b3a      	ldr	r3, [pc, #232]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f8>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	4393      	bics	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4b37      	ldr	r3, [pc, #220]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eac:	f7fe ff86 	bl	8000dbc <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb4:	e009      	b.n	8001eca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb6:	f7fe ff81 	bl	8000dbc <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e054      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	4b2e      	ldr	r3, [pc, #184]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f8>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2238      	movs	r2, #56	@ 0x38
 8001ed0:	401a      	ands	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d1ec      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001edc:	4b27      	ldr	r3, [pc, #156]	@ (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2207      	movs	r2, #7
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d21e      	bcs.n	8001f28 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eea:	4b24      	ldr	r3, [pc, #144]	@ (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2207      	movs	r2, #7
 8001ef0:	4393      	bics	r3, r2
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	4b21      	ldr	r3, [pc, #132]	@ (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001efc:	f7fe ff5e 	bl	8000dbc <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f04:	e009      	b.n	8001f1a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f06:	f7fe ff59 	bl	8000dbc <HAL_GetTick>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	4a1b      	ldr	r2, [pc, #108]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e02c      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f1a:	4b18      	ldr	r3, [pc, #96]	@ (8001f7c <HAL_RCC_ClockConfig+0x1f0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2207      	movs	r2, #7
 8001f20:	4013      	ands	r3, r2
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1ee      	bne.n	8001f06 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f32:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f8>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	4a15      	ldr	r2, [pc, #84]	@ (8001f8c <HAL_RCC_ClockConfig+0x200>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f8>)
 8001f42:	430a      	orrs	r2, r1
 8001f44:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f46:	f000 f829 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8001f4a:	0001      	movs	r1, r0
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f8>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	220f      	movs	r2, #15
 8001f54:	401a      	ands	r2, r3
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <HAL_RCC_ClockConfig+0x204>)
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	58d3      	ldr	r3, [r2, r3]
 8001f5c:	221f      	movs	r2, #31
 8001f5e:	4013      	ands	r3, r2
 8001f60:	000a      	movs	r2, r1
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <HAL_RCC_ClockConfig+0x208>)
 8001f66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f68:	4b0b      	ldr	r3, [pc, #44]	@ (8001f98 <HAL_RCC_ClockConfig+0x20c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f7fe fec9 	bl	8000d04 <HAL_InitTick>
 8001f72:	0003      	movs	r3, r0
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b004      	add	sp, #16
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40022000 	.word	0x40022000
 8001f80:	00001388 	.word	0x00001388
 8001f84:	40021000 	.word	0x40021000
 8001f88:	fffff0ff 	.word	0xfffff0ff
 8001f8c:	ffff8fff 	.word	0xffff8fff
 8001f90:	08003cdc 	.word	0x08003cdc
 8001f94:	20000000 	.word	0x20000000
 8001f98:	20000004 	.word	0x20000004

08001f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2238      	movs	r2, #56	@ 0x38
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d10f      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001fac:	4b39      	ldr	r3, [pc, #228]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	0adb      	lsrs	r3, r3, #11
 8001fb2:	2207      	movs	r2, #7
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	0013      	movs	r3, r2
 8001fbc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001fbe:	6839      	ldr	r1, [r7, #0]
 8001fc0:	4835      	ldr	r0, [pc, #212]	@ (8002098 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fc2:	f7fe f89f 	bl	8000104 <__udivsi3>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	e05d      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fcc:	4b31      	ldr	r3, [pc, #196]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2238      	movs	r2, #56	@ 0x38
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d102      	bne.n	8001fde <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8002098 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e054      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fde:	4b2d      	ldr	r3, [pc, #180]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2238      	movs	r2, #56	@ 0x38
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b10      	cmp	r3, #16
 8001fe8:	d138      	bne.n	800205c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001fea:	4b2a      	ldr	r3, [pc, #168]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ff4:	4b27      	ldr	r3, [pc, #156]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	2207      	movs	r2, #7
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	3301      	adds	r3, #1
 8002000:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d10d      	bne.n	8002024 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	4823      	ldr	r0, [pc, #140]	@ (8002098 <HAL_RCC_GetSysClockFreq+0xfc>)
 800200c:	f7fe f87a 	bl	8000104 <__udivsi3>
 8002010:	0003      	movs	r3, r0
 8002012:	0019      	movs	r1, r3
 8002014:	4b1f      	ldr	r3, [pc, #124]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	227f      	movs	r2, #127	@ 0x7f
 800201c:	4013      	ands	r3, r2
 800201e:	434b      	muls	r3, r1
 8002020:	617b      	str	r3, [r7, #20]
        break;
 8002022:	e00d      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	481c      	ldr	r0, [pc, #112]	@ (8002098 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002028:	f7fe f86c 	bl	8000104 <__udivsi3>
 800202c:	0003      	movs	r3, r0
 800202e:	0019      	movs	r1, r3
 8002030:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	227f      	movs	r2, #127	@ 0x7f
 8002038:	4013      	ands	r3, r2
 800203a:	434b      	muls	r3, r1
 800203c:	617b      	str	r3, [r7, #20]
        break;
 800203e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002040:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0f5b      	lsrs	r3, r3, #29
 8002046:	2207      	movs	r2, #7
 8002048:	4013      	ands	r3, r2
 800204a:	3301      	adds	r3, #1
 800204c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	6978      	ldr	r0, [r7, #20]
 8002052:	f7fe f857 	bl	8000104 <__udivsi3>
 8002056:	0003      	movs	r3, r0
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	e015      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800205c:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xf8>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2238      	movs	r2, #56	@ 0x38
 8002062:	4013      	ands	r3, r2
 8002064:	2b20      	cmp	r3, #32
 8002066:	d103      	bne.n	8002070 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002068:	2380      	movs	r3, #128	@ 0x80
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	e00b      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002070:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2238      	movs	r2, #56	@ 0x38
 8002076:	4013      	ands	r3, r2
 8002078:	2b18      	cmp	r3, #24
 800207a:	d103      	bne.n	8002084 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800207c:	23fa      	movs	r3, #250	@ 0xfa
 800207e:	01db      	lsls	r3, r3, #7
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	e001      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002088:	693b      	ldr	r3, [r7, #16]
}
 800208a:	0018      	movs	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	b006      	add	sp, #24
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	40021000 	.word	0x40021000
 8002098:	00f42400 	.word	0x00f42400

0800209c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a0:	4b02      	ldr	r3, [pc, #8]	@ (80020ac <HAL_RCC_GetHCLKFreq+0x10>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			@ (mov r8, r8)
 80020ac:	20000000 	.word	0x20000000

080020b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b0:	b5b0      	push	{r4, r5, r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80020b4:	f7ff fff2 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020b8:	0004      	movs	r4, r0
 80020ba:	f7ff fb41 	bl	8001740 <LL_RCC_GetAPB1Prescaler>
 80020be:	0003      	movs	r3, r0
 80020c0:	0b1a      	lsrs	r2, r3, #12
 80020c2:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	58d3      	ldr	r3, [r2, r3]
 80020c8:	221f      	movs	r2, #31
 80020ca:	4013      	ands	r3, r2
 80020cc:	40dc      	lsrs	r4, r3
 80020ce:	0023      	movs	r3, r4
}
 80020d0:	0018      	movs	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bdb0      	pop	{r4, r5, r7, pc}
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	08003d1c 	.word	0x08003d1c

080020dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80020e4:	2313      	movs	r3, #19
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020ec:	2312      	movs	r3, #18
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2380      	movs	r3, #128	@ 0x80
 80020fa:	029b      	lsls	r3, r3, #10
 80020fc:	4013      	ands	r3, r2
 80020fe:	d100      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002100:	e0a3      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002102:	2011      	movs	r0, #17
 8002104:	183b      	adds	r3, r7, r0
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210a:	4ba5      	ldr	r3, [pc, #660]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800210c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800210e:	2380      	movs	r3, #128	@ 0x80
 8002110:	055b      	lsls	r3, r3, #21
 8002112:	4013      	ands	r3, r2
 8002114:	d110      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	4ba2      	ldr	r3, [pc, #648]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002118:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800211a:	4ba1      	ldr	r3, [pc, #644]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800211c:	2180      	movs	r1, #128	@ 0x80
 800211e:	0549      	lsls	r1, r1, #21
 8002120:	430a      	orrs	r2, r1
 8002122:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002124:	4b9e      	ldr	r3, [pc, #632]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002126:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002128:	2380      	movs	r3, #128	@ 0x80
 800212a:	055b      	lsls	r3, r3, #21
 800212c:	4013      	ands	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002132:	183b      	adds	r3, r7, r0
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002138:	4b9a      	ldr	r3, [pc, #616]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b99      	ldr	r3, [pc, #612]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800213e:	2180      	movs	r1, #128	@ 0x80
 8002140:	0049      	lsls	r1, r1, #1
 8002142:	430a      	orrs	r2, r1
 8002144:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002146:	f7fe fe39 	bl	8000dbc <HAL_GetTick>
 800214a:	0003      	movs	r3, r0
 800214c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800214e:	e00b      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002150:	f7fe fe34 	bl	8000dbc <HAL_GetTick>
 8002154:	0002      	movs	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d904      	bls.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800215e:	2313      	movs	r3, #19
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	2203      	movs	r2, #3
 8002164:	701a      	strb	r2, [r3, #0]
        break;
 8002166:	e005      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002168:	4b8e      	ldr	r3, [pc, #568]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4013      	ands	r3, r2
 8002172:	d0ed      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002174:	2313      	movs	r3, #19
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d154      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800217e:	4b88      	ldr	r3, [pc, #544]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002180:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002182:	23c0      	movs	r3, #192	@ 0xc0
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4013      	ands	r3, r2
 8002188:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d019      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	429a      	cmp	r2, r3
 8002198:	d014      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800219a:	4b81      	ldr	r3, [pc, #516]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800219c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219e:	4a82      	ldr	r2, [pc, #520]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021a4:	4b7e      	ldr	r3, [pc, #504]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021a8:	4b7d      	ldr	r3, [pc, #500]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021aa:	2180      	movs	r1, #128	@ 0x80
 80021ac:	0249      	lsls	r1, r1, #9
 80021ae:	430a      	orrs	r2, r1
 80021b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021b2:	4b7b      	ldr	r3, [pc, #492]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021b6:	4b7a      	ldr	r3, [pc, #488]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021b8:	497c      	ldr	r1, [pc, #496]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80021ba:	400a      	ands	r2, r1
 80021bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021be:	4b78      	ldr	r3, [pc, #480]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2201      	movs	r2, #1
 80021c8:	4013      	ands	r3, r2
 80021ca:	d016      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7fe fdf6 	bl	8000dbc <HAL_GetTick>
 80021d0:	0003      	movs	r3, r0
 80021d2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d4:	e00c      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7fe fdf1 	bl	8000dbc <HAL_GetTick>
 80021da:	0002      	movs	r2, r0
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	4a73      	ldr	r2, [pc, #460]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d904      	bls.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80021e6:	2313      	movs	r3, #19
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	2203      	movs	r2, #3
 80021ec:	701a      	strb	r2, [r3, #0]
            break;
 80021ee:	e004      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f0:	4b6b      	ldr	r3, [pc, #428]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f4:	2202      	movs	r2, #2
 80021f6:	4013      	ands	r3, r2
 80021f8:	d0ed      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80021fa:	2313      	movs	r3, #19
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10a      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002204:	4b66      	ldr	r3, [pc, #408]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002208:	4a67      	ldr	r2, [pc, #412]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800220a:	4013      	ands	r3, r2
 800220c:	0019      	movs	r1, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002212:	4b63      	ldr	r3, [pc, #396]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002214:	430a      	orrs	r2, r1
 8002216:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002218:	e00c      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800221a:	2312      	movs	r3, #18
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	2213      	movs	r2, #19
 8002220:	18ba      	adds	r2, r7, r2
 8002222:	7812      	ldrb	r2, [r2, #0]
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e005      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002228:	2312      	movs	r3, #18
 800222a:	18fb      	adds	r3, r7, r3
 800222c:	2213      	movs	r2, #19
 800222e:	18ba      	adds	r2, r7, r2
 8002230:	7812      	ldrb	r2, [r2, #0]
 8002232:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002234:	2311      	movs	r3, #17
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d105      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223e:	4b58      	ldr	r3, [pc, #352]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002240:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002242:	4b57      	ldr	r3, [pc, #348]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002244:	495b      	ldr	r1, [pc, #364]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002246:	400a      	ands	r2, r1
 8002248:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2201      	movs	r2, #1
 8002250:	4013      	ands	r3, r2
 8002252:	d009      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002254:	4b52      	ldr	r3, [pc, #328]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002258:	2203      	movs	r2, #3
 800225a:	4393      	bics	r3, r2
 800225c:	0019      	movs	r1, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	4b4f      	ldr	r3, [pc, #316]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002264:	430a      	orrs	r2, r1
 8002266:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2210      	movs	r2, #16
 800226e:	4013      	ands	r3, r2
 8002270:	d009      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002272:	4b4b      	ldr	r3, [pc, #300]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002276:	4a50      	ldr	r2, [pc, #320]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002278:	4013      	ands	r3, r2
 800227a:	0019      	movs	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	4b47      	ldr	r3, [pc, #284]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002282:	430a      	orrs	r2, r1
 8002284:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	2380      	movs	r3, #128	@ 0x80
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4013      	ands	r3, r2
 8002290:	d009      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002292:	4b43      	ldr	r3, [pc, #268]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002296:	4a49      	ldr	r2, [pc, #292]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002298:	4013      	ands	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	4b3f      	ldr	r3, [pc, #252]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022a2:	430a      	orrs	r2, r1
 80022a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	2380      	movs	r3, #128	@ 0x80
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4013      	ands	r3, r2
 80022b0:	d009      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022b2:	4b3b      	ldr	r3, [pc, #236]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b6:	4a42      	ldr	r2, [pc, #264]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	0019      	movs	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	4b37      	ldr	r3, [pc, #220]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022c2:	430a      	orrs	r2, r1
 80022c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2220      	movs	r2, #32
 80022cc:	4013      	ands	r3, r2
 80022ce:	d009      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022d0:	4b33      	ldr	r3, [pc, #204]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d4:	4a3b      	ldr	r2, [pc, #236]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	0019      	movs	r1, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	4b30      	ldr	r3, [pc, #192]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022e0:	430a      	orrs	r2, r1
 80022e2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	2380      	movs	r3, #128	@ 0x80
 80022ea:	01db      	lsls	r3, r3, #7
 80022ec:	4013      	ands	r3, r2
 80022ee:	d015      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022f0:	4b2b      	ldr	r3, [pc, #172]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	0899      	lsrs	r1, r3, #2
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69da      	ldr	r2, [r3, #28]
 80022fc:	4b28      	ldr	r3, [pc, #160]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022fe:	430a      	orrs	r2, r1
 8002300:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69da      	ldr	r2, [r3, #28]
 8002306:	2380      	movs	r3, #128	@ 0x80
 8002308:	05db      	lsls	r3, r3, #23
 800230a:	429a      	cmp	r2, r3
 800230c:	d106      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800230e:	4b24      	ldr	r3, [pc, #144]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	4b23      	ldr	r3, [pc, #140]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002314:	2180      	movs	r1, #128	@ 0x80
 8002316:	0249      	lsls	r1, r1, #9
 8002318:	430a      	orrs	r2, r1
 800231a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	039b      	lsls	r3, r3, #14
 8002324:	4013      	ands	r3, r2
 8002326:	d016      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002328:	4b1d      	ldr	r3, [pc, #116]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800232a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232c:	4a26      	ldr	r2, [pc, #152]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800232e:	4013      	ands	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1a      	ldr	r2, [r3, #32]
 8002336:	4b1a      	ldr	r3, [pc, #104]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002338:	430a      	orrs	r2, r1
 800233a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1a      	ldr	r2, [r3, #32]
 8002340:	2380      	movs	r3, #128	@ 0x80
 8002342:	03db      	lsls	r3, r3, #15
 8002344:	429a      	cmp	r2, r3
 8002346:	d106      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002348:	4b15      	ldr	r3, [pc, #84]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800234e:	2180      	movs	r1, #128	@ 0x80
 8002350:	0449      	lsls	r1, r1, #17
 8002352:	430a      	orrs	r2, r1
 8002354:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	2380      	movs	r3, #128	@ 0x80
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	4013      	ands	r3, r2
 8002360:	d016      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002362:	4b0f      	ldr	r3, [pc, #60]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002366:	4a19      	ldr	r2, [pc, #100]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002368:	4013      	ands	r3, r2
 800236a:	0019      	movs	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002372:	430a      	orrs	r2, r1
 8002374:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	2380      	movs	r3, #128	@ 0x80
 800237c:	01db      	lsls	r3, r3, #7
 800237e:	429a      	cmp	r2, r3
 8002380:	d106      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002382:	4b07      	ldr	r3, [pc, #28]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002388:	2180      	movs	r1, #128	@ 0x80
 800238a:	0249      	lsls	r1, r1, #9
 800238c:	430a      	orrs	r2, r1
 800238e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002390:	2312      	movs	r3, #18
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	781b      	ldrb	r3, [r3, #0]
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b006      	add	sp, #24
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40007000 	.word	0x40007000
 80023a8:	fffffcff 	.word	0xfffffcff
 80023ac:	fffeffff 	.word	0xfffeffff
 80023b0:	00001388 	.word	0x00001388
 80023b4:	efffffff 	.word	0xefffffff
 80023b8:	fffff3ff 	.word	0xfffff3ff
 80023bc:	fff3ffff 	.word	0xfff3ffff
 80023c0:	ffcfffff 	.word	0xffcfffff
 80023c4:	ffffcfff 	.word	0xffffcfff
 80023c8:	ffbfffff 	.word	0xffbfffff
 80023cc:	ffff3fff 	.word	0xffff3fff

080023d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	2380      	movs	r3, #128	@ 0x80
 80023e0:	029b      	lsls	r3, r3, #10
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d136      	bne.n	8002454 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80023e6:	4bcd      	ldr	r3, [pc, #820]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80023e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023ea:	23c0      	movs	r3, #192	@ 0xc0
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4013      	ands	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80023f2:	4bca      	ldr	r3, [pc, #808]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80023f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f6:	2202      	movs	r2, #2
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d108      	bne.n	8002410 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	2380      	movs	r3, #128	@ 0x80
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	429a      	cmp	r2, r3
 8002406:	d103      	bne.n	8002410 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8002408:	2380      	movs	r3, #128	@ 0x80
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	e26b      	b.n	80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8002410:	4bc2      	ldr	r3, [pc, #776]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002414:	2202      	movs	r2, #2
 8002416:	4013      	ands	r3, r2
 8002418:	2b02      	cmp	r3, #2
 800241a:	d108      	bne.n	800242e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	2380      	movs	r3, #128	@ 0x80
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	429a      	cmp	r2, r3
 8002424:	d103      	bne.n	800242e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8002426:	23fa      	movs	r3, #250	@ 0xfa
 8002428:	01db      	lsls	r3, r3, #7
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e25c      	b.n	80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800242e:	4bbb      	ldr	r3, [pc, #748]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	2380      	movs	r3, #128	@ 0x80
 8002434:	029b      	lsls	r3, r3, #10
 8002436:	401a      	ands	r2, r3
 8002438:	2380      	movs	r3, #128	@ 0x80
 800243a:	029b      	lsls	r3, r3, #10
 800243c:	429a      	cmp	r2, r3
 800243e:	d000      	beq.n	8002442 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8002440:	e252      	b.n	80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	23c0      	movs	r3, #192	@ 0xc0
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	429a      	cmp	r2, r3
 800244a:	d000      	beq.n	800244e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 800244c:	e24c      	b.n	80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 800244e:	4bb4      	ldr	r3, [pc, #720]	@ (8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	e249      	b.n	80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8002454:	4bb1      	ldr	r3, [pc, #708]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2203      	movs	r2, #3
 800245a:	4013      	ands	r3, r2
 800245c:	2b02      	cmp	r3, #2
 800245e:	d102      	bne.n	8002466 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8002460:	4bb0      	ldr	r3, [pc, #704]	@ (8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	e00a      	b.n	800247c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8002466:	4bad      	ldr	r3, [pc, #692]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2203      	movs	r2, #3
 800246c:	4013      	ands	r3, r2
 800246e:	2b03      	cmp	r3, #3
 8002470:	d102      	bne.n	8002478 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8002472:	4bac      	ldr	r3, [pc, #688]	@ (8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	e001      	b.n	800247c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800247c:	4ba7      	ldr	r3, [pc, #668]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	2207      	movs	r2, #7
 8002484:	4013      	ands	r3, r2
 8002486:	3301      	adds	r3, #1
 8002488:	0019      	movs	r1, r3
 800248a:	6938      	ldr	r0, [r7, #16]
 800248c:	f7fd fe3a 	bl	8000104 <__udivsi3>
 8002490:	0003      	movs	r3, r0
 8002492:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	039b      	lsls	r3, r3, #14
 800249a:	429a      	cmp	r2, r3
 800249c:	d100      	bne.n	80024a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 800249e:	e1e3      	b.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	2380      	movs	r3, #128	@ 0x80
 80024a4:	039b      	lsls	r3, r3, #14
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d900      	bls.n	80024ac <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80024aa:	e20c      	b.n	80028c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	2380      	movs	r3, #128	@ 0x80
 80024b0:	01db      	lsls	r3, r3, #7
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d100      	bne.n	80024b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80024b6:	e0a5      	b.n	8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	2380      	movs	r3, #128	@ 0x80
 80024bc:	01db      	lsls	r3, r3, #7
 80024be:	429a      	cmp	r2, r3
 80024c0:	d900      	bls.n	80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80024c2:	e200      	b.n	80028c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	2380      	movs	r3, #128	@ 0x80
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d100      	bne.n	80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80024ce:	e0fc      	b.n	80026ca <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	2380      	movs	r3, #128	@ 0x80
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d900      	bls.n	80024dc <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80024da:	e1f4      	b.n	80028c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	2380      	movs	r3, #128	@ 0x80
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d100      	bne.n	80024e8 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 80024e6:	e181      	b.n	80027ec <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	2380      	movs	r3, #128	@ 0x80
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d900      	bls.n	80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80024f2:	e1e8      	b.n	80028c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	2380      	movs	r3, #128	@ 0x80
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d100      	bne.n	8002500 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80024fe:	e135      	b.n	800276c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	2380      	movs	r3, #128	@ 0x80
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	429a      	cmp	r2, r3
 8002508:	d900      	bls.n	800250c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800250a:	e1dc      	b.n	80028c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b20      	cmp	r3, #32
 8002510:	d100      	bne.n	8002514 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8002512:	e0af      	b.n	8002674 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b20      	cmp	r3, #32
 8002518:	d900      	bls.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800251a:	e1d4      	b.n	80028c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d003      	beq.n	800252a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b10      	cmp	r3, #16
 8002526:	d033      	beq.n	8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8002528:	e1cd      	b.n	80028c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800252a:	4b7c      	ldr	r3, [pc, #496]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800252c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252e:	2203      	movs	r2, #3
 8002530:	4013      	ands	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d104      	bne.n	8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 800253a:	f7ff fdb9 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 800253e:	0003      	movs	r3, r0
 8002540:	617b      	str	r3, [r7, #20]
        break;
 8002542:	e1c2      	b.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d104      	bne.n	8002554 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 800254a:	f7ff fd27 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 800254e:	0003      	movs	r3, r0
 8002550:	617b      	str	r3, [r7, #20]
        break;
 8002552:	e1ba      	b.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8002554:	4b71      	ldr	r3, [pc, #452]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2380      	movs	r3, #128	@ 0x80
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	401a      	ands	r2, r3
 800255e:	2380      	movs	r3, #128	@ 0x80
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	429a      	cmp	r2, r3
 8002564:	d105      	bne.n	8002572 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d102      	bne.n	8002572 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 800256c:	4b6d      	ldr	r3, [pc, #436]	@ (8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800256e:	617b      	str	r3, [r7, #20]
        break;
 8002570:	e1ab      	b.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8002572:	4b6a      	ldr	r3, [pc, #424]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002576:	2202      	movs	r2, #2
 8002578:	4013      	ands	r3, r2
 800257a:	2b02      	cmp	r3, #2
 800257c:	d000      	beq.n	8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 800257e:	e1a4      	b.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d000      	beq.n	8002588 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8002586:	e1a0      	b.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 8002588:	2380      	movs	r3, #128	@ 0x80
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	617b      	str	r3, [r7, #20]
        break;
 800258e:	e19c      	b.n	80028ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002590:	4b62      	ldr	r3, [pc, #392]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002592:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002594:	23c0      	movs	r3, #192	@ 0xc0
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	4013      	ands	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d104      	bne.n	80025ac <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80025a2:	f7ff fd85 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 80025a6:	0003      	movs	r3, r0
 80025a8:	617b      	str	r3, [r7, #20]
        break;
 80025aa:	e190      	b.n	80028ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	2380      	movs	r3, #128	@ 0x80
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d104      	bne.n	80025c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80025b6:	f7ff fcf1 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 80025ba:	0003      	movs	r3, r0
 80025bc:	617b      	str	r3, [r7, #20]
        break;
 80025be:	e186      	b.n	80028ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80025c0:	4b56      	ldr	r3, [pc, #344]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	2380      	movs	r3, #128	@ 0x80
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	401a      	ands	r2, r3
 80025ca:	2380      	movs	r3, #128	@ 0x80
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d107      	bne.n	80025e2 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	429a      	cmp	r2, r3
 80025da:	d102      	bne.n	80025e2 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 80025dc:	4b51      	ldr	r3, [pc, #324]	@ (8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80025de:	617b      	str	r3, [r7, #20]
        break;
 80025e0:	e175      	b.n	80028ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80025e2:	4b4e      	ldr	r3, [pc, #312]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80025e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e6:	2202      	movs	r2, #2
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d000      	beq.n	80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 80025ee:	e16e      	b.n	80028ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	23c0      	movs	r3, #192	@ 0xc0
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d000      	beq.n	80025fc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80025fa:	e168      	b.n	80028ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 80025fc:	2380      	movs	r3, #128	@ 0x80
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	617b      	str	r3, [r7, #20]
        break;
 8002602:	e164      	b.n	80028ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002604:	4b45      	ldr	r3, [pc, #276]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002608:	0f9b      	lsrs	r3, r3, #30
 800260a:	079b      	lsls	r3, r3, #30
 800260c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d104      	bne.n	800261e <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 8002614:	f7ff fcc2 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8002618:	0003      	movs	r3, r0
 800261a:	617b      	str	r3, [r7, #20]
        break;
 800261c:	e159      	b.n	80028d2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	2380      	movs	r3, #128	@ 0x80
 8002622:	061b      	lsls	r3, r3, #24
 8002624:	429a      	cmp	r2, r3
 8002626:	d102      	bne.n	800262e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 8002628:	4b3e      	ldr	r3, [pc, #248]	@ (8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800262a:	617b      	str	r3, [r7, #20]
        break;
 800262c:	e151      	b.n	80028d2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	2380      	movs	r3, #128	@ 0x80
 8002632:	05db      	lsls	r3, r3, #23
 8002634:	429a      	cmp	r2, r3
 8002636:	d000      	beq.n	800263a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8002638:	e14b      	b.n	80028d2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800263a:	4b38      	ldr	r3, [pc, #224]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	2380      	movs	r3, #128	@ 0x80
 8002640:	025b      	lsls	r3, r3, #9
 8002642:	4013      	ands	r3, r2
 8002644:	d100      	bne.n	8002648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 8002646:	e144      	b.n	80028d2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002648:	4b34      	ldr	r3, [pc, #208]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	227f      	movs	r2, #127	@ 0x7f
 8002650:	4013      	ands	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	435a      	muls	r2, r3
 800265a:	4b30      	ldr	r3, [pc, #192]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	0c5b      	lsrs	r3, r3, #17
 8002660:	211f      	movs	r1, #31
 8002662:	400b      	ands	r3, r1
 8002664:	3301      	adds	r3, #1
 8002666:	0019      	movs	r1, r3
 8002668:	0010      	movs	r0, r2
 800266a:	f7fd fd4b 	bl	8000104 <__udivsi3>
 800266e:	0003      	movs	r3, r0
 8002670:	617b      	str	r3, [r7, #20]
        break;
 8002672:	e12e      	b.n	80028d2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002674:	4b29      	ldr	r3, [pc, #164]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002676:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002678:	23c0      	movs	r3, #192	@ 0xc0
 800267a:	019b      	lsls	r3, r3, #6
 800267c:	4013      	ands	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d104      	bne.n	8002690 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002686:	f7ff fd13 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 800268a:	0003      	movs	r3, r0
 800268c:	617b      	str	r3, [r7, #20]
        break;
 800268e:	e122      	b.n	80028d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	015b      	lsls	r3, r3, #5
 8002696:	429a      	cmp	r2, r3
 8002698:	d104      	bne.n	80026a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 800269a:	f7ff fc7f 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 800269e:	0003      	movs	r3, r0
 80026a0:	617b      	str	r3, [r7, #20]
        break;
 80026a2:	e118      	b.n	80028d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80026a4:	4b1d      	ldr	r3, [pc, #116]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	2380      	movs	r3, #128	@ 0x80
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	401a      	ands	r2, r3
 80026ae:	2380      	movs	r3, #128	@ 0x80
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d000      	beq.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80026b6:	e10e      	b.n	80028d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	2380      	movs	r3, #128	@ 0x80
 80026bc:	019b      	lsls	r3, r3, #6
 80026be:	429a      	cmp	r2, r3
 80026c0:	d000      	beq.n	80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80026c2:	e108      	b.n	80028d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 80026c4:	4b17      	ldr	r3, [pc, #92]	@ (8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80026c6:	617b      	str	r3, [r7, #20]
        break;
 80026c8:	e105      	b.n	80028d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 80026ca:	4b14      	ldr	r3, [pc, #80]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80026cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026ce:	23c0      	movs	r3, #192	@ 0xc0
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	4013      	ands	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	2380      	movs	r3, #128	@ 0x80
 80026da:	01db      	lsls	r3, r3, #7
 80026dc:	429a      	cmp	r2, r3
 80026de:	d123      	bne.n	8002728 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80026e0:	4b0e      	ldr	r3, [pc, #56]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	2380      	movs	r3, #128	@ 0x80
 80026e6:	025b      	lsls	r3, r3, #9
 80026e8:	4013      	ands	r3, r2
 80026ea:	d100      	bne.n	80026ee <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80026ec:	e0f5      	b.n	80028da <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80026ee:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	227f      	movs	r2, #127	@ 0x7f
 80026f6:	4013      	ands	r3, r2
 80026f8:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	435a      	muls	r2, r3
 8002700:	4b06      	ldr	r3, [pc, #24]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	0c5b      	lsrs	r3, r3, #17
 8002706:	211f      	movs	r1, #31
 8002708:	400b      	ands	r3, r1
 800270a:	3301      	adds	r3, #1
 800270c:	0019      	movs	r1, r3
 800270e:	0010      	movs	r0, r2
 8002710:	f7fd fcf8 	bl	8000104 <__udivsi3>
 8002714:	0003      	movs	r3, r0
 8002716:	617b      	str	r3, [r7, #20]
        break;
 8002718:	e0df      	b.n	80028da <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800271a:	46c0      	nop			@ (mov r8, r8)
 800271c:	40021000 	.word	0x40021000
 8002720:	0007a120 	.word	0x0007a120
 8002724:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d104      	bne.n	8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 800272e:	f7ff fc35 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8002732:	0003      	movs	r3, r0
 8002734:	617b      	str	r3, [r7, #20]
        break;
 8002736:	e0d0      	b.n	80028da <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8002738:	4b6e      	ldr	r3, [pc, #440]	@ (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2380      	movs	r3, #128	@ 0x80
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	401a      	ands	r2, r3
 8002742:	2380      	movs	r3, #128	@ 0x80
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	429a      	cmp	r2, r3
 8002748:	d107      	bne.n	800275a <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	2380      	movs	r3, #128	@ 0x80
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	429a      	cmp	r2, r3
 8002752:	d102      	bne.n	800275a <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 8002754:	4b68      	ldr	r3, [pc, #416]	@ (80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8002756:	617b      	str	r3, [r7, #20]
        break;
 8002758:	e0bf      	b.n	80028da <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	23c0      	movs	r3, #192	@ 0xc0
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	429a      	cmp	r2, r3
 8002762:	d000      	beq.n	8002766 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8002764:	e0b9      	b.n	80028da <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8002766:	4b65      	ldr	r3, [pc, #404]	@ (80028fc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8002768:	617b      	str	r3, [r7, #20]
        break;
 800276a:	e0b6      	b.n	80028da <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800276c:	4b61      	ldr	r3, [pc, #388]	@ (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800276e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002770:	23c0      	movs	r3, #192	@ 0xc0
 8002772:	031b      	lsls	r3, r3, #12
 8002774:	4013      	ands	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d104      	bne.n	8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800277e:	f7ff fc97 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 8002782:	0003      	movs	r3, r0
 8002784:	617b      	str	r3, [r7, #20]
        break;
 8002786:	e0aa      	b.n	80028de <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8002788:	4b5a      	ldr	r3, [pc, #360]	@ (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800278a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278c:	2202      	movs	r2, #2
 800278e:	4013      	ands	r3, r2
 8002790:	2b02      	cmp	r3, #2
 8002792:	d108      	bne.n	80027a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	2380      	movs	r3, #128	@ 0x80
 8002798:	02db      	lsls	r3, r3, #11
 800279a:	429a      	cmp	r2, r3
 800279c:	d103      	bne.n	80027a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 800279e:	23fa      	movs	r3, #250	@ 0xfa
 80027a0:	01db      	lsls	r3, r3, #7
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	e021      	b.n	80027ea <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80027a6:	4b53      	ldr	r3, [pc, #332]	@ (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	2380      	movs	r3, #128	@ 0x80
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	401a      	ands	r2, r3
 80027b0:	2380      	movs	r3, #128	@ 0x80
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d107      	bne.n	80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	031b      	lsls	r3, r3, #12
 80027be:	429a      	cmp	r2, r3
 80027c0:	d102      	bne.n	80027c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 80027c2:	4b4d      	ldr	r3, [pc, #308]	@ (80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e010      	b.n	80027ea <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80027c8:	4b4a      	ldr	r3, [pc, #296]	@ (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80027ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027cc:	2202      	movs	r2, #2
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d000      	beq.n	80027d6 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 80027d4:	e083      	b.n	80028de <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	23c0      	movs	r3, #192	@ 0xc0
 80027da:	031b      	lsls	r3, r3, #12
 80027dc:	429a      	cmp	r2, r3
 80027de:	d000      	beq.n	80027e2 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 80027e0:	e07d      	b.n	80028de <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 80027e2:	2380      	movs	r3, #128	@ 0x80
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	617b      	str	r3, [r7, #20]
        break;
 80027e8:	e079      	b.n	80028de <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80027ea:	e078      	b.n	80028de <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80027ec:	4b41      	ldr	r3, [pc, #260]	@ (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80027ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027f0:	23c0      	movs	r3, #192	@ 0xc0
 80027f2:	039b      	lsls	r3, r3, #14
 80027f4:	4013      	ands	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d104      	bne.n	8002808 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 80027fe:	f7ff fc57 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 8002802:	0003      	movs	r3, r0
 8002804:	617b      	str	r3, [r7, #20]
        break;
 8002806:	e06c      	b.n	80028e2 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8002808:	4b3a      	ldr	r3, [pc, #232]	@ (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800280a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800280c:	2202      	movs	r2, #2
 800280e:	4013      	ands	r3, r2
 8002810:	2b02      	cmp	r3, #2
 8002812:	d108      	bne.n	8002826 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	2380      	movs	r3, #128	@ 0x80
 8002818:	035b      	lsls	r3, r3, #13
 800281a:	429a      	cmp	r2, r3
 800281c:	d103      	bne.n	8002826 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 800281e:	23fa      	movs	r3, #250	@ 0xfa
 8002820:	01db      	lsls	r3, r3, #7
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	e01f      	b.n	8002866 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8002826:	4b33      	ldr	r3, [pc, #204]	@ (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	2380      	movs	r3, #128	@ 0x80
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	401a      	ands	r2, r3
 8002830:	2380      	movs	r3, #128	@ 0x80
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	429a      	cmp	r2, r3
 8002836:	d107      	bne.n	8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	2380      	movs	r3, #128	@ 0x80
 800283c:	039b      	lsls	r3, r3, #14
 800283e:	429a      	cmp	r2, r3
 8002840:	d102      	bne.n	8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 8002842:	4b2d      	ldr	r3, [pc, #180]	@ (80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	e00e      	b.n	8002866 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8002848:	4b2a      	ldr	r3, [pc, #168]	@ (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800284a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284c:	2202      	movs	r2, #2
 800284e:	4013      	ands	r3, r2
 8002850:	2b02      	cmp	r3, #2
 8002852:	d146      	bne.n	80028e2 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	23c0      	movs	r3, #192	@ 0xc0
 8002858:	039b      	lsls	r3, r3, #14
 800285a:	429a      	cmp	r2, r3
 800285c:	d141      	bne.n	80028e2 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 800285e:	2380      	movs	r3, #128	@ 0x80
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	617b      	str	r3, [r7, #20]
        break;
 8002864:	e03d      	b.n	80028e2 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 8002866:	e03c      	b.n	80028e2 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8002868:	4b22      	ldr	r3, [pc, #136]	@ (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800286a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800286c:	2380      	movs	r3, #128	@ 0x80
 800286e:	03db      	lsls	r3, r3, #15
 8002870:	4013      	ands	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	2380      	movs	r3, #128	@ 0x80
 8002878:	03db      	lsls	r3, r3, #15
 800287a:	429a      	cmp	r2, r3
 800287c:	d11b      	bne.n	80028b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800287e:	4b1d      	ldr	r3, [pc, #116]	@ (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	2380      	movs	r3, #128	@ 0x80
 8002884:	045b      	lsls	r3, r3, #17
 8002886:	4013      	ands	r3, r2
 8002888:	d02d      	beq.n	80028e6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800288a:	4b1a      	ldr	r3, [pc, #104]	@ (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	227f      	movs	r2, #127	@ 0x7f
 8002892:	4013      	ands	r3, r2
 8002894:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	435a      	muls	r2, r3
 800289c:	4b15      	ldr	r3, [pc, #84]	@ (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	0e5b      	lsrs	r3, r3, #25
 80028a2:	2107      	movs	r1, #7
 80028a4:	400b      	ands	r3, r1
 80028a6:	3301      	adds	r3, #1
 80028a8:	0019      	movs	r1, r3
 80028aa:	0010      	movs	r0, r2
 80028ac:	f7fd fc2a 	bl	8000104 <__udivsi3>
 80028b0:	0003      	movs	r3, r0
 80028b2:	617b      	str	r3, [r7, #20]
        break;
 80028b4:	e017      	b.n	80028e6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d114      	bne.n	80028e6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 80028bc:	f7ff fbf8 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 80028c0:	0003      	movs	r3, r0
 80028c2:	617b      	str	r3, [r7, #20]
        break;
 80028c4:	e00f      	b.n	80028e6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	e00e      	b.n	80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	e00c      	b.n	80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	e00a      	b.n	80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80028d2:	46c0      	nop			@ (mov r8, r8)
 80028d4:	e008      	b.n	80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	e006      	b.n	80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80028da:	46c0      	nop			@ (mov r8, r8)
 80028dc:	e004      	b.n	80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	e002      	b.n	80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80028e2:	46c0      	nop			@ (mov r8, r8)
 80028e4:	e000      	b.n	80028e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80028e6:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 80028e8:	697b      	ldr	r3, [r7, #20]
}
 80028ea:	0018      	movs	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b006      	add	sp, #24
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			@ (mov r8, r8)
 80028f4:	40021000 	.word	0x40021000
 80028f8:	00f42400 	.word	0x00f42400
 80028fc:	00bb8000 	.word	0x00bb8000

08002900 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002900:	b5b0      	push	{r4, r5, r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002908:	230f      	movs	r3, #15
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d100      	bne.n	8002918 <HAL_RTC_Init+0x18>
 8002916:	e08c      	b.n	8002a32 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2229      	movs	r2, #41	@ 0x29
 800291c:	5c9b      	ldrb	r3, [r3, r2]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10b      	bne.n	800293c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2228      	movs	r2, #40	@ 0x28
 8002928:	2100      	movs	r1, #0
 800292a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2288      	movs	r2, #136	@ 0x88
 8002930:	0212      	lsls	r2, r2, #8
 8002932:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	0018      	movs	r0, r3
 8002938:	f7fe f886 	bl	8000a48 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2229      	movs	r2, #41	@ 0x29
 8002940:	2102      	movs	r1, #2
 8002942:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2210      	movs	r2, #16
 800294c:	4013      	ands	r3, r2
 800294e:	2b10      	cmp	r3, #16
 8002950:	d062      	beq.n	8002a18 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	22ca      	movs	r2, #202	@ 0xca
 8002958:	625a      	str	r2, [r3, #36]	@ 0x24
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2253      	movs	r2, #83	@ 0x53
 8002960:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002962:	250f      	movs	r5, #15
 8002964:	197c      	adds	r4, r7, r5
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	0018      	movs	r0, r3
 800296a:	f000 faf1 	bl	8002f50 <RTC_EnterInitMode>
 800296e:	0003      	movs	r3, r0
 8002970:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002972:	0028      	movs	r0, r5
 8002974:	183b      	adds	r3, r7, r0
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d12c      	bne.n	80029d6 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	492e      	ldr	r1, [pc, #184]	@ (8002a40 <HAL_RTC_Init+0x140>)
 8002988:	400a      	ands	r2, r1
 800298a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6999      	ldr	r1, [r3, #24]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6912      	ldr	r2, [r2, #16]
 80029b2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6919      	ldr	r1, [r3, #16]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	041a      	lsls	r2, r3, #16
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80029c8:	183c      	adds	r4, r7, r0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f000 fb01 	bl	8002fd4 <RTC_ExitInitMode>
 80029d2:	0003      	movs	r3, r0
 80029d4:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80029d6:	230f      	movs	r3, #15
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d116      	bne.n	8002a0e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	00d2      	lsls	r2, r2, #3
 80029ec:	08d2      	lsrs	r2, r2, #3
 80029ee:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6999      	ldr	r1, [r3, #24]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	22ff      	movs	r2, #255	@ 0xff
 8002a14:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a16:	e003      	b.n	8002a20 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002a18:	230f      	movs	r3, #15
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002a20:	230f      	movs	r3, #15
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2229      	movs	r2, #41	@ 0x29
 8002a2e:	2101      	movs	r1, #1
 8002a30:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002a32:	230f      	movs	r3, #15
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	781b      	ldrb	r3, [r3, #0]
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b004      	add	sp, #16
 8002a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a40:	fb8fffbf 	.word	0xfb8fffbf

08002a44 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a44:	b5b0      	push	{r4, r5, r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2228      	movs	r2, #40	@ 0x28
 8002a54:	5c9b      	ldrb	r3, [r3, r2]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_RTC_SetTime+0x1a>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e092      	b.n	8002b84 <HAL_RTC_SetTime+0x140>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2228      	movs	r2, #40	@ 0x28
 8002a62:	2101      	movs	r1, #1
 8002a64:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2229      	movs	r2, #41	@ 0x29
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	22ca      	movs	r2, #202	@ 0xca
 8002a74:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2253      	movs	r2, #83	@ 0x53
 8002a7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a7e:	2513      	movs	r5, #19
 8002a80:	197c      	adds	r4, r7, r5
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f000 fa63 	bl	8002f50 <RTC_EnterInitMode>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002a8e:	197b      	adds	r3, r7, r5
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d162      	bne.n	8002b5c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d125      	bne.n	8002ae8 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2240      	movs	r2, #64	@ 0x40
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d102      	bne.n	8002aae <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f000 fad2 	bl	800305c <RTC_ByteToBcd2>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	785b      	ldrb	r3, [r3, #1]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f000 facb 	bl	800305c <RTC_ByteToBcd2>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002aca:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	789b      	ldrb	r3, [r3, #2]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 fac3 	bl	800305c <RTC_ByteToBcd2>
 8002ad6:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ad8:	0022      	movs	r2, r4
 8002ada:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	78db      	ldrb	r3, [r3, #3]
 8002ae0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e017      	b.n	8002b18 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2240      	movs	r2, #64	@ 0x40
 8002af0:	4013      	ands	r3, r2
 8002af2:	d102      	bne.n	8002afa <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2200      	movs	r2, #0
 8002af8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b06:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b0c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	78db      	ldrb	r3, [r3, #3]
 8002b12:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	491b      	ldr	r1, [pc, #108]	@ (8002b8c <HAL_RTC_SetTime+0x148>)
 8002b20:	400a      	ands	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4918      	ldr	r1, [pc, #96]	@ (8002b90 <HAL_RTC_SetTime+0x14c>)
 8002b30:	400a      	ands	r2, r1
 8002b32:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6999      	ldr	r1, [r3, #24]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b4c:	2313      	movs	r3, #19
 8002b4e:	18fc      	adds	r4, r7, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 fa3e 	bl	8002fd4 <RTC_ExitInitMode>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	22ff      	movs	r2, #255	@ 0xff
 8002b62:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8002b64:	2313      	movs	r3, #19
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2229      	movs	r2, #41	@ 0x29
 8002b72:	2101      	movs	r1, #1
 8002b74:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2228      	movs	r2, #40	@ 0x28
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	5499      	strb	r1, [r3, r2]

  return status;
 8002b7e:	2313      	movs	r3, #19
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	781b      	ldrb	r3, [r3, #0]
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b006      	add	sp, #24
 8002b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b8c:	007f7f7f 	.word	0x007f7f7f
 8002b90:	fffbffff 	.word	0xfffbffff

08002b94 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b94:	b5b0      	push	{r4, r5, r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2228      	movs	r2, #40	@ 0x28
 8002ba4:	5c9b      	ldrb	r3, [r3, r2]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_RTC_SetDate+0x1a>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e07e      	b.n	8002cac <HAL_RTC_SetDate+0x118>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2228      	movs	r2, #40	@ 0x28
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2229      	movs	r2, #41	@ 0x29
 8002bba:	2102      	movs	r1, #2
 8002bbc:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10e      	bne.n	8002be2 <HAL_RTC_SetDate+0x4e>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	785b      	ldrb	r3, [r3, #1]
 8002bc8:	001a      	movs	r2, r3
 8002bca:	2310      	movs	r3, #16
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d008      	beq.n	8002be2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	785b      	ldrb	r3, [r3, #1]
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	4393      	bics	r3, r2
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	330a      	adds	r3, #10
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d11c      	bne.n	8002c22 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	78db      	ldrb	r3, [r3, #3]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 fa35 	bl	800305c <RTC_ByteToBcd2>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	785b      	ldrb	r3, [r3, #1]
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f000 fa2e 	bl	800305c <RTC_ByteToBcd2>
 8002c00:	0003      	movs	r3, r0
 8002c02:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002c04:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	789b      	ldrb	r3, [r3, #2]
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f000 fa26 	bl	800305c <RTC_ByteToBcd2>
 8002c10:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002c12:	0022      	movs	r2, r4
 8002c14:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	e00e      	b.n	8002c40 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	78db      	ldrb	r3, [r3, #3]
 8002c26:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	785b      	ldrb	r3, [r3, #1]
 8002c2c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002c2e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002c34:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	22ca      	movs	r2, #202	@ 0xca
 8002c46:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2253      	movs	r2, #83	@ 0x53
 8002c4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c50:	2513      	movs	r5, #19
 8002c52:	197c      	adds	r4, r7, r5
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	0018      	movs	r0, r3
 8002c58:	f000 f97a 	bl	8002f50 <RTC_EnterInitMode>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002c60:	0028      	movs	r0, r5
 8002c62:	183b      	adds	r3, r7, r0
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10c      	bne.n	8002c84 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4910      	ldr	r1, [pc, #64]	@ (8002cb4 <HAL_RTC_SetDate+0x120>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002c76:	183c      	adds	r4, r7, r0
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f000 f9aa 	bl	8002fd4 <RTC_ExitInitMode>
 8002c80:	0003      	movs	r3, r0
 8002c82:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	22ff      	movs	r2, #255	@ 0xff
 8002c8a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002c8c:	2313      	movs	r3, #19
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d103      	bne.n	8002c9e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2229      	movs	r2, #41	@ 0x29
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2228      	movs	r2, #40	@ 0x28
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	5499      	strb	r1, [r3, r2]

  return status;
 8002ca6:	2313      	movs	r3, #19
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	781b      	ldrb	r3, [r3, #0]
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b006      	add	sp, #24
 8002cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb4:	00ffff3f 	.word	0x00ffff3f

08002cb8 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b089      	sub	sp, #36	@ 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2228      	movs	r2, #40	@ 0x28
 8002cc8:	5c9b      	ldrb	r3, [r3, r2]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RTC_SetAlarm+0x1a>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e10c      	b.n	8002eec <HAL_RTC_SetAlarm+0x234>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2228      	movs	r2, #40	@ 0x28
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2229      	movs	r2, #41	@ 0x29
 8002cde:	2102      	movs	r1, #2
 8002ce0:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d136      	bne.n	8002d56 <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2240      	movs	r2, #64	@ 0x40
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d102      	bne.n	8002cfa <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 f9ac 	bl	800305c <RTC_ByteToBcd2>
 8002d04:	0003      	movs	r3, r0
 8002d06:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	785b      	ldrb	r3, [r3, #1]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f000 f9a5 	bl	800305c <RTC_ByteToBcd2>
 8002d12:	0003      	movs	r3, r0
 8002d14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002d16:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	789b      	ldrb	r3, [r3, #2]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f000 f99d 	bl	800305c <RTC_ByteToBcd2>
 8002d22:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002d24:	0022      	movs	r2, r4
 8002d26:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	78db      	ldrb	r3, [r3, #3]
 8002d2c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2220      	movs	r2, #32
 8002d36:	5c9b      	ldrb	r3, [r3, r2]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 f98f 	bl	800305c <RTC_ByteToBcd2>
 8002d3e:	0003      	movs	r3, r0
 8002d40:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002d42:	0022      	movs	r2, r4
 8002d44:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002d4a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	e022      	b.n	8002d9c <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2240      	movs	r2, #64	@ 0x40
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d102      	bne.n	8002d68 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2200      	movs	r2, #0
 8002d66:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	785b      	ldrb	r3, [r3, #1]
 8002d72:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002d74:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002d7a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	78db      	ldrb	r3, [r3, #3]
 8002d80:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002d82:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2120      	movs	r1, #32
 8002d88:	5c5b      	ldrb	r3, [r3, r1]
 8002d8a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002d8c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002d92:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	22ca      	movs	r2, #202	@ 0xca
 8002dae:	625a      	str	r2, [r3, #36]	@ 0x24
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2253      	movs	r2, #83	@ 0x53
 8002db6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dbc:	2380      	movs	r3, #128	@ 0x80
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d143      	bne.n	8002e4c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4949      	ldr	r1, [pc, #292]	@ (8002ef4 <HAL_RTC_SetAlarm+0x23c>)
 8002dd0:	400a      	ands	r2, r1
 8002dd2:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4946      	ldr	r1, [pc, #280]	@ (8002ef8 <HAL_RTC_SetAlarm+0x240>)
 8002de0:	400a      	ands	r2, r1
 8002de2:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8002de4:	f7fd ffea 	bl	8000dbc <HAL_GetTick>
 8002de8:	0003      	movs	r3, r0
 8002dea:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002dec:	e016      	b.n	8002e1c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002dee:	f7fd ffe5 	bl	8000dbc <HAL_GetTick>
 8002df2:	0002      	movs	r2, r0
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	1ad2      	subs	r2, r2, r3
 8002df8:	23fa      	movs	r3, #250	@ 0xfa
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d90d      	bls.n	8002e1c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	22ff      	movs	r2, #255	@ 0xff
 8002e06:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2229      	movs	r2, #41	@ 0x29
 8002e0c:	2103      	movs	r1, #3
 8002e0e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2228      	movs	r2, #40	@ 0x28
 8002e14:	2100      	movs	r1, #0
 8002e16:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e067      	b.n	8002eec <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	4013      	ands	r3, r2
 8002e26:	d0e2      	beq.n	8002dee <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2180      	movs	r1, #128	@ 0x80
 8002e44:	0049      	lsls	r1, r1, #1
 8002e46:	430a      	orrs	r2, r1
 8002e48:	619a      	str	r2, [r3, #24]
 8002e4a:	e042      	b.n	8002ed2 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4929      	ldr	r1, [pc, #164]	@ (8002efc <HAL_RTC_SetAlarm+0x244>)
 8002e58:	400a      	ands	r2, r1
 8002e5a:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4926      	ldr	r1, [pc, #152]	@ (8002f00 <HAL_RTC_SetAlarm+0x248>)
 8002e68:	400a      	ands	r2, r1
 8002e6a:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8002e6c:	f7fd ffa6 	bl	8000dbc <HAL_GetTick>
 8002e70:	0003      	movs	r3, r0
 8002e72:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002e74:	e016      	b.n	8002ea4 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e76:	f7fd ffa1 	bl	8000dbc <HAL_GetTick>
 8002e7a:	0002      	movs	r2, r0
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	1ad2      	subs	r2, r2, r3
 8002e80:	23fa      	movs	r3, #250	@ 0xfa
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d90d      	bls.n	8002ea4 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	22ff      	movs	r2, #255	@ 0xff
 8002e8e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2229      	movs	r2, #41	@ 0x29
 8002e94:	2103      	movs	r1, #3
 8002e96:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2228      	movs	r2, #40	@ 0x28
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e023      	b.n	8002eec <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	4013      	ands	r3, r2
 8002eae:	d0e2      	beq.n	8002e76 <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2180      	movs	r1, #128	@ 0x80
 8002ecc:	0089      	lsls	r1, r1, #2
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	22ff      	movs	r2, #255	@ 0xff
 8002ed8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2229      	movs	r2, #41	@ 0x29
 8002ede:	2101      	movs	r1, #1
 8002ee0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2228      	movs	r2, #40	@ 0x28
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b009      	add	sp, #36	@ 0x24
 8002ef2:	bd90      	pop	{r4, r7, pc}
 8002ef4:	fffffeff 	.word	0xfffffeff
 8002ef8:	ffffefff 	.word	0xffffefff
 8002efc:	fffffdff 	.word	0xfffffdff
 8002f00:	ffffdfff 	.word	0xffffdfff

08002f04 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0e      	ldr	r2, [pc, #56]	@ (8002f4c <HAL_RTC_WaitForSynchro+0x48>)
 8002f12:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002f14:	f7fd ff52 	bl	8000dbc <HAL_GetTick>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f1e:	f7fd ff4d 	bl	8000dbc <HAL_GetTick>
 8002f22:	0002      	movs	r2, r0
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1ad2      	subs	r2, r2, r3
 8002f28:	23fa      	movs	r3, #250	@ 0xfa
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d901      	bls.n	8002f34 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e006      	b.n	8002f42 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d0ee      	beq.n	8002f1e <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b004      	add	sp, #16
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	0001005f 	.word	0x0001005f

08002f50 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002f58:	230f      	movs	r3, #15
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2240      	movs	r2, #64	@ 0x40
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d12c      	bne.n	8002fc6 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2180      	movs	r1, #128	@ 0x80
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002f7c:	f7fd ff1e 	bl	8000dbc <HAL_GetTick>
 8002f80:	0003      	movs	r3, r0
 8002f82:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002f84:	e014      	b.n	8002fb0 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f86:	f7fd ff19 	bl	8000dbc <HAL_GetTick>
 8002f8a:	0002      	movs	r2, r0
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	1ad2      	subs	r2, r2, r3
 8002f90:	200f      	movs	r0, #15
 8002f92:	183b      	adds	r3, r7, r0
 8002f94:	1839      	adds	r1, r7, r0
 8002f96:	7809      	ldrb	r1, [r1, #0]
 8002f98:	7019      	strb	r1, [r3, #0]
 8002f9a:	23fa      	movs	r3, #250	@ 0xfa
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d906      	bls.n	8002fb0 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002fa2:	183b      	adds	r3, r7, r0
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2229      	movs	r2, #41	@ 0x29
 8002fac:	2103      	movs	r1, #3
 8002fae:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2240      	movs	r2, #64	@ 0x40
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d104      	bne.n	8002fc6 <RTC_EnterInitMode+0x76>
 8002fbc:	230f      	movs	r3, #15
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d1df      	bne.n	8002f86 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002fc6:	230f      	movs	r3, #15
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	781b      	ldrb	r3, [r3, #0]
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b004      	add	sp, #16
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fdc:	240f      	movs	r4, #15
 8002fde:	193b      	adds	r3, r7, r4
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8003058 <RTC_ExitInitMode+0x84>)
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8003058 <RTC_ExitInitMode+0x84>)
 8002fea:	2180      	movs	r1, #128	@ 0x80
 8002fec:	438a      	bics	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002ff0:	4b19      	ldr	r3, [pc, #100]	@ (8003058 <RTC_ExitInitMode+0x84>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d10d      	bne.n	8003016 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f7ff ff81 	bl	8002f04 <HAL_RTC_WaitForSynchro>
 8003002:	1e03      	subs	r3, r0, #0
 8003004:	d021      	beq.n	800304a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2229      	movs	r2, #41	@ 0x29
 800300a:	2103      	movs	r1, #3
 800300c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800300e:	193b      	adds	r3, r7, r4
 8003010:	2203      	movs	r2, #3
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e019      	b.n	800304a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003016:	4b10      	ldr	r3, [pc, #64]	@ (8003058 <RTC_ExitInitMode+0x84>)
 8003018:	699a      	ldr	r2, [r3, #24]
 800301a:	4b0f      	ldr	r3, [pc, #60]	@ (8003058 <RTC_ExitInitMode+0x84>)
 800301c:	2120      	movs	r1, #32
 800301e:	438a      	bics	r2, r1
 8003020:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	0018      	movs	r0, r3
 8003026:	f7ff ff6d 	bl	8002f04 <HAL_RTC_WaitForSynchro>
 800302a:	1e03      	subs	r3, r0, #0
 800302c:	d007      	beq.n	800303e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2229      	movs	r2, #41	@ 0x29
 8003032:	2103      	movs	r1, #3
 8003034:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003036:	230f      	movs	r3, #15
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	2203      	movs	r2, #3
 800303c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800303e:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <RTC_ExitInitMode+0x84>)
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <RTC_ExitInitMode+0x84>)
 8003044:	2120      	movs	r1, #32
 8003046:	430a      	orrs	r2, r1
 8003048:	619a      	str	r2, [r3, #24]
  }

  return status;
 800304a:	230f      	movs	r3, #15
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	781b      	ldrb	r3, [r3, #0]
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b005      	add	sp, #20
 8003056:	bd90      	pop	{r4, r7, pc}
 8003058:	40002800 	.word	0x40002800

0800305c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	0002      	movs	r2, r0
 8003064:	1dfb      	adds	r3, r7, #7
 8003066:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800306c:	230b      	movs	r3, #11
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	1dfa      	adds	r2, r7, #7
 8003072:	7812      	ldrb	r2, [r2, #0]
 8003074:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8003076:	e008      	b.n	800308a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3301      	adds	r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800307e:	220b      	movs	r2, #11
 8003080:	18bb      	adds	r3, r7, r2
 8003082:	18ba      	adds	r2, r7, r2
 8003084:	7812      	ldrb	r2, [r2, #0]
 8003086:	3a0a      	subs	r2, #10
 8003088:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800308a:	210b      	movs	r1, #11
 800308c:	187b      	adds	r3, r7, r1
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b09      	cmp	r3, #9
 8003092:	d8f1      	bhi.n	8003078 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	b2da      	uxtb	r2, r3
 800309c:	187b      	adds	r3, r7, r1
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	b2db      	uxtb	r3, r3
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b004      	add	sp, #16
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2228      	movs	r2, #40	@ 0x28
 80030ba:	5c9b      	ldrb	r3, [r3, r2]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e035      	b.n	8003130 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2228      	movs	r2, #40	@ 0x28
 80030c8:	2101      	movs	r1, #1
 80030ca:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2229      	movs	r2, #41	@ 0x29
 80030d0:	2102      	movs	r1, #2
 80030d2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	22ca      	movs	r2, #202	@ 0xca
 80030da:	625a      	str	r2, [r3, #36]	@ 0x24
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2253      	movs	r2, #83	@ 0x53
 80030e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4912      	ldr	r1, [pc, #72]	@ (8003138 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 80030f0:	400a      	ands	r2, r1
 80030f2:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6999      	ldr	r1, [r3, #24]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2180      	movs	r1, #128	@ 0x80
 8003110:	0409      	lsls	r1, r1, #16
 8003112:	430a      	orrs	r2, r1
 8003114:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	22ff      	movs	r2, #255	@ 0xff
 800311c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2229      	movs	r2, #41	@ 0x29
 8003122:	2101      	movs	r1, #1
 8003124:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2228      	movs	r2, #40	@ 0x28
 800312a:	2100      	movs	r1, #0
 800312c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	0018      	movs	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	b002      	add	sp, #8
 8003136:	bd80      	pop	{r7, pc}
 8003138:	fff7ffff 	.word	0xfff7ffff

0800313c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e0a8      	b.n	80032a0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	2382      	movs	r3, #130	@ 0x82
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	429a      	cmp	r2, r3
 8003160:	d009      	beq.n	8003176 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	61da      	str	r2, [r3, #28]
 8003168:	e005      	b.n	8003176 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	225d      	movs	r2, #93	@ 0x5d
 8003180:	5c9b      	ldrb	r3, [r3, r2]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d107      	bne.n	8003198 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	225c      	movs	r2, #92	@ 0x5c
 800318c:	2100      	movs	r1, #0
 800318e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	0018      	movs	r0, r3
 8003194:	f7fd fc96 	bl	8000ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	225d      	movs	r2, #93	@ 0x5d
 800319c:	2102      	movs	r1, #2
 800319e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2140      	movs	r1, #64	@ 0x40
 80031ac:	438a      	bics	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	23e0      	movs	r3, #224	@ 0xe0
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d902      	bls.n	80031c2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031bc:	2300      	movs	r3, #0
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	e002      	b.n	80031c8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031c2:	2380      	movs	r3, #128	@ 0x80
 80031c4:	015b      	lsls	r3, r3, #5
 80031c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	23f0      	movs	r3, #240	@ 0xf0
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d008      	beq.n	80031e6 <HAL_SPI_Init+0xaa>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	23e0      	movs	r3, #224	@ 0xe0
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	429a      	cmp	r2, r3
 80031de:	d002      	beq.n	80031e6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	2382      	movs	r3, #130	@ 0x82
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	401a      	ands	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6899      	ldr	r1, [r3, #8]
 80031f4:	2384      	movs	r3, #132	@ 0x84
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	400b      	ands	r3, r1
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2102      	movs	r1, #2
 8003202:	400b      	ands	r3, r1
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	2101      	movs	r1, #1
 800320c:	400b      	ands	r3, r1
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6999      	ldr	r1, [r3, #24]
 8003214:	2380      	movs	r3, #128	@ 0x80
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	400b      	ands	r3, r1
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	2138      	movs	r1, #56	@ 0x38
 8003222:	400b      	ands	r3, r1
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	2180      	movs	r1, #128	@ 0x80
 800322c:	400b      	ands	r3, r1
 800322e:	431a      	orrs	r2, r3
 8003230:	0011      	movs	r1, r2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003236:	2380      	movs	r3, #128	@ 0x80
 8003238:	019b      	lsls	r3, r3, #6
 800323a:	401a      	ands	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	2204      	movs	r2, #4
 800324c:	401a      	ands	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	2110      	movs	r1, #16
 8003254:	400b      	ands	r3, r1
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325c:	2108      	movs	r1, #8
 800325e:	400b      	ands	r3, r1
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68d9      	ldr	r1, [r3, #12]
 8003266:	23f0      	movs	r3, #240	@ 0xf0
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	400b      	ands	r3, r1
 800326c:	431a      	orrs	r2, r3
 800326e:	0011      	movs	r1, r2
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	2380      	movs	r3, #128	@ 0x80
 8003274:	015b      	lsls	r3, r3, #5
 8003276:	401a      	ands	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	69da      	ldr	r2, [r3, #28]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4907      	ldr	r1, [pc, #28]	@ (80032a8 <HAL_SPI_Init+0x16c>)
 800328c:	400a      	ands	r2, r1
 800328e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	225d      	movs	r2, #93	@ 0x5d
 800329a:	2101      	movs	r1, #1
 800329c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	0018      	movs	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b004      	add	sp, #16
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	fffff7ff 	.word	0xfffff7ff

080032ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e04a      	b.n	8003354 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	223d      	movs	r2, #61	@ 0x3d
 80032c2:	5c9b      	ldrb	r3, [r3, r2]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d107      	bne.n	80032da <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	223c      	movs	r2, #60	@ 0x3c
 80032ce:	2100      	movs	r1, #0
 80032d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	0018      	movs	r0, r3
 80032d6:	f7fd fc55 	bl	8000b84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	223d      	movs	r2, #61	@ 0x3d
 80032de:	2102      	movs	r1, #2
 80032e0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3304      	adds	r3, #4
 80032ea:	0019      	movs	r1, r3
 80032ec:	0010      	movs	r0, r2
 80032ee:	f000 f935 	bl	800355c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2248      	movs	r2, #72	@ 0x48
 80032f6:	2101      	movs	r1, #1
 80032f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	223e      	movs	r2, #62	@ 0x3e
 80032fe:	2101      	movs	r1, #1
 8003300:	5499      	strb	r1, [r3, r2]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	223f      	movs	r2, #63	@ 0x3f
 8003306:	2101      	movs	r1, #1
 8003308:	5499      	strb	r1, [r3, r2]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2240      	movs	r2, #64	@ 0x40
 800330e:	2101      	movs	r1, #1
 8003310:	5499      	strb	r1, [r3, r2]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2241      	movs	r2, #65	@ 0x41
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2242      	movs	r2, #66	@ 0x42
 800331e:	2101      	movs	r1, #1
 8003320:	5499      	strb	r1, [r3, r2]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2243      	movs	r2, #67	@ 0x43
 8003326:	2101      	movs	r1, #1
 8003328:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2244      	movs	r2, #68	@ 0x44
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2245      	movs	r2, #69	@ 0x45
 8003336:	2101      	movs	r1, #1
 8003338:	5499      	strb	r1, [r3, r2]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2246      	movs	r2, #70	@ 0x46
 800333e:	2101      	movs	r1, #1
 8003340:	5499      	strb	r1, [r3, r2]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2247      	movs	r2, #71	@ 0x47
 8003346:	2101      	movs	r1, #1
 8003348:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	223d      	movs	r2, #61	@ 0x3d
 800334e:	2101      	movs	r1, #1
 8003350:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	0018      	movs	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003368:	2317      	movs	r3, #23
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	2200      	movs	r2, #0
 800336e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	223c      	movs	r2, #60	@ 0x3c
 8003374:	5c9b      	ldrb	r3, [r3, r2]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_TIM_PWM_ConfigChannel+0x22>
 800337a:	2302      	movs	r3, #2
 800337c:	e0e5      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	223c      	movs	r2, #60	@ 0x3c
 8003382:	2101      	movs	r1, #1
 8003384:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b14      	cmp	r3, #20
 800338a:	d900      	bls.n	800338e <HAL_TIM_PWM_ConfigChannel+0x32>
 800338c:	e0d1      	b.n	8003532 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	009a      	lsls	r2, r3, #2
 8003392:	4b70      	ldr	r3, [pc, #448]	@ (8003554 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003394:	18d3      	adds	r3, r2, r3
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	0011      	movs	r1, r2
 80033a2:	0018      	movs	r0, r3
 80033a4:	f000 f95e 	bl	8003664 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2108      	movs	r1, #8
 80033b4:	430a      	orrs	r2, r1
 80033b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2104      	movs	r1, #4
 80033c4:	438a      	bics	r2, r1
 80033c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6999      	ldr	r1, [r3, #24]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	619a      	str	r2, [r3, #24]
      break;
 80033da:	e0af      	b.n	800353c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	0011      	movs	r1, r2
 80033e4:	0018      	movs	r0, r3
 80033e6:	f000 f9bd 	bl	8003764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699a      	ldr	r2, [r3, #24]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2180      	movs	r1, #128	@ 0x80
 80033f6:	0109      	lsls	r1, r1, #4
 80033f8:	430a      	orrs	r2, r1
 80033fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4954      	ldr	r1, [pc, #336]	@ (8003558 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003408:	400a      	ands	r2, r1
 800340a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6999      	ldr	r1, [r3, #24]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	021a      	lsls	r2, r3, #8
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	619a      	str	r2, [r3, #24]
      break;
 8003420:	e08c      	b.n	800353c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	0011      	movs	r1, r2
 800342a:	0018      	movs	r0, r3
 800342c:	f000 fa18 	bl	8003860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69da      	ldr	r2, [r3, #28]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2108      	movs	r1, #8
 800343c:	430a      	orrs	r2, r1
 800343e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69da      	ldr	r2, [r3, #28]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2104      	movs	r1, #4
 800344c:	438a      	bics	r2, r1
 800344e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69d9      	ldr	r1, [r3, #28]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	61da      	str	r2, [r3, #28]
      break;
 8003462:	e06b      	b.n	800353c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	0011      	movs	r1, r2
 800346c:	0018      	movs	r0, r3
 800346e:	f000 fa79 	bl	8003964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2180      	movs	r1, #128	@ 0x80
 800347e:	0109      	lsls	r1, r1, #4
 8003480:	430a      	orrs	r2, r1
 8003482:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69da      	ldr	r2, [r3, #28]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4932      	ldr	r1, [pc, #200]	@ (8003558 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003490:	400a      	ands	r2, r1
 8003492:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	69d9      	ldr	r1, [r3, #28]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	021a      	lsls	r2, r3, #8
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	61da      	str	r2, [r3, #28]
      break;
 80034a8:	e048      	b.n	800353c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	0011      	movs	r1, r2
 80034b2:	0018      	movs	r0, r3
 80034b4:	f000 faba 	bl	8003a2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2108      	movs	r1, #8
 80034c4:	430a      	orrs	r2, r1
 80034c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2104      	movs	r1, #4
 80034d4:	438a      	bics	r2, r1
 80034d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80034ea:	e027      	b.n	800353c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	0011      	movs	r1, r2
 80034f4:	0018      	movs	r0, r3
 80034f6:	f000 faf3 	bl	8003ae0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2180      	movs	r1, #128	@ 0x80
 8003506:	0109      	lsls	r1, r1, #4
 8003508:	430a      	orrs	r2, r1
 800350a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4910      	ldr	r1, [pc, #64]	@ (8003558 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003518:	400a      	ands	r2, r1
 800351a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	021a      	lsls	r2, r3, #8
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003530:	e004      	b.n	800353c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003532:	2317      	movs	r3, #23
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	2201      	movs	r2, #1
 8003538:	701a      	strb	r2, [r3, #0]
      break;
 800353a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	223c      	movs	r2, #60	@ 0x3c
 8003540:	2100      	movs	r1, #0
 8003542:	5499      	strb	r1, [r3, r2]

  return status;
 8003544:	2317      	movs	r3, #23
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	781b      	ldrb	r3, [r3, #0]
}
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b006      	add	sp, #24
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	08003d3c 	.word	0x08003d3c
 8003558:	fffffbff 	.word	0xfffffbff

0800355c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a37      	ldr	r2, [pc, #220]	@ (800364c <TIM_Base_SetConfig+0xf0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d008      	beq.n	8003586 <TIM_Base_SetConfig+0x2a>
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	2380      	movs	r3, #128	@ 0x80
 8003578:	05db      	lsls	r3, r3, #23
 800357a:	429a      	cmp	r2, r3
 800357c:	d003      	beq.n	8003586 <TIM_Base_SetConfig+0x2a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a33      	ldr	r2, [pc, #204]	@ (8003650 <TIM_Base_SetConfig+0xf4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d108      	bne.n	8003598 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2270      	movs	r2, #112	@ 0x70
 800358a:	4393      	bics	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a2c      	ldr	r2, [pc, #176]	@ (800364c <TIM_Base_SetConfig+0xf0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d014      	beq.n	80035ca <TIM_Base_SetConfig+0x6e>
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	2380      	movs	r3, #128	@ 0x80
 80035a4:	05db      	lsls	r3, r3, #23
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d00f      	beq.n	80035ca <TIM_Base_SetConfig+0x6e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a28      	ldr	r2, [pc, #160]	@ (8003650 <TIM_Base_SetConfig+0xf4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00b      	beq.n	80035ca <TIM_Base_SetConfig+0x6e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a27      	ldr	r2, [pc, #156]	@ (8003654 <TIM_Base_SetConfig+0xf8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d007      	beq.n	80035ca <TIM_Base_SetConfig+0x6e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a26      	ldr	r2, [pc, #152]	@ (8003658 <TIM_Base_SetConfig+0xfc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <TIM_Base_SetConfig+0x6e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a25      	ldr	r2, [pc, #148]	@ (800365c <TIM_Base_SetConfig+0x100>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d108      	bne.n	80035dc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4a24      	ldr	r2, [pc, #144]	@ (8003660 <TIM_Base_SetConfig+0x104>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2280      	movs	r2, #128	@ 0x80
 80035e0:	4393      	bics	r3, r2
 80035e2:	001a      	movs	r2, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a11      	ldr	r2, [pc, #68]	@ (800364c <TIM_Base_SetConfig+0xf0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d007      	beq.n	800361a <TIM_Base_SetConfig+0xbe>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a12      	ldr	r2, [pc, #72]	@ (8003658 <TIM_Base_SetConfig+0xfc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_Base_SetConfig+0xbe>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a11      	ldr	r2, [pc, #68]	@ (800365c <TIM_Base_SetConfig+0x100>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d103      	bne.n	8003622 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	2201      	movs	r2, #1
 800362e:	4013      	ands	r3, r2
 8003630:	2b01      	cmp	r3, #1
 8003632:	d106      	bne.n	8003642 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2201      	movs	r2, #1
 800363a:	4393      	bics	r3, r2
 800363c:	001a      	movs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	611a      	str	r2, [r3, #16]
  }
}
 8003642:	46c0      	nop			@ (mov r8, r8)
 8003644:	46bd      	mov	sp, r7
 8003646:	b004      	add	sp, #16
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			@ (mov r8, r8)
 800364c:	40012c00 	.word	0x40012c00
 8003650:	40000400 	.word	0x40000400
 8003654:	40002000 	.word	0x40002000
 8003658:	40014400 	.word	0x40014400
 800365c:	40014800 	.word	0x40014800
 8003660:	fffffcff 	.word	0xfffffcff

08003664 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	2201      	movs	r2, #1
 800367a:	4393      	bics	r3, r2
 800367c:	001a      	movs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4a2e      	ldr	r2, [pc, #184]	@ (800374c <TIM_OC1_SetConfig+0xe8>)
 8003692:	4013      	ands	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2203      	movs	r2, #3
 800369a:	4393      	bics	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2202      	movs	r2, #2
 80036ac:	4393      	bics	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a24      	ldr	r2, [pc, #144]	@ (8003750 <TIM_OC1_SetConfig+0xec>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d007      	beq.n	80036d2 <TIM_OC1_SetConfig+0x6e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a23      	ldr	r2, [pc, #140]	@ (8003754 <TIM_OC1_SetConfig+0xf0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d003      	beq.n	80036d2 <TIM_OC1_SetConfig+0x6e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a22      	ldr	r2, [pc, #136]	@ (8003758 <TIM_OC1_SetConfig+0xf4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d10c      	bne.n	80036ec <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2208      	movs	r2, #8
 80036d6:	4393      	bics	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2204      	movs	r2, #4
 80036e8:	4393      	bics	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a18      	ldr	r2, [pc, #96]	@ (8003750 <TIM_OC1_SetConfig+0xec>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d007      	beq.n	8003704 <TIM_OC1_SetConfig+0xa0>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a17      	ldr	r2, [pc, #92]	@ (8003754 <TIM_OC1_SetConfig+0xf0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d003      	beq.n	8003704 <TIM_OC1_SetConfig+0xa0>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a16      	ldr	r2, [pc, #88]	@ (8003758 <TIM_OC1_SetConfig+0xf4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d111      	bne.n	8003728 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4a15      	ldr	r2, [pc, #84]	@ (800375c <TIM_OC1_SetConfig+0xf8>)
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4a14      	ldr	r2, [pc, #80]	@ (8003760 <TIM_OC1_SetConfig+0xfc>)
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	621a      	str	r2, [r3, #32]
}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	fffeff8f 	.word	0xfffeff8f
 8003750:	40012c00 	.word	0x40012c00
 8003754:	40014400 	.word	0x40014400
 8003758:	40014800 	.word	0x40014800
 800375c:	fffffeff 	.word	0xfffffeff
 8003760:	fffffdff 	.word	0xfffffdff

08003764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	2210      	movs	r2, #16
 800377a:	4393      	bics	r3, r2
 800377c:	001a      	movs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a2c      	ldr	r2, [pc, #176]	@ (8003844 <TIM_OC2_SetConfig+0xe0>)
 8003792:	4013      	ands	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a2b      	ldr	r2, [pc, #172]	@ (8003848 <TIM_OC2_SetConfig+0xe4>)
 800379a:	4013      	ands	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2220      	movs	r2, #32
 80037ae:	4393      	bics	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a22      	ldr	r2, [pc, #136]	@ (800384c <TIM_OC2_SetConfig+0xe8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d10d      	bne.n	80037e2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2280      	movs	r2, #128	@ 0x80
 80037ca:	4393      	bics	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2240      	movs	r2, #64	@ 0x40
 80037de:	4393      	bics	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a19      	ldr	r2, [pc, #100]	@ (800384c <TIM_OC2_SetConfig+0xe8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <TIM_OC2_SetConfig+0x96>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a18      	ldr	r2, [pc, #96]	@ (8003850 <TIM_OC2_SetConfig+0xec>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d003      	beq.n	80037fa <TIM_OC2_SetConfig+0x96>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a17      	ldr	r2, [pc, #92]	@ (8003854 <TIM_OC2_SetConfig+0xf0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d113      	bne.n	8003822 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4a16      	ldr	r2, [pc, #88]	@ (8003858 <TIM_OC2_SetConfig+0xf4>)
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4a15      	ldr	r2, [pc, #84]	@ (800385c <TIM_OC2_SetConfig+0xf8>)
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	621a      	str	r2, [r3, #32]
}
 800383c:	46c0      	nop			@ (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	b006      	add	sp, #24
 8003842:	bd80      	pop	{r7, pc}
 8003844:	feff8fff 	.word	0xfeff8fff
 8003848:	fffffcff 	.word	0xfffffcff
 800384c:	40012c00 	.word	0x40012c00
 8003850:	40014400 	.word	0x40014400
 8003854:	40014800 	.word	0x40014800
 8003858:	fffffbff 	.word	0xfffffbff
 800385c:	fffff7ff 	.word	0xfffff7ff

08003860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	4a31      	ldr	r2, [pc, #196]	@ (800393c <TIM_OC3_SetConfig+0xdc>)
 8003876:	401a      	ands	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a2d      	ldr	r2, [pc, #180]	@ (8003940 <TIM_OC3_SetConfig+0xe0>)
 800388c:	4013      	ands	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2203      	movs	r2, #3
 8003894:	4393      	bics	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	4a27      	ldr	r2, [pc, #156]	@ (8003944 <TIM_OC3_SetConfig+0xe4>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a23      	ldr	r2, [pc, #140]	@ (8003948 <TIM_OC3_SetConfig+0xe8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d10d      	bne.n	80038da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	4a22      	ldr	r2, [pc, #136]	@ (800394c <TIM_OC3_SetConfig+0xec>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003950 <TIM_OC3_SetConfig+0xf0>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003948 <TIM_OC3_SetConfig+0xe8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <TIM_OC3_SetConfig+0x92>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003954 <TIM_OC3_SetConfig+0xf4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_OC3_SetConfig+0x92>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003958 <TIM_OC3_SetConfig+0xf8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d113      	bne.n	800391a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4a19      	ldr	r2, [pc, #100]	@ (800395c <TIM_OC3_SetConfig+0xfc>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4a18      	ldr	r2, [pc, #96]	@ (8003960 <TIM_OC3_SetConfig+0x100>)
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	621a      	str	r2, [r3, #32]
}
 8003934:	46c0      	nop			@ (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	b006      	add	sp, #24
 800393a:	bd80      	pop	{r7, pc}
 800393c:	fffffeff 	.word	0xfffffeff
 8003940:	fffeff8f 	.word	0xfffeff8f
 8003944:	fffffdff 	.word	0xfffffdff
 8003948:	40012c00 	.word	0x40012c00
 800394c:	fffff7ff 	.word	0xfffff7ff
 8003950:	fffffbff 	.word	0xfffffbff
 8003954:	40014400 	.word	0x40014400
 8003958:	40014800 	.word	0x40014800
 800395c:	ffffefff 	.word	0xffffefff
 8003960:	ffffdfff 	.word	0xffffdfff

08003964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	4a24      	ldr	r2, [pc, #144]	@ (8003a0c <TIM_OC4_SetConfig+0xa8>)
 800397a:	401a      	ands	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a20      	ldr	r2, [pc, #128]	@ (8003a10 <TIM_OC4_SetConfig+0xac>)
 8003990:	4013      	ands	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4a1f      	ldr	r2, [pc, #124]	@ (8003a14 <TIM_OC4_SetConfig+0xb0>)
 8003998:	4013      	ands	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003a18 <TIM_OC4_SetConfig+0xb4>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	031b      	lsls	r3, r3, #12
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a17      	ldr	r2, [pc, #92]	@ (8003a1c <TIM_OC4_SetConfig+0xb8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d007      	beq.n	80039d4 <TIM_OC4_SetConfig+0x70>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a16      	ldr	r2, [pc, #88]	@ (8003a20 <TIM_OC4_SetConfig+0xbc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_OC4_SetConfig+0x70>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a15      	ldr	r2, [pc, #84]	@ (8003a24 <TIM_OC4_SetConfig+0xc0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d109      	bne.n	80039e8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	4a14      	ldr	r2, [pc, #80]	@ (8003a28 <TIM_OC4_SetConfig+0xc4>)
 80039d8:	4013      	ands	r3, r2
 80039da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	019b      	lsls	r3, r3, #6
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	621a      	str	r2, [r3, #32]
}
 8003a02:	46c0      	nop			@ (mov r8, r8)
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b006      	add	sp, #24
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	46c0      	nop			@ (mov r8, r8)
 8003a0c:	ffffefff 	.word	0xffffefff
 8003a10:	feff8fff 	.word	0xfeff8fff
 8003a14:	fffffcff 	.word	0xfffffcff
 8003a18:	ffffdfff 	.word	0xffffdfff
 8003a1c:	40012c00 	.word	0x40012c00
 8003a20:	40014400 	.word	0x40014400
 8003a24:	40014800 	.word	0x40014800
 8003a28:	ffffbfff 	.word	0xffffbfff

08003a2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4a21      	ldr	r2, [pc, #132]	@ (8003ac8 <TIM_OC5_SetConfig+0x9c>)
 8003a42:	401a      	ands	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a1d      	ldr	r2, [pc, #116]	@ (8003acc <TIM_OC5_SetConfig+0xa0>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4a19      	ldr	r2, [pc, #100]	@ (8003ad0 <TIM_OC5_SetConfig+0xa4>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	041b      	lsls	r3, r3, #16
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a15      	ldr	r2, [pc, #84]	@ (8003ad4 <TIM_OC5_SetConfig+0xa8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <TIM_OC5_SetConfig+0x66>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a14      	ldr	r2, [pc, #80]	@ (8003ad8 <TIM_OC5_SetConfig+0xac>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_OC5_SetConfig+0x66>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a13      	ldr	r2, [pc, #76]	@ (8003adc <TIM_OC5_SetConfig+0xb0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d109      	bne.n	8003aa6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	4a0c      	ldr	r2, [pc, #48]	@ (8003ac8 <TIM_OC5_SetConfig+0x9c>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	621a      	str	r2, [r3, #32]
}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b006      	add	sp, #24
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	fffeffff 	.word	0xfffeffff
 8003acc:	fffeff8f 	.word	0xfffeff8f
 8003ad0:	fffdffff 	.word	0xfffdffff
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	40014400 	.word	0x40014400
 8003adc:	40014800 	.word	0x40014800

08003ae0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	4a22      	ldr	r2, [pc, #136]	@ (8003b80 <TIM_OC6_SetConfig+0xa0>)
 8003af6:	401a      	ands	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b84 <TIM_OC6_SetConfig+0xa4>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8003b88 <TIM_OC6_SetConfig+0xa8>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	051b      	lsls	r3, r3, #20
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a16      	ldr	r2, [pc, #88]	@ (8003b8c <TIM_OC6_SetConfig+0xac>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d007      	beq.n	8003b48 <TIM_OC6_SetConfig+0x68>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a15      	ldr	r2, [pc, #84]	@ (8003b90 <TIM_OC6_SetConfig+0xb0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_OC6_SetConfig+0x68>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a14      	ldr	r2, [pc, #80]	@ (8003b94 <TIM_OC6_SetConfig+0xb4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d109      	bne.n	8003b5c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	4a13      	ldr	r2, [pc, #76]	@ (8003b98 <TIM_OC6_SetConfig+0xb8>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	029b      	lsls	r3, r3, #10
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b006      	add	sp, #24
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	ffefffff 	.word	0xffefffff
 8003b84:	feff8fff 	.word	0xfeff8fff
 8003b88:	ffdfffff 	.word	0xffdfffff
 8003b8c:	40012c00 	.word	0x40012c00
 8003b90:	40014400 	.word	0x40014400
 8003b94:	40014800 	.word	0x40014800
 8003b98:	fffbffff 	.word	0xfffbffff

08003b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	223c      	movs	r2, #60	@ 0x3c
 8003baa:	5c9b      	ldrb	r3, [r3, r2]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e050      	b.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	223c      	movs	r2, #60	@ 0x3c
 8003bb8:	2101      	movs	r1, #1
 8003bba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	223d      	movs	r2, #61	@ 0x3d
 8003bc0:	2102      	movs	r1, #2
 8003bc2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a21      	ldr	r2, [pc, #132]	@ (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d108      	bne.n	8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a20      	ldr	r2, [pc, #128]	@ (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2270      	movs	r2, #112	@ 0x70
 8003bf4:	4393      	bics	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a14      	ldr	r2, [pc, #80]	@ (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00a      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	2380      	movs	r3, #128	@ 0x80
 8003c1a:	05db      	lsls	r3, r3, #23
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d004      	beq.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a10      	ldr	r2, [pc, #64]	@ (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d10c      	bne.n	8003c44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2280      	movs	r2, #128	@ 0x80
 8003c2e:	4393      	bics	r3, r2
 8003c30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	223d      	movs	r2, #61	@ 0x3d
 8003c48:	2101      	movs	r1, #1
 8003c4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	223c      	movs	r2, #60	@ 0x3c
 8003c50:	2100      	movs	r1, #0
 8003c52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b004      	add	sp, #16
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	ff0fffff 	.word	0xff0fffff
 8003c68:	40000400 	.word	0x40000400

08003c6c <memset>:
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	1882      	adds	r2, r0, r2
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d100      	bne.n	8003c76 <memset+0xa>
 8003c74:	4770      	bx	lr
 8003c76:	7019      	strb	r1, [r3, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	e7f9      	b.n	8003c70 <memset+0x4>

08003c7c <__libc_init_array>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	2600      	movs	r6, #0
 8003c80:	4c0c      	ldr	r4, [pc, #48]	@ (8003cb4 <__libc_init_array+0x38>)
 8003c82:	4d0d      	ldr	r5, [pc, #52]	@ (8003cb8 <__libc_init_array+0x3c>)
 8003c84:	1b64      	subs	r4, r4, r5
 8003c86:	10a4      	asrs	r4, r4, #2
 8003c88:	42a6      	cmp	r6, r4
 8003c8a:	d109      	bne.n	8003ca0 <__libc_init_array+0x24>
 8003c8c:	2600      	movs	r6, #0
 8003c8e:	f000 f819 	bl	8003cc4 <_init>
 8003c92:	4c0a      	ldr	r4, [pc, #40]	@ (8003cbc <__libc_init_array+0x40>)
 8003c94:	4d0a      	ldr	r5, [pc, #40]	@ (8003cc0 <__libc_init_array+0x44>)
 8003c96:	1b64      	subs	r4, r4, r5
 8003c98:	10a4      	asrs	r4, r4, #2
 8003c9a:	42a6      	cmp	r6, r4
 8003c9c:	d105      	bne.n	8003caa <__libc_init_array+0x2e>
 8003c9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ca0:	00b3      	lsls	r3, r6, #2
 8003ca2:	58eb      	ldr	r3, [r5, r3]
 8003ca4:	4798      	blx	r3
 8003ca6:	3601      	adds	r6, #1
 8003ca8:	e7ee      	b.n	8003c88 <__libc_init_array+0xc>
 8003caa:	00b3      	lsls	r3, r6, #2
 8003cac:	58eb      	ldr	r3, [r5, r3]
 8003cae:	4798      	blx	r3
 8003cb0:	3601      	adds	r6, #1
 8003cb2:	e7f2      	b.n	8003c9a <__libc_init_array+0x1e>
 8003cb4:	08003d90 	.word	0x08003d90
 8003cb8:	08003d90 	.word	0x08003d90
 8003cbc:	08003d94 	.word	0x08003d94
 8003cc0:	08003d90 	.word	0x08003d90

08003cc4 <_init>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	46c0      	nop			@ (mov r8, r8)
 8003cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cca:	bc08      	pop	{r3}
 8003ccc:	469e      	mov	lr, r3
 8003cce:	4770      	bx	lr

08003cd0 <_fini>:
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	46c0      	nop			@ (mov r8, r8)
 8003cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd6:	bc08      	pop	{r3}
 8003cd8:	469e      	mov	lr, r3
 8003cda:	4770      	bx	lr
