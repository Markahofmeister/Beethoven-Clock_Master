
Beethoven-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f9c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08007058  08007058  00008058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007140  08007140  00009074  2**0
                  CONTENTS
  4 .ARM          00000000  08007140  08007140  00009074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007140  08007140  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007140  08007140  00008140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007144  08007144  00008144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007148  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000074  080071bc  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080071bc  00009344  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d73  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a3  00000000  00000000  0001ee0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  00021eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a2  00000000  00000000  00023408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d9a  00000000  00000000  000244aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f3b  00000000  00000000  0003d244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c04d  00000000  00000000  0005717f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f31cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004da8  00000000  00000000  000f3210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f7fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007040 	.word	0x08007040

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08007040 	.word	0x08007040

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-low hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2200      	movs	r2, #0
 800025a:	0019      	movs	r1, r3
 800025c:	f002 fd9b 	bl	8002d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2201      	movs	r2, #1
 800026c:	0019      	movs	r1, r3
 800026e:	f002 fd92 	bl	8002d96 <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f005 fee2 	bl	8006040 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f005 fe91 	bl	8005fa8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f002 fda5 	bl	8002fa8 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f002 feb9 	bl	80031fc <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	08007058 	.word	0x08007058

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f002 fd67 	bl	8002fa8 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f002 fd41 	bl	8002fa8 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f002 fe55 	bl	80031fc <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	0800705c 	.word	0x0800705c

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f002 fcfd 	bl	8002fa8 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f002 fe11 	bl	80031fc <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	08007060 	.word	0x08007060

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f002 fcad 	bl	8002fa8 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f002 fdc1 	bl	80031fc <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	08007064 	.word	0x08007064
 8000700:	0800706c 	.word	0x0800706c

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f002 fc2b 	bl	8002fa8 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f002 fd3f 	bl	80031fc <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f002 fbcc 	bl	8002fa8 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f002 fbab 	bl	8002fa8 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f002 fcbf 	bl	80031fc <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	08007064 	.word	0x08007064
 8000894:	0800706c 	.word	0x0800706c

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f002 fb51 	bl	8002fa8 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f002 fb2f 	bl	8002fa8 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f002 fc4c 	bl	80031fc <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	08007074 	.word	0x08007074
 8000978:	08007064 	.word	0x08007064

0800097c <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b09a      	sub	sp, #104	@ 0x68
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000988:	2567      	movs	r5, #103	@ 0x67
 800098a:	197b      	adds	r3, r7, r5
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 8000990:	243c      	movs	r4, #60	@ 0x3c
 8000992:	193b      	adds	r3, r7, r4
 8000994:	0018      	movs	r0, r3
 8000996:	2328      	movs	r3, #40	@ 0x28
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f006 fb1a 	bl	8006fd4 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	0021      	movs	r1, r4
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	789a      	ldrb	r2, [r3, #2]
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	78da      	ldrb	r2, [r3, #3]
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	78da      	ldrb	r2, [r3, #3]
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009d6:	0008      	movs	r0, r1
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009de:	183b      	adds	r3, r7, r0
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80009e4:	183b      	adds	r3, r7, r0
 80009e6:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <initRTCInternalAlarm+0xd0>)
 80009e8:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009ea:	183b      	adds	r3, r7, r0
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009f0:	183b      	adds	r3, r7, r0
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 80009f6:	183b      	adds	r3, r7, r0
 80009f8:	2220      	movs	r2, #32
 80009fa:	2101      	movs	r1, #1
 80009fc:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 80009fe:	0001      	movs	r1, r0
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8000a08:	197c      	adds	r4, r7, r5
 8000a0a:	1879      	adds	r1, r7, r1
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f004 fd99 	bl	8005548 <HAL_RTC_SetAlarm_IT>
 8000a16:	0003      	movs	r3, r0
 8000a18:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000a1a:	197b      	adds	r3, r7, r5
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <initRTCInternalAlarm+0xac>
		return halRet;
 8000a22:	197b      	adds	r3, r7, r5
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	e00d      	b.n	8000a44 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8000a28:	2567      	movs	r5, #103	@ 0x67
 8000a2a:	197c      	adds	r4, r7, r5
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	005a      	lsls	r2, r3, #1
 8000a30:	2314      	movs	r3, #20
 8000a32:	18f9      	adds	r1, r7, r3
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	2300      	movs	r3, #0
 8000a38:	f004 fec6 	bl	80057c8 <HAL_RTC_GetAlarm>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	7023      	strb	r3, [r4, #0]
	return halRet;
 8000a40:	197b      	adds	r3, r7, r5
 8000a42:	781b      	ldrb	r3, [r3, #0]

}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b01a      	add	sp, #104	@ 0x68
 8000a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4c:	80800080 	.word	0x80800080

08000a50 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2200      	movs	r2, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f004 fc34 	bl	80052d0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f004 fd1c 	bl	80054ac <HAL_RTC_GetDate>

}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b004      	add	sp, #16
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	b08d      	sub	sp, #52	@ 0x34
 8000a80:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f001 fea3 	bl	80027cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f95f 	bl	8000d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 fbb5 	bl	80011f8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a8e:	f000 fa31 	bl	8000ef4 <MX_RTC_Init>
  MX_I2C1_Init();
 8000a92:	f000 f9c5 	bl	8000e20 <MX_I2C1_Init>
  MX_I2S1_Init();
 8000a96:	f000 fa03 	bl	8000ea0 <MX_I2S1_Init>
  MX_SPI2_Init();
 8000a9a:	f000 fabf 	bl	800101c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000a9e:	f000 fafb 	bl	8001098 <MX_TIM2_Init>
  MX_TIM14_Init();
 8000aa2:	f000 fb59 	bl	8001158 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000aa6:	f000 fb7d 	bl	80011a4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // HAL Status handle for error-checking
  HAL_StatusTypeDef halRet = HAL_OK;
 8000aaa:	2517      	movs	r5, #23
 8000aac:	197b      	adds	r3, r7, r5
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]



	  // TODO: Re-initialize RTC with new hour format
  	  timeFormatSwitchISR();
 8000ab2:	f001 f811 	bl	8001ad8 <timeFormatSwitchISR>

  	  // Set Smooth Calibration Value
	  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8000ab6:	4b90      	ldr	r3, [pc, #576]	@ (8000cf8 <main+0x27c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	197c      	adds	r4, r7, r5
 8000abc:	2280      	movs	r2, #128	@ 0x80
 8000abe:	01d1      	lsls	r1, r2, #7
 8000ac0:	488e      	ldr	r0, [pc, #568]	@ (8000cfc <main+0x280>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f005 f875 	bl	8005bb2 <HAL_RTCEx_SetSmoothCalib>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	7023      	strb	r3, [r4, #0]
									RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
	  if(halRet != HAL_OK) {
 8000acc:	197b      	adds	r3, r7, r5
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <main+0x5c>
		  // Failure to talk to RTC is a hard failure
		  dispFailure();
 8000ad4:	f001 f90c 	bl	8001cf0 <dispFailure>
	  }

	  // Init the internal RTC alarm time to track the current time
	  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8000ad8:	2517      	movs	r5, #23
 8000ada:	197c      	adds	r4, r7, r5
 8000adc:	4a88      	ldr	r2, [pc, #544]	@ (8000d00 <main+0x284>)
 8000ade:	4989      	ldr	r1, [pc, #548]	@ (8000d04 <main+0x288>)
 8000ae0:	4b86      	ldr	r3, [pc, #536]	@ (8000cfc <main+0x280>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f7ff ff4a 	bl	800097c <initRTCInternalAlarm>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	7023      	strb	r3, [r4, #0]
	  if(halRet != HAL_OK) {
 8000aec:	197b      	adds	r3, r7, r5
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <main+0x7c>
		  // Failure to initialize RTC alarm is a hard failure
		  dispFailure();
 8000af4:	f001 f8fc 	bl	8001cf0 <dispFailure>
		}

	  // Initialize all GPIOs to be used with 7 segment display
		sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000af8:	2380      	movs	r3, #128	@ 0x80
 8000afa:	009c      	lsls	r4, r3, #2
 8000afc:	2380      	movs	r3, #128	@ 0x80
 8000afe:	00dd      	lsls	r5, r3, #3
 8000b00:	2680      	movs	r6, #128	@ 0x80
 8000b02:	2340      	movs	r3, #64	@ 0x40
 8000b04:	469c      	mov	ip, r3
 8000b06:	2380      	movs	r3, #128	@ 0x80
 8000b08:	011a      	lsls	r2, r3, #4
 8000b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8000d08 <main+0x28c>)
 8000b0c:	6819      	ldr	r1, [r3, #0]
 8000b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8000d0c <main+0x290>)
 8000b10:	6818      	ldr	r0, [r3, #0]
 8000b12:	4b7f      	ldr	r3, [pc, #508]	@ (8000d10 <main+0x294>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	9304      	str	r3, [sp, #16]
 8000b18:	9003      	str	r0, [sp, #12]
 8000b1a:	9102      	str	r1, [sp, #8]
 8000b1c:	4b7d      	ldr	r3, [pc, #500]	@ (8000d14 <main+0x298>)
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	9200      	str	r2, [sp, #0]
 8000b22:	4663      	mov	r3, ip
 8000b24:	0032      	movs	r2, r6
 8000b26:	0029      	movs	r1, r5
 8000b28:	0020      	movs	r0, r4
 8000b2a:	f001 f953 	bl	8001dd4 <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


		halRet = updateAndDisplayTime();
 8000b2e:	2517      	movs	r5, #23
 8000b30:	197c      	adds	r4, r7, r5
 8000b32:	f000 fc73 	bl	800141c <updateAndDisplayTime>
 8000b36:	0003      	movs	r3, r0
 8000b38:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000b3a:	197b      	adds	r3, r7, r5
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <main+0xca>
		  // Failure to display current time is a hard failure
		  dispFailure();
 8000b42:	f001 f8d5 	bl	8001cf0 <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

		// Used to separate return initializations into critical and non-critical errors.
		uint8_t initRet = 0;
 8000b46:	2116      	movs	r1, #22
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]

		initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000b4e:	4b6e      	ldr	r3, [pc, #440]	@ (8000d08 <main+0x28c>)
 8000b50:	681d      	ldr	r5, [r3, #0]
 8000b52:	2380      	movs	r3, #128	@ 0x80
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4a70      	ldr	r2, [pc, #448]	@ (8000d18 <main+0x29c>)
 8000b58:	7812      	ldrb	r2, [r2, #0]
 8000b5a:	187c      	adds	r4, r7, r1
 8000b5c:	4e6f      	ldr	r6, [pc, #444]	@ (8000d1c <main+0x2a0>)
 8000b5e:	4970      	ldr	r1, [pc, #448]	@ (8000d20 <main+0x2a4>)
 8000b60:	4870      	ldr	r0, [pc, #448]	@ (8000d24 <main+0x2a8>)
 8000b62:	9201      	str	r2, [sp, #4]
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	0033      	movs	r3, r6
 8000b68:	002a      	movs	r2, r5
 8000b6a:	f7ff fb57 	bl	800021c <capTouch_Init>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	7023      	strb	r3, [r4, #0]
								&capTouchResetPort, capTouchResetPin, capTouchChannels);
		if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8000b72:	2116      	movs	r1, #22
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d007      	beq.n	8000b8c <main+0x110>
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d003      	beq.n	8000b8c <main+0x110>
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d102      	bne.n	8000b92 <main+0x116>
			/* Critical Errors:
			 * 1 = Failure to read correct device ID
			 * 2 = Failure to read Keys
			 * 3 = Failure to enable keys
			 */
			dispFailure();
 8000b8c:	f001 f8b0 	bl	8001cf0 <dispFailure>
 8000b90:	e00d      	b.n	8000bae <main+0x132>
		}
		else if (initRet == 2) {
 8000b92:	2316      	movs	r3, #22
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d102      	bne.n	8000ba2 <main+0x126>
			/*
			 * Non-critical Errors:
			 * 2 = Failure to Recalibrate
			 */
			dispFault();
 8000b9c:	f001 f898 	bl	8001cd0 <dispFault>
 8000ba0:	e005      	b.n	8000bae <main+0x132>
		}
		else if(initRet == 0) {
 8000ba2:	2316      	movs	r3, #22
 8000ba4:	18fb      	adds	r3, r7, r3
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d100      	bne.n	8000bae <main+0x132>
			// initRet = 0 = all is well
			__NOP();
 8000bac:	46c0      	nop			@ (mov r8, r8)
		}

		// Set averaging factor
		uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000bae:	4b5e      	ldr	r3, [pc, #376]	@ (8000d28 <main+0x2ac>)
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	210c      	movs	r1, #12
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	4b5b      	ldr	r3, [pc, #364]	@ (8000d28 <main+0x2ac>)
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	705a      	strb	r2, [r3, #1]
 8000bc0:	4b59      	ldr	r3, [pc, #356]	@ (8000d28 <main+0x2ac>)
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	709a      	strb	r2, [r3, #2]
 8000bc8:	4b57      	ldr	r3, [pc, #348]	@ (8000d28 <main+0x2ac>)
 8000bca:	781a      	ldrb	r2, [r3, #0]
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	70da      	strb	r2, [r3, #3]
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	711a      	strb	r2, [r3, #4]
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	715a      	strb	r2, [r3, #5]
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000be2:	2517      	movs	r5, #23
 8000be4:	197c      	adds	r4, r7, r5
 8000be6:	187a      	adds	r2, r7, r1
 8000be8:	4b4e      	ldr	r3, [pc, #312]	@ (8000d24 <main+0x2a8>)
 8000bea:	0011      	movs	r1, r2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff fd89 	bl	8000704 <capTouch_SetAveragingFactor>
 8000bf2:	0003      	movs	r3, r0
 8000bf4:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8000bf6:	197b      	adds	r3, r7, r5
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <main+0x186>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 8000bfe:	f001 f867 	bl	8001cd0 <dispFault>
		}

		// Set detection integration factors
		uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000c02:	4b4a      	ldr	r3, [pc, #296]	@ (8000d2c <main+0x2b0>)
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	4b48      	ldr	r3, [pc, #288]	@ (8000d2c <main+0x2b0>)
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	705a      	strb	r2, [r3, #1]
 8000c12:	4b46      	ldr	r3, [pc, #280]	@ (8000d2c <main+0x2b0>)
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	709a      	strb	r2, [r3, #2]
 8000c1a:	4b44      	ldr	r3, [pc, #272]	@ (8000d2c <main+0x2b0>)
 8000c1c:	781a      	ldrb	r2, [r3, #0]
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	70da      	strb	r2, [r3, #3]
 8000c22:	4b42      	ldr	r3, [pc, #264]	@ (8000d2c <main+0x2b0>)
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	711a      	strb	r2, [r3, #4]
 8000c2a:	4b40      	ldr	r3, [pc, #256]	@ (8000d2c <main+0x2b0>)
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	715a      	strb	r2, [r3, #5]
 8000c32:	4b3e      	ldr	r3, [pc, #248]	@ (8000d2c <main+0x2b0>)
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000c3a:	2517      	movs	r5, #23
 8000c3c:	197c      	adds	r4, r7, r5
 8000c3e:	1d3a      	adds	r2, r7, #4
 8000c40:	4b38      	ldr	r3, [pc, #224]	@ (8000d24 <main+0x2a8>)
 8000c42:	0011      	movs	r1, r2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fe27 	bl	8000898 <capTouch_SetDetectionIntegrator>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000c4e:	197b      	adds	r3, r7, r5
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <main+0x1de>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 8000c56:	f001 f83b 	bl	8001cd0 <dispFault>
		}

		userAlarmToggle = false;			//Default to off
 8000c5a:	4b35      	ldr	r3, [pc, #212]	@ (8000d30 <main+0x2b4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

		if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8000c60:	4b34      	ldr	r3, [pc, #208]	@ (8000d34 <main+0x2b8>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b25      	ldr	r3, [pc, #148]	@ (8000cfc <main+0x280>)
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f005 f872 	bl	8005d52 <HAL_RTCEx_BKUPRead>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d11c      	bne.n	8000cb0 <main+0x234>

			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8000c76:	4b30      	ldr	r3, [pc, #192]	@ (8000d38 <main+0x2bc>)
 8000c78:	6819      	ldr	r1, [r3, #0]
 8000c7a:	4b20      	ldr	r3, [pc, #128]	@ (8000cfc <main+0x280>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f005 f84a 	bl	8005d18 <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <main+0x2c0>)
 8000c86:	6819      	ldr	r1, [r3, #0]
 8000c88:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <main+0x280>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f005 f843 	bl	8005d18 <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8000c92:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <main+0x2c4>)
 8000c94:	6819      	ldr	r1, [r3, #0]
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <main+0x280>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f005 f83c 	bl	8005d18 <HAL_RTCEx_BKUPWrite>

			// Write backup register with a non-zero value to signify that it has been initialized before
			HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8000ca0:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <main+0x2b8>)
 8000ca2:	6819      	ldr	r1, [r3, #0]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	425a      	negs	r2, r3
 8000ca8:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <main+0x280>)
 8000caa:	0018      	movs	r0, r3
 8000cac:	f005 f834 	bl	8005d18 <HAL_RTCEx_BKUPWrite>

		}

		userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8000cb0:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <main+0x2bc>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <main+0x280>)
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f005 f84a 	bl	8005d52 <HAL_RTCEx_BKUPRead>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <main+0x2c8>)
 8000cc4:	701a      	strb	r2, [r3, #0]
		userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <main+0x2c0>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <main+0x280>)
 8000ccc:	0011      	movs	r1, r2
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f005 f83f 	bl	8005d52 <HAL_RTCEx_BKUPRead>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <main+0x2c8>)
 8000cda:	705a      	strb	r2, [r3, #1]
		userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8000cdc:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <main+0x2c4>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <main+0x280>)
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f005 f834 	bl	8005d52 <HAL_RTCEx_BKUPRead>
 8000cea:	0003      	movs	r3, r0
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <main+0x2c8>)
 8000cf0:	70da      	strb	r2, [r3, #3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

		__NOP();
 8000cf2:	46c0      	nop			@ (mov r8, r8)

  while (1)
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	e7fd      	b.n	8000cf4 <main+0x278>
 8000cf8:	2000002c 	.word	0x2000002c
 8000cfc:	20000158 	.word	0x20000158
 8000d00:	200000a8 	.word	0x200000a8
 8000d04:	20000094 	.word	0x20000094
 8000d08:	20000048 	.word	0x20000048
 8000d0c:	20000044 	.word	0x20000044
 8000d10:	20000030 	.word	0x20000030
 8000d14:	20000014 	.word	0x20000014
 8000d18:	20000010 	.word	0x20000010
 8000d1c:	2000000c 	.word	0x2000000c
 8000d20:	200000c8 	.word	0x200000c8
 8000d24:	200002d0 	.word	0x200002d0
 8000d28:	20000011 	.word	0x20000011
 8000d2c:	20000012 	.word	0x20000012
 8000d30:	20000091 	.word	0x20000091
 8000d34:	2000003c 	.word	0x2000003c
 8000d38:	200000c0 	.word	0x200000c0
 8000d3c:	20000034 	.word	0x20000034
 8000d40:	20000038 	.word	0x20000038
 8000d44:	200000ac 	.word	0x200000ac

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b093      	sub	sp, #76	@ 0x4c
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	2410      	movs	r4, #16
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	0018      	movs	r0, r3
 8000d54:	2338      	movs	r3, #56	@ 0x38
 8000d56:	001a      	movs	r2, r3
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f006 f93b 	bl	8006fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5e:	003b      	movs	r3, r7
 8000d60:	0018      	movs	r0, r3
 8000d62:	2310      	movs	r3, #16
 8000d64:	001a      	movs	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	f006 f934 	bl	8006fd4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f002 ffcb 	bl	8003d0c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d76:	f002 ffab 	bl	8003cd0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d7a:	4b28      	ldr	r3, [pc, #160]	@ (8000e1c <SystemClock_Config+0xd4>)
 8000d7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000d7e:	4b27      	ldr	r3, [pc, #156]	@ (8000e1c <SystemClock_Config+0xd4>)
 8000d80:	2118      	movs	r1, #24
 8000d82:	438a      	bics	r2, r1
 8000d84:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	220d      	movs	r2, #13
 8000d8a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	2280      	movs	r2, #128	@ 0x80
 8000d90:	0252      	lsls	r2, r2, #9
 8000d92:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d94:	0021      	movs	r1, r4
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2201      	movs	r2, #1
 8000d9a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2201      	movs	r2, #1
 8000da0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2202      	movs	r2, #2
 8000da6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2203      	movs	r2, #3
 8000dac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2208      	movs	r2, #8
 8000db8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	22c0      	movs	r2, #192	@ 0xc0
 8000dbe:	02d2      	lsls	r2, r2, #11
 8000dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2280      	movs	r2, #128	@ 0x80
 8000dc6:	0492      	lsls	r2, r2, #18
 8000dc8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	2280      	movs	r2, #128	@ 0x80
 8000dce:	0592      	lsls	r2, r2, #22
 8000dd0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f002 ffe5 	bl	8003da4 <HAL_RCC_OscConfig>
 8000dda:	1e03      	subs	r3, r0, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dde:	f000 fff3 	bl	8001dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de2:	003b      	movs	r3, r7
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de8:	003b      	movs	r3, r7
 8000dea:	2202      	movs	r2, #2
 8000dec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dee:	003b      	movs	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df4:	003b      	movs	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f003 faea 	bl	80043d8 <HAL_RCC_ClockConfig>
 8000e04:	1e03      	subs	r3, r0, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e08:	f000 ffde 	bl	8001dc8 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f004 f89d 	bl	8004f4c <HAL_RCCEx_EnableLSCO>
}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b013      	add	sp, #76	@ 0x4c
 8000e18:	bd90      	pop	{r4, r7, pc}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	40021000 	.word	0x40021000

08000e20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e26:	4a1c      	ldr	r2, [pc, #112]	@ (8000e98 <MX_I2C1_Init+0x78>)
 8000e28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e9c <MX_I2C1_Init+0x7c>)
 8000e2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e30:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e36:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e42:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f001 fffd 	bl	8002e5c <HAL_I2C_Init>
 8000e62:	1e03      	subs	r3, r0, #0
 8000e64:	d001      	beq.n	8000e6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e66:	f000 ffaf 	bl	8001dc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f002 fda0 	bl	80039b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d001      	beq.n	8000e7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e78:	f000 ffa6 	bl	8001dc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e7c:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e7e:	2100      	movs	r1, #0
 8000e80:	0018      	movs	r0, r3
 8000e82:	f002 fde3 	bl	8003a4c <HAL_I2CEx_ConfigDigitalFilter>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d001      	beq.n	8000e8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e8a:	f000 ff9d 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200000c8 	.word	0x200000c8
 8000e98:	40005400 	.word	0x40005400
 8000e9c:	00602173 	.word	0x00602173

08000ea0 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <MX_I2S1_Init+0x48>)
 8000ea6:	4a11      	ldr	r2, [pc, #68]	@ (8000eec <MX_I2S1_Init+0x4c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <MX_I2S1_Init+0x48>)
 8000eac:	2280      	movs	r2, #128	@ 0x80
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <MX_I2S1_Init+0x48>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <MX_I2S1_Init+0x48>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <MX_I2S1_Init+0x48>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <MX_I2S1_Init+0x48>)
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <MX_I2S1_Init+0x50>)
 8000ec8:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000eca:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <MX_I2S1_Init+0x48>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <MX_I2S1_Init+0x48>)
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f002 fe06 	bl	8003ae4 <HAL_I2S_Init>
 8000ed8:	1e03      	subs	r3, r0, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_I2S1_Init+0x40>
  {
    Error_Handler();
 8000edc:	f000 ff74 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000ee0:	46c0      	nop			@ (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	2000011c 	.word	0x2000011c
 8000eec:	40013000 	.word	0x40013000
 8000ef0:	0000ac44 	.word	0x0000ac44

08000ef4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	@ 0x30
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_DateTypeDef sDate = {0};
 8000efa:	232c      	movs	r3, #44	@ 0x2c
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	0018      	movs	r0, r3
 8000f06:	2328      	movs	r3, #40	@ 0x28
 8000f08:	001a      	movs	r2, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	f006 f862 	bl	8006fd4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f10:	4b3e      	ldr	r3, [pc, #248]	@ (800100c <MX_RTC_Init+0x118>)
 8000f12:	4a3f      	ldr	r2, [pc, #252]	@ (8001010 <MX_RTC_Init+0x11c>)
 8000f14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000f16:	4b3d      	ldr	r3, [pc, #244]	@ (800100c <MX_RTC_Init+0x118>)
 8000f18:	2240      	movs	r2, #64	@ 0x40
 8000f1a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800100c <MX_RTC_Init+0x118>)
 8000f1e:	227f      	movs	r2, #127	@ 0x7f
 8000f20:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000f22:	4b3a      	ldr	r3, [pc, #232]	@ (800100c <MX_RTC_Init+0x118>)
 8000f24:	22ff      	movs	r2, #255	@ 0xff
 8000f26:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f28:	4b38      	ldr	r3, [pc, #224]	@ (800100c <MX_RTC_Init+0x118>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f2e:	4b37      	ldr	r3, [pc, #220]	@ (800100c <MX_RTC_Init+0x118>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f34:	4b35      	ldr	r3, [pc, #212]	@ (800100c <MX_RTC_Init+0x118>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f3a:	4b34      	ldr	r3, [pc, #208]	@ (800100c <MX_RTC_Init+0x118>)
 8000f3c:	2280      	movs	r2, #128	@ 0x80
 8000f3e:	05d2      	lsls	r2, r2, #23
 8000f40:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000f42:	4b32      	ldr	r3, [pc, #200]	@ (800100c <MX_RTC_Init+0x118>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f48:	4b30      	ldr	r3, [pc, #192]	@ (800100c <MX_RTC_Init+0x118>)
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f004 f876 	bl	800503c <HAL_RTC_Init>
 8000f50:	1e03      	subs	r3, r0, #0
 8000f52:	d001      	beq.n	8000f58 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8000f54:	f000 ff38 	bl	8001dc8 <Error_Handler>
//  {
//    Error_Handler();
//  }


  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f58:	212c      	movs	r1, #44	@ 0x2c
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	2201      	movs	r2, #1
 8000f64:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2201      	movs	r2, #1
 8000f6a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2200      	movs	r2, #0
 8000f70:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f72:	1879      	adds	r1, r7, r1
 8000f74:	4b25      	ldr	r3, [pc, #148]	@ (800100c <MX_RTC_Init+0x118>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f004 fa05 	bl	8005388 <HAL_RTC_SetDate>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d001      	beq.n	8000f86 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000f82:	f000 ff21 	bl	8001dc8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2201      	movs	r2, #1
 8000f90:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	4a18      	ldr	r2, [pc, #96]	@ (8001014 <MX_RTC_Init+0x120>)
 8000fb4:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2280      	movs	r2, #128	@ 0x80
 8000fce:	0052      	lsls	r2, r2, #1
 8000fd0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000fd2:	1d39      	adds	r1, r7, #4
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <MX_RTC_Init+0x118>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f004 fab5 	bl	8005548 <HAL_RTC_SetAlarm_IT>
 8000fde:	1e03      	subs	r3, r0, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_RTC_Init+0xf2>
  {
    Error_Handler();
 8000fe2:	f000 fef1 	bl	8001dc8 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_RTC_Init+0x118>)
 8000fe8:	2100      	movs	r1, #0
 8000fea:	0018      	movs	r0, r3
 8000fec:	f004 fe44 	bl	8005c78 <HAL_RTCEx_SetCalibrationOutPut>
 8000ff0:	1e03      	subs	r3, r0, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_RTC_Init+0x104>
  {
    Error_Handler();
 8000ff4:	f000 fee8 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8000ff8:	4907      	ldr	r1, [pc, #28]	@ (8001018 <MX_RTC_Init+0x124>)
 8000ffa:	4b04      	ldr	r3, [pc, #16]	@ (800100c <MX_RTC_Init+0x118>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	0018      	movs	r0, r3
 8001000:	f004 f966 	bl	80052d0 <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8001004:	46c0      	nop			@ (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b00c      	add	sp, #48	@ 0x30
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000158 	.word	0x20000158
 8001010:	40002800 	.word	0x40002800
 8001014:	80800080 	.word	0x80800080
 8001018:	20000094 	.word	0x20000094

0800101c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001020:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001022:	4a1c      	ldr	r2, [pc, #112]	@ (8001094 <MX_SPI2_Init+0x78>)
 8001024:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001026:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001028:	2282      	movs	r2, #130	@ 0x82
 800102a:	0052      	lsls	r2, r2, #1
 800102c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001034:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001036:	22e0      	movs	r2, #224	@ 0xe0
 8001038:	00d2      	lsls	r2, r2, #3
 800103a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_SPI2_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_SPI2_Init+0x74>)
 800104a:	2280      	movs	r2, #128	@ 0x80
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001052:	2210      	movs	r2, #16
 8001054:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <MX_SPI2_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001068:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <MX_SPI2_Init+0x74>)
 800106a:	2207      	movs	r2, #7
 800106c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800106e:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <MX_SPI2_Init+0x74>)
 8001076:	2208      	movs	r2, #8
 8001078:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800107a:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <MX_SPI2_Init+0x74>)
 800107c:	0018      	movs	r0, r3
 800107e:	f004 fe83 	bl	8005d88 <HAL_SPI_Init>
 8001082:	1e03      	subs	r3, r0, #0
 8001084:	d001      	beq.n	800108a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001086:	f000 fe9f 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000184 	.word	0x20000184
 8001094:	40003800 	.word	0x40003800

08001098 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	@ 0x28
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109e:	231c      	movs	r3, #28
 80010a0:	18fb      	adds	r3, r7, r3
 80010a2:	0018      	movs	r0, r3
 80010a4:	230c      	movs	r3, #12
 80010a6:	001a      	movs	r2, r3
 80010a8:	2100      	movs	r1, #0
 80010aa:	f005 ff93 	bl	8006fd4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ae:	003b      	movs	r3, r7
 80010b0:	0018      	movs	r0, r3
 80010b2:	231c      	movs	r3, #28
 80010b4:	001a      	movs	r2, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	f005 ff8c 	bl	8006fd4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010bc:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <MX_TIM2_Init+0xb8>)
 80010be:	2280      	movs	r2, #128	@ 0x80
 80010c0:	05d2      	lsls	r2, r2, #23
 80010c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 80010c4:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <MX_TIM2_Init+0xb8>)
 80010c6:	4a23      	ldr	r2, [pc, #140]	@ (8001154 <MX_TIM2_Init+0xbc>)
 80010c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <MX_TIM2_Init+0xb8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <MX_TIM2_Init+0xb8>)
 80010d2:	2263      	movs	r2, #99	@ 0x63
 80010d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <MX_TIM2_Init+0xb8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <MX_TIM2_Init+0xb8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <MX_TIM2_Init+0xb8>)
 80010e4:	0018      	movs	r0, r3
 80010e6:	f005 f853 	bl	8006190 <HAL_TIM_PWM_Init>
 80010ea:	1e03      	subs	r3, r0, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80010ee:	f000 fe6b 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f2:	211c      	movs	r1, #28
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001100:	187a      	adds	r2, r7, r1
 8001102:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <MX_TIM2_Init+0xb8>)
 8001104:	0011      	movs	r1, r2
 8001106:	0018      	movs	r0, r3
 8001108:	f005 fee4 	bl	8006ed4 <HAL_TIMEx_MasterConfigSynchronization>
 800110c:	1e03      	subs	r3, r0, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001110:	f000 fe5a 	bl	8001dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001114:	003b      	movs	r3, r7
 8001116:	2260      	movs	r2, #96	@ 0x60
 8001118:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800111a:	003b      	movs	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001120:	003b      	movs	r3, r7
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001126:	003b      	movs	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800112c:	0039      	movs	r1, r7
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <MX_TIM2_Init+0xb8>)
 8001130:	2208      	movs	r2, #8
 8001132:	0018      	movs	r0, r3
 8001134:	f005 fa6a 	bl	800660c <HAL_TIM_PWM_ConfigChannel>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800113c:	f000 fe44 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <MX_TIM2_Init+0xb8>)
 8001142:	0018      	movs	r0, r3
 8001144:	f001 fa7c 	bl	8002640 <HAL_TIM_MspPostInit>

}
 8001148:	46c0      	nop			@ (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b00a      	add	sp, #40	@ 0x28
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200001e8 	.word	0x200001e8
 8001154:	0000031f 	.word	0x0000031f

08001158 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800115c:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <MX_TIM14_Init+0x40>)
 800115e:	4a0f      	ldr	r2, [pc, #60]	@ (800119c <MX_TIM14_Init+0x44>)
 8001160:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 8001162:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <MX_TIM14_Init+0x40>)
 8001164:	22f4      	movs	r2, #244	@ 0xf4
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <MX_TIM14_Init+0x40>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001170:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <MX_TIM14_Init+0x40>)
 8001172:	4a0b      	ldr	r2, [pc, #44]	@ (80011a0 <MX_TIM14_Init+0x48>)
 8001174:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <MX_TIM14_Init+0x40>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <MX_TIM14_Init+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <MX_TIM14_Init+0x40>)
 8001184:	0018      	movs	r0, r3
 8001186:	f004 feb7 	bl	8005ef8 <HAL_TIM_Base_Init>
 800118a:	1e03      	subs	r3, r0, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800118e:	f000 fe1b 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000234 	.word	0x20000234
 800119c:	40002000 	.word	0x40002000
 80011a0:	0000ffff 	.word	0x0000ffff

080011a4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <MX_TIM16_Init+0x44>)
 80011aa:	4a10      	ldr	r2, [pc, #64]	@ (80011ec <MX_TIM16_Init+0x48>)
 80011ac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 58595;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <MX_TIM16_Init+0x44>)
 80011b0:	4a0f      	ldr	r2, [pc, #60]	@ (80011f0 <MX_TIM16_Init+0x4c>)
 80011b2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <MX_TIM16_Init+0x44>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <MX_TIM16_Init+0x44>)
 80011bc:	4a0d      	ldr	r2, [pc, #52]	@ (80011f4 <MX_TIM16_Init+0x50>)
 80011be:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_TIM16_Init+0x44>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <MX_TIM16_Init+0x44>)
 80011c8:	220a      	movs	r2, #10
 80011ca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <MX_TIM16_Init+0x44>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011d2:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <MX_TIM16_Init+0x44>)
 80011d4:	0018      	movs	r0, r3
 80011d6:	f004 fe8f 	bl	8005ef8 <HAL_TIM_Base_Init>
 80011da:	1e03      	subs	r3, r0, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80011de:	f000 fdf3 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000280 	.word	0x20000280
 80011ec:	40014400 	.word	0x40014400
 80011f0:	0000e4e3 	.word	0x0000e4e3
 80011f4:	0000ffff 	.word	0x0000ffff

080011f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b08b      	sub	sp, #44	@ 0x2c
 80011fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	2414      	movs	r4, #20
 8001200:	193b      	adds	r3, r7, r4
 8001202:	0018      	movs	r0, r3
 8001204:	2314      	movs	r3, #20
 8001206:	001a      	movs	r2, r3
 8001208:	2100      	movs	r1, #0
 800120a:	f005 fee3 	bl	8006fd4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	4b7d      	ldr	r3, [pc, #500]	@ (8001404 <MX_GPIO_Init+0x20c>)
 8001210:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001212:	4b7c      	ldr	r3, [pc, #496]	@ (8001404 <MX_GPIO_Init+0x20c>)
 8001214:	2104      	movs	r1, #4
 8001216:	430a      	orrs	r2, r1
 8001218:	635a      	str	r2, [r3, #52]	@ 0x34
 800121a:	4b7a      	ldr	r3, [pc, #488]	@ (8001404 <MX_GPIO_Init+0x20c>)
 800121c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800121e:	2204      	movs	r2, #4
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001226:	4b77      	ldr	r3, [pc, #476]	@ (8001404 <MX_GPIO_Init+0x20c>)
 8001228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800122a:	4b76      	ldr	r3, [pc, #472]	@ (8001404 <MX_GPIO_Init+0x20c>)
 800122c:	2120      	movs	r1, #32
 800122e:	430a      	orrs	r2, r1
 8001230:	635a      	str	r2, [r3, #52]	@ 0x34
 8001232:	4b74      	ldr	r3, [pc, #464]	@ (8001404 <MX_GPIO_Init+0x20c>)
 8001234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001236:	2220      	movs	r2, #32
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	4b71      	ldr	r3, [pc, #452]	@ (8001404 <MX_GPIO_Init+0x20c>)
 8001240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001242:	4b70      	ldr	r3, [pc, #448]	@ (8001404 <MX_GPIO_Init+0x20c>)
 8001244:	2101      	movs	r1, #1
 8001246:	430a      	orrs	r2, r1
 8001248:	635a      	str	r2, [r3, #52]	@ 0x34
 800124a:	4b6e      	ldr	r3, [pc, #440]	@ (8001404 <MX_GPIO_Init+0x20c>)
 800124c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800124e:	2201      	movs	r2, #1
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	4b6b      	ldr	r3, [pc, #428]	@ (8001404 <MX_GPIO_Init+0x20c>)
 8001258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800125a:	4b6a      	ldr	r3, [pc, #424]	@ (8001404 <MX_GPIO_Init+0x20c>)
 800125c:	2102      	movs	r1, #2
 800125e:	430a      	orrs	r2, r1
 8001260:	635a      	str	r2, [r3, #52]	@ 0x34
 8001262:	4b68      	ldr	r3, [pc, #416]	@ (8001404 <MX_GPIO_Init+0x20c>)
 8001264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001266:	2202      	movs	r2, #2
 8001268:	4013      	ands	r3, r2
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800126e:	4b65      	ldr	r3, [pc, #404]	@ (8001404 <MX_GPIO_Init+0x20c>)
 8001270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001272:	4b64      	ldr	r3, [pc, #400]	@ (8001404 <MX_GPIO_Init+0x20c>)
 8001274:	2108      	movs	r1, #8
 8001276:	430a      	orrs	r2, r1
 8001278:	635a      	str	r2, [r3, #52]	@ 0x34
 800127a:	4b62      	ldr	r3, [pc, #392]	@ (8001404 <MX_GPIO_Init+0x20c>)
 800127c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800127e:	2208      	movs	r2, #8
 8001280:	4013      	ands	r3, r2
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_MCLR_Pin, GPIO_PIN_SET);
 8001286:	238e      	movs	r3, #142	@ 0x8e
 8001288:	0119      	lsls	r1, r3, #4
 800128a:	23a0      	movs	r3, #160	@ 0xa0
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	2201      	movs	r2, #1
 8001290:	0018      	movs	r0, r3
 8001292:	f001 fd80 	bl	8002d96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_ENABLE_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001296:	495c      	ldr	r1, [pc, #368]	@ (8001408 <MX_GPIO_Init+0x210>)
 8001298:	4b5c      	ldr	r3, [pc, #368]	@ (800140c <MX_GPIO_Init+0x214>)
 800129a:	2200      	movs	r2, #0
 800129c:	0018      	movs	r0, r3
 800129e:	f001 fd7a 	bl	8002d96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin, GPIO_PIN_RESET);
 80012a2:	23c0      	movs	r3, #192	@ 0xc0
 80012a4:	00d9      	lsls	r1, r3, #3
 80012a6:	23a0      	movs	r3, #160	@ 0xa0
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	2200      	movs	r2, #0
 80012ac:	0018      	movs	r0, r3
 80012ae:	f001 fd72 	bl	8002d96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 80012b2:	4b57      	ldr	r3, [pc, #348]	@ (8001410 <MX_GPIO_Init+0x218>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	2180      	movs	r1, #128	@ 0x80
 80012b8:	0018      	movs	r0, r3
 80012ba:	f001 fd6c 	bl	8002d96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAPTOUCH_RESET_GPIO_Port, CAPTOUCH_RESET_Pin, GPIO_PIN_SET);
 80012be:	2380      	movs	r3, #128	@ 0x80
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4852      	ldr	r0, [pc, #328]	@ (800140c <MX_GPIO_Init+0x214>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	0019      	movs	r1, r3
 80012c8:	f001 fd65 	bl	8002d96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012cc:	193b      	adds	r3, r7, r4
 80012ce:	2204      	movs	r2, #4
 80012d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	2203      	movs	r2, #3
 80012d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	193b      	adds	r3, r7, r4
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	193a      	adds	r2, r7, r4
 80012e0:	23a0      	movs	r3, #160	@ 0xa0
 80012e2:	05db      	lsls	r3, r3, #23
 80012e4:	0011      	movs	r1, r2
 80012e6:	0018      	movs	r0, r3
 80012e8:	f001 fbd4 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nHOLD_Pin SHIFT_DATA_IN_Pin
                           SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_DATA_IN_Pin
 80012ec:	0021      	movs	r1, r4
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	22ee      	movs	r2, #238	@ 0xee
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	601a      	str	r2, [r3, #0]
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	000c      	movs	r4, r1
 80012f8:	193b      	adds	r3, r7, r4
 80012fa:	2201      	movs	r2, #1
 80012fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	193b      	adds	r3, r7, r4
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	193b      	adds	r3, r7, r4
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	193a      	adds	r2, r7, r4
 800130c:	23a0      	movs	r3, #160	@ 0xa0
 800130e:	05db      	lsls	r3, r3, #23
 8001310:	0011      	movs	r1, r2
 8001312:	0018      	movs	r0, r3
 8001314:	f001 fbbe 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_ENABLE_Pin DEBUG_LED_Pin CAPTOUCH_RESET_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin;
 8001318:	193b      	adds	r3, r7, r4
 800131a:	4a3e      	ldr	r2, [pc, #248]	@ (8001414 <MX_GPIO_Init+0x21c>)
 800131c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	193b      	adds	r3, r7, r4
 8001320:	2201      	movs	r2, #1
 8001322:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	193b      	adds	r3, r7, r4
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	193b      	adds	r3, r7, r4
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	193b      	adds	r3, r7, r4
 8001332:	4a36      	ldr	r2, [pc, #216]	@ (800140c <MX_GPIO_Init+0x214>)
 8001334:	0019      	movs	r1, r3
 8001336:	0010      	movs	r0, r2
 8001338:	f001 fbac 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 800133c:	193b      	adds	r3, r7, r4
 800133e:	2280      	movs	r2, #128	@ 0x80
 8001340:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	193b      	adds	r3, r7, r4
 8001344:	2201      	movs	r2, #1
 8001346:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	193b      	adds	r3, r7, r4
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	193b      	adds	r3, r7, r4
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 8001354:	193b      	adds	r3, r7, r4
 8001356:	4a2e      	ldr	r2, [pc, #184]	@ (8001410 <MX_GPIO_Init+0x218>)
 8001358:	0019      	movs	r1, r3
 800135a:	0010      	movs	r0, r2
 800135c:	f001 fb9a 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_SET_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = ALARM_SET_BUTTON_EXTI_Pin;
 8001360:	193b      	adds	r3, r7, r4
 8001362:	2280      	movs	r2, #128	@ 0x80
 8001364:	0212      	lsls	r2, r2, #8
 8001366:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001368:	193b      	adds	r3, r7, r4
 800136a:	2284      	movs	r2, #132	@ 0x84
 800136c:	0392      	lsls	r2, r2, #14
 800136e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001370:	193b      	adds	r3, r7, r4
 8001372:	2201      	movs	r2, #1
 8001374:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALARM_SET_BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 8001376:	193a      	adds	r2, r7, r4
 8001378:	23a0      	movs	r3, #160	@ 0xa0
 800137a:	05db      	lsls	r3, r3, #23
 800137c:	0011      	movs	r1, r2
 800137e:	0018      	movs	r0, r3
 8001380:	f001 fb88 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_EXTI_Pin MINUTE_SET_BUTTON_EXTI_Pin ALARM_EN_BUTTON_EXTI_Pin DISPLAY_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_EXTI_Pin|MINUTE_SET_BUTTON_EXTI_Pin|ALARM_EN_BUTTON_EXTI_Pin|DISPLAY_BUTTON_EXTI_Pin;
 8001384:	0021      	movs	r1, r4
 8001386:	187b      	adds	r3, r7, r1
 8001388:	220f      	movs	r2, #15
 800138a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2284      	movs	r2, #132	@ 0x84
 8001390:	0392      	lsls	r2, r2, #14
 8001392:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001394:	187b      	adds	r3, r7, r1
 8001396:	2201      	movs	r2, #1
 8001398:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139a:	000c      	movs	r4, r1
 800139c:	187b      	adds	r3, r7, r1
 800139e:	4a1e      	ldr	r2, [pc, #120]	@ (8001418 <MX_GPIO_Init+0x220>)
 80013a0:	0019      	movs	r1, r3
 80013a2:	0010      	movs	r0, r2
 80013a4:	f001 fb76 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIME_SWITCH_EXTI_Pin */
  GPIO_InitStruct.Pin = TIME_SWITCH_EXTI_Pin;
 80013a8:	0021      	movs	r1, r4
 80013aa:	187b      	adds	r3, r7, r1
 80013ac:	2210      	movs	r2, #16
 80013ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	22c4      	movs	r2, #196	@ 0xc4
 80013b4:	0392      	lsls	r2, r2, #14
 80013b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2201      	movs	r2, #1
 80013bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TIME_SWITCH_EXTI_GPIO_Port, &GPIO_InitStruct);
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	4a12      	ldr	r2, [pc, #72]	@ (800140c <MX_GPIO_Init+0x214>)
 80013c2:	0019      	movs	r1, r3
 80013c4:	0010      	movs	r0, r2
 80013c6:	f001 fb65 	bl	8002a94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	2005      	movs	r0, #5
 80013d0:	f001 fb2e 	bl	8002a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80013d4:	2005      	movs	r0, #5
 80013d6:	f001 fb40 	bl	8002a5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2101      	movs	r1, #1
 80013de:	2006      	movs	r0, #6
 80013e0:	f001 fb26 	bl	8002a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80013e4:	2006      	movs	r0, #6
 80013e6:	f001 fb38 	bl	8002a5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2101      	movs	r1, #1
 80013ee:	2007      	movs	r0, #7
 80013f0:	f001 fb1e 	bl	8002a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80013f4:	2007      	movs	r0, #7
 80013f6:	f001 fb30 	bl	8002a5a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b00b      	add	sp, #44	@ 0x2c
 8001400:	bd90      	pop	{r4, r7, pc}
 8001402:	46c0      	nop			@ (mov r8, r8)
 8001404:	40021000 	.word	0x40021000
 8001408:	00001002 	.word	0x00001002
 800140c:	50000400 	.word	0x50000400
 8001410:	50000800 	.word	0x50000800
 8001414:	00001102 	.word	0x00001102
 8001418:	50000c00 	.word	0x50000c00

0800141c <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8001428:	4a09      	ldr	r2, [pc, #36]	@ (8001450 <updateAndDisplayTime+0x34>)
 800142a:	490a      	ldr	r1, [pc, #40]	@ (8001454 <updateAndDisplayTime+0x38>)
 800142c:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <updateAndDisplayTime+0x3c>)
 800142e:	0018      	movs	r0, r3
 8001430:	f7ff fb0e 	bl	8000a50 <getRTCTime>
	sevSeg_updateDigits(&currTime, userAlarmToggle);
 8001434:	4b09      	ldr	r3, [pc, #36]	@ (800145c <updateAndDisplayTime+0x40>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	001a      	movs	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <updateAndDisplayTime+0x38>)
 800143c:	0011      	movs	r1, r2
 800143e:	0018      	movs	r0, r3
 8001440:	f000 fde8 	bl	8002014 <sevSeg_updateDigits>

	return halRet;
 8001444:	1dfb      	adds	r3, r7, #7
 8001446:	781b      	ldrb	r3, [r3, #0]

}
 8001448:	0018      	movs	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	b002      	add	sp, #8
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200000a8 	.word	0x200000a8
 8001454:	20000094 	.word	0x20000094
 8001458:	20000158 	.word	0x20000158
 800145c:	20000091 	.word	0x20000091

08001460 <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime, userAlarmToggle);
 800146c:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <updateAndDisplayAlarm+0x28>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	001a      	movs	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <updateAndDisplayAlarm+0x2c>)
 8001474:	0011      	movs	r1, r2
 8001476:	0018      	movs	r0, r3
 8001478:	f000 fdcc 	bl	8002014 <sevSeg_updateDigits>

	return halRet;
 800147c:	1dfb      	adds	r3, r7, #7
 800147e:	781b      	ldrb	r3, [r3, #0]

}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000091 	.word	0x20000091
 800148c:	200000ac 	.word	0x200000ac

08001490 <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b08d      	sub	sp, #52	@ 0x34
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 8001498:	2408      	movs	r4, #8
 800149a:	193b      	adds	r3, r7, r4
 800149c:	0018      	movs	r0, r3
 800149e:	2328      	movs	r3, #40	@ 0x28
 80014a0:	001a      	movs	r2, r3
 80014a2:	2100      	movs	r1, #0
 80014a4:	f005 fd96 	bl	8006fd4 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	005a      	lsls	r2, r3, #1
 80014ac:	1939      	adds	r1, r7, r4
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	2300      	movs	r3, #0
 80014b2:	f004 f989 	bl	80057c8 <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	785b      	ldrb	r3, [r3, #1]
 80014ba:	2b3a      	cmp	r3, #58	@ 0x3a
 80014bc:	d903      	bls.n	80014c6 <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 80014be:	193b      	adds	r3, r7, r4
 80014c0:	2200      	movs	r2, #0
 80014c2:	705a      	strb	r2, [r3, #1]
 80014c4:	e006      	b.n	80014d4 <HAL_RTC_AlarmAEventCallback+0x44>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 80014c6:	2108      	movs	r1, #8
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	785b      	ldrb	r3, [r3, #1]
 80014cc:	3301      	adds	r3, #1
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80014d4:	46c0      	nop			@ (mov r8, r8)
 80014d6:	2308      	movs	r3, #8
 80014d8:	18f9      	adds	r1, r7, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	0018      	movs	r0, r3
 80014e0:	f004 f832 	bl	8005548 <HAL_RTC_SetAlarm_IT>
 80014e4:	1e03      	subs	r3, r0, #0
 80014e6:	d1f6      	bne.n	80014d6 <HAL_RTC_AlarmAEventCallback+0x46>

	  updateAndDisplayTime();
 80014e8:	f7ff ff98 	bl	800141c <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 80014ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <HAL_RTC_AlarmAEventCallback+0x94>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d013      	beq.n	800151c <HAL_RTC_AlarmAEventCallback+0x8c>
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_RTC_AlarmAEventCallback+0x98>)
 80014f6:	781a      	ldrb	r2, [r3, #0]
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <HAL_RTC_AlarmAEventCallback+0x9c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d10d      	bne.n	800151c <HAL_RTC_AlarmAEventCallback+0x8c>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_RTC_AlarmAEventCallback+0x98>)
 8001502:	785a      	ldrb	r2, [r3, #1]
 8001504:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_RTC_AlarmAEventCallback+0x9c>)
 8001506:	785b      	ldrb	r3, [r3, #1]
 8001508:	429a      	cmp	r2, r3
 800150a:	d107      	bne.n	800151c <HAL_RTC_AlarmAEventCallback+0x8c>
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_RTC_AlarmAEventCallback+0x98>)
 800150e:	78da      	ldrb	r2, [r3, #3]
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_RTC_AlarmAEventCallback+0x9c>)
 8001512:	78db      	ldrb	r3, [r3, #3]
 8001514:	429a      	cmp	r2, r3
 8001516:	d101      	bne.n	800151c <HAL_RTC_AlarmAEventCallback+0x8c>
		  userAlarmBeep();
 8001518:	f000 f80a 	bl	8001530 <userAlarmBeep>
	  }


}
 800151c:	46c0      	nop			@ (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	b00d      	add	sp, #52	@ 0x34
 8001522:	bd90      	pop	{r4, r7, pc}
 8001524:	20000091 	.word	0x20000091
 8001528:	200000ac 	.word	0x200000ac
 800152c:	20000094 	.word	0x20000094

08001530 <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 8001536:	4b50      	ldr	r3, [pc, #320]	@ (8001678 <userAlarmBeep+0x148>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d02d      	beq.n	800159a <userAlarmBeep+0x6a>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 800153e:	4b4f      	ldr	r3, [pc, #316]	@ (800167c <userAlarmBeep+0x14c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	0018      	movs	r0, r3
 8001544:	f004 fdf6 	bl	8006134 <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 8001548:	4b4c      	ldr	r3, [pc, #304]	@ (800167c <userAlarmBeep+0x14c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001550:	4b4a      	ldr	r3, [pc, #296]	@ (800167c <userAlarmBeep+0x14c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	0c12      	lsrs	r2, r2, #16
 8001558:	0412      	lsls	r2, r2, #16
 800155a:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 800155c:	4b47      	ldr	r3, [pc, #284]	@ (800167c <userAlarmBeep+0x14c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	4b45      	ldr	r3, [pc, #276]	@ (800167c <userAlarmBeep+0x14c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4945      	ldr	r1, [pc, #276]	@ (8001680 <userAlarmBeep+0x150>)
 800156c:	400a      	ands	r2, r1
 800156e:	611a      	str	r2, [r3, #16]

			// Re-write RCR with 10
			timerSnooze->Instance->RCR &= 0xFF00;
 8001570:	4b42      	ldr	r3, [pc, #264]	@ (800167c <userAlarmBeep+0x14c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001578:	4b40      	ldr	r3, [pc, #256]	@ (800167c <userAlarmBeep+0x14c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	22ff      	movs	r2, #255	@ 0xff
 8001580:	0212      	lsls	r2, r2, #8
 8001582:	400a      	ands	r2, r1
 8001584:	631a      	str	r2, [r3, #48]	@ 0x30
			timerSnooze->Instance->RCR |= timerSnooze_RCR;
 8001586:	4b3d      	ldr	r3, [pc, #244]	@ (800167c <userAlarmBeep+0x14c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800158e:	2164      	movs	r1, #100	@ 0x64
 8001590:	4b3a      	ldr	r3, [pc, #232]	@ (800167c <userAlarmBeep+0x14c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	631a      	str	r2, [r3, #48]	@ 0x30

		}

	HAL_TIM_Base_Stop(timerDelay);
 800159a:	4b3a      	ldr	r3, [pc, #232]	@ (8001684 <userAlarmBeep+0x154>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	0018      	movs	r0, r3
 80015a0:	f004 fd4e 	bl	8006040 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80015a4:	4b37      	ldr	r3, [pc, #220]	@ (8001684 <userAlarmBeep+0x154>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f004 fcfd 	bl	8005fa8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80015ae:	4b35      	ldr	r3, [pc, #212]	@ (8001684 <userAlarmBeep+0x154>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b6:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80015b8:	1cfb      	adds	r3, r7, #3
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 80015be:	f7ff ff2d 	bl	800141c <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 80015c2:	4b30      	ldr	r3, [pc, #192]	@ (8001684 <userAlarmBeep+0x154>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001688 <userAlarmBeep+0x158>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d91a      	bls.n	800160a <userAlarmBeep+0xda>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 80015d4:	1cfb      	adds	r3, r7, #3
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4a2c      	ldr	r2, [pc, #176]	@ (800168c <userAlarmBeep+0x15c>)
 80015da:	5cd3      	ldrb	r3, [r2, r3]
 80015dc:	0018      	movs	r0, r3
 80015de:	f000 fdcd 	bl	800217c <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80015e2:	4b28      	ldr	r3, [pc, #160]	@ (8001684 <userAlarmBeep+0x154>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ea:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80015ec:	1cfb      	adds	r3, r7, #3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	1e5a      	subs	r2, r3, #1
 80015f2:	4193      	sbcs	r3, r2
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2201      	movs	r2, #1
 80015f8:	4053      	eors	r3, r2
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	001a      	movs	r2, r3
 80015fe:	1cfb      	adds	r3, r7, #3
 8001600:	701a      	strb	r2, [r3, #0]
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	400a      	ands	r2, r1
 8001608:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 800160a:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <userAlarmBeep+0x160>)
 800160c:	0018      	movs	r0, r3
 800160e:	f7fe ffb1 	bl	8000574 <capTouch_readChannels>
//		HAL_StatusTypeDef halRet = capTouch_readChannels(&capTouch);
//		if(halRet != HAL_OK)
//			dispError();

	} while(capTouch.keyStat == 0x00 &&
 8001612:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <userAlarmBeep+0x160>)
 8001614:	7c1b      	ldrb	r3, [r3, #16]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d108      	bne.n	800162c <userAlarmBeep+0xfc>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 800161a:	4b1e      	ldr	r3, [pc, #120]	@ (8001694 <userAlarmBeep+0x164>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2204      	movs	r2, #4
 8001620:	0011      	movs	r1, r2
 8001622:	0018      	movs	r0, r3
 8001624:	f001 fb9a 	bl	8002d5c <HAL_GPIO_ReadPin>
 8001628:	1e03      	subs	r3, r0, #0
	} while(capTouch.keyStat == 0x00 &&
 800162a:	d1c8      	bne.n	80015be <userAlarmBeep+0x8e>

	/*
	 * Stop blinking, turn off buzzer, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 800162c:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <userAlarmBeep+0x154>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	0018      	movs	r0, r3
 8001632:	f004 fd05 	bl	8006040 <HAL_TIM_Base_Stop>

	updateAndDisplayTime();				// Update to current time and display
 8001636:	f7ff fef1 	bl	800141c <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Set to 50% duty cycle
 800163a:	2332      	movs	r3, #50	@ 0x32
 800163c:	0018      	movs	r0, r3
 800163e:	f000 fd9d 	bl	800217c <sevSeg_setIntensity>
	displayToggle = 2;								// Set to 2 for future display button ISRs
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <userAlarmBeep+0x168>)
 8001644:	2202      	movs	r2, #2
 8001646:	701a      	strb	r2, [r3, #0]


	// If this is the first snooze,
	if(!secondSnooze) {
 8001648:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <userAlarmBeep+0x148>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2201      	movs	r2, #1
 800164e:	4053      	eors	r3, r2
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d008      	beq.n	8001668 <userAlarmBeep+0x138>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <userAlarmBeep+0x14c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	0018      	movs	r0, r3
 800165c:	f004 fd16 	bl	800608c <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <userAlarmBeep+0x148>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
		 * in the top conditional, the secondSnooze is always true;
		 */
		secondSnooze = false;

	}
}
 8001666:	e002      	b.n	800166e <userAlarmBeep+0x13e>
		secondSnooze = false;
 8001668:	4b03      	ldr	r3, [pc, #12]	@ (8001678 <userAlarmBeep+0x148>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	46bd      	mov	sp, r7
 8001672:	b002      	add	sp, #8
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	200002cd 	.word	0x200002cd
 800167c:	2000004c 	.word	0x2000004c
 8001680:	0000fffc 	.word	0x0000fffc
 8001684:	20000048 	.word	0x20000048
 8001688:	00007ffe 	.word	0x00007ffe
 800168c:	0800707c 	.word	0x0800707c
 8001690:	200002d0 	.word	0x200002d0
 8001694:	20000000 	.word	0x20000000
 8001698:	20000090 	.word	0x20000090

0800169c <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	0002      	movs	r2, r0
 80016a4:	1dbb      	adds	r3, r7, #6
 80016a6:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 80016a8:	2208      	movs	r2, #8
 80016aa:	1dbb      	adds	r3, r7, #6
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d106      	bne.n	80016c0 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 80016b2:	230f      	movs	r3, #15
 80016b4:	18fc      	adds	r4, r7, r3
 80016b6:	f000 f86f 	bl	8001798 <displayButtonISR>
 80016ba:	0003      	movs	r3, r0
 80016bc:	7023      	strb	r3, [r4, #0]

	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 80016be:	e03d      	b.n	800173c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80016c0:	2204      	movs	r2, #4
 80016c2:	1dbb      	adds	r3, r7, #6
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d106      	bne.n	80016d8 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80016ca:	230f      	movs	r3, #15
 80016cc:	18fc      	adds	r4, r7, r3
 80016ce:	f000 f88b 	bl	80017e8 <alarmEnableISR>
 80016d2:	0003      	movs	r3, r0
 80016d4:	7023      	strb	r3, [r4, #0]
}
 80016d6:	e031      	b.n	800173c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80016d8:	2380      	movs	r3, #128	@ 0x80
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	1dba      	adds	r2, r7, #6
 80016de:	8812      	ldrh	r2, [r2, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d106      	bne.n	80016f2 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 80016e4:	230f      	movs	r3, #15
 80016e6:	18fc      	adds	r4, r7, r3
 80016e8:	f000 f8b8 	bl	800185c <alarmSetISR>
 80016ec:	0003      	movs	r3, r0
 80016ee:	7023      	strb	r3, [r4, #0]
}
 80016f0:	e024      	b.n	800173c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == hourSetButtonPin) {
 80016f2:	2201      	movs	r2, #1
 80016f4:	1dbb      	adds	r3, r7, #6
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d106      	bne.n	800170a <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80016fc:	230f      	movs	r3, #15
 80016fe:	18fc      	adds	r4, r7, r3
 8001700:	f000 f96c 	bl	80019dc <hourSetISR>
 8001704:	0003      	movs	r3, r0
 8001706:	7023      	strb	r3, [r4, #0]
}
 8001708:	e018      	b.n	800173c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == minuteSetButtonPin) {
 800170a:	2202      	movs	r2, #2
 800170c:	1dbb      	adds	r3, r7, #6
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	4293      	cmp	r3, r2
 8001712:	d106      	bne.n	8001722 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8001714:	230f      	movs	r3, #15
 8001716:	18fc      	adds	r4, r7, r3
 8001718:	f000 f98c 	bl	8001a34 <minuteSetISR>
 800171c:	0003      	movs	r3, r0
 800171e:	7023      	strb	r3, [r4, #0]
}
 8001720:	e00c      	b.n	800173c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == timeFormatSwitchPin) {
 8001722:	2210      	movs	r2, #16
 8001724:	1dbb      	adds	r3, r7, #6
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	4293      	cmp	r3, r2
 800172a:	d106      	bne.n	800173a <HAL_GPIO_EXTI_Falling_Callback+0x9e>
		halRet = timeFormatSwitchISR();
 800172c:	230f      	movs	r3, #15
 800172e:	18fc      	adds	r4, r7, r3
 8001730:	f000 f9d2 	bl	8001ad8 <timeFormatSwitchISR>
 8001734:	0003      	movs	r3, r0
 8001736:	7023      	strb	r3, [r4, #0]
}
 8001738:	e000      	b.n	800173c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
		__NOP();
 800173a:	46c0      	nop			@ (mov r8, r8)
}
 800173c:	46c0      	nop			@ (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b005      	add	sp, #20
 8001742:	bd90      	pop	{r4, r7, pc}

08001744 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	0002      	movs	r2, r0
 800174c:	1dbb      	adds	r3, r7, #6
 800174e:	801a      	strh	r2, [r3, #0]

	if(GPIO_Pin == timeFormatSwitchPin) {
 8001750:	2210      	movs	r2, #16
 8001752:	1dbb      	adds	r3, r7, #6
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	4293      	cmp	r3, r2
 8001758:	d101      	bne.n	800175e <HAL_GPIO_EXTI_Rising_Callback+0x1a>

		timeFormatSwitchISR();
 800175a:	f000 f9bd 	bl	8001ad8 <timeFormatSwitchISR>

	}

}
 800175e:	46c0      	nop			@ (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	b002      	add	sp, #8
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

	if((htim == timerSnooze) && (secondSnooze == true)) {
 8001770:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	429a      	cmp	r2, r3
 8001778:	d105      	bne.n	8001786 <HAL_TIM_PeriodElapsedCallback+0x1e>
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_TIM_PeriodElapsedCallback+0x1e>

		userAlarmBeep();
 8001782:	f7ff fed5 	bl	8001530 <userAlarmBeep>

	}

}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b002      	add	sp, #8
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	2000004c 	.word	0x2000004c
 8001794:	200002cd 	.word	0x200002cd

08001798 <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800179e:	1dfb      	adds	r3, r7, #7
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 80017a4:	f7ff fe3a 	bl	800141c <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 80017a8:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <displayButtonISR+0x48>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	001a      	movs	r2, r3
 80017ae:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <displayButtonISR+0x4c>)
 80017b0:	5c9b      	ldrb	r3, [r3, r2]
 80017b2:	0018      	movs	r0, r3
 80017b4:	f000 fce2 	bl	800217c <sevSeg_setIntensity>

	if(displayToggle >= 1) {			// Increment display toggle or reset back down to 0;
 80017b8:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <displayButtonISR+0x48>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <displayButtonISR+0x30>
		displayToggle = 0;
 80017c0:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <displayButtonISR+0x48>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	e005      	b.n	80017d4 <displayButtonISR+0x3c>
	} else {
		displayToggle++;
 80017c8:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <displayButtonISR+0x48>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b03      	ldr	r3, [pc, #12]	@ (80017e0 <displayButtonISR+0x48>)
 80017d2:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 80017d4:	1dfb      	adds	r3, r7, #7
 80017d6:	781b      	ldrb	r3, [r3, #0]

}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b002      	add	sp, #8
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000090 	.word	0x20000090
 80017e4:	0800707c 	.word	0x0800707c

080017e8 <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0



	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 80017f4:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <alarmEnableISR+0x68>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4053      	eors	r3, r2
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00b      	beq.n	800181a <alarmEnableISR+0x32>

		userAlarmToggle = true;								// Toggle internal flag to true
 8001802:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <alarmEnableISR+0x68>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
		sevSeg_updateDigits(&currTime, userAlarmToggle);		// Update display with correct decimal point
 8001808:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <alarmEnableISR+0x68>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	001a      	movs	r2, r3
 800180e:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <alarmEnableISR+0x6c>)
 8001810:	0011      	movs	r1, r2
 8001812:	0018      	movs	r0, r3
 8001814:	f000 fbfe 	bl	8002014 <sevSeg_updateDigits>
 8001818:	e010      	b.n	800183c <alarmEnableISR+0x54>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 800181a:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <alarmEnableISR+0x68>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00b      	beq.n	800183a <alarmEnableISR+0x52>

		userAlarmToggle = false;							// Toggle internal flag to false
 8001822:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <alarmEnableISR+0x68>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
		sevSeg_updateDigits(&currTime, userAlarmToggle);		// Update display with correct decimal point
 8001828:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <alarmEnableISR+0x68>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	001a      	movs	r2, r3
 800182e:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <alarmEnableISR+0x6c>)
 8001830:	0011      	movs	r1, r2
 8001832:	0018      	movs	r0, r3
 8001834:	f000 fbee 	bl	8002014 <sevSeg_updateDigits>
 8001838:	e000      	b.n	800183c <alarmEnableISR+0x54>
	}
	else {
		__NOP();							//Code should never reach here.
 800183a:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset snooze time
	secondSnooze = false;
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <alarmEnableISR+0x70>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]

	return halRet;
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	781b      	ldrb	r3, [r3, #0]

}
 8001846:	0018      	movs	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	b002      	add	sp, #8
 800184c:	bd80      	pop	{r7, pc}
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	20000091 	.word	0x20000091
 8001854:	20000094 	.word	0x20000094
 8001858:	200002cd 	.word	0x200002cd

0800185c <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 8001862:	1c7b      	adds	r3, r7, #1
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 8001868:	1dfb      	adds	r3, r7, #7
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
 800186e:	e01a      	b.n	80018a6 <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 8001870:	4b55      	ldr	r3, [pc, #340]	@ (80019c8 <alarmSetISR+0x16c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	0018      	movs	r0, r3
 8001876:	f004 fbe3 	bl	8006040 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 800187a:	4b53      	ldr	r3, [pc, #332]	@ (80019c8 <alarmSetISR+0x16c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2200      	movs	r2, #0
 8001882:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001884:	4b50      	ldr	r3, [pc, #320]	@ (80019c8 <alarmSetISR+0x16c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0018      	movs	r0, r3
 800188a:	f004 fb8d 	bl	8005fa8 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 800188e:	4b4e      	ldr	r3, [pc, #312]	@ (80019c8 <alarmSetISR+0x16c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001896:	4a4d      	ldr	r2, [pc, #308]	@ (80019cc <alarmSetISR+0x170>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d9f8      	bls.n	800188e <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 800189c:	1dfb      	adds	r3, r7, #7
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	1dfb      	adds	r3, r7, #7
 80018a2:	3201      	adds	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	1dfb      	adds	r3, r7, #7
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d9e0      	bls.n	8001870 <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 80018ae:	4b48      	ldr	r3, [pc, #288]	@ (80019d0 <alarmSetISR+0x174>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2280      	movs	r2, #128	@ 0x80
 80018b4:	0212      	lsls	r2, r2, #8
 80018b6:	0011      	movs	r1, r2
 80018b8:	0018      	movs	r0, r3
 80018ba:	f001 fa4f 	bl	8002d5c <HAL_GPIO_ReadPin>
 80018be:	1e03      	subs	r3, r0, #0
 80018c0:	d11f      	bne.n	8001902 <alarmSetISR+0xa6>
		alarmSetMode = true;
 80018c2:	4b44      	ldr	r3, [pc, #272]	@ (80019d4 <alarmSetISR+0x178>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 80018c8:	4b3f      	ldr	r3, [pc, #252]	@ (80019c8 <alarmSetISR+0x16c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f004 fbb7 	bl	8006040 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 80018d2:	4b3d      	ldr	r3, [pc, #244]	@ (80019c8 <alarmSetISR+0x16c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2200      	movs	r2, #0
 80018da:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80018dc:	4b3a      	ldr	r3, [pc, #232]	@ (80019c8 <alarmSetISR+0x16c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f004 fb61 	bl	8005fa8 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80018e6:	4b38      	ldr	r3, [pc, #224]	@ (80019c8 <alarmSetISR+0x16c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 80018f2:	1cfb      	adds	r3, r7, #3
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 80018f8:	4b36      	ldr	r3, [pc, #216]	@ (80019d4 <alarmSetISR+0x178>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d059      	beq.n	80019b4 <alarmSetISR+0x158>
 8001900:	e002      	b.n	8001908 <alarmSetISR+0xac>
		return halRet;
 8001902:	1c7b      	adds	r3, r7, #1
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	e05a      	b.n	80019be <alarmSetISR+0x162>

		bool displayBlink = false;
 8001908:	1cbb      	adds	r3, r7, #2
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 800190e:	4b30      	ldr	r3, [pc, #192]	@ (80019d0 <alarmSetISR+0x174>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2280      	movs	r2, #128	@ 0x80
 8001914:	0212      	lsls	r2, r2, #8
 8001916:	0011      	movs	r1, r2
 8001918:	0018      	movs	r0, r3
 800191a:	f001 fa1f 	bl	8002d5c <HAL_GPIO_ReadPin>
 800191e:	0003      	movs	r3, r0
 8001920:	2b01      	cmp	r3, #1
 8001922:	d102      	bne.n	800192a <alarmSetISR+0xce>
				alarmSetButtonReset = true;
 8001924:	1cfb      	adds	r3, r7, #3
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 800192a:	f7ff fd99 	bl	8001460 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 800192e:	4b26      	ldr	r3, [pc, #152]	@ (80019c8 <alarmSetISR+0x16c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	1ad2      	subs	r2, r2, r3
 800193c:	2380      	movs	r3, #128	@ 0x80
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	429a      	cmp	r2, r3
 8001942:	d31b      	bcc.n	800197c <alarmSetISR+0x120>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8001944:	1cbb      	adds	r3, r7, #2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4a23      	ldr	r2, [pc, #140]	@ (80019d8 <alarmSetISR+0x17c>)
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	0018      	movs	r0, r3
 800194e:	f000 fc15 	bl	800217c <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8001952:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <alarmSetISR+0x16c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 800195e:	1cbb      	adds	r3, r7, #2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	1e5a      	subs	r2, r3, #1
 8001964:	4193      	sbcs	r3, r2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2201      	movs	r2, #1
 800196a:	4053      	eors	r3, r2
 800196c:	b2db      	uxtb	r3, r3
 800196e:	001a      	movs	r2, r3
 8001970:	1cbb      	adds	r3, r7, #2
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	2101      	movs	r1, #1
 8001978:	400a      	ands	r2, r1
 800197a:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 800197c:	4b14      	ldr	r3, [pc, #80]	@ (80019d0 <alarmSetISR+0x174>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2280      	movs	r2, #128	@ 0x80
 8001982:	0212      	lsls	r2, r2, #8
 8001984:	0011      	movs	r1, r2
 8001986:	0018      	movs	r0, r3
 8001988:	f001 f9e8 	bl	8002d5c <HAL_GPIO_ReadPin>
 800198c:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 800198e:	d1be      	bne.n	800190e <alarmSetISR+0xb2>
 8001990:	1cfb      	adds	r3, r7, #3
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2201      	movs	r2, #1
 8001996:	4053      	eors	r3, r2
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1b7      	bne.n	800190e <alarmSetISR+0xb2>

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 800199e:	2332      	movs	r3, #50	@ 0x32
 80019a0:	0018      	movs	r0, r3
 80019a2:	f000 fbeb 	bl	800217c <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 80019a6:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <alarmSetISR+0x16c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	0018      	movs	r0, r3
 80019ac:	f004 fb48 	bl	8006040 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 80019b0:	f7ff fd34 	bl	800141c <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 80019b4:	4b07      	ldr	r3, [pc, #28]	@ (80019d4 <alarmSetISR+0x178>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 80019ba:	1c7b      	adds	r3, r7, #1
 80019bc:	781b      	ldrb	r3, [r3, #0]

}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	20000048 	.word	0x20000048
 80019cc:	0000fffe 	.word	0x0000fffe
 80019d0:	20000004 	.word	0x20000004
 80019d4:	200002cc 	.word	0x200002cc
 80019d8:	0800707c 	.word	0x0800707c

080019dc <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 80019e2:	1dfb      	adds	r3, r7, #7
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80019e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <hourSetISR+0x48>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <hourSetISR+0x1a>

		alarmHourInc();
 80019f0:	f000 f8b4 	bl	8001b5c <alarmHourInc>
 80019f4:	e00f      	b.n	8001a16 <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 80019f6:	f000 f8e1 	bl	8001bbc <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 80019fa:	490b      	ldr	r1, [pc, #44]	@ (8001a28 <hourSetISR+0x4c>)
 80019fc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <hourSetISR+0x50>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	0018      	movs	r0, r3
 8001a02:	f003 fbbd 	bl	8005180 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001a06:	f7ff fd09 	bl	800141c <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001a0a:	4a09      	ldr	r2, [pc, #36]	@ (8001a30 <hourSetISR+0x54>)
 8001a0c:	4906      	ldr	r1, [pc, #24]	@ (8001a28 <hourSetISR+0x4c>)
 8001a0e:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <hourSetISR+0x50>)
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7ff f81d 	bl	8000a50 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	781b      	ldrb	r3, [r3, #0]

}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b002      	add	sp, #8
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	200002cc 	.word	0x200002cc
 8001a28:	20000094 	.word	0x20000094
 8001a2c:	20000158 	.word	0x20000158
 8001a30:	200000a8 	.word	0x200000a8

08001a34 <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	@ 0x30
 8001a38:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 8001a3a:	232f      	movs	r3, #47	@ 0x2f
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001a42:	4b21      	ldr	r3, [pc, #132]	@ (8001ac8 <minuteSetISR+0x94>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <minuteSetISR+0x1c>

		alarmMinuteInc();
 8001a4a:	f000 f8f7 	bl	8001c3c <alarmMinuteInc>
 8001a4e:	e034      	b.n	8001aba <minuteSetISR+0x86>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8001a50:	f000 f912 	bl	8001c78 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001a54:	491d      	ldr	r1, [pc, #116]	@ (8001acc <minuteSetISR+0x98>)
 8001a56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <minuteSetISR+0x9c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f003 fb90 	bl	8005180 <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	0018      	movs	r0, r3
 8001a64:	2328      	movs	r3, #40	@ 0x28
 8001a66:	001a      	movs	r2, r3
 8001a68:	2100      	movs	r1, #0
 8001a6a:	f005 fab3 	bl	8006fd4 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001a6e:	2380      	movs	r3, #128	@ 0x80
 8001a70:	005a      	lsls	r2, r3, #1
 8001a72:	1d39      	adds	r1, r7, #4
 8001a74:	4816      	ldr	r0, [pc, #88]	@ (8001ad0 <minuteSetISR+0x9c>)
 8001a76:	2300      	movs	r3, #0
 8001a78:	f003 fea6 	bl	80057c8 <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	2b3a      	cmp	r3, #58	@ 0x3a
 8001a82:	d903      	bls.n	8001a8c <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2200      	movs	r2, #0
 8001a88:	705a      	strb	r2, [r3, #1]
 8001a8a:	e005      	b.n	8001a98 <minuteSetISR+0x64>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	785b      	ldrb	r3, [r3, #1]
 8001a90:	3301      	adds	r3, #1
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8001a98:	46c0      	nop			@ (mov r8, r8)
 8001a9a:	1d39      	adds	r1, r7, #4
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <minuteSetISR+0x9c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f003 fd51 	bl	8005548 <HAL_RTC_SetAlarm_IT>
 8001aa6:	1e03      	subs	r3, r0, #0
 8001aa8:	d1f7      	bne.n	8001a9a <minuteSetISR+0x66>

		updateAndDisplayTime();
 8001aaa:	f7ff fcb7 	bl	800141c <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001aae:	4a09      	ldr	r2, [pc, #36]	@ (8001ad4 <minuteSetISR+0xa0>)
 8001ab0:	4906      	ldr	r1, [pc, #24]	@ (8001acc <minuteSetISR+0x98>)
 8001ab2:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <minuteSetISR+0x9c>)
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7fe ffcb 	bl	8000a50 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8001aba:	232f      	movs	r3, #47	@ 0x2f
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	781b      	ldrb	r3, [r3, #0]
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b00c      	add	sp, #48	@ 0x30
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200002cc 	.word	0x200002cc
 8001acc:	20000094 	.word	0x20000094
 8001ad0:	20000158 	.word	0x20000158
 8001ad4:	200000a8 	.word	0x200000a8

08001ad8 <timeFormatSwitchISR>:

/*
 * Switch hour format (12 or 24 hr)
 */
HAL_StatusTypeDef timeFormatSwitchISR(void) {
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001ade:	1dfb      	adds	r3, r7, #7
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]

	// Disable write protection on RTC
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8001ae4:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <timeFormatSwitchISR+0x74>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	22ca      	movs	r2, #202	@ 0xca
 8001aea:	625a      	str	r2, [r3, #36]	@ 0x24
 8001aec:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <timeFormatSwitchISR+0x74>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2253      	movs	r2, #83	@ 0x53
 8001af2:	625a      	str	r2, [r3, #36]	@ 0x24

	// Determine which time format we will be using
	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 8001af4:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <timeFormatSwitchISR+0x78>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2210      	movs	r2, #16
 8001afa:	0011      	movs	r1, r2
 8001afc:	0018      	movs	r0, r3
 8001afe:	f001 f92d 	bl	8002d5c <HAL_GPIO_ReadPin>
 8001b02:	0003      	movs	r3, r0
 8001b04:	001a      	movs	r2, r3
 8001b06:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <timeFormatSwitchISR+0x7c>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d103      	bne.n	8001b16 <timeFormatSwitchISR+0x3e>
	  userTimeFormat = RTC_HOURFORMAT_12;
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <timeFormatSwitchISR+0x80>)
 8001b10:	2240      	movs	r2, #64	@ 0x40
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e002      	b.n	8001b1c <timeFormatSwitchISR+0x44>
	}
	else {
	  userTimeFormat = RTC_HOURFORMAT_24;
 8001b16:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <timeFormatSwitchISR+0x80>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
	}

	hrtc.Init.HourFormat = userTimeFormat;
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <timeFormatSwitchISR+0x80>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <timeFormatSwitchISR+0x74>)
 8001b22:	609a      	str	r2, [r3, #8]

	// Re-initialize RTC
	halRet = HAL_RTC_Init(&hrtc);
 8001b24:	1dfc      	adds	r4, r7, #7
 8001b26:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <timeFormatSwitchISR+0x74>)
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f003 fa87 	bl	800503c <HAL_RTC_Init>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	7023      	strb	r3, [r4, #0]

	// Re-enale write protection on RTC
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8001b32:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <timeFormatSwitchISR+0x74>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	22ff      	movs	r2, #255	@ 0xff
 8001b38:	625a      	str	r2, [r3, #36]	@ 0x24

	updateAndDisplayTime();
 8001b3a:	f7ff fc6f 	bl	800141c <updateAndDisplayTime>

	return halRet;
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	781b      	ldrb	r3, [r3, #0]

}
 8001b42:	0018      	movs	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b003      	add	sp, #12
 8001b48:	bd90      	pop	{r4, r7, pc}
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	20000158 	.word	0x20000158
 8001b50:	20000008 	.word	0x20000008
 8001b54:	20000040 	.word	0x20000040
 8001b58:	200000c4 	.word	0x200000c4

08001b5c <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001b60:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <alarmHourInc+0x5c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b0b      	cmp	r3, #11
 8001b66:	d903      	bls.n	8001b70 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001b68:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <alarmHourInc+0x5c>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]
 8001b6e:	e01e      	b.n	8001bae <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <alarmHourInc+0x5c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b0b      	cmp	r3, #11
 8001b76:	d10e      	bne.n	8001b96 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001b78:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <alarmHourInc+0x5c>)
 8001b7a:	78db      	ldrb	r3, [r3, #3]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d103      	bne.n	8001b88 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001b80:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <alarmHourInc+0x5c>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	70da      	strb	r2, [r3, #3]
 8001b86:	e002      	b.n	8001b8e <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <alarmHourInc+0x5c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <alarmHourInc+0x5c>)
 8001b90:	220c      	movs	r2, #12
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	e00b      	b.n	8001bae <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 8001b96:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <alarmHourInc+0x5c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b0a      	cmp	r3, #10
 8001b9c:	d806      	bhi.n	8001bac <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <alarmHourInc+0x5c>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <alarmHourInc+0x5c>)
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	e000      	b.n	8001bae <alarmHourInc+0x52>
	}
	else {
		__NOP();
 8001bac:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001bae:	f000 f8e1 	bl	8001d74 <updateRTCBackupReg>

}
 8001bb2:	46c0      	nop			@ (mov r8, r8)
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	200000ac 	.word	0x200000ac

08001bbc <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c2c <currHourInc+0x70>)
 8001bc2:	491b      	ldr	r1, [pc, #108]	@ (8001c30 <currHourInc+0x74>)
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c34 <currHourInc+0x78>)
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f7fe ff42 	bl	8000a50 <getRTCTime>

	if(currTime.Hours >= 12) {
 8001bcc:	4b18      	ldr	r3, [pc, #96]	@ (8001c30 <currHourInc+0x74>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b0b      	cmp	r3, #11
 8001bd2:	d903      	bls.n	8001bdc <currHourInc+0x20>
		currTime.Hours = 1;
 8001bd4:	4b16      	ldr	r3, [pc, #88]	@ (8001c30 <currHourInc+0x74>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e01e      	b.n	8001c1a <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8001bdc:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <currHourInc+0x74>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b0b      	cmp	r3, #11
 8001be2:	d10e      	bne.n	8001c02 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <currHourInc+0x74>)
 8001be6:	78db      	ldrb	r3, [r3, #3]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d103      	bne.n	8001bf4 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001bec:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <currHourInc+0x74>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	70da      	strb	r2, [r3, #3]
 8001bf2:	e002      	b.n	8001bfa <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <currHourInc+0x74>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001c30 <currHourInc+0x74>)
 8001bfc:	220c      	movs	r2, #12
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	e00b      	b.n	8001c1a <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 8001c02:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <currHourInc+0x7c>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b0a      	cmp	r3, #10
 8001c08:	d806      	bhi.n	8001c18 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8001c0a:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <currHourInc+0x74>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b07      	ldr	r3, [pc, #28]	@ (8001c30 <currHourInc+0x74>)
 8001c14:	701a      	strb	r2, [r3, #0]
 8001c16:	e000      	b.n	8001c1a <currHourInc+0x5e>
	}
	else {
		__NOP();
 8001c18:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001c1a:	4b05      	ldr	r3, [pc, #20]	@ (8001c30 <currHourInc+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <currHourInc+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]

}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	200000a8 	.word	0x200000a8
 8001c30:	20000094 	.word	0x20000094
 8001c34:	20000158 	.word	0x20000158
 8001c38:	200000ac 	.word	0x200000ac

08001c3c <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001c40:	4b0c      	ldr	r3, [pc, #48]	@ (8001c74 <alarmMinuteInc+0x38>)
 8001c42:	785b      	ldrb	r3, [r3, #1]
 8001c44:	2b3a      	cmp	r3, #58	@ 0x3a
 8001c46:	d903      	bls.n	8001c50 <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <alarmMinuteInc+0x38>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	705a      	strb	r2, [r3, #1]
 8001c4e:	e00b      	b.n	8001c68 <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <alarmMinuteInc+0x38>)
 8001c52:	785b      	ldrb	r3, [r3, #1]
 8001c54:	2b3a      	cmp	r3, #58	@ 0x3a
 8001c56:	d806      	bhi.n	8001c66 <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <alarmMinuteInc+0x38>)
 8001c5a:	785b      	ldrb	r3, [r3, #1]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	4b04      	ldr	r3, [pc, #16]	@ (8001c74 <alarmMinuteInc+0x38>)
 8001c62:	705a      	strb	r2, [r3, #1]
 8001c64:	e000      	b.n	8001c68 <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 8001c66:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001c68:	f000 f884 	bl	8001d74 <updateRTCBackupReg>

}
 8001c6c:	46c0      	nop			@ (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			@ (mov r8, r8)
 8001c74:	200000ac 	.word	0x200000ac

08001c78 <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001c7c:	4a11      	ldr	r2, [pc, #68]	@ (8001cc4 <currMinuteInc+0x4c>)
 8001c7e:	4912      	ldr	r1, [pc, #72]	@ (8001cc8 <currMinuteInc+0x50>)
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <currMinuteInc+0x54>)
 8001c82:	0018      	movs	r0, r3
 8001c84:	f7fe fee4 	bl	8000a50 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8001c88:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc8 <currMinuteInc+0x50>)
 8001c8a:	785b      	ldrb	r3, [r3, #1]
 8001c8c:	2b3a      	cmp	r3, #58	@ 0x3a
 8001c8e:	d903      	bls.n	8001c98 <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8001c90:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <currMinuteInc+0x50>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	705a      	strb	r2, [r3, #1]
 8001c96:	e00b      	b.n	8001cb0 <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8001c98:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <currMinuteInc+0x50>)
 8001c9a:	785b      	ldrb	r3, [r3, #1]
 8001c9c:	2b3a      	cmp	r3, #58	@ 0x3a
 8001c9e:	d806      	bhi.n	8001cae <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <currMinuteInc+0x50>)
 8001ca2:	785b      	ldrb	r3, [r3, #1]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <currMinuteInc+0x50>)
 8001caa:	705a      	strb	r2, [r3, #1]
 8001cac:	e000      	b.n	8001cb0 <currMinuteInc+0x38>
	}
	else {
		__NOP();
 8001cae:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <currMinuteInc+0x50>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001cb6:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <currMinuteInc+0x50>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]

}
 8001cbc:	46c0      	nop			@ (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	46c0      	nop			@ (mov r8, r8)
 8001cc4:	200000a8 	.word	0x200000a8
 8001cc8:	20000094 	.word	0x20000094
 8001ccc:	20000158 	.word	0x20000158

08001cd0 <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <dispFault+0x1c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2280      	movs	r2, #128	@ 0x80
 8001cda:	0151      	lsls	r1, r2, #5
 8001cdc:	2201      	movs	r2, #1
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f001 f859 	bl	8002d96 <HAL_GPIO_WritePin>
}
 8001ce4:	46c0      	nop			@ (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			@ (mov r8, r8)
 8001cec:	20000028 	.word	0x20000028

08001cf0 <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <dispFailure+0x78>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f004 f9a0 	bl	8006040 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001d00:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <dispFailure+0x78>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0018      	movs	r0, r3
 8001d06:	f004 f94f 	bl	8005fa8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001d0a:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <dispFailure+0x78>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001d14:	1cfb      	adds	r3, r7, #3
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001d1a:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <dispFailure+0x78>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	4a11      	ldr	r2, [pc, #68]	@ (8001d6c <dispFailure+0x7c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d9f6      	bls.n	8001d1a <dispFailure+0x2a>

			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8001d2c:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <dispFailure+0x80>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2280      	movs	r2, #128	@ 0x80
 8001d32:	0152      	lsls	r2, r2, #5
 8001d34:	0011      	movs	r1, r2
 8001d36:	0018      	movs	r0, r3
 8001d38:	f001 f84a 	bl	8002dd0 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <dispFailure+0x78>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001d46:	1cfb      	adds	r3, r7, #3
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	1e5a      	subs	r2, r3, #1
 8001d4c:	4193      	sbcs	r3, r2
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2201      	movs	r2, #1
 8001d52:	4053      	eors	r3, r2
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	001a      	movs	r2, r3
 8001d58:	1cfb      	adds	r3, r7, #3
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	2101      	movs	r1, #1
 8001d60:	400a      	ands	r2, r1
 8001d62:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001d64:	e7d9      	b.n	8001d1a <dispFailure+0x2a>
 8001d66:	46c0      	nop			@ (mov r8, r8)
 8001d68:	20000048 	.word	0x20000048
 8001d6c:	00003ffe 	.word	0x00003ffe
 8001d70:	20000028 	.word	0x20000028

08001d74 <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8001d78:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <updateRTCBackupReg+0x40>)
 8001d7a:	6819      	ldr	r1, [r3, #0]
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <updateRTCBackupReg+0x44>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	001a      	movs	r2, r3
 8001d82:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <updateRTCBackupReg+0x48>)
 8001d84:	0018      	movs	r0, r3
 8001d86:	f003 ffc7 	bl	8005d18 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc0 <updateRTCBackupReg+0x4c>)
 8001d8c:	6819      	ldr	r1, [r3, #0]
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <updateRTCBackupReg+0x44>)
 8001d90:	785b      	ldrb	r3, [r3, #1]
 8001d92:	001a      	movs	r2, r3
 8001d94:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <updateRTCBackupReg+0x48>)
 8001d96:	0018      	movs	r0, r3
 8001d98:	f003 ffbe 	bl	8005d18 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8001d9c:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <updateRTCBackupReg+0x50>)
 8001d9e:	6819      	ldr	r1, [r3, #0]
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <updateRTCBackupReg+0x44>)
 8001da2:	78db      	ldrb	r3, [r3, #3]
 8001da4:	001a      	movs	r2, r3
 8001da6:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <updateRTCBackupReg+0x48>)
 8001da8:	0018      	movs	r0, r3
 8001daa:	f003 ffb5 	bl	8005d18 <HAL_RTCEx_BKUPWrite>

}
 8001dae:	46c0      	nop			@ (mov r8, r8)
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200000c0 	.word	0x200000c0
 8001db8:	200000ac 	.word	0x200000ac
 8001dbc:	20000158 	.word	0x20000158
 8001dc0:	20000034 	.word	0x20000034
 8001dc4:	20000038 	.word	0x20000038

08001dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dcc:	b672      	cpsid	i
}
 8001dce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd0:	46c0      	nop			@ (mov r8, r8)
 8001dd2:	e7fd      	b.n	8001dd0 <Error_Handler+0x8>

08001dd4 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8001dd4:	b5b0      	push	{r4, r5, r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	0005      	movs	r5, r0
 8001ddc:	000c      	movs	r4, r1
 8001dde:	0010      	movs	r0, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	1dbb      	adds	r3, r7, #6
 8001de4:	1c2a      	adds	r2, r5, #0
 8001de6:	801a      	strh	r2, [r3, #0]
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	1c22      	adds	r2, r4, #0
 8001dec:	801a      	strh	r2, [r3, #0]
 8001dee:	1cbb      	adds	r3, r7, #2
 8001df0:	1c02      	adds	r2, r0, #0
 8001df2:	801a      	strh	r2, [r3, #0]
 8001df4:	003b      	movs	r3, r7
 8001df6:	1c0a      	adds	r2, r1, #0
 8001df8:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001dfa:	4b7c      	ldr	r3, [pc, #496]	@ (8001fec <sevSeg_Init+0x218>)
 8001dfc:	1dba      	adds	r2, r7, #6
 8001dfe:	8812      	ldrh	r2, [r2, #0]
 8001e00:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001e02:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff0 <sevSeg_Init+0x21c>)
 8001e04:	1d3a      	adds	r2, r7, #4
 8001e06:	8812      	ldrh	r2, [r2, #0]
 8001e08:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001e0a:	4b7a      	ldr	r3, [pc, #488]	@ (8001ff4 <sevSeg_Init+0x220>)
 8001e0c:	1cba      	adds	r2, r7, #2
 8001e0e:	8812      	ldrh	r2, [r2, #0]
 8001e10:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001e12:	4b79      	ldr	r3, [pc, #484]	@ (8001ff8 <sevSeg_Init+0x224>)
 8001e14:	003a      	movs	r2, r7
 8001e16:	8812      	ldrh	r2, [r2, #0]
 8001e18:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001e1a:	4a78      	ldr	r2, [pc, #480]	@ (8001ffc <sevSeg_Init+0x228>)
 8001e1c:	2330      	movs	r3, #48	@ 0x30
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8001e24:	4a76      	ldr	r2, [pc, #472]	@ (8002000 <sevSeg_Init+0x22c>)
 8001e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e28:	0010      	movs	r0, r2
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	234c      	movs	r3, #76	@ 0x4c
 8001e2e:	001a      	movs	r2, r3
 8001e30:	f005 f8fc 	bl	800702c <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8001e34:	4b73      	ldr	r3, [pc, #460]	@ (8002004 <sevSeg_Init+0x230>)
 8001e36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e38:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	e00b      	b.n	8001e58 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e46:	18d3      	adds	r3, r2, r3
 8001e48:	6819      	ldr	r1, [r3, #0]
 8001e4a:	4b6f      	ldr	r3, [pc, #444]	@ (8002008 <sevSeg_Init+0x234>)
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	0092      	lsls	r2, r2, #2
 8001e50:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3301      	adds	r3, #1
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	ddf0      	ble.n	8001e40 <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002008 <sevSeg_Init+0x234>)
 8001e60:	6918      	ldr	r0, [r3, #16]
 8001e62:	4b66      	ldr	r3, [pc, #408]	@ (8001ffc <sevSeg_Init+0x228>)
 8001e64:	8819      	ldrh	r1, [r3, #0]
 8001e66:	4b69      	ldr	r3, [pc, #420]	@ (800200c <sevSeg_Init+0x238>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	001a      	movs	r2, r3
 8001e6c:	f000 ff93 	bl	8002d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001e70:	4b65      	ldr	r3, [pc, #404]	@ (8002008 <sevSeg_Init+0x234>)
 8001e72:	6918      	ldr	r0, [r3, #16]
 8001e74:	4b61      	ldr	r3, [pc, #388]	@ (8001ffc <sevSeg_Init+0x228>)
 8001e76:	8819      	ldrh	r1, [r3, #0]
 8001e78:	4b64      	ldr	r3, [pc, #400]	@ (800200c <sevSeg_Init+0x238>)
 8001e7a:	785b      	ldrb	r3, [r3, #1]
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	f000 ff8a 	bl	8002d96 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001e82:	4b61      	ldr	r3, [pc, #388]	@ (8002008 <sevSeg_Init+0x234>)
 8001e84:	6898      	ldr	r0, [r3, #8]
 8001e86:	4b5b      	ldr	r3, [pc, #364]	@ (8001ff4 <sevSeg_Init+0x220>)
 8001e88:	8819      	ldrh	r1, [r3, #0]
 8001e8a:	4b60      	ldr	r3, [pc, #384]	@ (800200c <sevSeg_Init+0x238>)
 8001e8c:	785b      	ldrb	r3, [r3, #1]
 8001e8e:	001a      	movs	r2, r3
 8001e90:	f000 ff81 	bl	8002d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001e94:	4b5c      	ldr	r3, [pc, #368]	@ (8002008 <sevSeg_Init+0x234>)
 8001e96:	6898      	ldr	r0, [r3, #8]
 8001e98:	4b56      	ldr	r3, [pc, #344]	@ (8001ff4 <sevSeg_Init+0x220>)
 8001e9a:	8819      	ldrh	r1, [r3, #0]
 8001e9c:	4b5b      	ldr	r3, [pc, #364]	@ (800200c <sevSeg_Init+0x238>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	f000 ff78 	bl	8002d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001ea6:	4b58      	ldr	r3, [pc, #352]	@ (8002008 <sevSeg_Init+0x234>)
 8001ea8:	68d8      	ldr	r0, [r3, #12]
 8001eaa:	4b53      	ldr	r3, [pc, #332]	@ (8001ff8 <sevSeg_Init+0x224>)
 8001eac:	8819      	ldrh	r1, [r3, #0]
 8001eae:	4b57      	ldr	r3, [pc, #348]	@ (800200c <sevSeg_Init+0x238>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	001a      	movs	r2, r3
 8001eb4:	f000 ff6f 	bl	8002d96 <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8001eb8:	2032      	movs	r0, #50	@ 0x32
 8001eba:	f000 f95f 	bl	800217c <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	4a53      	ldr	r2, [pc, #332]	@ (8002010 <sevSeg_Init+0x23c>)
 8001ec4:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e038      	b.n	8001f3e <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8001ecc:	231b      	movs	r3, #27
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	18b9      	adds	r1, r7, r2
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	188a      	adds	r2, r1, r2
 8001ed8:	7812      	ldrb	r2, [r2, #0]
 8001eda:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	e027      	b.n	8001f32 <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001ee2:	4b49      	ldr	r3, [pc, #292]	@ (8002008 <sevSeg_Init+0x234>)
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	4b41      	ldr	r3, [pc, #260]	@ (8001fec <sevSeg_Init+0x218>)
 8001ee8:	8819      	ldrh	r1, [r3, #0]
 8001eea:	241b      	movs	r4, #27
 8001eec:	193b      	adds	r3, r7, r4
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	4a45      	ldr	r2, [pc, #276]	@ (800200c <sevSeg_Init+0x238>)
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	001a      	movs	r2, r3
 8001efa:	f000 ff4c 	bl	8002d96 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001efe:	4b42      	ldr	r3, [pc, #264]	@ (8002008 <sevSeg_Init+0x234>)
 8001f00:	6858      	ldr	r0, [r3, #4]
 8001f02:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff0 <sevSeg_Init+0x21c>)
 8001f04:	8819      	ldrh	r1, [r3, #0]
 8001f06:	4b41      	ldr	r3, [pc, #260]	@ (800200c <sevSeg_Init+0x238>)
 8001f08:	785b      	ldrb	r3, [r3, #1]
 8001f0a:	001a      	movs	r2, r3
 8001f0c:	f000 ff43 	bl	8002d96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001f10:	4b3d      	ldr	r3, [pc, #244]	@ (8002008 <sevSeg_Init+0x234>)
 8001f12:	6858      	ldr	r0, [r3, #4]
 8001f14:	4b36      	ldr	r3, [pc, #216]	@ (8001ff0 <sevSeg_Init+0x21c>)
 8001f16:	8819      	ldrh	r1, [r3, #0]
 8001f18:	4b3c      	ldr	r3, [pc, #240]	@ (800200c <sevSeg_Init+0x238>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	f000 ff3a 	bl	8002d96 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001f22:	193b      	adds	r3, r7, r4
 8001f24:	193a      	adds	r2, r7, r4
 8001f26:	7812      	ldrb	r2, [r2, #0]
 8001f28:	0852      	lsrs	r2, r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b07      	cmp	r3, #7
 8001f36:	ddd4      	ble.n	8001ee2 <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	ddc3      	ble.n	8001ecc <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001f44:	4b30      	ldr	r3, [pc, #192]	@ (8002008 <sevSeg_Init+0x234>)
 8001f46:	6898      	ldr	r0, [r3, #8]
 8001f48:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff4 <sevSeg_Init+0x220>)
 8001f4a:	8819      	ldrh	r1, [r3, #0]
 8001f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800200c <sevSeg_Init+0x238>)
 8001f4e:	785b      	ldrb	r3, [r3, #1]
 8001f50:	001a      	movs	r2, r3
 8001f52:	f000 ff20 	bl	8002d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001f56:	4b2c      	ldr	r3, [pc, #176]	@ (8002008 <sevSeg_Init+0x234>)
 8001f58:	6898      	ldr	r0, [r3, #8]
 8001f5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ff4 <sevSeg_Init+0x220>)
 8001f5c:	8819      	ldrh	r1, [r3, #0]
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800200c <sevSeg_Init+0x238>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	001a      	movs	r2, r3
 8001f64:	f000 ff17 	bl	8002d96 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8001f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f004 f868 	bl	8006040 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8001f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f72:	0018      	movs	r0, r3
 8001f74:	f004 f818 	bl	8005fa8 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8001f80:	46c0      	nop			@ (mov r8, r8)
 8001f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1ad2      	subs	r2, r2, r3
 8001f8c:	2380      	movs	r3, #128	@ 0x80
 8001f8e:	01db      	lsls	r3, r3, #7
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d3f6      	bcc.n	8001f82 <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8001f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f96:	0018      	movs	r0, r3
 8001f98:	f004 f852 	bl	8006040 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <sevSeg_Init+0x234>)
 8001f9e:	6918      	ldr	r0, [r3, #16]
 8001fa0:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <sevSeg_Init+0x228>)
 8001fa2:	8819      	ldrh	r1, [r3, #0]
 8001fa4:	4b19      	ldr	r3, [pc, #100]	@ (800200c <sevSeg_Init+0x238>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	001a      	movs	r2, r3
 8001faa:	f000 fef4 	bl	8002d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001fae:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <sevSeg_Init+0x234>)
 8001fb0:	6918      	ldr	r0, [r3, #16]
 8001fb2:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <sevSeg_Init+0x228>)
 8001fb4:	8819      	ldrh	r1, [r3, #0]
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <sevSeg_Init+0x238>)
 8001fb8:	785b      	ldrb	r3, [r3, #1]
 8001fba:	001a      	movs	r2, r3
 8001fbc:	f000 feeb 	bl	8002d96 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001fc0:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <sevSeg_Init+0x234>)
 8001fc2:	6898      	ldr	r0, [r3, #8]
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <sevSeg_Init+0x220>)
 8001fc6:	8819      	ldrh	r1, [r3, #0]
 8001fc8:	4b10      	ldr	r3, [pc, #64]	@ (800200c <sevSeg_Init+0x238>)
 8001fca:	785b      	ldrb	r3, [r3, #1]
 8001fcc:	001a      	movs	r2, r3
 8001fce:	f000 fee2 	bl	8002d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002008 <sevSeg_Init+0x234>)
 8001fd4:	6898      	ldr	r0, [r3, #8]
 8001fd6:	4b07      	ldr	r3, [pc, #28]	@ (8001ff4 <sevSeg_Init+0x220>)
 8001fd8:	8819      	ldrh	r1, [r3, #0]
 8001fda:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <sevSeg_Init+0x238>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	001a      	movs	r2, r3
 8001fe0:	f000 fed9 	bl	8002d96 <HAL_GPIO_WritePin>

}
 8001fe4:	46c0      	nop			@ (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b008      	add	sp, #32
 8001fea:	bdb0      	pop	{r4, r5, r7, pc}
 8001fec:	200002e4 	.word	0x200002e4
 8001ff0:	200002e6 	.word	0x200002e6
 8001ff4:	200002e8 	.word	0x200002e8
 8001ff8:	200002ea 	.word	0x200002ea
 8001ffc:	200002ec 	.word	0x200002ec
 8002000:	200002f0 	.word	0x200002f0
 8002004:	2000033c 	.word	0x2000033c
 8002008:	20000050 	.word	0x20000050
 800200c:	20000064 	.word	0x20000064
 8002010:	471d3700 	.word	0x471d3700

08002014 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime, uint8_t userAlarmEnable) {
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	000a      	movs	r2, r1
 800201e:	1cfb      	adds	r3, r7, #3
 8002020:	701a      	strb	r2, [r3, #0]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	210a      	movs	r1, #10
 8002028:	0018      	movs	r0, r3
 800202a:	f7fe f86b 	bl	8000104 <__udivsi3>
 800202e:	0003      	movs	r3, r0
 8002030:	b2da      	uxtb	r2, r3
 8002032:	2408      	movs	r4, #8
 8002034:	193b      	adds	r3, r7, r4
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	210a      	movs	r1, #10
 800203e:	0018      	movs	r0, r3
 8002040:	f7fe f8e6 	bl	8000210 <__aeabi_uidivmod>
 8002044:	000b      	movs	r3, r1
 8002046:	b2da      	uxtb	r2, r3
 8002048:	193b      	adds	r3, r7, r4
 800204a:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002050:	210a      	movs	r1, #10
 8002052:	0018      	movs	r0, r3
 8002054:	f7fe f856 	bl	8000104 <__udivsi3>
 8002058:	0003      	movs	r3, r0
 800205a:	b2da      	uxtb	r2, r3
 800205c:	193b      	adds	r3, r7, r4
 800205e:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002064:	210a      	movs	r1, #10
 8002066:	0018      	movs	r0, r3
 8002068:	f7fe f8d2 	bl	8000210 <__aeabi_uidivmod>
 800206c:	000b      	movs	r3, r1
 800206e:	b2da      	uxtb	r2, r3
 8002070:	193b      	adds	r3, r7, r4
 8002072:	70da      	strb	r2, [r3, #3]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 3; i >= 0; i--) {
 8002074:	2303      	movs	r3, #3
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	e05b      	b.n	8002132 <sevSeg_updateDigits+0x11e>

		sendByte = dispDigits[sendTime[i]];
 800207a:	2308      	movs	r3, #8
 800207c:	18fa      	adds	r2, r7, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	18d3      	adds	r3, r2, r3
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	0019      	movs	r1, r3
 8002086:	2017      	movs	r0, #23
 8002088:	183b      	adds	r3, r7, r0
 800208a:	4a36      	ldr	r2, [pc, #216]	@ (8002164 <sevSeg_updateDigits+0x150>)
 800208c:	5c52      	ldrb	r2, [r2, r1]
 800208e:	701a      	strb	r2, [r3, #0]

		// If tenth's place of hour and zero, disable this segment
		if( (i == 0) && (sendByte == dispDigits[0])) {
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d107      	bne.n	80020a6 <sevSeg_updateDigits+0x92>
 8002096:	2242      	movs	r2, #66	@ 0x42
 8002098:	183b      	adds	r3, r7, r0
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4293      	cmp	r3, r2
 800209e:	d102      	bne.n	80020a6 <sevSeg_updateDigits+0x92>
			sendByte = 0xFF;
 80020a0:	183b      	adds	r3, r7, r0
 80020a2:	22ff      	movs	r2, #255	@ 0xff
 80020a4:	701a      	strb	r2, [r3, #0]
		}

		// If one's place of hour, set decimal point based on AM/PM.
		// OR
		// If one's place of minute, set decimal place based on user alarm enabled
		if( ((i == 1) && (updateTime->TimeFormat == RTC_HOURFORMAT12_PM)) ||
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d103      	bne.n	80020b4 <sevSeg_updateDigits+0xa0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	78db      	ldrb	r3, [r3, #3]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d006      	beq.n	80020c2 <sevSeg_updateDigits+0xae>
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d10a      	bne.n	80020d0 <sevSeg_updateDigits+0xbc>
			((i == 3) && userAlarmEnable)	) {
 80020ba:	1cfb      	adds	r3, r7, #3
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d006      	beq.n	80020d0 <sevSeg_updateDigits+0xbc>
			sendByte = (sendByte & 0b11111101);
 80020c2:	2217      	movs	r2, #23
 80020c4:	18bb      	adds	r3, r7, r2
 80020c6:	18ba      	adds	r2, r7, r2
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	2102      	movs	r1, #2
 80020cc:	438a      	bics	r2, r1
 80020ce:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e027      	b.n	8002126 <sevSeg_updateDigits+0x112>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[(sendByte & 1)]);
 80020d6:	4b24      	ldr	r3, [pc, #144]	@ (8002168 <sevSeg_updateDigits+0x154>)
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	4b24      	ldr	r3, [pc, #144]	@ (800216c <sevSeg_updateDigits+0x158>)
 80020dc:	8819      	ldrh	r1, [r3, #0]
 80020de:	2417      	movs	r4, #23
 80020e0:	193b      	adds	r3, r7, r4
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2201      	movs	r2, #1
 80020e6:	4013      	ands	r3, r2
 80020e8:	4a21      	ldr	r2, [pc, #132]	@ (8002170 <sevSeg_updateDigits+0x15c>)
 80020ea:	5cd3      	ldrb	r3, [r2, r3]
 80020ec:	001a      	movs	r2, r3
 80020ee:	f000 fe52 	bl	8002d96 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 80020f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002168 <sevSeg_updateDigits+0x154>)
 80020f4:	6858      	ldr	r0, [r3, #4]
 80020f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002174 <sevSeg_updateDigits+0x160>)
 80020f8:	8819      	ldrh	r1, [r3, #0]
 80020fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <sevSeg_updateDigits+0x15c>)
 80020fc:	785b      	ldrb	r3, [r3, #1]
 80020fe:	001a      	movs	r2, r3
 8002100:	f000 fe49 	bl	8002d96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002104:	4b18      	ldr	r3, [pc, #96]	@ (8002168 <sevSeg_updateDigits+0x154>)
 8002106:	6858      	ldr	r0, [r3, #4]
 8002108:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <sevSeg_updateDigits+0x160>)
 800210a:	8819      	ldrh	r1, [r3, #0]
 800210c:	4b18      	ldr	r3, [pc, #96]	@ (8002170 <sevSeg_updateDigits+0x15c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	001a      	movs	r2, r3
 8002112:	f000 fe40 	bl	8002d96 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8002116:	193b      	adds	r3, r7, r4
 8002118:	193a      	adds	r2, r7, r4
 800211a:	7812      	ldrb	r2, [r2, #0]
 800211c:	0852      	lsrs	r2, r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3301      	adds	r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b07      	cmp	r3, #7
 800212a:	ddd4      	ble.n	80020d6 <sevSeg_updateDigits+0xc2>
	for(int i = 3; i >= 0; i--) {
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	3b01      	subs	r3, #1
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	daa0      	bge.n	800207a <sevSeg_updateDigits+0x66>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002138:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <sevSeg_updateDigits+0x154>)
 800213a:	6898      	ldr	r0, [r3, #8]
 800213c:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <sevSeg_updateDigits+0x164>)
 800213e:	8819      	ldrh	r1, [r3, #0]
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <sevSeg_updateDigits+0x15c>)
 8002142:	785b      	ldrb	r3, [r3, #1]
 8002144:	001a      	movs	r2, r3
 8002146:	f000 fe26 	bl	8002d96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800214a:	4b07      	ldr	r3, [pc, #28]	@ (8002168 <sevSeg_updateDigits+0x154>)
 800214c:	6898      	ldr	r0, [r3, #8]
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <sevSeg_updateDigits+0x164>)
 8002150:	8819      	ldrh	r1, [r3, #0]
 8002152:	4b07      	ldr	r3, [pc, #28]	@ (8002170 <sevSeg_updateDigits+0x15c>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	001a      	movs	r2, r3
 8002158:	f000 fe1d 	bl	8002d96 <HAL_GPIO_WritePin>

	return;
 800215c:	46c0      	nop			@ (mov r8, r8)

}
 800215e:	46bd      	mov	sp, r7
 8002160:	b007      	add	sp, #28
 8002162:	bd90      	pop	{r4, r7, pc}
 8002164:	08007080 	.word	0x08007080
 8002168:	20000050 	.word	0x20000050
 800216c:	200002e4 	.word	0x200002e4
 8002170:	20000064 	.word	0x20000064
 8002174:	200002e6 	.word	0x200002e6
 8002178:	200002e8 	.word	0x200002e8

0800217c <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	0002      	movs	r2, r0
 8002184:	1dbb      	adds	r3, r7, #6
 8002186:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8002188:	4b20      	ldr	r3, [pc, #128]	@ (800220c <sevSeg_setIntensity+0x90>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d105      	bne.n	800219c <sevSeg_setIntensity+0x20>
 8002190:	4b1f      	ldr	r3, [pc, #124]	@ (8002210 <sevSeg_setIntensity+0x94>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	1dba      	adds	r2, r7, #6
 8002196:	8812      	ldrh	r2, [r2, #0]
 8002198:	635a      	str	r2, [r3, #52]	@ 0x34
 800219a:	e02c      	b.n	80021f6 <sevSeg_setIntensity+0x7a>
 800219c:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <sevSeg_setIntensity+0x90>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d105      	bne.n	80021b0 <sevSeg_setIntensity+0x34>
 80021a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <sevSeg_setIntensity+0x94>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	1dbb      	adds	r3, r7, #6
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	6393      	str	r3, [r2, #56]	@ 0x38
 80021ae:	e022      	b.n	80021f6 <sevSeg_setIntensity+0x7a>
 80021b0:	4b16      	ldr	r3, [pc, #88]	@ (800220c <sevSeg_setIntensity+0x90>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d105      	bne.n	80021c4 <sevSeg_setIntensity+0x48>
 80021b8:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <sevSeg_setIntensity+0x94>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	1dbb      	adds	r3, r7, #6
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80021c2:	e018      	b.n	80021f6 <sevSeg_setIntensity+0x7a>
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <sevSeg_setIntensity+0x90>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b0c      	cmp	r3, #12
 80021ca:	d105      	bne.n	80021d8 <sevSeg_setIntensity+0x5c>
 80021cc:	4b10      	ldr	r3, [pc, #64]	@ (8002210 <sevSeg_setIntensity+0x94>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	1dbb      	adds	r3, r7, #6
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d6:	e00e      	b.n	80021f6 <sevSeg_setIntensity+0x7a>
 80021d8:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <sevSeg_setIntensity+0x90>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b10      	cmp	r3, #16
 80021de:	d105      	bne.n	80021ec <sevSeg_setIntensity+0x70>
 80021e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <sevSeg_setIntensity+0x94>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	1dbb      	adds	r3, r7, #6
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ea:	e004      	b.n	80021f6 <sevSeg_setIntensity+0x7a>
 80021ec:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <sevSeg_setIntensity+0x94>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	1dbb      	adds	r3, r7, #6
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 80021f6:	4b05      	ldr	r3, [pc, #20]	@ (800220c <sevSeg_setIntensity+0x90>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <sevSeg_setIntensity+0x94>)
 80021fc:	0011      	movs	r1, r2
 80021fe:	0018      	movs	r0, r3
 8002200:	f004 f81e 	bl	8006240 <HAL_TIM_PWM_Start>

}
 8002204:	46c0      	nop			@ (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	b002      	add	sp, #8
 800220a:	bd80      	pop	{r7, pc}
 800220c:	2000033c 	.word	0x2000033c
 8002210:	200002f0 	.word	0x200002f0

08002214 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221a:	4b13      	ldr	r3, [pc, #76]	@ (8002268 <HAL_MspInit+0x54>)
 800221c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800221e:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <HAL_MspInit+0x54>)
 8002220:	2101      	movs	r1, #1
 8002222:	430a      	orrs	r2, r1
 8002224:	641a      	str	r2, [r3, #64]	@ 0x40
 8002226:	4b10      	ldr	r3, [pc, #64]	@ (8002268 <HAL_MspInit+0x54>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	2201      	movs	r2, #1
 800222c:	4013      	ands	r3, r2
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	4b0d      	ldr	r3, [pc, #52]	@ (8002268 <HAL_MspInit+0x54>)
 8002234:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002236:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <HAL_MspInit+0x54>)
 8002238:	2180      	movs	r1, #128	@ 0x80
 800223a:	0549      	lsls	r1, r1, #21
 800223c:	430a      	orrs	r2, r1
 800223e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002240:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <HAL_MspInit+0x54>)
 8002242:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	055b      	lsls	r3, r3, #21
 8002248:	4013      	ands	r3, r2
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	2004      	movs	r0, #4
 8002254:	f000 fbec 	bl	8002a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002258:	2004      	movs	r0, #4
 800225a:	f000 fbfe 	bl	8002a5a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	46bd      	mov	sp, r7
 8002262:	b002      	add	sp, #8
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			@ (mov r8, r8)
 8002268:	40021000 	.word	0x40021000

0800226c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800226c:	b590      	push	{r4, r7, lr}
 800226e:	b095      	sub	sp, #84	@ 0x54
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	233c      	movs	r3, #60	@ 0x3c
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	0018      	movs	r0, r3
 800227a:	2314      	movs	r3, #20
 800227c:	001a      	movs	r2, r3
 800227e:	2100      	movs	r1, #0
 8002280:	f004 fea8 	bl	8006fd4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002284:	2414      	movs	r4, #20
 8002286:	193b      	adds	r3, r7, r4
 8002288:	0018      	movs	r0, r3
 800228a:	2328      	movs	r3, #40	@ 0x28
 800228c:	001a      	movs	r2, r3
 800228e:	2100      	movs	r1, #0
 8002290:	f004 fea0 	bl	8006fd4 <memset>
  if(hi2c->Instance==I2C1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a22      	ldr	r2, [pc, #136]	@ (8002324 <HAL_I2C_MspInit+0xb8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d13d      	bne.n	800231a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800229e:	193b      	adds	r3, r7, r4
 80022a0:	2220      	movs	r2, #32
 80022a2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80022a4:	193b      	adds	r3, r7, r4
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022aa:	193b      	adds	r3, r7, r4
 80022ac:	0018      	movs	r0, r3
 80022ae:	f002 fa3b 	bl	8004728 <HAL_RCCEx_PeriphCLKConfig>
 80022b2:	1e03      	subs	r3, r0, #0
 80022b4:	d001      	beq.n	80022ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80022b6:	f7ff fd87 	bl	8001dc8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <HAL_I2C_MspInit+0xbc>)
 80022bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022be:	4b1a      	ldr	r3, [pc, #104]	@ (8002328 <HAL_I2C_MspInit+0xbc>)
 80022c0:	2102      	movs	r1, #2
 80022c2:	430a      	orrs	r2, r1
 80022c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80022c6:	4b18      	ldr	r3, [pc, #96]	@ (8002328 <HAL_I2C_MspInit+0xbc>)
 80022c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ca:	2202      	movs	r2, #2
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022d2:	213c      	movs	r1, #60	@ 0x3c
 80022d4:	187b      	adds	r3, r7, r1
 80022d6:	22c0      	movs	r2, #192	@ 0xc0
 80022d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022da:	187b      	adds	r3, r7, r1
 80022dc:	2212      	movs	r2, #18
 80022de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	187b      	adds	r3, r7, r1
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	187b      	adds	r3, r7, r1
 80022e8:	2200      	movs	r2, #0
 80022ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80022ec:	187b      	adds	r3, r7, r1
 80022ee:	2206      	movs	r2, #6
 80022f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f2:	187b      	adds	r3, r7, r1
 80022f4:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <HAL_I2C_MspInit+0xc0>)
 80022f6:	0019      	movs	r1, r3
 80022f8:	0010      	movs	r0, r2
 80022fa:	f000 fbcb 	bl	8002a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <HAL_I2C_MspInit+0xbc>)
 8002300:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002302:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <HAL_I2C_MspInit+0xbc>)
 8002304:	2180      	movs	r1, #128	@ 0x80
 8002306:	0389      	lsls	r1, r1, #14
 8002308:	430a      	orrs	r2, r1
 800230a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800230c:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_I2C_MspInit+0xbc>)
 800230e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002310:	2380      	movs	r3, #128	@ 0x80
 8002312:	039b      	lsls	r3, r3, #14
 8002314:	4013      	ands	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b015      	add	sp, #84	@ 0x54
 8002320:	bd90      	pop	{r4, r7, pc}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	40005400 	.word	0x40005400
 8002328:	40021000 	.word	0x40021000
 800232c:	50000400 	.word	0x50000400

08002330 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b095      	sub	sp, #84	@ 0x54
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	233c      	movs	r3, #60	@ 0x3c
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	0018      	movs	r0, r3
 800233e:	2314      	movs	r3, #20
 8002340:	001a      	movs	r2, r3
 8002342:	2100      	movs	r1, #0
 8002344:	f004 fe46 	bl	8006fd4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002348:	2414      	movs	r4, #20
 800234a:	193b      	adds	r3, r7, r4
 800234c:	0018      	movs	r0, r3
 800234e:	2328      	movs	r3, #40	@ 0x28
 8002350:	001a      	movs	r2, r3
 8002352:	2100      	movs	r1, #0
 8002354:	f004 fe3e 	bl	8006fd4 <memset>
  if(hi2s->Instance==SPI1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a34      	ldr	r2, [pc, #208]	@ (8002430 <HAL_I2S_MspInit+0x100>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d161      	bne.n	8002426 <HAL_I2S_MspInit+0xf6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8002362:	193b      	adds	r3, r7, r4
 8002364:	2280      	movs	r2, #128	@ 0x80
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 800236a:	193b      	adds	r3, r7, r4
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002370:	193b      	adds	r3, r7, r4
 8002372:	0018      	movs	r0, r3
 8002374:	f002 f9d8 	bl	8004728 <HAL_RCCEx_PeriphCLKConfig>
 8002378:	1e03      	subs	r3, r0, #0
 800237a:	d001      	beq.n	8002380 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800237c:	f7ff fd24 	bl	8001dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002380:	4b2c      	ldr	r3, [pc, #176]	@ (8002434 <HAL_I2S_MspInit+0x104>)
 8002382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002384:	4b2b      	ldr	r3, [pc, #172]	@ (8002434 <HAL_I2S_MspInit+0x104>)
 8002386:	2180      	movs	r1, #128	@ 0x80
 8002388:	0149      	lsls	r1, r1, #5
 800238a:	430a      	orrs	r2, r1
 800238c:	641a      	str	r2, [r3, #64]	@ 0x40
 800238e:	4b29      	ldr	r3, [pc, #164]	@ (8002434 <HAL_I2S_MspInit+0x104>)
 8002390:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002392:	2380      	movs	r3, #128	@ 0x80
 8002394:	015b      	lsls	r3, r3, #5
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239c:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <HAL_I2S_MspInit+0x104>)
 800239e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023a0:	4b24      	ldr	r3, [pc, #144]	@ (8002434 <HAL_I2S_MspInit+0x104>)
 80023a2:	2101      	movs	r1, #1
 80023a4:	430a      	orrs	r2, r1
 80023a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80023a8:	4b22      	ldr	r3, [pc, #136]	@ (8002434 <HAL_I2S_MspInit+0x104>)
 80023aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ac:	2201      	movs	r2, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002434 <HAL_I2S_MspInit+0x104>)
 80023b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002434 <HAL_I2S_MspInit+0x104>)
 80023ba:	2102      	movs	r1, #2
 80023bc:	430a      	orrs	r2, r1
 80023be:	635a      	str	r2, [r3, #52]	@ 0x34
 80023c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002434 <HAL_I2S_MspInit+0x104>)
 80023c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c4:	2202      	movs	r2, #2
 80023c6:	4013      	ands	r3, r2
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PB0     ------> I2S1_WS
    PA12 [PA10]     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 80023cc:	243c      	movs	r4, #60	@ 0x3c
 80023ce:	193b      	adds	r3, r7, r4
 80023d0:	4a19      	ldr	r2, [pc, #100]	@ (8002438 <HAL_I2S_MspInit+0x108>)
 80023d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d4:	193b      	adds	r3, r7, r4
 80023d6:	2202      	movs	r2, #2
 80023d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	193b      	adds	r3, r7, r4
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	193b      	adds	r3, r7, r4
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80023e6:	193b      	adds	r3, r7, r4
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ec:	193a      	adds	r2, r7, r4
 80023ee:	23a0      	movs	r3, #160	@ 0xa0
 80023f0:	05db      	lsls	r3, r3, #23
 80023f2:	0011      	movs	r1, r2
 80023f4:	0018      	movs	r0, r3
 80023f6:	f000 fb4d 	bl	8002a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023fa:	0021      	movs	r1, r4
 80023fc:	187b      	adds	r3, r7, r1
 80023fe:	2201      	movs	r2, #1
 8002400:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	187b      	adds	r3, r7, r1
 8002404:	2202      	movs	r2, #2
 8002406:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	187b      	adds	r3, r7, r1
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240e:	187b      	adds	r3, r7, r1
 8002410:	2200      	movs	r2, #0
 8002412:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002414:	187b      	adds	r3, r7, r1
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241a:	187b      	adds	r3, r7, r1
 800241c:	4a07      	ldr	r2, [pc, #28]	@ (800243c <HAL_I2S_MspInit+0x10c>)
 800241e:	0019      	movs	r1, r3
 8002420:	0010      	movs	r0, r2
 8002422:	f000 fb37 	bl	8002a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002426:	46c0      	nop			@ (mov r8, r8)
 8002428:	46bd      	mov	sp, r7
 800242a:	b015      	add	sp, #84	@ 0x54
 800242c:	bd90      	pop	{r4, r7, pc}
 800242e:	46c0      	nop			@ (mov r8, r8)
 8002430:	40013000 	.word	0x40013000
 8002434:	40021000 	.word	0x40021000
 8002438:	00001002 	.word	0x00001002
 800243c:	50000400 	.word	0x50000400

08002440 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b08f      	sub	sp, #60	@ 0x3c
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002448:	2410      	movs	r4, #16
 800244a:	193b      	adds	r3, r7, r4
 800244c:	0018      	movs	r0, r3
 800244e:	2328      	movs	r3, #40	@ 0x28
 8002450:	001a      	movs	r2, r3
 8002452:	2100      	movs	r1, #0
 8002454:	f004 fdbe 	bl	8006fd4 <memset>
  if(hrtc->Instance==RTC)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a19      	ldr	r2, [pc, #100]	@ (80024c4 <HAL_RTC_MspInit+0x84>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d12c      	bne.n	80024bc <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002462:	193b      	adds	r3, r7, r4
 8002464:	2280      	movs	r2, #128	@ 0x80
 8002466:	0292      	lsls	r2, r2, #10
 8002468:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800246a:	193b      	adds	r3, r7, r4
 800246c:	2280      	movs	r2, #128	@ 0x80
 800246e:	0052      	lsls	r2, r2, #1
 8002470:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002472:	193b      	adds	r3, r7, r4
 8002474:	0018      	movs	r0, r3
 8002476:	f002 f957 	bl	8004728 <HAL_RCCEx_PeriphCLKConfig>
 800247a:	1e03      	subs	r3, r0, #0
 800247c:	d001      	beq.n	8002482 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800247e:	f7ff fca3 	bl	8001dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002482:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <HAL_RTC_MspInit+0x88>)
 8002484:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002486:	4b10      	ldr	r3, [pc, #64]	@ (80024c8 <HAL_RTC_MspInit+0x88>)
 8002488:	2180      	movs	r1, #128	@ 0x80
 800248a:	0209      	lsls	r1, r1, #8
 800248c:	430a      	orrs	r2, r1
 800248e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002490:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <HAL_RTC_MspInit+0x88>)
 8002492:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002494:	4b0c      	ldr	r3, [pc, #48]	@ (80024c8 <HAL_RTC_MspInit+0x88>)
 8002496:	2180      	movs	r1, #128	@ 0x80
 8002498:	00c9      	lsls	r1, r1, #3
 800249a:	430a      	orrs	r2, r1
 800249c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800249e:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <HAL_RTC_MspInit+0x88>)
 80024a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024a2:	2380      	movs	r3, #128	@ 0x80
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4013      	ands	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2100      	movs	r1, #0
 80024b0:	2002      	movs	r0, #2
 80024b2:	f000 fabd 	bl	8002a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80024b6:	2002      	movs	r0, #2
 80024b8:	f000 facf 	bl	8002a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80024bc:	46c0      	nop			@ (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	b00f      	add	sp, #60	@ 0x3c
 80024c2:	bd90      	pop	{r4, r7, pc}
 80024c4:	40002800 	.word	0x40002800
 80024c8:	40021000 	.word	0x40021000

080024cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024cc:	b590      	push	{r4, r7, lr}
 80024ce:	b08b      	sub	sp, #44	@ 0x2c
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	2414      	movs	r4, #20
 80024d6:	193b      	adds	r3, r7, r4
 80024d8:	0018      	movs	r0, r3
 80024da:	2314      	movs	r3, #20
 80024dc:	001a      	movs	r2, r3
 80024de:	2100      	movs	r1, #0
 80024e0:	f004 fd78 	bl	8006fd4 <memset>
  if(hspi->Instance==SPI2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a26      	ldr	r2, [pc, #152]	@ (8002584 <HAL_SPI_MspInit+0xb8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d146      	bne.n	800257c <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024ee:	4b26      	ldr	r3, [pc, #152]	@ (8002588 <HAL_SPI_MspInit+0xbc>)
 80024f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024f2:	4b25      	ldr	r3, [pc, #148]	@ (8002588 <HAL_SPI_MspInit+0xbc>)
 80024f4:	2180      	movs	r1, #128	@ 0x80
 80024f6:	01c9      	lsls	r1, r1, #7
 80024f8:	430a      	orrs	r2, r1
 80024fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024fc:	4b22      	ldr	r3, [pc, #136]	@ (8002588 <HAL_SPI_MspInit+0xbc>)
 80024fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002500:	2380      	movs	r3, #128	@ 0x80
 8002502:	01db      	lsls	r3, r3, #7
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250a:	4b1f      	ldr	r3, [pc, #124]	@ (8002588 <HAL_SPI_MspInit+0xbc>)
 800250c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800250e:	4b1e      	ldr	r3, [pc, #120]	@ (8002588 <HAL_SPI_MspInit+0xbc>)
 8002510:	2101      	movs	r1, #1
 8002512:	430a      	orrs	r2, r1
 8002514:	635a      	str	r2, [r3, #52]	@ 0x34
 8002516:	4b1c      	ldr	r3, [pc, #112]	@ (8002588 <HAL_SPI_MspInit+0xbc>)
 8002518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800251a:	2201      	movs	r2, #1
 800251c:	4013      	ands	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002522:	193b      	adds	r3, r7, r4
 8002524:	2209      	movs	r2, #9
 8002526:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	193b      	adds	r3, r7, r4
 800252a:	2202      	movs	r2, #2
 800252c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	193b      	adds	r3, r7, r4
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	193b      	adds	r3, r7, r4
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800253a:	193b      	adds	r3, r7, r4
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	193a      	adds	r2, r7, r4
 8002542:	23a0      	movs	r3, #160	@ 0xa0
 8002544:	05db      	lsls	r3, r3, #23
 8002546:	0011      	movs	r1, r2
 8002548:	0018      	movs	r0, r3
 800254a:	f000 faa3 	bl	8002a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800254e:	0021      	movs	r1, r4
 8002550:	187b      	adds	r3, r7, r1
 8002552:	2210      	movs	r2, #16
 8002554:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	187b      	adds	r3, r7, r1
 8002558:	2202      	movs	r2, #2
 800255a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	187b      	adds	r3, r7, r1
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	187b      	adds	r3, r7, r1
 8002564:	2200      	movs	r2, #0
 8002566:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002568:	187b      	adds	r3, r7, r1
 800256a:	2201      	movs	r2, #1
 800256c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256e:	187a      	adds	r2, r7, r1
 8002570:	23a0      	movs	r3, #160	@ 0xa0
 8002572:	05db      	lsls	r3, r3, #23
 8002574:	0011      	movs	r1, r2
 8002576:	0018      	movs	r0, r3
 8002578:	f000 fa8c 	bl	8002a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800257c:	46c0      	nop			@ (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	b00b      	add	sp, #44	@ 0x2c
 8002582:	bd90      	pop	{r4, r7, pc}
 8002584:	40003800 	.word	0x40003800
 8002588:	40021000 	.word	0x40021000

0800258c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2380      	movs	r3, #128	@ 0x80
 800259a:	05db      	lsls	r3, r3, #23
 800259c:	429a      	cmp	r2, r3
 800259e:	d10b      	bne.n	80025b8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025a0:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <HAL_TIM_PWM_MspInit+0x34>)
 80025a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025a4:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_TIM_PWM_MspInit+0x34>)
 80025a6:	2101      	movs	r1, #1
 80025a8:	430a      	orrs	r2, r1
 80025aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025ac:	4b04      	ldr	r3, [pc, #16]	@ (80025c0 <HAL_TIM_PWM_MspInit+0x34>)
 80025ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b0:	2201      	movs	r2, #1
 80025b2:	4013      	ands	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025b8:	46c0      	nop			@ (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b004      	add	sp, #16
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000

080025c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a18      	ldr	r2, [pc, #96]	@ (8002634 <HAL_TIM_Base_MspInit+0x70>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10e      	bne.n	80025f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80025d6:	4b18      	ldr	r3, [pc, #96]	@ (8002638 <HAL_TIM_Base_MspInit+0x74>)
 80025d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025da:	4b17      	ldr	r3, [pc, #92]	@ (8002638 <HAL_TIM_Base_MspInit+0x74>)
 80025dc:	2180      	movs	r1, #128	@ 0x80
 80025de:	0209      	lsls	r1, r1, #8
 80025e0:	430a      	orrs	r2, r1
 80025e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80025e4:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <HAL_TIM_Base_MspInit+0x74>)
 80025e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	4013      	ands	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80025f2:	e01a      	b.n	800262a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a10      	ldr	r2, [pc, #64]	@ (800263c <HAL_TIM_Base_MspInit+0x78>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d115      	bne.n	800262a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80025fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002638 <HAL_TIM_Base_MspInit+0x74>)
 8002600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002602:	4b0d      	ldr	r3, [pc, #52]	@ (8002638 <HAL_TIM_Base_MspInit+0x74>)
 8002604:	2180      	movs	r1, #128	@ 0x80
 8002606:	0289      	lsls	r1, r1, #10
 8002608:	430a      	orrs	r2, r1
 800260a:	641a      	str	r2, [r3, #64]	@ 0x40
 800260c:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <HAL_TIM_Base_MspInit+0x74>)
 800260e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002610:	2380      	movs	r3, #128	@ 0x80
 8002612:	029b      	lsls	r3, r3, #10
 8002614:	4013      	ands	r3, r2
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	2015      	movs	r0, #21
 8002620:	f000 fa06 	bl	8002a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002624:	2015      	movs	r0, #21
 8002626:	f000 fa18 	bl	8002a5a <HAL_NVIC_EnableIRQ>
}
 800262a:	46c0      	nop			@ (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	b004      	add	sp, #16
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			@ (mov r8, r8)
 8002634:	40002000 	.word	0x40002000
 8002638:	40021000 	.word	0x40021000
 800263c:	40014400 	.word	0x40014400

08002640 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b089      	sub	sp, #36	@ 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	240c      	movs	r4, #12
 800264a:	193b      	adds	r3, r7, r4
 800264c:	0018      	movs	r0, r3
 800264e:	2314      	movs	r3, #20
 8002650:	001a      	movs	r2, r3
 8002652:	2100      	movs	r1, #0
 8002654:	f004 fcbe 	bl	8006fd4 <memset>
  if(htim->Instance==TIM2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	2380      	movs	r3, #128	@ 0x80
 800265e:	05db      	lsls	r3, r3, #23
 8002660:	429a      	cmp	r2, r3
 8002662:	d121      	bne.n	80026a8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002664:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <HAL_TIM_MspPostInit+0x70>)
 8002666:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002668:	4b11      	ldr	r3, [pc, #68]	@ (80026b0 <HAL_TIM_MspPostInit+0x70>)
 800266a:	2104      	movs	r1, #4
 800266c:	430a      	orrs	r2, r1
 800266e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002670:	4b0f      	ldr	r3, [pc, #60]	@ (80026b0 <HAL_TIM_MspPostInit+0x70>)
 8002672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002674:	2204      	movs	r2, #4
 8002676:	4013      	ands	r3, r2
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_SHIFT_nOE_Pin;
 800267c:	0021      	movs	r1, r4
 800267e:	187b      	adds	r3, r7, r1
 8002680:	2240      	movs	r2, #64	@ 0x40
 8002682:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	187b      	adds	r3, r7, r1
 8002686:	2202      	movs	r2, #2
 8002688:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	187b      	adds	r3, r7, r1
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	187b      	adds	r3, r7, r1
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002696:	187b      	adds	r3, r7, r1
 8002698:	2202      	movs	r2, #2
 800269a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_SHIFT_nOE_GPIO_Port, &GPIO_InitStruct);
 800269c:	187b      	adds	r3, r7, r1
 800269e:	4a05      	ldr	r2, [pc, #20]	@ (80026b4 <HAL_TIM_MspPostInit+0x74>)
 80026a0:	0019      	movs	r1, r3
 80026a2:	0010      	movs	r0, r2
 80026a4:	f000 f9f6 	bl	8002a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80026a8:	46c0      	nop			@ (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b009      	add	sp, #36	@ 0x24
 80026ae:	bd90      	pop	{r4, r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	50000800 	.word	0x50000800

080026b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026bc:	46c0      	nop			@ (mov r8, r8)
 80026be:	e7fd      	b.n	80026bc <NMI_Handler+0x4>

080026c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026c4:	46c0      	nop			@ (mov r8, r8)
 80026c6:	e7fd      	b.n	80026c4 <HardFault_Handler+0x4>

080026c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80026cc:	46c0      	nop			@ (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e0:	f000 f8de 	bl	80028a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026e4:	46c0      	nop			@ (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80026f0:	4b03      	ldr	r3, [pc, #12]	@ (8002700 <RTC_TAMP_IRQHandler+0x14>)
 80026f2:	0018      	movs	r0, r3
 80026f4:	f003 f92e 	bl	8005954 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80026f8:	46c0      	nop			@ (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			@ (mov r8, r8)
 8002700:	20000158 	.word	0x20000158

08002704 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002708:	46c0      	nop			@ (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_EXTI_Pin);
 8002712:	2001      	movs	r0, #1
 8002714:	f000 fb78 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_EXTI_Pin);
 8002718:	2002      	movs	r0, #2
 800271a:	f000 fb75 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800271e:	46c0      	nop			@ (mov r8, r8)
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_EXTI_Pin);
 8002728:	2004      	movs	r0, #4
 800272a:	f000 fb6d 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_EXTI_Pin);
 800272e:	2008      	movs	r0, #8
 8002730:	f000 fb6a 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002734:	46c0      	nop			@ (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_SWITCH_EXTI_Pin);
 800273e:	2010      	movs	r0, #16
 8002740:	f000 fb62 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_EXTI_Pin);
 8002744:	2380      	movs	r3, #128	@ 0x80
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	0018      	movs	r0, r3
 800274a:	f000 fb5d 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002758:	4b03      	ldr	r3, [pc, #12]	@ (8002768 <TIM16_IRQHandler+0x14>)
 800275a:	0018      	movs	r0, r3
 800275c:	f003 fe4e 	bl	80063fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002760:	46c0      	nop			@ (mov r8, r8)
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			@ (mov r8, r8)
 8002768:	20000280 	.word	0x20000280

0800276c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002770:	46c0      	nop			@ (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002778:	480d      	ldr	r0, [pc, #52]	@ (80027b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800277a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800277c:	f7ff fff6 	bl	800276c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002780:	480c      	ldr	r0, [pc, #48]	@ (80027b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002782:	490d      	ldr	r1, [pc, #52]	@ (80027b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002784:	4a0d      	ldr	r2, [pc, #52]	@ (80027bc <LoopForever+0xe>)
  movs r3, #0
 8002786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002788:	e002      	b.n	8002790 <LoopCopyDataInit>

0800278a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800278a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800278c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800278e:	3304      	adds	r3, #4

08002790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002794:	d3f9      	bcc.n	800278a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002796:	4a0a      	ldr	r2, [pc, #40]	@ (80027c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002798:	4c0a      	ldr	r4, [pc, #40]	@ (80027c4 <LoopForever+0x16>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800279c:	e001      	b.n	80027a2 <LoopFillZerobss>

0800279e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800279e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a0:	3204      	adds	r2, #4

080027a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a4:	d3fb      	bcc.n	800279e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027a6:	f004 fc1d 	bl	8006fe4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80027aa:	f7fe f967 	bl	8000a7c <main>

080027ae <LoopForever>:

LoopForever:
  b LoopForever
 80027ae:	e7fe      	b.n	80027ae <LoopForever>
  ldr   r0, =_estack
 80027b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80027b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80027bc:	08007148 	.word	0x08007148
  ldr r2, =_sbss
 80027c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80027c4:	20000344 	.word	0x20000344

080027c8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027c8:	e7fe      	b.n	80027c8 <ADC1_IRQHandler>
	...

080027cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027d2:	1dfb      	adds	r3, r7, #7
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <HAL_Init+0x3c>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002808 <HAL_Init+0x3c>)
 80027de:	2180      	movs	r1, #128	@ 0x80
 80027e0:	0049      	lsls	r1, r1, #1
 80027e2:	430a      	orrs	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027e6:	2003      	movs	r0, #3
 80027e8:	f000 f810 	bl	800280c <HAL_InitTick>
 80027ec:	1e03      	subs	r3, r0, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80027f0:	1dfb      	adds	r3, r7, #7
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	e001      	b.n	80027fc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80027f8:	f7ff fd0c 	bl	8002214 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027fc:	1dfb      	adds	r3, r7, #7
 80027fe:	781b      	ldrb	r3, [r3, #0]
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b002      	add	sp, #8
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40022000 	.word	0x40022000

0800280c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002814:	230f      	movs	r3, #15
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800281c:	4b1d      	ldr	r3, [pc, #116]	@ (8002894 <HAL_InitTick+0x88>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d02b      	beq.n	800287c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002824:	4b1c      	ldr	r3, [pc, #112]	@ (8002898 <HAL_InitTick+0x8c>)
 8002826:	681c      	ldr	r4, [r3, #0]
 8002828:	4b1a      	ldr	r3, [pc, #104]	@ (8002894 <HAL_InitTick+0x88>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	0019      	movs	r1, r3
 800282e:	23fa      	movs	r3, #250	@ 0xfa
 8002830:	0098      	lsls	r0, r3, #2
 8002832:	f7fd fc67 	bl	8000104 <__udivsi3>
 8002836:	0003      	movs	r3, r0
 8002838:	0019      	movs	r1, r3
 800283a:	0020      	movs	r0, r4
 800283c:	f7fd fc62 	bl	8000104 <__udivsi3>
 8002840:	0003      	movs	r3, r0
 8002842:	0018      	movs	r0, r3
 8002844:	f000 f919 	bl	8002a7a <HAL_SYSTICK_Config>
 8002848:	1e03      	subs	r3, r0, #0
 800284a:	d112      	bne.n	8002872 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b03      	cmp	r3, #3
 8002850:	d80a      	bhi.n	8002868 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	2301      	movs	r3, #1
 8002856:	425b      	negs	r3, r3
 8002858:	2200      	movs	r2, #0
 800285a:	0018      	movs	r0, r3
 800285c:	f000 f8e8 	bl	8002a30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002860:	4b0e      	ldr	r3, [pc, #56]	@ (800289c <HAL_InitTick+0x90>)
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	e00d      	b.n	8002884 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002868:	230f      	movs	r3, #15
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e008      	b.n	8002884 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002872:	230f      	movs	r3, #15
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	e003      	b.n	8002884 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800287c:	230f      	movs	r3, #15
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002884:	230f      	movs	r3, #15
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	781b      	ldrb	r3, [r3, #0]
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b005      	add	sp, #20
 8002890:	bd90      	pop	{r4, r7, pc}
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	20000070 	.word	0x20000070
 8002898:	20000068 	.word	0x20000068
 800289c:	2000006c 	.word	0x2000006c

080028a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_IncTick+0x1c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	001a      	movs	r2, r3
 80028aa:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <HAL_IncTick+0x20>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	18d2      	adds	r2, r2, r3
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_IncTick+0x20>)
 80028b2:	601a      	str	r2, [r3, #0]
}
 80028b4:	46c0      	nop			@ (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	20000070 	.word	0x20000070
 80028c0:	20000340 	.word	0x20000340

080028c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  return uwTick;
 80028c8:	4b02      	ldr	r3, [pc, #8]	@ (80028d4 <HAL_GetTick+0x10>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			@ (mov r8, r8)
 80028d4:	20000340 	.word	0x20000340

080028d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	0002      	movs	r2, r0
 80028e0:	1dfb      	adds	r3, r7, #7
 80028e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028e4:	1dfb      	adds	r3, r7, #7
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80028ea:	d809      	bhi.n	8002900 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ec:	1dfb      	adds	r3, r7, #7
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	001a      	movs	r2, r3
 80028f2:	231f      	movs	r3, #31
 80028f4:	401a      	ands	r2, r3
 80028f6:	4b04      	ldr	r3, [pc, #16]	@ (8002908 <__NVIC_EnableIRQ+0x30>)
 80028f8:	2101      	movs	r1, #1
 80028fa:	4091      	lsls	r1, r2
 80028fc:	000a      	movs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002900:	46c0      	nop			@ (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	b002      	add	sp, #8
 8002906:	bd80      	pop	{r7, pc}
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	0002      	movs	r2, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	1dfb      	adds	r3, r7, #7
 8002918:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800291a:	1dfb      	adds	r3, r7, #7
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002920:	d828      	bhi.n	8002974 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002922:	4a2f      	ldr	r2, [pc, #188]	@ (80029e0 <__NVIC_SetPriority+0xd4>)
 8002924:	1dfb      	adds	r3, r7, #7
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	b25b      	sxtb	r3, r3
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	33c0      	adds	r3, #192	@ 0xc0
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	589b      	ldr	r3, [r3, r2]
 8002932:	1dfa      	adds	r2, r7, #7
 8002934:	7812      	ldrb	r2, [r2, #0]
 8002936:	0011      	movs	r1, r2
 8002938:	2203      	movs	r2, #3
 800293a:	400a      	ands	r2, r1
 800293c:	00d2      	lsls	r2, r2, #3
 800293e:	21ff      	movs	r1, #255	@ 0xff
 8002940:	4091      	lsls	r1, r2
 8002942:	000a      	movs	r2, r1
 8002944:	43d2      	mvns	r2, r2
 8002946:	401a      	ands	r2, r3
 8002948:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	019b      	lsls	r3, r3, #6
 800294e:	22ff      	movs	r2, #255	@ 0xff
 8002950:	401a      	ands	r2, r3
 8002952:	1dfb      	adds	r3, r7, #7
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	0018      	movs	r0, r3
 8002958:	2303      	movs	r3, #3
 800295a:	4003      	ands	r3, r0
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002960:	481f      	ldr	r0, [pc, #124]	@ (80029e0 <__NVIC_SetPriority+0xd4>)
 8002962:	1dfb      	adds	r3, r7, #7
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	b25b      	sxtb	r3, r3
 8002968:	089b      	lsrs	r3, r3, #2
 800296a:	430a      	orrs	r2, r1
 800296c:	33c0      	adds	r3, #192	@ 0xc0
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002972:	e031      	b.n	80029d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002974:	4a1b      	ldr	r2, [pc, #108]	@ (80029e4 <__NVIC_SetPriority+0xd8>)
 8002976:	1dfb      	adds	r3, r7, #7
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	0019      	movs	r1, r3
 800297c:	230f      	movs	r3, #15
 800297e:	400b      	ands	r3, r1
 8002980:	3b08      	subs	r3, #8
 8002982:	089b      	lsrs	r3, r3, #2
 8002984:	3306      	adds	r3, #6
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	18d3      	adds	r3, r2, r3
 800298a:	3304      	adds	r3, #4
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	1dfa      	adds	r2, r7, #7
 8002990:	7812      	ldrb	r2, [r2, #0]
 8002992:	0011      	movs	r1, r2
 8002994:	2203      	movs	r2, #3
 8002996:	400a      	ands	r2, r1
 8002998:	00d2      	lsls	r2, r2, #3
 800299a:	21ff      	movs	r1, #255	@ 0xff
 800299c:	4091      	lsls	r1, r2
 800299e:	000a      	movs	r2, r1
 80029a0:	43d2      	mvns	r2, r2
 80029a2:	401a      	ands	r2, r3
 80029a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	019b      	lsls	r3, r3, #6
 80029aa:	22ff      	movs	r2, #255	@ 0xff
 80029ac:	401a      	ands	r2, r3
 80029ae:	1dfb      	adds	r3, r7, #7
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	0018      	movs	r0, r3
 80029b4:	2303      	movs	r3, #3
 80029b6:	4003      	ands	r3, r0
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029bc:	4809      	ldr	r0, [pc, #36]	@ (80029e4 <__NVIC_SetPriority+0xd8>)
 80029be:	1dfb      	adds	r3, r7, #7
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	001c      	movs	r4, r3
 80029c4:	230f      	movs	r3, #15
 80029c6:	4023      	ands	r3, r4
 80029c8:	3b08      	subs	r3, #8
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	430a      	orrs	r2, r1
 80029ce:	3306      	adds	r3, #6
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	18c3      	adds	r3, r0, r3
 80029d4:	3304      	adds	r3, #4
 80029d6:	601a      	str	r2, [r3, #0]
}
 80029d8:	46c0      	nop			@ (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b003      	add	sp, #12
 80029de:	bd90      	pop	{r4, r7, pc}
 80029e0:	e000e100 	.word	0xe000e100
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	1e5a      	subs	r2, r3, #1
 80029f4:	2380      	movs	r3, #128	@ 0x80
 80029f6:	045b      	lsls	r3, r3, #17
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d301      	bcc.n	8002a00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fc:	2301      	movs	r3, #1
 80029fe:	e010      	b.n	8002a22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a00:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <SysTick_Config+0x44>)
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	3a01      	subs	r2, #1
 8002a06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a08:	2301      	movs	r3, #1
 8002a0a:	425b      	negs	r3, r3
 8002a0c:	2103      	movs	r1, #3
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f7ff ff7c 	bl	800290c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a14:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <SysTick_Config+0x44>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1a:	4b04      	ldr	r3, [pc, #16]	@ (8002a2c <SysTick_Config+0x44>)
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	0018      	movs	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b002      	add	sp, #8
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	46c0      	nop			@ (mov r8, r8)
 8002a2c:	e000e010 	.word	0xe000e010

08002a30 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	1c02      	adds	r2, r0, #0
 8002a40:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	187b      	adds	r3, r7, r1
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	b25b      	sxtb	r3, r3
 8002a4a:	0011      	movs	r1, r2
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7ff ff5d 	bl	800290c <__NVIC_SetPriority>
}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b004      	add	sp, #16
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	0002      	movs	r2, r0
 8002a62:	1dfb      	adds	r3, r7, #7
 8002a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a66:	1dfb      	adds	r3, r7, #7
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	b25b      	sxtb	r3, r3
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7ff ff33 	bl	80028d8 <__NVIC_EnableIRQ>
}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b002      	add	sp, #8
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f7ff ffaf 	bl	80029e8 <SysTick_Config>
 8002a8a:	0003      	movs	r3, r0
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b002      	add	sp, #8
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa2:	e147      	b.n	8002d34 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4091      	lsls	r1, r2
 8002aae:	000a      	movs	r2, r1
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d100      	bne.n	8002abc <HAL_GPIO_Init+0x28>
 8002aba:	e138      	b.n	8002d2e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d005      	beq.n	8002ad4 <HAL_GPIO_Init+0x40>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2203      	movs	r2, #3
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d130      	bne.n	8002b36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	0013      	movs	r3, r2
 8002ae4:	43da      	mvns	r2, r3
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	409a      	lsls	r2, r3
 8002af6:	0013      	movs	r3, r2
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	0013      	movs	r3, r2
 8002b12:	43da      	mvns	r2, r3
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	2201      	movs	r2, #1
 8002b22:	401a      	ands	r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	409a      	lsls	r2, r3
 8002b28:	0013      	movs	r3, r2
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d017      	beq.n	8002b72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	0013      	movs	r3, r2
 8002b52:	43da      	mvns	r2, r3
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	409a      	lsls	r2, r3
 8002b64:	0013      	movs	r3, r2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2203      	movs	r2, #3
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d123      	bne.n	8002bc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	08da      	lsrs	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3208      	adds	r2, #8
 8002b86:	0092      	lsls	r2, r2, #2
 8002b88:	58d3      	ldr	r3, [r2, r3]
 8002b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2207      	movs	r2, #7
 8002b90:	4013      	ands	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	220f      	movs	r2, #15
 8002b96:	409a      	lsls	r2, r3
 8002b98:	0013      	movs	r3, r2
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2107      	movs	r1, #7
 8002baa:	400b      	ands	r3, r1
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	0013      	movs	r3, r2
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	08da      	lsrs	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3208      	adds	r2, #8
 8002bc0:	0092      	lsls	r2, r2, #2
 8002bc2:	6939      	ldr	r1, [r7, #16]
 8002bc4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	0013      	movs	r3, r2
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2203      	movs	r2, #3
 8002be4:	401a      	ands	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	409a      	lsls	r2, r3
 8002bec:	0013      	movs	r3, r2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	23c0      	movs	r3, #192	@ 0xc0
 8002c00:	029b      	lsls	r3, r3, #10
 8002c02:	4013      	ands	r3, r2
 8002c04:	d100      	bne.n	8002c08 <HAL_GPIO_Init+0x174>
 8002c06:	e092      	b.n	8002d2e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002c08:	4a50      	ldr	r2, [pc, #320]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	3318      	adds	r3, #24
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	589b      	ldr	r3, [r3, r2]
 8002c14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2203      	movs	r2, #3
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	220f      	movs	r2, #15
 8002c20:	409a      	lsls	r2, r3
 8002c22:	0013      	movs	r3, r2
 8002c24:	43da      	mvns	r2, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	23a0      	movs	r3, #160	@ 0xa0
 8002c30:	05db      	lsls	r3, r3, #23
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d013      	beq.n	8002c5e <HAL_GPIO_Init+0x1ca>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a45      	ldr	r2, [pc, #276]	@ (8002d50 <HAL_GPIO_Init+0x2bc>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00d      	beq.n	8002c5a <HAL_GPIO_Init+0x1c6>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a44      	ldr	r2, [pc, #272]	@ (8002d54 <HAL_GPIO_Init+0x2c0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <HAL_GPIO_Init+0x1c2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a43      	ldr	r2, [pc, #268]	@ (8002d58 <HAL_GPIO_Init+0x2c4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d101      	bne.n	8002c52 <HAL_GPIO_Init+0x1be>
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e006      	b.n	8002c60 <HAL_GPIO_Init+0x1cc>
 8002c52:	2305      	movs	r3, #5
 8002c54:	e004      	b.n	8002c60 <HAL_GPIO_Init+0x1cc>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e002      	b.n	8002c60 <HAL_GPIO_Init+0x1cc>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_GPIO_Init+0x1cc>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	2103      	movs	r1, #3
 8002c64:	400a      	ands	r2, r1
 8002c66:	00d2      	lsls	r2, r2, #3
 8002c68:	4093      	lsls	r3, r2
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002c70:	4936      	ldr	r1, [pc, #216]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	3318      	adds	r3, #24
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c7e:	4b33      	ldr	r3, [pc, #204]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	43da      	mvns	r2, r3
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	2380      	movs	r3, #128	@ 0x80
 8002c94:	035b      	lsls	r3, r3, #13
 8002c96:	4013      	ands	r3, r2
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002ca8:	4b28      	ldr	r3, [pc, #160]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	2380      	movs	r3, #128	@ 0x80
 8002cbe:	039b      	lsls	r3, r3, #14
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002cd4:	2384      	movs	r3, #132	@ 0x84
 8002cd6:	58d3      	ldr	r3, [r2, r3]
 8002cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	43da      	mvns	r2, r3
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	2380      	movs	r3, #128	@ 0x80
 8002cea:	029b      	lsls	r3, r3, #10
 8002cec:	4013      	ands	r3, r2
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cf8:	4914      	ldr	r1, [pc, #80]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002cfa:	2284      	movs	r2, #132	@ 0x84
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002d00:	4a12      	ldr	r2, [pc, #72]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002d02:	2380      	movs	r3, #128	@ 0x80
 8002d04:	58d3      	ldr	r3, [r2, r3]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	2380      	movs	r3, #128	@ 0x80
 8002d18:	025b      	lsls	r3, r3, #9
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d26:	4909      	ldr	r1, [pc, #36]	@ (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002d28:	2280      	movs	r2, #128	@ 0x80
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	3301      	adds	r3, #1
 8002d32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	40da      	lsrs	r2, r3
 8002d3c:	1e13      	subs	r3, r2, #0
 8002d3e:	d000      	beq.n	8002d42 <HAL_GPIO_Init+0x2ae>
 8002d40:	e6b0      	b.n	8002aa4 <HAL_GPIO_Init+0x10>
  }
}
 8002d42:	46c0      	nop			@ (mov r8, r8)
 8002d44:	46c0      	nop			@ (mov r8, r8)
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b006      	add	sp, #24
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40021800 	.word	0x40021800
 8002d50:	50000400 	.word	0x50000400
 8002d54:	50000800 	.word	0x50000800
 8002d58:	50000c00 	.word	0x50000c00

08002d5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	000a      	movs	r2, r1
 8002d66:	1cbb      	adds	r3, r7, #2
 8002d68:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	1cba      	adds	r2, r7, #2
 8002d70:	8812      	ldrh	r2, [r2, #0]
 8002d72:	4013      	ands	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d76:	230f      	movs	r3, #15
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e003      	b.n	8002d88 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d80:	230f      	movs	r3, #15
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002d88:	230f      	movs	r3, #15
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	781b      	ldrb	r3, [r3, #0]
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b004      	add	sp, #16
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	0008      	movs	r0, r1
 8002da0:	0011      	movs	r1, r2
 8002da2:	1cbb      	adds	r3, r7, #2
 8002da4:	1c02      	adds	r2, r0, #0
 8002da6:	801a      	strh	r2, [r3, #0]
 8002da8:	1c7b      	adds	r3, r7, #1
 8002daa:	1c0a      	adds	r2, r1, #0
 8002dac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dae:	1c7b      	adds	r3, r7, #1
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d004      	beq.n	8002dc0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002db6:	1cbb      	adds	r3, r7, #2
 8002db8:	881a      	ldrh	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dbe:	e003      	b.n	8002dc8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dc0:	1cbb      	adds	r3, r7, #2
 8002dc2:	881a      	ldrh	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dc8:	46c0      	nop			@ (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b002      	add	sp, #8
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	000a      	movs	r2, r1
 8002dda:	1cbb      	adds	r3, r7, #2
 8002ddc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002de4:	1cbb      	adds	r3, r7, #2
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	041a      	lsls	r2, r3, #16
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	1cb9      	adds	r1, r7, #2
 8002df4:	8809      	ldrh	r1, [r1, #0]
 8002df6:	400b      	ands	r3, r1
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	619a      	str	r2, [r3, #24]
}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b004      	add	sp, #16
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	0002      	movs	r2, r0
 8002e10:	1dbb      	adds	r3, r7, #6
 8002e12:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002e14:	4b10      	ldr	r3, [pc, #64]	@ (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	1dba      	adds	r2, r7, #6
 8002e1a:	8812      	ldrh	r2, [r2, #0]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d008      	beq.n	8002e32 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002e20:	4b0d      	ldr	r3, [pc, #52]	@ (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e22:	1dba      	adds	r2, r7, #6
 8002e24:	8812      	ldrh	r2, [r2, #0]
 8002e26:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002e28:	1dbb      	adds	r3, r7, #6
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f7fe fc89 	bl	8001744 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002e32:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	1dba      	adds	r2, r7, #6
 8002e38:	8812      	ldrh	r2, [r2, #0]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d008      	beq.n	8002e50 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002e3e:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002e40:	1dba      	adds	r2, r7, #6
 8002e42:	8812      	ldrh	r2, [r2, #0]
 8002e44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002e46:	1dbb      	adds	r3, r7, #6
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f7fe fc26 	bl	800169c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002e50:	46c0      	nop			@ (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021800 	.word	0x40021800

08002e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e08f      	b.n	8002f8e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2241      	movs	r2, #65	@ 0x41
 8002e72:	5c9b      	ldrb	r3, [r3, r2]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d107      	bne.n	8002e8a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2240      	movs	r2, #64	@ 0x40
 8002e7e:	2100      	movs	r1, #0
 8002e80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7ff f9f1 	bl	800226c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2241      	movs	r2, #65	@ 0x41
 8002e8e:	2124      	movs	r1, #36	@ 0x24
 8002e90:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	438a      	bics	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	493b      	ldr	r1, [pc, #236]	@ (8002f98 <HAL_I2C_Init+0x13c>)
 8002eac:	400a      	ands	r2, r1
 8002eae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4938      	ldr	r1, [pc, #224]	@ (8002f9c <HAL_I2C_Init+0x140>)
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d108      	bne.n	8002eda <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2180      	movs	r1, #128	@ 0x80
 8002ed2:	0209      	lsls	r1, r1, #8
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	e007      	b.n	8002eea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2184      	movs	r1, #132	@ 0x84
 8002ee4:	0209      	lsls	r1, r1, #8
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d109      	bne.n	8002f06 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2180      	movs	r1, #128	@ 0x80
 8002efe:	0109      	lsls	r1, r1, #4
 8002f00:	430a      	orrs	r2, r1
 8002f02:	605a      	str	r2, [r3, #4]
 8002f04:	e007      	b.n	8002f16 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4923      	ldr	r1, [pc, #140]	@ (8002fa0 <HAL_I2C_Init+0x144>)
 8002f12:	400a      	ands	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4920      	ldr	r1, [pc, #128]	@ (8002fa4 <HAL_I2C_Init+0x148>)
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	491a      	ldr	r1, [pc, #104]	@ (8002f9c <HAL_I2C_Init+0x140>)
 8002f32:	400a      	ands	r2, r1
 8002f34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69d9      	ldr	r1, [r3, #28]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1a      	ldr	r2, [r3, #32]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2241      	movs	r2, #65	@ 0x41
 8002f7a:	2120      	movs	r1, #32
 8002f7c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2242      	movs	r2, #66	@ 0x42
 8002f88:	2100      	movs	r1, #0
 8002f8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b002      	add	sp, #8
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			@ (mov r8, r8)
 8002f98:	f0ffffff 	.word	0xf0ffffff
 8002f9c:	ffff7fff 	.word	0xffff7fff
 8002fa0:	fffff7ff 	.word	0xfffff7ff
 8002fa4:	02008000 	.word	0x02008000

08002fa8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b089      	sub	sp, #36	@ 0x24
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	0008      	movs	r0, r1
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	230a      	movs	r3, #10
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	1c02      	adds	r2, r0, #0
 8002fbc:	801a      	strh	r2, [r3, #0]
 8002fbe:	2308      	movs	r3, #8
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	1c0a      	adds	r2, r1, #0
 8002fc4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2241      	movs	r2, #65	@ 0x41
 8002fca:	5c9b      	ldrb	r3, [r3, r2]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d000      	beq.n	8002fd4 <HAL_I2C_Master_Transmit+0x2c>
 8002fd2:	e10a      	b.n	80031ea <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2240      	movs	r2, #64	@ 0x40
 8002fd8:	5c9b      	ldrb	r3, [r3, r2]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2C_Master_Transmit+0x3a>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e104      	b.n	80031ec <HAL_I2C_Master_Transmit+0x244>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2240      	movs	r2, #64	@ 0x40
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fea:	f7ff fc6b 	bl	80028c4 <HAL_GetTick>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ff2:	2380      	movs	r3, #128	@ 0x80
 8002ff4:	0219      	lsls	r1, r3, #8
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	2319      	movs	r3, #25
 8002ffe:	2201      	movs	r2, #1
 8003000:	f000 fa26 	bl	8003450 <I2C_WaitOnFlagUntilTimeout>
 8003004:	1e03      	subs	r3, r0, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0ef      	b.n	80031ec <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2241      	movs	r2, #65	@ 0x41
 8003010:	2121      	movs	r1, #33	@ 0x21
 8003012:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2242      	movs	r2, #66	@ 0x42
 8003018:	2110      	movs	r1, #16
 800301a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2208      	movs	r2, #8
 800302c:	18ba      	adds	r2, r7, r2
 800302e:	8812      	ldrh	r2, [r2, #0]
 8003030:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	2bff      	cmp	r3, #255	@ 0xff
 8003040:	d906      	bls.n	8003050 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	22ff      	movs	r2, #255	@ 0xff
 8003046:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003048:	2380      	movs	r3, #128	@ 0x80
 800304a:	045b      	lsls	r3, r3, #17
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	e007      	b.n	8003060 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800305a:	2380      	movs	r3, #128	@ 0x80
 800305c:	049b      	lsls	r3, r3, #18
 800305e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003064:	2b00      	cmp	r3, #0
 8003066:	d027      	beq.n	80030b8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	781a      	ldrb	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309c:	b2db      	uxtb	r3, r3
 800309e:	3301      	adds	r3, #1
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	697c      	ldr	r4, [r7, #20]
 80030a4:	230a      	movs	r3, #10
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	8819      	ldrh	r1, [r3, #0]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	4b51      	ldr	r3, [pc, #324]	@ (80031f4 <HAL_I2C_Master_Transmit+0x24c>)
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	0023      	movs	r3, r4
 80030b2:	f000 fc45 	bl	8003940 <I2C_TransferConfig>
 80030b6:	e06f      	b.n	8003198 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	697c      	ldr	r4, [r7, #20]
 80030c0:	230a      	movs	r3, #10
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	8819      	ldrh	r1, [r3, #0]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	4b4a      	ldr	r3, [pc, #296]	@ (80031f4 <HAL_I2C_Master_Transmit+0x24c>)
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	0023      	movs	r3, r4
 80030ce:	f000 fc37 	bl	8003940 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030d2:	e061      	b.n	8003198 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	0018      	movs	r0, r3
 80030dc:	f000 fa10 	bl	8003500 <I2C_WaitOnTXISFlagUntilTimeout>
 80030e0:	1e03      	subs	r3, r0, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e081      	b.n	80031ec <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	781a      	ldrb	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d03a      	beq.n	8003198 <HAL_I2C_Master_Transmit+0x1f0>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003126:	2b00      	cmp	r3, #0
 8003128:	d136      	bne.n	8003198 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800312a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	0013      	movs	r3, r2
 8003134:	2200      	movs	r2, #0
 8003136:	2180      	movs	r1, #128	@ 0x80
 8003138:	f000 f98a 	bl	8003450 <I2C_WaitOnFlagUntilTimeout>
 800313c:	1e03      	subs	r3, r0, #0
 800313e:	d001      	beq.n	8003144 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e053      	b.n	80031ec <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	2bff      	cmp	r3, #255	@ 0xff
 800314c:	d911      	bls.n	8003172 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	22ff      	movs	r2, #255	@ 0xff
 8003152:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003158:	b2da      	uxtb	r2, r3
 800315a:	2380      	movs	r3, #128	@ 0x80
 800315c:	045c      	lsls	r4, r3, #17
 800315e:	230a      	movs	r3, #10
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	8819      	ldrh	r1, [r3, #0]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	2300      	movs	r3, #0
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	0023      	movs	r3, r4
 800316c:	f000 fbe8 	bl	8003940 <I2C_TransferConfig>
 8003170:	e012      	b.n	8003198 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003180:	b2da      	uxtb	r2, r3
 8003182:	2380      	movs	r3, #128	@ 0x80
 8003184:	049c      	lsls	r4, r3, #18
 8003186:	230a      	movs	r3, #10
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	8819      	ldrh	r1, [r3, #0]
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	2300      	movs	r3, #0
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	0023      	movs	r3, r4
 8003194:	f000 fbd4 	bl	8003940 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d198      	bne.n	80030d4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f000 f9ef 	bl	800358c <I2C_WaitOnSTOPFlagUntilTimeout>
 80031ae:	1e03      	subs	r3, r0, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e01a      	b.n	80031ec <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2220      	movs	r2, #32
 80031bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	490b      	ldr	r1, [pc, #44]	@ (80031f8 <HAL_I2C_Master_Transmit+0x250>)
 80031ca:	400a      	ands	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2241      	movs	r2, #65	@ 0x41
 80031d2:	2120      	movs	r1, #32
 80031d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2242      	movs	r2, #66	@ 0x42
 80031da:	2100      	movs	r1, #0
 80031dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2240      	movs	r2, #64	@ 0x40
 80031e2:	2100      	movs	r1, #0
 80031e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80031ea:	2302      	movs	r3, #2
  }
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b007      	add	sp, #28
 80031f2:	bd90      	pop	{r4, r7, pc}
 80031f4:	80002000 	.word	0x80002000
 80031f8:	fe00e800 	.word	0xfe00e800

080031fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b089      	sub	sp, #36	@ 0x24
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	0008      	movs	r0, r1
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	0019      	movs	r1, r3
 800320a:	230a      	movs	r3, #10
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	1c02      	adds	r2, r0, #0
 8003210:	801a      	strh	r2, [r3, #0]
 8003212:	2308      	movs	r3, #8
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	1c0a      	adds	r2, r1, #0
 8003218:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2241      	movs	r2, #65	@ 0x41
 800321e:	5c9b      	ldrb	r3, [r3, r2]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b20      	cmp	r3, #32
 8003224:	d000      	beq.n	8003228 <HAL_I2C_Master_Receive+0x2c>
 8003226:	e0e8      	b.n	80033fa <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2240      	movs	r2, #64	@ 0x40
 800322c:	5c9b      	ldrb	r3, [r3, r2]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_I2C_Master_Receive+0x3a>
 8003232:	2302      	movs	r3, #2
 8003234:	e0e2      	b.n	80033fc <HAL_I2C_Master_Receive+0x200>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2240      	movs	r2, #64	@ 0x40
 800323a:	2101      	movs	r1, #1
 800323c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800323e:	f7ff fb41 	bl	80028c4 <HAL_GetTick>
 8003242:	0003      	movs	r3, r0
 8003244:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003246:	2380      	movs	r3, #128	@ 0x80
 8003248:	0219      	lsls	r1, r3, #8
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	2319      	movs	r3, #25
 8003252:	2201      	movs	r2, #1
 8003254:	f000 f8fc 	bl	8003450 <I2C_WaitOnFlagUntilTimeout>
 8003258:	1e03      	subs	r3, r0, #0
 800325a:	d001      	beq.n	8003260 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0cd      	b.n	80033fc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2241      	movs	r2, #65	@ 0x41
 8003264:	2122      	movs	r1, #34	@ 0x22
 8003266:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2242      	movs	r2, #66	@ 0x42
 800326c:	2110      	movs	r1, #16
 800326e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2208      	movs	r2, #8
 8003280:	18ba      	adds	r2, r7, r2
 8003282:	8812      	ldrh	r2, [r2, #0]
 8003284:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2bff      	cmp	r3, #255	@ 0xff
 8003294:	d911      	bls.n	80032ba <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	22ff      	movs	r2, #255	@ 0xff
 800329a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	2380      	movs	r3, #128	@ 0x80
 80032a4:	045c      	lsls	r4, r3, #17
 80032a6:	230a      	movs	r3, #10
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	8819      	ldrh	r1, [r3, #0]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	4b55      	ldr	r3, [pc, #340]	@ (8003404 <HAL_I2C_Master_Receive+0x208>)
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	0023      	movs	r3, r4
 80032b4:	f000 fb44 	bl	8003940 <I2C_TransferConfig>
 80032b8:	e076      	b.n	80033a8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	2380      	movs	r3, #128	@ 0x80
 80032cc:	049c      	lsls	r4, r3, #18
 80032ce:	230a      	movs	r3, #10
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	8819      	ldrh	r1, [r3, #0]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003404 <HAL_I2C_Master_Receive+0x208>)
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	0023      	movs	r3, r4
 80032dc:	f000 fb30 	bl	8003940 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80032e0:	e062      	b.n	80033a8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f000 f993 	bl	8003614 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e082      	b.n	80033fc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d03a      	beq.n	80033a8 <HAL_I2C_Master_Receive+0x1ac>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003336:	2b00      	cmp	r3, #0
 8003338:	d136      	bne.n	80033a8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800333a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	0013      	movs	r3, r2
 8003344:	2200      	movs	r2, #0
 8003346:	2180      	movs	r1, #128	@ 0x80
 8003348:	f000 f882 	bl	8003450 <I2C_WaitOnFlagUntilTimeout>
 800334c:	1e03      	subs	r3, r0, #0
 800334e:	d001      	beq.n	8003354 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e053      	b.n	80033fc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	2bff      	cmp	r3, #255	@ 0xff
 800335c:	d911      	bls.n	8003382 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	22ff      	movs	r2, #255	@ 0xff
 8003362:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003368:	b2da      	uxtb	r2, r3
 800336a:	2380      	movs	r3, #128	@ 0x80
 800336c:	045c      	lsls	r4, r3, #17
 800336e:	230a      	movs	r3, #10
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	8819      	ldrh	r1, [r3, #0]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	2300      	movs	r3, #0
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	0023      	movs	r3, r4
 800337c:	f000 fae0 	bl	8003940 <I2C_TransferConfig>
 8003380:	e012      	b.n	80033a8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003390:	b2da      	uxtb	r2, r3
 8003392:	2380      	movs	r3, #128	@ 0x80
 8003394:	049c      	lsls	r4, r3, #18
 8003396:	230a      	movs	r3, #10
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	8819      	ldrh	r1, [r3, #0]
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	2300      	movs	r3, #0
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	0023      	movs	r3, r4
 80033a4:	f000 facc 	bl	8003940 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d197      	bne.n	80032e2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f000 f8e7 	bl	800358c <I2C_WaitOnSTOPFlagUntilTimeout>
 80033be:	1e03      	subs	r3, r0, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e01a      	b.n	80033fc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2220      	movs	r2, #32
 80033cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	490b      	ldr	r1, [pc, #44]	@ (8003408 <HAL_I2C_Master_Receive+0x20c>)
 80033da:	400a      	ands	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2241      	movs	r2, #65	@ 0x41
 80033e2:	2120      	movs	r1, #32
 80033e4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2242      	movs	r2, #66	@ 0x42
 80033ea:	2100      	movs	r1, #0
 80033ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2240      	movs	r2, #64	@ 0x40
 80033f2:	2100      	movs	r1, #0
 80033f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
  }
}
 80033fc:	0018      	movs	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	b007      	add	sp, #28
 8003402:	bd90      	pop	{r4, r7, pc}
 8003404:	80002400 	.word	0x80002400
 8003408:	fe00e800 	.word	0xfe00e800

0800340c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	2202      	movs	r2, #2
 800341c:	4013      	ands	r3, r2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d103      	bne.n	800342a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2200      	movs	r2, #0
 8003428:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2201      	movs	r2, #1
 8003432:	4013      	ands	r3, r2
 8003434:	2b01      	cmp	r3, #1
 8003436:	d007      	beq.n	8003448 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2101      	movs	r1, #1
 8003444:	430a      	orrs	r2, r1
 8003446:	619a      	str	r2, [r3, #24]
  }
}
 8003448:	46c0      	nop			@ (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b002      	add	sp, #8
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	1dfb      	adds	r3, r7, #7
 800345e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003460:	e03a      	b.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	6839      	ldr	r1, [r7, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	0018      	movs	r0, r3
 800346a:	f000 f971 	bl	8003750 <I2C_IsErrorOccurred>
 800346e:	1e03      	subs	r3, r0, #0
 8003470:	d001      	beq.n	8003476 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e040      	b.n	80034f8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	3301      	adds	r3, #1
 800347a:	d02d      	beq.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347c:	f7ff fa22 	bl	80028c4 <HAL_GetTick>
 8003480:	0002      	movs	r2, r0
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d302      	bcc.n	8003492 <I2C_WaitOnFlagUntilTimeout+0x42>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d122      	bne.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	4013      	ands	r3, r2
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	425a      	negs	r2, r3
 80034a2:	4153      	adcs	r3, r2
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	001a      	movs	r2, r3
 80034a8:	1dfb      	adds	r3, r7, #7
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d113      	bne.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b4:	2220      	movs	r2, #32
 80034b6:	431a      	orrs	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2241      	movs	r2, #65	@ 0x41
 80034c0:	2120      	movs	r1, #32
 80034c2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2242      	movs	r2, #66	@ 0x42
 80034c8:	2100      	movs	r1, #0
 80034ca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2240      	movs	r2, #64	@ 0x40
 80034d0:	2100      	movs	r1, #0
 80034d2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e00f      	b.n	80034f8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	4013      	ands	r3, r2
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	425a      	negs	r2, r3
 80034e8:	4153      	adcs	r3, r2
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	001a      	movs	r2, r3
 80034ee:	1dfb      	adds	r3, r7, #7
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d0b5      	beq.n	8003462 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b004      	add	sp, #16
 80034fe:	bd80      	pop	{r7, pc}

08003500 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800350c:	e032      	b.n	8003574 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	0018      	movs	r0, r3
 8003516:	f000 f91b 	bl	8003750 <I2C_IsErrorOccurred>
 800351a:	1e03      	subs	r3, r0, #0
 800351c:	d001      	beq.n	8003522 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e030      	b.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	3301      	adds	r3, #1
 8003526:	d025      	beq.n	8003574 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003528:	f7ff f9cc 	bl	80028c4 <HAL_GetTick>
 800352c:	0002      	movs	r2, r0
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	429a      	cmp	r2, r3
 8003536:	d302      	bcc.n	800353e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d11a      	bne.n	8003574 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2202      	movs	r2, #2
 8003546:	4013      	ands	r3, r2
 8003548:	2b02      	cmp	r3, #2
 800354a:	d013      	beq.n	8003574 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003550:	2220      	movs	r2, #32
 8003552:	431a      	orrs	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2241      	movs	r2, #65	@ 0x41
 800355c:	2120      	movs	r1, #32
 800355e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2242      	movs	r2, #66	@ 0x42
 8003564:	2100      	movs	r1, #0
 8003566:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2240      	movs	r2, #64	@ 0x40
 800356c:	2100      	movs	r1, #0
 800356e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e007      	b.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2202      	movs	r2, #2
 800357c:	4013      	ands	r3, r2
 800357e:	2b02      	cmp	r3, #2
 8003580:	d1c5      	bne.n	800350e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b004      	add	sp, #16
 800358a:	bd80      	pop	{r7, pc}

0800358c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003598:	e02f      	b.n	80035fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 f8d5 	bl	8003750 <I2C_IsErrorOccurred>
 80035a6:	1e03      	subs	r3, r0, #0
 80035a8:	d001      	beq.n	80035ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e02d      	b.n	800360a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ae:	f7ff f989 	bl	80028c4 <HAL_GetTick>
 80035b2:	0002      	movs	r2, r0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d302      	bcc.n	80035c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d11a      	bne.n	80035fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2220      	movs	r2, #32
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b20      	cmp	r3, #32
 80035d0:	d013      	beq.n	80035fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d6:	2220      	movs	r2, #32
 80035d8:	431a      	orrs	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2241      	movs	r2, #65	@ 0x41
 80035e2:	2120      	movs	r1, #32
 80035e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2242      	movs	r2, #66	@ 0x42
 80035ea:	2100      	movs	r1, #0
 80035ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2240      	movs	r2, #64	@ 0x40
 80035f2:	2100      	movs	r1, #0
 80035f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e007      	b.n	800360a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	2220      	movs	r2, #32
 8003602:	4013      	ands	r3, r2
 8003604:	2b20      	cmp	r3, #32
 8003606:	d1c8      	bne.n	800359a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	0018      	movs	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	b004      	add	sp, #16
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003620:	2317      	movs	r3, #23
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003628:	e07b      	b.n	8003722 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	0018      	movs	r0, r3
 8003632:	f000 f88d 	bl	8003750 <I2C_IsErrorOccurred>
 8003636:	1e03      	subs	r3, r0, #0
 8003638:	d003      	beq.n	8003642 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800363a:	2317      	movs	r3, #23
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	2201      	movs	r2, #1
 8003640:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2220      	movs	r2, #32
 800364a:	4013      	ands	r3, r2
 800364c:	2b20      	cmp	r3, #32
 800364e:	d140      	bne.n	80036d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003650:	2117      	movs	r1, #23
 8003652:	187b      	adds	r3, r7, r1
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d13b      	bne.n	80036d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	2204      	movs	r2, #4
 8003662:	4013      	ands	r3, r2
 8003664:	2b04      	cmp	r3, #4
 8003666:	d106      	bne.n	8003676 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003670:	187b      	adds	r3, r7, r1
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2210      	movs	r2, #16
 800367e:	4013      	ands	r3, r2
 8003680:	2b10      	cmp	r3, #16
 8003682:	d123      	bne.n	80036cc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2210      	movs	r2, #16
 800368a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2204      	movs	r2, #4
 8003690:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2220      	movs	r2, #32
 8003698:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4929      	ldr	r1, [pc, #164]	@ (800374c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80036a6:	400a      	ands	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2241      	movs	r2, #65	@ 0x41
 80036ae:	2120      	movs	r1, #32
 80036b0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2242      	movs	r2, #66	@ 0x42
 80036b6:	2100      	movs	r1, #0
 80036b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2240      	movs	r2, #64	@ 0x40
 80036be:	2100      	movs	r1, #0
 80036c0:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80036c2:	2317      	movs	r3, #23
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	e002      	b.n	80036d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80036d2:	f7ff f8f7 	bl	80028c4 <HAL_GetTick>
 80036d6:	0002      	movs	r2, r0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d11c      	bne.n	8003722 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80036e8:	2017      	movs	r0, #23
 80036ea:	183b      	adds	r3, r7, r0
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d117      	bne.n	8003722 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	2204      	movs	r2, #4
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d010      	beq.n	8003722 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003704:	2220      	movs	r2, #32
 8003706:	431a      	orrs	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2241      	movs	r2, #65	@ 0x41
 8003710:	2120      	movs	r1, #32
 8003712:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2240      	movs	r2, #64	@ 0x40
 8003718:	2100      	movs	r1, #0
 800371a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800371c:	183b      	adds	r3, r7, r0
 800371e:	2201      	movs	r2, #1
 8003720:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2204      	movs	r2, #4
 800372a:	4013      	ands	r3, r2
 800372c:	2b04      	cmp	r3, #4
 800372e:	d005      	beq.n	800373c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003730:	2317      	movs	r3, #23
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d100      	bne.n	800373c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800373a:	e776      	b.n	800362a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 800373c:	2317      	movs	r3, #23
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	781b      	ldrb	r3, [r3, #0]
}
 8003742:	0018      	movs	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	fe00e800 	.word	0xfe00e800

08003750 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	@ 0x28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800375c:	2327      	movs	r3, #39	@ 0x27
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2210      	movs	r2, #16
 8003778:	4013      	ands	r3, r2
 800377a:	d100      	bne.n	800377e <I2C_IsErrorOccurred+0x2e>
 800377c:	e079      	b.n	8003872 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2210      	movs	r2, #16
 8003784:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003786:	e057      	b.n	8003838 <I2C_IsErrorOccurred+0xe8>
 8003788:	2227      	movs	r2, #39	@ 0x27
 800378a:	18bb      	adds	r3, r7, r2
 800378c:	18ba      	adds	r2, r7, r2
 800378e:	7812      	ldrb	r2, [r2, #0]
 8003790:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	3301      	adds	r3, #1
 8003796:	d04f      	beq.n	8003838 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003798:	f7ff f894 	bl	80028c4 <HAL_GetTick>
 800379c:	0002      	movs	r2, r0
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d302      	bcc.n	80037ae <I2C_IsErrorOccurred+0x5e>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d144      	bne.n	8003838 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	2380      	movs	r3, #128	@ 0x80
 80037b6:	01db      	lsls	r3, r3, #7
 80037b8:	4013      	ands	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037bc:	2013      	movs	r0, #19
 80037be:	183b      	adds	r3, r7, r0
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	2142      	movs	r1, #66	@ 0x42
 80037c4:	5c52      	ldrb	r2, [r2, r1]
 80037c6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	2380      	movs	r3, #128	@ 0x80
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	401a      	ands	r2, r3
 80037d4:	2380      	movs	r3, #128	@ 0x80
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	429a      	cmp	r2, r3
 80037da:	d126      	bne.n	800382a <I2C_IsErrorOccurred+0xda>
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	2380      	movs	r3, #128	@ 0x80
 80037e0:	01db      	lsls	r3, r3, #7
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d021      	beq.n	800382a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80037e6:	183b      	adds	r3, r7, r0
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d01d      	beq.n	800382a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2180      	movs	r1, #128	@ 0x80
 80037fa:	01c9      	lsls	r1, r1, #7
 80037fc:	430a      	orrs	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003800:	f7ff f860 	bl	80028c4 <HAL_GetTick>
 8003804:	0003      	movs	r3, r0
 8003806:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003808:	e00f      	b.n	800382a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800380a:	f7ff f85b 	bl	80028c4 <HAL_GetTick>
 800380e:	0002      	movs	r2, r0
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b19      	cmp	r3, #25
 8003816:	d908      	bls.n	800382a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	2220      	movs	r2, #32
 800381c:	4313      	orrs	r3, r2
 800381e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003820:	2327      	movs	r3, #39	@ 0x27
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]

              break;
 8003828:	e006      	b.n	8003838 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2220      	movs	r2, #32
 8003832:	4013      	ands	r3, r2
 8003834:	2b20      	cmp	r3, #32
 8003836:	d1e8      	bne.n	800380a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2220      	movs	r2, #32
 8003840:	4013      	ands	r3, r2
 8003842:	2b20      	cmp	r3, #32
 8003844:	d004      	beq.n	8003850 <I2C_IsErrorOccurred+0x100>
 8003846:	2327      	movs	r3, #39	@ 0x27
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d09b      	beq.n	8003788 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003850:	2327      	movs	r3, #39	@ 0x27
 8003852:	18fb      	adds	r3, r7, r3
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d103      	bne.n	8003862 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2220      	movs	r2, #32
 8003860:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	2204      	movs	r2, #4
 8003866:	4313      	orrs	r3, r2
 8003868:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800386a:	2327      	movs	r3, #39	@ 0x27
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	2201      	movs	r2, #1
 8003870:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	2380      	movs	r3, #128	@ 0x80
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4013      	ands	r3, r2
 8003882:	d00c      	beq.n	800389e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	2201      	movs	r2, #1
 8003888:	4313      	orrs	r3, r2
 800388a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2280      	movs	r2, #128	@ 0x80
 8003892:	0052      	lsls	r2, r2, #1
 8003894:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003896:	2327      	movs	r3, #39	@ 0x27
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	2201      	movs	r2, #1
 800389c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	2380      	movs	r3, #128	@ 0x80
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4013      	ands	r3, r2
 80038a6:	d00c      	beq.n	80038c2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	2208      	movs	r2, #8
 80038ac:	4313      	orrs	r3, r2
 80038ae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2280      	movs	r2, #128	@ 0x80
 80038b6:	00d2      	lsls	r2, r2, #3
 80038b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038ba:	2327      	movs	r3, #39	@ 0x27
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	2201      	movs	r2, #1
 80038c0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	2380      	movs	r3, #128	@ 0x80
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4013      	ands	r3, r2
 80038ca:	d00c      	beq.n	80038e6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	2202      	movs	r2, #2
 80038d0:	4313      	orrs	r3, r2
 80038d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2280      	movs	r2, #128	@ 0x80
 80038da:	0092      	lsls	r2, r2, #2
 80038dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038de:	2327      	movs	r3, #39	@ 0x27
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	2201      	movs	r2, #1
 80038e4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80038e6:	2327      	movs	r3, #39	@ 0x27
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01d      	beq.n	800392c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f7ff fd8a 	bl	800340c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	490e      	ldr	r1, [pc, #56]	@ (800393c <I2C_IsErrorOccurred+0x1ec>)
 8003904:	400a      	ands	r2, r1
 8003906:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	431a      	orrs	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2241      	movs	r2, #65	@ 0x41
 8003918:	2120      	movs	r1, #32
 800391a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2242      	movs	r2, #66	@ 0x42
 8003920:	2100      	movs	r1, #0
 8003922:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2240      	movs	r2, #64	@ 0x40
 8003928:	2100      	movs	r1, #0
 800392a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800392c:	2327      	movs	r3, #39	@ 0x27
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	781b      	ldrb	r3, [r3, #0]
}
 8003932:	0018      	movs	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	b00a      	add	sp, #40	@ 0x28
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	fe00e800 	.word	0xfe00e800

08003940 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	0008      	movs	r0, r1
 800394a:	0011      	movs	r1, r2
 800394c:	607b      	str	r3, [r7, #4]
 800394e:	240a      	movs	r4, #10
 8003950:	193b      	adds	r3, r7, r4
 8003952:	1c02      	adds	r2, r0, #0
 8003954:	801a      	strh	r2, [r3, #0]
 8003956:	2009      	movs	r0, #9
 8003958:	183b      	adds	r3, r7, r0
 800395a:	1c0a      	adds	r2, r1, #0
 800395c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800395e:	193b      	adds	r3, r7, r4
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	059b      	lsls	r3, r3, #22
 8003964:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003966:	183b      	adds	r3, r7, r0
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	0419      	lsls	r1, r3, #16
 800396c:	23ff      	movs	r3, #255	@ 0xff
 800396e:	041b      	lsls	r3, r3, #16
 8003970:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003972:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397a:	4313      	orrs	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800398a:	0d51      	lsrs	r1, r2, #21
 800398c:	2280      	movs	r2, #128	@ 0x80
 800398e:	00d2      	lsls	r2, r2, #3
 8003990:	400a      	ands	r2, r1
 8003992:	4907      	ldr	r1, [pc, #28]	@ (80039b0 <I2C_TransferConfig+0x70>)
 8003994:	430a      	orrs	r2, r1
 8003996:	43d2      	mvns	r2, r2
 8003998:	401a      	ands	r2, r3
 800399a:	0011      	movs	r1, r2
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b007      	add	sp, #28
 80039ac:	bd90      	pop	{r4, r7, pc}
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	03ff63ff 	.word	0x03ff63ff

080039b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2241      	movs	r2, #65	@ 0x41
 80039c2:	5c9b      	ldrb	r3, [r3, r2]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d138      	bne.n	8003a3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2240      	movs	r2, #64	@ 0x40
 80039ce:	5c9b      	ldrb	r3, [r3, r2]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e032      	b.n	8003a3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2240      	movs	r2, #64	@ 0x40
 80039dc:	2101      	movs	r1, #1
 80039de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2241      	movs	r2, #65	@ 0x41
 80039e4:	2124      	movs	r1, #36	@ 0x24
 80039e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2101      	movs	r1, #1
 80039f4:	438a      	bics	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4911      	ldr	r1, [pc, #68]	@ (8003a48 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003a04:	400a      	ands	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6819      	ldr	r1, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2101      	movs	r1, #1
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2241      	movs	r2, #65	@ 0x41
 8003a2c:	2120      	movs	r1, #32
 8003a2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2240      	movs	r2, #64	@ 0x40
 8003a34:	2100      	movs	r1, #0
 8003a36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e000      	b.n	8003a3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
  }
}
 8003a3e:	0018      	movs	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b002      	add	sp, #8
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	ffffefff 	.word	0xffffefff

08003a4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2241      	movs	r2, #65	@ 0x41
 8003a5a:	5c9b      	ldrb	r3, [r3, r2]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d139      	bne.n	8003ad6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2240      	movs	r2, #64	@ 0x40
 8003a66:	5c9b      	ldrb	r3, [r3, r2]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e033      	b.n	8003ad8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2240      	movs	r2, #64	@ 0x40
 8003a74:	2101      	movs	r1, #1
 8003a76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2241      	movs	r2, #65	@ 0x41
 8003a7c:	2124      	movs	r1, #36	@ 0x24
 8003a7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	438a      	bics	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4a11      	ldr	r2, [pc, #68]	@ (8003ae0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2101      	movs	r1, #1
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2241      	movs	r2, #65	@ 0x41
 8003ac6:	2120      	movs	r1, #32
 8003ac8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2240      	movs	r2, #64	@ 0x40
 8003ace:	2100      	movs	r1, #0
 8003ad0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e000      	b.n	8003ad8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ad6:	2302      	movs	r3, #2
  }
}
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b004      	add	sp, #16
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	fffff0ff 	.word	0xfffff0ff

08003ae4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e0e5      	b.n	8003cc2 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2235      	movs	r2, #53	@ 0x35
 8003afa:	5c9b      	ldrb	r3, [r3, r2]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d107      	bne.n	8003b12 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2234      	movs	r2, #52	@ 0x34
 8003b06:	2100      	movs	r1, #0
 8003b08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f7fe fc0f 	bl	8002330 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2235      	movs	r2, #53	@ 0x35
 8003b16:	2102      	movs	r1, #2
 8003b18:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4969      	ldr	r1, [pc, #420]	@ (8003ccc <HAL_I2S_Init+0x1e8>)
 8003b26:	400a      	ands	r2, r1
 8003b28:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d100      	bne.n	8003b3c <HAL_I2S_Init+0x58>
 8003b3a:	e076      	b.n	8003c2a <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b44:	2310      	movs	r3, #16
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	e001      	b.n	8003b4e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d802      	bhi.n	8003b5c <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8003b5c:	2380      	movs	r3, #128	@ 0x80
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 ff5b 	bl	8004a1c <HAL_RCCEx_GetPeriphCLKFreq>
 8003b66:	0003      	movs	r3, r0
 8003b68:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	2380      	movs	r3, #128	@ 0x80
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d131      	bne.n	8003bda <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d016      	beq.n	8003bac <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	0019      	movs	r1, r3
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f7fc fabd 	bl	8000104 <__udivsi3>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	001a      	movs	r2, r3
 8003b8e:	0013      	movs	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	189b      	adds	r3, r3, r2
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	001a      	movs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	0019      	movs	r1, r3
 8003b9e:	0010      	movs	r0, r2
 8003ba0:	f7fc fab0 	bl	8000104 <__udivsi3>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	3305      	adds	r3, #5
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	e02a      	b.n	8003c02 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	0019      	movs	r1, r3
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f7fc faa6 	bl	8000104 <__udivsi3>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	001a      	movs	r2, r3
 8003bbc:	0013      	movs	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	189b      	adds	r3, r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	001a      	movs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	0019      	movs	r1, r3
 8003bcc:	0010      	movs	r0, r2
 8003bce:	f7fc fa99 	bl	8000104 <__udivsi3>
 8003bd2:	0003      	movs	r3, r0
 8003bd4:	3305      	adds	r3, #5
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	e013      	b.n	8003c02 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003bda:	6979      	ldr	r1, [r7, #20]
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f7fc fa91 	bl	8000104 <__udivsi3>
 8003be2:	0003      	movs	r3, r0
 8003be4:	001a      	movs	r2, r3
 8003be6:	0013      	movs	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	189b      	adds	r3, r3, r2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	001a      	movs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	0010      	movs	r0, r2
 8003bf8:	f7fc fa84 	bl	8000104 <__udivsi3>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	3305      	adds	r3, #5
 8003c00:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	210a      	movs	r1, #10
 8003c06:	0018      	movs	r0, r3
 8003c08:	f7fc fa7c 	bl	8000104 <__udivsi3>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2201      	movs	r2, #1
 8003c14:	4013      	ands	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	085b      	lsrs	r3, r3, #1
 8003c20:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	021b      	lsls	r3, r3, #8
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	e003      	b.n	8003c32 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d902      	bls.n	8003c3e <HAL_I2S_Init+0x15a>
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	2bff      	cmp	r3, #255	@ 0xff
 8003c3c:	d907      	bls.n	8003c4e <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c42:	2210      	movs	r2, #16
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e039      	b.n	8003cc2 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	0011      	movs	r1, r2
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	4a18      	ldr	r2, [pc, #96]	@ (8003ccc <HAL_I2S_Init+0x1e8>)
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6859      	ldr	r1, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	4319      	orrs	r1, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	4319      	orrs	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2180      	movs	r1, #128	@ 0x80
 8003c8a:	0109      	lsls	r1, r1, #4
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b30      	cmp	r3, #48	@ 0x30
 8003c96:	d003      	beq.n	8003ca0 <HAL_I2S_Init+0x1bc>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2bb0      	cmp	r3, #176	@ 0xb0
 8003c9e:	d108      	bne.n	8003cb2 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	69da      	ldr	r2, [r3, #28]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2180      	movs	r1, #128	@ 0x80
 8003cac:	0149      	lsls	r1, r1, #5
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2235      	movs	r2, #53	@ 0x35
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b008      	add	sp, #32
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	fffff040 	.word	0xfffff040

08003cd0 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cd4:	4b04      	ldr	r3, [pc, #16]	@ (8003ce8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b03      	ldr	r3, [pc, #12]	@ (8003ce8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003cda:	2180      	movs	r1, #128	@ 0x80
 8003cdc:	0049      	lsls	r1, r1, #1
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]
}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40007000 	.word	0x40007000

08003cec <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf0:	4b04      	ldr	r3, [pc, #16]	@ (8003d04 <HAL_PWR_DisableBkUpAccess+0x18>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4b03      	ldr	r3, [pc, #12]	@ (8003d04 <HAL_PWR_DisableBkUpAccess+0x18>)
 8003cf6:	4904      	ldr	r1, [pc, #16]	@ (8003d08 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]
}
 8003cfc:	46c0      	nop			@ (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	40007000 	.word	0x40007000
 8003d08:	fffffeff 	.word	0xfffffeff

08003d0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003d14:	4b19      	ldr	r3, [pc, #100]	@ (8003d7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a19      	ldr	r2, [pc, #100]	@ (8003d80 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	0019      	movs	r1, r3
 8003d1e:	4b17      	ldr	r3, [pc, #92]	@ (8003d7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	2380      	movs	r3, #128	@ 0x80
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d11f      	bne.n	8003d70 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003d30:	4b14      	ldr	r3, [pc, #80]	@ (8003d84 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	0013      	movs	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	189b      	adds	r3, r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4912      	ldr	r1, [pc, #72]	@ (8003d88 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f7fc f9e0 	bl	8000104 <__udivsi3>
 8003d44:	0003      	movs	r3, r0
 8003d46:	3301      	adds	r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d4a:	e008      	b.n	8003d5e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	e001      	b.n	8003d5e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e009      	b.n	8003d72 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d5e:	4b07      	ldr	r3, [pc, #28]	@ (8003d7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	2380      	movs	r3, #128	@ 0x80
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	401a      	ands	r2, r3
 8003d68:	2380      	movs	r3, #128	@ 0x80
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d0ed      	beq.n	8003d4c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	0018      	movs	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b004      	add	sp, #16
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	46c0      	nop			@ (mov r8, r8)
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	fffff9ff 	.word	0xfffff9ff
 8003d84:	20000068 	.word	0x20000068
 8003d88:	000f4240 	.word	0x000f4240

08003d8c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003d90:	4b03      	ldr	r3, [pc, #12]	@ (8003da0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	23e0      	movs	r3, #224	@ 0xe0
 8003d96:	01db      	lsls	r3, r3, #7
 8003d98:	4013      	ands	r3, r2
}
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021000 	.word	0x40021000

08003da4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e2fe      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d100      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x1e>
 8003dc0:	e07c      	b.n	8003ebc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dc2:	4bc3      	ldr	r3, [pc, #780]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2238      	movs	r2, #56	@ 0x38
 8003dc8:	4013      	ands	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dcc:	4bc0      	ldr	r3, [pc, #768]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d102      	bne.n	8003de2 <HAL_RCC_OscConfig+0x3e>
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d002      	beq.n	8003de8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d10b      	bne.n	8003e00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de8:	4bb9      	ldr	r3, [pc, #740]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	2380      	movs	r3, #128	@ 0x80
 8003dee:	029b      	lsls	r3, r3, #10
 8003df0:	4013      	ands	r3, r2
 8003df2:	d062      	beq.n	8003eba <HAL_RCC_OscConfig+0x116>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d15e      	bne.n	8003eba <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e2d9      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	2380      	movs	r3, #128	@ 0x80
 8003e06:	025b      	lsls	r3, r3, #9
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_OscConfig+0x78>
 8003e0c:	4bb0      	ldr	r3, [pc, #704]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4baf      	ldr	r3, [pc, #700]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003e12:	2180      	movs	r1, #128	@ 0x80
 8003e14:	0249      	lsls	r1, r1, #9
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e020      	b.n	8003e5e <HAL_RCC_OscConfig+0xba>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	23a0      	movs	r3, #160	@ 0xa0
 8003e22:	02db      	lsls	r3, r3, #11
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d10e      	bne.n	8003e46 <HAL_RCC_OscConfig+0xa2>
 8003e28:	4ba9      	ldr	r3, [pc, #676]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	4ba8      	ldr	r3, [pc, #672]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003e2e:	2180      	movs	r1, #128	@ 0x80
 8003e30:	02c9      	lsls	r1, r1, #11
 8003e32:	430a      	orrs	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	4ba6      	ldr	r3, [pc, #664]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4ba5      	ldr	r3, [pc, #660]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003e3c:	2180      	movs	r1, #128	@ 0x80
 8003e3e:	0249      	lsls	r1, r1, #9
 8003e40:	430a      	orrs	r2, r1
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	e00b      	b.n	8003e5e <HAL_RCC_OscConfig+0xba>
 8003e46:	4ba2      	ldr	r3, [pc, #648]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4ba1      	ldr	r3, [pc, #644]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003e4c:	49a1      	ldr	r1, [pc, #644]	@ (80040d4 <HAL_RCC_OscConfig+0x330>)
 8003e4e:	400a      	ands	r2, r1
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	4b9f      	ldr	r3, [pc, #636]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4b9e      	ldr	r3, [pc, #632]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003e58:	499f      	ldr	r1, [pc, #636]	@ (80040d8 <HAL_RCC_OscConfig+0x334>)
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d014      	beq.n	8003e90 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7fe fd2d 	bl	80028c4 <HAL_GetTick>
 8003e6a:	0003      	movs	r3, r0
 8003e6c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e70:	f7fe fd28 	bl	80028c4 <HAL_GetTick>
 8003e74:	0002      	movs	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	@ 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e298      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e82:	4b93      	ldr	r3, [pc, #588]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	2380      	movs	r3, #128	@ 0x80
 8003e88:	029b      	lsls	r3, r3, #10
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0xcc>
 8003e8e:	e015      	b.n	8003ebc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fe fd18 	bl	80028c4 <HAL_GetTick>
 8003e94:	0003      	movs	r3, r0
 8003e96:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e9a:	f7fe fd13 	bl	80028c4 <HAL_GetTick>
 8003e9e:	0002      	movs	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b64      	cmp	r3, #100	@ 0x64
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e283      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eac:	4b88      	ldr	r3, [pc, #544]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	2380      	movs	r3, #128	@ 0x80
 8003eb2:	029b      	lsls	r3, r3, #10
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d1f0      	bne.n	8003e9a <HAL_RCC_OscConfig+0xf6>
 8003eb8:	e000      	b.n	8003ebc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eba:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d100      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x124>
 8003ec6:	e099      	b.n	8003ffc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec8:	4b81      	ldr	r3, [pc, #516]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2238      	movs	r2, #56	@ 0x38
 8003ece:	4013      	ands	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	4013      	ands	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	2b10      	cmp	r3, #16
 8003ee0:	d102      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x144>
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d002      	beq.n	8003eee <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d135      	bne.n	8003f5a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eee:	4b78      	ldr	r3, [pc, #480]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d005      	beq.n	8003f06 <HAL_RCC_OscConfig+0x162>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e256      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f06:	4b72      	ldr	r3, [pc, #456]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	4a74      	ldr	r2, [pc, #464]	@ (80040dc <HAL_RCC_OscConfig+0x338>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	0019      	movs	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	021a      	lsls	r2, r3, #8
 8003f16:	4b6e      	ldr	r3, [pc, #440]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d112      	bne.n	8003f48 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f22:	4b6b      	ldr	r3, [pc, #428]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a6e      	ldr	r2, [pc, #440]	@ (80040e0 <HAL_RCC_OscConfig+0x33c>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	4b67      	ldr	r3, [pc, #412]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003f32:	430a      	orrs	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003f36:	4b66      	ldr	r3, [pc, #408]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	0adb      	lsrs	r3, r3, #11
 8003f3c:	2207      	movs	r2, #7
 8003f3e:	4013      	ands	r3, r2
 8003f40:	4a68      	ldr	r2, [pc, #416]	@ (80040e4 <HAL_RCC_OscConfig+0x340>)
 8003f42:	40da      	lsrs	r2, r3
 8003f44:	4b68      	ldr	r3, [pc, #416]	@ (80040e8 <HAL_RCC_OscConfig+0x344>)
 8003f46:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f48:	4b68      	ldr	r3, [pc, #416]	@ (80040ec <HAL_RCC_OscConfig+0x348>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f7fe fc5d 	bl	800280c <HAL_InitTick>
 8003f52:	1e03      	subs	r3, r0, #0
 8003f54:	d051      	beq.n	8003ffa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e22c      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d030      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f62:	4b5b      	ldr	r3, [pc, #364]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a5e      	ldr	r2, [pc, #376]	@ (80040e0 <HAL_RCC_OscConfig+0x33c>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	0019      	movs	r1, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	4b57      	ldr	r3, [pc, #348]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003f72:	430a      	orrs	r2, r1
 8003f74:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003f76:	4b56      	ldr	r3, [pc, #344]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	4b55      	ldr	r3, [pc, #340]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003f7c:	2180      	movs	r1, #128	@ 0x80
 8003f7e:	0049      	lsls	r1, r1, #1
 8003f80:	430a      	orrs	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fe fc9e 	bl	80028c4 <HAL_GetTick>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8e:	f7fe fc99 	bl	80028c4 <HAL_GetTick>
 8003f92:	0002      	movs	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e209      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fa0:	4b4b      	ldr	r3, [pc, #300]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	2380      	movs	r3, #128	@ 0x80
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d0f0      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fac:	4b48      	ldr	r3, [pc, #288]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4a4a      	ldr	r2, [pc, #296]	@ (80040dc <HAL_RCC_OscConfig+0x338>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	0019      	movs	r1, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	021a      	lsls	r2, r3, #8
 8003fbc:	4b44      	ldr	r3, [pc, #272]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	e01b      	b.n	8003ffc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003fc4:	4b42      	ldr	r3, [pc, #264]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4b41      	ldr	r3, [pc, #260]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003fca:	4949      	ldr	r1, [pc, #292]	@ (80040f0 <HAL_RCC_OscConfig+0x34c>)
 8003fcc:	400a      	ands	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fe fc78 	bl	80028c4 <HAL_GetTick>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fda:	f7fe fc73 	bl	80028c4 <HAL_GetTick>
 8003fde:	0002      	movs	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e1e3      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fec:	4b38      	ldr	r3, [pc, #224]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	2380      	movs	r3, #128	@ 0x80
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCC_OscConfig+0x236>
 8003ff8:	e000      	b.n	8003ffc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ffa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2208      	movs	r2, #8
 8004002:	4013      	ands	r3, r2
 8004004:	d047      	beq.n	8004096 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004006:	4b32      	ldr	r3, [pc, #200]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2238      	movs	r2, #56	@ 0x38
 800400c:	4013      	ands	r3, r2
 800400e:	2b18      	cmp	r3, #24
 8004010:	d10a      	bne.n	8004028 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004012:	4b2f      	ldr	r3, [pc, #188]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8004014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004016:	2202      	movs	r2, #2
 8004018:	4013      	ands	r3, r2
 800401a:	d03c      	beq.n	8004096 <HAL_RCC_OscConfig+0x2f2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d138      	bne.n	8004096 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e1c5      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d019      	beq.n	8004064 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004030:	4b27      	ldr	r3, [pc, #156]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8004032:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004034:	4b26      	ldr	r3, [pc, #152]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8004036:	2101      	movs	r1, #1
 8004038:	430a      	orrs	r2, r1
 800403a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fe fc42 	bl	80028c4 <HAL_GetTick>
 8004040:	0003      	movs	r3, r0
 8004042:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004046:	f7fe fc3d 	bl	80028c4 <HAL_GetTick>
 800404a:	0002      	movs	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e1ad      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004058:	4b1d      	ldr	r3, [pc, #116]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 800405a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800405c:	2202      	movs	r2, #2
 800405e:	4013      	ands	r3, r2
 8004060:	d0f1      	beq.n	8004046 <HAL_RCC_OscConfig+0x2a2>
 8004062:	e018      	b.n	8004096 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004064:	4b1a      	ldr	r3, [pc, #104]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 8004066:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004068:	4b19      	ldr	r3, [pc, #100]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 800406a:	2101      	movs	r1, #1
 800406c:	438a      	bics	r2, r1
 800406e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fe fc28 	bl	80028c4 <HAL_GetTick>
 8004074:	0003      	movs	r3, r0
 8004076:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407a:	f7fe fc23 	bl	80028c4 <HAL_GetTick>
 800407e:	0002      	movs	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e193      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800408c:	4b10      	ldr	r3, [pc, #64]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 800408e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004090:	2202      	movs	r2, #2
 8004092:	4013      	ands	r3, r2
 8004094:	d1f1      	bne.n	800407a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2204      	movs	r2, #4
 800409c:	4013      	ands	r3, r2
 800409e:	d100      	bne.n	80040a2 <HAL_RCC_OscConfig+0x2fe>
 80040a0:	e0c6      	b.n	8004230 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040a2:	231f      	movs	r3, #31
 80040a4:	18fb      	adds	r3, r7, r3
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80040aa:	4b09      	ldr	r3, [pc, #36]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2238      	movs	r2, #56	@ 0x38
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d11e      	bne.n	80040f4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80040b6:	4b06      	ldr	r3, [pc, #24]	@ (80040d0 <HAL_RCC_OscConfig+0x32c>)
 80040b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ba:	2202      	movs	r2, #2
 80040bc:	4013      	ands	r3, r2
 80040be:	d100      	bne.n	80040c2 <HAL_RCC_OscConfig+0x31e>
 80040c0:	e0b6      	b.n	8004230 <HAL_RCC_OscConfig+0x48c>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d000      	beq.n	80040cc <HAL_RCC_OscConfig+0x328>
 80040ca:	e0b1      	b.n	8004230 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e171      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
 80040d0:	40021000 	.word	0x40021000
 80040d4:	fffeffff 	.word	0xfffeffff
 80040d8:	fffbffff 	.word	0xfffbffff
 80040dc:	ffff80ff 	.word	0xffff80ff
 80040e0:	ffffc7ff 	.word	0xffffc7ff
 80040e4:	00f42400 	.word	0x00f42400
 80040e8:	20000068 	.word	0x20000068
 80040ec:	2000006c 	.word	0x2000006c
 80040f0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040f4:	4bb1      	ldr	r3, [pc, #708]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 80040f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040f8:	2380      	movs	r3, #128	@ 0x80
 80040fa:	055b      	lsls	r3, r3, #21
 80040fc:	4013      	ands	r3, r2
 80040fe:	d101      	bne.n	8004104 <HAL_RCC_OscConfig+0x360>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_RCC_OscConfig+0x362>
 8004104:	2300      	movs	r3, #0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d011      	beq.n	800412e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800410a:	4bac      	ldr	r3, [pc, #688]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 800410c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800410e:	4bab      	ldr	r3, [pc, #684]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 8004110:	2180      	movs	r1, #128	@ 0x80
 8004112:	0549      	lsls	r1, r1, #21
 8004114:	430a      	orrs	r2, r1
 8004116:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004118:	4ba8      	ldr	r3, [pc, #672]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 800411a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800411c:	2380      	movs	r3, #128	@ 0x80
 800411e:	055b      	lsls	r3, r3, #21
 8004120:	4013      	ands	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004126:	231f      	movs	r3, #31
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800412e:	4ba4      	ldr	r3, [pc, #656]	@ (80043c0 <HAL_RCC_OscConfig+0x61c>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	2380      	movs	r3, #128	@ 0x80
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4013      	ands	r3, r2
 8004138:	d11a      	bne.n	8004170 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800413a:	4ba1      	ldr	r3, [pc, #644]	@ (80043c0 <HAL_RCC_OscConfig+0x61c>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	4ba0      	ldr	r3, [pc, #640]	@ (80043c0 <HAL_RCC_OscConfig+0x61c>)
 8004140:	2180      	movs	r1, #128	@ 0x80
 8004142:	0049      	lsls	r1, r1, #1
 8004144:	430a      	orrs	r2, r1
 8004146:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004148:	f7fe fbbc 	bl	80028c4 <HAL_GetTick>
 800414c:	0003      	movs	r3, r0
 800414e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004152:	f7fe fbb7 	bl	80028c4 <HAL_GetTick>
 8004156:	0002      	movs	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e127      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004164:	4b96      	ldr	r3, [pc, #600]	@ (80043c0 <HAL_RCC_OscConfig+0x61c>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	2380      	movs	r3, #128	@ 0x80
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	4013      	ands	r3, r2
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d106      	bne.n	8004186 <HAL_RCC_OscConfig+0x3e2>
 8004178:	4b90      	ldr	r3, [pc, #576]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 800417a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800417c:	4b8f      	ldr	r3, [pc, #572]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 800417e:	2101      	movs	r1, #1
 8004180:	430a      	orrs	r2, r1
 8004182:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004184:	e01c      	b.n	80041c0 <HAL_RCC_OscConfig+0x41c>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b05      	cmp	r3, #5
 800418c:	d10c      	bne.n	80041a8 <HAL_RCC_OscConfig+0x404>
 800418e:	4b8b      	ldr	r3, [pc, #556]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 8004190:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004192:	4b8a      	ldr	r3, [pc, #552]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 8004194:	2104      	movs	r1, #4
 8004196:	430a      	orrs	r2, r1
 8004198:	65da      	str	r2, [r3, #92]	@ 0x5c
 800419a:	4b88      	ldr	r3, [pc, #544]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 800419c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800419e:	4b87      	ldr	r3, [pc, #540]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 80041a0:	2101      	movs	r1, #1
 80041a2:	430a      	orrs	r2, r1
 80041a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041a6:	e00b      	b.n	80041c0 <HAL_RCC_OscConfig+0x41c>
 80041a8:	4b84      	ldr	r3, [pc, #528]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 80041aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80041ac:	4b83      	ldr	r3, [pc, #524]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 80041ae:	2101      	movs	r1, #1
 80041b0:	438a      	bics	r2, r1
 80041b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041b4:	4b81      	ldr	r3, [pc, #516]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 80041b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80041b8:	4b80      	ldr	r3, [pc, #512]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 80041ba:	2104      	movs	r1, #4
 80041bc:	438a      	bics	r2, r1
 80041be:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d014      	beq.n	80041f2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fe fb7c 	bl	80028c4 <HAL_GetTick>
 80041cc:	0003      	movs	r3, r0
 80041ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041d0:	e009      	b.n	80041e6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d2:	f7fe fb77 	bl	80028c4 <HAL_GetTick>
 80041d6:	0002      	movs	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	4a79      	ldr	r2, [pc, #484]	@ (80043c4 <HAL_RCC_OscConfig+0x620>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e0e6      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e6:	4b75      	ldr	r3, [pc, #468]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 80041e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ea:	2202      	movs	r2, #2
 80041ec:	4013      	ands	r3, r2
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCC_OscConfig+0x42e>
 80041f0:	e013      	b.n	800421a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f2:	f7fe fb67 	bl	80028c4 <HAL_GetTick>
 80041f6:	0003      	movs	r3, r0
 80041f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041fa:	e009      	b.n	8004210 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fc:	f7fe fb62 	bl	80028c4 <HAL_GetTick>
 8004200:	0002      	movs	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	4a6f      	ldr	r2, [pc, #444]	@ (80043c4 <HAL_RCC_OscConfig+0x620>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e0d1      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004210:	4b6a      	ldr	r3, [pc, #424]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 8004212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004214:	2202      	movs	r2, #2
 8004216:	4013      	ands	r3, r2
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800421a:	231f      	movs	r3, #31
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d105      	bne.n	8004230 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004224:	4b65      	ldr	r3, [pc, #404]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 8004226:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004228:	4b64      	ldr	r3, [pc, #400]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 800422a:	4967      	ldr	r1, [pc, #412]	@ (80043c8 <HAL_RCC_OscConfig+0x624>)
 800422c:	400a      	ands	r2, r1
 800422e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d100      	bne.n	800423a <HAL_RCC_OscConfig+0x496>
 8004238:	e0bb      	b.n	80043b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800423a:	4b60      	ldr	r3, [pc, #384]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2238      	movs	r2, #56	@ 0x38
 8004240:	4013      	ands	r3, r2
 8004242:	2b10      	cmp	r3, #16
 8004244:	d100      	bne.n	8004248 <HAL_RCC_OscConfig+0x4a4>
 8004246:	e07b      	b.n	8004340 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d156      	bne.n	80042fe <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004250:	4b5a      	ldr	r3, [pc, #360]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4b59      	ldr	r3, [pc, #356]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 8004256:	495d      	ldr	r1, [pc, #372]	@ (80043cc <HAL_RCC_OscConfig+0x628>)
 8004258:	400a      	ands	r2, r1
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fe fb32 	bl	80028c4 <HAL_GetTick>
 8004260:	0003      	movs	r3, r0
 8004262:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004266:	f7fe fb2d 	bl	80028c4 <HAL_GetTick>
 800426a:	0002      	movs	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e09d      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004278:	4b50      	ldr	r3, [pc, #320]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	2380      	movs	r3, #128	@ 0x80
 800427e:	049b      	lsls	r3, r3, #18
 8004280:	4013      	ands	r3, r2
 8004282:	d1f0      	bne.n	8004266 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004284:	4b4d      	ldr	r3, [pc, #308]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a51      	ldr	r2, [pc, #324]	@ (80043d0 <HAL_RCC_OscConfig+0x62c>)
 800428a:	4013      	ands	r3, r2
 800428c:	0019      	movs	r1, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1a      	ldr	r2, [r3, #32]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b0:	431a      	orrs	r2, r3
 80042b2:	4b42      	ldr	r3, [pc, #264]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 80042b4:	430a      	orrs	r2, r1
 80042b6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042b8:	4b40      	ldr	r3, [pc, #256]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b3f      	ldr	r3, [pc, #252]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 80042be:	2180      	movs	r1, #128	@ 0x80
 80042c0:	0449      	lsls	r1, r1, #17
 80042c2:	430a      	orrs	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80042c6:	4b3d      	ldr	r3, [pc, #244]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	4b3c      	ldr	r3, [pc, #240]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 80042cc:	2180      	movs	r1, #128	@ 0x80
 80042ce:	0549      	lsls	r1, r1, #21
 80042d0:	430a      	orrs	r2, r1
 80042d2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fe faf6 	bl	80028c4 <HAL_GetTick>
 80042d8:	0003      	movs	r3, r0
 80042da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042de:	f7fe faf1 	bl	80028c4 <HAL_GetTick>
 80042e2:	0002      	movs	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e061      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042f0:	4b32      	ldr	r3, [pc, #200]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	2380      	movs	r3, #128	@ 0x80
 80042f6:	049b      	lsls	r3, r3, #18
 80042f8:	4013      	ands	r3, r2
 80042fa:	d0f0      	beq.n	80042de <HAL_RCC_OscConfig+0x53a>
 80042fc:	e059      	b.n	80043b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fe:	4b2f      	ldr	r3, [pc, #188]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	4b2e      	ldr	r3, [pc, #184]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 8004304:	4931      	ldr	r1, [pc, #196]	@ (80043cc <HAL_RCC_OscConfig+0x628>)
 8004306:	400a      	ands	r2, r1
 8004308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430a:	f7fe fadb 	bl	80028c4 <HAL_GetTick>
 800430e:	0003      	movs	r3, r0
 8004310:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004314:	f7fe fad6 	bl	80028c4 <HAL_GetTick>
 8004318:	0002      	movs	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e046      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004326:	4b25      	ldr	r3, [pc, #148]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	2380      	movs	r3, #128	@ 0x80
 800432c:	049b      	lsls	r3, r3, #18
 800432e:	4013      	ands	r3, r2
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004332:	4b22      	ldr	r3, [pc, #136]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	4b21      	ldr	r3, [pc, #132]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 8004338:	4926      	ldr	r1, [pc, #152]	@ (80043d4 <HAL_RCC_OscConfig+0x630>)
 800433a:	400a      	ands	r2, r1
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	e038      	b.n	80043b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e033      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800434c:	4b1b      	ldr	r3, [pc, #108]	@ (80043bc <HAL_RCC_OscConfig+0x618>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2203      	movs	r2, #3
 8004356:	401a      	ands	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	429a      	cmp	r2, r3
 800435e:	d126      	bne.n	80043ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2270      	movs	r2, #112	@ 0x70
 8004364:	401a      	ands	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436a:	429a      	cmp	r2, r3
 800436c:	d11f      	bne.n	80043ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	23fe      	movs	r3, #254	@ 0xfe
 8004372:	01db      	lsls	r3, r3, #7
 8004374:	401a      	ands	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800437c:	429a      	cmp	r2, r3
 800437e:	d116      	bne.n	80043ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	23f8      	movs	r3, #248	@ 0xf8
 8004384:	039b      	lsls	r3, r3, #14
 8004386:	401a      	ands	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800438c:	429a      	cmp	r2, r3
 800438e:	d10e      	bne.n	80043ae <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	23e0      	movs	r3, #224	@ 0xe0
 8004394:	051b      	lsls	r3, r3, #20
 8004396:	401a      	ands	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d106      	bne.n	80043ae <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	0f5b      	lsrs	r3, r3, #29
 80043a4:	075a      	lsls	r2, r3, #29
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d001      	beq.n	80043b2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	0018      	movs	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b008      	add	sp, #32
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40007000 	.word	0x40007000
 80043c4:	00001388 	.word	0x00001388
 80043c8:	efffffff 	.word	0xefffffff
 80043cc:	feffffff 	.word	0xfeffffff
 80043d0:	11c1808c 	.word	0x11c1808c
 80043d4:	eefefffc 	.word	0xeefefffc

080043d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0e9      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043ec:	4b76      	ldr	r3, [pc, #472]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2207      	movs	r2, #7
 80043f2:	4013      	ands	r3, r2
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d91e      	bls.n	8004438 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fa:	4b73      	ldr	r3, [pc, #460]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2207      	movs	r2, #7
 8004400:	4393      	bics	r3, r2
 8004402:	0019      	movs	r1, r3
 8004404:	4b70      	ldr	r3, [pc, #448]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800440c:	f7fe fa5a 	bl	80028c4 <HAL_GetTick>
 8004410:	0003      	movs	r3, r0
 8004412:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004414:	e009      	b.n	800442a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004416:	f7fe fa55 	bl	80028c4 <HAL_GetTick>
 800441a:	0002      	movs	r2, r0
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	4a6a      	ldr	r2, [pc, #424]	@ (80045cc <HAL_RCC_ClockConfig+0x1f4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d901      	bls.n	800442a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e0ca      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800442a:	4b67      	ldr	r3, [pc, #412]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2207      	movs	r2, #7
 8004430:	4013      	ands	r3, r2
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d1ee      	bne.n	8004416 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2202      	movs	r2, #2
 800443e:	4013      	ands	r3, r2
 8004440:	d015      	beq.n	800446e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2204      	movs	r2, #4
 8004448:	4013      	ands	r3, r2
 800444a:	d006      	beq.n	800445a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800444c:	4b60      	ldr	r3, [pc, #384]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	4b5f      	ldr	r3, [pc, #380]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004452:	21e0      	movs	r1, #224	@ 0xe0
 8004454:	01c9      	lsls	r1, r1, #7
 8004456:	430a      	orrs	r2, r1
 8004458:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800445a:	4b5d      	ldr	r3, [pc, #372]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	4a5d      	ldr	r2, [pc, #372]	@ (80045d4 <HAL_RCC_ClockConfig+0x1fc>)
 8004460:	4013      	ands	r3, r2
 8004462:	0019      	movs	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	4b59      	ldr	r3, [pc, #356]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 800446a:	430a      	orrs	r2, r1
 800446c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2201      	movs	r2, #1
 8004474:	4013      	ands	r3, r2
 8004476:	d057      	beq.n	8004528 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004480:	4b53      	ldr	r3, [pc, #332]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	2380      	movs	r3, #128	@ 0x80
 8004486:	029b      	lsls	r3, r3, #10
 8004488:	4013      	ands	r3, r2
 800448a:	d12b      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e097      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d107      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004498:	4b4d      	ldr	r3, [pc, #308]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	2380      	movs	r3, #128	@ 0x80
 800449e:	049b      	lsls	r3, r3, #18
 80044a0:	4013      	ands	r3, r2
 80044a2:	d11f      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e08b      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044b0:	4b47      	ldr	r3, [pc, #284]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	2380      	movs	r3, #128	@ 0x80
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4013      	ands	r3, r2
 80044ba:	d113      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e07f      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d106      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c8:	4b41      	ldr	r3, [pc, #260]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 80044ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044cc:	2202      	movs	r2, #2
 80044ce:	4013      	ands	r3, r2
 80044d0:	d108      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e074      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d6:	4b3e      	ldr	r3, [pc, #248]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 80044d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044da:	2202      	movs	r2, #2
 80044dc:	4013      	ands	r3, r2
 80044de:	d101      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e06d      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044e4:	4b3a      	ldr	r3, [pc, #232]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2207      	movs	r2, #7
 80044ea:	4393      	bics	r3, r2
 80044ec:	0019      	movs	r1, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	4b37      	ldr	r3, [pc, #220]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 80044f4:	430a      	orrs	r2, r1
 80044f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f8:	f7fe f9e4 	bl	80028c4 <HAL_GetTick>
 80044fc:	0003      	movs	r3, r0
 80044fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004500:	e009      	b.n	8004516 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004502:	f7fe f9df 	bl	80028c4 <HAL_GetTick>
 8004506:	0002      	movs	r2, r0
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	4a2f      	ldr	r2, [pc, #188]	@ (80045cc <HAL_RCC_ClockConfig+0x1f4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e054      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004516:	4b2e      	ldr	r3, [pc, #184]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2238      	movs	r2, #56	@ 0x38
 800451c:	401a      	ands	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	429a      	cmp	r2, r3
 8004526:	d1ec      	bne.n	8004502 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004528:	4b27      	ldr	r3, [pc, #156]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2207      	movs	r2, #7
 800452e:	4013      	ands	r3, r2
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d21e      	bcs.n	8004574 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004536:	4b24      	ldr	r3, [pc, #144]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2207      	movs	r2, #7
 800453c:	4393      	bics	r3, r2
 800453e:	0019      	movs	r1, r3
 8004540:	4b21      	ldr	r3, [pc, #132]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004548:	f7fe f9bc 	bl	80028c4 <HAL_GetTick>
 800454c:	0003      	movs	r3, r0
 800454e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004550:	e009      	b.n	8004566 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004552:	f7fe f9b7 	bl	80028c4 <HAL_GetTick>
 8004556:	0002      	movs	r2, r0
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	4a1b      	ldr	r2, [pc, #108]	@ (80045cc <HAL_RCC_ClockConfig+0x1f4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e02c      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004566:	4b18      	ldr	r3, [pc, #96]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2207      	movs	r2, #7
 800456c:	4013      	ands	r3, r2
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d1ee      	bne.n	8004552 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2204      	movs	r2, #4
 800457a:	4013      	ands	r3, r2
 800457c:	d009      	beq.n	8004592 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800457e:	4b14      	ldr	r3, [pc, #80]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	4a15      	ldr	r2, [pc, #84]	@ (80045d8 <HAL_RCC_ClockConfig+0x200>)
 8004584:	4013      	ands	r3, r2
 8004586:	0019      	movs	r1, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	4b10      	ldr	r3, [pc, #64]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 800458e:	430a      	orrs	r2, r1
 8004590:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004592:	f000 f829 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8004596:	0001      	movs	r1, r0
 8004598:	4b0d      	ldr	r3, [pc, #52]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	0a1b      	lsrs	r3, r3, #8
 800459e:	220f      	movs	r2, #15
 80045a0:	401a      	ands	r2, r3
 80045a2:	4b0e      	ldr	r3, [pc, #56]	@ (80045dc <HAL_RCC_ClockConfig+0x204>)
 80045a4:	0092      	lsls	r2, r2, #2
 80045a6:	58d3      	ldr	r3, [r2, r3]
 80045a8:	221f      	movs	r2, #31
 80045aa:	4013      	ands	r3, r2
 80045ac:	000a      	movs	r2, r1
 80045ae:	40da      	lsrs	r2, r3
 80045b0:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <HAL_RCC_ClockConfig+0x208>)
 80045b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80045b4:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <HAL_RCC_ClockConfig+0x20c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7fe f927 	bl	800280c <HAL_InitTick>
 80045be:	0003      	movs	r3, r0
}
 80045c0:	0018      	movs	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b004      	add	sp, #16
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40022000 	.word	0x40022000
 80045cc:	00001388 	.word	0x00001388
 80045d0:	40021000 	.word	0x40021000
 80045d4:	fffff0ff 	.word	0xfffff0ff
 80045d8:	ffff8fff 	.word	0xffff8fff
 80045dc:	0800708c 	.word	0x0800708c
 80045e0:	20000068 	.word	0x20000068
 80045e4:	2000006c 	.word	0x2000006c

080045e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045ee:	4b3c      	ldr	r3, [pc, #240]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2238      	movs	r2, #56	@ 0x38
 80045f4:	4013      	ands	r3, r2
 80045f6:	d10f      	bne.n	8004618 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80045f8:	4b39      	ldr	r3, [pc, #228]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	0adb      	lsrs	r3, r3, #11
 80045fe:	2207      	movs	r2, #7
 8004600:	4013      	ands	r3, r2
 8004602:	2201      	movs	r2, #1
 8004604:	409a      	lsls	r2, r3
 8004606:	0013      	movs	r3, r2
 8004608:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800460a:	6839      	ldr	r1, [r7, #0]
 800460c:	4835      	ldr	r0, [pc, #212]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800460e:	f7fb fd79 	bl	8000104 <__udivsi3>
 8004612:	0003      	movs	r3, r0
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	e05d      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004618:	4b31      	ldr	r3, [pc, #196]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2238      	movs	r2, #56	@ 0x38
 800461e:	4013      	ands	r3, r2
 8004620:	2b08      	cmp	r3, #8
 8004622:	d102      	bne.n	800462a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004624:	4b2f      	ldr	r3, [pc, #188]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	e054      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800462a:	4b2d      	ldr	r3, [pc, #180]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2238      	movs	r2, #56	@ 0x38
 8004630:	4013      	ands	r3, r2
 8004632:	2b10      	cmp	r3, #16
 8004634:	d138      	bne.n	80046a8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004636:	4b2a      	ldr	r3, [pc, #168]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2203      	movs	r2, #3
 800463c:	4013      	ands	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004640:	4b27      	ldr	r3, [pc, #156]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	2207      	movs	r2, #7
 8004648:	4013      	ands	r3, r2
 800464a:	3301      	adds	r3, #1
 800464c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b03      	cmp	r3, #3
 8004652:	d10d      	bne.n	8004670 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004654:	68b9      	ldr	r1, [r7, #8]
 8004656:	4823      	ldr	r0, [pc, #140]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004658:	f7fb fd54 	bl	8000104 <__udivsi3>
 800465c:	0003      	movs	r3, r0
 800465e:	0019      	movs	r1, r3
 8004660:	4b1f      	ldr	r3, [pc, #124]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	0a1b      	lsrs	r3, r3, #8
 8004666:	227f      	movs	r2, #127	@ 0x7f
 8004668:	4013      	ands	r3, r2
 800466a:	434b      	muls	r3, r1
 800466c:	617b      	str	r3, [r7, #20]
        break;
 800466e:	e00d      	b.n	800468c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	481c      	ldr	r0, [pc, #112]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004674:	f7fb fd46 	bl	8000104 <__udivsi3>
 8004678:	0003      	movs	r3, r0
 800467a:	0019      	movs	r1, r3
 800467c:	4b18      	ldr	r3, [pc, #96]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	0a1b      	lsrs	r3, r3, #8
 8004682:	227f      	movs	r2, #127	@ 0x7f
 8004684:	4013      	ands	r3, r2
 8004686:	434b      	muls	r3, r1
 8004688:	617b      	str	r3, [r7, #20]
        break;
 800468a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800468c:	4b14      	ldr	r3, [pc, #80]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	0f5b      	lsrs	r3, r3, #29
 8004692:	2207      	movs	r2, #7
 8004694:	4013      	ands	r3, r2
 8004696:	3301      	adds	r3, #1
 8004698:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	6978      	ldr	r0, [r7, #20]
 800469e:	f7fb fd31 	bl	8000104 <__udivsi3>
 80046a2:	0003      	movs	r3, r0
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	e015      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80046a8:	4b0d      	ldr	r3, [pc, #52]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2238      	movs	r2, #56	@ 0x38
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d103      	bne.n	80046bc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80046b4:	2380      	movs	r3, #128	@ 0x80
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	e00b      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80046bc:	4b08      	ldr	r3, [pc, #32]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2238      	movs	r2, #56	@ 0x38
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b18      	cmp	r3, #24
 80046c6:	d103      	bne.n	80046d0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80046c8:	23fa      	movs	r3, #250	@ 0xfa
 80046ca:	01db      	lsls	r3, r3, #7
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	e001      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046d4:	693b      	ldr	r3, [r7, #16]
}
 80046d6:	0018      	movs	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	b006      	add	sp, #24
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	40021000 	.word	0x40021000
 80046e4:	00f42400 	.word	0x00f42400

080046e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046ec:	4b02      	ldr	r3, [pc, #8]	@ (80046f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80046ee:	681b      	ldr	r3, [r3, #0]
}
 80046f0:	0018      	movs	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	46c0      	nop			@ (mov r8, r8)
 80046f8:	20000068 	.word	0x20000068

080046fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046fc:	b5b0      	push	{r4, r5, r7, lr}
 80046fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004700:	f7ff fff2 	bl	80046e8 <HAL_RCC_GetHCLKFreq>
 8004704:	0004      	movs	r4, r0
 8004706:	f7ff fb41 	bl	8003d8c <LL_RCC_GetAPB1Prescaler>
 800470a:	0003      	movs	r3, r0
 800470c:	0b1a      	lsrs	r2, r3, #12
 800470e:	4b05      	ldr	r3, [pc, #20]	@ (8004724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004710:	0092      	lsls	r2, r2, #2
 8004712:	58d3      	ldr	r3, [r2, r3]
 8004714:	221f      	movs	r2, #31
 8004716:	4013      	ands	r3, r2
 8004718:	40dc      	lsrs	r4, r3
 800471a:	0023      	movs	r3, r4
}
 800471c:	0018      	movs	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	bdb0      	pop	{r4, r5, r7, pc}
 8004722:	46c0      	nop			@ (mov r8, r8)
 8004724:	080070cc 	.word	0x080070cc

08004728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004730:	2313      	movs	r3, #19
 8004732:	18fb      	adds	r3, r7, r3
 8004734:	2200      	movs	r2, #0
 8004736:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004738:	2312      	movs	r3, #18
 800473a:	18fb      	adds	r3, r7, r3
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	2380      	movs	r3, #128	@ 0x80
 8004746:	029b      	lsls	r3, r3, #10
 8004748:	4013      	ands	r3, r2
 800474a:	d100      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800474c:	e0a3      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474e:	2011      	movs	r0, #17
 8004750:	183b      	adds	r3, r7, r0
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004756:	4ba5      	ldr	r3, [pc, #660]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004758:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800475a:	2380      	movs	r3, #128	@ 0x80
 800475c:	055b      	lsls	r3, r3, #21
 800475e:	4013      	ands	r3, r2
 8004760:	d110      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004762:	4ba2      	ldr	r3, [pc, #648]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004764:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004766:	4ba1      	ldr	r3, [pc, #644]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004768:	2180      	movs	r1, #128	@ 0x80
 800476a:	0549      	lsls	r1, r1, #21
 800476c:	430a      	orrs	r2, r1
 800476e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004770:	4b9e      	ldr	r3, [pc, #632]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004772:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004774:	2380      	movs	r3, #128	@ 0x80
 8004776:	055b      	lsls	r3, r3, #21
 8004778:	4013      	ands	r3, r2
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800477e:	183b      	adds	r3, r7, r0
 8004780:	2201      	movs	r2, #1
 8004782:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004784:	4b9a      	ldr	r3, [pc, #616]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	4b99      	ldr	r3, [pc, #612]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800478a:	2180      	movs	r1, #128	@ 0x80
 800478c:	0049      	lsls	r1, r1, #1
 800478e:	430a      	orrs	r2, r1
 8004790:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004792:	f7fe f897 	bl	80028c4 <HAL_GetTick>
 8004796:	0003      	movs	r3, r0
 8004798:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800479a:	e00b      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479c:	f7fe f892 	bl	80028c4 <HAL_GetTick>
 80047a0:	0002      	movs	r2, r0
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d904      	bls.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80047aa:	2313      	movs	r3, #19
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	2203      	movs	r2, #3
 80047b0:	701a      	strb	r2, [r3, #0]
        break;
 80047b2:	e005      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047b4:	4b8e      	ldr	r3, [pc, #568]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	2380      	movs	r3, #128	@ 0x80
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	4013      	ands	r3, r2
 80047be:	d0ed      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80047c0:	2313      	movs	r3, #19
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d154      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047ca:	4b88      	ldr	r3, [pc, #544]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047ce:	23c0      	movs	r3, #192	@ 0xc0
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4013      	ands	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d019      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d014      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047e6:	4b81      	ldr	r3, [pc, #516]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ea:	4a82      	ldr	r2, [pc, #520]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047f0:	4b7e      	ldr	r3, [pc, #504]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047f4:	4b7d      	ldr	r3, [pc, #500]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047f6:	2180      	movs	r1, #128	@ 0x80
 80047f8:	0249      	lsls	r1, r1, #9
 80047fa:	430a      	orrs	r2, r1
 80047fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047fe:	4b7b      	ldr	r3, [pc, #492]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004800:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004802:	4b7a      	ldr	r3, [pc, #488]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004804:	497c      	ldr	r1, [pc, #496]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004806:	400a      	ands	r2, r1
 8004808:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800480a:	4b78      	ldr	r3, [pc, #480]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2201      	movs	r2, #1
 8004814:	4013      	ands	r3, r2
 8004816:	d016      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fe f854 	bl	80028c4 <HAL_GetTick>
 800481c:	0003      	movs	r3, r0
 800481e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004820:	e00c      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fe f84f 	bl	80028c4 <HAL_GetTick>
 8004826:	0002      	movs	r2, r0
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	4a73      	ldr	r2, [pc, #460]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d904      	bls.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004832:	2313      	movs	r3, #19
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	2203      	movs	r2, #3
 8004838:	701a      	strb	r2, [r3, #0]
            break;
 800483a:	e004      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483c:	4b6b      	ldr	r3, [pc, #428]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800483e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004840:	2202      	movs	r2, #2
 8004842:	4013      	ands	r3, r2
 8004844:	d0ed      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004846:	2313      	movs	r3, #19
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10a      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004850:	4b66      	ldr	r3, [pc, #408]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004854:	4a67      	ldr	r2, [pc, #412]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004856:	4013      	ands	r3, r2
 8004858:	0019      	movs	r1, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800485e:	4b63      	ldr	r3, [pc, #396]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004860:	430a      	orrs	r2, r1
 8004862:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004864:	e00c      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004866:	2312      	movs	r3, #18
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	2213      	movs	r2, #19
 800486c:	18ba      	adds	r2, r7, r2
 800486e:	7812      	ldrb	r2, [r2, #0]
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	e005      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004874:	2312      	movs	r3, #18
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	2213      	movs	r2, #19
 800487a:	18ba      	adds	r2, r7, r2
 800487c:	7812      	ldrb	r2, [r2, #0]
 800487e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004880:	2311      	movs	r3, #17
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d105      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800488a:	4b58      	ldr	r3, [pc, #352]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800488c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800488e:	4b57      	ldr	r3, [pc, #348]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004890:	495b      	ldr	r1, [pc, #364]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004892:	400a      	ands	r2, r1
 8004894:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2201      	movs	r2, #1
 800489c:	4013      	ands	r3, r2
 800489e:	d009      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048a0:	4b52      	ldr	r3, [pc, #328]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a4:	2203      	movs	r2, #3
 80048a6:	4393      	bics	r3, r2
 80048a8:	0019      	movs	r1, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	4b4f      	ldr	r3, [pc, #316]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048b0:	430a      	orrs	r2, r1
 80048b2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2210      	movs	r2, #16
 80048ba:	4013      	ands	r3, r2
 80048bc:	d009      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048be:	4b4b      	ldr	r3, [pc, #300]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c2:	4a50      	ldr	r2, [pc, #320]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	0019      	movs	r1, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	4b47      	ldr	r3, [pc, #284]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048ce:	430a      	orrs	r2, r1
 80048d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	2380      	movs	r3, #128	@ 0x80
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4013      	ands	r3, r2
 80048dc:	d009      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048de:	4b43      	ldr	r3, [pc, #268]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e2:	4a49      	ldr	r2, [pc, #292]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	0019      	movs	r1, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	4b3f      	ldr	r3, [pc, #252]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048ee:	430a      	orrs	r2, r1
 80048f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	2380      	movs	r3, #128	@ 0x80
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	4013      	ands	r3, r2
 80048fc:	d009      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048fe:	4b3b      	ldr	r3, [pc, #236]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004902:	4a42      	ldr	r2, [pc, #264]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004904:	4013      	ands	r3, r2
 8004906:	0019      	movs	r1, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699a      	ldr	r2, [r3, #24]
 800490c:	4b37      	ldr	r3, [pc, #220]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800490e:	430a      	orrs	r2, r1
 8004910:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2220      	movs	r2, #32
 8004918:	4013      	ands	r3, r2
 800491a:	d009      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800491c:	4b33      	ldr	r3, [pc, #204]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800491e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004920:	4a3b      	ldr	r2, [pc, #236]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004922:	4013      	ands	r3, r2
 8004924:	0019      	movs	r1, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	4b30      	ldr	r3, [pc, #192]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800492c:	430a      	orrs	r2, r1
 800492e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	2380      	movs	r3, #128	@ 0x80
 8004936:	01db      	lsls	r3, r3, #7
 8004938:	4013      	ands	r3, r2
 800493a:	d015      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800493c:	4b2b      	ldr	r3, [pc, #172]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800493e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	0899      	lsrs	r1, r3, #2
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	4b28      	ldr	r3, [pc, #160]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800494a:	430a      	orrs	r2, r1
 800494c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69da      	ldr	r2, [r3, #28]
 8004952:	2380      	movs	r3, #128	@ 0x80
 8004954:	05db      	lsls	r3, r3, #23
 8004956:	429a      	cmp	r2, r3
 8004958:	d106      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800495a:	4b24      	ldr	r3, [pc, #144]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	4b23      	ldr	r3, [pc, #140]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004960:	2180      	movs	r1, #128	@ 0x80
 8004962:	0249      	lsls	r1, r1, #9
 8004964:	430a      	orrs	r2, r1
 8004966:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	2380      	movs	r3, #128	@ 0x80
 800496e:	039b      	lsls	r3, r3, #14
 8004970:	4013      	ands	r3, r2
 8004972:	d016      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004974:	4b1d      	ldr	r3, [pc, #116]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004978:	4a26      	ldr	r2, [pc, #152]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800497a:	4013      	ands	r3, r2
 800497c:	0019      	movs	r1, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1a      	ldr	r2, [r3, #32]
 8004982:	4b1a      	ldr	r3, [pc, #104]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004984:	430a      	orrs	r2, r1
 8004986:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1a      	ldr	r2, [r3, #32]
 800498c:	2380      	movs	r3, #128	@ 0x80
 800498e:	03db      	lsls	r3, r3, #15
 8004990:	429a      	cmp	r2, r3
 8004992:	d106      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004994:	4b15      	ldr	r3, [pc, #84]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	4b14      	ldr	r3, [pc, #80]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800499a:	2180      	movs	r1, #128	@ 0x80
 800499c:	0449      	lsls	r1, r1, #17
 800499e:	430a      	orrs	r2, r1
 80049a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	2380      	movs	r3, #128	@ 0x80
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	4013      	ands	r3, r2
 80049ac:	d016      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80049ae:	4b0f      	ldr	r3, [pc, #60]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b2:	4a19      	ldr	r2, [pc, #100]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	0019      	movs	r1, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049be:	430a      	orrs	r2, r1
 80049c0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	2380      	movs	r3, #128	@ 0x80
 80049c8:	01db      	lsls	r3, r3, #7
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d106      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80049ce:	4b07      	ldr	r3, [pc, #28]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	4b06      	ldr	r3, [pc, #24]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049d4:	2180      	movs	r1, #128	@ 0x80
 80049d6:	0249      	lsls	r1, r1, #9
 80049d8:	430a      	orrs	r2, r1
 80049da:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80049dc:	2312      	movs	r3, #18
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	781b      	ldrb	r3, [r3, #0]
}
 80049e2:	0018      	movs	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	b006      	add	sp, #24
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	46c0      	nop			@ (mov r8, r8)
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40007000 	.word	0x40007000
 80049f4:	fffffcff 	.word	0xfffffcff
 80049f8:	fffeffff 	.word	0xfffeffff
 80049fc:	00001388 	.word	0x00001388
 8004a00:	efffffff 	.word	0xefffffff
 8004a04:	fffff3ff 	.word	0xfffff3ff
 8004a08:	fff3ffff 	.word	0xfff3ffff
 8004a0c:	ffcfffff 	.word	0xffcfffff
 8004a10:	ffffcfff 	.word	0xffffcfff
 8004a14:	ffbfffff 	.word	0xffbfffff
 8004a18:	ffff3fff 	.word	0xffff3fff

08004a1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	2380      	movs	r3, #128	@ 0x80
 8004a2c:	029b      	lsls	r3, r3, #10
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d136      	bne.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004a32:	4bcd      	ldr	r3, [pc, #820]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004a34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a36:	23c0      	movs	r3, #192	@ 0xc0
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004a3e:	4bca      	ldr	r3, [pc, #808]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a42:	2202      	movs	r2, #2
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d108      	bne.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	2380      	movs	r3, #128	@ 0x80
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d103      	bne.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8004a54:	2380      	movs	r3, #128	@ 0x80
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	e26b      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004a5c:	4bc2      	ldr	r3, [pc, #776]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a60:	2202      	movs	r2, #2
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d108      	bne.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	2380      	movs	r3, #128	@ 0x80
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d103      	bne.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8004a72:	23fa      	movs	r3, #250	@ 0xfa
 8004a74:	01db      	lsls	r3, r3, #7
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e25c      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004a7a:	4bbb      	ldr	r3, [pc, #748]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	2380      	movs	r3, #128	@ 0x80
 8004a80:	029b      	lsls	r3, r3, #10
 8004a82:	401a      	ands	r2, r3
 8004a84:	2380      	movs	r3, #128	@ 0x80
 8004a86:	029b      	lsls	r3, r3, #10
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d000      	beq.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8004a8c:	e252      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	23c0      	movs	r3, #192	@ 0xc0
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d000      	beq.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8004a98:	e24c      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 8004a9a:	4bb4      	ldr	r3, [pc, #720]	@ (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	e249      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8004aa0:	4bb1      	ldr	r3, [pc, #708]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d102      	bne.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8004aac:	4bb0      	ldr	r3, [pc, #704]	@ (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8004ab2:	4bad      	ldr	r3, [pc, #692]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d102      	bne.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8004abe:	4bac      	ldr	r3, [pc, #688]	@ (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	e001      	b.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ac8:	4ba7      	ldr	r3, [pc, #668]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	2207      	movs	r2, #7
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	0019      	movs	r1, r3
 8004ad6:	6938      	ldr	r0, [r7, #16]
 8004ad8:	f7fb fb14 	bl	8000104 <__udivsi3>
 8004adc:	0003      	movs	r3, r0
 8004ade:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	2380      	movs	r3, #128	@ 0x80
 8004ae4:	039b      	lsls	r3, r3, #14
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d100      	bne.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8004aea:	e1e3      	b.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	2380      	movs	r3, #128	@ 0x80
 8004af0:	039b      	lsls	r3, r3, #14
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d900      	bls.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004af6:	e20c      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	2380      	movs	r3, #128	@ 0x80
 8004afc:	01db      	lsls	r3, r3, #7
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d100      	bne.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8004b02:	e0a5      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	2380      	movs	r3, #128	@ 0x80
 8004b08:	01db      	lsls	r3, r3, #7
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d900      	bls.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004b0e:	e200      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	2380      	movs	r3, #128	@ 0x80
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d100      	bne.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004b1a:	e0fc      	b.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	2380      	movs	r3, #128	@ 0x80
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d900      	bls.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004b26:	e1f4      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	2380      	movs	r3, #128	@ 0x80
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d100      	bne.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8004b32:	e181      	b.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	2380      	movs	r3, #128	@ 0x80
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d900      	bls.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004b3e:	e1e8      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	2380      	movs	r3, #128	@ 0x80
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d100      	bne.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8004b4a:	e135      	b.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	2380      	movs	r3, #128	@ 0x80
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d900      	bls.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004b56:	e1dc      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b20      	cmp	r3, #32
 8004b5c:	d100      	bne.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004b5e:	e0af      	b.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d900      	bls.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8004b66:	e1d4      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d003      	beq.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b10      	cmp	r3, #16
 8004b72:	d033      	beq.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8004b74:	e1cd      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004b76:	4b7c      	ldr	r3, [pc, #496]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b86:	f7ff fdb9 	bl	80046fc <HAL_RCC_GetPCLK1Freq>
 8004b8a:	0003      	movs	r3, r0
 8004b8c:	617b      	str	r3, [r7, #20]
        break;
 8004b8e:	e1c2      	b.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d104      	bne.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b96:	f7ff fd27 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8004b9a:	0003      	movs	r3, r0
 8004b9c:	617b      	str	r3, [r7, #20]
        break;
 8004b9e:	e1ba      	b.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004ba0:	4b71      	ldr	r3, [pc, #452]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	2380      	movs	r3, #128	@ 0x80
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	401a      	ands	r2, r3
 8004baa:	2380      	movs	r3, #128	@ 0x80
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d105      	bne.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d102      	bne.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 8004bb8:	4b6d      	ldr	r3, [pc, #436]	@ (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004bba:	617b      	str	r3, [r7, #20]
        break;
 8004bbc:	e1ab      	b.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d000      	beq.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8004bca:	e1a4      	b.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d000      	beq.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8004bd2:	e1a0      	b.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 8004bd4:	2380      	movs	r3, #128	@ 0x80
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	617b      	str	r3, [r7, #20]
        break;
 8004bda:	e19c      	b.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004bdc:	4b62      	ldr	r3, [pc, #392]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004bde:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004be0:	23c0      	movs	r3, #192	@ 0xc0
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	4013      	ands	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d104      	bne.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bee:	f7ff fd85 	bl	80046fc <HAL_RCC_GetPCLK1Freq>
 8004bf2:	0003      	movs	r3, r0
 8004bf4:	617b      	str	r3, [r7, #20]
        break;
 8004bf6:	e190      	b.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	2380      	movs	r3, #128	@ 0x80
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d104      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c02:	f7ff fcf1 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8004c06:	0003      	movs	r3, r0
 8004c08:	617b      	str	r3, [r7, #20]
        break;
 8004c0a:	e186      	b.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004c0c:	4b56      	ldr	r3, [pc, #344]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	2380      	movs	r3, #128	@ 0x80
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	401a      	ands	r2, r3
 8004c16:	2380      	movs	r3, #128	@ 0x80
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d107      	bne.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	2380      	movs	r3, #128	@ 0x80
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d102      	bne.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 8004c28:	4b51      	ldr	r3, [pc, #324]	@ (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004c2a:	617b      	str	r3, [r7, #20]
        break;
 8004c2c:	e175      	b.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004c2e:	4b4e      	ldr	r3, [pc, #312]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c32:	2202      	movs	r2, #2
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d000      	beq.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 8004c3a:	e16e      	b.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	23c0      	movs	r3, #192	@ 0xc0
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d000      	beq.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8004c46:	e168      	b.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 8004c48:	2380      	movs	r3, #128	@ 0x80
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	617b      	str	r3, [r7, #20]
        break;
 8004c4e:	e164      	b.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004c50:	4b45      	ldr	r3, [pc, #276]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c54:	0f9b      	lsrs	r3, r3, #30
 8004c56:	079b      	lsls	r3, r3, #30
 8004c58:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d104      	bne.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c60:	f7ff fcc2 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8004c64:	0003      	movs	r3, r0
 8004c66:	617b      	str	r3, [r7, #20]
        break;
 8004c68:	e159      	b.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	2380      	movs	r3, #128	@ 0x80
 8004c6e:	061b      	lsls	r3, r3, #24
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d102      	bne.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 8004c74:	4b3e      	ldr	r3, [pc, #248]	@ (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004c76:	617b      	str	r3, [r7, #20]
        break;
 8004c78:	e151      	b.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	2380      	movs	r3, #128	@ 0x80
 8004c7e:	05db      	lsls	r3, r3, #23
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d000      	beq.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004c84:	e14b      	b.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8004c86:	4b38      	ldr	r3, [pc, #224]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	2380      	movs	r3, #128	@ 0x80
 8004c8c:	025b      	lsls	r3, r3, #9
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d100      	bne.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 8004c92:	e144      	b.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004c94:	4b34      	ldr	r3, [pc, #208]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	0a1b      	lsrs	r3, r3, #8
 8004c9a:	227f      	movs	r2, #127	@ 0x7f
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	435a      	muls	r2, r3
 8004ca6:	4b30      	ldr	r3, [pc, #192]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	0c5b      	lsrs	r3, r3, #17
 8004cac:	211f      	movs	r1, #31
 8004cae:	400b      	ands	r3, r1
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	0019      	movs	r1, r3
 8004cb4:	0010      	movs	r0, r2
 8004cb6:	f7fb fa25 	bl	8000104 <__udivsi3>
 8004cba:	0003      	movs	r3, r0
 8004cbc:	617b      	str	r3, [r7, #20]
        break;
 8004cbe:	e12e      	b.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004cc0:	4b29      	ldr	r3, [pc, #164]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004cc2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cc4:	23c0      	movs	r3, #192	@ 0xc0
 8004cc6:	019b      	lsls	r3, r3, #6
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d104      	bne.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cd2:	f7ff fd13 	bl	80046fc <HAL_RCC_GetPCLK1Freq>
 8004cd6:	0003      	movs	r3, r0
 8004cd8:	617b      	str	r3, [r7, #20]
        break;
 8004cda:	e122      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	2380      	movs	r3, #128	@ 0x80
 8004ce0:	015b      	lsls	r3, r3, #5
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d104      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ce6:	f7ff fc7f 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8004cea:	0003      	movs	r3, r0
 8004cec:	617b      	str	r3, [r7, #20]
        break;
 8004cee:	e118      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	2380      	movs	r3, #128	@ 0x80
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	401a      	ands	r2, r3
 8004cfa:	2380      	movs	r3, #128	@ 0x80
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d000      	beq.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8004d02:	e10e      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	2380      	movs	r3, #128	@ 0x80
 8004d08:	019b      	lsls	r3, r3, #6
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d000      	beq.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004d0e:	e108      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 8004d10:	4b17      	ldr	r3, [pc, #92]	@ (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004d12:	617b      	str	r3, [r7, #20]
        break;
 8004d14:	e105      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8004d16:	4b14      	ldr	r3, [pc, #80]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004d18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d1a:	23c0      	movs	r3, #192	@ 0xc0
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	4013      	ands	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	2380      	movs	r3, #128	@ 0x80
 8004d26:	01db      	lsls	r3, r3, #7
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d123      	bne.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	2380      	movs	r3, #128	@ 0x80
 8004d32:	025b      	lsls	r3, r3, #9
 8004d34:	4013      	ands	r3, r2
 8004d36:	d100      	bne.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004d38:	e0f5      	b.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	0a1b      	lsrs	r3, r3, #8
 8004d40:	227f      	movs	r2, #127	@ 0x7f
 8004d42:	4013      	ands	r3, r2
 8004d44:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	435a      	muls	r2, r3
 8004d4c:	4b06      	ldr	r3, [pc, #24]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	0c5b      	lsrs	r3, r3, #17
 8004d52:	211f      	movs	r1, #31
 8004d54:	400b      	ands	r3, r1
 8004d56:	3301      	adds	r3, #1
 8004d58:	0019      	movs	r1, r3
 8004d5a:	0010      	movs	r0, r2
 8004d5c:	f7fb f9d2 	bl	8000104 <__udivsi3>
 8004d60:	0003      	movs	r3, r0
 8004d62:	617b      	str	r3, [r7, #20]
        break;
 8004d64:	e0df      	b.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8004d66:	46c0      	nop			@ (mov r8, r8)
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	0007a120 	.word	0x0007a120
 8004d70:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d104      	bne.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d7a:	f7ff fc35 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8004d7e:	0003      	movs	r3, r0
 8004d80:	617b      	str	r3, [r7, #20]
        break;
 8004d82:	e0d0      	b.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8004d84:	4b6e      	ldr	r3, [pc, #440]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	2380      	movs	r3, #128	@ 0x80
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	401a      	ands	r2, r3
 8004d8e:	2380      	movs	r3, #128	@ 0x80
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d107      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	2380      	movs	r3, #128	@ 0x80
 8004d9a:	021b      	lsls	r3, r3, #8
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d102      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 8004da0:	4b68      	ldr	r3, [pc, #416]	@ (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8004da2:	617b      	str	r3, [r7, #20]
        break;
 8004da4:	e0bf      	b.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	23c0      	movs	r3, #192	@ 0xc0
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d000      	beq.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8004db0:	e0b9      	b.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8004db2:	4b65      	ldr	r3, [pc, #404]	@ (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8004db4:	617b      	str	r3, [r7, #20]
        break;
 8004db6:	e0b6      	b.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004db8:	4b61      	ldr	r3, [pc, #388]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004dba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004dbc:	23c0      	movs	r3, #192	@ 0xc0
 8004dbe:	031b      	lsls	r3, r3, #12
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004dca:	f7ff fc97 	bl	80046fc <HAL_RCC_GetPCLK1Freq>
 8004dce:	0003      	movs	r3, r0
 8004dd0:	617b      	str	r3, [r7, #20]
        break;
 8004dd2:	e0aa      	b.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004dd4:	4b5a      	ldr	r3, [pc, #360]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dd8:	2202      	movs	r2, #2
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d108      	bne.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	2380      	movs	r3, #128	@ 0x80
 8004de4:	02db      	lsls	r3, r3, #11
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d103      	bne.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 8004dea:	23fa      	movs	r3, #250	@ 0xfa
 8004dec:	01db      	lsls	r3, r3, #7
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	e021      	b.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004df2:	4b53      	ldr	r3, [pc, #332]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	2380      	movs	r3, #128	@ 0x80
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	2380      	movs	r3, #128	@ 0x80
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d107      	bne.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	2380      	movs	r3, #128	@ 0x80
 8004e08:	031b      	lsls	r3, r3, #12
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d102      	bne.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 8004e0e:	4b4d      	ldr	r3, [pc, #308]	@ (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e010      	b.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004e14:	4b4a      	ldr	r3, [pc, #296]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e18:	2202      	movs	r2, #2
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d000      	beq.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 8004e20:	e083      	b.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	23c0      	movs	r3, #192	@ 0xc0
 8004e26:	031b      	lsls	r3, r3, #12
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d000      	beq.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8004e2c:	e07d      	b.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 8004e2e:	2380      	movs	r3, #128	@ 0x80
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	617b      	str	r3, [r7, #20]
        break;
 8004e34:	e079      	b.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8004e36:	e078      	b.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004e38:	4b41      	ldr	r3, [pc, #260]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004e3a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e3c:	23c0      	movs	r3, #192	@ 0xc0
 8004e3e:	039b      	lsls	r3, r3, #14
 8004e40:	4013      	ands	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d104      	bne.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e4a:	f7ff fc57 	bl	80046fc <HAL_RCC_GetPCLK1Freq>
 8004e4e:	0003      	movs	r3, r0
 8004e50:	617b      	str	r3, [r7, #20]
        break;
 8004e52:	e06c      	b.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004e54:	4b3a      	ldr	r3, [pc, #232]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e58:	2202      	movs	r2, #2
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d108      	bne.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	2380      	movs	r3, #128	@ 0x80
 8004e64:	035b      	lsls	r3, r3, #13
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d103      	bne.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 8004e6a:	23fa      	movs	r3, #250	@ 0xfa
 8004e6c:	01db      	lsls	r3, r3, #7
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	e01f      	b.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004e72:	4b33      	ldr	r3, [pc, #204]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	2380      	movs	r3, #128	@ 0x80
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	401a      	ands	r2, r3
 8004e7c:	2380      	movs	r3, #128	@ 0x80
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d107      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	2380      	movs	r3, #128	@ 0x80
 8004e88:	039b      	lsls	r3, r3, #14
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d102      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 8004e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e00e      	b.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004e94:	4b2a      	ldr	r3, [pc, #168]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e98:	2202      	movs	r2, #2
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d146      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	23c0      	movs	r3, #192	@ 0xc0
 8004ea4:	039b      	lsls	r3, r3, #14
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d141      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 8004eaa:	2380      	movs	r3, #128	@ 0x80
 8004eac:	021b      	lsls	r3, r3, #8
 8004eae:	617b      	str	r3, [r7, #20]
        break;
 8004eb0:	e03d      	b.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 8004eb2:	e03c      	b.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8004eb4:	4b22      	ldr	r3, [pc, #136]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004eb6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004eb8:	2380      	movs	r3, #128	@ 0x80
 8004eba:	03db      	lsls	r3, r3, #15
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	2380      	movs	r3, #128	@ 0x80
 8004ec4:	03db      	lsls	r3, r3, #15
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d11b      	bne.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8004eca:	4b1d      	ldr	r3, [pc, #116]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	2380      	movs	r3, #128	@ 0x80
 8004ed0:	045b      	lsls	r3, r3, #17
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d02d      	beq.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	0a1b      	lsrs	r3, r3, #8
 8004edc:	227f      	movs	r2, #127	@ 0x7f
 8004ede:	4013      	ands	r3, r2
 8004ee0:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	435a      	muls	r2, r3
 8004ee8:	4b15      	ldr	r3, [pc, #84]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	0e5b      	lsrs	r3, r3, #25
 8004eee:	2107      	movs	r1, #7
 8004ef0:	400b      	ands	r3, r1
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	0019      	movs	r1, r3
 8004ef6:	0010      	movs	r0, r2
 8004ef8:	f7fb f904 	bl	8000104 <__udivsi3>
 8004efc:	0003      	movs	r3, r0
 8004efe:	617b      	str	r3, [r7, #20]
        break;
 8004f00:	e017      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d114      	bne.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f08:	f7ff fbf8 	bl	80046fc <HAL_RCC_GetPCLK1Freq>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	617b      	str	r3, [r7, #20]
        break;
 8004f10:	e00f      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 8004f12:	46c0      	nop			@ (mov r8, r8)
 8004f14:	e00e      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004f16:	46c0      	nop			@ (mov r8, r8)
 8004f18:	e00c      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004f1a:	46c0      	nop			@ (mov r8, r8)
 8004f1c:	e00a      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004f1e:	46c0      	nop			@ (mov r8, r8)
 8004f20:	e008      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	e006      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004f26:	46c0      	nop			@ (mov r8, r8)
 8004f28:	e004      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004f2a:	46c0      	nop			@ (mov r8, r8)
 8004f2c:	e002      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004f2e:	46c0      	nop			@ (mov r8, r8)
 8004f30:	e000      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004f32:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 8004f34:	697b      	ldr	r3, [r7, #20]
}
 8004f36:	0018      	movs	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b006      	add	sp, #24
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	40021000 	.word	0x40021000
 8004f44:	00f42400 	.word	0x00f42400
 8004f48:	00bb8000 	.word	0x00bb8000

08004f4c <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8004f4c:	b590      	push	{r4, r7, lr}
 8004f4e:	b08b      	sub	sp, #44	@ 0x2c
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8004f54:	2427      	movs	r4, #39	@ 0x27
 8004f56:	193b      	adds	r3, r7, r4
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 8004f5c:	2326      	movs	r3, #38	@ 0x26
 8004f5e:	18fb      	adds	r3, r7, r3
 8004f60:	2200      	movs	r2, #0
 8004f62:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 8004f64:	4b31      	ldr	r3, [pc, #196]	@ (800502c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004f66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f68:	4b30      	ldr	r3, [pc, #192]	@ (800502c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f70:	4b2e      	ldr	r3, [pc, #184]	@ (800502c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f74:	2201      	movs	r2, #1
 8004f76:	4013      	ands	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8004f7c:	2110      	movs	r1, #16
 8004f7e:	187b      	adds	r3, r7, r1
 8004f80:	2204      	movs	r2, #4
 8004f82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f84:	187b      	adds	r3, r7, r1
 8004f86:	2203      	movs	r2, #3
 8004f88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f8a:	187b      	adds	r3, r7, r1
 8004f8c:	2203      	movs	r2, #3
 8004f8e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f90:	187b      	adds	r3, r7, r1
 8004f92:	2200      	movs	r2, #0
 8004f94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8004f96:	187a      	adds	r2, r7, r1
 8004f98:	23a0      	movs	r3, #160	@ 0xa0
 8004f9a:	05db      	lsls	r3, r3, #23
 8004f9c:	0011      	movs	r1, r2
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f7fd fd78 	bl	8002a94 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa4:	4b21      	ldr	r3, [pc, #132]	@ (800502c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004fa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fa8:	2380      	movs	r3, #128	@ 0x80
 8004faa:	055b      	lsls	r3, r3, #21
 8004fac:	4013      	ands	r3, r2
 8004fae:	d110      	bne.n	8004fd2 <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800502c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004fb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800502c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004fb6:	2180      	movs	r1, #128	@ 0x80
 8004fb8:	0549      	lsls	r1, r1, #21
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800502c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004fc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fc2:	2380      	movs	r3, #128	@ 0x80
 8004fc4:	055b      	lsls	r3, r3, #21
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8004fcc:	193b      	adds	r3, r7, r4
 8004fce:	2201      	movs	r2, #1
 8004fd0:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd2:	4b17      	ldr	r3, [pc, #92]	@ (8005030 <HAL_RCCEx_EnableLSCO+0xe4>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	2380      	movs	r3, #128	@ 0x80
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d105      	bne.n	8004fea <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 8004fde:	f7fe fe77 	bl	8003cd0 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 8004fe2:	2326      	movs	r3, #38	@ 0x26
 8004fe4:	18fb      	adds	r3, r7, r3
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8004fea:	4b10      	ldr	r3, [pc, #64]	@ (800502c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fee:	4a11      	ldr	r2, [pc, #68]	@ (8005034 <HAL_RCCEx_EnableLSCO+0xe8>)
 8004ff0:	401a      	ands	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800502c <HAL_RCCEx_EnableLSCO+0xe0>)
 8004ff8:	2180      	movs	r1, #128	@ 0x80
 8004ffa:	0449      	lsls	r1, r1, #17
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 8005000:	2326      	movs	r3, #38	@ 0x26
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 800500a:	f7fe fe6f 	bl	8003cec <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 800500e:	2327      	movs	r3, #39	@ 0x27
 8005010:	18fb      	adds	r3, r7, r3
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d105      	bne.n	8005024 <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8005018:	4b04      	ldr	r3, [pc, #16]	@ (800502c <HAL_RCCEx_EnableLSCO+0xe0>)
 800501a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800501c:	4b03      	ldr	r3, [pc, #12]	@ (800502c <HAL_RCCEx_EnableLSCO+0xe0>)
 800501e:	4906      	ldr	r1, [pc, #24]	@ (8005038 <HAL_RCCEx_EnableLSCO+0xec>)
 8005020:	400a      	ands	r2, r1
 8005022:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8005024:	46c0      	nop			@ (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	b00b      	add	sp, #44	@ 0x2c
 800502a:	bd90      	pop	{r4, r7, pc}
 800502c:	40021000 	.word	0x40021000
 8005030:	40007000 	.word	0x40007000
 8005034:	fcffffff 	.word	0xfcffffff
 8005038:	efffffff 	.word	0xefffffff

0800503c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800503c:	b5b0      	push	{r4, r5, r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005044:	230f      	movs	r3, #15
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	2201      	movs	r2, #1
 800504a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d100      	bne.n	8005054 <HAL_RTC_Init+0x18>
 8005052:	e08c      	b.n	800516e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2229      	movs	r2, #41	@ 0x29
 8005058:	5c9b      	ldrb	r3, [r3, r2]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10b      	bne.n	8005078 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2228      	movs	r2, #40	@ 0x28
 8005064:	2100      	movs	r1, #0
 8005066:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2288      	movs	r2, #136	@ 0x88
 800506c:	0212      	lsls	r2, r2, #8
 800506e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	0018      	movs	r0, r3
 8005074:	f7fd f9e4 	bl	8002440 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2229      	movs	r2, #41	@ 0x29
 800507c:	2102      	movs	r1, #2
 800507e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	2210      	movs	r2, #16
 8005088:	4013      	ands	r3, r2
 800508a:	2b10      	cmp	r3, #16
 800508c:	d062      	beq.n	8005154 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	22ca      	movs	r2, #202	@ 0xca
 8005094:	625a      	str	r2, [r3, #36]	@ 0x24
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2253      	movs	r2, #83	@ 0x53
 800509c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800509e:	250f      	movs	r5, #15
 80050a0:	197c      	adds	r4, r7, r5
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	0018      	movs	r0, r3
 80050a6:	f000 fcb9 	bl	8005a1c <RTC_EnterInitMode>
 80050aa:	0003      	movs	r3, r0
 80050ac:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80050ae:	0028      	movs	r0, r5
 80050b0:	183b      	adds	r3, r7, r0
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d12c      	bne.n	8005112 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	492e      	ldr	r1, [pc, #184]	@ (800517c <HAL_RTC_Init+0x140>)
 80050c4:	400a      	ands	r2, r1
 80050c6:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6999      	ldr	r1, [r3, #24]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6912      	ldr	r2, [r2, #16]
 80050ee:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6919      	ldr	r1, [r3, #16]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	041a      	lsls	r2, r3, #16
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005104:	183c      	adds	r4, r7, r0
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	0018      	movs	r0, r3
 800510a:	f000 fcc9 	bl	8005aa0 <RTC_ExitInitMode>
 800510e:	0003      	movs	r3, r0
 8005110:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005112:	230f      	movs	r3, #15
 8005114:	18fb      	adds	r3, r7, r3
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d116      	bne.n	800514a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	00d2      	lsls	r2, r2, #3
 8005128:	08d2      	lsrs	r2, r2, #3
 800512a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6999      	ldr	r1, [r3, #24]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	22ff      	movs	r2, #255	@ 0xff
 8005150:	625a      	str	r2, [r3, #36]	@ 0x24
 8005152:	e003      	b.n	800515c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005154:	230f      	movs	r3, #15
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800515c:	230f      	movs	r3, #15
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d103      	bne.n	800516e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2229      	movs	r2, #41	@ 0x29
 800516a:	2101      	movs	r1, #1
 800516c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800516e:	230f      	movs	r3, #15
 8005170:	18fb      	adds	r3, r7, r3
 8005172:	781b      	ldrb	r3, [r3, #0]
}
 8005174:	0018      	movs	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	b004      	add	sp, #16
 800517a:	bdb0      	pop	{r4, r5, r7, pc}
 800517c:	fb8fffbf 	.word	0xfb8fffbf

08005180 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005180:	b5b0      	push	{r4, r5, r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2228      	movs	r2, #40	@ 0x28
 8005190:	5c9b      	ldrb	r3, [r3, r2]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_RTC_SetTime+0x1a>
 8005196:	2302      	movs	r3, #2
 8005198:	e092      	b.n	80052c0 <HAL_RTC_SetTime+0x140>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2228      	movs	r2, #40	@ 0x28
 800519e:	2101      	movs	r1, #1
 80051a0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2229      	movs	r2, #41	@ 0x29
 80051a6:	2102      	movs	r1, #2
 80051a8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	22ca      	movs	r2, #202	@ 0xca
 80051b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2253      	movs	r2, #83	@ 0x53
 80051b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80051ba:	2513      	movs	r5, #19
 80051bc:	197c      	adds	r4, r7, r5
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	0018      	movs	r0, r3
 80051c2:	f000 fc2b 	bl	8005a1c <RTC_EnterInitMode>
 80051c6:	0003      	movs	r3, r0
 80051c8:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80051ca:	197b      	adds	r3, r7, r5
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d162      	bne.n	8005298 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d125      	bne.n	8005224 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2240      	movs	r2, #64	@ 0x40
 80051e0:	4013      	ands	r3, r2
 80051e2:	d102      	bne.n	80051ea <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2200      	movs	r2, #0
 80051e8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	0018      	movs	r0, r3
 80051f0:	f000 fc9a 	bl	8005b28 <RTC_ByteToBcd2>
 80051f4:	0003      	movs	r3, r0
 80051f6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	785b      	ldrb	r3, [r3, #1]
 80051fc:	0018      	movs	r0, r3
 80051fe:	f000 fc93 	bl	8005b28 <RTC_ByteToBcd2>
 8005202:	0003      	movs	r3, r0
 8005204:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005206:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	789b      	ldrb	r3, [r3, #2]
 800520c:	0018      	movs	r0, r3
 800520e:	f000 fc8b 	bl	8005b28 <RTC_ByteToBcd2>
 8005212:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005214:	0022      	movs	r2, r4
 8005216:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	78db      	ldrb	r3, [r3, #3]
 800521c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	e017      	b.n	8005254 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	2240      	movs	r2, #64	@ 0x40
 800522c:	4013      	ands	r3, r2
 800522e:	d102      	bne.n	8005236 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2200      	movs	r2, #0
 8005234:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	785b      	ldrb	r3, [r3, #1]
 8005240:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005242:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005248:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	78db      	ldrb	r3, [r3, #3]
 800524e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	491b      	ldr	r1, [pc, #108]	@ (80052c8 <HAL_RTC_SetTime+0x148>)
 800525c:	400a      	ands	r2, r1
 800525e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4918      	ldr	r1, [pc, #96]	@ (80052cc <HAL_RTC_SetTime+0x14c>)
 800526c:	400a      	ands	r2, r1
 800526e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6999      	ldr	r1, [r3, #24]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	431a      	orrs	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005288:	2313      	movs	r3, #19
 800528a:	18fc      	adds	r4, r7, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	0018      	movs	r0, r3
 8005290:	f000 fc06 	bl	8005aa0 <RTC_ExitInitMode>
 8005294:	0003      	movs	r3, r0
 8005296:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	22ff      	movs	r2, #255	@ 0xff
 800529e:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 80052a0:	2313      	movs	r3, #19
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2229      	movs	r2, #41	@ 0x29
 80052ae:	2101      	movs	r1, #1
 80052b0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2228      	movs	r2, #40	@ 0x28
 80052b6:	2100      	movs	r1, #0
 80052b8:	5499      	strb	r1, [r3, r2]

  return status;
 80052ba:	2313      	movs	r3, #19
 80052bc:	18fb      	adds	r3, r7, r3
 80052be:	781b      	ldrb	r3, [r3, #0]
}
 80052c0:	0018      	movs	r0, r3
 80052c2:	46bd      	mov	sp, r7
 80052c4:	b006      	add	sp, #24
 80052c6:	bdb0      	pop	{r4, r5, r7, pc}
 80052c8:	007f7f7f 	.word	0x007f7f7f
 80052cc:	fffbffff 	.word	0xfffbffff

080052d0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	045b      	lsls	r3, r3, #17
 80052ee:	0c5a      	lsrs	r2, r3, #17
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a22      	ldr	r2, [pc, #136]	@ (8005384 <HAL_RTC_GetTime+0xb4>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	0c1b      	lsrs	r3, r3, #16
 8005304:	b2db      	uxtb	r3, r3
 8005306:	223f      	movs	r2, #63	@ 0x3f
 8005308:	4013      	ands	r3, r2
 800530a:	b2da      	uxtb	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	0a1b      	lsrs	r3, r3, #8
 8005314:	b2db      	uxtb	r3, r3
 8005316:	227f      	movs	r2, #127	@ 0x7f
 8005318:	4013      	ands	r3, r2
 800531a:	b2da      	uxtb	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	b2db      	uxtb	r3, r3
 8005324:	227f      	movs	r2, #127	@ 0x7f
 8005326:	4013      	ands	r3, r2
 8005328:	b2da      	uxtb	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	0d9b      	lsrs	r3, r3, #22
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2201      	movs	r2, #1
 8005336:	4013      	ands	r3, r2
 8005338:	b2da      	uxtb	r2, r3
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d11a      	bne.n	800537a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	0018      	movs	r0, r3
 800534a:	f000 fc15 	bl	8005b78 <RTC_Bcd2ToByte>
 800534e:	0003      	movs	r3, r0
 8005350:	001a      	movs	r2, r3
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	785b      	ldrb	r3, [r3, #1]
 800535a:	0018      	movs	r0, r3
 800535c:	f000 fc0c 	bl	8005b78 <RTC_Bcd2ToByte>
 8005360:	0003      	movs	r3, r0
 8005362:	001a      	movs	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	789b      	ldrb	r3, [r3, #2]
 800536c:	0018      	movs	r0, r3
 800536e:	f000 fc03 	bl	8005b78 <RTC_Bcd2ToByte>
 8005372:	0003      	movs	r3, r0
 8005374:	001a      	movs	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	0018      	movs	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	b006      	add	sp, #24
 8005382:	bd80      	pop	{r7, pc}
 8005384:	007f7f7f 	.word	0x007f7f7f

08005388 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005388:	b5b0      	push	{r4, r5, r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2228      	movs	r2, #40	@ 0x28
 8005398:	5c9b      	ldrb	r3, [r3, r2]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_RTC_SetDate+0x1a>
 800539e:	2302      	movs	r3, #2
 80053a0:	e07e      	b.n	80054a0 <HAL_RTC_SetDate+0x118>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2228      	movs	r2, #40	@ 0x28
 80053a6:	2101      	movs	r1, #1
 80053a8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2229      	movs	r2, #41	@ 0x29
 80053ae:	2102      	movs	r1, #2
 80053b0:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10e      	bne.n	80053d6 <HAL_RTC_SetDate+0x4e>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	001a      	movs	r2, r3
 80053be:	2310      	movs	r3, #16
 80053c0:	4013      	ands	r3, r2
 80053c2:	d008      	beq.n	80053d6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	785b      	ldrb	r3, [r3, #1]
 80053c8:	2210      	movs	r2, #16
 80053ca:	4393      	bics	r3, r2
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	330a      	adds	r3, #10
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d11c      	bne.n	8005416 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	78db      	ldrb	r3, [r3, #3]
 80053e0:	0018      	movs	r0, r3
 80053e2:	f000 fba1 	bl	8005b28 <RTC_ByteToBcd2>
 80053e6:	0003      	movs	r3, r0
 80053e8:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	785b      	ldrb	r3, [r3, #1]
 80053ee:	0018      	movs	r0, r3
 80053f0:	f000 fb9a 	bl	8005b28 <RTC_ByteToBcd2>
 80053f4:	0003      	movs	r3, r0
 80053f6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80053f8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	789b      	ldrb	r3, [r3, #2]
 80053fe:	0018      	movs	r0, r3
 8005400:	f000 fb92 	bl	8005b28 <RTC_ByteToBcd2>
 8005404:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005406:	0022      	movs	r2, r4
 8005408:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	e00e      	b.n	8005434 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	78db      	ldrb	r3, [r3, #3]
 800541a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	785b      	ldrb	r3, [r3, #1]
 8005420:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005422:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005428:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	22ca      	movs	r2, #202	@ 0xca
 800543a:	625a      	str	r2, [r3, #36]	@ 0x24
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2253      	movs	r2, #83	@ 0x53
 8005442:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005444:	2513      	movs	r5, #19
 8005446:	197c      	adds	r4, r7, r5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	0018      	movs	r0, r3
 800544c:	f000 fae6 	bl	8005a1c <RTC_EnterInitMode>
 8005450:	0003      	movs	r3, r0
 8005452:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005454:	0028      	movs	r0, r5
 8005456:	183b      	adds	r3, r7, r0
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10c      	bne.n	8005478 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4910      	ldr	r1, [pc, #64]	@ (80054a8 <HAL_RTC_SetDate+0x120>)
 8005466:	400a      	ands	r2, r1
 8005468:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800546a:	183c      	adds	r4, r7, r0
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	0018      	movs	r0, r3
 8005470:	f000 fb16 	bl	8005aa0 <RTC_ExitInitMode>
 8005474:	0003      	movs	r3, r0
 8005476:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	22ff      	movs	r2, #255	@ 0xff
 800547e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005480:	2313      	movs	r3, #19
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d103      	bne.n	8005492 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2229      	movs	r2, #41	@ 0x29
 800548e:	2101      	movs	r1, #1
 8005490:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2228      	movs	r2, #40	@ 0x28
 8005496:	2100      	movs	r1, #0
 8005498:	5499      	strb	r1, [r3, r2]

  return status;
 800549a:	2313      	movs	r3, #19
 800549c:	18fb      	adds	r3, r7, r3
 800549e:	781b      	ldrb	r3, [r3, #0]
}
 80054a0:	0018      	movs	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b006      	add	sp, #24
 80054a6:	bdb0      	pop	{r4, r5, r7, pc}
 80054a8:	00ffff3f 	.word	0x00ffff3f

080054ac <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	4a21      	ldr	r2, [pc, #132]	@ (8005544 <HAL_RTC_GetDate+0x98>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	0c1b      	lsrs	r3, r3, #16
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	0a1b      	lsrs	r3, r3, #8
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	221f      	movs	r2, #31
 80054d6:	4013      	ands	r3, r2
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	223f      	movs	r2, #63	@ 0x3f
 80054e4:	4013      	ands	r3, r2
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	0b5b      	lsrs	r3, r3, #13
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2207      	movs	r2, #7
 80054f4:	4013      	ands	r3, r2
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d11a      	bne.n	8005538 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	78db      	ldrb	r3, [r3, #3]
 8005506:	0018      	movs	r0, r3
 8005508:	f000 fb36 	bl	8005b78 <RTC_Bcd2ToByte>
 800550c:	0003      	movs	r3, r0
 800550e:	001a      	movs	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	785b      	ldrb	r3, [r3, #1]
 8005518:	0018      	movs	r0, r3
 800551a:	f000 fb2d 	bl	8005b78 <RTC_Bcd2ToByte>
 800551e:	0003      	movs	r3, r0
 8005520:	001a      	movs	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	789b      	ldrb	r3, [r3, #2]
 800552a:	0018      	movs	r0, r3
 800552c:	f000 fb24 	bl	8005b78 <RTC_Bcd2ToByte>
 8005530:	0003      	movs	r3, r0
 8005532:	001a      	movs	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	0018      	movs	r0, r3
 800553c:	46bd      	mov	sp, r7
 800553e:	b006      	add	sp, #24
 8005540:	bd80      	pop	{r7, pc}
 8005542:	46c0      	nop			@ (mov r8, r8)
 8005544:	00ffff3f 	.word	0x00ffff3f

08005548 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005548:	b590      	push	{r4, r7, lr}
 800554a:	b089      	sub	sp, #36	@ 0x24
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2228      	movs	r2, #40	@ 0x28
 8005558:	5c9b      	ldrb	r3, [r3, r2]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_RTC_SetAlarm_IT+0x1a>
 800555e:	2302      	movs	r3, #2
 8005560:	e127      	b.n	80057b2 <HAL_RTC_SetAlarm_IT+0x26a>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2228      	movs	r2, #40	@ 0x28
 8005566:	2101      	movs	r1, #1
 8005568:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2229      	movs	r2, #41	@ 0x29
 800556e:	2102      	movs	r1, #2
 8005570:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d136      	bne.n	80055e6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	2240      	movs	r2, #64	@ 0x40
 8005580:	4013      	ands	r3, r2
 8005582:	d102      	bne.n	800558a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2200      	movs	r2, #0
 8005588:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	0018      	movs	r0, r3
 8005590:	f000 faca 	bl	8005b28 <RTC_ByteToBcd2>
 8005594:	0003      	movs	r3, r0
 8005596:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	0018      	movs	r0, r3
 800559e:	f000 fac3 	bl	8005b28 <RTC_ByteToBcd2>
 80055a2:	0003      	movs	r3, r0
 80055a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80055a6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	789b      	ldrb	r3, [r3, #2]
 80055ac:	0018      	movs	r0, r3
 80055ae:	f000 fabb 	bl	8005b28 <RTC_ByteToBcd2>
 80055b2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80055b4:	0022      	movs	r2, r4
 80055b6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	78db      	ldrb	r3, [r3, #3]
 80055bc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80055be:	431a      	orrs	r2, r3
 80055c0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2220      	movs	r2, #32
 80055c6:	5c9b      	ldrb	r3, [r3, r2]
 80055c8:	0018      	movs	r0, r3
 80055ca:	f000 faad 	bl	8005b28 <RTC_ByteToBcd2>
 80055ce:	0003      	movs	r3, r0
 80055d0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80055d2:	0022      	movs	r2, r4
 80055d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80055da:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80055e0:	4313      	orrs	r3, r2
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	e022      	b.n	800562c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	2240      	movs	r2, #64	@ 0x40
 80055ee:	4013      	ands	r3, r2
 80055f0:	d102      	bne.n	80055f8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2200      	movs	r2, #0
 80055f6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	785b      	ldrb	r3, [r3, #1]
 8005602:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005604:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800560a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	78db      	ldrb	r3, [r3, #3]
 8005610:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005612:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2120      	movs	r1, #32
 8005618:	5c5b      	ldrb	r3, [r3, r1]
 800561a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800561c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005622:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005628:	4313      	orrs	r3, r2
 800562a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	4313      	orrs	r3, r2
 8005636:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	22ca      	movs	r2, #202	@ 0xca
 800563e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2253      	movs	r2, #83	@ 0x53
 8005646:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800564c:	2380      	movs	r3, #128	@ 0x80
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	429a      	cmp	r2, r3
 8005652:	d14c      	bne.n	80056ee <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699a      	ldr	r2, [r3, #24]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4957      	ldr	r1, [pc, #348]	@ (80057bc <HAL_RTC_SetAlarm_IT+0x274>)
 8005660:	400a      	ands	r2, r1
 8005662:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2101      	movs	r1, #1
 8005670:	430a      	orrs	r2, r1
 8005672:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8005674:	f7fd f926 	bl	80028c4 <HAL_GetTick>
 8005678:	0003      	movs	r3, r0
 800567a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800567c:	e016      	b.n	80056ac <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800567e:	f7fd f921 	bl	80028c4 <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	1ad2      	subs	r2, r2, r3
 8005688:	23fa      	movs	r3, #250	@ 0xfa
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	429a      	cmp	r2, r3
 800568e:	d90d      	bls.n	80056ac <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	22ff      	movs	r2, #255	@ 0xff
 8005696:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2229      	movs	r2, #41	@ 0x29
 800569c:	2103      	movs	r1, #3
 800569e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2228      	movs	r2, #40	@ 0x28
 80056a4:	2100      	movs	r1, #0
 80056a6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e082      	b.n	80057b2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	4013      	ands	r3, r2
 80056b6:	d0e2      	beq.n	800567e <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2180      	movs	r1, #128	@ 0x80
 80056d4:	0049      	lsls	r1, r1, #1
 80056d6:	430a      	orrs	r2, r1
 80056d8:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2180      	movs	r1, #128	@ 0x80
 80056e6:	0149      	lsls	r1, r1, #5
 80056e8:	430a      	orrs	r2, r1
 80056ea:	619a      	str	r2, [r3, #24]
 80056ec:	e04b      	b.n	8005786 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699a      	ldr	r2, [r3, #24]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4931      	ldr	r1, [pc, #196]	@ (80057c0 <HAL_RTC_SetAlarm_IT+0x278>)
 80056fa:	400a      	ands	r2, r1
 80056fc:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2102      	movs	r1, #2
 800570a:	430a      	orrs	r2, r1
 800570c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800570e:	f7fd f8d9 	bl	80028c4 <HAL_GetTick>
 8005712:	0003      	movs	r3, r0
 8005714:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005716:	e016      	b.n	8005746 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005718:	f7fd f8d4 	bl	80028c4 <HAL_GetTick>
 800571c:	0002      	movs	r2, r0
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	1ad2      	subs	r2, r2, r3
 8005722:	23fa      	movs	r3, #250	@ 0xfa
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	429a      	cmp	r2, r3
 8005728:	d90d      	bls.n	8005746 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	22ff      	movs	r2, #255	@ 0xff
 8005730:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2229      	movs	r2, #41	@ 0x29
 8005736:	2103      	movs	r1, #3
 8005738:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2228      	movs	r2, #40	@ 0x28
 800573e:	2100      	movs	r1, #0
 8005740:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e035      	b.n	80057b2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	2202      	movs	r2, #2
 800574e:	4013      	ands	r3, r2
 8005750:	d0e2      	beq.n	8005718 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699a      	ldr	r2, [r3, #24]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2180      	movs	r1, #128	@ 0x80
 800576e:	0089      	lsls	r1, r1, #2
 8005770:	430a      	orrs	r2, r1
 8005772:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2180      	movs	r1, #128	@ 0x80
 8005780:	0189      	lsls	r1, r1, #6
 8005782:	430a      	orrs	r2, r1
 8005784:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005786:	4a0f      	ldr	r2, [pc, #60]	@ (80057c4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005788:	2380      	movs	r3, #128	@ 0x80
 800578a:	58d3      	ldr	r3, [r2, r3]
 800578c:	490d      	ldr	r1, [pc, #52]	@ (80057c4 <HAL_RTC_SetAlarm_IT+0x27c>)
 800578e:	2280      	movs	r2, #128	@ 0x80
 8005790:	0312      	lsls	r2, r2, #12
 8005792:	4313      	orrs	r3, r2
 8005794:	2280      	movs	r2, #128	@ 0x80
 8005796:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	22ff      	movs	r2, #255	@ 0xff
 800579e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2229      	movs	r2, #41	@ 0x29
 80057a4:	2101      	movs	r1, #1
 80057a6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2228      	movs	r2, #40	@ 0x28
 80057ac:	2100      	movs	r1, #0
 80057ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	0018      	movs	r0, r3
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b009      	add	sp, #36	@ 0x24
 80057b8:	bd90      	pop	{r4, r7, pc}
 80057ba:	46c0      	nop			@ (mov r8, r8)
 80057bc:	fffffeff 	.word	0xfffffeff
 80057c0:	fffffdff 	.word	0xfffffdff
 80057c4:	40021800 	.word	0x40021800

080057c8 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	2380      	movs	r3, #128	@ 0x80
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	429a      	cmp	r2, r3
 80057de:	d144      	bne.n	800586a <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2280      	movs	r2, #128	@ 0x80
 80057e4:	0052      	lsls	r2, r2, #1
 80057e6:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ee:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f6:	045b      	lsls	r3, r3, #17
 80057f8:	0c5b      	lsrs	r3, r3, #17
 80057fa:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	0c1b      	lsrs	r3, r3, #16
 8005800:	b2db      	uxtb	r3, r3
 8005802:	223f      	movs	r2, #63	@ 0x3f
 8005804:	4013      	ands	r3, r2
 8005806:	b2da      	uxtb	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	0a1b      	lsrs	r3, r3, #8
 8005810:	b2db      	uxtb	r3, r3
 8005812:	227f      	movs	r2, #127	@ 0x7f
 8005814:	4013      	ands	r3, r2
 8005816:	b2da      	uxtb	r2, r3
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	227f      	movs	r2, #127	@ 0x7f
 8005822:	4013      	ands	r3, r2
 8005824:	b2da      	uxtb	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	0d9b      	lsrs	r3, r3, #22
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2201      	movs	r2, #1
 8005832:	4013      	ands	r3, r2
 8005834:	b2da      	uxtb	r2, r3
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	0e1b      	lsrs	r3, r3, #24
 8005844:	b2db      	uxtb	r3, r3
 8005846:	223f      	movs	r2, #63	@ 0x3f
 8005848:	4013      	ands	r3, r2
 800584a:	b2d9      	uxtb	r1, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2220      	movs	r2, #32
 8005850:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	2380      	movs	r3, #128	@ 0x80
 8005856:	05db      	lsls	r3, r3, #23
 8005858:	401a      	ands	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	4a3b      	ldr	r2, [pc, #236]	@ (8005950 <HAL_RTC_GetAlarm+0x188>)
 8005862:	401a      	ands	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	615a      	str	r2, [r3, #20]
 8005868:	e043      	b.n	80058f2 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2280      	movs	r2, #128	@ 0x80
 800586e:	0092      	lsls	r2, r2, #2
 8005870:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005878:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005880:	045b      	lsls	r3, r3, #17
 8005882:	0c5b      	lsrs	r3, r3, #17
 8005884:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	0c1b      	lsrs	r3, r3, #16
 800588a:	b2db      	uxtb	r3, r3
 800588c:	223f      	movs	r2, #63	@ 0x3f
 800588e:	4013      	ands	r3, r2
 8005890:	b2da      	uxtb	r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	0a1b      	lsrs	r3, r3, #8
 800589a:	b2db      	uxtb	r3, r3
 800589c:	227f      	movs	r2, #127	@ 0x7f
 800589e:	4013      	ands	r3, r2
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	227f      	movs	r2, #127	@ 0x7f
 80058ac:	4013      	ands	r3, r2
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	0d9b      	lsrs	r3, r3, #22
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2201      	movs	r2, #1
 80058bc:	4013      	ands	r3, r2
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	0e1b      	lsrs	r3, r3, #24
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	223f      	movs	r2, #63	@ 0x3f
 80058d2:	4013      	ands	r3, r2
 80058d4:	b2d9      	uxtb	r1, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2220      	movs	r2, #32
 80058da:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	2380      	movs	r3, #128	@ 0x80
 80058e0:	05db      	lsls	r3, r3, #23
 80058e2:	401a      	ands	r2, r3
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	4a19      	ldr	r2, [pc, #100]	@ (8005950 <HAL_RTC_GetAlarm+0x188>)
 80058ec:	401a      	ands	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d125      	bne.n	8005944 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	0018      	movs	r0, r3
 80058fe:	f000 f93b 	bl	8005b78 <RTC_Bcd2ToByte>
 8005902:	0003      	movs	r3, r0
 8005904:	001a      	movs	r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	785b      	ldrb	r3, [r3, #1]
 800590e:	0018      	movs	r0, r3
 8005910:	f000 f932 	bl	8005b78 <RTC_Bcd2ToByte>
 8005914:	0003      	movs	r3, r0
 8005916:	001a      	movs	r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	789b      	ldrb	r3, [r3, #2]
 8005920:	0018      	movs	r0, r3
 8005922:	f000 f929 	bl	8005b78 <RTC_Bcd2ToByte>
 8005926:	0003      	movs	r3, r0
 8005928:	001a      	movs	r2, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2220      	movs	r2, #32
 8005932:	5c9b      	ldrb	r3, [r3, r2]
 8005934:	0018      	movs	r0, r3
 8005936:	f000 f91f 	bl	8005b78 <RTC_Bcd2ToByte>
 800593a:	0003      	movs	r3, r0
 800593c:	0019      	movs	r1, r3
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2220      	movs	r2, #32
 8005942:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	0018      	movs	r0, r3
 8005948:	46bd      	mov	sp, r7
 800594a:	b006      	add	sp, #24
 800594c:	bd80      	pop	{r7, pc}
 800594e:	46c0      	nop			@ (mov r8, r8)
 8005950:	80808080 	.word	0x80808080

08005954 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	2380      	movs	r3, #128	@ 0x80
 8005964:	015b      	lsls	r3, r3, #5
 8005966:	4013      	ands	r3, r2
 8005968:	d011      	beq.n	800598e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005970:	2201      	movs	r2, #1
 8005972:	4013      	ands	r3, r2
 8005974:	d00b      	beq.n	800598e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2101      	movs	r1, #1
 8005982:	430a      	orrs	r2, r1
 8005984:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	0018      	movs	r0, r3
 800598a:	f7fb fd81 	bl	8001490 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	699a      	ldr	r2, [r3, #24]
 8005994:	2380      	movs	r3, #128	@ 0x80
 8005996:	019b      	lsls	r3, r3, #6
 8005998:	4013      	ands	r3, r2
 800599a:	d011      	beq.n	80059c0 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a2:	2202      	movs	r2, #2
 80059a4:	4013      	ands	r3, r2
 80059a6:	d00b      	beq.n	80059c0 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2102      	movs	r1, #2
 80059b4:	430a      	orrs	r2, r1
 80059b6:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	0018      	movs	r0, r3
 80059bc:	f000 f9a4 	bl	8005d08 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2229      	movs	r2, #41	@ 0x29
 80059c4:	2101      	movs	r1, #1
 80059c6:	5499      	strb	r1, [r3, r2]
}
 80059c8:	46c0      	nop			@ (mov r8, r8)
 80059ca:	46bd      	mov	sp, r7
 80059cc:	b002      	add	sp, #8
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a0e      	ldr	r2, [pc, #56]	@ (8005a18 <HAL_RTC_WaitForSynchro+0x48>)
 80059de:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80059e0:	f7fc ff70 	bl	80028c4 <HAL_GetTick>
 80059e4:	0003      	movs	r3, r0
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80059e8:	e00a      	b.n	8005a00 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80059ea:	f7fc ff6b 	bl	80028c4 <HAL_GetTick>
 80059ee:	0002      	movs	r2, r0
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	1ad2      	subs	r2, r2, r3
 80059f4:	23fa      	movs	r3, #250	@ 0xfa
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d901      	bls.n	8005a00 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e006      	b.n	8005a0e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d0ee      	beq.n	80059ea <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	0018      	movs	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	b004      	add	sp, #16
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	46c0      	nop			@ (mov r8, r8)
 8005a18:	0001005f 	.word	0x0001005f

08005a1c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005a24:	230f      	movs	r3, #15
 8005a26:	18fb      	adds	r3, r7, r3
 8005a28:	2200      	movs	r2, #0
 8005a2a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	2240      	movs	r2, #64	@ 0x40
 8005a34:	4013      	ands	r3, r2
 8005a36:	d12c      	bne.n	8005a92 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2180      	movs	r1, #128	@ 0x80
 8005a44:	430a      	orrs	r2, r1
 8005a46:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005a48:	f7fc ff3c 	bl	80028c4 <HAL_GetTick>
 8005a4c:	0003      	movs	r3, r0
 8005a4e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a50:	e014      	b.n	8005a7c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a52:	f7fc ff37 	bl	80028c4 <HAL_GetTick>
 8005a56:	0002      	movs	r2, r0
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	1ad2      	subs	r2, r2, r3
 8005a5c:	200f      	movs	r0, #15
 8005a5e:	183b      	adds	r3, r7, r0
 8005a60:	1839      	adds	r1, r7, r0
 8005a62:	7809      	ldrb	r1, [r1, #0]
 8005a64:	7019      	strb	r1, [r3, #0]
 8005a66:	23fa      	movs	r3, #250	@ 0xfa
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d906      	bls.n	8005a7c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005a6e:	183b      	adds	r3, r7, r0
 8005a70:	2203      	movs	r2, #3
 8005a72:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2229      	movs	r2, #41	@ 0x29
 8005a78:	2103      	movs	r1, #3
 8005a7a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	2240      	movs	r2, #64	@ 0x40
 8005a84:	4013      	ands	r3, r2
 8005a86:	d104      	bne.n	8005a92 <RTC_EnterInitMode+0x76>
 8005a88:	230f      	movs	r3, #15
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d1df      	bne.n	8005a52 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005a92:	230f      	movs	r3, #15
 8005a94:	18fb      	adds	r3, r7, r3
 8005a96:	781b      	ldrb	r3, [r3, #0]
}
 8005a98:	0018      	movs	r0, r3
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	b004      	add	sp, #16
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa8:	240f      	movs	r4, #15
 8005aaa:	193b      	adds	r3, r7, r4
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8005b24 <RTC_ExitInitMode+0x84>)
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8005b24 <RTC_ExitInitMode+0x84>)
 8005ab6:	2180      	movs	r1, #128	@ 0x80
 8005ab8:	438a      	bics	r2, r1
 8005aba:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005abc:	4b19      	ldr	r3, [pc, #100]	@ (8005b24 <RTC_ExitInitMode+0x84>)
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	d10d      	bne.n	8005ae2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	0018      	movs	r0, r3
 8005aca:	f7ff ff81 	bl	80059d0 <HAL_RTC_WaitForSynchro>
 8005ace:	1e03      	subs	r3, r0, #0
 8005ad0:	d021      	beq.n	8005b16 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2229      	movs	r2, #41	@ 0x29
 8005ad6:	2103      	movs	r1, #3
 8005ad8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005ada:	193b      	adds	r3, r7, r4
 8005adc:	2203      	movs	r2, #3
 8005ade:	701a      	strb	r2, [r3, #0]
 8005ae0:	e019      	b.n	8005b16 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005ae2:	4b10      	ldr	r3, [pc, #64]	@ (8005b24 <RTC_ExitInitMode+0x84>)
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8005b24 <RTC_ExitInitMode+0x84>)
 8005ae8:	2120      	movs	r1, #32
 8005aea:	438a      	bics	r2, r1
 8005aec:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	0018      	movs	r0, r3
 8005af2:	f7ff ff6d 	bl	80059d0 <HAL_RTC_WaitForSynchro>
 8005af6:	1e03      	subs	r3, r0, #0
 8005af8:	d007      	beq.n	8005b0a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2229      	movs	r2, #41	@ 0x29
 8005afe:	2103      	movs	r1, #3
 8005b00:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005b02:	230f      	movs	r3, #15
 8005b04:	18fb      	adds	r3, r7, r3
 8005b06:	2203      	movs	r2, #3
 8005b08:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005b0a:	4b06      	ldr	r3, [pc, #24]	@ (8005b24 <RTC_ExitInitMode+0x84>)
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	4b05      	ldr	r3, [pc, #20]	@ (8005b24 <RTC_ExitInitMode+0x84>)
 8005b10:	2120      	movs	r1, #32
 8005b12:	430a      	orrs	r2, r1
 8005b14:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005b16:	230f      	movs	r3, #15
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	781b      	ldrb	r3, [r3, #0]
}
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	b005      	add	sp, #20
 8005b22:	bd90      	pop	{r4, r7, pc}
 8005b24:	40002800 	.word	0x40002800

08005b28 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	0002      	movs	r2, r0
 8005b30:	1dfb      	adds	r3, r7, #7
 8005b32:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005b38:	230b      	movs	r3, #11
 8005b3a:	18fb      	adds	r3, r7, r3
 8005b3c:	1dfa      	adds	r2, r7, #7
 8005b3e:	7812      	ldrb	r2, [r2, #0]
 8005b40:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005b42:	e008      	b.n	8005b56 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3301      	adds	r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005b4a:	220b      	movs	r2, #11
 8005b4c:	18bb      	adds	r3, r7, r2
 8005b4e:	18ba      	adds	r2, r7, r2
 8005b50:	7812      	ldrb	r2, [r2, #0]
 8005b52:	3a0a      	subs	r2, #10
 8005b54:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005b56:	210b      	movs	r1, #11
 8005b58:	187b      	adds	r3, r7, r1
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b09      	cmp	r3, #9
 8005b5e:	d8f1      	bhi.n	8005b44 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	187b      	adds	r3, r7, r1
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	b2db      	uxtb	r3, r3
}
 8005b70:	0018      	movs	r0, r3
 8005b72:	46bd      	mov	sp, r7
 8005b74:	b004      	add	sp, #16
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	0002      	movs	r2, r0
 8005b80:	1dfb      	adds	r3, r7, #7
 8005b82:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005b84:	1dfb      	adds	r3, r7, #7
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	091b      	lsrs	r3, r3, #4
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	001a      	movs	r2, r3
 8005b8e:	0013      	movs	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	189b      	adds	r3, r3, r2
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	1dfb      	adds	r3, r7, #7
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	210f      	movs	r1, #15
 8005ba2:	400b      	ands	r3, r1
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	18d3      	adds	r3, r2, r3
 8005ba8:	b2db      	uxtb	r3, r3
}
 8005baa:	0018      	movs	r0, r3
 8005bac:	46bd      	mov	sp, r7
 8005bae:	b004      	add	sp, #16
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b086      	sub	sp, #24
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
 8005bbe:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2228      	movs	r2, #40	@ 0x28
 8005bc4:	5c9b      	ldrb	r3, [r3, r2]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_RTCEx_SetSmoothCalib+0x1c>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e04f      	b.n	8005c6e <HAL_RTCEx_SetSmoothCalib+0xbc>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2228      	movs	r2, #40	@ 0x28
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2229      	movs	r2, #41	@ 0x29
 8005bda:	2102      	movs	r1, #2
 8005bdc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	22ca      	movs	r2, #202	@ 0xca
 8005be4:	625a      	str	r2, [r3, #36]	@ 0x24
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2253      	movs	r2, #83	@ 0x53
 8005bec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	2380      	movs	r3, #128	@ 0x80
 8005bf6:	025b      	lsls	r3, r3, #9
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d022      	beq.n	8005c42 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8005bfc:	f7fc fe62 	bl	80028c4 <HAL_GetTick>
 8005c00:	0003      	movs	r3, r0
 8005c02:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8005c04:	e016      	b.n	8005c34 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c06:	f7fc fe5d 	bl	80028c4 <HAL_GetTick>
 8005c0a:	0002      	movs	r2, r0
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	1ad2      	subs	r2, r2, r3
 8005c10:	23fa      	movs	r3, #250	@ 0xfa
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d90d      	bls.n	8005c34 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	22ff      	movs	r2, #255	@ 0xff
 8005c1e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2229      	movs	r2, #41	@ 0x29
 8005c24:	2103      	movs	r1, #3
 8005c26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2228      	movs	r2, #40	@ 0x28
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e01c      	b.n	8005c6e <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	2380      	movs	r3, #128	@ 0x80
 8005c3c:	025b      	lsls	r3, r3, #9
 8005c3e:	4013      	ands	r3, r2
 8005c40:	d1e1      	bne.n	8005c06 <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	431a      	orrs	r2, r3
 8005c48:	0011      	movs	r1, r2
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	22ff      	movs	r2, #255	@ 0xff
 8005c5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2229      	movs	r2, #41	@ 0x29
 8005c60:	2101      	movs	r1, #1
 8005c62:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2228      	movs	r2, #40	@ 0x28
 8005c68:	2100      	movs	r1, #0
 8005c6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	0018      	movs	r0, r3
 8005c70:	46bd      	mov	sp, r7
 8005c72:	b006      	add	sp, #24
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2228      	movs	r2, #40	@ 0x28
 8005c86:	5c9b      	ldrb	r3, [r3, r2]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e035      	b.n	8005cfc <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2228      	movs	r2, #40	@ 0x28
 8005c94:	2101      	movs	r1, #1
 8005c96:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2229      	movs	r2, #41	@ 0x29
 8005c9c:	2102      	movs	r1, #2
 8005c9e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	22ca      	movs	r2, #202	@ 0xca
 8005ca6:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2253      	movs	r2, #83	@ 0x53
 8005cae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699a      	ldr	r2, [r3, #24]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4912      	ldr	r1, [pc, #72]	@ (8005d04 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8005cbc:	400a      	ands	r2, r1
 8005cbe:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6999      	ldr	r1, [r3, #24]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699a      	ldr	r2, [r3, #24]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2180      	movs	r1, #128	@ 0x80
 8005cdc:	0409      	lsls	r1, r1, #16
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	22ff      	movs	r2, #255	@ 0xff
 8005ce8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2229      	movs	r2, #41	@ 0x29
 8005cee:	2101      	movs	r1, #1
 8005cf0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2228      	movs	r2, #40	@ 0x28
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	b002      	add	sp, #8
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	fff7ffff 	.word	0xfff7ffff

08005d08 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005d10:	46c0      	nop			@ (mov r8, r8)
 8005d12:	46bd      	mov	sp, r7
 8005d14:	b002      	add	sp, #8
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	001a      	movs	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	18d3      	adds	r3, r2, r3
 8005d30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	3301      	adds	r3, #1
 8005d36:	33ff      	adds	r3, #255	@ 0xff
 8005d38:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	18d3      	adds	r3, r2, r3
 8005d42:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	601a      	str	r2, [r3, #0]
}
 8005d4a:	46c0      	nop			@ (mov r8, r8)
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	b006      	add	sp, #24
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	001a      	movs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	18d3      	adds	r3, r2, r3
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	33ff      	adds	r3, #255	@ 0xff
 8005d70:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	18d3      	adds	r3, r2, r3
 8005d7a:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	681b      	ldr	r3, [r3, #0]
}
 8005d80:	0018      	movs	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	b004      	add	sp, #16
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e0a8      	b.n	8005eec <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	2382      	movs	r3, #130	@ 0x82
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d009      	beq.n	8005dc2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	61da      	str	r2, [r3, #28]
 8005db4:	e005      	b.n	8005dc2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	225d      	movs	r2, #93	@ 0x5d
 8005dcc:	5c9b      	ldrb	r3, [r3, r2]
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d107      	bne.n	8005de4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	225c      	movs	r2, #92	@ 0x5c
 8005dd8:	2100      	movs	r1, #0
 8005dda:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	0018      	movs	r0, r3
 8005de0:	f7fc fb74 	bl	80024cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	225d      	movs	r2, #93	@ 0x5d
 8005de8:	2102      	movs	r1, #2
 8005dea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2140      	movs	r1, #64	@ 0x40
 8005df8:	438a      	bics	r2, r1
 8005dfa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	23e0      	movs	r3, #224	@ 0xe0
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d902      	bls.n	8005e0e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	e002      	b.n	8005e14 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e0e:	2380      	movs	r3, #128	@ 0x80
 8005e10:	015b      	lsls	r3, r3, #5
 8005e12:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	23f0      	movs	r3, #240	@ 0xf0
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d008      	beq.n	8005e32 <HAL_SPI_Init+0xaa>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68da      	ldr	r2, [r3, #12]
 8005e24:	23e0      	movs	r3, #224	@ 0xe0
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d002      	beq.n	8005e32 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	2382      	movs	r3, #130	@ 0x82
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	401a      	ands	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6899      	ldr	r1, [r3, #8]
 8005e40:	2384      	movs	r3, #132	@ 0x84
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	400b      	ands	r3, r1
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2102      	movs	r1, #2
 8005e4e:	400b      	ands	r3, r1
 8005e50:	431a      	orrs	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	2101      	movs	r1, #1
 8005e58:	400b      	ands	r3, r1
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6999      	ldr	r1, [r3, #24]
 8005e60:	2380      	movs	r3, #128	@ 0x80
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	400b      	ands	r3, r1
 8005e66:	431a      	orrs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	2138      	movs	r1, #56	@ 0x38
 8005e6e:	400b      	ands	r3, r1
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	2180      	movs	r1, #128	@ 0x80
 8005e78:	400b      	ands	r3, r1
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	0011      	movs	r1, r2
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e82:	2380      	movs	r3, #128	@ 0x80
 8005e84:	019b      	lsls	r3, r3, #6
 8005e86:	401a      	ands	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	0c1b      	lsrs	r3, r3, #16
 8005e96:	2204      	movs	r2, #4
 8005e98:	401a      	ands	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9e:	2110      	movs	r1, #16
 8005ea0:	400b      	ands	r3, r1
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ea8:	2108      	movs	r1, #8
 8005eaa:	400b      	ands	r3, r1
 8005eac:	431a      	orrs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68d9      	ldr	r1, [r3, #12]
 8005eb2:	23f0      	movs	r3, #240	@ 0xf0
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	400b      	ands	r3, r1
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	0011      	movs	r1, r2
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	2380      	movs	r3, #128	@ 0x80
 8005ec0:	015b      	lsls	r3, r3, #5
 8005ec2:	401a      	ands	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69da      	ldr	r2, [r3, #28]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4907      	ldr	r1, [pc, #28]	@ (8005ef4 <HAL_SPI_Init+0x16c>)
 8005ed8:	400a      	ands	r2, r1
 8005eda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	225d      	movs	r2, #93	@ 0x5d
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	0018      	movs	r0, r3
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	b004      	add	sp, #16
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	fffff7ff 	.word	0xfffff7ff

08005ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e04a      	b.n	8005fa0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	223d      	movs	r2, #61	@ 0x3d
 8005f0e:	5c9b      	ldrb	r3, [r3, r2]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d107      	bne.n	8005f26 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	223c      	movs	r2, #60	@ 0x3c
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	0018      	movs	r0, r3
 8005f22:	f7fc fb4f 	bl	80025c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	223d      	movs	r2, #61	@ 0x3d
 8005f2a:	2102      	movs	r1, #2
 8005f2c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3304      	adds	r3, #4
 8005f36:	0019      	movs	r1, r3
 8005f38:	0010      	movs	r0, r2
 8005f3a:	f000 fc87 	bl	800684c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2248      	movs	r2, #72	@ 0x48
 8005f42:	2101      	movs	r1, #1
 8005f44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	223e      	movs	r2, #62	@ 0x3e
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	5499      	strb	r1, [r3, r2]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	223f      	movs	r2, #63	@ 0x3f
 8005f52:	2101      	movs	r1, #1
 8005f54:	5499      	strb	r1, [r3, r2]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2240      	movs	r2, #64	@ 0x40
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	5499      	strb	r1, [r3, r2]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2241      	movs	r2, #65	@ 0x41
 8005f62:	2101      	movs	r1, #1
 8005f64:	5499      	strb	r1, [r3, r2]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2242      	movs	r2, #66	@ 0x42
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	5499      	strb	r1, [r3, r2]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2243      	movs	r2, #67	@ 0x43
 8005f72:	2101      	movs	r1, #1
 8005f74:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2244      	movs	r2, #68	@ 0x44
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	5499      	strb	r1, [r3, r2]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2245      	movs	r2, #69	@ 0x45
 8005f82:	2101      	movs	r1, #1
 8005f84:	5499      	strb	r1, [r3, r2]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2246      	movs	r2, #70	@ 0x46
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	5499      	strb	r1, [r3, r2]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2247      	movs	r2, #71	@ 0x47
 8005f92:	2101      	movs	r1, #1
 8005f94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	223d      	movs	r2, #61	@ 0x3d
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	b002      	add	sp, #8
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	223d      	movs	r2, #61	@ 0x3d
 8005fb4:	5c9b      	ldrb	r3, [r3, r2]
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d001      	beq.n	8005fc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e035      	b.n	800602c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	223d      	movs	r2, #61	@ 0x3d
 8005fc4:	2102      	movs	r1, #2
 8005fc6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a19      	ldr	r2, [pc, #100]	@ (8006034 <HAL_TIM_Base_Start+0x8c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00a      	beq.n	8005fe8 <HAL_TIM_Base_Start+0x40>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	2380      	movs	r3, #128	@ 0x80
 8005fd8:	05db      	lsls	r3, r3, #23
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d004      	beq.n	8005fe8 <HAL_TIM_Base_Start+0x40>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a15      	ldr	r2, [pc, #84]	@ (8006038 <HAL_TIM_Base_Start+0x90>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d116      	bne.n	8006016 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	4a13      	ldr	r2, [pc, #76]	@ (800603c <HAL_TIM_Base_Start+0x94>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b06      	cmp	r3, #6
 8005ff8:	d016      	beq.n	8006028 <HAL_TIM_Base_Start+0x80>
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	2380      	movs	r3, #128	@ 0x80
 8005ffe:	025b      	lsls	r3, r3, #9
 8006000:	429a      	cmp	r2, r3
 8006002:	d011      	beq.n	8006028 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2101      	movs	r1, #1
 8006010:	430a      	orrs	r2, r1
 8006012:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006014:	e008      	b.n	8006028 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2101      	movs	r1, #1
 8006022:	430a      	orrs	r2, r1
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	e000      	b.n	800602a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006028:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	0018      	movs	r0, r3
 800602e:	46bd      	mov	sp, r7
 8006030:	b004      	add	sp, #16
 8006032:	bd80      	pop	{r7, pc}
 8006034:	40012c00 	.word	0x40012c00
 8006038:	40000400 	.word	0x40000400
 800603c:	00010007 	.word	0x00010007

08006040 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	4a0d      	ldr	r2, [pc, #52]	@ (8006084 <HAL_TIM_Base_Stop+0x44>)
 8006050:	4013      	ands	r3, r2
 8006052:	d10d      	bne.n	8006070 <HAL_TIM_Base_Stop+0x30>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	4a0b      	ldr	r2, [pc, #44]	@ (8006088 <HAL_TIM_Base_Stop+0x48>)
 800605c:	4013      	ands	r3, r2
 800605e:	d107      	bne.n	8006070 <HAL_TIM_Base_Stop+0x30>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2101      	movs	r1, #1
 800606c:	438a      	bics	r2, r1
 800606e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	223d      	movs	r2, #61	@ 0x3d
 8006074:	2101      	movs	r1, #1
 8006076:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	0018      	movs	r0, r3
 800607c:	46bd      	mov	sp, r7
 800607e:	b002      	add	sp, #8
 8006080:	bd80      	pop	{r7, pc}
 8006082:	46c0      	nop			@ (mov r8, r8)
 8006084:	00001111 	.word	0x00001111
 8006088:	00000444 	.word	0x00000444

0800608c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	223d      	movs	r2, #61	@ 0x3d
 8006098:	5c9b      	ldrb	r3, [r3, r2]
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b01      	cmp	r3, #1
 800609e:	d001      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e03d      	b.n	8006120 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	223d      	movs	r2, #61	@ 0x3d
 80060a8:	2102      	movs	r1, #2
 80060aa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2101      	movs	r1, #1
 80060b8:	430a      	orrs	r2, r1
 80060ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a19      	ldr	r2, [pc, #100]	@ (8006128 <HAL_TIM_Base_Start_IT+0x9c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00a      	beq.n	80060dc <HAL_TIM_Base_Start_IT+0x50>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	2380      	movs	r3, #128	@ 0x80
 80060cc:	05db      	lsls	r3, r3, #23
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d004      	beq.n	80060dc <HAL_TIM_Base_Start_IT+0x50>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a15      	ldr	r2, [pc, #84]	@ (800612c <HAL_TIM_Base_Start_IT+0xa0>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d116      	bne.n	800610a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	4a13      	ldr	r2, [pc, #76]	@ (8006130 <HAL_TIM_Base_Start_IT+0xa4>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b06      	cmp	r3, #6
 80060ec:	d016      	beq.n	800611c <HAL_TIM_Base_Start_IT+0x90>
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	2380      	movs	r3, #128	@ 0x80
 80060f2:	025b      	lsls	r3, r3, #9
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d011      	beq.n	800611c <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2101      	movs	r1, #1
 8006104:	430a      	orrs	r2, r1
 8006106:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006108:	e008      	b.n	800611c <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2101      	movs	r1, #1
 8006116:	430a      	orrs	r2, r1
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	e000      	b.n	800611e <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800611c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	0018      	movs	r0, r3
 8006122:	46bd      	mov	sp, r7
 8006124:	b004      	add	sp, #16
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40000400 	.word	0x40000400
 8006130:	00010007 	.word	0x00010007

08006134 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2101      	movs	r1, #1
 8006148:	438a      	bics	r2, r1
 800614a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	4a0d      	ldr	r2, [pc, #52]	@ (8006188 <HAL_TIM_Base_Stop_IT+0x54>)
 8006154:	4013      	ands	r3, r2
 8006156:	d10d      	bne.n	8006174 <HAL_TIM_Base_Stop_IT+0x40>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	4a0b      	ldr	r2, [pc, #44]	@ (800618c <HAL_TIM_Base_Stop_IT+0x58>)
 8006160:	4013      	ands	r3, r2
 8006162:	d107      	bne.n	8006174 <HAL_TIM_Base_Stop_IT+0x40>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2101      	movs	r1, #1
 8006170:	438a      	bics	r2, r1
 8006172:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	223d      	movs	r2, #61	@ 0x3d
 8006178:	2101      	movs	r1, #1
 800617a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	0018      	movs	r0, r3
 8006180:	46bd      	mov	sp, r7
 8006182:	b002      	add	sp, #8
 8006184:	bd80      	pop	{r7, pc}
 8006186:	46c0      	nop			@ (mov r8, r8)
 8006188:	00001111 	.word	0x00001111
 800618c:	00000444 	.word	0x00000444

08006190 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e04a      	b.n	8006238 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	223d      	movs	r2, #61	@ 0x3d
 80061a6:	5c9b      	ldrb	r3, [r3, r2]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d107      	bne.n	80061be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	223c      	movs	r2, #60	@ 0x3c
 80061b2:	2100      	movs	r1, #0
 80061b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	0018      	movs	r0, r3
 80061ba:	f7fc f9e7 	bl	800258c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	223d      	movs	r2, #61	@ 0x3d
 80061c2:	2102      	movs	r1, #2
 80061c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3304      	adds	r3, #4
 80061ce:	0019      	movs	r1, r3
 80061d0:	0010      	movs	r0, r2
 80061d2:	f000 fb3b 	bl	800684c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2248      	movs	r2, #72	@ 0x48
 80061da:	2101      	movs	r1, #1
 80061dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	223e      	movs	r2, #62	@ 0x3e
 80061e2:	2101      	movs	r1, #1
 80061e4:	5499      	strb	r1, [r3, r2]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	223f      	movs	r2, #63	@ 0x3f
 80061ea:	2101      	movs	r1, #1
 80061ec:	5499      	strb	r1, [r3, r2]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2240      	movs	r2, #64	@ 0x40
 80061f2:	2101      	movs	r1, #1
 80061f4:	5499      	strb	r1, [r3, r2]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2241      	movs	r2, #65	@ 0x41
 80061fa:	2101      	movs	r1, #1
 80061fc:	5499      	strb	r1, [r3, r2]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2242      	movs	r2, #66	@ 0x42
 8006202:	2101      	movs	r1, #1
 8006204:	5499      	strb	r1, [r3, r2]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2243      	movs	r2, #67	@ 0x43
 800620a:	2101      	movs	r1, #1
 800620c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2244      	movs	r2, #68	@ 0x44
 8006212:	2101      	movs	r1, #1
 8006214:	5499      	strb	r1, [r3, r2]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2245      	movs	r2, #69	@ 0x45
 800621a:	2101      	movs	r1, #1
 800621c:	5499      	strb	r1, [r3, r2]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2246      	movs	r2, #70	@ 0x46
 8006222:	2101      	movs	r1, #1
 8006224:	5499      	strb	r1, [r3, r2]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2247      	movs	r2, #71	@ 0x47
 800622a:	2101      	movs	r1, #1
 800622c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	223d      	movs	r2, #61	@ 0x3d
 8006232:	2101      	movs	r1, #1
 8006234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	0018      	movs	r0, r3
 800623a:	46bd      	mov	sp, r7
 800623c:	b002      	add	sp, #8
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d108      	bne.n	8006262 <HAL_TIM_PWM_Start+0x22>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	223e      	movs	r2, #62	@ 0x3e
 8006254:	5c9b      	ldrb	r3, [r3, r2]
 8006256:	b2db      	uxtb	r3, r3
 8006258:	3b01      	subs	r3, #1
 800625a:	1e5a      	subs	r2, r3, #1
 800625c:	4193      	sbcs	r3, r2
 800625e:	b2db      	uxtb	r3, r3
 8006260:	e037      	b.n	80062d2 <HAL_TIM_PWM_Start+0x92>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b04      	cmp	r3, #4
 8006266:	d108      	bne.n	800627a <HAL_TIM_PWM_Start+0x3a>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	223f      	movs	r2, #63	@ 0x3f
 800626c:	5c9b      	ldrb	r3, [r3, r2]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	3b01      	subs	r3, #1
 8006272:	1e5a      	subs	r2, r3, #1
 8006274:	4193      	sbcs	r3, r2
 8006276:	b2db      	uxtb	r3, r3
 8006278:	e02b      	b.n	80062d2 <HAL_TIM_PWM_Start+0x92>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b08      	cmp	r3, #8
 800627e:	d108      	bne.n	8006292 <HAL_TIM_PWM_Start+0x52>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2240      	movs	r2, #64	@ 0x40
 8006284:	5c9b      	ldrb	r3, [r3, r2]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	3b01      	subs	r3, #1
 800628a:	1e5a      	subs	r2, r3, #1
 800628c:	4193      	sbcs	r3, r2
 800628e:	b2db      	uxtb	r3, r3
 8006290:	e01f      	b.n	80062d2 <HAL_TIM_PWM_Start+0x92>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b0c      	cmp	r3, #12
 8006296:	d108      	bne.n	80062aa <HAL_TIM_PWM_Start+0x6a>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2241      	movs	r2, #65	@ 0x41
 800629c:	5c9b      	ldrb	r3, [r3, r2]
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	3b01      	subs	r3, #1
 80062a2:	1e5a      	subs	r2, r3, #1
 80062a4:	4193      	sbcs	r3, r2
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	e013      	b.n	80062d2 <HAL_TIM_PWM_Start+0x92>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b10      	cmp	r3, #16
 80062ae:	d108      	bne.n	80062c2 <HAL_TIM_PWM_Start+0x82>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2242      	movs	r2, #66	@ 0x42
 80062b4:	5c9b      	ldrb	r3, [r3, r2]
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	1e5a      	subs	r2, r3, #1
 80062bc:	4193      	sbcs	r3, r2
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	e007      	b.n	80062d2 <HAL_TIM_PWM_Start+0x92>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2243      	movs	r2, #67	@ 0x43
 80062c6:	5c9b      	ldrb	r3, [r3, r2]
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	1e5a      	subs	r2, r3, #1
 80062ce:	4193      	sbcs	r3, r2
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e081      	b.n	80063de <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d104      	bne.n	80062ea <HAL_TIM_PWM_Start+0xaa>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	223e      	movs	r2, #62	@ 0x3e
 80062e4:	2102      	movs	r1, #2
 80062e6:	5499      	strb	r1, [r3, r2]
 80062e8:	e023      	b.n	8006332 <HAL_TIM_PWM_Start+0xf2>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d104      	bne.n	80062fa <HAL_TIM_PWM_Start+0xba>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	223f      	movs	r2, #63	@ 0x3f
 80062f4:	2102      	movs	r1, #2
 80062f6:	5499      	strb	r1, [r3, r2]
 80062f8:	e01b      	b.n	8006332 <HAL_TIM_PWM_Start+0xf2>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d104      	bne.n	800630a <HAL_TIM_PWM_Start+0xca>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2240      	movs	r2, #64	@ 0x40
 8006304:	2102      	movs	r1, #2
 8006306:	5499      	strb	r1, [r3, r2]
 8006308:	e013      	b.n	8006332 <HAL_TIM_PWM_Start+0xf2>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b0c      	cmp	r3, #12
 800630e:	d104      	bne.n	800631a <HAL_TIM_PWM_Start+0xda>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2241      	movs	r2, #65	@ 0x41
 8006314:	2102      	movs	r1, #2
 8006316:	5499      	strb	r1, [r3, r2]
 8006318:	e00b      	b.n	8006332 <HAL_TIM_PWM_Start+0xf2>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b10      	cmp	r3, #16
 800631e:	d104      	bne.n	800632a <HAL_TIM_PWM_Start+0xea>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2242      	movs	r2, #66	@ 0x42
 8006324:	2102      	movs	r1, #2
 8006326:	5499      	strb	r1, [r3, r2]
 8006328:	e003      	b.n	8006332 <HAL_TIM_PWM_Start+0xf2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2243      	movs	r2, #67	@ 0x43
 800632e:	2102      	movs	r1, #2
 8006330:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	2201      	movs	r2, #1
 800633a:	0018      	movs	r0, r3
 800633c:	f000 fda6 	bl	8006e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a28      	ldr	r2, [pc, #160]	@ (80063e8 <HAL_TIM_PWM_Start+0x1a8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d009      	beq.n	800635e <HAL_TIM_PWM_Start+0x11e>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a27      	ldr	r2, [pc, #156]	@ (80063ec <HAL_TIM_PWM_Start+0x1ac>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d004      	beq.n	800635e <HAL_TIM_PWM_Start+0x11e>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a25      	ldr	r2, [pc, #148]	@ (80063f0 <HAL_TIM_PWM_Start+0x1b0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d101      	bne.n	8006362 <HAL_TIM_PWM_Start+0x122>
 800635e:	2301      	movs	r3, #1
 8006360:	e000      	b.n	8006364 <HAL_TIM_PWM_Start+0x124>
 8006362:	2300      	movs	r3, #0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d008      	beq.n	800637a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2180      	movs	r1, #128	@ 0x80
 8006374:	0209      	lsls	r1, r1, #8
 8006376:	430a      	orrs	r2, r1
 8006378:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a1a      	ldr	r2, [pc, #104]	@ (80063e8 <HAL_TIM_PWM_Start+0x1a8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d00a      	beq.n	800639a <HAL_TIM_PWM_Start+0x15a>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	2380      	movs	r3, #128	@ 0x80
 800638a:	05db      	lsls	r3, r3, #23
 800638c:	429a      	cmp	r2, r3
 800638e:	d004      	beq.n	800639a <HAL_TIM_PWM_Start+0x15a>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a17      	ldr	r2, [pc, #92]	@ (80063f4 <HAL_TIM_PWM_Start+0x1b4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d116      	bne.n	80063c8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	4a15      	ldr	r2, [pc, #84]	@ (80063f8 <HAL_TIM_PWM_Start+0x1b8>)
 80063a2:	4013      	ands	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b06      	cmp	r3, #6
 80063aa:	d016      	beq.n	80063da <HAL_TIM_PWM_Start+0x19a>
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	2380      	movs	r3, #128	@ 0x80
 80063b0:	025b      	lsls	r3, r3, #9
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d011      	beq.n	80063da <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2101      	movs	r1, #1
 80063c2:	430a      	orrs	r2, r1
 80063c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c6:	e008      	b.n	80063da <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2101      	movs	r1, #1
 80063d4:	430a      	orrs	r2, r1
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	e000      	b.n	80063dc <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063da:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	0018      	movs	r0, r3
 80063e0:	46bd      	mov	sp, r7
 80063e2:	b004      	add	sp, #16
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	46c0      	nop			@ (mov r8, r8)
 80063e8:	40012c00 	.word	0x40012c00
 80063ec:	40014400 	.word	0x40014400
 80063f0:	40014800 	.word	0x40014800
 80063f4:	40000400 	.word	0x40000400
 80063f8:	00010007 	.word	0x00010007

080063fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2202      	movs	r2, #2
 8006418:	4013      	ands	r3, r2
 800641a:	d021      	beq.n	8006460 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2202      	movs	r2, #2
 8006420:	4013      	ands	r3, r2
 8006422:	d01d      	beq.n	8006460 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2203      	movs	r2, #3
 800642a:	4252      	negs	r2, r2
 800642c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	2203      	movs	r2, #3
 800643c:	4013      	ands	r3, r2
 800643e:	d004      	beq.n	800644a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	0018      	movs	r0, r3
 8006444:	f000 f9ea 	bl	800681c <HAL_TIM_IC_CaptureCallback>
 8006448:	e007      	b.n	800645a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	0018      	movs	r0, r3
 800644e:	f000 f9dd 	bl	800680c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	0018      	movs	r0, r3
 8006456:	f000 f9e9 	bl	800682c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2204      	movs	r2, #4
 8006464:	4013      	ands	r3, r2
 8006466:	d022      	beq.n	80064ae <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2204      	movs	r2, #4
 800646c:	4013      	ands	r3, r2
 800646e:	d01e      	beq.n	80064ae <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2205      	movs	r2, #5
 8006476:	4252      	negs	r2, r2
 8006478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2202      	movs	r2, #2
 800647e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	23c0      	movs	r3, #192	@ 0xc0
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4013      	ands	r3, r2
 800648c:	d004      	beq.n	8006498 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	0018      	movs	r0, r3
 8006492:	f000 f9c3 	bl	800681c <HAL_TIM_IC_CaptureCallback>
 8006496:	e007      	b.n	80064a8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	0018      	movs	r0, r3
 800649c:	f000 f9b6 	bl	800680c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	0018      	movs	r0, r3
 80064a4:	f000 f9c2 	bl	800682c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2208      	movs	r2, #8
 80064b2:	4013      	ands	r3, r2
 80064b4:	d021      	beq.n	80064fa <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2208      	movs	r2, #8
 80064ba:	4013      	ands	r3, r2
 80064bc:	d01d      	beq.n	80064fa <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2209      	movs	r2, #9
 80064c4:	4252      	negs	r2, r2
 80064c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2204      	movs	r2, #4
 80064cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	2203      	movs	r2, #3
 80064d6:	4013      	ands	r3, r2
 80064d8:	d004      	beq.n	80064e4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	0018      	movs	r0, r3
 80064de:	f000 f99d 	bl	800681c <HAL_TIM_IC_CaptureCallback>
 80064e2:	e007      	b.n	80064f4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	0018      	movs	r0, r3
 80064e8:	f000 f990 	bl	800680c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	0018      	movs	r0, r3
 80064f0:	f000 f99c 	bl	800682c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2210      	movs	r2, #16
 80064fe:	4013      	ands	r3, r2
 8006500:	d022      	beq.n	8006548 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2210      	movs	r2, #16
 8006506:	4013      	ands	r3, r2
 8006508:	d01e      	beq.n	8006548 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2211      	movs	r2, #17
 8006510:	4252      	negs	r2, r2
 8006512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2208      	movs	r2, #8
 8006518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	23c0      	movs	r3, #192	@ 0xc0
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4013      	ands	r3, r2
 8006526:	d004      	beq.n	8006532 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	0018      	movs	r0, r3
 800652c:	f000 f976 	bl	800681c <HAL_TIM_IC_CaptureCallback>
 8006530:	e007      	b.n	8006542 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	0018      	movs	r0, r3
 8006536:	f000 f969 	bl	800680c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	0018      	movs	r0, r3
 800653e:	f000 f975 	bl	800682c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2201      	movs	r2, #1
 800654c:	4013      	ands	r3, r2
 800654e:	d00c      	beq.n	800656a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2201      	movs	r2, #1
 8006554:	4013      	ands	r3, r2
 8006556:	d008      	beq.n	800656a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2202      	movs	r2, #2
 800655e:	4252      	negs	r2, r2
 8006560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	0018      	movs	r0, r3
 8006566:	f7fb f8ff 	bl	8001768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2280      	movs	r2, #128	@ 0x80
 800656e:	4013      	ands	r3, r2
 8006570:	d104      	bne.n	800657c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	2380      	movs	r3, #128	@ 0x80
 8006576:	019b      	lsls	r3, r3, #6
 8006578:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800657a:	d00b      	beq.n	8006594 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2280      	movs	r2, #128	@ 0x80
 8006580:	4013      	ands	r3, r2
 8006582:	d007      	beq.n	8006594 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a1e      	ldr	r2, [pc, #120]	@ (8006604 <HAL_TIM_IRQHandler+0x208>)
 800658a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	0018      	movs	r0, r3
 8006590:	f000 fd10 	bl	8006fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	2380      	movs	r3, #128	@ 0x80
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	4013      	ands	r3, r2
 800659c:	d00b      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2280      	movs	r2, #128	@ 0x80
 80065a2:	4013      	ands	r3, r2
 80065a4:	d007      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a17      	ldr	r2, [pc, #92]	@ (8006608 <HAL_TIM_IRQHandler+0x20c>)
 80065ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	0018      	movs	r0, r3
 80065b2:	f000 fd07 	bl	8006fc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2240      	movs	r2, #64	@ 0x40
 80065ba:	4013      	ands	r3, r2
 80065bc:	d00c      	beq.n	80065d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2240      	movs	r2, #64	@ 0x40
 80065c2:	4013      	ands	r3, r2
 80065c4:	d008      	beq.n	80065d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2241      	movs	r2, #65	@ 0x41
 80065cc:	4252      	negs	r2, r2
 80065ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	0018      	movs	r0, r3
 80065d4:	f000 f932 	bl	800683c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2220      	movs	r2, #32
 80065dc:	4013      	ands	r3, r2
 80065de:	d00c      	beq.n	80065fa <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	4013      	ands	r3, r2
 80065e6:	d008      	beq.n	80065fa <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2221      	movs	r2, #33	@ 0x21
 80065ee:	4252      	negs	r2, r2
 80065f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	0018      	movs	r0, r3
 80065f6:	f000 fcd5 	bl	8006fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065fa:	46c0      	nop			@ (mov r8, r8)
 80065fc:	46bd      	mov	sp, r7
 80065fe:	b004      	add	sp, #16
 8006600:	bd80      	pop	{r7, pc}
 8006602:	46c0      	nop			@ (mov r8, r8)
 8006604:	ffffdf7f 	.word	0xffffdf7f
 8006608:	fffffeff 	.word	0xfffffeff

0800660c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006618:	2317      	movs	r3, #23
 800661a:	18fb      	adds	r3, r7, r3
 800661c:	2200      	movs	r2, #0
 800661e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	223c      	movs	r2, #60	@ 0x3c
 8006624:	5c9b      	ldrb	r3, [r3, r2]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <HAL_TIM_PWM_ConfigChannel+0x22>
 800662a:	2302      	movs	r3, #2
 800662c:	e0e5      	b.n	80067fa <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	223c      	movs	r2, #60	@ 0x3c
 8006632:	2101      	movs	r1, #1
 8006634:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b14      	cmp	r3, #20
 800663a:	d900      	bls.n	800663e <HAL_TIM_PWM_ConfigChannel+0x32>
 800663c:	e0d1      	b.n	80067e2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	009a      	lsls	r2, r3, #2
 8006642:	4b70      	ldr	r3, [pc, #448]	@ (8006804 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006644:	18d3      	adds	r3, r2, r3
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	0011      	movs	r1, r2
 8006652:	0018      	movs	r0, r3
 8006654:	f000 f97e 	bl	8006954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699a      	ldr	r2, [r3, #24]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2108      	movs	r1, #8
 8006664:	430a      	orrs	r2, r1
 8006666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2104      	movs	r1, #4
 8006674:	438a      	bics	r2, r1
 8006676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6999      	ldr	r1, [r3, #24]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	691a      	ldr	r2, [r3, #16]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	619a      	str	r2, [r3, #24]
      break;
 800668a:	e0af      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	0011      	movs	r1, r2
 8006694:	0018      	movs	r0, r3
 8006696:	f000 f9dd 	bl	8006a54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	699a      	ldr	r2, [r3, #24]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2180      	movs	r1, #128	@ 0x80
 80066a6:	0109      	lsls	r1, r1, #4
 80066a8:	430a      	orrs	r2, r1
 80066aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	699a      	ldr	r2, [r3, #24]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4954      	ldr	r1, [pc, #336]	@ (8006808 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80066b8:	400a      	ands	r2, r1
 80066ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6999      	ldr	r1, [r3, #24]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	021a      	lsls	r2, r3, #8
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	619a      	str	r2, [r3, #24]
      break;
 80066d0:	e08c      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	0011      	movs	r1, r2
 80066da:	0018      	movs	r0, r3
 80066dc:	f000 fa38 	bl	8006b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	69da      	ldr	r2, [r3, #28]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2108      	movs	r1, #8
 80066ec:	430a      	orrs	r2, r1
 80066ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	69da      	ldr	r2, [r3, #28]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2104      	movs	r1, #4
 80066fc:	438a      	bics	r2, r1
 80066fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	69d9      	ldr	r1, [r3, #28]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	691a      	ldr	r2, [r3, #16]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	61da      	str	r2, [r3, #28]
      break;
 8006712:	e06b      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	0011      	movs	r1, r2
 800671c:	0018      	movs	r0, r3
 800671e:	f000 fa99 	bl	8006c54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69da      	ldr	r2, [r3, #28]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2180      	movs	r1, #128	@ 0x80
 800672e:	0109      	lsls	r1, r1, #4
 8006730:	430a      	orrs	r2, r1
 8006732:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69da      	ldr	r2, [r3, #28]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4932      	ldr	r1, [pc, #200]	@ (8006808 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006740:	400a      	ands	r2, r1
 8006742:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69d9      	ldr	r1, [r3, #28]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	021a      	lsls	r2, r3, #8
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	61da      	str	r2, [r3, #28]
      break;
 8006758:	e048      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	0011      	movs	r1, r2
 8006762:	0018      	movs	r0, r3
 8006764:	f000 fada 	bl	8006d1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2108      	movs	r1, #8
 8006774:	430a      	orrs	r2, r1
 8006776:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2104      	movs	r1, #4
 8006784:	438a      	bics	r2, r1
 8006786:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	691a      	ldr	r2, [r3, #16]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800679a:	e027      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	0011      	movs	r1, r2
 80067a4:	0018      	movs	r0, r3
 80067a6:	f000 fb13 	bl	8006dd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2180      	movs	r1, #128	@ 0x80
 80067b6:	0109      	lsls	r1, r1, #4
 80067b8:	430a      	orrs	r2, r1
 80067ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4910      	ldr	r1, [pc, #64]	@ (8006808 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80067c8:	400a      	ands	r2, r1
 80067ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	021a      	lsls	r2, r3, #8
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80067e0:	e004      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80067e2:	2317      	movs	r3, #23
 80067e4:	18fb      	adds	r3, r7, r3
 80067e6:	2201      	movs	r2, #1
 80067e8:	701a      	strb	r2, [r3, #0]
      break;
 80067ea:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	223c      	movs	r2, #60	@ 0x3c
 80067f0:	2100      	movs	r1, #0
 80067f2:	5499      	strb	r1, [r3, r2]

  return status;
 80067f4:	2317      	movs	r3, #23
 80067f6:	18fb      	adds	r3, r7, r3
 80067f8:	781b      	ldrb	r3, [r3, #0]
}
 80067fa:	0018      	movs	r0, r3
 80067fc:	46bd      	mov	sp, r7
 80067fe:	b006      	add	sp, #24
 8006800:	bd80      	pop	{r7, pc}
 8006802:	46c0      	nop			@ (mov r8, r8)
 8006804:	080070ec 	.word	0x080070ec
 8006808:	fffffbff 	.word	0xfffffbff

0800680c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006814:	46c0      	nop			@ (mov r8, r8)
 8006816:	46bd      	mov	sp, r7
 8006818:	b002      	add	sp, #8
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006824:	46c0      	nop			@ (mov r8, r8)
 8006826:	46bd      	mov	sp, r7
 8006828:	b002      	add	sp, #8
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006834:	46c0      	nop			@ (mov r8, r8)
 8006836:	46bd      	mov	sp, r7
 8006838:	b002      	add	sp, #8
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006844:	46c0      	nop			@ (mov r8, r8)
 8006846:	46bd      	mov	sp, r7
 8006848:	b002      	add	sp, #8
 800684a:	bd80      	pop	{r7, pc}

0800684c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a37      	ldr	r2, [pc, #220]	@ (800693c <TIM_Base_SetConfig+0xf0>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d008      	beq.n	8006876 <TIM_Base_SetConfig+0x2a>
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	2380      	movs	r3, #128	@ 0x80
 8006868:	05db      	lsls	r3, r3, #23
 800686a:	429a      	cmp	r2, r3
 800686c:	d003      	beq.n	8006876 <TIM_Base_SetConfig+0x2a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a33      	ldr	r2, [pc, #204]	@ (8006940 <TIM_Base_SetConfig+0xf4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d108      	bne.n	8006888 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2270      	movs	r2, #112	@ 0x70
 800687a:	4393      	bics	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a2c      	ldr	r2, [pc, #176]	@ (800693c <TIM_Base_SetConfig+0xf0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d014      	beq.n	80068ba <TIM_Base_SetConfig+0x6e>
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	2380      	movs	r3, #128	@ 0x80
 8006894:	05db      	lsls	r3, r3, #23
 8006896:	429a      	cmp	r2, r3
 8006898:	d00f      	beq.n	80068ba <TIM_Base_SetConfig+0x6e>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a28      	ldr	r2, [pc, #160]	@ (8006940 <TIM_Base_SetConfig+0xf4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00b      	beq.n	80068ba <TIM_Base_SetConfig+0x6e>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a27      	ldr	r2, [pc, #156]	@ (8006944 <TIM_Base_SetConfig+0xf8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d007      	beq.n	80068ba <TIM_Base_SetConfig+0x6e>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a26      	ldr	r2, [pc, #152]	@ (8006948 <TIM_Base_SetConfig+0xfc>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d003      	beq.n	80068ba <TIM_Base_SetConfig+0x6e>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a25      	ldr	r2, [pc, #148]	@ (800694c <TIM_Base_SetConfig+0x100>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d108      	bne.n	80068cc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4a24      	ldr	r2, [pc, #144]	@ (8006950 <TIM_Base_SetConfig+0x104>)
 80068be:	4013      	ands	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2280      	movs	r2, #128	@ 0x80
 80068d0:	4393      	bics	r3, r2
 80068d2:	001a      	movs	r2, r3
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a11      	ldr	r2, [pc, #68]	@ (800693c <TIM_Base_SetConfig+0xf0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d007      	beq.n	800690a <TIM_Base_SetConfig+0xbe>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a12      	ldr	r2, [pc, #72]	@ (8006948 <TIM_Base_SetConfig+0xfc>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d003      	beq.n	800690a <TIM_Base_SetConfig+0xbe>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a11      	ldr	r2, [pc, #68]	@ (800694c <TIM_Base_SetConfig+0x100>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d103      	bne.n	8006912 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	691a      	ldr	r2, [r3, #16]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	2201      	movs	r2, #1
 800691e:	4013      	ands	r3, r2
 8006920:	2b01      	cmp	r3, #1
 8006922:	d106      	bne.n	8006932 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	2201      	movs	r2, #1
 800692a:	4393      	bics	r3, r2
 800692c:	001a      	movs	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	611a      	str	r2, [r3, #16]
  }
}
 8006932:	46c0      	nop			@ (mov r8, r8)
 8006934:	46bd      	mov	sp, r7
 8006936:	b004      	add	sp, #16
 8006938:	bd80      	pop	{r7, pc}
 800693a:	46c0      	nop			@ (mov r8, r8)
 800693c:	40012c00 	.word	0x40012c00
 8006940:	40000400 	.word	0x40000400
 8006944:	40002000 	.word	0x40002000
 8006948:	40014400 	.word	0x40014400
 800694c:	40014800 	.word	0x40014800
 8006950:	fffffcff 	.word	0xfffffcff

08006954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	2201      	movs	r2, #1
 800696a:	4393      	bics	r3, r2
 800696c:	001a      	movs	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4a2e      	ldr	r2, [pc, #184]	@ (8006a3c <TIM_OC1_SetConfig+0xe8>)
 8006982:	4013      	ands	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2203      	movs	r2, #3
 800698a:	4393      	bics	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2202      	movs	r2, #2
 800699c:	4393      	bics	r3, r2
 800699e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a24      	ldr	r2, [pc, #144]	@ (8006a40 <TIM_OC1_SetConfig+0xec>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d007      	beq.n	80069c2 <TIM_OC1_SetConfig+0x6e>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a23      	ldr	r2, [pc, #140]	@ (8006a44 <TIM_OC1_SetConfig+0xf0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d003      	beq.n	80069c2 <TIM_OC1_SetConfig+0x6e>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a22      	ldr	r2, [pc, #136]	@ (8006a48 <TIM_OC1_SetConfig+0xf4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d10c      	bne.n	80069dc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2208      	movs	r2, #8
 80069c6:	4393      	bics	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2204      	movs	r2, #4
 80069d8:	4393      	bics	r3, r2
 80069da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a18      	ldr	r2, [pc, #96]	@ (8006a40 <TIM_OC1_SetConfig+0xec>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d007      	beq.n	80069f4 <TIM_OC1_SetConfig+0xa0>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a17      	ldr	r2, [pc, #92]	@ (8006a44 <TIM_OC1_SetConfig+0xf0>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d003      	beq.n	80069f4 <TIM_OC1_SetConfig+0xa0>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a16      	ldr	r2, [pc, #88]	@ (8006a48 <TIM_OC1_SetConfig+0xf4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d111      	bne.n	8006a18 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4a15      	ldr	r2, [pc, #84]	@ (8006a4c <TIM_OC1_SetConfig+0xf8>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	4a14      	ldr	r2, [pc, #80]	@ (8006a50 <TIM_OC1_SetConfig+0xfc>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	621a      	str	r2, [r3, #32]
}
 8006a32:	46c0      	nop			@ (mov r8, r8)
 8006a34:	46bd      	mov	sp, r7
 8006a36:	b006      	add	sp, #24
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	46c0      	nop			@ (mov r8, r8)
 8006a3c:	fffeff8f 	.word	0xfffeff8f
 8006a40:	40012c00 	.word	0x40012c00
 8006a44:	40014400 	.word	0x40014400
 8006a48:	40014800 	.word	0x40014800
 8006a4c:	fffffeff 	.word	0xfffffeff
 8006a50:	fffffdff 	.word	0xfffffdff

08006a54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	2210      	movs	r2, #16
 8006a6a:	4393      	bics	r3, r2
 8006a6c:	001a      	movs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4a2c      	ldr	r2, [pc, #176]	@ (8006b34 <TIM_OC2_SetConfig+0xe0>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4a2b      	ldr	r2, [pc, #172]	@ (8006b38 <TIM_OC2_SetConfig+0xe4>)
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	021b      	lsls	r3, r3, #8
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	4393      	bics	r3, r2
 8006aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a22      	ldr	r2, [pc, #136]	@ (8006b3c <TIM_OC2_SetConfig+0xe8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d10d      	bne.n	8006ad2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2280      	movs	r2, #128	@ 0x80
 8006aba:	4393      	bics	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2240      	movs	r2, #64	@ 0x40
 8006ace:	4393      	bics	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a19      	ldr	r2, [pc, #100]	@ (8006b3c <TIM_OC2_SetConfig+0xe8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d007      	beq.n	8006aea <TIM_OC2_SetConfig+0x96>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a18      	ldr	r2, [pc, #96]	@ (8006b40 <TIM_OC2_SetConfig+0xec>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d003      	beq.n	8006aea <TIM_OC2_SetConfig+0x96>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a17      	ldr	r2, [pc, #92]	@ (8006b44 <TIM_OC2_SetConfig+0xf0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d113      	bne.n	8006b12 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	4a16      	ldr	r2, [pc, #88]	@ (8006b48 <TIM_OC2_SetConfig+0xf4>)
 8006aee:	4013      	ands	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	4a15      	ldr	r2, [pc, #84]	@ (8006b4c <TIM_OC2_SetConfig+0xf8>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	621a      	str	r2, [r3, #32]
}
 8006b2c:	46c0      	nop			@ (mov r8, r8)
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	b006      	add	sp, #24
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	feff8fff 	.word	0xfeff8fff
 8006b38:	fffffcff 	.word	0xfffffcff
 8006b3c:	40012c00 	.word	0x40012c00
 8006b40:	40014400 	.word	0x40014400
 8006b44:	40014800 	.word	0x40014800
 8006b48:	fffffbff 	.word	0xfffffbff
 8006b4c:	fffff7ff 	.word	0xfffff7ff

08006b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	4a31      	ldr	r2, [pc, #196]	@ (8006c2c <TIM_OC3_SetConfig+0xdc>)
 8006b66:	401a      	ands	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4a2d      	ldr	r2, [pc, #180]	@ (8006c30 <TIM_OC3_SetConfig+0xe0>)
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2203      	movs	r2, #3
 8006b84:	4393      	bics	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	4a27      	ldr	r2, [pc, #156]	@ (8006c34 <TIM_OC3_SetConfig+0xe4>)
 8006b96:	4013      	ands	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	021b      	lsls	r3, r3, #8
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a23      	ldr	r2, [pc, #140]	@ (8006c38 <TIM_OC3_SetConfig+0xe8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d10d      	bne.n	8006bca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	4a22      	ldr	r2, [pc, #136]	@ (8006c3c <TIM_OC3_SetConfig+0xec>)
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	4a1e      	ldr	r2, [pc, #120]	@ (8006c40 <TIM_OC3_SetConfig+0xf0>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8006c38 <TIM_OC3_SetConfig+0xe8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d007      	beq.n	8006be2 <TIM_OC3_SetConfig+0x92>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8006c44 <TIM_OC3_SetConfig+0xf4>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d003      	beq.n	8006be2 <TIM_OC3_SetConfig+0x92>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8006c48 <TIM_OC3_SetConfig+0xf8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d113      	bne.n	8006c0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	4a19      	ldr	r2, [pc, #100]	@ (8006c4c <TIM_OC3_SetConfig+0xfc>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	4a18      	ldr	r2, [pc, #96]	@ (8006c50 <TIM_OC3_SetConfig+0x100>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	621a      	str	r2, [r3, #32]
}
 8006c24:	46c0      	nop			@ (mov r8, r8)
 8006c26:	46bd      	mov	sp, r7
 8006c28:	b006      	add	sp, #24
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	fffffeff 	.word	0xfffffeff
 8006c30:	fffeff8f 	.word	0xfffeff8f
 8006c34:	fffffdff 	.word	0xfffffdff
 8006c38:	40012c00 	.word	0x40012c00
 8006c3c:	fffff7ff 	.word	0xfffff7ff
 8006c40:	fffffbff 	.word	0xfffffbff
 8006c44:	40014400 	.word	0x40014400
 8006c48:	40014800 	.word	0x40014800
 8006c4c:	ffffefff 	.word	0xffffefff
 8006c50:	ffffdfff 	.word	0xffffdfff

08006c54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	4a24      	ldr	r2, [pc, #144]	@ (8006cfc <TIM_OC4_SetConfig+0xa8>)
 8006c6a:	401a      	ands	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4a20      	ldr	r2, [pc, #128]	@ (8006d00 <TIM_OC4_SetConfig+0xac>)
 8006c80:	4013      	ands	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4a1f      	ldr	r2, [pc, #124]	@ (8006d04 <TIM_OC4_SetConfig+0xb0>)
 8006c88:	4013      	ands	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006d08 <TIM_OC4_SetConfig+0xb4>)
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	031b      	lsls	r3, r3, #12
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a17      	ldr	r2, [pc, #92]	@ (8006d0c <TIM_OC4_SetConfig+0xb8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d007      	beq.n	8006cc4 <TIM_OC4_SetConfig+0x70>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a16      	ldr	r2, [pc, #88]	@ (8006d10 <TIM_OC4_SetConfig+0xbc>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d003      	beq.n	8006cc4 <TIM_OC4_SetConfig+0x70>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a15      	ldr	r2, [pc, #84]	@ (8006d14 <TIM_OC4_SetConfig+0xc0>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d109      	bne.n	8006cd8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	4a14      	ldr	r2, [pc, #80]	@ (8006d18 <TIM_OC4_SetConfig+0xc4>)
 8006cc8:	4013      	ands	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	019b      	lsls	r3, r3, #6
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	621a      	str	r2, [r3, #32]
}
 8006cf2:	46c0      	nop			@ (mov r8, r8)
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	b006      	add	sp, #24
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	46c0      	nop			@ (mov r8, r8)
 8006cfc:	ffffefff 	.word	0xffffefff
 8006d00:	feff8fff 	.word	0xfeff8fff
 8006d04:	fffffcff 	.word	0xfffffcff
 8006d08:	ffffdfff 	.word	0xffffdfff
 8006d0c:	40012c00 	.word	0x40012c00
 8006d10:	40014400 	.word	0x40014400
 8006d14:	40014800 	.word	0x40014800
 8006d18:	ffffbfff 	.word	0xffffbfff

08006d1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	4a21      	ldr	r2, [pc, #132]	@ (8006db8 <TIM_OC5_SetConfig+0x9c>)
 8006d32:	401a      	ands	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4a1d      	ldr	r2, [pc, #116]	@ (8006dbc <TIM_OC5_SetConfig+0xa0>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	4a19      	ldr	r2, [pc, #100]	@ (8006dc0 <TIM_OC5_SetConfig+0xa4>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	041b      	lsls	r3, r3, #16
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a15      	ldr	r2, [pc, #84]	@ (8006dc4 <TIM_OC5_SetConfig+0xa8>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d007      	beq.n	8006d82 <TIM_OC5_SetConfig+0x66>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a14      	ldr	r2, [pc, #80]	@ (8006dc8 <TIM_OC5_SetConfig+0xac>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d003      	beq.n	8006d82 <TIM_OC5_SetConfig+0x66>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a13      	ldr	r2, [pc, #76]	@ (8006dcc <TIM_OC5_SetConfig+0xb0>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d109      	bne.n	8006d96 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	4a0c      	ldr	r2, [pc, #48]	@ (8006db8 <TIM_OC5_SetConfig+0x9c>)
 8006d86:	4013      	ands	r3, r2
 8006d88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	021b      	lsls	r3, r3, #8
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	621a      	str	r2, [r3, #32]
}
 8006db0:	46c0      	nop			@ (mov r8, r8)
 8006db2:	46bd      	mov	sp, r7
 8006db4:	b006      	add	sp, #24
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	fffeffff 	.word	0xfffeffff
 8006dbc:	fffeff8f 	.word	0xfffeff8f
 8006dc0:	fffdffff 	.word	0xfffdffff
 8006dc4:	40012c00 	.word	0x40012c00
 8006dc8:	40014400 	.word	0x40014400
 8006dcc:	40014800 	.word	0x40014800

08006dd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	4a22      	ldr	r2, [pc, #136]	@ (8006e70 <TIM_OC6_SetConfig+0xa0>)
 8006de6:	401a      	ands	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8006e74 <TIM_OC6_SetConfig+0xa4>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8006e78 <TIM_OC6_SetConfig+0xa8>)
 8006e10:	4013      	ands	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	051b      	lsls	r3, r3, #20
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a16      	ldr	r2, [pc, #88]	@ (8006e7c <TIM_OC6_SetConfig+0xac>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d007      	beq.n	8006e38 <TIM_OC6_SetConfig+0x68>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a15      	ldr	r2, [pc, #84]	@ (8006e80 <TIM_OC6_SetConfig+0xb0>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <TIM_OC6_SetConfig+0x68>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a14      	ldr	r2, [pc, #80]	@ (8006e84 <TIM_OC6_SetConfig+0xb4>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d109      	bne.n	8006e4c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	4a13      	ldr	r2, [pc, #76]	@ (8006e88 <TIM_OC6_SetConfig+0xb8>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	029b      	lsls	r3, r3, #10
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	621a      	str	r2, [r3, #32]
}
 8006e66:	46c0      	nop			@ (mov r8, r8)
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	b006      	add	sp, #24
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	46c0      	nop			@ (mov r8, r8)
 8006e70:	ffefffff 	.word	0xffefffff
 8006e74:	feff8fff 	.word	0xfeff8fff
 8006e78:	ffdfffff 	.word	0xffdfffff
 8006e7c:	40012c00 	.word	0x40012c00
 8006e80:	40014400 	.word	0x40014400
 8006e84:	40014800 	.word	0x40014800
 8006e88:	fffbffff 	.word	0xfffbffff

08006e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	221f      	movs	r2, #31
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	409a      	lsls	r2, r3
 8006ea2:	0013      	movs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	43d2      	mvns	r2, r2
 8006eae:	401a      	ands	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a1a      	ldr	r2, [r3, #32]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	211f      	movs	r1, #31
 8006ebc:	400b      	ands	r3, r1
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	4099      	lsls	r1, r3
 8006ec2:	000b      	movs	r3, r1
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	621a      	str	r2, [r3, #32]
}
 8006eca:	46c0      	nop			@ (mov r8, r8)
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	b006      	add	sp, #24
 8006ed0:	bd80      	pop	{r7, pc}
	...

08006ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	223c      	movs	r2, #60	@ 0x3c
 8006ee2:	5c9b      	ldrb	r3, [r3, r2]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e050      	b.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	223c      	movs	r2, #60	@ 0x3c
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	223d      	movs	r2, #61	@ 0x3d
 8006ef8:	2102      	movs	r1, #2
 8006efa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a21      	ldr	r2, [pc, #132]	@ (8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d108      	bne.n	8006f28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4a20      	ldr	r2, [pc, #128]	@ (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2270      	movs	r2, #112	@ 0x70
 8006f2c:	4393      	bics	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a14      	ldr	r2, [pc, #80]	@ (8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00a      	beq.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	2380      	movs	r3, #128	@ 0x80
 8006f52:	05db      	lsls	r3, r3, #23
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d004      	beq.n	8006f62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a10      	ldr	r2, [pc, #64]	@ (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d10c      	bne.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2280      	movs	r2, #128	@ 0x80
 8006f66:	4393      	bics	r3, r2
 8006f68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	223d      	movs	r2, #61	@ 0x3d
 8006f80:	2101      	movs	r1, #1
 8006f82:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	223c      	movs	r2, #60	@ 0x3c
 8006f88:	2100      	movs	r1, #0
 8006f8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	0018      	movs	r0, r3
 8006f90:	46bd      	mov	sp, r7
 8006f92:	b004      	add	sp, #16
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	46c0      	nop			@ (mov r8, r8)
 8006f98:	40012c00 	.word	0x40012c00
 8006f9c:	ff0fffff 	.word	0xff0fffff
 8006fa0:	40000400 	.word	0x40000400

08006fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fac:	46c0      	nop			@ (mov r8, r8)
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	b002      	add	sp, #8
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fbc:	46c0      	nop			@ (mov r8, r8)
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	b002      	add	sp, #8
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fcc:	46c0      	nop			@ (mov r8, r8)
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	b002      	add	sp, #8
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <memset>:
 8006fd4:	0003      	movs	r3, r0
 8006fd6:	1882      	adds	r2, r0, r2
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d100      	bne.n	8006fde <memset+0xa>
 8006fdc:	4770      	bx	lr
 8006fde:	7019      	strb	r1, [r3, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	e7f9      	b.n	8006fd8 <memset+0x4>

08006fe4 <__libc_init_array>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	2600      	movs	r6, #0
 8006fe8:	4c0c      	ldr	r4, [pc, #48]	@ (800701c <__libc_init_array+0x38>)
 8006fea:	4d0d      	ldr	r5, [pc, #52]	@ (8007020 <__libc_init_array+0x3c>)
 8006fec:	1b64      	subs	r4, r4, r5
 8006fee:	10a4      	asrs	r4, r4, #2
 8006ff0:	42a6      	cmp	r6, r4
 8006ff2:	d109      	bne.n	8007008 <__libc_init_array+0x24>
 8006ff4:	2600      	movs	r6, #0
 8006ff6:	f000 f823 	bl	8007040 <_init>
 8006ffa:	4c0a      	ldr	r4, [pc, #40]	@ (8007024 <__libc_init_array+0x40>)
 8006ffc:	4d0a      	ldr	r5, [pc, #40]	@ (8007028 <__libc_init_array+0x44>)
 8006ffe:	1b64      	subs	r4, r4, r5
 8007000:	10a4      	asrs	r4, r4, #2
 8007002:	42a6      	cmp	r6, r4
 8007004:	d105      	bne.n	8007012 <__libc_init_array+0x2e>
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	00b3      	lsls	r3, r6, #2
 800700a:	58eb      	ldr	r3, [r5, r3]
 800700c:	4798      	blx	r3
 800700e:	3601      	adds	r6, #1
 8007010:	e7ee      	b.n	8006ff0 <__libc_init_array+0xc>
 8007012:	00b3      	lsls	r3, r6, #2
 8007014:	58eb      	ldr	r3, [r5, r3]
 8007016:	4798      	blx	r3
 8007018:	3601      	adds	r6, #1
 800701a:	e7f2      	b.n	8007002 <__libc_init_array+0x1e>
 800701c:	08007140 	.word	0x08007140
 8007020:	08007140 	.word	0x08007140
 8007024:	08007144 	.word	0x08007144
 8007028:	08007140 	.word	0x08007140

0800702c <memcpy>:
 800702c:	2300      	movs	r3, #0
 800702e:	b510      	push	{r4, lr}
 8007030:	429a      	cmp	r2, r3
 8007032:	d100      	bne.n	8007036 <memcpy+0xa>
 8007034:	bd10      	pop	{r4, pc}
 8007036:	5ccc      	ldrb	r4, [r1, r3]
 8007038:	54c4      	strb	r4, [r0, r3]
 800703a:	3301      	adds	r3, #1
 800703c:	e7f8      	b.n	8007030 <memcpy+0x4>
	...

08007040 <_init>:
 8007040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007042:	46c0      	nop			@ (mov r8, r8)
 8007044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007046:	bc08      	pop	{r3}
 8007048:	469e      	mov	lr, r3
 800704a:	4770      	bx	lr

0800704c <_fini>:
 800704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704e:	46c0      	nop			@ (mov r8, r8)
 8007050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007052:	bc08      	pop	{r3}
 8007054:	469e      	mov	lr, r3
 8007056:	4770      	bx	lr
