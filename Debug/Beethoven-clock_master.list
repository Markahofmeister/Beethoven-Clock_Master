
Beethoven-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f44  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08007000  08007000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e8  080070e8  0000906c  2**0
                  CONTENTS
  4 .ARM          00000000  080070e8  080070e8  0000906c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070e8  080070e8  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e8  080070e8  000080e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070ec  080070ec  000080ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080070f0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  2000006c  0800715c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  0800715c  00009338  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cca  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a3  00000000  00000000  0001ed5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  00021e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001096  00000000  00000000  00023348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d9a  00000000  00000000  000243de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ed4  00000000  00000000  0003d178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bfe0  00000000  00000000  0005704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f302c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d68  00000000  00000000  000f3070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f7dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006fe8 	.word	0x08006fe8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	08006fe8 	.word	0x08006fe8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-low hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2200      	movs	r2, #0
 800025a:	0019      	movs	r1, r3
 800025c:	f002 fd65 	bl	8002d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2201      	movs	r2, #1
 800026c:	0019      	movs	r1, r3
 800026e:	f002 fd5c 	bl	8002d2a <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f005 feb6 	bl	8005fe8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f005 fe65 	bl	8005f50 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f002 fd79 	bl	8002f50 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f002 fe8d 	bl	80031a4 <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	08007000 	.word	0x08007000

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f002 fd3b 	bl	8002f50 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f002 fd15 	bl	8002f50 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f002 fe29 	bl	80031a4 <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	08007004 	.word	0x08007004

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f002 fcd1 	bl	8002f50 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f002 fde5 	bl	80031a4 <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	08007008 	.word	0x08007008

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f002 fc81 	bl	8002f50 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f002 fd95 	bl	80031a4 <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	0800700c 	.word	0x0800700c
 8000700:	08007014 	.word	0x08007014

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f002 fbff 	bl	8002f50 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f002 fd13 	bl	80031a4 <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f002 fba0 	bl	8002f50 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f002 fb7f 	bl	8002f50 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f002 fc93 	bl	80031a4 <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	0800700c 	.word	0x0800700c
 8000894:	08007014 	.word	0x08007014

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f002 fb25 	bl	8002f50 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f002 fb03 	bl	8002f50 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f002 fc20 	bl	80031a4 <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	0800701c 	.word	0x0800701c
 8000978:	0800700c 	.word	0x0800700c

0800097c <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b09a      	sub	sp, #104	@ 0x68
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000988:	2567      	movs	r5, #103	@ 0x67
 800098a:	197b      	adds	r3, r7, r5
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 8000990:	243c      	movs	r4, #60	@ 0x3c
 8000992:	193b      	adds	r3, r7, r4
 8000994:	0018      	movs	r0, r3
 8000996:	2328      	movs	r3, #40	@ 0x28
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f006 faee 	bl	8006f7c <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	0021      	movs	r1, r4
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	789a      	ldrb	r2, [r3, #2]
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	78da      	ldrb	r2, [r3, #3]
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	78da      	ldrb	r2, [r3, #3]
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009d6:	0008      	movs	r0, r1
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009de:	183b      	adds	r3, r7, r0
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80009e4:	183b      	adds	r3, r7, r0
 80009e6:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <initRTCInternalAlarm+0xd0>)
 80009e8:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009ea:	183b      	adds	r3, r7, r0
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009f0:	183b      	adds	r3, r7, r0
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 80009f6:	183b      	adds	r3, r7, r0
 80009f8:	2220      	movs	r2, #32
 80009fa:	2101      	movs	r1, #1
 80009fc:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 80009fe:	0001      	movs	r1, r0
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8000a08:	197c      	adds	r4, r7, r5
 8000a0a:	1879      	adds	r1, r7, r1
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f004 fd6d 	bl	80054f0 <HAL_RTC_SetAlarm_IT>
 8000a16:	0003      	movs	r3, r0
 8000a18:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000a1a:	197b      	adds	r3, r7, r5
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <initRTCInternalAlarm+0xac>
		return halRet;
 8000a22:	197b      	adds	r3, r7, r5
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	e00d      	b.n	8000a44 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8000a28:	2567      	movs	r5, #103	@ 0x67
 8000a2a:	197c      	adds	r4, r7, r5
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	005a      	lsls	r2, r3, #1
 8000a30:	2314      	movs	r3, #20
 8000a32:	18f9      	adds	r1, r7, r3
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	2300      	movs	r3, #0
 8000a38:	f004 fe9a 	bl	8005770 <HAL_RTC_GetAlarm>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	7023      	strb	r3, [r4, #0]
	return halRet;
 8000a40:	197b      	adds	r3, r7, r5
 8000a42:	781b      	ldrb	r3, [r3, #0]

}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b01a      	add	sp, #104	@ 0x68
 8000a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4c:	80800080 	.word	0x80800080

08000a50 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2200      	movs	r2, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f004 fc08 	bl	8005278 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f004 fcf0 	bl	8005454 <HAL_RTC_GetDate>

}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b004      	add	sp, #16
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	b08d      	sub	sp, #52	@ 0x34
 8000a80:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f001 fe6d 	bl	8002760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f95d 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 fbb3 	bl	80011f4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a8e:	f000 fa2f 	bl	8000ef0 <MX_RTC_Init>
  MX_I2C1_Init();
 8000a92:	f000 f9c3 	bl	8000e1c <MX_I2C1_Init>
  MX_I2S1_Init();
 8000a96:	f000 fa01 	bl	8000e9c <MX_I2S1_Init>
  MX_SPI2_Init();
 8000a9a:	f000 fabd 	bl	8001018 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000a9e:	f000 faf9 	bl	8001094 <MX_TIM2_Init>
  MX_TIM14_Init();
 8000aa2:	f000 fb57 	bl	8001154 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000aa6:	f000 fb7b 	bl	80011a0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // HAL Status handle for error-checking
  HAL_StatusTypeDef halRet = HAL_OK;
 8000aaa:	2517      	movs	r5, #23
 8000aac:	197b      	adds	r3, r7, r5
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]

  // Set Smooth Calibration Value
	  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8000ab2:	4b90      	ldr	r3, [pc, #576]	@ (8000cf4 <main+0x278>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	197c      	adds	r4, r7, r5
 8000ab8:	2280      	movs	r2, #128	@ 0x80
 8000aba:	01d1      	lsls	r1, r2, #7
 8000abc:	488e      	ldr	r0, [pc, #568]	@ (8000cf8 <main+0x27c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f005 f84b 	bl	8005b5a <HAL_RTCEx_SetSmoothCalib>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	7023      	strb	r3, [r4, #0]
									RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
	  if(halRet != HAL_OK) {
 8000ac8:	197b      	adds	r3, r7, r5
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <main+0x58>
		  // Failure to talk to RTC is a hard failure
		  dispFailure();
 8000ad0:	f001 f8de 	bl	8001c90 <dispFailure>
	  }

  // Init the internal RTC alarm time to track the current time
	  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8000ad4:	2517      	movs	r5, #23
 8000ad6:	197c      	adds	r4, r7, r5
 8000ad8:	4a88      	ldr	r2, [pc, #544]	@ (8000cfc <main+0x280>)
 8000ada:	4989      	ldr	r1, [pc, #548]	@ (8000d00 <main+0x284>)
 8000adc:	4b86      	ldr	r3, [pc, #536]	@ (8000cf8 <main+0x27c>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff ff4c 	bl	800097c <initRTCInternalAlarm>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	7023      	strb	r3, [r4, #0]
	  if(halRet != HAL_OK) {
 8000ae8:	197b      	adds	r3, r7, r5
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <main+0x78>
		  // Failure to initialize RTC alarm is a hard failure
		  dispFailure();
 8000af0:	f001 f8ce 	bl	8001c90 <dispFailure>
		}

  // Initialize all GPIOs to be used with 7 segment display
		sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000af4:	2380      	movs	r3, #128	@ 0x80
 8000af6:	009c      	lsls	r4, r3, #2
 8000af8:	2380      	movs	r3, #128	@ 0x80
 8000afa:	00dd      	lsls	r5, r3, #3
 8000afc:	2680      	movs	r6, #128	@ 0x80
 8000afe:	2340      	movs	r3, #64	@ 0x40
 8000b00:	469c      	mov	ip, r3
 8000b02:	2380      	movs	r3, #128	@ 0x80
 8000b04:	011a      	lsls	r2, r3, #4
 8000b06:	4b7f      	ldr	r3, [pc, #508]	@ (8000d04 <main+0x288>)
 8000b08:	6819      	ldr	r1, [r3, #0]
 8000b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8000d08 <main+0x28c>)
 8000b0c:	6818      	ldr	r0, [r3, #0]
 8000b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8000d0c <main+0x290>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	9304      	str	r3, [sp, #16]
 8000b14:	9003      	str	r0, [sp, #12]
 8000b16:	9102      	str	r1, [sp, #8]
 8000b18:	4b7d      	ldr	r3, [pc, #500]	@ (8000d10 <main+0x294>)
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	9200      	str	r2, [sp, #0]
 8000b1e:	4663      	mov	r3, ip
 8000b20:	0032      	movs	r2, r6
 8000b22:	0029      	movs	r1, r5
 8000b24:	0020      	movs	r0, r4
 8000b26:	f001 f925 	bl	8001d74 <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


		halRet = updateAndDisplayTime();
 8000b2a:	2517      	movs	r5, #23
 8000b2c:	197c      	adds	r4, r7, r5
 8000b2e:	f000 fc73 	bl	8001418 <updateAndDisplayTime>
 8000b32:	0003      	movs	r3, r0
 8000b34:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000b36:	197b      	adds	r3, r7, r5
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <main+0xc6>
		  // Failure to display current time is a hard failure
		  dispFailure();
 8000b3e:	f001 f8a7 	bl	8001c90 <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

		// Used to separate return initializations into critical and non-critical errors.
		uint8_t initRet = 0;
 8000b42:	2116      	movs	r1, #22
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]

		initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000b4a:	4b6e      	ldr	r3, [pc, #440]	@ (8000d04 <main+0x288>)
 8000b4c:	681d      	ldr	r5, [r3, #0]
 8000b4e:	2380      	movs	r3, #128	@ 0x80
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4a70      	ldr	r2, [pc, #448]	@ (8000d14 <main+0x298>)
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	187c      	adds	r4, r7, r1
 8000b58:	4e6f      	ldr	r6, [pc, #444]	@ (8000d18 <main+0x29c>)
 8000b5a:	4970      	ldr	r1, [pc, #448]	@ (8000d1c <main+0x2a0>)
 8000b5c:	4870      	ldr	r0, [pc, #448]	@ (8000d20 <main+0x2a4>)
 8000b5e:	9201      	str	r2, [sp, #4]
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	0033      	movs	r3, r6
 8000b64:	002a      	movs	r2, r5
 8000b66:	f7ff fb59 	bl	800021c <capTouch_Init>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	7023      	strb	r3, [r4, #0]
								&capTouchResetPort, capTouchResetPin, capTouchChannels);
		if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8000b6e:	2116      	movs	r1, #22
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d007      	beq.n	8000b88 <main+0x10c>
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d003      	beq.n	8000b88 <main+0x10c>
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d102      	bne.n	8000b8e <main+0x112>
			/* Critical Errors:
			 * 1 = Failure to read correct device ID
			 * 2 = Failure to read Keys
			 * 3 = Failure to enable keys
			 */
			dispFailure();
 8000b88:	f001 f882 	bl	8001c90 <dispFailure>
 8000b8c:	e00d      	b.n	8000baa <main+0x12e>
		}
		else if (initRet == 2) {
 8000b8e:	2316      	movs	r3, #22
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d102      	bne.n	8000b9e <main+0x122>
			/*
			 * Non-critical Errors:
			 * 2 = Failure to Recalibrate
			 */
			dispFault();
 8000b98:	f001 f86a 	bl	8001c70 <dispFault>
 8000b9c:	e005      	b.n	8000baa <main+0x12e>
		}
		else if(initRet == 0) {
 8000b9e:	2316      	movs	r3, #22
 8000ba0:	18fb      	adds	r3, r7, r3
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d100      	bne.n	8000baa <main+0x12e>
			// initRet = 0 = all is well
			__NOP();
 8000ba8:	46c0      	nop			@ (mov r8, r8)
		}

		// Set averaging factor
		uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000baa:	4b5e      	ldr	r3, [pc, #376]	@ (8000d24 <main+0x2a8>)
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	210c      	movs	r1, #12
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	701a      	strb	r2, [r3, #0]
 8000bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8000d24 <main+0x2a8>)
 8000bb6:	781a      	ldrb	r2, [r3, #0]
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	705a      	strb	r2, [r3, #1]
 8000bbc:	4b59      	ldr	r3, [pc, #356]	@ (8000d24 <main+0x2a8>)
 8000bbe:	781a      	ldrb	r2, [r3, #0]
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	709a      	strb	r2, [r3, #2]
 8000bc4:	4b57      	ldr	r3, [pc, #348]	@ (8000d24 <main+0x2a8>)
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	70da      	strb	r2, [r3, #3]
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	711a      	strb	r2, [r3, #4]
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	715a      	strb	r2, [r3, #5]
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2200      	movs	r2, #0
 8000bdc:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000bde:	2517      	movs	r5, #23
 8000be0:	197c      	adds	r4, r7, r5
 8000be2:	187a      	adds	r2, r7, r1
 8000be4:	4b4e      	ldr	r3, [pc, #312]	@ (8000d20 <main+0x2a4>)
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fd8b 	bl	8000704 <capTouch_SetAveragingFactor>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8000bf2:	197b      	adds	r3, r7, r5
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <main+0x182>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 8000bfa:	f001 f839 	bl	8001c70 <dispFault>
		}

		// Set detection integration factors
		uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8000d28 <main+0x2ac>)
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	4b48      	ldr	r3, [pc, #288]	@ (8000d28 <main+0x2ac>)
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	705a      	strb	r2, [r3, #1]
 8000c0e:	4b46      	ldr	r3, [pc, #280]	@ (8000d28 <main+0x2ac>)
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	709a      	strb	r2, [r3, #2]
 8000c16:	4b44      	ldr	r3, [pc, #272]	@ (8000d28 <main+0x2ac>)
 8000c18:	781a      	ldrb	r2, [r3, #0]
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	70da      	strb	r2, [r3, #3]
 8000c1e:	4b42      	ldr	r3, [pc, #264]	@ (8000d28 <main+0x2ac>)
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	711a      	strb	r2, [r3, #4]
 8000c26:	4b40      	ldr	r3, [pc, #256]	@ (8000d28 <main+0x2ac>)
 8000c28:	781a      	ldrb	r2, [r3, #0]
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	715a      	strb	r2, [r3, #5]
 8000c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d28 <main+0x2ac>)
 8000c30:	781a      	ldrb	r2, [r3, #0]
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000c36:	2517      	movs	r5, #23
 8000c38:	197c      	adds	r4, r7, r5
 8000c3a:	1d3a      	adds	r2, r7, #4
 8000c3c:	4b38      	ldr	r3, [pc, #224]	@ (8000d20 <main+0x2a4>)
 8000c3e:	0011      	movs	r1, r2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff fe29 	bl	8000898 <capTouch_SetDetectionIntegrator>
 8000c46:	0003      	movs	r3, r0
 8000c48:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000c4a:	197b      	adds	r3, r7, r5
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <main+0x1da>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 8000c52:	f001 f80d 	bl	8001c70 <dispFault>
		}

    userAlarmToggle = false;			//Default to off
 8000c56:	4b35      	ldr	r3, [pc, #212]	@ (8000d2c <main+0x2b0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

		if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8000c5c:	4b34      	ldr	r3, [pc, #208]	@ (8000d30 <main+0x2b4>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <main+0x27c>)
 8000c62:	0011      	movs	r1, r2
 8000c64:	0018      	movs	r0, r3
 8000c66:	f005 f848 	bl	8005cfa <HAL_RTCEx_BKUPRead>
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d11c      	bne.n	8000cac <main+0x230>

			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8000c72:	4b30      	ldr	r3, [pc, #192]	@ (8000d34 <main+0x2b8>)
 8000c74:	6819      	ldr	r1, [r3, #0]
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <main+0x27c>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f005 f820 	bl	8005cc0 <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8000c80:	4b2d      	ldr	r3, [pc, #180]	@ (8000d38 <main+0x2bc>)
 8000c82:	6819      	ldr	r1, [r3, #0]
 8000c84:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <main+0x27c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f005 f819 	bl	8005cc0 <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d3c <main+0x2c0>)
 8000c90:	6819      	ldr	r1, [r3, #0]
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <main+0x27c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f005 f812 	bl	8005cc0 <HAL_RTCEx_BKUPWrite>

			// Write backup register with a non-zero value to signify that it has been initialized before
			HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8000c9c:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <main+0x2b4>)
 8000c9e:	6819      	ldr	r1, [r3, #0]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	425a      	negs	r2, r3
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <main+0x27c>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f005 f80a 	bl	8005cc0 <HAL_RTCEx_BKUPWrite>

		}

		userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8000cac:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <main+0x2b8>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <main+0x27c>)
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f005 f820 	bl	8005cfa <HAL_RTCEx_BKUPRead>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b20      	ldr	r3, [pc, #128]	@ (8000d40 <main+0x2c4>)
 8000cc0:	701a      	strb	r2, [r3, #0]
		userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <main+0x2bc>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <main+0x27c>)
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f005 f815 	bl	8005cfa <HAL_RTCEx_BKUPRead>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <main+0x2c4>)
 8000cd6:	705a      	strb	r2, [r3, #1]
		userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <main+0x2c0>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <main+0x27c>)
 8000cde:	0011      	movs	r1, r2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f005 f80a 	bl	8005cfa <HAL_RTCEx_BKUPRead>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <main+0x2c4>)
 8000cec:	70da      	strb	r2, [r3, #3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

		__NOP();
 8000cee:	46c0      	nop			@ (mov r8, r8)

  while (1)
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	e7fd      	b.n	8000cf0 <main+0x274>
 8000cf4:	20000028 	.word	0x20000028
 8000cf8:	2000014c 	.word	0x2000014c
 8000cfc:	200000a0 	.word	0x200000a0
 8000d00:	2000008c 	.word	0x2000008c
 8000d04:	20000040 	.word	0x20000040
 8000d08:	2000003c 	.word	0x2000003c
 8000d0c:	2000002c 	.word	0x2000002c
 8000d10:	20000010 	.word	0x20000010
 8000d14:	2000000c 	.word	0x2000000c
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	200000bc 	.word	0x200000bc
 8000d20:	200002c4 	.word	0x200002c4
 8000d24:	2000000d 	.word	0x2000000d
 8000d28:	2000000e 	.word	0x2000000e
 8000d2c:	20000089 	.word	0x20000089
 8000d30:	20000038 	.word	0x20000038
 8000d34:	200000b8 	.word	0x200000b8
 8000d38:	20000030 	.word	0x20000030
 8000d3c:	20000034 	.word	0x20000034
 8000d40:	200000a4 	.word	0x200000a4

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b093      	sub	sp, #76	@ 0x4c
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	2410      	movs	r4, #16
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	0018      	movs	r0, r3
 8000d50:	2338      	movs	r3, #56	@ 0x38
 8000d52:	001a      	movs	r2, r3
 8000d54:	2100      	movs	r1, #0
 8000d56:	f006 f911 	bl	8006f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5a:	003b      	movs	r3, r7
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	2310      	movs	r3, #16
 8000d60:	001a      	movs	r2, r3
 8000d62:	2100      	movs	r1, #0
 8000d64:	f006 f90a 	bl	8006f7c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d68:	2380      	movs	r3, #128	@ 0x80
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f002 ffa1 	bl	8003cb4 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d72:	f002 ff81 	bl	8003c78 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d76:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <SystemClock_Config+0xd4>)
 8000d78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000d7a:	4b27      	ldr	r3, [pc, #156]	@ (8000e18 <SystemClock_Config+0xd4>)
 8000d7c:	2118      	movs	r1, #24
 8000d7e:	438a      	bics	r2, r1
 8000d80:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	220d      	movs	r2, #13
 8000d86:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	2280      	movs	r2, #128	@ 0x80
 8000d8c:	0252      	lsls	r2, r2, #9
 8000d8e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d90:	0021      	movs	r1, r4
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2201      	movs	r2, #1
 8000d96:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2202      	movs	r2, #2
 8000da2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2203      	movs	r2, #3
 8000da8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2208      	movs	r2, #8
 8000db4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	22c0      	movs	r2, #192	@ 0xc0
 8000dba:	02d2      	lsls	r2, r2, #11
 8000dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2280      	movs	r2, #128	@ 0x80
 8000dc2:	0492      	lsls	r2, r2, #18
 8000dc4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2280      	movs	r2, #128	@ 0x80
 8000dca:	0592      	lsls	r2, r2, #22
 8000dcc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f002 ffbb 	bl	8003d4c <HAL_RCC_OscConfig>
 8000dd6:	1e03      	subs	r3, r0, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dda:	f000 ffc5 	bl	8001d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dde:	003b      	movs	r3, r7
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	003b      	movs	r3, r7
 8000de6:	2202      	movs	r2, #2
 8000de8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dea:	003b      	movs	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df0:	003b      	movs	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000df6:	003b      	movs	r3, r7
 8000df8:	2102      	movs	r1, #2
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f003 fac0 	bl	8004380 <HAL_RCC_ClockConfig>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e04:	f000 ffb0 	bl	8001d68 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f004 f873 	bl	8004ef4 <HAL_RCCEx_EnableLSCO>
}
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b013      	add	sp, #76	@ 0x4c
 8000e14:	bd90      	pop	{r4, r7, pc}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	40021000 	.word	0x40021000

08000e1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e22:	4a1c      	ldr	r2, [pc, #112]	@ (8000e94 <MX_I2C1_Init+0x78>)
 8000e24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e28:	4a1b      	ldr	r2, [pc, #108]	@ (8000e98 <MX_I2C1_Init+0x7c>)
 8000e2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e32:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e38:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e3e:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f001 ffd3 	bl	8002e04 <HAL_I2C_Init>
 8000e5e:	1e03      	subs	r3, r0, #0
 8000e60:	d001      	beq.n	8000e66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e62:	f000 ff81 	bl	8001d68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e66:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e68:	2100      	movs	r1, #0
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f002 fd76 	bl	800395c <HAL_I2CEx_ConfigAnalogFilter>
 8000e70:	1e03      	subs	r3, r0, #0
 8000e72:	d001      	beq.n	8000e78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e74:	f000 ff78 	bl	8001d68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e78:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <MX_I2C1_Init+0x74>)
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f002 fdb9 	bl	80039f4 <HAL_I2CEx_ConfigDigitalFilter>
 8000e82:	1e03      	subs	r3, r0, #0
 8000e84:	d001      	beq.n	8000e8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e86:	f000 ff6f 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200000bc 	.word	0x200000bc
 8000e94:	40005400 	.word	0x40005400
 8000e98:	00602173 	.word	0x00602173

08000e9c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <MX_I2S1_Init+0x48>)
 8000ea2:	4a11      	ldr	r2, [pc, #68]	@ (8000ee8 <MX_I2S1_Init+0x4c>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <MX_I2S1_Init+0x48>)
 8000ea8:	2280      	movs	r2, #128	@ 0x80
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000eae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <MX_I2S1_Init+0x48>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <MX_I2S1_Init+0x48>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <MX_I2S1_Init+0x48>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <MX_I2S1_Init+0x48>)
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <MX_I2S1_Init+0x50>)
 8000ec4:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <MX_I2S1_Init+0x48>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000ecc:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <MX_I2S1_Init+0x48>)
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f002 fddc 	bl	8003a8c <HAL_I2S_Init>
 8000ed4:	1e03      	subs	r3, r0, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2S1_Init+0x40>
  {
    Error_Handler();
 8000ed8:	f000 ff46 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000edc:	46c0      	nop			@ (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	20000110 	.word	0x20000110
 8000ee8:	40013000 	.word	0x40013000
 8000eec:	0000ac44 	.word	0x0000ac44

08000ef0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	@ 0x30
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_DateTypeDef sDate = {0};
 8000ef6:	232c      	movs	r3, #44	@ 0x2c
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	0018      	movs	r0, r3
 8000f02:	2328      	movs	r3, #40	@ 0x28
 8000f04:	001a      	movs	r2, r3
 8000f06:	2100      	movs	r1, #0
 8000f08:	f006 f838 	bl	8006f7c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800100c <MX_RTC_Init+0x11c>)
 8000f10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000f12:	4b3d      	ldr	r3, [pc, #244]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f14:	2240      	movs	r2, #64	@ 0x40
 8000f16:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000f18:	4b3b      	ldr	r3, [pc, #236]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f1a:	227f      	movs	r2, #127	@ 0x7f
 8000f1c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000f1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f20:	22ff      	movs	r2, #255	@ 0xff
 8000f22:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f24:	4b38      	ldr	r3, [pc, #224]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f2a:	4b37      	ldr	r3, [pc, #220]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f30:	4b35      	ldr	r3, [pc, #212]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f36:	4b34      	ldr	r3, [pc, #208]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f38:	2280      	movs	r2, #128	@ 0x80
 8000f3a:	05d2      	lsls	r2, r2, #23
 8000f3c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000f3e:	4b32      	ldr	r3, [pc, #200]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f44:	4b30      	ldr	r3, [pc, #192]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f004 f84c 	bl	8004fe4 <HAL_RTC_Init>
 8000f4c:	1e03      	subs	r3, r0, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8000f50:	f000 ff0a 	bl	8001d68 <Error_Handler>
//  {
//    Error_Handler();
//  }


  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f54:	212c      	movs	r1, #44	@ 0x2c
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2201      	movs	r2, #1
 8000f60:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2201      	movs	r2, #1
 8000f66:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f6e:	1879      	adds	r1, r7, r1
 8000f70:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <MX_RTC_Init+0x118>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	0018      	movs	r0, r3
 8000f76:	f004 f9db 	bl	8005330 <HAL_RTC_SetDate>
 8000f7a:	1e03      	subs	r3, r0, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000f7e:	f000 fef3 	bl	8001d68 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4a18      	ldr	r2, [pc, #96]	@ (8001010 <MX_RTC_Init+0x120>)
 8000fb0:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2220      	movs	r2, #32
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2280      	movs	r2, #128	@ 0x80
 8000fca:	0052      	lsls	r2, r2, #1
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000fce:	1d39      	adds	r1, r7, #4
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <MX_RTC_Init+0x118>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f004 fa8b 	bl	80054f0 <HAL_RTC_SetAlarm_IT>
 8000fda:	1e03      	subs	r3, r0, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_RTC_Init+0xf2>
  {
    Error_Handler();
 8000fde:	f000 fec3 	bl	8001d68 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8000fe2:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <MX_RTC_Init+0x118>)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f004 fe1a 	bl	8005c20 <HAL_RTCEx_SetCalibrationOutPut>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_RTC_Init+0x104>
  {
    Error_Handler();
 8000ff0:	f000 feba 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8000ff4:	4907      	ldr	r1, [pc, #28]	@ (8001014 <MX_RTC_Init+0x124>)
 8000ff6:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <MX_RTC_Init+0x118>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f004 f93c 	bl	8005278 <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 8001000:	46c0      	nop			@ (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b00c      	add	sp, #48	@ 0x30
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000014c 	.word	0x2000014c
 800100c:	40002800 	.word	0x40002800
 8001010:	80800080 	.word	0x80800080
 8001014:	2000008c 	.word	0x2000008c

08001018 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_SPI2_Init+0x74>)
 800101e:	4a1c      	ldr	r2, [pc, #112]	@ (8001090 <MX_SPI2_Init+0x78>)
 8001020:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001022:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <MX_SPI2_Init+0x74>)
 8001024:	2282      	movs	r2, #130	@ 0x82
 8001026:	0052      	lsls	r2, r2, #1
 8001028:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <MX_SPI2_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_SPI2_Init+0x74>)
 8001032:	22e0      	movs	r2, #224	@ 0xe0
 8001034:	00d2      	lsls	r2, r2, #3
 8001036:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001038:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_SPI2_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_SPI2_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_SPI2_Init+0x74>)
 8001046:	2280      	movs	r2, #128	@ 0x80
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_SPI2_Init+0x74>)
 800104e:	2210      	movs	r2, #16
 8001050:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_SPI2_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_SPI2_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <MX_SPI2_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001064:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_SPI2_Init+0x74>)
 8001066:	2207      	movs	r2, #7
 8001068:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <MX_SPI2_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_SPI2_Init+0x74>)
 8001072:	2208      	movs	r2, #8
 8001074:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001076:	4b05      	ldr	r3, [pc, #20]	@ (800108c <MX_SPI2_Init+0x74>)
 8001078:	0018      	movs	r0, r3
 800107a:	f004 fe59 	bl	8005d30 <HAL_SPI_Init>
 800107e:	1e03      	subs	r3, r0, #0
 8001080:	d001      	beq.n	8001086 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001082:	f000 fe71 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001086:	46c0      	nop			@ (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000178 	.word	0x20000178
 8001090:	40003800 	.word	0x40003800

08001094 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109a:	231c      	movs	r3, #28
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	0018      	movs	r0, r3
 80010a0:	230c      	movs	r3, #12
 80010a2:	001a      	movs	r2, r3
 80010a4:	2100      	movs	r1, #0
 80010a6:	f005 ff69 	bl	8006f7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010aa:	003b      	movs	r3, r7
 80010ac:	0018      	movs	r0, r3
 80010ae:	231c      	movs	r3, #28
 80010b0:	001a      	movs	r2, r3
 80010b2:	2100      	movs	r1, #0
 80010b4:	f005 ff62 	bl	8006f7c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b8:	4b24      	ldr	r3, [pc, #144]	@ (800114c <MX_TIM2_Init+0xb8>)
 80010ba:	2280      	movs	r2, #128	@ 0x80
 80010bc:	05d2      	lsls	r2, r2, #23
 80010be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 80010c0:	4b22      	ldr	r3, [pc, #136]	@ (800114c <MX_TIM2_Init+0xb8>)
 80010c2:	4a23      	ldr	r2, [pc, #140]	@ (8001150 <MX_TIM2_Init+0xbc>)
 80010c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b21      	ldr	r3, [pc, #132]	@ (800114c <MX_TIM2_Init+0xb8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80010cc:	4b1f      	ldr	r3, [pc, #124]	@ (800114c <MX_TIM2_Init+0xb8>)
 80010ce:	2263      	movs	r2, #99	@ 0x63
 80010d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d2:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <MX_TIM2_Init+0xb8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d8:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <MX_TIM2_Init+0xb8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010de:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <MX_TIM2_Init+0xb8>)
 80010e0:	0018      	movs	r0, r3
 80010e2:	f005 f829 	bl	8006138 <HAL_TIM_PWM_Init>
 80010e6:	1e03      	subs	r3, r0, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80010ea:	f000 fe3d 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ee:	211c      	movs	r1, #28
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010fc:	187a      	adds	r2, r7, r1
 80010fe:	4b13      	ldr	r3, [pc, #76]	@ (800114c <MX_TIM2_Init+0xb8>)
 8001100:	0011      	movs	r1, r2
 8001102:	0018      	movs	r0, r3
 8001104:	f005 feba 	bl	8006e7c <HAL_TIMEx_MasterConfigSynchronization>
 8001108:	1e03      	subs	r3, r0, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800110c:	f000 fe2c 	bl	8001d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001110:	003b      	movs	r3, r7
 8001112:	2260      	movs	r2, #96	@ 0x60
 8001114:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001116:	003b      	movs	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111c:	003b      	movs	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001122:	003b      	movs	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001128:	0039      	movs	r1, r7
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <MX_TIM2_Init+0xb8>)
 800112c:	2208      	movs	r2, #8
 800112e:	0018      	movs	r0, r3
 8001130:	f005 fa40 	bl	80065b4 <HAL_TIM_PWM_ConfigChannel>
 8001134:	1e03      	subs	r3, r0, #0
 8001136:	d001      	beq.n	800113c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001138:	f000 fe16 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <MX_TIM2_Init+0xb8>)
 800113e:	0018      	movs	r0, r3
 8001140:	f001 fa48 	bl	80025d4 <HAL_TIM_MspPostInit>

}
 8001144:	46c0      	nop			@ (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b00a      	add	sp, #40	@ 0x28
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200001dc 	.word	0x200001dc
 8001150:	0000031f 	.word	0x0000031f

08001154 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <MX_TIM14_Init+0x40>)
 800115a:	4a0f      	ldr	r2, [pc, #60]	@ (8001198 <MX_TIM14_Init+0x44>)
 800115c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 800115e:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <MX_TIM14_Init+0x40>)
 8001160:	22f4      	movs	r2, #244	@ 0xf4
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <MX_TIM14_Init+0x40>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800116c:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <MX_TIM14_Init+0x40>)
 800116e:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <MX_TIM14_Init+0x48>)
 8001170:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001172:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <MX_TIM14_Init+0x40>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <MX_TIM14_Init+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800117e:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <MX_TIM14_Init+0x40>)
 8001180:	0018      	movs	r0, r3
 8001182:	f004 fe8d 	bl	8005ea0 <HAL_TIM_Base_Init>
 8001186:	1e03      	subs	r3, r0, #0
 8001188:	d001      	beq.n	800118e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800118a:	f000 fded 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000228 	.word	0x20000228
 8001198:	40002000 	.word	0x40002000
 800119c:	0000ffff 	.word	0x0000ffff

080011a0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_TIM16_Init+0x44>)
 80011a6:	4a10      	ldr	r2, [pc, #64]	@ (80011e8 <MX_TIM16_Init+0x48>)
 80011a8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 58595;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_TIM16_Init+0x44>)
 80011ac:	4a0f      	ldr	r2, [pc, #60]	@ (80011ec <MX_TIM16_Init+0x4c>)
 80011ae:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <MX_TIM16_Init+0x44>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <MX_TIM16_Init+0x44>)
 80011b8:	4a0d      	ldr	r2, [pc, #52]	@ (80011f0 <MX_TIM16_Init+0x50>)
 80011ba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_TIM16_Init+0x44>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <MX_TIM16_Init+0x44>)
 80011c4:	220a      	movs	r2, #10
 80011c6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <MX_TIM16_Init+0x44>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011ce:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <MX_TIM16_Init+0x44>)
 80011d0:	0018      	movs	r0, r3
 80011d2:	f004 fe65 	bl	8005ea0 <HAL_TIM_Base_Init>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80011da:	f000 fdc5 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000274 	.word	0x20000274
 80011e8:	40014400 	.word	0x40014400
 80011ec:	0000e4e3 	.word	0x0000e4e3
 80011f0:	0000ffff 	.word	0x0000ffff

080011f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b08b      	sub	sp, #44	@ 0x2c
 80011f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fa:	2414      	movs	r4, #20
 80011fc:	193b      	adds	r3, r7, r4
 80011fe:	0018      	movs	r0, r3
 8001200:	2314      	movs	r3, #20
 8001202:	001a      	movs	r2, r3
 8001204:	2100      	movs	r1, #0
 8001206:	f005 feb9 	bl	8006f7c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	4b7d      	ldr	r3, [pc, #500]	@ (8001400 <MX_GPIO_Init+0x20c>)
 800120c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800120e:	4b7c      	ldr	r3, [pc, #496]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001210:	2104      	movs	r1, #4
 8001212:	430a      	orrs	r2, r1
 8001214:	635a      	str	r2, [r3, #52]	@ 0x34
 8001216:	4b7a      	ldr	r3, [pc, #488]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800121a:	2204      	movs	r2, #4
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001222:	4b77      	ldr	r3, [pc, #476]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001224:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001226:	4b76      	ldr	r3, [pc, #472]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001228:	2120      	movs	r1, #32
 800122a:	430a      	orrs	r2, r1
 800122c:	635a      	str	r2, [r3, #52]	@ 0x34
 800122e:	4b74      	ldr	r3, [pc, #464]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001232:	2220      	movs	r2, #32
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b71      	ldr	r3, [pc, #452]	@ (8001400 <MX_GPIO_Init+0x20c>)
 800123c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800123e:	4b70      	ldr	r3, [pc, #448]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001240:	2101      	movs	r1, #1
 8001242:	430a      	orrs	r2, r1
 8001244:	635a      	str	r2, [r3, #52]	@ 0x34
 8001246:	4b6e      	ldr	r3, [pc, #440]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800124a:	2201      	movs	r2, #1
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	4b6b      	ldr	r3, [pc, #428]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001254:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001256:	4b6a      	ldr	r3, [pc, #424]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001258:	2102      	movs	r1, #2
 800125a:	430a      	orrs	r2, r1
 800125c:	635a      	str	r2, [r3, #52]	@ 0x34
 800125e:	4b68      	ldr	r3, [pc, #416]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001262:	2202      	movs	r2, #2
 8001264:	4013      	ands	r3, r2
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800126a:	4b65      	ldr	r3, [pc, #404]	@ (8001400 <MX_GPIO_Init+0x20c>)
 800126c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800126e:	4b64      	ldr	r3, [pc, #400]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001270:	2108      	movs	r1, #8
 8001272:	430a      	orrs	r2, r1
 8001274:	635a      	str	r2, [r3, #52]	@ 0x34
 8001276:	4b62      	ldr	r3, [pc, #392]	@ (8001400 <MX_GPIO_Init+0x20c>)
 8001278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800127a:	2208      	movs	r2, #8
 800127c:	4013      	ands	r3, r2
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_MCLR_Pin, GPIO_PIN_SET);
 8001282:	238e      	movs	r3, #142	@ 0x8e
 8001284:	0119      	lsls	r1, r3, #4
 8001286:	23a0      	movs	r3, #160	@ 0xa0
 8001288:	05db      	lsls	r3, r3, #23
 800128a:	2201      	movs	r2, #1
 800128c:	0018      	movs	r0, r3
 800128e:	f001 fd4c 	bl	8002d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_ENABLE_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001292:	495c      	ldr	r1, [pc, #368]	@ (8001404 <MX_GPIO_Init+0x210>)
 8001294:	4b5c      	ldr	r3, [pc, #368]	@ (8001408 <MX_GPIO_Init+0x214>)
 8001296:	2200      	movs	r2, #0
 8001298:	0018      	movs	r0, r3
 800129a:	f001 fd46 	bl	8002d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin, GPIO_PIN_RESET);
 800129e:	23c0      	movs	r3, #192	@ 0xc0
 80012a0:	00d9      	lsls	r1, r3, #3
 80012a2:	23a0      	movs	r3, #160	@ 0xa0
 80012a4:	05db      	lsls	r3, r3, #23
 80012a6:	2200      	movs	r2, #0
 80012a8:	0018      	movs	r0, r3
 80012aa:	f001 fd3e 	bl	8002d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 80012ae:	4b57      	ldr	r3, [pc, #348]	@ (800140c <MX_GPIO_Init+0x218>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	2180      	movs	r1, #128	@ 0x80
 80012b4:	0018      	movs	r0, r3
 80012b6:	f001 fd38 	bl	8002d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAPTOUCH_RESET_GPIO_Port, CAPTOUCH_RESET_Pin, GPIO_PIN_SET);
 80012ba:	2380      	movs	r3, #128	@ 0x80
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4852      	ldr	r0, [pc, #328]	@ (8001408 <MX_GPIO_Init+0x214>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	0019      	movs	r1, r3
 80012c4:	f001 fd31 	bl	8002d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012c8:	193b      	adds	r3, r7, r4
 80012ca:	2204      	movs	r2, #4
 80012cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	2203      	movs	r2, #3
 80012d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	193b      	adds	r3, r7, r4
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	193a      	adds	r2, r7, r4
 80012dc:	23a0      	movs	r3, #160	@ 0xa0
 80012de:	05db      	lsls	r3, r3, #23
 80012e0:	0011      	movs	r1, r2
 80012e2:	0018      	movs	r0, r3
 80012e4:	f001 fba0 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nHOLD_Pin SHIFT_DATA_IN_Pin
                           SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_DATA_IN_Pin
 80012e8:	0021      	movs	r1, r4
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	22ee      	movs	r2, #238	@ 0xee
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	601a      	str	r2, [r3, #0]
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	000c      	movs	r4, r1
 80012f4:	193b      	adds	r3, r7, r4
 80012f6:	2201      	movs	r2, #1
 80012f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	193b      	adds	r3, r7, r4
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	193b      	adds	r3, r7, r4
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	193a      	adds	r2, r7, r4
 8001308:	23a0      	movs	r3, #160	@ 0xa0
 800130a:	05db      	lsls	r3, r3, #23
 800130c:	0011      	movs	r1, r2
 800130e:	0018      	movs	r0, r3
 8001310:	f001 fb8a 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_ENABLE_Pin DEBUG_LED_Pin CAPTOUCH_RESET_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin;
 8001314:	193b      	adds	r3, r7, r4
 8001316:	4a3e      	ldr	r2, [pc, #248]	@ (8001410 <MX_GPIO_Init+0x21c>)
 8001318:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	193b      	adds	r3, r7, r4
 800131c:	2201      	movs	r2, #1
 800131e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	193b      	adds	r3, r7, r4
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	193b      	adds	r3, r7, r4
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	193b      	adds	r3, r7, r4
 800132e:	4a36      	ldr	r2, [pc, #216]	@ (8001408 <MX_GPIO_Init+0x214>)
 8001330:	0019      	movs	r1, r3
 8001332:	0010      	movs	r0, r2
 8001334:	f001 fb78 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8001338:	193b      	adds	r3, r7, r4
 800133a:	2280      	movs	r2, #128	@ 0x80
 800133c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	193b      	adds	r3, r7, r4
 8001340:	2201      	movs	r2, #1
 8001342:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	193b      	adds	r3, r7, r4
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	193b      	adds	r3, r7, r4
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 8001350:	193b      	adds	r3, r7, r4
 8001352:	4a2e      	ldr	r2, [pc, #184]	@ (800140c <MX_GPIO_Init+0x218>)
 8001354:	0019      	movs	r1, r3
 8001356:	0010      	movs	r0, r2
 8001358:	f001 fb66 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_SET_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = ALARM_SET_BUTTON_EXTI_Pin;
 800135c:	193b      	adds	r3, r7, r4
 800135e:	2280      	movs	r2, #128	@ 0x80
 8001360:	0212      	lsls	r2, r2, #8
 8001362:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001364:	193b      	adds	r3, r7, r4
 8001366:	2284      	movs	r2, #132	@ 0x84
 8001368:	0392      	lsls	r2, r2, #14
 800136a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136c:	193b      	adds	r3, r7, r4
 800136e:	2201      	movs	r2, #1
 8001370:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALARM_SET_BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 8001372:	193a      	adds	r2, r7, r4
 8001374:	23a0      	movs	r3, #160	@ 0xa0
 8001376:	05db      	lsls	r3, r3, #23
 8001378:	0011      	movs	r1, r2
 800137a:	0018      	movs	r0, r3
 800137c:	f001 fb54 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_EXTI_Pin MINUTE_SET_BUTTON_EXTI_Pin ALARM_EN_BUTTON_EXTI_Pin DISPLAY_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_EXTI_Pin|MINUTE_SET_BUTTON_EXTI_Pin|ALARM_EN_BUTTON_EXTI_Pin|DISPLAY_BUTTON_EXTI_Pin;
 8001380:	0021      	movs	r1, r4
 8001382:	187b      	adds	r3, r7, r1
 8001384:	220f      	movs	r2, #15
 8001386:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001388:	187b      	adds	r3, r7, r1
 800138a:	2284      	movs	r2, #132	@ 0x84
 800138c:	0392      	lsls	r2, r2, #14
 800138e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001390:	187b      	adds	r3, r7, r1
 8001392:	2201      	movs	r2, #1
 8001394:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001396:	000c      	movs	r4, r1
 8001398:	187b      	adds	r3, r7, r1
 800139a:	4a1e      	ldr	r2, [pc, #120]	@ (8001414 <MX_GPIO_Init+0x220>)
 800139c:	0019      	movs	r1, r3
 800139e:	0010      	movs	r0, r2
 80013a0:	f001 fb42 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIME_SWITCH_EXTI_Pin */
  GPIO_InitStruct.Pin = TIME_SWITCH_EXTI_Pin;
 80013a4:	0021      	movs	r1, r4
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2210      	movs	r2, #16
 80013aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	2284      	movs	r2, #132	@ 0x84
 80013b0:	0392      	lsls	r2, r2, #14
 80013b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	2201      	movs	r2, #1
 80013b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TIME_SWITCH_EXTI_GPIO_Port, &GPIO_InitStruct);
 80013ba:	187b      	adds	r3, r7, r1
 80013bc:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <MX_GPIO_Init+0x214>)
 80013be:	0019      	movs	r1, r3
 80013c0:	0010      	movs	r0, r2
 80013c2:	f001 fb31 	bl	8002a28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	2005      	movs	r0, #5
 80013cc:	f001 fafa 	bl	80029c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80013d0:	2005      	movs	r0, #5
 80013d2:	f001 fb0c 	bl	80029ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2101      	movs	r1, #1
 80013da:	2006      	movs	r0, #6
 80013dc:	f001 faf2 	bl	80029c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80013e0:	2006      	movs	r0, #6
 80013e2:	f001 fb04 	bl	80029ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2101      	movs	r1, #1
 80013ea:	2007      	movs	r0, #7
 80013ec:	f001 faea 	bl	80029c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80013f0:	2007      	movs	r0, #7
 80013f2:	f001 fafc 	bl	80029ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f6:	46c0      	nop			@ (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b00b      	add	sp, #44	@ 0x2c
 80013fc:	bd90      	pop	{r4, r7, pc}
 80013fe:	46c0      	nop			@ (mov r8, r8)
 8001400:	40021000 	.word	0x40021000
 8001404:	00001002 	.word	0x00001002
 8001408:	50000400 	.word	0x50000400
 800140c:	50000800 	.word	0x50000800
 8001410:	00001102 	.word	0x00001102
 8001414:	50000c00 	.word	0x50000c00

08001418 <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8001424:	4a09      	ldr	r2, [pc, #36]	@ (800144c <updateAndDisplayTime+0x34>)
 8001426:	490a      	ldr	r1, [pc, #40]	@ (8001450 <updateAndDisplayTime+0x38>)
 8001428:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <updateAndDisplayTime+0x3c>)
 800142a:	0018      	movs	r0, r3
 800142c:	f7ff fb10 	bl	8000a50 <getRTCTime>
	sevSeg_updateDigits(&currTime, userAlarmToggle);
 8001430:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <updateAndDisplayTime+0x40>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	001a      	movs	r2, r3
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <updateAndDisplayTime+0x38>)
 8001438:	0011      	movs	r1, r2
 800143a:	0018      	movs	r0, r3
 800143c:	f000 fdba 	bl	8001fb4 <sevSeg_updateDigits>

	return halRet;
 8001440:	1dfb      	adds	r3, r7, #7
 8001442:	781b      	ldrb	r3, [r3, #0]

}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	b002      	add	sp, #8
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200000a0 	.word	0x200000a0
 8001450:	2000008c 	.word	0x2000008c
 8001454:	2000014c 	.word	0x2000014c
 8001458:	20000089 	.word	0x20000089

0800145c <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]

	sevSeg_updateDigits(&userAlarmTime, userAlarmToggle);
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <updateAndDisplayAlarm+0x28>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	001a      	movs	r2, r3
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <updateAndDisplayAlarm+0x2c>)
 8001470:	0011      	movs	r1, r2
 8001472:	0018      	movs	r0, r3
 8001474:	f000 fd9e 	bl	8001fb4 <sevSeg_updateDigits>

	return halRet;
 8001478:	1dfb      	adds	r3, r7, #7
 800147a:	781b      	ldrb	r3, [r3, #0]

}
 800147c:	0018      	movs	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	b002      	add	sp, #8
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000089 	.word	0x20000089
 8001488:	200000a4 	.word	0x200000a4

0800148c <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b08d      	sub	sp, #52	@ 0x34
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 8001494:	2408      	movs	r4, #8
 8001496:	193b      	adds	r3, r7, r4
 8001498:	0018      	movs	r0, r3
 800149a:	2328      	movs	r3, #40	@ 0x28
 800149c:	001a      	movs	r2, r3
 800149e:	2100      	movs	r1, #0
 80014a0:	f005 fd6c 	bl	8006f7c <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 80014a4:	2380      	movs	r3, #128	@ 0x80
 80014a6:	005a      	lsls	r2, r3, #1
 80014a8:	1939      	adds	r1, r7, r4
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	2300      	movs	r3, #0
 80014ae:	f004 f95f 	bl	8005770 <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 80014b2:	193b      	adds	r3, r7, r4
 80014b4:	785b      	ldrb	r3, [r3, #1]
 80014b6:	2b3a      	cmp	r3, #58	@ 0x3a
 80014b8:	d903      	bls.n	80014c2 <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	2200      	movs	r2, #0
 80014be:	705a      	strb	r2, [r3, #1]
 80014c0:	e006      	b.n	80014d0 <HAL_RTC_AlarmAEventCallback+0x44>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 80014c2:	2108      	movs	r1, #8
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	785b      	ldrb	r3, [r3, #1]
 80014c8:	3301      	adds	r3, #1
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	187b      	adds	r3, r7, r1
 80014ce:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80014d0:	46c0      	nop			@ (mov r8, r8)
 80014d2:	2308      	movs	r3, #8
 80014d4:	18f9      	adds	r1, r7, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	0018      	movs	r0, r3
 80014dc:	f004 f808 	bl	80054f0 <HAL_RTC_SetAlarm_IT>
 80014e0:	1e03      	subs	r3, r0, #0
 80014e2:	d1f6      	bne.n	80014d2 <HAL_RTC_AlarmAEventCallback+0x46>

	  updateAndDisplayTime();
 80014e4:	f7ff ff98 	bl	8001418 <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 80014e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <HAL_RTC_AlarmAEventCallback+0x94>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d013      	beq.n	8001518 <HAL_RTC_AlarmAEventCallback+0x8c>
 80014f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <HAL_RTC_AlarmAEventCallback+0x98>)
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d10d      	bne.n	8001518 <HAL_RTC_AlarmAEventCallback+0x8c>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 80014fc:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <HAL_RTC_AlarmAEventCallback+0x98>)
 80014fe:	785a      	ldrb	r2, [r3, #1]
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_RTC_AlarmAEventCallback+0x9c>)
 8001502:	785b      	ldrb	r3, [r3, #1]
 8001504:	429a      	cmp	r2, r3
 8001506:	d107      	bne.n	8001518 <HAL_RTC_AlarmAEventCallback+0x8c>
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <HAL_RTC_AlarmAEventCallback+0x98>)
 800150a:	78da      	ldrb	r2, [r3, #3]
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_RTC_AlarmAEventCallback+0x9c>)
 800150e:	78db      	ldrb	r3, [r3, #3]
 8001510:	429a      	cmp	r2, r3
 8001512:	d101      	bne.n	8001518 <HAL_RTC_AlarmAEventCallback+0x8c>
		  userAlarmBeep();
 8001514:	f000 f80a 	bl	800152c <userAlarmBeep>
	  }


}
 8001518:	46c0      	nop			@ (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b00d      	add	sp, #52	@ 0x34
 800151e:	bd90      	pop	{r4, r7, pc}
 8001520:	20000089 	.word	0x20000089
 8001524:	200000a4 	.word	0x200000a4
 8001528:	2000008c 	.word	0x2000008c

0800152c <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 8001532:	4b50      	ldr	r3, [pc, #320]	@ (8001674 <userAlarmBeep+0x148>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d02d      	beq.n	8001596 <userAlarmBeep+0x6a>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 800153a:	4b4f      	ldr	r3, [pc, #316]	@ (8001678 <userAlarmBeep+0x14c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0018      	movs	r0, r3
 8001540:	f004 fdcc 	bl	80060dc <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 8001544:	4b4c      	ldr	r3, [pc, #304]	@ (8001678 <userAlarmBeep+0x14c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800154c:	4b4a      	ldr	r3, [pc, #296]	@ (8001678 <userAlarmBeep+0x14c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	0c12      	lsrs	r2, r2, #16
 8001554:	0412      	lsls	r2, r2, #16
 8001556:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 8001558:	4b47      	ldr	r3, [pc, #284]	@ (8001678 <userAlarmBeep+0x14c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	4b45      	ldr	r3, [pc, #276]	@ (8001678 <userAlarmBeep+0x14c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4945      	ldr	r1, [pc, #276]	@ (800167c <userAlarmBeep+0x150>)
 8001568:	400a      	ands	r2, r1
 800156a:	611a      	str	r2, [r3, #16]

			// Re-write RCR with 10
			timerSnooze->Instance->RCR &= 0xFF00;
 800156c:	4b42      	ldr	r3, [pc, #264]	@ (8001678 <userAlarmBeep+0x14c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001574:	4b40      	ldr	r3, [pc, #256]	@ (8001678 <userAlarmBeep+0x14c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	22ff      	movs	r2, #255	@ 0xff
 800157c:	0212      	lsls	r2, r2, #8
 800157e:	400a      	ands	r2, r1
 8001580:	631a      	str	r2, [r3, #48]	@ 0x30
			timerSnooze->Instance->RCR |= timerSnooze_RCR;
 8001582:	4b3d      	ldr	r3, [pc, #244]	@ (8001678 <userAlarmBeep+0x14c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800158a:	2164      	movs	r1, #100	@ 0x64
 800158c:	4b3a      	ldr	r3, [pc, #232]	@ (8001678 <userAlarmBeep+0x14c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	631a      	str	r2, [r3, #48]	@ 0x30

		}

	HAL_TIM_Base_Stop(timerDelay);
 8001596:	4b3a      	ldr	r3, [pc, #232]	@ (8001680 <userAlarmBeep+0x154>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	0018      	movs	r0, r3
 800159c:	f004 fd24 	bl	8005fe8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80015a0:	4b37      	ldr	r3, [pc, #220]	@ (8001680 <userAlarmBeep+0x154>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	0018      	movs	r0, r3
 80015a6:	f004 fcd3 	bl	8005f50 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80015aa:	4b35      	ldr	r3, [pc, #212]	@ (8001680 <userAlarmBeep+0x154>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b2:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80015b4:	1cfb      	adds	r3, r7, #3
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 80015ba:	f7ff ff2d 	bl	8001418 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 80015be:	4b30      	ldr	r3, [pc, #192]	@ (8001680 <userAlarmBeep+0x154>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001684 <userAlarmBeep+0x158>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d91a      	bls.n	8001606 <userAlarmBeep+0xda>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 80015d0:	1cfb      	adds	r3, r7, #3
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001688 <userAlarmBeep+0x15c>)
 80015d6:	5cd3      	ldrb	r3, [r2, r3]
 80015d8:	0018      	movs	r0, r3
 80015da:	f000 fd99 	bl	8002110 <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80015de:	4b28      	ldr	r3, [pc, #160]	@ (8001680 <userAlarmBeep+0x154>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e6:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80015e8:	1cfb      	adds	r3, r7, #3
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	1e5a      	subs	r2, r3, #1
 80015ee:	4193      	sbcs	r3, r2
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2201      	movs	r2, #1
 80015f4:	4053      	eors	r3, r2
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	001a      	movs	r2, r3
 80015fa:	1cfb      	adds	r3, r7, #3
 80015fc:	701a      	strb	r2, [r3, #0]
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	2101      	movs	r1, #1
 8001602:	400a      	ands	r2, r1
 8001604:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <userAlarmBeep+0x160>)
 8001608:	0018      	movs	r0, r3
 800160a:	f7fe ffb3 	bl	8000574 <capTouch_readChannels>
//		HAL_StatusTypeDef halRet = capTouch_readChannels(&capTouch);
//		if(halRet != HAL_OK)
//			dispError();

	} while(capTouch.keyStat == 0x00 &&
 800160e:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <userAlarmBeep+0x160>)
 8001610:	7c1b      	ldrb	r3, [r3, #16]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d108      	bne.n	8001628 <userAlarmBeep+0xfc>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 8001616:	4b1e      	ldr	r3, [pc, #120]	@ (8001690 <userAlarmBeep+0x164>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2204      	movs	r2, #4
 800161c:	0011      	movs	r1, r2
 800161e:	0018      	movs	r0, r3
 8001620:	f001 fb66 	bl	8002cf0 <HAL_GPIO_ReadPin>
 8001624:	1e03      	subs	r3, r0, #0
	} while(capTouch.keyStat == 0x00 &&
 8001626:	d1c8      	bne.n	80015ba <userAlarmBeep+0x8e>

	/*
	 * Stop blinking, turn off buzzer, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <userAlarmBeep+0x154>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	0018      	movs	r0, r3
 800162e:	f004 fcdb 	bl	8005fe8 <HAL_TIM_Base_Stop>

	updateAndDisplayTime();				// Update to current time and display
 8001632:	f7ff fef1 	bl	8001418 <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Set to 50% duty cycle
 8001636:	235a      	movs	r3, #90	@ 0x5a
 8001638:	0018      	movs	r0, r3
 800163a:	f000 fd69 	bl	8002110 <sevSeg_setIntensity>
	displayToggle = 2;								// Set to 2 for future display button ISRs
 800163e:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <userAlarmBeep+0x168>)
 8001640:	2202      	movs	r2, #2
 8001642:	701a      	strb	r2, [r3, #0]


	// If this is the first snooze,
	if(!secondSnooze) {
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <userAlarmBeep+0x148>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2201      	movs	r2, #1
 800164a:	4053      	eors	r3, r2
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d008      	beq.n	8001664 <userAlarmBeep+0x138>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 8001652:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <userAlarmBeep+0x14c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	0018      	movs	r0, r3
 8001658:	f004 fcec 	bl	8006034 <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 800165c:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <userAlarmBeep+0x148>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
		 * in the top conditional, the secondSnooze is always true;
		 */
		secondSnooze = false;

	}
}
 8001662:	e002      	b.n	800166a <userAlarmBeep+0x13e>
		secondSnooze = false;
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <userAlarmBeep+0x148>)
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
}
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	b002      	add	sp, #8
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			@ (mov r8, r8)
 8001674:	200002c1 	.word	0x200002c1
 8001678:	20000044 	.word	0x20000044
 800167c:	0000fffc 	.word	0x0000fffc
 8001680:	20000040 	.word	0x20000040
 8001684:	00007ffe 	.word	0x00007ffe
 8001688:	08007024 	.word	0x08007024
 800168c:	200002c4 	.word	0x200002c4
 8001690:	20000000 	.word	0x20000000
 8001694:	20000088 	.word	0x20000088

08001698 <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	0002      	movs	r2, r0
 80016a0:	1dbb      	adds	r3, r7, #6
 80016a2:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 80016a4:	2208      	movs	r2, #8
 80016a6:	1dbb      	adds	r3, r7, #6
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d106      	bne.n	80016bc <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 80016ae:	230f      	movs	r3, #15
 80016b0:	18fc      	adds	r4, r7, r3
 80016b2:	f000 f851 	bl	8001758 <displayButtonISR>
 80016b6:	0003      	movs	r3, r0
 80016b8:	7023      	strb	r3, [r4, #0]
	}
	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 80016ba:	e031      	b.n	8001720 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80016bc:	2204      	movs	r2, #4
 80016be:	1dbb      	adds	r3, r7, #6
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d106      	bne.n	80016d4 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80016c6:	230f      	movs	r3, #15
 80016c8:	18fc      	adds	r4, r7, r3
 80016ca:	f000 f877 	bl	80017bc <alarmEnableISR>
 80016ce:	0003      	movs	r3, r0
 80016d0:	7023      	strb	r3, [r4, #0]
}
 80016d2:	e025      	b.n	8001720 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80016d4:	2380      	movs	r3, #128	@ 0x80
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	1dba      	adds	r2, r7, #6
 80016da:	8812      	ldrh	r2, [r2, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d106      	bne.n	80016ee <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 80016e0:	230f      	movs	r3, #15
 80016e2:	18fc      	adds	r4, r7, r3
 80016e4:	f000 f8ae 	bl	8001844 <alarmSetISR>
 80016e8:	0003      	movs	r3, r0
 80016ea:	7023      	strb	r3, [r4, #0]
}
 80016ec:	e018      	b.n	8001720 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == hourSetButtonPin) {
 80016ee:	2201      	movs	r2, #1
 80016f0:	1dbb      	adds	r3, r7, #6
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d106      	bne.n	8001706 <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80016f8:	230f      	movs	r3, #15
 80016fa:	18fc      	adds	r4, r7, r3
 80016fc:	f000 f96c 	bl	80019d8 <hourSetISR>
 8001700:	0003      	movs	r3, r0
 8001702:	7023      	strb	r3, [r4, #0]
}
 8001704:	e00c      	b.n	8001720 <HAL_GPIO_EXTI_Falling_Callback+0x88>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8001706:	2202      	movs	r2, #2
 8001708:	1dbb      	adds	r3, r7, #6
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	4293      	cmp	r3, r2
 800170e:	d106      	bne.n	800171e <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8001710:	230f      	movs	r3, #15
 8001712:	18fc      	adds	r4, r7, r3
 8001714:	f000 f996 	bl	8001a44 <minuteSetISR>
 8001718:	0003      	movs	r3, r0
 800171a:	7023      	strb	r3, [r4, #0]
}
 800171c:	e000      	b.n	8001720 <HAL_GPIO_EXTI_Falling_Callback+0x88>
		__NOP();
 800171e:	46c0      	nop			@ (mov r8, r8)
}
 8001720:	46c0      	nop			@ (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	b005      	add	sp, #20
 8001726:	bd90      	pop	{r4, r7, pc}

08001728 <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

	if((htim == timerSnooze) && (secondSnooze == true)) {
 8001730:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	429a      	cmp	r2, r3
 8001738:	d105      	bne.n	8001746 <HAL_TIM_PeriodElapsedCallback+0x1e>
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_TIM_PeriodElapsedCallback+0x1e>

		userAlarmBeep();
 8001742:	f7ff fef3 	bl	800152c <userAlarmBeep>

	}

}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	b002      	add	sp, #8
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	20000044 	.word	0x20000044
 8001754:	200002c1 	.word	0x200002c1

08001758 <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0

	//printf("Entered display toggle ISR\n\r");

	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <displayButtonISR+0x58>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2280      	movs	r2, #128	@ 0x80
 8001764:	0152      	lsls	r2, r2, #5
 8001766:	0011      	movs	r1, r2
 8001768:	0018      	movs	r0, r3
 800176a:	f001 fafb 	bl	8002d64 <HAL_GPIO_TogglePin>
	HAL_StatusTypeDef halRet = HAL_OK;
 800176e:	1dfb      	adds	r3, r7, #7
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8001774:	f7ff fe50 	bl	8001418 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8001778:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <displayButtonISR+0x5c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	001a      	movs	r2, r3
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <displayButtonISR+0x60>)
 8001780:	5c9b      	ldrb	r3, [r3, r2]
 8001782:	0018      	movs	r0, r3
 8001784:	f000 fcc4 	bl	8002110 <sevSeg_setIntensity>

	if(displayToggle >= 2) {			// Increment display toggle or reset back down to 0;
 8001788:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <displayButtonISR+0x5c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d903      	bls.n	8001798 <displayButtonISR+0x40>
		displayToggle = 0;
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <displayButtonISR+0x5c>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	e005      	b.n	80017a4 <displayButtonISR+0x4c>
//		HAL_GPIO_WritePin(GPIOB, PMLED, GPIO_PIN_RESET);		// If display is off, turn off AM/PM LED
	} else {
		displayToggle++;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <displayButtonISR+0x5c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <displayButtonISR+0x5c>)
 80017a2:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 80017a4:	1dfb      	adds	r3, r7, #7
 80017a6:	781b      	ldrb	r3, [r3, #0]

}
 80017a8:	0018      	movs	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b002      	add	sp, #8
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000024 	.word	0x20000024
 80017b4:	20000088 	.word	0x20000088
 80017b8:	08007024 	.word	0x08007024

080017bc <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 80017c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <alarmEnableISR+0x78>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2280      	movs	r2, #128	@ 0x80
 80017c8:	0152      	lsls	r2, r2, #5
 80017ca:	0011      	movs	r1, r2
 80017cc:	0018      	movs	r0, r3
 80017ce:	f001 fac9 	bl	8002d64 <HAL_GPIO_TogglePin>

	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 80017d8:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <alarmEnableISR+0x7c>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2201      	movs	r2, #1
 80017de:	4053      	eors	r3, r2
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <alarmEnableISR+0x42>

		userAlarmToggle = true;								// Toggle internal flag to true
 80017e6:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <alarmEnableISR+0x7c>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
		sevSeg_updateDigits(&currTime, userAlarmToggle);		// Update display with correct decimal point
 80017ec:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <alarmEnableISR+0x7c>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	001a      	movs	r2, r3
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <alarmEnableISR+0x80>)
 80017f4:	0011      	movs	r1, r2
 80017f6:	0018      	movs	r0, r3
 80017f8:	f000 fbdc 	bl	8001fb4 <sevSeg_updateDigits>
 80017fc:	e010      	b.n	8001820 <alarmEnableISR+0x64>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <alarmEnableISR+0x7c>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00b      	beq.n	800181e <alarmEnableISR+0x62>

		userAlarmToggle = false;							// Toggle internal flag to false
 8001806:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <alarmEnableISR+0x7c>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
		sevSeg_updateDigits(&currTime, userAlarmToggle);		// Update display with correct decimal point
 800180c:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <alarmEnableISR+0x7c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	001a      	movs	r2, r3
 8001812:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <alarmEnableISR+0x80>)
 8001814:	0011      	movs	r1, r2
 8001816:	0018      	movs	r0, r3
 8001818:	f000 fbcc 	bl	8001fb4 <sevSeg_updateDigits>
 800181c:	e000      	b.n	8001820 <alarmEnableISR+0x64>
	}
	else {
		__NOP();							//Code should never reach here.
 800181e:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset snooze time
	secondSnooze = false;
 8001820:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <alarmEnableISR+0x84>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]

	return halRet;
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781b      	ldrb	r3, [r3, #0]

}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			@ (mov r8, r8)
 8001834:	20000024 	.word	0x20000024
 8001838:	20000089 	.word	0x20000089
 800183c:	2000008c 	.word	0x2000008c
 8001840:	200002c1 	.word	0x200002c1

08001844 <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 800184a:	4b5d      	ldr	r3, [pc, #372]	@ (80019c0 <alarmSetISR+0x17c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2280      	movs	r2, #128	@ 0x80
 8001850:	0152      	lsls	r2, r2, #5
 8001852:	0011      	movs	r1, r2
 8001854:	0018      	movs	r0, r3
 8001856:	f001 fa85 	bl	8002d64 <HAL_GPIO_TogglePin>

	HAL_StatusTypeDef halRet = HAL_OK;
 800185a:	1c7b      	adds	r3, r7, #1
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 8001860:	1dfb      	adds	r3, r7, #7
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
 8001866:	e01a      	b.n	800189e <alarmSetISR+0x5a>

		HAL_TIM_Base_Stop(timerDelay);
 8001868:	4b56      	ldr	r3, [pc, #344]	@ (80019c4 <alarmSetISR+0x180>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	0018      	movs	r0, r3
 800186e:	f004 fbbb 	bl	8005fe8 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 8001872:	4b54      	ldr	r3, [pc, #336]	@ (80019c4 <alarmSetISR+0x180>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2200      	movs	r2, #0
 800187a:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 800187c:	4b51      	ldr	r3, [pc, #324]	@ (80019c4 <alarmSetISR+0x180>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0018      	movs	r0, r3
 8001882:	f004 fb65 	bl	8005f50 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 8001886:	4b4f      	ldr	r3, [pc, #316]	@ (80019c4 <alarmSetISR+0x180>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188e:	4a4e      	ldr	r2, [pc, #312]	@ (80019c8 <alarmSetISR+0x184>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d9f8      	bls.n	8001886 <alarmSetISR+0x42>
	for(uint8_t i = 0; i < 3; i++) {
 8001894:	1dfb      	adds	r3, r7, #7
 8001896:	781a      	ldrb	r2, [r3, #0]
 8001898:	1dfb      	adds	r3, r7, #7
 800189a:	3201      	adds	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d9e0      	bls.n	8001868 <alarmSetISR+0x24>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 80018a6:	4b49      	ldr	r3, [pc, #292]	@ (80019cc <alarmSetISR+0x188>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2280      	movs	r2, #128	@ 0x80
 80018ac:	0212      	lsls	r2, r2, #8
 80018ae:	0011      	movs	r1, r2
 80018b0:	0018      	movs	r0, r3
 80018b2:	f001 fa1d 	bl	8002cf0 <HAL_GPIO_ReadPin>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d11f      	bne.n	80018fa <alarmSetISR+0xb6>
		alarmSetMode = true;
 80018ba:	4b45      	ldr	r3, [pc, #276]	@ (80019d0 <alarmSetISR+0x18c>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 80018c0:	4b40      	ldr	r3, [pc, #256]	@ (80019c4 <alarmSetISR+0x180>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f004 fb8f 	bl	8005fe8 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 80018ca:	4b3e      	ldr	r3, [pc, #248]	@ (80019c4 <alarmSetISR+0x180>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2200      	movs	r2, #0
 80018d2:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80018d4:	4b3b      	ldr	r3, [pc, #236]	@ (80019c4 <alarmSetISR+0x180>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0018      	movs	r0, r3
 80018da:	f004 fb39 	bl	8005f50 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80018de:	4b39      	ldr	r3, [pc, #228]	@ (80019c4 <alarmSetISR+0x180>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 80018ea:	1cfb      	adds	r3, r7, #3
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 80018f0:	4b37      	ldr	r3, [pc, #220]	@ (80019d0 <alarmSetISR+0x18c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d059      	beq.n	80019ac <alarmSetISR+0x168>
 80018f8:	e002      	b.n	8001900 <alarmSetISR+0xbc>
		return halRet;
 80018fa:	1c7b      	adds	r3, r7, #1
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	e05a      	b.n	80019b6 <alarmSetISR+0x172>

		bool displayBlink = false;
 8001900:	1cbb      	adds	r3, r7, #2
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 8001906:	4b31      	ldr	r3, [pc, #196]	@ (80019cc <alarmSetISR+0x188>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2280      	movs	r2, #128	@ 0x80
 800190c:	0212      	lsls	r2, r2, #8
 800190e:	0011      	movs	r1, r2
 8001910:	0018      	movs	r0, r3
 8001912:	f001 f9ed 	bl	8002cf0 <HAL_GPIO_ReadPin>
 8001916:	0003      	movs	r3, r0
 8001918:	2b01      	cmp	r3, #1
 800191a:	d102      	bne.n	8001922 <alarmSetISR+0xde>
				alarmSetButtonReset = true;
 800191c:	1cfb      	adds	r3, r7, #3
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 8001922:	f7ff fd9b 	bl	800145c <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8001926:	4b27      	ldr	r3, [pc, #156]	@ (80019c4 <alarmSetISR+0x180>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	1ad2      	subs	r2, r2, r3
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	429a      	cmp	r2, r3
 800193a:	d31b      	bcc.n	8001974 <alarmSetISR+0x130>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 800193c:	1cbb      	adds	r3, r7, #2
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4a24      	ldr	r2, [pc, #144]	@ (80019d4 <alarmSetISR+0x190>)
 8001942:	5cd3      	ldrb	r3, [r2, r3]
 8001944:	0018      	movs	r0, r3
 8001946:	f000 fbe3 	bl	8002110 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 800194a:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <alarmSetISR+0x180>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 8001956:	1cbb      	adds	r3, r7, #2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	1e5a      	subs	r2, r3, #1
 800195c:	4193      	sbcs	r3, r2
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2201      	movs	r2, #1
 8001962:	4053      	eors	r3, r2
 8001964:	b2db      	uxtb	r3, r3
 8001966:	001a      	movs	r2, r3
 8001968:	1cbb      	adds	r3, r7, #2
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	781a      	ldrb	r2, [r3, #0]
 800196e:	2101      	movs	r1, #1
 8001970:	400a      	ands	r2, r1
 8001972:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 8001974:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <alarmSetISR+0x188>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2280      	movs	r2, #128	@ 0x80
 800197a:	0212      	lsls	r2, r2, #8
 800197c:	0011      	movs	r1, r2
 800197e:	0018      	movs	r0, r3
 8001980:	f001 f9b6 	bl	8002cf0 <HAL_GPIO_ReadPin>
 8001984:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 8001986:	d1be      	bne.n	8001906 <alarmSetISR+0xc2>
 8001988:	1cfb      	adds	r3, r7, #3
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	4053      	eors	r3, r2
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1b7      	bne.n	8001906 <alarmSetISR+0xc2>

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 8001996:	235a      	movs	r3, #90	@ 0x5a
 8001998:	0018      	movs	r0, r3
 800199a:	f000 fbb9 	bl	8002110 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <alarmSetISR+0x180>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	0018      	movs	r0, r3
 80019a4:	f004 fb20 	bl	8005fe8 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 80019a8:	f7ff fd36 	bl	8001418 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <alarmSetISR+0x18c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 80019b2:	1c7b      	adds	r3, r7, #1
 80019b4:	781b      	ldrb	r3, [r3, #0]

}
 80019b6:	0018      	movs	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b002      	add	sp, #8
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	20000024 	.word	0x20000024
 80019c4:	20000040 	.word	0x20000040
 80019c8:	0000fffe 	.word	0x0000fffe
 80019cc:	20000004 	.word	0x20000004
 80019d0:	200002c0 	.word	0x200002c0
 80019d4:	08007024 	.word	0x08007024

080019d8 <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 80019de:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <hourSetISR+0x58>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2280      	movs	r2, #128	@ 0x80
 80019e4:	0152      	lsls	r2, r2, #5
 80019e6:	0011      	movs	r1, r2
 80019e8:	0018      	movs	r0, r3
 80019ea:	f001 f9bb 	bl	8002d64 <HAL_GPIO_TogglePin>

	HAL_StatusTypeDef halRet = HAL_OK;
 80019ee:	1dfb      	adds	r3, r7, #7
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 80019f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <hourSetISR+0x5c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <hourSetISR+0x2a>

		alarmHourInc();
 80019fc:	f000 f87e 	bl	8001afc <alarmHourInc>
 8001a00:	e00f      	b.n	8001a22 <hourSetISR+0x4a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 8001a02:	f000 f8ab 	bl	8001b5c <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001a06:	490c      	ldr	r1, [pc, #48]	@ (8001a38 <hourSetISR+0x60>)
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <hourSetISR+0x64>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f003 fb8b 	bl	8005128 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001a12:	f7ff fd01 	bl	8001418 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001a16:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <hourSetISR+0x68>)
 8001a18:	4907      	ldr	r1, [pc, #28]	@ (8001a38 <hourSetISR+0x60>)
 8001a1a:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <hourSetISR+0x64>)
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7ff f817 	bl	8000a50 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	781b      	ldrb	r3, [r3, #0]

}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b002      	add	sp, #8
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	20000024 	.word	0x20000024
 8001a34:	200002c0 	.word	0x200002c0
 8001a38:	2000008c 	.word	0x2000008c
 8001a3c:	2000014c 	.word	0x2000014c
 8001a40:	200000a0 	.word	0x200000a0

08001a44 <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	@ 0x30
 8001a48:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8001a4a:	4b27      	ldr	r3, [pc, #156]	@ (8001ae8 <minuteSetISR+0xa4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2280      	movs	r2, #128	@ 0x80
 8001a50:	0152      	lsls	r2, r2, #5
 8001a52:	0011      	movs	r1, r2
 8001a54:	0018      	movs	r0, r3
 8001a56:	f001 f985 	bl	8002d64 <HAL_GPIO_TogglePin>

	HAL_StatusTypeDef halRet = HAL_OK;
 8001a5a:	232f      	movs	r3, #47	@ 0x2f
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001a62:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <minuteSetISR+0xa8>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <minuteSetISR+0x2c>

		alarmMinuteInc();
 8001a6a:	f000 f8b7 	bl	8001bdc <alarmMinuteInc>
 8001a6e:	e034      	b.n	8001ada <minuteSetISR+0x96>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8001a70:	f000 f8d2 	bl	8001c18 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001a74:	491e      	ldr	r1, [pc, #120]	@ (8001af0 <minuteSetISR+0xac>)
 8001a76:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <minuteSetISR+0xb0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f003 fb54 	bl	8005128 <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	0018      	movs	r0, r3
 8001a84:	2328      	movs	r3, #40	@ 0x28
 8001a86:	001a      	movs	r2, r3
 8001a88:	2100      	movs	r1, #0
 8001a8a:	f005 fa77 	bl	8006f7c <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001a8e:	2380      	movs	r3, #128	@ 0x80
 8001a90:	005a      	lsls	r2, r3, #1
 8001a92:	1d39      	adds	r1, r7, #4
 8001a94:	4817      	ldr	r0, [pc, #92]	@ (8001af4 <minuteSetISR+0xb0>)
 8001a96:	2300      	movs	r3, #0
 8001a98:	f003 fe6a 	bl	8005770 <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	785b      	ldrb	r3, [r3, #1]
 8001aa0:	2b3a      	cmp	r3, #58	@ 0x3a
 8001aa2:	d903      	bls.n	8001aac <minuteSetISR+0x68>
			sAlarm.AlarmTime.Minutes=0;
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	705a      	strb	r2, [r3, #1]
 8001aaa:	e005      	b.n	8001ab8 <minuteSetISR+0x74>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	785b      	ldrb	r3, [r3, #1]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8001ab8:	46c0      	nop			@ (mov r8, r8)
 8001aba:	1d39      	adds	r1, r7, #4
 8001abc:	4b0d      	ldr	r3, [pc, #52]	@ (8001af4 <minuteSetISR+0xb0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f003 fd15 	bl	80054f0 <HAL_RTC_SetAlarm_IT>
 8001ac6:	1e03      	subs	r3, r0, #0
 8001ac8:	d1f7      	bne.n	8001aba <minuteSetISR+0x76>


		updateAndDisplayTime();
 8001aca:	f7ff fca5 	bl	8001418 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <minuteSetISR+0xb4>)
 8001ad0:	4907      	ldr	r1, [pc, #28]	@ (8001af0 <minuteSetISR+0xac>)
 8001ad2:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <minuteSetISR+0xb0>)
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7fe ffbb 	bl	8000a50 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8001ada:	232f      	movs	r3, #47	@ 0x2f
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	781b      	ldrb	r3, [r3, #0]
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b00c      	add	sp, #48	@ 0x30
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000024 	.word	0x20000024
 8001aec:	200002c0 	.word	0x200002c0
 8001af0:	2000008c 	.word	0x2000008c
 8001af4:	2000014c 	.word	0x2000014c
 8001af8:	200000a0 	.word	0x200000a0

08001afc <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001b00:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <alarmHourInc+0x5c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b0b      	cmp	r3, #11
 8001b06:	d903      	bls.n	8001b10 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001b08:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <alarmHourInc+0x5c>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
 8001b0e:	e01e      	b.n	8001b4e <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8001b10:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <alarmHourInc+0x5c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b0b      	cmp	r3, #11
 8001b16:	d10e      	bne.n	8001b36 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001b18:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <alarmHourInc+0x5c>)
 8001b1a:	78db      	ldrb	r3, [r3, #3]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d103      	bne.n	8001b28 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001b20:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <alarmHourInc+0x5c>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	70da      	strb	r2, [r3, #3]
 8001b26:	e002      	b.n	8001b2e <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <alarmHourInc+0x5c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <alarmHourInc+0x5c>)
 8001b30:	220c      	movs	r2, #12
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e00b      	b.n	8001b4e <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 8001b36:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <alarmHourInc+0x5c>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b0a      	cmp	r3, #10
 8001b3c:	d806      	bhi.n	8001b4c <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001b3e:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <alarmHourInc+0x5c>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	3301      	adds	r3, #1
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <alarmHourInc+0x5c>)
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	e000      	b.n	8001b4e <alarmHourInc+0x52>
	}
	else {
		__NOP();
 8001b4c:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001b4e:	f000 f8e1 	bl	8001d14 <updateRTCBackupReg>

}
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200000a4 	.word	0x200000a4

08001b5c <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001b60:	4a1a      	ldr	r2, [pc, #104]	@ (8001bcc <currHourInc+0x70>)
 8001b62:	491b      	ldr	r1, [pc, #108]	@ (8001bd0 <currHourInc+0x74>)
 8001b64:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <currHourInc+0x78>)
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7fe ff72 	bl	8000a50 <getRTCTime>

	if(currTime.Hours >= 12) {
 8001b6c:	4b18      	ldr	r3, [pc, #96]	@ (8001bd0 <currHourInc+0x74>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b0b      	cmp	r3, #11
 8001b72:	d903      	bls.n	8001b7c <currHourInc+0x20>
		currTime.Hours = 1;
 8001b74:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <currHourInc+0x74>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	e01e      	b.n	8001bba <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8001b7c:	4b14      	ldr	r3, [pc, #80]	@ (8001bd0 <currHourInc+0x74>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b0b      	cmp	r3, #11
 8001b82:	d10e      	bne.n	8001ba2 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001b84:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <currHourInc+0x74>)
 8001b86:	78db      	ldrb	r3, [r3, #3]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d103      	bne.n	8001b94 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001b8c:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <currHourInc+0x74>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	70da      	strb	r2, [r3, #3]
 8001b92:	e002      	b.n	8001b9a <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001b94:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <currHourInc+0x74>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd0 <currHourInc+0x74>)
 8001b9c:	220c      	movs	r2, #12
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	e00b      	b.n	8001bba <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd8 <currHourInc+0x7c>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b0a      	cmp	r3, #10
 8001ba8:	d806      	bhi.n	8001bb8 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8001baa:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <currHourInc+0x74>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <currHourInc+0x74>)
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	e000      	b.n	8001bba <currHourInc+0x5e>
	}
	else {
		__NOP();
 8001bb8:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001bba:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <currHourInc+0x74>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <currHourInc+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]

}
 8001bc6:	46c0      	nop			@ (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200000a0 	.word	0x200000a0
 8001bd0:	2000008c 	.word	0x2000008c
 8001bd4:	2000014c 	.word	0x2000014c
 8001bd8:	200000a4 	.word	0x200000a4

08001bdc <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001be0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <alarmMinuteInc+0x38>)
 8001be2:	785b      	ldrb	r3, [r3, #1]
 8001be4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001be6:	d903      	bls.n	8001bf0 <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 8001be8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <alarmMinuteInc+0x38>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	705a      	strb	r2, [r3, #1]
 8001bee:	e00b      	b.n	8001c08 <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 8001bf0:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <alarmMinuteInc+0x38>)
 8001bf2:	785b      	ldrb	r3, [r3, #1]
 8001bf4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001bf6:	d806      	bhi.n	8001c06 <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <alarmMinuteInc+0x38>)
 8001bfa:	785b      	ldrb	r3, [r3, #1]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <alarmMinuteInc+0x38>)
 8001c02:	705a      	strb	r2, [r3, #1]
 8001c04:	e000      	b.n	8001c08 <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 8001c06:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001c08:	f000 f884 	bl	8001d14 <updateRTCBackupReg>

}
 8001c0c:	46c0      	nop			@ (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			@ (mov r8, r8)
 8001c14:	200000a4 	.word	0x200000a4

08001c18 <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001c1c:	4a11      	ldr	r2, [pc, #68]	@ (8001c64 <currMinuteInc+0x4c>)
 8001c1e:	4912      	ldr	r1, [pc, #72]	@ (8001c68 <currMinuteInc+0x50>)
 8001c20:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <currMinuteInc+0x54>)
 8001c22:	0018      	movs	r0, r3
 8001c24:	f7fe ff14 	bl	8000a50 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8001c28:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <currMinuteInc+0x50>)
 8001c2a:	785b      	ldrb	r3, [r3, #1]
 8001c2c:	2b3a      	cmp	r3, #58	@ 0x3a
 8001c2e:	d903      	bls.n	8001c38 <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8001c30:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <currMinuteInc+0x50>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	705a      	strb	r2, [r3, #1]
 8001c36:	e00b      	b.n	8001c50 <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8001c38:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <currMinuteInc+0x50>)
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	2b3a      	cmp	r3, #58	@ 0x3a
 8001c3e:	d806      	bhi.n	8001c4e <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8001c40:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <currMinuteInc+0x50>)
 8001c42:	785b      	ldrb	r3, [r3, #1]
 8001c44:	3301      	adds	r3, #1
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <currMinuteInc+0x50>)
 8001c4a:	705a      	strb	r2, [r3, #1]
 8001c4c:	e000      	b.n	8001c50 <currMinuteInc+0x38>
	}
	else {
		__NOP();
 8001c4e:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <currMinuteInc+0x50>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001c56:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <currMinuteInc+0x50>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]

}
 8001c5c:	46c0      	nop			@ (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	200000a0 	.word	0x200000a0
 8001c68:	2000008c 	.word	0x2000008c
 8001c6c:	2000014c 	.word	0x2000014c

08001c70 <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 8001c74:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <dispFault+0x1c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2280      	movs	r2, #128	@ 0x80
 8001c7a:	0151      	lsls	r1, r2, #5
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f001 f853 	bl	8002d2a <HAL_GPIO_WritePin>
}
 8001c84:	46c0      	nop			@ (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			@ (mov r8, r8)
 8001c8c:	20000024 	.word	0x20000024

08001c90 <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001c96:	4b1c      	ldr	r3, [pc, #112]	@ (8001d08 <dispFailure+0x78>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f004 f9a4 	bl	8005fe8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001ca0:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <dispFailure+0x78>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f004 f953 	bl	8005f50 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <dispFailure+0x78>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001cb4:	1cfb      	adds	r3, r7, #3
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001cba:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <dispFailure+0x78>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	4a11      	ldr	r2, [pc, #68]	@ (8001d0c <dispFailure+0x7c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d9f6      	bls.n	8001cba <dispFailure+0x2a>

			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8001ccc:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <dispFailure+0x80>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2280      	movs	r2, #128	@ 0x80
 8001cd2:	0152      	lsls	r2, r2, #5
 8001cd4:	0011      	movs	r1, r2
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f001 f844 	bl	8002d64 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <dispFailure+0x78>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001ce6:	1cfb      	adds	r3, r7, #3
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	1e5a      	subs	r2, r3, #1
 8001cec:	4193      	sbcs	r3, r2
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4053      	eors	r3, r2
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	001a      	movs	r2, r3
 8001cf8:	1cfb      	adds	r3, r7, #3
 8001cfa:	701a      	strb	r2, [r3, #0]
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	2101      	movs	r1, #1
 8001d00:	400a      	ands	r2, r1
 8001d02:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001d04:	e7d9      	b.n	8001cba <dispFailure+0x2a>
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	20000040 	.word	0x20000040
 8001d0c:	00003ffe 	.word	0x00003ffe
 8001d10:	20000024 	.word	0x20000024

08001d14 <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8001d18:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <updateRTCBackupReg+0x40>)
 8001d1a:	6819      	ldr	r1, [r3, #0]
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <updateRTCBackupReg+0x44>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	001a      	movs	r2, r3
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <updateRTCBackupReg+0x48>)
 8001d24:	0018      	movs	r0, r3
 8001d26:	f003 ffcb 	bl	8005cc0 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d60 <updateRTCBackupReg+0x4c>)
 8001d2c:	6819      	ldr	r1, [r3, #0]
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <updateRTCBackupReg+0x44>)
 8001d30:	785b      	ldrb	r3, [r3, #1]
 8001d32:	001a      	movs	r2, r3
 8001d34:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <updateRTCBackupReg+0x48>)
 8001d36:	0018      	movs	r0, r3
 8001d38:	f003 ffc2 	bl	8005cc0 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8001d3c:	4b09      	ldr	r3, [pc, #36]	@ (8001d64 <updateRTCBackupReg+0x50>)
 8001d3e:	6819      	ldr	r1, [r3, #0]
 8001d40:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <updateRTCBackupReg+0x44>)
 8001d42:	78db      	ldrb	r3, [r3, #3]
 8001d44:	001a      	movs	r2, r3
 8001d46:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <updateRTCBackupReg+0x48>)
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f003 ffb9 	bl	8005cc0 <HAL_RTCEx_BKUPWrite>

}
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200000b8 	.word	0x200000b8
 8001d58:	200000a4 	.word	0x200000a4
 8001d5c:	2000014c 	.word	0x2000014c
 8001d60:	20000030 	.word	0x20000030
 8001d64:	20000034 	.word	0x20000034

08001d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d6c:	b672      	cpsid	i
}
 8001d6e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d70:	46c0      	nop			@ (mov r8, r8)
 8001d72:	e7fd      	b.n	8001d70 <Error_Handler+0x8>

08001d74 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8001d74:	b5b0      	push	{r4, r5, r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	0005      	movs	r5, r0
 8001d7c:	000c      	movs	r4, r1
 8001d7e:	0010      	movs	r0, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	1dbb      	adds	r3, r7, #6
 8001d84:	1c2a      	adds	r2, r5, #0
 8001d86:	801a      	strh	r2, [r3, #0]
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	1c22      	adds	r2, r4, #0
 8001d8c:	801a      	strh	r2, [r3, #0]
 8001d8e:	1cbb      	adds	r3, r7, #2
 8001d90:	1c02      	adds	r2, r0, #0
 8001d92:	801a      	strh	r2, [r3, #0]
 8001d94:	003b      	movs	r3, r7
 8001d96:	1c0a      	adds	r2, r1, #0
 8001d98:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f8c <sevSeg_Init+0x218>)
 8001d9c:	1dba      	adds	r2, r7, #6
 8001d9e:	8812      	ldrh	r2, [r2, #0]
 8001da0:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001da2:	4b7b      	ldr	r3, [pc, #492]	@ (8001f90 <sevSeg_Init+0x21c>)
 8001da4:	1d3a      	adds	r2, r7, #4
 8001da6:	8812      	ldrh	r2, [r2, #0]
 8001da8:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001daa:	4b7a      	ldr	r3, [pc, #488]	@ (8001f94 <sevSeg_Init+0x220>)
 8001dac:	1cba      	adds	r2, r7, #2
 8001dae:	8812      	ldrh	r2, [r2, #0]
 8001db0:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001db2:	4b79      	ldr	r3, [pc, #484]	@ (8001f98 <sevSeg_Init+0x224>)
 8001db4:	003a      	movs	r2, r7
 8001db6:	8812      	ldrh	r2, [r2, #0]
 8001db8:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001dba:	4a78      	ldr	r2, [pc, #480]	@ (8001f9c <sevSeg_Init+0x228>)
 8001dbc:	2330      	movs	r3, #48	@ 0x30
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8001dc4:	4a76      	ldr	r2, [pc, #472]	@ (8001fa0 <sevSeg_Init+0x22c>)
 8001dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dc8:	0010      	movs	r0, r2
 8001dca:	0019      	movs	r1, r3
 8001dcc:	234c      	movs	r3, #76	@ 0x4c
 8001dce:	001a      	movs	r2, r3
 8001dd0:	f005 f900 	bl	8006fd4 <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8001dd4:	4b73      	ldr	r3, [pc, #460]	@ (8001fa4 <sevSeg_Init+0x230>)
 8001dd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001dd8:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	e00b      	b.n	8001df8 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001de6:	18d3      	adds	r3, r2, r3
 8001de8:	6819      	ldr	r1, [r3, #0]
 8001dea:	4b6f      	ldr	r3, [pc, #444]	@ (8001fa8 <sevSeg_Init+0x234>)
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	0092      	lsls	r2, r2, #2
 8001df0:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	ddf0      	ble.n	8001de0 <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001dfe:	4b6a      	ldr	r3, [pc, #424]	@ (8001fa8 <sevSeg_Init+0x234>)
 8001e00:	6918      	ldr	r0, [r3, #16]
 8001e02:	4b66      	ldr	r3, [pc, #408]	@ (8001f9c <sevSeg_Init+0x228>)
 8001e04:	8819      	ldrh	r1, [r3, #0]
 8001e06:	4b69      	ldr	r3, [pc, #420]	@ (8001fac <sevSeg_Init+0x238>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	001a      	movs	r2, r3
 8001e0c:	f000 ff8d 	bl	8002d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001e10:	4b65      	ldr	r3, [pc, #404]	@ (8001fa8 <sevSeg_Init+0x234>)
 8001e12:	6918      	ldr	r0, [r3, #16]
 8001e14:	4b61      	ldr	r3, [pc, #388]	@ (8001f9c <sevSeg_Init+0x228>)
 8001e16:	8819      	ldrh	r1, [r3, #0]
 8001e18:	4b64      	ldr	r3, [pc, #400]	@ (8001fac <sevSeg_Init+0x238>)
 8001e1a:	785b      	ldrb	r3, [r3, #1]
 8001e1c:	001a      	movs	r2, r3
 8001e1e:	f000 ff84 	bl	8002d2a <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001e22:	4b61      	ldr	r3, [pc, #388]	@ (8001fa8 <sevSeg_Init+0x234>)
 8001e24:	6898      	ldr	r0, [r3, #8]
 8001e26:	4b5b      	ldr	r3, [pc, #364]	@ (8001f94 <sevSeg_Init+0x220>)
 8001e28:	8819      	ldrh	r1, [r3, #0]
 8001e2a:	4b60      	ldr	r3, [pc, #384]	@ (8001fac <sevSeg_Init+0x238>)
 8001e2c:	785b      	ldrb	r3, [r3, #1]
 8001e2e:	001a      	movs	r2, r3
 8001e30:	f000 ff7b 	bl	8002d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001e34:	4b5c      	ldr	r3, [pc, #368]	@ (8001fa8 <sevSeg_Init+0x234>)
 8001e36:	6898      	ldr	r0, [r3, #8]
 8001e38:	4b56      	ldr	r3, [pc, #344]	@ (8001f94 <sevSeg_Init+0x220>)
 8001e3a:	8819      	ldrh	r1, [r3, #0]
 8001e3c:	4b5b      	ldr	r3, [pc, #364]	@ (8001fac <sevSeg_Init+0x238>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	001a      	movs	r2, r3
 8001e42:	f000 ff72 	bl	8002d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001e46:	4b58      	ldr	r3, [pc, #352]	@ (8001fa8 <sevSeg_Init+0x234>)
 8001e48:	68d8      	ldr	r0, [r3, #12]
 8001e4a:	4b53      	ldr	r3, [pc, #332]	@ (8001f98 <sevSeg_Init+0x224>)
 8001e4c:	8819      	ldrh	r1, [r3, #0]
 8001e4e:	4b57      	ldr	r3, [pc, #348]	@ (8001fac <sevSeg_Init+0x238>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	001a      	movs	r2, r3
 8001e54:	f000 ff69 	bl	8002d2a <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8001e58:	2032      	movs	r0, #50	@ 0x32
 8001e5a:	f000 f959 	bl	8002110 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001e5e:	2308      	movs	r3, #8
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	4a53      	ldr	r2, [pc, #332]	@ (8001fb0 <sevSeg_Init+0x23c>)
 8001e64:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e038      	b.n	8001ede <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8001e6c:	231b      	movs	r3, #27
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	2208      	movs	r2, #8
 8001e72:	18b9      	adds	r1, r7, r2
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	188a      	adds	r2, r1, r2
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e027      	b.n	8001ed2 <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001e82:	4b49      	ldr	r3, [pc, #292]	@ (8001fa8 <sevSeg_Init+0x234>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	4b41      	ldr	r3, [pc, #260]	@ (8001f8c <sevSeg_Init+0x218>)
 8001e88:	8819      	ldrh	r1, [r3, #0]
 8001e8a:	241b      	movs	r4, #27
 8001e8c:	193b      	adds	r3, r7, r4
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2201      	movs	r2, #1
 8001e92:	4013      	ands	r3, r2
 8001e94:	4a45      	ldr	r2, [pc, #276]	@ (8001fac <sevSeg_Init+0x238>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	001a      	movs	r2, r3
 8001e9a:	f000 ff46 	bl	8002d2a <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001e9e:	4b42      	ldr	r3, [pc, #264]	@ (8001fa8 <sevSeg_Init+0x234>)
 8001ea0:	6858      	ldr	r0, [r3, #4]
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8001f90 <sevSeg_Init+0x21c>)
 8001ea4:	8819      	ldrh	r1, [r3, #0]
 8001ea6:	4b41      	ldr	r3, [pc, #260]	@ (8001fac <sevSeg_Init+0x238>)
 8001ea8:	785b      	ldrb	r3, [r3, #1]
 8001eaa:	001a      	movs	r2, r3
 8001eac:	f000 ff3d 	bl	8002d2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001eb0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa8 <sevSeg_Init+0x234>)
 8001eb2:	6858      	ldr	r0, [r3, #4]
 8001eb4:	4b36      	ldr	r3, [pc, #216]	@ (8001f90 <sevSeg_Init+0x21c>)
 8001eb6:	8819      	ldrh	r1, [r3, #0]
 8001eb8:	4b3c      	ldr	r3, [pc, #240]	@ (8001fac <sevSeg_Init+0x238>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	f000 ff34 	bl	8002d2a <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8001ec2:	193b      	adds	r3, r7, r4
 8001ec4:	193a      	adds	r2, r7, r4
 8001ec6:	7812      	ldrb	r2, [r2, #0]
 8001ec8:	0852      	lsrs	r2, r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b07      	cmp	r3, #7
 8001ed6:	ddd4      	ble.n	8001e82 <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	ddc3      	ble.n	8001e6c <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001ee4:	4b30      	ldr	r3, [pc, #192]	@ (8001fa8 <sevSeg_Init+0x234>)
 8001ee6:	6898      	ldr	r0, [r3, #8]
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f94 <sevSeg_Init+0x220>)
 8001eea:	8819      	ldrh	r1, [r3, #0]
 8001eec:	4b2f      	ldr	r3, [pc, #188]	@ (8001fac <sevSeg_Init+0x238>)
 8001eee:	785b      	ldrb	r3, [r3, #1]
 8001ef0:	001a      	movs	r2, r3
 8001ef2:	f000 ff1a 	bl	8002d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa8 <sevSeg_Init+0x234>)
 8001ef8:	6898      	ldr	r0, [r3, #8]
 8001efa:	4b26      	ldr	r3, [pc, #152]	@ (8001f94 <sevSeg_Init+0x220>)
 8001efc:	8819      	ldrh	r1, [r3, #0]
 8001efe:	4b2b      	ldr	r3, [pc, #172]	@ (8001fac <sevSeg_Init+0x238>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	001a      	movs	r2, r3
 8001f04:	f000 ff11 	bl	8002d2a <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8001f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f004 f86c 	bl	8005fe8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8001f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f12:	0018      	movs	r0, r3
 8001f14:	f004 f81c 	bl	8005f50 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8001f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8001f20:	46c0      	nop			@ (mov r8, r8)
 8001f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad2      	subs	r2, r2, r3
 8001f2c:	2380      	movs	r3, #128	@ 0x80
 8001f2e:	01db      	lsls	r3, r3, #7
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d3f6      	bcc.n	8001f22 <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8001f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f36:	0018      	movs	r0, r3
 8001f38:	f004 f856 	bl	8005fe8 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <sevSeg_Init+0x234>)
 8001f3e:	6918      	ldr	r0, [r3, #16]
 8001f40:	4b16      	ldr	r3, [pc, #88]	@ (8001f9c <sevSeg_Init+0x228>)
 8001f42:	8819      	ldrh	r1, [r3, #0]
 8001f44:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <sevSeg_Init+0x238>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	001a      	movs	r2, r3
 8001f4a:	f000 feee 	bl	8002d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001f4e:	4b16      	ldr	r3, [pc, #88]	@ (8001fa8 <sevSeg_Init+0x234>)
 8001f50:	6918      	ldr	r0, [r3, #16]
 8001f52:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <sevSeg_Init+0x228>)
 8001f54:	8819      	ldrh	r1, [r3, #0]
 8001f56:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <sevSeg_Init+0x238>)
 8001f58:	785b      	ldrb	r3, [r3, #1]
 8001f5a:	001a      	movs	r2, r3
 8001f5c:	f000 fee5 	bl	8002d2a <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001f60:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <sevSeg_Init+0x234>)
 8001f62:	6898      	ldr	r0, [r3, #8]
 8001f64:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <sevSeg_Init+0x220>)
 8001f66:	8819      	ldrh	r1, [r3, #0]
 8001f68:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <sevSeg_Init+0x238>)
 8001f6a:	785b      	ldrb	r3, [r3, #1]
 8001f6c:	001a      	movs	r2, r3
 8001f6e:	f000 fedc 	bl	8002d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001f72:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <sevSeg_Init+0x234>)
 8001f74:	6898      	ldr	r0, [r3, #8]
 8001f76:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <sevSeg_Init+0x220>)
 8001f78:	8819      	ldrh	r1, [r3, #0]
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <sevSeg_Init+0x238>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	001a      	movs	r2, r3
 8001f80:	f000 fed3 	bl	8002d2a <HAL_GPIO_WritePin>

}
 8001f84:	46c0      	nop			@ (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b008      	add	sp, #32
 8001f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f8c:	200002d8 	.word	0x200002d8
 8001f90:	200002da 	.word	0x200002da
 8001f94:	200002dc 	.word	0x200002dc
 8001f98:	200002de 	.word	0x200002de
 8001f9c:	200002e0 	.word	0x200002e0
 8001fa0:	200002e4 	.word	0x200002e4
 8001fa4:	20000330 	.word	0x20000330
 8001fa8:	20000048 	.word	0x20000048
 8001fac:	2000005c 	.word	0x2000005c
 8001fb0:	471d3700 	.word	0x471d3700

08001fb4 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime, uint8_t userAlarmEnable) {
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	000a      	movs	r2, r1
 8001fbe:	1cfb      	adds	r3, r7, #3
 8001fc0:	701a      	strb	r2, [r3, #0]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	210a      	movs	r1, #10
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7fe f89b 	bl	8000104 <__udivsi3>
 8001fce:	0003      	movs	r3, r0
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	2408      	movs	r4, #8
 8001fd4:	193b      	adds	r3, r7, r4
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	210a      	movs	r1, #10
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f7fe f916 	bl	8000210 <__aeabi_uidivmod>
 8001fe4:	000b      	movs	r3, r1
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	193b      	adds	r3, r7, r4
 8001fea:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8001ff0:	210a      	movs	r1, #10
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7fe f886 	bl	8000104 <__udivsi3>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	193b      	adds	r3, r7, r4
 8001ffe:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002004:	210a      	movs	r1, #10
 8002006:	0018      	movs	r0, r3
 8002008:	f7fe f902 	bl	8000210 <__aeabi_uidivmod>
 800200c:	000b      	movs	r3, r1
 800200e:	b2da      	uxtb	r2, r3
 8002010:	193b      	adds	r3, r7, r4
 8002012:	70da      	strb	r2, [r3, #3]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 3; i >= 0; i--) {
 8002014:	2303      	movs	r3, #3
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	e054      	b.n	80020c4 <sevSeg_updateDigits+0x110>

		sendByte = dispDigits[sendTime[i]];
 800201a:	2308      	movs	r3, #8
 800201c:	18fa      	adds	r2, r7, r3
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	18d3      	adds	r3, r2, r3
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	0019      	movs	r1, r3
 8002026:	2017      	movs	r0, #23
 8002028:	183b      	adds	r3, r7, r0
 800202a:	4a33      	ldr	r2, [pc, #204]	@ (80020f8 <sevSeg_updateDigits+0x144>)
 800202c:	5c52      	ldrb	r2, [r2, r1]
 800202e:	701a      	strb	r2, [r3, #0]

		// If tenth's place of hour, set decimal point based on AM/PM.
		if((i == 0) && (updateTime->TimeFormat == RTC_HOURFORMAT12_PM)) {
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d107      	bne.n	8002046 <sevSeg_updateDigits+0x92>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	78db      	ldrb	r3, [r3, #3]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d103      	bne.n	8002046 <sevSeg_updateDigits+0x92>
			sendByte = (sendByte & !(1 << 1));
 800203e:	183b      	adds	r3, r7, r0
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
 8002044:	e00d      	b.n	8002062 <sevSeg_updateDigits+0xae>
		}
		// If tenth's place of minute, set decimal place based on user alarm enabled
		else if((i == 2) && userAlarmEnable) {
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d10a      	bne.n	8002062 <sevSeg_updateDigits+0xae>
 800204c:	1cfb      	adds	r3, r7, #3
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <sevSeg_updateDigits+0xae>
			sendByte = (sendByte & 0b11111101);
 8002054:	2217      	movs	r2, #23
 8002056:	18bb      	adds	r3, r7, r2
 8002058:	18ba      	adds	r2, r7, r2
 800205a:	7812      	ldrb	r2, [r2, #0]
 800205c:	2102      	movs	r1, #2
 800205e:	438a      	bics	r2, r1
 8002060:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	e027      	b.n	80020b8 <sevSeg_updateDigits+0x104>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[(sendByte & 1)]);
 8002068:	4b24      	ldr	r3, [pc, #144]	@ (80020fc <sevSeg_updateDigits+0x148>)
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	4b24      	ldr	r3, [pc, #144]	@ (8002100 <sevSeg_updateDigits+0x14c>)
 800206e:	8819      	ldrh	r1, [r3, #0]
 8002070:	2417      	movs	r4, #23
 8002072:	193b      	adds	r3, r7, r4
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2201      	movs	r2, #1
 8002078:	4013      	ands	r3, r2
 800207a:	4a22      	ldr	r2, [pc, #136]	@ (8002104 <sevSeg_updateDigits+0x150>)
 800207c:	5cd3      	ldrb	r3, [r2, r3]
 800207e:	001a      	movs	r2, r3
 8002080:	f000 fe53 	bl	8002d2a <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8002084:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <sevSeg_updateDigits+0x148>)
 8002086:	6858      	ldr	r0, [r3, #4]
 8002088:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <sevSeg_updateDigits+0x154>)
 800208a:	8819      	ldrh	r1, [r3, #0]
 800208c:	4b1d      	ldr	r3, [pc, #116]	@ (8002104 <sevSeg_updateDigits+0x150>)
 800208e:	785b      	ldrb	r3, [r3, #1]
 8002090:	001a      	movs	r2, r3
 8002092:	f000 fe4a 	bl	8002d2a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002096:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <sevSeg_updateDigits+0x148>)
 8002098:	6858      	ldr	r0, [r3, #4]
 800209a:	4b1b      	ldr	r3, [pc, #108]	@ (8002108 <sevSeg_updateDigits+0x154>)
 800209c:	8819      	ldrh	r1, [r3, #0]
 800209e:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <sevSeg_updateDigits+0x150>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	001a      	movs	r2, r3
 80020a4:	f000 fe41 	bl	8002d2a <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 80020a8:	193b      	adds	r3, r7, r4
 80020aa:	193a      	adds	r2, r7, r4
 80020ac:	7812      	ldrb	r2, [r2, #0]
 80020ae:	0852      	lsrs	r2, r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3301      	adds	r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b07      	cmp	r3, #7
 80020bc:	ddd4      	ble.n	8002068 <sevSeg_updateDigits+0xb4>
	for(int i = 3; i >= 0; i--) {
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	daa7      	bge.n	800201a <sevSeg_updateDigits+0x66>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80020ca:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <sevSeg_updateDigits+0x148>)
 80020cc:	6898      	ldr	r0, [r3, #8]
 80020ce:	4b0f      	ldr	r3, [pc, #60]	@ (800210c <sevSeg_updateDigits+0x158>)
 80020d0:	8819      	ldrh	r1, [r3, #0]
 80020d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <sevSeg_updateDigits+0x150>)
 80020d4:	785b      	ldrb	r3, [r3, #1]
 80020d6:	001a      	movs	r2, r3
 80020d8:	f000 fe27 	bl	8002d2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80020dc:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <sevSeg_updateDigits+0x148>)
 80020de:	6898      	ldr	r0, [r3, #8]
 80020e0:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <sevSeg_updateDigits+0x158>)
 80020e2:	8819      	ldrh	r1, [r3, #0]
 80020e4:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <sevSeg_updateDigits+0x150>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	001a      	movs	r2, r3
 80020ea:	f000 fe1e 	bl	8002d2a <HAL_GPIO_WritePin>

	return;
 80020ee:	46c0      	nop			@ (mov r8, r8)

}
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b007      	add	sp, #28
 80020f4:	bd90      	pop	{r4, r7, pc}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	08007028 	.word	0x08007028
 80020fc:	20000048 	.word	0x20000048
 8002100:	200002d8 	.word	0x200002d8
 8002104:	2000005c 	.word	0x2000005c
 8002108:	200002da 	.word	0x200002da
 800210c:	200002dc 	.word	0x200002dc

08002110 <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	0002      	movs	r2, r0
 8002118:	1dbb      	adds	r3, r7, #6
 800211a:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 800211c:	4b20      	ldr	r3, [pc, #128]	@ (80021a0 <sevSeg_setIntensity+0x90>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <sevSeg_setIntensity+0x20>
 8002124:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <sevSeg_setIntensity+0x94>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	1dba      	adds	r2, r7, #6
 800212a:	8812      	ldrh	r2, [r2, #0]
 800212c:	635a      	str	r2, [r3, #52]	@ 0x34
 800212e:	e02c      	b.n	800218a <sevSeg_setIntensity+0x7a>
 8002130:	4b1b      	ldr	r3, [pc, #108]	@ (80021a0 <sevSeg_setIntensity+0x90>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b04      	cmp	r3, #4
 8002136:	d105      	bne.n	8002144 <sevSeg_setIntensity+0x34>
 8002138:	4b1a      	ldr	r3, [pc, #104]	@ (80021a4 <sevSeg_setIntensity+0x94>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	1dbb      	adds	r3, r7, #6
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	6393      	str	r3, [r2, #56]	@ 0x38
 8002142:	e022      	b.n	800218a <sevSeg_setIntensity+0x7a>
 8002144:	4b16      	ldr	r3, [pc, #88]	@ (80021a0 <sevSeg_setIntensity+0x90>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b08      	cmp	r3, #8
 800214a:	d105      	bne.n	8002158 <sevSeg_setIntensity+0x48>
 800214c:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <sevSeg_setIntensity+0x94>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	1dbb      	adds	r3, r7, #6
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002156:	e018      	b.n	800218a <sevSeg_setIntensity+0x7a>
 8002158:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <sevSeg_setIntensity+0x90>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	d105      	bne.n	800216c <sevSeg_setIntensity+0x5c>
 8002160:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <sevSeg_setIntensity+0x94>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	1dbb      	adds	r3, r7, #6
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	6413      	str	r3, [r2, #64]	@ 0x40
 800216a:	e00e      	b.n	800218a <sevSeg_setIntensity+0x7a>
 800216c:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <sevSeg_setIntensity+0x90>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b10      	cmp	r3, #16
 8002172:	d105      	bne.n	8002180 <sevSeg_setIntensity+0x70>
 8002174:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <sevSeg_setIntensity+0x94>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	1dbb      	adds	r3, r7, #6
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	6593      	str	r3, [r2, #88]	@ 0x58
 800217e:	e004      	b.n	800218a <sevSeg_setIntensity+0x7a>
 8002180:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <sevSeg_setIntensity+0x94>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	1dbb      	adds	r3, r7, #6
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 800218a:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <sevSeg_setIntensity+0x90>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <sevSeg_setIntensity+0x94>)
 8002190:	0011      	movs	r1, r2
 8002192:	0018      	movs	r0, r3
 8002194:	f004 f828 	bl	80061e8 <HAL_TIM_PWM_Start>

}
 8002198:	46c0      	nop			@ (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	b002      	add	sp, #8
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000330 	.word	0x20000330
 80021a4:	200002e4 	.word	0x200002e4

080021a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <HAL_MspInit+0x54>)
 80021b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021b2:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <HAL_MspInit+0x54>)
 80021b4:	2101      	movs	r1, #1
 80021b6:	430a      	orrs	r2, r1
 80021b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <HAL_MspInit+0x54>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	2201      	movs	r2, #1
 80021c0:	4013      	ands	r3, r2
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	4b0d      	ldr	r3, [pc, #52]	@ (80021fc <HAL_MspInit+0x54>)
 80021c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021ca:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <HAL_MspInit+0x54>)
 80021cc:	2180      	movs	r1, #128	@ 0x80
 80021ce:	0549      	lsls	r1, r1, #21
 80021d0:	430a      	orrs	r2, r1
 80021d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021d4:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <HAL_MspInit+0x54>)
 80021d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021d8:	2380      	movs	r3, #128	@ 0x80
 80021da:	055b      	lsls	r3, r3, #21
 80021dc:	4013      	ands	r3, r2
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	2004      	movs	r0, #4
 80021e8:	f000 fbec 	bl	80029c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80021ec:	2004      	movs	r0, #4
 80021ee:	f000 fbfe 	bl	80029ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f2:	46c0      	nop			@ (mov r8, r8)
 80021f4:	46bd      	mov	sp, r7
 80021f6:	b002      	add	sp, #8
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	46c0      	nop			@ (mov r8, r8)
 80021fc:	40021000 	.word	0x40021000

08002200 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b095      	sub	sp, #84	@ 0x54
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	233c      	movs	r3, #60	@ 0x3c
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	0018      	movs	r0, r3
 800220e:	2314      	movs	r3, #20
 8002210:	001a      	movs	r2, r3
 8002212:	2100      	movs	r1, #0
 8002214:	f004 feb2 	bl	8006f7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002218:	2414      	movs	r4, #20
 800221a:	193b      	adds	r3, r7, r4
 800221c:	0018      	movs	r0, r3
 800221e:	2328      	movs	r3, #40	@ 0x28
 8002220:	001a      	movs	r2, r3
 8002222:	2100      	movs	r1, #0
 8002224:	f004 feaa 	bl	8006f7c <memset>
  if(hi2c->Instance==I2C1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a22      	ldr	r2, [pc, #136]	@ (80022b8 <HAL_I2C_MspInit+0xb8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d13d      	bne.n	80022ae <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002232:	193b      	adds	r3, r7, r4
 8002234:	2220      	movs	r2, #32
 8002236:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002238:	193b      	adds	r3, r7, r4
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800223e:	193b      	adds	r3, r7, r4
 8002240:	0018      	movs	r0, r3
 8002242:	f002 fa45 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 8002246:	1e03      	subs	r3, r0, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800224a:	f7ff fd8d 	bl	8001d68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <HAL_I2C_MspInit+0xbc>)
 8002250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002252:	4b1a      	ldr	r3, [pc, #104]	@ (80022bc <HAL_I2C_MspInit+0xbc>)
 8002254:	2102      	movs	r1, #2
 8002256:	430a      	orrs	r2, r1
 8002258:	635a      	str	r2, [r3, #52]	@ 0x34
 800225a:	4b18      	ldr	r3, [pc, #96]	@ (80022bc <HAL_I2C_MspInit+0xbc>)
 800225c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800225e:	2202      	movs	r2, #2
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002266:	213c      	movs	r1, #60	@ 0x3c
 8002268:	187b      	adds	r3, r7, r1
 800226a:	22c0      	movs	r2, #192	@ 0xc0
 800226c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800226e:	187b      	adds	r3, r7, r1
 8002270:	2212      	movs	r2, #18
 8002272:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	187b      	adds	r3, r7, r1
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	187b      	adds	r3, r7, r1
 800227c:	2200      	movs	r2, #0
 800227e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002280:	187b      	adds	r3, r7, r1
 8002282:	2206      	movs	r2, #6
 8002284:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002286:	187b      	adds	r3, r7, r1
 8002288:	4a0d      	ldr	r2, [pc, #52]	@ (80022c0 <HAL_I2C_MspInit+0xc0>)
 800228a:	0019      	movs	r1, r3
 800228c:	0010      	movs	r0, r2
 800228e:	f000 fbcb 	bl	8002a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002292:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <HAL_I2C_MspInit+0xbc>)
 8002294:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <HAL_I2C_MspInit+0xbc>)
 8002298:	2180      	movs	r1, #128	@ 0x80
 800229a:	0389      	lsls	r1, r1, #14
 800229c:	430a      	orrs	r2, r1
 800229e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80022a0:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_I2C_MspInit+0xbc>)
 80022a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022a4:	2380      	movs	r3, #128	@ 0x80
 80022a6:	039b      	lsls	r3, r3, #14
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	46bd      	mov	sp, r7
 80022b2:	b015      	add	sp, #84	@ 0x54
 80022b4:	bd90      	pop	{r4, r7, pc}
 80022b6:	46c0      	nop			@ (mov r8, r8)
 80022b8:	40005400 	.word	0x40005400
 80022bc:	40021000 	.word	0x40021000
 80022c0:	50000400 	.word	0x50000400

080022c4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b095      	sub	sp, #84	@ 0x54
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	233c      	movs	r3, #60	@ 0x3c
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	0018      	movs	r0, r3
 80022d2:	2314      	movs	r3, #20
 80022d4:	001a      	movs	r2, r3
 80022d6:	2100      	movs	r1, #0
 80022d8:	f004 fe50 	bl	8006f7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022dc:	2414      	movs	r4, #20
 80022de:	193b      	adds	r3, r7, r4
 80022e0:	0018      	movs	r0, r3
 80022e2:	2328      	movs	r3, #40	@ 0x28
 80022e4:	001a      	movs	r2, r3
 80022e6:	2100      	movs	r1, #0
 80022e8:	f004 fe48 	bl	8006f7c <memset>
  if(hi2s->Instance==SPI1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a34      	ldr	r2, [pc, #208]	@ (80023c4 <HAL_I2S_MspInit+0x100>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d161      	bne.n	80023ba <HAL_I2S_MspInit+0xf6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80022f6:	193b      	adds	r3, r7, r4
 80022f8:	2280      	movs	r2, #128	@ 0x80
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80022fe:	193b      	adds	r3, r7, r4
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002304:	193b      	adds	r3, r7, r4
 8002306:	0018      	movs	r0, r3
 8002308:	f002 f9e2 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 800230c:	1e03      	subs	r3, r0, #0
 800230e:	d001      	beq.n	8002314 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002310:	f7ff fd2a 	bl	8001d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002314:	4b2c      	ldr	r3, [pc, #176]	@ (80023c8 <HAL_I2S_MspInit+0x104>)
 8002316:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002318:	4b2b      	ldr	r3, [pc, #172]	@ (80023c8 <HAL_I2S_MspInit+0x104>)
 800231a:	2180      	movs	r1, #128	@ 0x80
 800231c:	0149      	lsls	r1, r1, #5
 800231e:	430a      	orrs	r2, r1
 8002320:	641a      	str	r2, [r3, #64]	@ 0x40
 8002322:	4b29      	ldr	r3, [pc, #164]	@ (80023c8 <HAL_I2S_MspInit+0x104>)
 8002324:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	015b      	lsls	r3, r3, #5
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002330:	4b25      	ldr	r3, [pc, #148]	@ (80023c8 <HAL_I2S_MspInit+0x104>)
 8002332:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002334:	4b24      	ldr	r3, [pc, #144]	@ (80023c8 <HAL_I2S_MspInit+0x104>)
 8002336:	2101      	movs	r1, #1
 8002338:	430a      	orrs	r2, r1
 800233a:	635a      	str	r2, [r3, #52]	@ 0x34
 800233c:	4b22      	ldr	r3, [pc, #136]	@ (80023c8 <HAL_I2S_MspInit+0x104>)
 800233e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002340:	2201      	movs	r2, #1
 8002342:	4013      	ands	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002348:	4b1f      	ldr	r3, [pc, #124]	@ (80023c8 <HAL_I2S_MspInit+0x104>)
 800234a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800234c:	4b1e      	ldr	r3, [pc, #120]	@ (80023c8 <HAL_I2S_MspInit+0x104>)
 800234e:	2102      	movs	r1, #2
 8002350:	430a      	orrs	r2, r1
 8002352:	635a      	str	r2, [r3, #52]	@ 0x34
 8002354:	4b1c      	ldr	r3, [pc, #112]	@ (80023c8 <HAL_I2S_MspInit+0x104>)
 8002356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002358:	2202      	movs	r2, #2
 800235a:	4013      	ands	r3, r2
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PB0     ------> I2S1_WS
    PA12 [PA10]     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8002360:	243c      	movs	r4, #60	@ 0x3c
 8002362:	193b      	adds	r3, r7, r4
 8002364:	4a19      	ldr	r2, [pc, #100]	@ (80023cc <HAL_I2S_MspInit+0x108>)
 8002366:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	193b      	adds	r3, r7, r4
 800236a:	2202      	movs	r2, #2
 800236c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	193b      	adds	r3, r7, r4
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002374:	193b      	adds	r3, r7, r4
 8002376:	2200      	movs	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800237a:	193b      	adds	r3, r7, r4
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002380:	193a      	adds	r2, r7, r4
 8002382:	23a0      	movs	r3, #160	@ 0xa0
 8002384:	05db      	lsls	r3, r3, #23
 8002386:	0011      	movs	r1, r2
 8002388:	0018      	movs	r0, r3
 800238a:	f000 fb4d 	bl	8002a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800238e:	0021      	movs	r1, r4
 8002390:	187b      	adds	r3, r7, r1
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	187b      	adds	r3, r7, r1
 8002398:	2202      	movs	r2, #2
 800239a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	187b      	adds	r3, r7, r1
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	187b      	adds	r3, r7, r1
 80023a4:	2200      	movs	r2, #0
 80023a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ae:	187b      	adds	r3, r7, r1
 80023b0:	4a07      	ldr	r2, [pc, #28]	@ (80023d0 <HAL_I2S_MspInit+0x10c>)
 80023b2:	0019      	movs	r1, r3
 80023b4:	0010      	movs	r0, r2
 80023b6:	f000 fb37 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b015      	add	sp, #84	@ 0x54
 80023c0:	bd90      	pop	{r4, r7, pc}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	40013000 	.word	0x40013000
 80023c8:	40021000 	.word	0x40021000
 80023cc:	00001002 	.word	0x00001002
 80023d0:	50000400 	.word	0x50000400

080023d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b08f      	sub	sp, #60	@ 0x3c
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023dc:	2410      	movs	r4, #16
 80023de:	193b      	adds	r3, r7, r4
 80023e0:	0018      	movs	r0, r3
 80023e2:	2328      	movs	r3, #40	@ 0x28
 80023e4:	001a      	movs	r2, r3
 80023e6:	2100      	movs	r1, #0
 80023e8:	f004 fdc8 	bl	8006f7c <memset>
  if(hrtc->Instance==RTC)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a19      	ldr	r2, [pc, #100]	@ (8002458 <HAL_RTC_MspInit+0x84>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d12c      	bne.n	8002450 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023f6:	193b      	adds	r3, r7, r4
 80023f8:	2280      	movs	r2, #128	@ 0x80
 80023fa:	0292      	lsls	r2, r2, #10
 80023fc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023fe:	193b      	adds	r3, r7, r4
 8002400:	2280      	movs	r2, #128	@ 0x80
 8002402:	0052      	lsls	r2, r2, #1
 8002404:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002406:	193b      	adds	r3, r7, r4
 8002408:	0018      	movs	r0, r3
 800240a:	f002 f961 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 800240e:	1e03      	subs	r3, r0, #0
 8002410:	d001      	beq.n	8002416 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002412:	f7ff fca9 	bl	8001d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002416:	4b11      	ldr	r3, [pc, #68]	@ (800245c <HAL_RTC_MspInit+0x88>)
 8002418:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800241a:	4b10      	ldr	r3, [pc, #64]	@ (800245c <HAL_RTC_MspInit+0x88>)
 800241c:	2180      	movs	r1, #128	@ 0x80
 800241e:	0209      	lsls	r1, r1, #8
 8002420:	430a      	orrs	r2, r1
 8002422:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002424:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <HAL_RTC_MspInit+0x88>)
 8002426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002428:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <HAL_RTC_MspInit+0x88>)
 800242a:	2180      	movs	r1, #128	@ 0x80
 800242c:	00c9      	lsls	r1, r1, #3
 800242e:	430a      	orrs	r2, r1
 8002430:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002432:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <HAL_RTC_MspInit+0x88>)
 8002434:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002436:	2380      	movs	r3, #128	@ 0x80
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4013      	ands	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	2002      	movs	r0, #2
 8002446:	f000 fabd 	bl	80029c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800244a:	2002      	movs	r0, #2
 800244c:	f000 facf 	bl	80029ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002450:	46c0      	nop			@ (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	b00f      	add	sp, #60	@ 0x3c
 8002456:	bd90      	pop	{r4, r7, pc}
 8002458:	40002800 	.word	0x40002800
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b08b      	sub	sp, #44	@ 0x2c
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	2414      	movs	r4, #20
 800246a:	193b      	adds	r3, r7, r4
 800246c:	0018      	movs	r0, r3
 800246e:	2314      	movs	r3, #20
 8002470:	001a      	movs	r2, r3
 8002472:	2100      	movs	r1, #0
 8002474:	f004 fd82 	bl	8006f7c <memset>
  if(hspi->Instance==SPI2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a26      	ldr	r2, [pc, #152]	@ (8002518 <HAL_SPI_MspInit+0xb8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d146      	bne.n	8002510 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002482:	4b26      	ldr	r3, [pc, #152]	@ (800251c <HAL_SPI_MspInit+0xbc>)
 8002484:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002486:	4b25      	ldr	r3, [pc, #148]	@ (800251c <HAL_SPI_MspInit+0xbc>)
 8002488:	2180      	movs	r1, #128	@ 0x80
 800248a:	01c9      	lsls	r1, r1, #7
 800248c:	430a      	orrs	r2, r1
 800248e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002490:	4b22      	ldr	r3, [pc, #136]	@ (800251c <HAL_SPI_MspInit+0xbc>)
 8002492:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002494:	2380      	movs	r3, #128	@ 0x80
 8002496:	01db      	lsls	r3, r3, #7
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	4b1f      	ldr	r3, [pc, #124]	@ (800251c <HAL_SPI_MspInit+0xbc>)
 80024a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024a2:	4b1e      	ldr	r3, [pc, #120]	@ (800251c <HAL_SPI_MspInit+0xbc>)
 80024a4:	2101      	movs	r1, #1
 80024a6:	430a      	orrs	r2, r1
 80024a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80024aa:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <HAL_SPI_MspInit+0xbc>)
 80024ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ae:	2201      	movs	r2, #1
 80024b0:	4013      	ands	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80024b6:	193b      	adds	r3, r7, r4
 80024b8:	2209      	movs	r2, #9
 80024ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	193b      	adds	r3, r7, r4
 80024be:	2202      	movs	r2, #2
 80024c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	193b      	adds	r3, r7, r4
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c8:	193b      	adds	r3, r7, r4
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80024ce:	193b      	adds	r3, r7, r4
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d4:	193a      	adds	r2, r7, r4
 80024d6:	23a0      	movs	r3, #160	@ 0xa0
 80024d8:	05db      	lsls	r3, r3, #23
 80024da:	0011      	movs	r1, r2
 80024dc:	0018      	movs	r0, r3
 80024de:	f000 faa3 	bl	8002a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024e2:	0021      	movs	r1, r4
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	2210      	movs	r2, #16
 80024e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	2202      	movs	r2, #2
 80024ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	2200      	movs	r2, #0
 80024fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	2201      	movs	r2, #1
 8002500:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002502:	187a      	adds	r2, r7, r1
 8002504:	23a0      	movs	r3, #160	@ 0xa0
 8002506:	05db      	lsls	r3, r3, #23
 8002508:	0011      	movs	r1, r2
 800250a:	0018      	movs	r0, r3
 800250c:	f000 fa8c 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002510:	46c0      	nop			@ (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b00b      	add	sp, #44	@ 0x2c
 8002516:	bd90      	pop	{r4, r7, pc}
 8002518:	40003800 	.word	0x40003800
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2380      	movs	r3, #128	@ 0x80
 800252e:	05db      	lsls	r3, r3, #23
 8002530:	429a      	cmp	r2, r3
 8002532:	d10b      	bne.n	800254c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002534:	4b07      	ldr	r3, [pc, #28]	@ (8002554 <HAL_TIM_PWM_MspInit+0x34>)
 8002536:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002538:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <HAL_TIM_PWM_MspInit+0x34>)
 800253a:	2101      	movs	r1, #1
 800253c:	430a      	orrs	r2, r1
 800253e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002540:	4b04      	ldr	r3, [pc, #16]	@ (8002554 <HAL_TIM_PWM_MspInit+0x34>)
 8002542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002544:	2201      	movs	r2, #1
 8002546:	4013      	ands	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800254c:	46c0      	nop			@ (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b004      	add	sp, #16
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000

08002558 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a18      	ldr	r2, [pc, #96]	@ (80025c8 <HAL_TIM_Base_MspInit+0x70>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d10e      	bne.n	8002588 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800256a:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <HAL_TIM_Base_MspInit+0x74>)
 800256c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800256e:	4b17      	ldr	r3, [pc, #92]	@ (80025cc <HAL_TIM_Base_MspInit+0x74>)
 8002570:	2180      	movs	r1, #128	@ 0x80
 8002572:	0209      	lsls	r1, r1, #8
 8002574:	430a      	orrs	r2, r1
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40
 8002578:	4b14      	ldr	r3, [pc, #80]	@ (80025cc <HAL_TIM_Base_MspInit+0x74>)
 800257a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800257c:	2380      	movs	r3, #128	@ 0x80
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002586:	e01a      	b.n	80025be <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a10      	ldr	r2, [pc, #64]	@ (80025d0 <HAL_TIM_Base_MspInit+0x78>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d115      	bne.n	80025be <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002592:	4b0e      	ldr	r3, [pc, #56]	@ (80025cc <HAL_TIM_Base_MspInit+0x74>)
 8002594:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002596:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <HAL_TIM_Base_MspInit+0x74>)
 8002598:	2180      	movs	r1, #128	@ 0x80
 800259a:	0289      	lsls	r1, r1, #10
 800259c:	430a      	orrs	r2, r1
 800259e:	641a      	str	r2, [r3, #64]	@ 0x40
 80025a0:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <HAL_TIM_Base_MspInit+0x74>)
 80025a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025a4:	2380      	movs	r3, #128	@ 0x80
 80025a6:	029b      	lsls	r3, r3, #10
 80025a8:	4013      	ands	r3, r2
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	2015      	movs	r0, #21
 80025b4:	f000 fa06 	bl	80029c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80025b8:	2015      	movs	r0, #21
 80025ba:	f000 fa18 	bl	80029ee <HAL_NVIC_EnableIRQ>
}
 80025be:	46c0      	nop			@ (mov r8, r8)
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b004      	add	sp, #16
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	40002000 	.word	0x40002000
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40014400 	.word	0x40014400

080025d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b089      	sub	sp, #36	@ 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	240c      	movs	r4, #12
 80025de:	193b      	adds	r3, r7, r4
 80025e0:	0018      	movs	r0, r3
 80025e2:	2314      	movs	r3, #20
 80025e4:	001a      	movs	r2, r3
 80025e6:	2100      	movs	r1, #0
 80025e8:	f004 fcc8 	bl	8006f7c <memset>
  if(htim->Instance==TIM2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	@ 0x80
 80025f2:	05db      	lsls	r3, r3, #23
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d121      	bne.n	800263c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f8:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <HAL_TIM_MspPostInit+0x70>)
 80025fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025fc:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <HAL_TIM_MspPostInit+0x70>)
 80025fe:	2104      	movs	r1, #4
 8002600:	430a      	orrs	r2, r1
 8002602:	635a      	str	r2, [r3, #52]	@ 0x34
 8002604:	4b0f      	ldr	r3, [pc, #60]	@ (8002644 <HAL_TIM_MspPostInit+0x70>)
 8002606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002608:	2204      	movs	r2, #4
 800260a:	4013      	ands	r3, r2
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_SHIFT_nOE_Pin;
 8002610:	0021      	movs	r1, r4
 8002612:	187b      	adds	r3, r7, r1
 8002614:	2240      	movs	r2, #64	@ 0x40
 8002616:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	187b      	adds	r3, r7, r1
 800261a:	2202      	movs	r2, #2
 800261c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	187b      	adds	r3, r7, r1
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	187b      	adds	r3, r7, r1
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800262a:	187b      	adds	r3, r7, r1
 800262c:	2202      	movs	r2, #2
 800262e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_SHIFT_nOE_GPIO_Port, &GPIO_InitStruct);
 8002630:	187b      	adds	r3, r7, r1
 8002632:	4a05      	ldr	r2, [pc, #20]	@ (8002648 <HAL_TIM_MspPostInit+0x74>)
 8002634:	0019      	movs	r1, r3
 8002636:	0010      	movs	r0, r2
 8002638:	f000 f9f6 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800263c:	46c0      	nop			@ (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	b009      	add	sp, #36	@ 0x24
 8002642:	bd90      	pop	{r4, r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	50000800 	.word	0x50000800

0800264c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002650:	46c0      	nop			@ (mov r8, r8)
 8002652:	e7fd      	b.n	8002650 <NMI_Handler+0x4>

08002654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002658:	46c0      	nop			@ (mov r8, r8)
 800265a:	e7fd      	b.n	8002658 <HardFault_Handler+0x4>

0800265c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002660:	46c0      	nop			@ (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800266a:	46c0      	nop			@ (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002674:	f000 f8de 	bl	8002834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002678:	46c0      	nop			@ (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002684:	4b03      	ldr	r3, [pc, #12]	@ (8002694 <RTC_TAMP_IRQHandler+0x14>)
 8002686:	0018      	movs	r0, r3
 8002688:	f003 f938 	bl	80058fc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800268c:	46c0      	nop			@ (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	2000014c 	.word	0x2000014c

08002698 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800269c:	46c0      	nop			@ (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_EXTI_Pin);
 80026a6:	2001      	movs	r0, #1
 80026a8:	f000 fb78 	bl	8002d9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_EXTI_Pin);
 80026ac:	2002      	movs	r0, #2
 80026ae:	f000 fb75 	bl	8002d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80026b2:	46c0      	nop			@ (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_EXTI_Pin);
 80026bc:	2004      	movs	r0, #4
 80026be:	f000 fb6d 	bl	8002d9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_EXTI_Pin);
 80026c2:	2008      	movs	r0, #8
 80026c4:	f000 fb6a 	bl	8002d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80026c8:	46c0      	nop			@ (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_SWITCH_EXTI_Pin);
 80026d2:	2010      	movs	r0, #16
 80026d4:	f000 fb62 	bl	8002d9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_EXTI_Pin);
 80026d8:	2380      	movs	r3, #128	@ 0x80
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	0018      	movs	r0, r3
 80026de:	f000 fb5d 	bl	8002d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80026ec:	4b03      	ldr	r3, [pc, #12]	@ (80026fc <TIM16_IRQHandler+0x14>)
 80026ee:	0018      	movs	r0, r3
 80026f0:	f003 fe58 	bl	80063a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80026f4:	46c0      	nop			@ (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	46c0      	nop			@ (mov r8, r8)
 80026fc:	20000274 	.word	0x20000274

08002700 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002704:	46c0      	nop			@ (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800270c:	480d      	ldr	r0, [pc, #52]	@ (8002744 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800270e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002710:	f7ff fff6 	bl	8002700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002714:	480c      	ldr	r0, [pc, #48]	@ (8002748 <LoopForever+0x6>)
  ldr r1, =_edata
 8002716:	490d      	ldr	r1, [pc, #52]	@ (800274c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002718:	4a0d      	ldr	r2, [pc, #52]	@ (8002750 <LoopForever+0xe>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800271c:	e002      	b.n	8002724 <LoopCopyDataInit>

0800271e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800271e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002722:	3304      	adds	r3, #4

08002724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002728:	d3f9      	bcc.n	800271e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272a:	4a0a      	ldr	r2, [pc, #40]	@ (8002754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800272c:	4c0a      	ldr	r4, [pc, #40]	@ (8002758 <LoopForever+0x16>)
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002730:	e001      	b.n	8002736 <LoopFillZerobss>

08002732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002734:	3204      	adds	r2, #4

08002736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002738:	d3fb      	bcc.n	8002732 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800273a:	f004 fc27 	bl	8006f8c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800273e:	f7fe f99d 	bl	8000a7c <main>

08002742 <LoopForever>:

LoopForever:
  b LoopForever
 8002742:	e7fe      	b.n	8002742 <LoopForever>
  ldr   r0, =_estack
 8002744:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800274c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002750:	080070f0 	.word	0x080070f0
  ldr r2, =_sbss
 8002754:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002758:	20000338 	.word	0x20000338

0800275c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800275c:	e7fe      	b.n	800275c <ADC1_IRQHandler>
	...

08002760 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002766:	1dfb      	adds	r3, r7, #7
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800276c:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <HAL_Init+0x3c>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <HAL_Init+0x3c>)
 8002772:	2180      	movs	r1, #128	@ 0x80
 8002774:	0049      	lsls	r1, r1, #1
 8002776:	430a      	orrs	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800277a:	2003      	movs	r0, #3
 800277c:	f000 f810 	bl	80027a0 <HAL_InitTick>
 8002780:	1e03      	subs	r3, r0, #0
 8002782:	d003      	beq.n	800278c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002784:	1dfb      	adds	r3, r7, #7
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e001      	b.n	8002790 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800278c:	f7ff fd0c 	bl	80021a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002790:	1dfb      	adds	r3, r7, #7
 8002792:	781b      	ldrb	r3, [r3, #0]
}
 8002794:	0018      	movs	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	b002      	add	sp, #8
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40022000 	.word	0x40022000

080027a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027a8:	230f      	movs	r3, #15
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80027b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002828 <HAL_InitTick+0x88>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d02b      	beq.n	8002810 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80027b8:	4b1c      	ldr	r3, [pc, #112]	@ (800282c <HAL_InitTick+0x8c>)
 80027ba:	681c      	ldr	r4, [r3, #0]
 80027bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <HAL_InitTick+0x88>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	0019      	movs	r1, r3
 80027c2:	23fa      	movs	r3, #250	@ 0xfa
 80027c4:	0098      	lsls	r0, r3, #2
 80027c6:	f7fd fc9d 	bl	8000104 <__udivsi3>
 80027ca:	0003      	movs	r3, r0
 80027cc:	0019      	movs	r1, r3
 80027ce:	0020      	movs	r0, r4
 80027d0:	f7fd fc98 	bl	8000104 <__udivsi3>
 80027d4:	0003      	movs	r3, r0
 80027d6:	0018      	movs	r0, r3
 80027d8:	f000 f919 	bl	8002a0e <HAL_SYSTICK_Config>
 80027dc:	1e03      	subs	r3, r0, #0
 80027de:	d112      	bne.n	8002806 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d80a      	bhi.n	80027fc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	2301      	movs	r3, #1
 80027ea:	425b      	negs	r3, r3
 80027ec:	2200      	movs	r2, #0
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 f8e8 	bl	80029c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <HAL_InitTick+0x90>)
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	e00d      	b.n	8002818 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80027fc:	230f      	movs	r3, #15
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	e008      	b.n	8002818 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002806:	230f      	movs	r3, #15
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	e003      	b.n	8002818 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002810:	230f      	movs	r3, #15
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002818:	230f      	movs	r3, #15
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	781b      	ldrb	r3, [r3, #0]
}
 800281e:	0018      	movs	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	b005      	add	sp, #20
 8002824:	bd90      	pop	{r4, r7, pc}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	20000068 	.word	0x20000068
 800282c:	20000060 	.word	0x20000060
 8002830:	20000064 	.word	0x20000064

08002834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002838:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <HAL_IncTick+0x1c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	001a      	movs	r2, r3
 800283e:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <HAL_IncTick+0x20>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	18d2      	adds	r2, r2, r3
 8002844:	4b03      	ldr	r3, [pc, #12]	@ (8002854 <HAL_IncTick+0x20>)
 8002846:	601a      	str	r2, [r3, #0]
}
 8002848:	46c0      	nop			@ (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	20000068 	.word	0x20000068
 8002854:	20000334 	.word	0x20000334

08002858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  return uwTick;
 800285c:	4b02      	ldr	r3, [pc, #8]	@ (8002868 <HAL_GetTick+0x10>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	20000334 	.word	0x20000334

0800286c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	0002      	movs	r2, r0
 8002874:	1dfb      	adds	r3, r7, #7
 8002876:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002878:	1dfb      	adds	r3, r7, #7
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b7f      	cmp	r3, #127	@ 0x7f
 800287e:	d809      	bhi.n	8002894 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002880:	1dfb      	adds	r3, r7, #7
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	001a      	movs	r2, r3
 8002886:	231f      	movs	r3, #31
 8002888:	401a      	ands	r2, r3
 800288a:	4b04      	ldr	r3, [pc, #16]	@ (800289c <__NVIC_EnableIRQ+0x30>)
 800288c:	2101      	movs	r1, #1
 800288e:	4091      	lsls	r1, r2
 8002890:	000a      	movs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002894:	46c0      	nop			@ (mov r8, r8)
 8002896:	46bd      	mov	sp, r7
 8002898:	b002      	add	sp, #8
 800289a:	bd80      	pop	{r7, pc}
 800289c:	e000e100 	.word	0xe000e100

080028a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	0002      	movs	r2, r0
 80028a8:	6039      	str	r1, [r7, #0]
 80028aa:	1dfb      	adds	r3, r7, #7
 80028ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028ae:	1dfb      	adds	r3, r7, #7
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80028b4:	d828      	bhi.n	8002908 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002974 <__NVIC_SetPriority+0xd4>)
 80028b8:	1dfb      	adds	r3, r7, #7
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	b25b      	sxtb	r3, r3
 80028be:	089b      	lsrs	r3, r3, #2
 80028c0:	33c0      	adds	r3, #192	@ 0xc0
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	589b      	ldr	r3, [r3, r2]
 80028c6:	1dfa      	adds	r2, r7, #7
 80028c8:	7812      	ldrb	r2, [r2, #0]
 80028ca:	0011      	movs	r1, r2
 80028cc:	2203      	movs	r2, #3
 80028ce:	400a      	ands	r2, r1
 80028d0:	00d2      	lsls	r2, r2, #3
 80028d2:	21ff      	movs	r1, #255	@ 0xff
 80028d4:	4091      	lsls	r1, r2
 80028d6:	000a      	movs	r2, r1
 80028d8:	43d2      	mvns	r2, r2
 80028da:	401a      	ands	r2, r3
 80028dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	019b      	lsls	r3, r3, #6
 80028e2:	22ff      	movs	r2, #255	@ 0xff
 80028e4:	401a      	ands	r2, r3
 80028e6:	1dfb      	adds	r3, r7, #7
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	0018      	movs	r0, r3
 80028ec:	2303      	movs	r3, #3
 80028ee:	4003      	ands	r3, r0
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028f4:	481f      	ldr	r0, [pc, #124]	@ (8002974 <__NVIC_SetPriority+0xd4>)
 80028f6:	1dfb      	adds	r3, r7, #7
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	b25b      	sxtb	r3, r3
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	430a      	orrs	r2, r1
 8002900:	33c0      	adds	r3, #192	@ 0xc0
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002906:	e031      	b.n	800296c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002908:	4a1b      	ldr	r2, [pc, #108]	@ (8002978 <__NVIC_SetPriority+0xd8>)
 800290a:	1dfb      	adds	r3, r7, #7
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	0019      	movs	r1, r3
 8002910:	230f      	movs	r3, #15
 8002912:	400b      	ands	r3, r1
 8002914:	3b08      	subs	r3, #8
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	3306      	adds	r3, #6
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	18d3      	adds	r3, r2, r3
 800291e:	3304      	adds	r3, #4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	1dfa      	adds	r2, r7, #7
 8002924:	7812      	ldrb	r2, [r2, #0]
 8002926:	0011      	movs	r1, r2
 8002928:	2203      	movs	r2, #3
 800292a:	400a      	ands	r2, r1
 800292c:	00d2      	lsls	r2, r2, #3
 800292e:	21ff      	movs	r1, #255	@ 0xff
 8002930:	4091      	lsls	r1, r2
 8002932:	000a      	movs	r2, r1
 8002934:	43d2      	mvns	r2, r2
 8002936:	401a      	ands	r2, r3
 8002938:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	019b      	lsls	r3, r3, #6
 800293e:	22ff      	movs	r2, #255	@ 0xff
 8002940:	401a      	ands	r2, r3
 8002942:	1dfb      	adds	r3, r7, #7
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	0018      	movs	r0, r3
 8002948:	2303      	movs	r3, #3
 800294a:	4003      	ands	r3, r0
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002950:	4809      	ldr	r0, [pc, #36]	@ (8002978 <__NVIC_SetPriority+0xd8>)
 8002952:	1dfb      	adds	r3, r7, #7
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	001c      	movs	r4, r3
 8002958:	230f      	movs	r3, #15
 800295a:	4023      	ands	r3, r4
 800295c:	3b08      	subs	r3, #8
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	430a      	orrs	r2, r1
 8002962:	3306      	adds	r3, #6
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	18c3      	adds	r3, r0, r3
 8002968:	3304      	adds	r3, #4
 800296a:	601a      	str	r2, [r3, #0]
}
 800296c:	46c0      	nop			@ (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b003      	add	sp, #12
 8002972:	bd90      	pop	{r4, r7, pc}
 8002974:	e000e100 	.word	0xe000e100
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	1e5a      	subs	r2, r3, #1
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	045b      	lsls	r3, r3, #17
 800298c:	429a      	cmp	r2, r3
 800298e:	d301      	bcc.n	8002994 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002990:	2301      	movs	r3, #1
 8002992:	e010      	b.n	80029b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002994:	4b0a      	ldr	r3, [pc, #40]	@ (80029c0 <SysTick_Config+0x44>)
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	3a01      	subs	r2, #1
 800299a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800299c:	2301      	movs	r3, #1
 800299e:	425b      	negs	r3, r3
 80029a0:	2103      	movs	r1, #3
 80029a2:	0018      	movs	r0, r3
 80029a4:	f7ff ff7c 	bl	80028a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <SysTick_Config+0x44>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ae:	4b04      	ldr	r3, [pc, #16]	@ (80029c0 <SysTick_Config+0x44>)
 80029b0:	2207      	movs	r2, #7
 80029b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	0018      	movs	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b002      	add	sp, #8
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	e000e010 	.word	0xe000e010

080029c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	210f      	movs	r1, #15
 80029d0:	187b      	adds	r3, r7, r1
 80029d2:	1c02      	adds	r2, r0, #0
 80029d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	187b      	adds	r3, r7, r1
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	b25b      	sxtb	r3, r3
 80029de:	0011      	movs	r1, r2
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7ff ff5d 	bl	80028a0 <__NVIC_SetPriority>
}
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b004      	add	sp, #16
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	0002      	movs	r2, r0
 80029f6:	1dfb      	adds	r3, r7, #7
 80029f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029fa:	1dfb      	adds	r3, r7, #7
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b25b      	sxtb	r3, r3
 8002a00:	0018      	movs	r0, r3
 8002a02:	f7ff ff33 	bl	800286c <__NVIC_EnableIRQ>
}
 8002a06:	46c0      	nop			@ (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b002      	add	sp, #8
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f7ff ffaf 	bl	800297c <SysTick_Config>
 8002a1e:	0003      	movs	r3, r0
}
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b002      	add	sp, #8
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a36:	e147      	b.n	8002cc8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4091      	lsls	r1, r2
 8002a42:	000a      	movs	r2, r1
 8002a44:	4013      	ands	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d100      	bne.n	8002a50 <HAL_GPIO_Init+0x28>
 8002a4e:	e138      	b.n	8002cc2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2203      	movs	r2, #3
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d005      	beq.n	8002a68 <HAL_GPIO_Init+0x40>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2203      	movs	r2, #3
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d130      	bne.n	8002aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	2203      	movs	r2, #3
 8002a74:	409a      	lsls	r2, r3
 8002a76:	0013      	movs	r3, r2
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	0013      	movs	r3, r2
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	0013      	movs	r3, r2
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
 8002abc:	0013      	movs	r3, r2
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2203      	movs	r2, #3
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d017      	beq.n	8002b06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	409a      	lsls	r2, r3
 8002af8:	0013      	movs	r3, r2
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d123      	bne.n	8002b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	08da      	lsrs	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3208      	adds	r2, #8
 8002b1a:	0092      	lsls	r2, r2, #2
 8002b1c:	58d3      	ldr	r3, [r2, r3]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2207      	movs	r2, #7
 8002b24:	4013      	ands	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	220f      	movs	r2, #15
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2107      	movs	r1, #7
 8002b3e:	400b      	ands	r3, r1
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	409a      	lsls	r2, r3
 8002b44:	0013      	movs	r3, r2
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	08da      	lsrs	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3208      	adds	r2, #8
 8002b54:	0092      	lsls	r2, r2, #2
 8002b56:	6939      	ldr	r1, [r7, #16]
 8002b58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	2203      	movs	r2, #3
 8002b66:	409a      	lsls	r2, r3
 8002b68:	0013      	movs	r3, r2
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2203      	movs	r2, #3
 8002b78:	401a      	ands	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	0013      	movs	r3, r2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	23c0      	movs	r3, #192	@ 0xc0
 8002b94:	029b      	lsls	r3, r3, #10
 8002b96:	4013      	ands	r3, r2
 8002b98:	d100      	bne.n	8002b9c <HAL_GPIO_Init+0x174>
 8002b9a:	e092      	b.n	8002cc2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002b9c:	4a50      	ldr	r2, [pc, #320]	@ (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	089b      	lsrs	r3, r3, #2
 8002ba2:	3318      	adds	r3, #24
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	589b      	ldr	r3, [r3, r2]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2203      	movs	r2, #3
 8002bae:	4013      	ands	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	220f      	movs	r2, #15
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	0013      	movs	r3, r2
 8002bb8:	43da      	mvns	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	23a0      	movs	r3, #160	@ 0xa0
 8002bc4:	05db      	lsls	r3, r3, #23
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d013      	beq.n	8002bf2 <HAL_GPIO_Init+0x1ca>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a45      	ldr	r2, [pc, #276]	@ (8002ce4 <HAL_GPIO_Init+0x2bc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00d      	beq.n	8002bee <HAL_GPIO_Init+0x1c6>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a44      	ldr	r2, [pc, #272]	@ (8002ce8 <HAL_GPIO_Init+0x2c0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <HAL_GPIO_Init+0x1c2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a43      	ldr	r2, [pc, #268]	@ (8002cec <HAL_GPIO_Init+0x2c4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_GPIO_Init+0x1be>
 8002be2:	2303      	movs	r3, #3
 8002be4:	e006      	b.n	8002bf4 <HAL_GPIO_Init+0x1cc>
 8002be6:	2305      	movs	r3, #5
 8002be8:	e004      	b.n	8002bf4 <HAL_GPIO_Init+0x1cc>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e002      	b.n	8002bf4 <HAL_GPIO_Init+0x1cc>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_GPIO_Init+0x1cc>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	2103      	movs	r1, #3
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	00d2      	lsls	r2, r2, #3
 8002bfc:	4093      	lsls	r3, r2
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002c04:	4936      	ldr	r1, [pc, #216]	@ (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	3318      	adds	r3, #24
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c12:	4b33      	ldr	r3, [pc, #204]	@ (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	2380      	movs	r3, #128	@ 0x80
 8002c28:	035b      	lsls	r3, r3, #13
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c36:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002c3c:	4b28      	ldr	r3, [pc, #160]	@ (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	43da      	mvns	r2, r3
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	2380      	movs	r3, #128	@ 0x80
 8002c52:	039b      	lsls	r3, r3, #14
 8002c54:	4013      	ands	r3, r2
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c60:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c66:	4a1e      	ldr	r2, [pc, #120]	@ (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002c68:	2384      	movs	r3, #132	@ 0x84
 8002c6a:	58d3      	ldr	r3, [r2, r3]
 8002c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	43da      	mvns	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	029b      	lsls	r3, r3, #10
 8002c80:	4013      	ands	r3, r2
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c8c:	4914      	ldr	r1, [pc, #80]	@ (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002c8e:	2284      	movs	r2, #132	@ 0x84
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002c94:	4a12      	ldr	r2, [pc, #72]	@ (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002c96:	2380      	movs	r3, #128	@ 0x80
 8002c98:	58d3      	ldr	r3, [r2, r3]
 8002c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	2380      	movs	r3, #128	@ 0x80
 8002cac:	025b      	lsls	r3, r3, #9
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cba:	4909      	ldr	r1, [pc, #36]	@ (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002cbc:	2280      	movs	r2, #128	@ 0x80
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	40da      	lsrs	r2, r3
 8002cd0:	1e13      	subs	r3, r2, #0
 8002cd2:	d000      	beq.n	8002cd6 <HAL_GPIO_Init+0x2ae>
 8002cd4:	e6b0      	b.n	8002a38 <HAL_GPIO_Init+0x10>
  }
}
 8002cd6:	46c0      	nop			@ (mov r8, r8)
 8002cd8:	46c0      	nop			@ (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b006      	add	sp, #24
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021800 	.word	0x40021800
 8002ce4:	50000400 	.word	0x50000400
 8002ce8:	50000800 	.word	0x50000800
 8002cec:	50000c00 	.word	0x50000c00

08002cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	000a      	movs	r2, r1
 8002cfa:	1cbb      	adds	r3, r7, #2
 8002cfc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	1cba      	adds	r2, r7, #2
 8002d04:	8812      	ldrh	r2, [r2, #0]
 8002d06:	4013      	ands	r3, r2
 8002d08:	d004      	beq.n	8002d14 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d0a:	230f      	movs	r3, #15
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	e003      	b.n	8002d1c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d14:	230f      	movs	r3, #15
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002d1c:	230f      	movs	r3, #15
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	781b      	ldrb	r3, [r3, #0]
}
 8002d22:	0018      	movs	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b004      	add	sp, #16
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	0008      	movs	r0, r1
 8002d34:	0011      	movs	r1, r2
 8002d36:	1cbb      	adds	r3, r7, #2
 8002d38:	1c02      	adds	r2, r0, #0
 8002d3a:	801a      	strh	r2, [r3, #0]
 8002d3c:	1c7b      	adds	r3, r7, #1
 8002d3e:	1c0a      	adds	r2, r1, #0
 8002d40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d42:	1c7b      	adds	r3, r7, #1
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d4a:	1cbb      	adds	r3, r7, #2
 8002d4c:	881a      	ldrh	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d52:	e003      	b.n	8002d5c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d54:	1cbb      	adds	r3, r7, #2
 8002d56:	881a      	ldrh	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d5c:	46c0      	nop			@ (mov r8, r8)
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b002      	add	sp, #8
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	000a      	movs	r2, r1
 8002d6e:	1cbb      	adds	r3, r7, #2
 8002d70:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d78:	1cbb      	adds	r3, r7, #2
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	041a      	lsls	r2, r3, #16
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	1cb9      	adds	r1, r7, #2
 8002d88:	8809      	ldrh	r1, [r1, #0]
 8002d8a:	400b      	ands	r3, r1
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	619a      	str	r2, [r3, #24]
}
 8002d92:	46c0      	nop			@ (mov r8, r8)
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b004      	add	sp, #16
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	0002      	movs	r2, r0
 8002da4:	1dbb      	adds	r3, r7, #6
 8002da6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002da8:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	1dba      	adds	r2, r7, #6
 8002dae:	8812      	ldrh	r2, [r2, #0]
 8002db0:	4013      	ands	r3, r2
 8002db2:	d008      	beq.n	8002dc6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002db4:	4b0d      	ldr	r3, [pc, #52]	@ (8002dec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002db6:	1dba      	adds	r2, r7, #6
 8002db8:	8812      	ldrh	r2, [r2, #0]
 8002dba:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002dbc:	1dbb      	adds	r3, r7, #6
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f000 f815 	bl	8002df0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002dc6:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	1dba      	adds	r2, r7, #6
 8002dcc:	8812      	ldrh	r2, [r2, #0]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d008      	beq.n	8002de4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002dd2:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002dd4:	1dba      	adds	r2, r7, #6
 8002dd6:	8812      	ldrh	r2, [r2, #0]
 8002dd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002dda:	1dbb      	adds	r3, r7, #6
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	0018      	movs	r0, r3
 8002de0:	f7fe fc5a 	bl	8001698 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002de4:	46c0      	nop			@ (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b002      	add	sp, #8
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021800 	.word	0x40021800

08002df0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	0002      	movs	r2, r0
 8002df8:	1dbb      	adds	r3, r7, #6
 8002dfa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002dfc:	46c0      	nop			@ (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b002      	add	sp, #8
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e08f      	b.n	8002f36 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2241      	movs	r2, #65	@ 0x41
 8002e1a:	5c9b      	ldrb	r3, [r3, r2]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d107      	bne.n	8002e32 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2240      	movs	r2, #64	@ 0x40
 8002e26:	2100      	movs	r1, #0
 8002e28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f7ff f9e7 	bl	8002200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2241      	movs	r2, #65	@ 0x41
 8002e36:	2124      	movs	r1, #36	@ 0x24
 8002e38:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2101      	movs	r1, #1
 8002e46:	438a      	bics	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	493b      	ldr	r1, [pc, #236]	@ (8002f40 <HAL_I2C_Init+0x13c>)
 8002e54:	400a      	ands	r2, r1
 8002e56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4938      	ldr	r1, [pc, #224]	@ (8002f44 <HAL_I2C_Init+0x140>)
 8002e64:	400a      	ands	r2, r1
 8002e66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d108      	bne.n	8002e82 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2180      	movs	r1, #128	@ 0x80
 8002e7a:	0209      	lsls	r1, r1, #8
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	e007      	b.n	8002e92 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2184      	movs	r1, #132	@ 0x84
 8002e8c:	0209      	lsls	r1, r1, #8
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d109      	bne.n	8002eae <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2180      	movs	r1, #128	@ 0x80
 8002ea6:	0109      	lsls	r1, r1, #4
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	e007      	b.n	8002ebe <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4923      	ldr	r1, [pc, #140]	@ (8002f48 <HAL_I2C_Init+0x144>)
 8002eba:	400a      	ands	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4920      	ldr	r1, [pc, #128]	@ (8002f4c <HAL_I2C_Init+0x148>)
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	491a      	ldr	r1, [pc, #104]	@ (8002f44 <HAL_I2C_Init+0x140>)
 8002eda:	400a      	ands	r2, r1
 8002edc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69d9      	ldr	r1, [r3, #28]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2101      	movs	r1, #1
 8002f14:	430a      	orrs	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2241      	movs	r2, #65	@ 0x41
 8002f22:	2120      	movs	r1, #32
 8002f24:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2242      	movs	r2, #66	@ 0x42
 8002f30:	2100      	movs	r1, #0
 8002f32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b002      	add	sp, #8
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	f0ffffff 	.word	0xf0ffffff
 8002f44:	ffff7fff 	.word	0xffff7fff
 8002f48:	fffff7ff 	.word	0xfffff7ff
 8002f4c:	02008000 	.word	0x02008000

08002f50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b089      	sub	sp, #36	@ 0x24
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	0008      	movs	r0, r1
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	230a      	movs	r3, #10
 8002f60:	18fb      	adds	r3, r7, r3
 8002f62:	1c02      	adds	r2, r0, #0
 8002f64:	801a      	strh	r2, [r3, #0]
 8002f66:	2308      	movs	r3, #8
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	1c0a      	adds	r2, r1, #0
 8002f6c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2241      	movs	r2, #65	@ 0x41
 8002f72:	5c9b      	ldrb	r3, [r3, r2]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d000      	beq.n	8002f7c <HAL_I2C_Master_Transmit+0x2c>
 8002f7a:	e10a      	b.n	8003192 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2240      	movs	r2, #64	@ 0x40
 8002f80:	5c9b      	ldrb	r3, [r3, r2]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_I2C_Master_Transmit+0x3a>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e104      	b.n	8003194 <HAL_I2C_Master_Transmit+0x244>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2240      	movs	r2, #64	@ 0x40
 8002f8e:	2101      	movs	r1, #1
 8002f90:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f92:	f7ff fc61 	bl	8002858 <HAL_GetTick>
 8002f96:	0003      	movs	r3, r0
 8002f98:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f9a:	2380      	movs	r3, #128	@ 0x80
 8002f9c:	0219      	lsls	r1, r3, #8
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2319      	movs	r3, #25
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f000 fa26 	bl	80033f8 <I2C_WaitOnFlagUntilTimeout>
 8002fac:	1e03      	subs	r3, r0, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0ef      	b.n	8003194 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2241      	movs	r2, #65	@ 0x41
 8002fb8:	2121      	movs	r1, #33	@ 0x21
 8002fba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2242      	movs	r2, #66	@ 0x42
 8002fc0:	2110      	movs	r1, #16
 8002fc2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	18ba      	adds	r2, r7, r2
 8002fd6:	8812      	ldrh	r2, [r2, #0]
 8002fd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2bff      	cmp	r3, #255	@ 0xff
 8002fe8:	d906      	bls.n	8002ff8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	22ff      	movs	r2, #255	@ 0xff
 8002fee:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002ff0:	2380      	movs	r3, #128	@ 0x80
 8002ff2:	045b      	lsls	r3, r3, #17
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e007      	b.n	8003008 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003002:	2380      	movs	r3, #128	@ 0x80
 8003004:	049b      	lsls	r3, r3, #18
 8003006:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d027      	beq.n	8003060 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	b2db      	uxtb	r3, r3
 8003046:	3301      	adds	r3, #1
 8003048:	b2da      	uxtb	r2, r3
 800304a:	697c      	ldr	r4, [r7, #20]
 800304c:	230a      	movs	r3, #10
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	8819      	ldrh	r1, [r3, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	4b51      	ldr	r3, [pc, #324]	@ (800319c <HAL_I2C_Master_Transmit+0x24c>)
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	0023      	movs	r3, r4
 800305a:	f000 fc45 	bl	80038e8 <I2C_TransferConfig>
 800305e:	e06f      	b.n	8003140 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003064:	b2da      	uxtb	r2, r3
 8003066:	697c      	ldr	r4, [r7, #20]
 8003068:	230a      	movs	r3, #10
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	8819      	ldrh	r1, [r3, #0]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	4b4a      	ldr	r3, [pc, #296]	@ (800319c <HAL_I2C_Master_Transmit+0x24c>)
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	0023      	movs	r3, r4
 8003076:	f000 fc37 	bl	80038e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800307a:	e061      	b.n	8003140 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	0018      	movs	r0, r3
 8003084:	f000 fa10 	bl	80034a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003088:	1e03      	subs	r3, r0, #0
 800308a:	d001      	beq.n	8003090 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e081      	b.n	8003194 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d03a      	beq.n	8003140 <HAL_I2C_Master_Transmit+0x1f0>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d136      	bne.n	8003140 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	0013      	movs	r3, r2
 80030dc:	2200      	movs	r2, #0
 80030de:	2180      	movs	r1, #128	@ 0x80
 80030e0:	f000 f98a 	bl	80033f8 <I2C_WaitOnFlagUntilTimeout>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d001      	beq.n	80030ec <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e053      	b.n	8003194 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2bff      	cmp	r3, #255	@ 0xff
 80030f4:	d911      	bls.n	800311a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	22ff      	movs	r2, #255	@ 0xff
 80030fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003100:	b2da      	uxtb	r2, r3
 8003102:	2380      	movs	r3, #128	@ 0x80
 8003104:	045c      	lsls	r4, r3, #17
 8003106:	230a      	movs	r3, #10
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	8819      	ldrh	r1, [r3, #0]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	2300      	movs	r3, #0
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	0023      	movs	r3, r4
 8003114:	f000 fbe8 	bl	80038e8 <I2C_TransferConfig>
 8003118:	e012      	b.n	8003140 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003128:	b2da      	uxtb	r2, r3
 800312a:	2380      	movs	r3, #128	@ 0x80
 800312c:	049c      	lsls	r4, r3, #18
 800312e:	230a      	movs	r3, #10
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	8819      	ldrh	r1, [r3, #0]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	2300      	movs	r3, #0
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	0023      	movs	r3, r4
 800313c:	f000 fbd4 	bl	80038e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d198      	bne.n	800307c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	0018      	movs	r0, r3
 8003152:	f000 f9ef 	bl	8003534 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003156:	1e03      	subs	r3, r0, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e01a      	b.n	8003194 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2220      	movs	r2, #32
 8003164:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	490b      	ldr	r1, [pc, #44]	@ (80031a0 <HAL_I2C_Master_Transmit+0x250>)
 8003172:	400a      	ands	r2, r1
 8003174:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2241      	movs	r2, #65	@ 0x41
 800317a:	2120      	movs	r1, #32
 800317c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2242      	movs	r2, #66	@ 0x42
 8003182:	2100      	movs	r1, #0
 8003184:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2240      	movs	r2, #64	@ 0x40
 800318a:	2100      	movs	r1, #0
 800318c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e000      	b.n	8003194 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
  }
}
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b007      	add	sp, #28
 800319a:	bd90      	pop	{r4, r7, pc}
 800319c:	80002000 	.word	0x80002000
 80031a0:	fe00e800 	.word	0xfe00e800

080031a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b089      	sub	sp, #36	@ 0x24
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	0008      	movs	r0, r1
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	0019      	movs	r1, r3
 80031b2:	230a      	movs	r3, #10
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	1c02      	adds	r2, r0, #0
 80031b8:	801a      	strh	r2, [r3, #0]
 80031ba:	2308      	movs	r3, #8
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	1c0a      	adds	r2, r1, #0
 80031c0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2241      	movs	r2, #65	@ 0x41
 80031c6:	5c9b      	ldrb	r3, [r3, r2]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d000      	beq.n	80031d0 <HAL_I2C_Master_Receive+0x2c>
 80031ce:	e0e8      	b.n	80033a2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2240      	movs	r2, #64	@ 0x40
 80031d4:	5c9b      	ldrb	r3, [r3, r2]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_I2C_Master_Receive+0x3a>
 80031da:	2302      	movs	r3, #2
 80031dc:	e0e2      	b.n	80033a4 <HAL_I2C_Master_Receive+0x200>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2240      	movs	r2, #64	@ 0x40
 80031e2:	2101      	movs	r1, #1
 80031e4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031e6:	f7ff fb37 	bl	8002858 <HAL_GetTick>
 80031ea:	0003      	movs	r3, r0
 80031ec:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031ee:	2380      	movs	r3, #128	@ 0x80
 80031f0:	0219      	lsls	r1, r3, #8
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	2319      	movs	r3, #25
 80031fa:	2201      	movs	r2, #1
 80031fc:	f000 f8fc 	bl	80033f8 <I2C_WaitOnFlagUntilTimeout>
 8003200:	1e03      	subs	r3, r0, #0
 8003202:	d001      	beq.n	8003208 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0cd      	b.n	80033a4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2241      	movs	r2, #65	@ 0x41
 800320c:	2122      	movs	r1, #34	@ 0x22
 800320e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2242      	movs	r2, #66	@ 0x42
 8003214:	2110      	movs	r1, #16
 8003216:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2208      	movs	r2, #8
 8003228:	18ba      	adds	r2, r7, r2
 800322a:	8812      	ldrh	r2, [r2, #0]
 800322c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	2bff      	cmp	r3, #255	@ 0xff
 800323c:	d911      	bls.n	8003262 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	22ff      	movs	r2, #255	@ 0xff
 8003242:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003248:	b2da      	uxtb	r2, r3
 800324a:	2380      	movs	r3, #128	@ 0x80
 800324c:	045c      	lsls	r4, r3, #17
 800324e:	230a      	movs	r3, #10
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	8819      	ldrh	r1, [r3, #0]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	4b55      	ldr	r3, [pc, #340]	@ (80033ac <HAL_I2C_Master_Receive+0x208>)
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	0023      	movs	r3, r4
 800325c:	f000 fb44 	bl	80038e8 <I2C_TransferConfig>
 8003260:	e076      	b.n	8003350 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003270:	b2da      	uxtb	r2, r3
 8003272:	2380      	movs	r3, #128	@ 0x80
 8003274:	049c      	lsls	r4, r3, #18
 8003276:	230a      	movs	r3, #10
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	8819      	ldrh	r1, [r3, #0]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	4b4b      	ldr	r3, [pc, #300]	@ (80033ac <HAL_I2C_Master_Receive+0x208>)
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	0023      	movs	r3, r4
 8003284:	f000 fb30 	bl	80038e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003288:	e062      	b.n	8003350 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	0018      	movs	r0, r3
 8003292:	f000 f993 	bl	80035bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003296:	1e03      	subs	r3, r0, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e082      	b.n	80033a4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d03a      	beq.n	8003350 <HAL_I2C_Master_Receive+0x1ac>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d136      	bne.n	8003350 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	0013      	movs	r3, r2
 80032ec:	2200      	movs	r2, #0
 80032ee:	2180      	movs	r1, #128	@ 0x80
 80032f0:	f000 f882 	bl	80033f8 <I2C_WaitOnFlagUntilTimeout>
 80032f4:	1e03      	subs	r3, r0, #0
 80032f6:	d001      	beq.n	80032fc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e053      	b.n	80033a4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	2bff      	cmp	r3, #255	@ 0xff
 8003304:	d911      	bls.n	800332a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	22ff      	movs	r2, #255	@ 0xff
 800330a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003310:	b2da      	uxtb	r2, r3
 8003312:	2380      	movs	r3, #128	@ 0x80
 8003314:	045c      	lsls	r4, r3, #17
 8003316:	230a      	movs	r3, #10
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	8819      	ldrh	r1, [r3, #0]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	2300      	movs	r3, #0
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	0023      	movs	r3, r4
 8003324:	f000 fae0 	bl	80038e8 <I2C_TransferConfig>
 8003328:	e012      	b.n	8003350 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003338:	b2da      	uxtb	r2, r3
 800333a:	2380      	movs	r3, #128	@ 0x80
 800333c:	049c      	lsls	r4, r3, #18
 800333e:	230a      	movs	r3, #10
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	8819      	ldrh	r1, [r3, #0]
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	2300      	movs	r3, #0
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	0023      	movs	r3, r4
 800334c:	f000 facc 	bl	80038e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d197      	bne.n	800328a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	0018      	movs	r0, r3
 8003362:	f000 f8e7 	bl	8003534 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003366:	1e03      	subs	r3, r0, #0
 8003368:	d001      	beq.n	800336e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e01a      	b.n	80033a4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2220      	movs	r2, #32
 8003374:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	490b      	ldr	r1, [pc, #44]	@ (80033b0 <HAL_I2C_Master_Receive+0x20c>)
 8003382:	400a      	ands	r2, r1
 8003384:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2241      	movs	r2, #65	@ 0x41
 800338a:	2120      	movs	r1, #32
 800338c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2242      	movs	r2, #66	@ 0x42
 8003392:	2100      	movs	r1, #0
 8003394:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2240      	movs	r2, #64	@ 0x40
 800339a:	2100      	movs	r1, #0
 800339c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e000      	b.n	80033a4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80033a2:	2302      	movs	r3, #2
  }
}
 80033a4:	0018      	movs	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b007      	add	sp, #28
 80033aa:	bd90      	pop	{r4, r7, pc}
 80033ac:	80002400 	.word	0x80002400
 80033b0:	fe00e800 	.word	0xfe00e800

080033b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2202      	movs	r2, #2
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d103      	bne.n	80033d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2201      	movs	r2, #1
 80033da:	4013      	ands	r3, r2
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d007      	beq.n	80033f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2101      	movs	r1, #1
 80033ec:	430a      	orrs	r2, r1
 80033ee:	619a      	str	r2, [r3, #24]
  }
}
 80033f0:	46c0      	nop			@ (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b002      	add	sp, #8
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	1dfb      	adds	r3, r7, #7
 8003406:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003408:	e03a      	b.n	8003480 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	6839      	ldr	r1, [r7, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	0018      	movs	r0, r3
 8003412:	f000 f971 	bl	80036f8 <I2C_IsErrorOccurred>
 8003416:	1e03      	subs	r3, r0, #0
 8003418:	d001      	beq.n	800341e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e040      	b.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	3301      	adds	r3, #1
 8003422:	d02d      	beq.n	8003480 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003424:	f7ff fa18 	bl	8002858 <HAL_GetTick>
 8003428:	0002      	movs	r2, r0
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d302      	bcc.n	800343a <I2C_WaitOnFlagUntilTimeout+0x42>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d122      	bne.n	8003480 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	4013      	ands	r3, r2
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	425a      	negs	r2, r3
 800344a:	4153      	adcs	r3, r2
 800344c:	b2db      	uxtb	r3, r3
 800344e:	001a      	movs	r2, r3
 8003450:	1dfb      	adds	r3, r7, #7
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d113      	bne.n	8003480 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345c:	2220      	movs	r2, #32
 800345e:	431a      	orrs	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2241      	movs	r2, #65	@ 0x41
 8003468:	2120      	movs	r1, #32
 800346a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2242      	movs	r2, #66	@ 0x42
 8003470:	2100      	movs	r1, #0
 8003472:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2240      	movs	r2, #64	@ 0x40
 8003478:	2100      	movs	r1, #0
 800347a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e00f      	b.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	4013      	ands	r3, r2
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	425a      	negs	r2, r3
 8003490:	4153      	adcs	r3, r2
 8003492:	b2db      	uxtb	r3, r3
 8003494:	001a      	movs	r2, r3
 8003496:	1dfb      	adds	r3, r7, #7
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d0b5      	beq.n	800340a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b004      	add	sp, #16
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034b4:	e032      	b.n	800351c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	0018      	movs	r0, r3
 80034be:	f000 f91b 	bl	80036f8 <I2C_IsErrorOccurred>
 80034c2:	1e03      	subs	r3, r0, #0
 80034c4:	d001      	beq.n	80034ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e030      	b.n	800352c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3301      	adds	r3, #1
 80034ce:	d025      	beq.n	800351c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d0:	f7ff f9c2 	bl	8002858 <HAL_GetTick>
 80034d4:	0002      	movs	r2, r0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d302      	bcc.n	80034e6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d11a      	bne.n	800351c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	2202      	movs	r2, #2
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d013      	beq.n	800351c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f8:	2220      	movs	r2, #32
 80034fa:	431a      	orrs	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2241      	movs	r2, #65	@ 0x41
 8003504:	2120      	movs	r1, #32
 8003506:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2242      	movs	r2, #66	@ 0x42
 800350c:	2100      	movs	r1, #0
 800350e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2240      	movs	r2, #64	@ 0x40
 8003514:	2100      	movs	r1, #0
 8003516:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e007      	b.n	800352c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2202      	movs	r2, #2
 8003524:	4013      	ands	r3, r2
 8003526:	2b02      	cmp	r3, #2
 8003528:	d1c5      	bne.n	80034b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	0018      	movs	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	b004      	add	sp, #16
 8003532:	bd80      	pop	{r7, pc}

08003534 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003540:	e02f      	b.n	80035a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	0018      	movs	r0, r3
 800354a:	f000 f8d5 	bl	80036f8 <I2C_IsErrorOccurred>
 800354e:	1e03      	subs	r3, r0, #0
 8003550:	d001      	beq.n	8003556 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e02d      	b.n	80035b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003556:	f7ff f97f 	bl	8002858 <HAL_GetTick>
 800355a:	0002      	movs	r2, r0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	429a      	cmp	r2, r3
 8003564:	d302      	bcc.n	800356c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d11a      	bne.n	80035a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2220      	movs	r2, #32
 8003574:	4013      	ands	r3, r2
 8003576:	2b20      	cmp	r3, #32
 8003578:	d013      	beq.n	80035a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357e:	2220      	movs	r2, #32
 8003580:	431a      	orrs	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2241      	movs	r2, #65	@ 0x41
 800358a:	2120      	movs	r1, #32
 800358c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2242      	movs	r2, #66	@ 0x42
 8003592:	2100      	movs	r1, #0
 8003594:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2240      	movs	r2, #64	@ 0x40
 800359a:	2100      	movs	r1, #0
 800359c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e007      	b.n	80035b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2220      	movs	r2, #32
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d1c8      	bne.n	8003542 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	0018      	movs	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b004      	add	sp, #16
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c8:	2317      	movs	r3, #23
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80035d0:	e07b      	b.n	80036ca <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	0018      	movs	r0, r3
 80035da:	f000 f88d 	bl	80036f8 <I2C_IsErrorOccurred>
 80035de:	1e03      	subs	r3, r0, #0
 80035e0:	d003      	beq.n	80035ea <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80035e2:	2317      	movs	r3, #23
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2220      	movs	r2, #32
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d140      	bne.n	800367a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80035f8:	2117      	movs	r1, #23
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d13b      	bne.n	800367a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	2204      	movs	r2, #4
 800360a:	4013      	ands	r3, r2
 800360c:	2b04      	cmp	r3, #4
 800360e:	d106      	bne.n	800361e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003618:	187b      	adds	r3, r7, r1
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2210      	movs	r2, #16
 8003626:	4013      	ands	r3, r2
 8003628:	2b10      	cmp	r3, #16
 800362a:	d123      	bne.n	8003674 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2210      	movs	r2, #16
 8003632:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2204      	movs	r2, #4
 8003638:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2220      	movs	r2, #32
 8003640:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4929      	ldr	r1, [pc, #164]	@ (80036f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800364e:	400a      	ands	r2, r1
 8003650:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2241      	movs	r2, #65	@ 0x41
 8003656:	2120      	movs	r1, #32
 8003658:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2242      	movs	r2, #66	@ 0x42
 800365e:	2100      	movs	r1, #0
 8003660:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2240      	movs	r2, #64	@ 0x40
 8003666:	2100      	movs	r1, #0
 8003668:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800366a:	2317      	movs	r3, #23
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	2201      	movs	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	e002      	b.n	800367a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800367a:	f7ff f8ed 	bl	8002858 <HAL_GetTick>
 800367e:	0002      	movs	r2, r0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d11c      	bne.n	80036ca <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003690:	2017      	movs	r0, #23
 8003692:	183b      	adds	r3, r7, r0
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d117      	bne.n	80036ca <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2204      	movs	r2, #4
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d010      	beq.n	80036ca <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ac:	2220      	movs	r2, #32
 80036ae:	431a      	orrs	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2241      	movs	r2, #65	@ 0x41
 80036b8:	2120      	movs	r1, #32
 80036ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2240      	movs	r2, #64	@ 0x40
 80036c0:	2100      	movs	r1, #0
 80036c2:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80036c4:	183b      	adds	r3, r7, r0
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	2204      	movs	r2, #4
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d005      	beq.n	80036e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80036d8:	2317      	movs	r3, #23
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d100      	bne.n	80036e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80036e2:	e776      	b.n	80035d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80036e4:	2317      	movs	r3, #23
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	781b      	ldrb	r3, [r3, #0]
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b006      	add	sp, #24
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			@ (mov r8, r8)
 80036f4:	fe00e800 	.word	0xfe00e800

080036f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	@ 0x28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003704:	2327      	movs	r3, #39	@ 0x27
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2210      	movs	r2, #16
 8003720:	4013      	ands	r3, r2
 8003722:	d100      	bne.n	8003726 <I2C_IsErrorOccurred+0x2e>
 8003724:	e079      	b.n	800381a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2210      	movs	r2, #16
 800372c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800372e:	e057      	b.n	80037e0 <I2C_IsErrorOccurred+0xe8>
 8003730:	2227      	movs	r2, #39	@ 0x27
 8003732:	18bb      	adds	r3, r7, r2
 8003734:	18ba      	adds	r2, r7, r2
 8003736:	7812      	ldrb	r2, [r2, #0]
 8003738:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	3301      	adds	r3, #1
 800373e:	d04f      	beq.n	80037e0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003740:	f7ff f88a 	bl	8002858 <HAL_GetTick>
 8003744:	0002      	movs	r2, r0
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	429a      	cmp	r2, r3
 800374e:	d302      	bcc.n	8003756 <I2C_IsErrorOccurred+0x5e>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d144      	bne.n	80037e0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	2380      	movs	r3, #128	@ 0x80
 800375e:	01db      	lsls	r3, r3, #7
 8003760:	4013      	ands	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003764:	2013      	movs	r0, #19
 8003766:	183b      	adds	r3, r7, r0
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	2142      	movs	r1, #66	@ 0x42
 800376c:	5c52      	ldrb	r2, [r2, r1]
 800376e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	2380      	movs	r3, #128	@ 0x80
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	401a      	ands	r2, r3
 800377c:	2380      	movs	r3, #128	@ 0x80
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	429a      	cmp	r2, r3
 8003782:	d126      	bne.n	80037d2 <I2C_IsErrorOccurred+0xda>
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	2380      	movs	r3, #128	@ 0x80
 8003788:	01db      	lsls	r3, r3, #7
 800378a:	429a      	cmp	r2, r3
 800378c:	d021      	beq.n	80037d2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800378e:	183b      	adds	r3, r7, r0
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b20      	cmp	r3, #32
 8003794:	d01d      	beq.n	80037d2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2180      	movs	r1, #128	@ 0x80
 80037a2:	01c9      	lsls	r1, r1, #7
 80037a4:	430a      	orrs	r2, r1
 80037a6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037a8:	f7ff f856 	bl	8002858 <HAL_GetTick>
 80037ac:	0003      	movs	r3, r0
 80037ae:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037b0:	e00f      	b.n	80037d2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037b2:	f7ff f851 	bl	8002858 <HAL_GetTick>
 80037b6:	0002      	movs	r2, r0
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b19      	cmp	r3, #25
 80037be:	d908      	bls.n	80037d2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	2220      	movs	r2, #32
 80037c4:	4313      	orrs	r3, r2
 80037c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80037c8:	2327      	movs	r3, #39	@ 0x27
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]

              break;
 80037d0:	e006      	b.n	80037e0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2220      	movs	r2, #32
 80037da:	4013      	ands	r3, r2
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d1e8      	bne.n	80037b2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2220      	movs	r2, #32
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d004      	beq.n	80037f8 <I2C_IsErrorOccurred+0x100>
 80037ee:	2327      	movs	r3, #39	@ 0x27
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d09b      	beq.n	8003730 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037f8:	2327      	movs	r3, #39	@ 0x27
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2220      	movs	r2, #32
 8003808:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	2204      	movs	r2, #4
 800380e:	4313      	orrs	r3, r2
 8003810:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003812:	2327      	movs	r3, #39	@ 0x27
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	2380      	movs	r3, #128	@ 0x80
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4013      	ands	r3, r2
 800382a:	d00c      	beq.n	8003846 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	2201      	movs	r2, #1
 8003830:	4313      	orrs	r3, r2
 8003832:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2280      	movs	r2, #128	@ 0x80
 800383a:	0052      	lsls	r2, r2, #1
 800383c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800383e:	2327      	movs	r3, #39	@ 0x27
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	2380      	movs	r3, #128	@ 0x80
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4013      	ands	r3, r2
 800384e:	d00c      	beq.n	800386a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	2208      	movs	r2, #8
 8003854:	4313      	orrs	r3, r2
 8003856:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2280      	movs	r2, #128	@ 0x80
 800385e:	00d2      	lsls	r2, r2, #3
 8003860:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003862:	2327      	movs	r3, #39	@ 0x27
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	2380      	movs	r3, #128	@ 0x80
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4013      	ands	r3, r2
 8003872:	d00c      	beq.n	800388e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	2202      	movs	r2, #2
 8003878:	4313      	orrs	r3, r2
 800387a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2280      	movs	r2, #128	@ 0x80
 8003882:	0092      	lsls	r2, r2, #2
 8003884:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003886:	2327      	movs	r3, #39	@ 0x27
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	2201      	movs	r2, #1
 800388c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800388e:	2327      	movs	r3, #39	@ 0x27
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01d      	beq.n	80038d4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	0018      	movs	r0, r3
 800389c:	f7ff fd8a 	bl	80033b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	490e      	ldr	r1, [pc, #56]	@ (80038e4 <I2C_IsErrorOccurred+0x1ec>)
 80038ac:	400a      	ands	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2241      	movs	r2, #65	@ 0x41
 80038c0:	2120      	movs	r1, #32
 80038c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2242      	movs	r2, #66	@ 0x42
 80038c8:	2100      	movs	r1, #0
 80038ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2240      	movs	r2, #64	@ 0x40
 80038d0:	2100      	movs	r1, #0
 80038d2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80038d4:	2327      	movs	r3, #39	@ 0x27
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	781b      	ldrb	r3, [r3, #0]
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b00a      	add	sp, #40	@ 0x28
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	fe00e800 	.word	0xfe00e800

080038e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	0008      	movs	r0, r1
 80038f2:	0011      	movs	r1, r2
 80038f4:	607b      	str	r3, [r7, #4]
 80038f6:	240a      	movs	r4, #10
 80038f8:	193b      	adds	r3, r7, r4
 80038fa:	1c02      	adds	r2, r0, #0
 80038fc:	801a      	strh	r2, [r3, #0]
 80038fe:	2009      	movs	r0, #9
 8003900:	183b      	adds	r3, r7, r0
 8003902:	1c0a      	adds	r2, r1, #0
 8003904:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003906:	193b      	adds	r3, r7, r4
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	059b      	lsls	r3, r3, #22
 800390c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800390e:	183b      	adds	r3, r7, r0
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	0419      	lsls	r1, r3, #16
 8003914:	23ff      	movs	r3, #255	@ 0xff
 8003916:	041b      	lsls	r3, r3, #16
 8003918:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800391a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003922:	4313      	orrs	r3, r2
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	085b      	lsrs	r3, r3, #1
 8003928:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003932:	0d51      	lsrs	r1, r2, #21
 8003934:	2280      	movs	r2, #128	@ 0x80
 8003936:	00d2      	lsls	r2, r2, #3
 8003938:	400a      	ands	r2, r1
 800393a:	4907      	ldr	r1, [pc, #28]	@ (8003958 <I2C_TransferConfig+0x70>)
 800393c:	430a      	orrs	r2, r1
 800393e:	43d2      	mvns	r2, r2
 8003940:	401a      	ands	r2, r3
 8003942:	0011      	movs	r1, r2
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	46bd      	mov	sp, r7
 8003952:	b007      	add	sp, #28
 8003954:	bd90      	pop	{r4, r7, pc}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	03ff63ff 	.word	0x03ff63ff

0800395c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2241      	movs	r2, #65	@ 0x41
 800396a:	5c9b      	ldrb	r3, [r3, r2]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b20      	cmp	r3, #32
 8003970:	d138      	bne.n	80039e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2240      	movs	r2, #64	@ 0x40
 8003976:	5c9b      	ldrb	r3, [r3, r2]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800397c:	2302      	movs	r3, #2
 800397e:	e032      	b.n	80039e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2240      	movs	r2, #64	@ 0x40
 8003984:	2101      	movs	r1, #1
 8003986:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2241      	movs	r2, #65	@ 0x41
 800398c:	2124      	movs	r1, #36	@ 0x24
 800398e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2101      	movs	r1, #1
 800399c:	438a      	bics	r2, r1
 800399e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4911      	ldr	r1, [pc, #68]	@ (80039f0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80039ac:	400a      	ands	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6819      	ldr	r1, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2101      	movs	r1, #1
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2241      	movs	r2, #65	@ 0x41
 80039d4:	2120      	movs	r1, #32
 80039d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2240      	movs	r2, #64	@ 0x40
 80039dc:	2100      	movs	r1, #0
 80039de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	0018      	movs	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b002      	add	sp, #8
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	ffffefff 	.word	0xffffefff

080039f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2241      	movs	r2, #65	@ 0x41
 8003a02:	5c9b      	ldrb	r3, [r3, r2]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	d139      	bne.n	8003a7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2240      	movs	r2, #64	@ 0x40
 8003a0e:	5c9b      	ldrb	r3, [r3, r2]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e033      	b.n	8003a80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2240      	movs	r2, #64	@ 0x40
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2241      	movs	r2, #65	@ 0x41
 8003a24:	2124      	movs	r1, #36	@ 0x24
 8003a26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2101      	movs	r1, #1
 8003a34:	438a      	bics	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a11      	ldr	r2, [pc, #68]	@ (8003a88 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2101      	movs	r1, #1
 8003a66:	430a      	orrs	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2241      	movs	r2, #65	@ 0x41
 8003a6e:	2120      	movs	r1, #32
 8003a70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2240      	movs	r2, #64	@ 0x40
 8003a76:	2100      	movs	r1, #0
 8003a78:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
  }
}
 8003a80:	0018      	movs	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b004      	add	sp, #16
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	fffff0ff 	.word	0xfffff0ff

08003a8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e0e5      	b.n	8003c6a <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2235      	movs	r2, #53	@ 0x35
 8003aa2:	5c9b      	ldrb	r3, [r3, r2]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d107      	bne.n	8003aba <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2234      	movs	r2, #52	@ 0x34
 8003aae:	2100      	movs	r1, #0
 8003ab0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f7fe fc05 	bl	80022c4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2235      	movs	r2, #53	@ 0x35
 8003abe:	2102      	movs	r1, #2
 8003ac0:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4969      	ldr	r1, [pc, #420]	@ (8003c74 <HAL_I2S_Init+0x1e8>)
 8003ace:	400a      	ands	r2, r1
 8003ad0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d100      	bne.n	8003ae4 <HAL_I2S_Init+0x58>
 8003ae2:	e076      	b.n	8003bd2 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d102      	bne.n	8003af2 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003aec:	2310      	movs	r3, #16
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e001      	b.n	8003af6 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003af2:	2320      	movs	r3, #32
 8003af4:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d802      	bhi.n	8003b04 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8003b04:	2380      	movs	r3, #128	@ 0x80
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f000 ff5b 	bl	80049c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691a      	ldr	r2, [r3, #16]
 8003b16:	2380      	movs	r3, #128	@ 0x80
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d131      	bne.n	8003b82 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d016      	beq.n	8003b54 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7fc fae9 	bl	8000104 <__udivsi3>
 8003b32:	0003      	movs	r3, r0
 8003b34:	001a      	movs	r2, r3
 8003b36:	0013      	movs	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	001a      	movs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	0019      	movs	r1, r3
 8003b46:	0010      	movs	r0, r2
 8003b48:	f7fc fadc 	bl	8000104 <__udivsi3>
 8003b4c:	0003      	movs	r3, r0
 8003b4e:	3305      	adds	r3, #5
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	e02a      	b.n	8003baa <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	0019      	movs	r1, r3
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7fc fad2 	bl	8000104 <__udivsi3>
 8003b60:	0003      	movs	r3, r0
 8003b62:	001a      	movs	r2, r3
 8003b64:	0013      	movs	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	189b      	adds	r3, r3, r2
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	001a      	movs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	0019      	movs	r1, r3
 8003b74:	0010      	movs	r0, r2
 8003b76:	f7fc fac5 	bl	8000104 <__udivsi3>
 8003b7a:	0003      	movs	r3, r0
 8003b7c:	3305      	adds	r3, #5
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	e013      	b.n	8003baa <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b82:	6979      	ldr	r1, [r7, #20]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f7fc fabd 	bl	8000104 <__udivsi3>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	001a      	movs	r2, r3
 8003b8e:	0013      	movs	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	189b      	adds	r3, r3, r2
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	001a      	movs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	0019      	movs	r1, r3
 8003b9e:	0010      	movs	r0, r2
 8003ba0:	f7fc fab0 	bl	8000104 <__udivsi3>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	3305      	adds	r3, #5
 8003ba8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	210a      	movs	r1, #10
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f7fc faa8 	bl	8000104 <__udivsi3>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	e003      	b.n	8003bda <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d902      	bls.n	8003be6 <HAL_I2S_Init+0x15a>
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	2bff      	cmp	r3, #255	@ 0xff
 8003be4:	d907      	bls.n	8003bf6 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bea:	2210      	movs	r2, #16
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e039      	b.n	8003c6a <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	0011      	movs	r1, r2
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4a18      	ldr	r2, [pc, #96]	@ (8003c74 <HAL_I2S_Init+0x1e8>)
 8003c12:	401a      	ands	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4319      	orrs	r1, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4319      	orrs	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2180      	movs	r1, #128	@ 0x80
 8003c32:	0109      	lsls	r1, r1, #4
 8003c34:	430a      	orrs	r2, r1
 8003c36:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b30      	cmp	r3, #48	@ 0x30
 8003c3e:	d003      	beq.n	8003c48 <HAL_I2S_Init+0x1bc>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2bb0      	cmp	r3, #176	@ 0xb0
 8003c46:	d108      	bne.n	8003c5a <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69da      	ldr	r2, [r3, #28]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2180      	movs	r1, #128	@ 0x80
 8003c54:	0149      	lsls	r1, r1, #5
 8003c56:	430a      	orrs	r2, r1
 8003c58:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2235      	movs	r2, #53	@ 0x35
 8003c64:	2101      	movs	r1, #1
 8003c66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b008      	add	sp, #32
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			@ (mov r8, r8)
 8003c74:	fffff040 	.word	0xfffff040

08003c78 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c7c:	4b04      	ldr	r3, [pc, #16]	@ (8003c90 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4b03      	ldr	r3, [pc, #12]	@ (8003c90 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003c82:	2180      	movs	r1, #128	@ 0x80
 8003c84:	0049      	lsls	r1, r1, #1
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]
}
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40007000 	.word	0x40007000

08003c94 <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c98:	4b04      	ldr	r3, [pc, #16]	@ (8003cac <HAL_PWR_DisableBkUpAccess+0x18>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b03      	ldr	r3, [pc, #12]	@ (8003cac <HAL_PWR_DisableBkUpAccess+0x18>)
 8003c9e:	4904      	ldr	r1, [pc, #16]	@ (8003cb0 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8003ca0:	400a      	ands	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
}
 8003ca4:	46c0      	nop			@ (mov r8, r8)
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	46c0      	nop			@ (mov r8, r8)
 8003cac:	40007000 	.word	0x40007000
 8003cb0:	fffffeff 	.word	0xfffffeff

08003cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003cbc:	4b19      	ldr	r3, [pc, #100]	@ (8003d24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a19      	ldr	r2, [pc, #100]	@ (8003d28 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	0019      	movs	r1, r3
 8003cc6:	4b17      	ldr	r3, [pc, #92]	@ (8003d24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	2380      	movs	r3, #128	@ 0x80
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d11f      	bne.n	8003d18 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003cd8:	4b14      	ldr	r3, [pc, #80]	@ (8003d2c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	0013      	movs	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	189b      	adds	r3, r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4912      	ldr	r1, [pc, #72]	@ (8003d30 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f7fc fa0c 	bl	8000104 <__udivsi3>
 8003cec:	0003      	movs	r3, r0
 8003cee:	3301      	adds	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cf2:	e008      	b.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	e001      	b.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e009      	b.n	8003d1a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d06:	4b07      	ldr	r3, [pc, #28]	@ (8003d24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d08:	695a      	ldr	r2, [r3, #20]
 8003d0a:	2380      	movs	r3, #128	@ 0x80
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	401a      	ands	r2, r3
 8003d10:	2380      	movs	r3, #128	@ 0x80
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d0ed      	beq.n	8003cf4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b004      	add	sp, #16
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	40007000 	.word	0x40007000
 8003d28:	fffff9ff 	.word	0xfffff9ff
 8003d2c:	20000060 	.word	0x20000060
 8003d30:	000f4240 	.word	0x000f4240

08003d34 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003d38:	4b03      	ldr	r3, [pc, #12]	@ (8003d48 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	23e0      	movs	r3, #224	@ 0xe0
 8003d3e:	01db      	lsls	r3, r3, #7
 8003d40:	4013      	ands	r3, r2
}
 8003d42:	0018      	movs	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40021000 	.word	0x40021000

08003d4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e2fe      	b.n	800435c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2201      	movs	r2, #1
 8003d64:	4013      	ands	r3, r2
 8003d66:	d100      	bne.n	8003d6a <HAL_RCC_OscConfig+0x1e>
 8003d68:	e07c      	b.n	8003e64 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d6a:	4bc3      	ldr	r3, [pc, #780]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2238      	movs	r2, #56	@ 0x38
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d74:	4bc0      	ldr	r3, [pc, #768]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	2b10      	cmp	r3, #16
 8003d82:	d102      	bne.n	8003d8a <HAL_RCC_OscConfig+0x3e>
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d002      	beq.n	8003d90 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d10b      	bne.n	8003da8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d90:	4bb9      	ldr	r3, [pc, #740]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	2380      	movs	r3, #128	@ 0x80
 8003d96:	029b      	lsls	r3, r3, #10
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d062      	beq.n	8003e62 <HAL_RCC_OscConfig+0x116>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d15e      	bne.n	8003e62 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e2d9      	b.n	800435c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	2380      	movs	r3, #128	@ 0x80
 8003dae:	025b      	lsls	r3, r3, #9
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d107      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x78>
 8003db4:	4bb0      	ldr	r3, [pc, #704]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4baf      	ldr	r3, [pc, #700]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003dba:	2180      	movs	r1, #128	@ 0x80
 8003dbc:	0249      	lsls	r1, r1, #9
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	e020      	b.n	8003e06 <HAL_RCC_OscConfig+0xba>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	23a0      	movs	r3, #160	@ 0xa0
 8003dca:	02db      	lsls	r3, r3, #11
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d10e      	bne.n	8003dee <HAL_RCC_OscConfig+0xa2>
 8003dd0:	4ba9      	ldr	r3, [pc, #676]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4ba8      	ldr	r3, [pc, #672]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003dd6:	2180      	movs	r1, #128	@ 0x80
 8003dd8:	02c9      	lsls	r1, r1, #11
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	4ba6      	ldr	r3, [pc, #664]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4ba5      	ldr	r3, [pc, #660]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003de4:	2180      	movs	r1, #128	@ 0x80
 8003de6:	0249      	lsls	r1, r1, #9
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	e00b      	b.n	8003e06 <HAL_RCC_OscConfig+0xba>
 8003dee:	4ba2      	ldr	r3, [pc, #648]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4ba1      	ldr	r3, [pc, #644]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003df4:	49a1      	ldr	r1, [pc, #644]	@ (800407c <HAL_RCC_OscConfig+0x330>)
 8003df6:	400a      	ands	r2, r1
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	4b9f      	ldr	r3, [pc, #636]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	4b9e      	ldr	r3, [pc, #632]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003e00:	499f      	ldr	r1, [pc, #636]	@ (8004080 <HAL_RCC_OscConfig+0x334>)
 8003e02:	400a      	ands	r2, r1
 8003e04:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d014      	beq.n	8003e38 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fe fd23 	bl	8002858 <HAL_GetTick>
 8003e12:	0003      	movs	r3, r0
 8003e14:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e18:	f7fe fd1e 	bl	8002858 <HAL_GetTick>
 8003e1c:	0002      	movs	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b64      	cmp	r3, #100	@ 0x64
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e298      	b.n	800435c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e2a:	4b93      	ldr	r3, [pc, #588]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	2380      	movs	r3, #128	@ 0x80
 8003e30:	029b      	lsls	r3, r3, #10
 8003e32:	4013      	ands	r3, r2
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0xcc>
 8003e36:	e015      	b.n	8003e64 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fe fd0e 	bl	8002858 <HAL_GetTick>
 8003e3c:	0003      	movs	r3, r0
 8003e3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e42:	f7fe fd09 	bl	8002858 <HAL_GetTick>
 8003e46:	0002      	movs	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b64      	cmp	r3, #100	@ 0x64
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e283      	b.n	800435c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e54:	4b88      	ldr	r3, [pc, #544]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	2380      	movs	r3, #128	@ 0x80
 8003e5a:	029b      	lsls	r3, r3, #10
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d1f0      	bne.n	8003e42 <HAL_RCC_OscConfig+0xf6>
 8003e60:	e000      	b.n	8003e64 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e62:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d100      	bne.n	8003e70 <HAL_RCC_OscConfig+0x124>
 8003e6e:	e099      	b.n	8003fa4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e70:	4b81      	ldr	r3, [pc, #516]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2238      	movs	r2, #56	@ 0x38
 8003e76:	4013      	ands	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	2203      	movs	r2, #3
 8003e80:	4013      	ands	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d102      	bne.n	8003e90 <HAL_RCC_OscConfig+0x144>
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d002      	beq.n	8003e96 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d135      	bne.n	8003f02 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e96:	4b78      	ldr	r3, [pc, #480]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	2380      	movs	r3, #128	@ 0x80
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d005      	beq.n	8003eae <HAL_RCC_OscConfig+0x162>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e256      	b.n	800435c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eae:	4b72      	ldr	r3, [pc, #456]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4a74      	ldr	r2, [pc, #464]	@ (8004084 <HAL_RCC_OscConfig+0x338>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	021a      	lsls	r2, r3, #8
 8003ebe:	4b6e      	ldr	r3, [pc, #440]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d112      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003eca:	4b6b      	ldr	r3, [pc, #428]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a6e      	ldr	r2, [pc, #440]	@ (8004088 <HAL_RCC_OscConfig+0x33c>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	4b67      	ldr	r3, [pc, #412]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003eda:	430a      	orrs	r2, r1
 8003edc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003ede:	4b66      	ldr	r3, [pc, #408]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	0adb      	lsrs	r3, r3, #11
 8003ee4:	2207      	movs	r2, #7
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	4a68      	ldr	r2, [pc, #416]	@ (800408c <HAL_RCC_OscConfig+0x340>)
 8003eea:	40da      	lsrs	r2, r3
 8003eec:	4b68      	ldr	r3, [pc, #416]	@ (8004090 <HAL_RCC_OscConfig+0x344>)
 8003eee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ef0:	4b68      	ldr	r3, [pc, #416]	@ (8004094 <HAL_RCC_OscConfig+0x348>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f7fe fc53 	bl	80027a0 <HAL_InitTick>
 8003efa:	1e03      	subs	r3, r0, #0
 8003efc:	d051      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e22c      	b.n	800435c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d030      	beq.n	8003f6c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a5e      	ldr	r2, [pc, #376]	@ (8004088 <HAL_RCC_OscConfig+0x33c>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	0019      	movs	r1, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	4b57      	ldr	r3, [pc, #348]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003f1e:	4b56      	ldr	r3, [pc, #344]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4b55      	ldr	r3, [pc, #340]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003f24:	2180      	movs	r1, #128	@ 0x80
 8003f26:	0049      	lsls	r1, r1, #1
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fe fc94 	bl	8002858 <HAL_GetTick>
 8003f30:	0003      	movs	r3, r0
 8003f32:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f36:	f7fe fc8f 	bl	8002858 <HAL_GetTick>
 8003f3a:	0002      	movs	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e209      	b.n	800435c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f48:	4b4b      	ldr	r3, [pc, #300]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	2380      	movs	r3, #128	@ 0x80
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4013      	ands	r3, r2
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f54:	4b48      	ldr	r3, [pc, #288]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4a4a      	ldr	r2, [pc, #296]	@ (8004084 <HAL_RCC_OscConfig+0x338>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	021a      	lsls	r2, r3, #8
 8003f64:	4b44      	ldr	r3, [pc, #272]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	e01b      	b.n	8003fa4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003f6c:	4b42      	ldr	r3, [pc, #264]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4b41      	ldr	r3, [pc, #260]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003f72:	4949      	ldr	r1, [pc, #292]	@ (8004098 <HAL_RCC_OscConfig+0x34c>)
 8003f74:	400a      	ands	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fe fc6e 	bl	8002858 <HAL_GetTick>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f82:	f7fe fc69 	bl	8002858 <HAL_GetTick>
 8003f86:	0002      	movs	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e1e3      	b.n	800435c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f94:	4b38      	ldr	r3, [pc, #224]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	2380      	movs	r3, #128	@ 0x80
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d1f0      	bne.n	8003f82 <HAL_RCC_OscConfig+0x236>
 8003fa0:	e000      	b.n	8003fa4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2208      	movs	r2, #8
 8003faa:	4013      	ands	r3, r2
 8003fac:	d047      	beq.n	800403e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003fae:	4b32      	ldr	r3, [pc, #200]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2238      	movs	r2, #56	@ 0x38
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b18      	cmp	r3, #24
 8003fb8:	d10a      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003fba:	4b2f      	ldr	r3, [pc, #188]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d03c      	beq.n	800403e <HAL_RCC_OscConfig+0x2f2>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d138      	bne.n	800403e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e1c5      	b.n	800435c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d019      	beq.n	800400c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003fd8:	4b27      	ldr	r3, [pc, #156]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003fda:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fdc:	4b26      	ldr	r3, [pc, #152]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8003fde:	2101      	movs	r1, #1
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fe fc38 	bl	8002858 <HAL_GetTick>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fee:	f7fe fc33 	bl	8002858 <HAL_GetTick>
 8003ff2:	0002      	movs	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e1ad      	b.n	800435c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004000:	4b1d      	ldr	r3, [pc, #116]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8004002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004004:	2202      	movs	r2, #2
 8004006:	4013      	ands	r3, r2
 8004008:	d0f1      	beq.n	8003fee <HAL_RCC_OscConfig+0x2a2>
 800400a:	e018      	b.n	800403e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800400c:	4b1a      	ldr	r3, [pc, #104]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 800400e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004010:	4b19      	ldr	r3, [pc, #100]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8004012:	2101      	movs	r1, #1
 8004014:	438a      	bics	r2, r1
 8004016:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fe fc1e 	bl	8002858 <HAL_GetTick>
 800401c:	0003      	movs	r3, r0
 800401e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004022:	f7fe fc19 	bl	8002858 <HAL_GetTick>
 8004026:	0002      	movs	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e193      	b.n	800435c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004034:	4b10      	ldr	r3, [pc, #64]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8004036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004038:	2202      	movs	r2, #2
 800403a:	4013      	ands	r3, r2
 800403c:	d1f1      	bne.n	8004022 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2204      	movs	r2, #4
 8004044:	4013      	ands	r3, r2
 8004046:	d100      	bne.n	800404a <HAL_RCC_OscConfig+0x2fe>
 8004048:	e0c6      	b.n	80041d8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404a:	231f      	movs	r3, #31
 800404c:	18fb      	adds	r3, r7, r3
 800404e:	2200      	movs	r2, #0
 8004050:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004052:	4b09      	ldr	r3, [pc, #36]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2238      	movs	r2, #56	@ 0x38
 8004058:	4013      	ands	r3, r2
 800405a:	2b20      	cmp	r3, #32
 800405c:	d11e      	bne.n	800409c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800405e:	4b06      	ldr	r3, [pc, #24]	@ (8004078 <HAL_RCC_OscConfig+0x32c>)
 8004060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004062:	2202      	movs	r2, #2
 8004064:	4013      	ands	r3, r2
 8004066:	d100      	bne.n	800406a <HAL_RCC_OscConfig+0x31e>
 8004068:	e0b6      	b.n	80041d8 <HAL_RCC_OscConfig+0x48c>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d000      	beq.n	8004074 <HAL_RCC_OscConfig+0x328>
 8004072:	e0b1      	b.n	80041d8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e171      	b.n	800435c <HAL_RCC_OscConfig+0x610>
 8004078:	40021000 	.word	0x40021000
 800407c:	fffeffff 	.word	0xfffeffff
 8004080:	fffbffff 	.word	0xfffbffff
 8004084:	ffff80ff 	.word	0xffff80ff
 8004088:	ffffc7ff 	.word	0xffffc7ff
 800408c:	00f42400 	.word	0x00f42400
 8004090:	20000060 	.word	0x20000060
 8004094:	20000064 	.word	0x20000064
 8004098:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800409c:	4bb1      	ldr	r3, [pc, #708]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 800409e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040a0:	2380      	movs	r3, #128	@ 0x80
 80040a2:	055b      	lsls	r3, r3, #21
 80040a4:	4013      	ands	r3, r2
 80040a6:	d101      	bne.n	80040ac <HAL_RCC_OscConfig+0x360>
 80040a8:	2301      	movs	r3, #1
 80040aa:	e000      	b.n	80040ae <HAL_RCC_OscConfig+0x362>
 80040ac:	2300      	movs	r3, #0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d011      	beq.n	80040d6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80040b2:	4bac      	ldr	r3, [pc, #688]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 80040b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040b6:	4bab      	ldr	r3, [pc, #684]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 80040b8:	2180      	movs	r1, #128	@ 0x80
 80040ba:	0549      	lsls	r1, r1, #21
 80040bc:	430a      	orrs	r2, r1
 80040be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80040c0:	4ba8      	ldr	r3, [pc, #672]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 80040c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040c4:	2380      	movs	r3, #128	@ 0x80
 80040c6:	055b      	lsls	r3, r3, #21
 80040c8:	4013      	ands	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80040ce:	231f      	movs	r3, #31
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040d6:	4ba4      	ldr	r3, [pc, #656]	@ (8004368 <HAL_RCC_OscConfig+0x61c>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	2380      	movs	r3, #128	@ 0x80
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	4013      	ands	r3, r2
 80040e0:	d11a      	bne.n	8004118 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040e2:	4ba1      	ldr	r3, [pc, #644]	@ (8004368 <HAL_RCC_OscConfig+0x61c>)
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	4ba0      	ldr	r3, [pc, #640]	@ (8004368 <HAL_RCC_OscConfig+0x61c>)
 80040e8:	2180      	movs	r1, #128	@ 0x80
 80040ea:	0049      	lsls	r1, r1, #1
 80040ec:	430a      	orrs	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80040f0:	f7fe fbb2 	bl	8002858 <HAL_GetTick>
 80040f4:	0003      	movs	r3, r0
 80040f6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040fa:	f7fe fbad 	bl	8002858 <HAL_GetTick>
 80040fe:	0002      	movs	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e127      	b.n	800435c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800410c:	4b96      	ldr	r3, [pc, #600]	@ (8004368 <HAL_RCC_OscConfig+0x61c>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	2380      	movs	r3, #128	@ 0x80
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4013      	ands	r3, r2
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d106      	bne.n	800412e <HAL_RCC_OscConfig+0x3e2>
 8004120:	4b90      	ldr	r3, [pc, #576]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 8004122:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004124:	4b8f      	ldr	r3, [pc, #572]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 8004126:	2101      	movs	r1, #1
 8004128:	430a      	orrs	r2, r1
 800412a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800412c:	e01c      	b.n	8004168 <HAL_RCC_OscConfig+0x41c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b05      	cmp	r3, #5
 8004134:	d10c      	bne.n	8004150 <HAL_RCC_OscConfig+0x404>
 8004136:	4b8b      	ldr	r3, [pc, #556]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 8004138:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800413a:	4b8a      	ldr	r3, [pc, #552]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 800413c:	2104      	movs	r1, #4
 800413e:	430a      	orrs	r2, r1
 8004140:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004142:	4b88      	ldr	r3, [pc, #544]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 8004144:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004146:	4b87      	ldr	r3, [pc, #540]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 8004148:	2101      	movs	r1, #1
 800414a:	430a      	orrs	r2, r1
 800414c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800414e:	e00b      	b.n	8004168 <HAL_RCC_OscConfig+0x41c>
 8004150:	4b84      	ldr	r3, [pc, #528]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 8004152:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004154:	4b83      	ldr	r3, [pc, #524]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 8004156:	2101      	movs	r1, #1
 8004158:	438a      	bics	r2, r1
 800415a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800415c:	4b81      	ldr	r3, [pc, #516]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 800415e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004160:	4b80      	ldr	r3, [pc, #512]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 8004162:	2104      	movs	r1, #4
 8004164:	438a      	bics	r2, r1
 8004166:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d014      	beq.n	800419a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fe fb72 	bl	8002858 <HAL_GetTick>
 8004174:	0003      	movs	r3, r0
 8004176:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004178:	e009      	b.n	800418e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800417a:	f7fe fb6d 	bl	8002858 <HAL_GetTick>
 800417e:	0002      	movs	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	4a79      	ldr	r2, [pc, #484]	@ (800436c <HAL_RCC_OscConfig+0x620>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e0e6      	b.n	800435c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800418e:	4b75      	ldr	r3, [pc, #468]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 8004190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004192:	2202      	movs	r2, #2
 8004194:	4013      	ands	r3, r2
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x42e>
 8004198:	e013      	b.n	80041c2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7fe fb5d 	bl	8002858 <HAL_GetTick>
 800419e:	0003      	movs	r3, r0
 80041a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041a2:	e009      	b.n	80041b8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a4:	f7fe fb58 	bl	8002858 <HAL_GetTick>
 80041a8:	0002      	movs	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	4a6f      	ldr	r2, [pc, #444]	@ (800436c <HAL_RCC_OscConfig+0x620>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e0d1      	b.n	800435c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 80041ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041bc:	2202      	movs	r2, #2
 80041be:	4013      	ands	r3, r2
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80041c2:	231f      	movs	r3, #31
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d105      	bne.n	80041d8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80041cc:	4b65      	ldr	r3, [pc, #404]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 80041ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041d0:	4b64      	ldr	r3, [pc, #400]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 80041d2:	4967      	ldr	r1, [pc, #412]	@ (8004370 <HAL_RCC_OscConfig+0x624>)
 80041d4:	400a      	ands	r2, r1
 80041d6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d100      	bne.n	80041e2 <HAL_RCC_OscConfig+0x496>
 80041e0:	e0bb      	b.n	800435a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041e2:	4b60      	ldr	r3, [pc, #384]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2238      	movs	r2, #56	@ 0x38
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b10      	cmp	r3, #16
 80041ec:	d100      	bne.n	80041f0 <HAL_RCC_OscConfig+0x4a4>
 80041ee:	e07b      	b.n	80042e8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d156      	bne.n	80042a6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f8:	4b5a      	ldr	r3, [pc, #360]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4b59      	ldr	r3, [pc, #356]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 80041fe:	495d      	ldr	r1, [pc, #372]	@ (8004374 <HAL_RCC_OscConfig+0x628>)
 8004200:	400a      	ands	r2, r1
 8004202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fe fb28 	bl	8002858 <HAL_GetTick>
 8004208:	0003      	movs	r3, r0
 800420a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420e:	f7fe fb23 	bl	8002858 <HAL_GetTick>
 8004212:	0002      	movs	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e09d      	b.n	800435c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004220:	4b50      	ldr	r3, [pc, #320]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	2380      	movs	r3, #128	@ 0x80
 8004226:	049b      	lsls	r3, r3, #18
 8004228:	4013      	ands	r3, r2
 800422a:	d1f0      	bne.n	800420e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800422c:	4b4d      	ldr	r3, [pc, #308]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4a51      	ldr	r2, [pc, #324]	@ (8004378 <HAL_RCC_OscConfig+0x62c>)
 8004232:	4013      	ands	r3, r2
 8004234:	0019      	movs	r1, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1a      	ldr	r2, [r3, #32]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004258:	431a      	orrs	r2, r3
 800425a:	4b42      	ldr	r3, [pc, #264]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 800425c:	430a      	orrs	r2, r1
 800425e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004260:	4b40      	ldr	r3, [pc, #256]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b3f      	ldr	r3, [pc, #252]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 8004266:	2180      	movs	r1, #128	@ 0x80
 8004268:	0449      	lsls	r1, r1, #17
 800426a:	430a      	orrs	r2, r1
 800426c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800426e:	4b3d      	ldr	r3, [pc, #244]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	4b3c      	ldr	r3, [pc, #240]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 8004274:	2180      	movs	r1, #128	@ 0x80
 8004276:	0549      	lsls	r1, r1, #21
 8004278:	430a      	orrs	r2, r1
 800427a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7fe faec 	bl	8002858 <HAL_GetTick>
 8004280:	0003      	movs	r3, r0
 8004282:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004286:	f7fe fae7 	bl	8002858 <HAL_GetTick>
 800428a:	0002      	movs	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e061      	b.n	800435c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004298:	4b32      	ldr	r3, [pc, #200]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	2380      	movs	r3, #128	@ 0x80
 800429e:	049b      	lsls	r3, r3, #18
 80042a0:	4013      	ands	r3, r2
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x53a>
 80042a4:	e059      	b.n	800435a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4b2e      	ldr	r3, [pc, #184]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 80042ac:	4931      	ldr	r1, [pc, #196]	@ (8004374 <HAL_RCC_OscConfig+0x628>)
 80042ae:	400a      	ands	r2, r1
 80042b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fe fad1 	bl	8002858 <HAL_GetTick>
 80042b6:	0003      	movs	r3, r0
 80042b8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042bc:	f7fe facc 	bl	8002858 <HAL_GetTick>
 80042c0:	0002      	movs	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e046      	b.n	800435c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ce:	4b25      	ldr	r3, [pc, #148]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	2380      	movs	r3, #128	@ 0x80
 80042d4:	049b      	lsls	r3, r3, #18
 80042d6:	4013      	ands	r3, r2
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80042da:	4b22      	ldr	r3, [pc, #136]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	4b21      	ldr	r3, [pc, #132]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 80042e0:	4926      	ldr	r1, [pc, #152]	@ (800437c <HAL_RCC_OscConfig+0x630>)
 80042e2:	400a      	ands	r2, r1
 80042e4:	60da      	str	r2, [r3, #12]
 80042e6:	e038      	b.n	800435a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e033      	b.n	800435c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80042f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004364 <HAL_RCC_OscConfig+0x618>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2203      	movs	r2, #3
 80042fe:	401a      	ands	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	429a      	cmp	r2, r3
 8004306:	d126      	bne.n	8004356 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2270      	movs	r2, #112	@ 0x70
 800430c:	401a      	ands	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004312:	429a      	cmp	r2, r3
 8004314:	d11f      	bne.n	8004356 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	23fe      	movs	r3, #254	@ 0xfe
 800431a:	01db      	lsls	r3, r3, #7
 800431c:	401a      	ands	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004322:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004324:	429a      	cmp	r2, r3
 8004326:	d116      	bne.n	8004356 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	23f8      	movs	r3, #248	@ 0xf8
 800432c:	039b      	lsls	r3, r3, #14
 800432e:	401a      	ands	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d10e      	bne.n	8004356 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	23e0      	movs	r3, #224	@ 0xe0
 800433c:	051b      	lsls	r3, r3, #20
 800433e:	401a      	ands	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d106      	bne.n	8004356 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	0f5b      	lsrs	r3, r3, #29
 800434c:	075a      	lsls	r2, r3, #29
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d001      	beq.n	800435a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	0018      	movs	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	b008      	add	sp, #32
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40021000 	.word	0x40021000
 8004368:	40007000 	.word	0x40007000
 800436c:	00001388 	.word	0x00001388
 8004370:	efffffff 	.word	0xefffffff
 8004374:	feffffff 	.word	0xfeffffff
 8004378:	11c1808c 	.word	0x11c1808c
 800437c:	eefefffc 	.word	0xeefefffc

08004380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e0e9      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004394:	4b76      	ldr	r3, [pc, #472]	@ (8004570 <HAL_RCC_ClockConfig+0x1f0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2207      	movs	r2, #7
 800439a:	4013      	ands	r3, r2
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d91e      	bls.n	80043e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a2:	4b73      	ldr	r3, [pc, #460]	@ (8004570 <HAL_RCC_ClockConfig+0x1f0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2207      	movs	r2, #7
 80043a8:	4393      	bics	r3, r2
 80043aa:	0019      	movs	r1, r3
 80043ac:	4b70      	ldr	r3, [pc, #448]	@ (8004570 <HAL_RCC_ClockConfig+0x1f0>)
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043b4:	f7fe fa50 	bl	8002858 <HAL_GetTick>
 80043b8:	0003      	movs	r3, r0
 80043ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043bc:	e009      	b.n	80043d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043be:	f7fe fa4b 	bl	8002858 <HAL_GetTick>
 80043c2:	0002      	movs	r2, r0
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	4a6a      	ldr	r2, [pc, #424]	@ (8004574 <HAL_RCC_ClockConfig+0x1f4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e0ca      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043d2:	4b67      	ldr	r3, [pc, #412]	@ (8004570 <HAL_RCC_ClockConfig+0x1f0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2207      	movs	r2, #7
 80043d8:	4013      	ands	r3, r2
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d1ee      	bne.n	80043be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2202      	movs	r2, #2
 80043e6:	4013      	ands	r3, r2
 80043e8:	d015      	beq.n	8004416 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2204      	movs	r2, #4
 80043f0:	4013      	ands	r3, r2
 80043f2:	d006      	beq.n	8004402 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80043f4:	4b60      	ldr	r3, [pc, #384]	@ (8004578 <HAL_RCC_ClockConfig+0x1f8>)
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	4b5f      	ldr	r3, [pc, #380]	@ (8004578 <HAL_RCC_ClockConfig+0x1f8>)
 80043fa:	21e0      	movs	r1, #224	@ 0xe0
 80043fc:	01c9      	lsls	r1, r1, #7
 80043fe:	430a      	orrs	r2, r1
 8004400:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004402:	4b5d      	ldr	r3, [pc, #372]	@ (8004578 <HAL_RCC_ClockConfig+0x1f8>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	4a5d      	ldr	r2, [pc, #372]	@ (800457c <HAL_RCC_ClockConfig+0x1fc>)
 8004408:	4013      	ands	r3, r2
 800440a:	0019      	movs	r1, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	4b59      	ldr	r3, [pc, #356]	@ (8004578 <HAL_RCC_ClockConfig+0x1f8>)
 8004412:	430a      	orrs	r2, r1
 8004414:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2201      	movs	r2, #1
 800441c:	4013      	ands	r3, r2
 800441e:	d057      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d107      	bne.n	8004438 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004428:	4b53      	ldr	r3, [pc, #332]	@ (8004578 <HAL_RCC_ClockConfig+0x1f8>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	2380      	movs	r3, #128	@ 0x80
 800442e:	029b      	lsls	r3, r3, #10
 8004430:	4013      	ands	r3, r2
 8004432:	d12b      	bne.n	800448c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e097      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d107      	bne.n	8004450 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004440:	4b4d      	ldr	r3, [pc, #308]	@ (8004578 <HAL_RCC_ClockConfig+0x1f8>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	2380      	movs	r3, #128	@ 0x80
 8004446:	049b      	lsls	r3, r3, #18
 8004448:	4013      	ands	r3, r2
 800444a:	d11f      	bne.n	800448c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e08b      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d107      	bne.n	8004468 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004458:	4b47      	ldr	r3, [pc, #284]	@ (8004578 <HAL_RCC_ClockConfig+0x1f8>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	2380      	movs	r3, #128	@ 0x80
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4013      	ands	r3, r2
 8004462:	d113      	bne.n	800448c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e07f      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b03      	cmp	r3, #3
 800446e:	d106      	bne.n	800447e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004470:	4b41      	ldr	r3, [pc, #260]	@ (8004578 <HAL_RCC_ClockConfig+0x1f8>)
 8004472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004474:	2202      	movs	r2, #2
 8004476:	4013      	ands	r3, r2
 8004478:	d108      	bne.n	800448c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e074      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800447e:	4b3e      	ldr	r3, [pc, #248]	@ (8004578 <HAL_RCC_ClockConfig+0x1f8>)
 8004480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004482:	2202      	movs	r2, #2
 8004484:	4013      	ands	r3, r2
 8004486:	d101      	bne.n	800448c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e06d      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800448c:	4b3a      	ldr	r3, [pc, #232]	@ (8004578 <HAL_RCC_ClockConfig+0x1f8>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2207      	movs	r2, #7
 8004492:	4393      	bics	r3, r2
 8004494:	0019      	movs	r1, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	4b37      	ldr	r3, [pc, #220]	@ (8004578 <HAL_RCC_ClockConfig+0x1f8>)
 800449c:	430a      	orrs	r2, r1
 800449e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a0:	f7fe f9da 	bl	8002858 <HAL_GetTick>
 80044a4:	0003      	movs	r3, r0
 80044a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a8:	e009      	b.n	80044be <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044aa:	f7fe f9d5 	bl	8002858 <HAL_GetTick>
 80044ae:	0002      	movs	r2, r0
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004574 <HAL_RCC_ClockConfig+0x1f4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e054      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044be:	4b2e      	ldr	r3, [pc, #184]	@ (8004578 <HAL_RCC_ClockConfig+0x1f8>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2238      	movs	r2, #56	@ 0x38
 80044c4:	401a      	ands	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d1ec      	bne.n	80044aa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044d0:	4b27      	ldr	r3, [pc, #156]	@ (8004570 <HAL_RCC_ClockConfig+0x1f0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2207      	movs	r2, #7
 80044d6:	4013      	ands	r3, r2
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d21e      	bcs.n	800451c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b24      	ldr	r3, [pc, #144]	@ (8004570 <HAL_RCC_ClockConfig+0x1f0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2207      	movs	r2, #7
 80044e4:	4393      	bics	r3, r2
 80044e6:	0019      	movs	r1, r3
 80044e8:	4b21      	ldr	r3, [pc, #132]	@ (8004570 <HAL_RCC_ClockConfig+0x1f0>)
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044f0:	f7fe f9b2 	bl	8002858 <HAL_GetTick>
 80044f4:	0003      	movs	r3, r0
 80044f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044f8:	e009      	b.n	800450e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044fa:	f7fe f9ad 	bl	8002858 <HAL_GetTick>
 80044fe:	0002      	movs	r2, r0
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	4a1b      	ldr	r2, [pc, #108]	@ (8004574 <HAL_RCC_ClockConfig+0x1f4>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e02c      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800450e:	4b18      	ldr	r3, [pc, #96]	@ (8004570 <HAL_RCC_ClockConfig+0x1f0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2207      	movs	r2, #7
 8004514:	4013      	ands	r3, r2
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d1ee      	bne.n	80044fa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2204      	movs	r2, #4
 8004522:	4013      	ands	r3, r2
 8004524:	d009      	beq.n	800453a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004526:	4b14      	ldr	r3, [pc, #80]	@ (8004578 <HAL_RCC_ClockConfig+0x1f8>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	4a15      	ldr	r2, [pc, #84]	@ (8004580 <HAL_RCC_ClockConfig+0x200>)
 800452c:	4013      	ands	r3, r2
 800452e:	0019      	movs	r1, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	4b10      	ldr	r3, [pc, #64]	@ (8004578 <HAL_RCC_ClockConfig+0x1f8>)
 8004536:	430a      	orrs	r2, r1
 8004538:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800453a:	f000 f829 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 800453e:	0001      	movs	r1, r0
 8004540:	4b0d      	ldr	r3, [pc, #52]	@ (8004578 <HAL_RCC_ClockConfig+0x1f8>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	220f      	movs	r2, #15
 8004548:	401a      	ands	r2, r3
 800454a:	4b0e      	ldr	r3, [pc, #56]	@ (8004584 <HAL_RCC_ClockConfig+0x204>)
 800454c:	0092      	lsls	r2, r2, #2
 800454e:	58d3      	ldr	r3, [r2, r3]
 8004550:	221f      	movs	r2, #31
 8004552:	4013      	ands	r3, r2
 8004554:	000a      	movs	r2, r1
 8004556:	40da      	lsrs	r2, r3
 8004558:	4b0b      	ldr	r3, [pc, #44]	@ (8004588 <HAL_RCC_ClockConfig+0x208>)
 800455a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800455c:	4b0b      	ldr	r3, [pc, #44]	@ (800458c <HAL_RCC_ClockConfig+0x20c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	0018      	movs	r0, r3
 8004562:	f7fe f91d 	bl	80027a0 <HAL_InitTick>
 8004566:	0003      	movs	r3, r0
}
 8004568:	0018      	movs	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	b004      	add	sp, #16
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40022000 	.word	0x40022000
 8004574:	00001388 	.word	0x00001388
 8004578:	40021000 	.word	0x40021000
 800457c:	fffff0ff 	.word	0xfffff0ff
 8004580:	ffff8fff 	.word	0xffff8fff
 8004584:	08007034 	.word	0x08007034
 8004588:	20000060 	.word	0x20000060
 800458c:	20000064 	.word	0x20000064

08004590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004596:	4b3c      	ldr	r3, [pc, #240]	@ (8004688 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2238      	movs	r2, #56	@ 0x38
 800459c:	4013      	ands	r3, r2
 800459e:	d10f      	bne.n	80045c0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80045a0:	4b39      	ldr	r3, [pc, #228]	@ (8004688 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	0adb      	lsrs	r3, r3, #11
 80045a6:	2207      	movs	r2, #7
 80045a8:	4013      	ands	r3, r2
 80045aa:	2201      	movs	r2, #1
 80045ac:	409a      	lsls	r2, r3
 80045ae:	0013      	movs	r3, r2
 80045b0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80045b2:	6839      	ldr	r1, [r7, #0]
 80045b4:	4835      	ldr	r0, [pc, #212]	@ (800468c <HAL_RCC_GetSysClockFreq+0xfc>)
 80045b6:	f7fb fda5 	bl	8000104 <__udivsi3>
 80045ba:	0003      	movs	r3, r0
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	e05d      	b.n	800467c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045c0:	4b31      	ldr	r3, [pc, #196]	@ (8004688 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2238      	movs	r2, #56	@ 0x38
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d102      	bne.n	80045d2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045cc:	4b2f      	ldr	r3, [pc, #188]	@ (800468c <HAL_RCC_GetSysClockFreq+0xfc>)
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	e054      	b.n	800467c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045d2:	4b2d      	ldr	r3, [pc, #180]	@ (8004688 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2238      	movs	r2, #56	@ 0x38
 80045d8:	4013      	ands	r3, r2
 80045da:	2b10      	cmp	r3, #16
 80045dc:	d138      	bne.n	8004650 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80045de:	4b2a      	ldr	r3, [pc, #168]	@ (8004688 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2203      	movs	r2, #3
 80045e4:	4013      	ands	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045e8:	4b27      	ldr	r3, [pc, #156]	@ (8004688 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	2207      	movs	r2, #7
 80045f0:	4013      	ands	r3, r2
 80045f2:	3301      	adds	r3, #1
 80045f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d10d      	bne.n	8004618 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	4823      	ldr	r0, [pc, #140]	@ (800468c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004600:	f7fb fd80 	bl	8000104 <__udivsi3>
 8004604:	0003      	movs	r3, r0
 8004606:	0019      	movs	r1, r3
 8004608:	4b1f      	ldr	r3, [pc, #124]	@ (8004688 <HAL_RCC_GetSysClockFreq+0xf8>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	0a1b      	lsrs	r3, r3, #8
 800460e:	227f      	movs	r2, #127	@ 0x7f
 8004610:	4013      	ands	r3, r2
 8004612:	434b      	muls	r3, r1
 8004614:	617b      	str	r3, [r7, #20]
        break;
 8004616:	e00d      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	481c      	ldr	r0, [pc, #112]	@ (800468c <HAL_RCC_GetSysClockFreq+0xfc>)
 800461c:	f7fb fd72 	bl	8000104 <__udivsi3>
 8004620:	0003      	movs	r3, r0
 8004622:	0019      	movs	r1, r3
 8004624:	4b18      	ldr	r3, [pc, #96]	@ (8004688 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	0a1b      	lsrs	r3, r3, #8
 800462a:	227f      	movs	r2, #127	@ 0x7f
 800462c:	4013      	ands	r3, r2
 800462e:	434b      	muls	r3, r1
 8004630:	617b      	str	r3, [r7, #20]
        break;
 8004632:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004634:	4b14      	ldr	r3, [pc, #80]	@ (8004688 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	0f5b      	lsrs	r3, r3, #29
 800463a:	2207      	movs	r2, #7
 800463c:	4013      	ands	r3, r2
 800463e:	3301      	adds	r3, #1
 8004640:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	6978      	ldr	r0, [r7, #20]
 8004646:	f7fb fd5d 	bl	8000104 <__udivsi3>
 800464a:	0003      	movs	r3, r0
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e015      	b.n	800467c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004650:	4b0d      	ldr	r3, [pc, #52]	@ (8004688 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2238      	movs	r2, #56	@ 0x38
 8004656:	4013      	ands	r3, r2
 8004658:	2b20      	cmp	r3, #32
 800465a:	d103      	bne.n	8004664 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800465c:	2380      	movs	r3, #128	@ 0x80
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	e00b      	b.n	800467c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004664:	4b08      	ldr	r3, [pc, #32]	@ (8004688 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2238      	movs	r2, #56	@ 0x38
 800466a:	4013      	ands	r3, r2
 800466c:	2b18      	cmp	r3, #24
 800466e:	d103      	bne.n	8004678 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004670:	23fa      	movs	r3, #250	@ 0xfa
 8004672:	01db      	lsls	r3, r3, #7
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	e001      	b.n	800467c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800467c:	693b      	ldr	r3, [r7, #16]
}
 800467e:	0018      	movs	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	b006      	add	sp, #24
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			@ (mov r8, r8)
 8004688:	40021000 	.word	0x40021000
 800468c:	00f42400 	.word	0x00f42400

08004690 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004694:	4b02      	ldr	r3, [pc, #8]	@ (80046a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004696:	681b      	ldr	r3, [r3, #0]
}
 8004698:	0018      	movs	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	46c0      	nop			@ (mov r8, r8)
 80046a0:	20000060 	.word	0x20000060

080046a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a4:	b5b0      	push	{r4, r5, r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80046a8:	f7ff fff2 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 80046ac:	0004      	movs	r4, r0
 80046ae:	f7ff fb41 	bl	8003d34 <LL_RCC_GetAPB1Prescaler>
 80046b2:	0003      	movs	r3, r0
 80046b4:	0b1a      	lsrs	r2, r3, #12
 80046b6:	4b05      	ldr	r3, [pc, #20]	@ (80046cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80046b8:	0092      	lsls	r2, r2, #2
 80046ba:	58d3      	ldr	r3, [r2, r3]
 80046bc:	221f      	movs	r2, #31
 80046be:	4013      	ands	r3, r2
 80046c0:	40dc      	lsrs	r4, r3
 80046c2:	0023      	movs	r3, r4
}
 80046c4:	0018      	movs	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bdb0      	pop	{r4, r5, r7, pc}
 80046ca:	46c0      	nop			@ (mov r8, r8)
 80046cc:	08007074 	.word	0x08007074

080046d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80046d8:	2313      	movs	r3, #19
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046e0:	2312      	movs	r3, #18
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	2380      	movs	r3, #128	@ 0x80
 80046ee:	029b      	lsls	r3, r3, #10
 80046f0:	4013      	ands	r3, r2
 80046f2:	d100      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80046f4:	e0a3      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f6:	2011      	movs	r0, #17
 80046f8:	183b      	adds	r3, r7, r0
 80046fa:	2200      	movs	r2, #0
 80046fc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fe:	4ba5      	ldr	r3, [pc, #660]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004700:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004702:	2380      	movs	r3, #128	@ 0x80
 8004704:	055b      	lsls	r3, r3, #21
 8004706:	4013      	ands	r3, r2
 8004708:	d110      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470a:	4ba2      	ldr	r3, [pc, #648]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800470c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800470e:	4ba1      	ldr	r3, [pc, #644]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004710:	2180      	movs	r1, #128	@ 0x80
 8004712:	0549      	lsls	r1, r1, #21
 8004714:	430a      	orrs	r2, r1
 8004716:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004718:	4b9e      	ldr	r3, [pc, #632]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800471a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800471c:	2380      	movs	r3, #128	@ 0x80
 800471e:	055b      	lsls	r3, r3, #21
 8004720:	4013      	ands	r3, r2
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004726:	183b      	adds	r3, r7, r0
 8004728:	2201      	movs	r2, #1
 800472a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800472c:	4b9a      	ldr	r3, [pc, #616]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b99      	ldr	r3, [pc, #612]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004732:	2180      	movs	r1, #128	@ 0x80
 8004734:	0049      	lsls	r1, r1, #1
 8004736:	430a      	orrs	r2, r1
 8004738:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800473a:	f7fe f88d 	bl	8002858 <HAL_GetTick>
 800473e:	0003      	movs	r3, r0
 8004740:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004742:	e00b      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004744:	f7fe f888 	bl	8002858 <HAL_GetTick>
 8004748:	0002      	movs	r2, r0
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d904      	bls.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004752:	2313      	movs	r3, #19
 8004754:	18fb      	adds	r3, r7, r3
 8004756:	2203      	movs	r2, #3
 8004758:	701a      	strb	r2, [r3, #0]
        break;
 800475a:	e005      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800475c:	4b8e      	ldr	r3, [pc, #568]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	2380      	movs	r3, #128	@ 0x80
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4013      	ands	r3, r2
 8004766:	d0ed      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004768:	2313      	movs	r3, #19
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d154      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004772:	4b88      	ldr	r3, [pc, #544]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004774:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004776:	23c0      	movs	r3, #192	@ 0xc0
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4013      	ands	r3, r2
 800477c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d019      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	429a      	cmp	r2, r3
 800478c:	d014      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800478e:	4b81      	ldr	r3, [pc, #516]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004792:	4a82      	ldr	r2, [pc, #520]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004794:	4013      	ands	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004798:	4b7e      	ldr	r3, [pc, #504]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800479a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800479c:	4b7d      	ldr	r3, [pc, #500]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800479e:	2180      	movs	r1, #128	@ 0x80
 80047a0:	0249      	lsls	r1, r1, #9
 80047a2:	430a      	orrs	r2, r1
 80047a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047a6:	4b7b      	ldr	r3, [pc, #492]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047aa:	4b7a      	ldr	r3, [pc, #488]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047ac:	497c      	ldr	r1, [pc, #496]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80047ae:	400a      	ands	r2, r1
 80047b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047b2:	4b78      	ldr	r3, [pc, #480]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2201      	movs	r2, #1
 80047bc:	4013      	ands	r3, r2
 80047be:	d016      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fe f84a 	bl	8002858 <HAL_GetTick>
 80047c4:	0003      	movs	r3, r0
 80047c6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c8:	e00c      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ca:	f7fe f845 	bl	8002858 <HAL_GetTick>
 80047ce:	0002      	movs	r2, r0
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	4a73      	ldr	r2, [pc, #460]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d904      	bls.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80047da:	2313      	movs	r3, #19
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	2203      	movs	r2, #3
 80047e0:	701a      	strb	r2, [r3, #0]
            break;
 80047e2:	e004      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e4:	4b6b      	ldr	r3, [pc, #428]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e8:	2202      	movs	r2, #2
 80047ea:	4013      	ands	r3, r2
 80047ec:	d0ed      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80047ee:	2313      	movs	r3, #19
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10a      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047f8:	4b66      	ldr	r3, [pc, #408]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fc:	4a67      	ldr	r2, [pc, #412]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80047fe:	4013      	ands	r3, r2
 8004800:	0019      	movs	r1, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004806:	4b63      	ldr	r3, [pc, #396]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004808:	430a      	orrs	r2, r1
 800480a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800480c:	e00c      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800480e:	2312      	movs	r3, #18
 8004810:	18fb      	adds	r3, r7, r3
 8004812:	2213      	movs	r2, #19
 8004814:	18ba      	adds	r2, r7, r2
 8004816:	7812      	ldrb	r2, [r2, #0]
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	e005      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	2312      	movs	r3, #18
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	2213      	movs	r2, #19
 8004822:	18ba      	adds	r2, r7, r2
 8004824:	7812      	ldrb	r2, [r2, #0]
 8004826:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004828:	2311      	movs	r3, #17
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d105      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004832:	4b58      	ldr	r3, [pc, #352]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004834:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004836:	4b57      	ldr	r3, [pc, #348]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004838:	495b      	ldr	r1, [pc, #364]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800483a:	400a      	ands	r2, r1
 800483c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2201      	movs	r2, #1
 8004844:	4013      	ands	r3, r2
 8004846:	d009      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004848:	4b52      	ldr	r3, [pc, #328]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800484a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484c:	2203      	movs	r2, #3
 800484e:	4393      	bics	r3, r2
 8004850:	0019      	movs	r1, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	4b4f      	ldr	r3, [pc, #316]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004858:	430a      	orrs	r2, r1
 800485a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2210      	movs	r2, #16
 8004862:	4013      	ands	r3, r2
 8004864:	d009      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004866:	4b4b      	ldr	r3, [pc, #300]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486a:	4a50      	ldr	r2, [pc, #320]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800486c:	4013      	ands	r3, r2
 800486e:	0019      	movs	r1, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	4b47      	ldr	r3, [pc, #284]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004876:	430a      	orrs	r2, r1
 8004878:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	2380      	movs	r3, #128	@ 0x80
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4013      	ands	r3, r2
 8004884:	d009      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004886:	4b43      	ldr	r3, [pc, #268]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800488a:	4a49      	ldr	r2, [pc, #292]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800488c:	4013      	ands	r3, r2
 800488e:	0019      	movs	r1, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	695a      	ldr	r2, [r3, #20]
 8004894:	4b3f      	ldr	r3, [pc, #252]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004896:	430a      	orrs	r2, r1
 8004898:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	2380      	movs	r3, #128	@ 0x80
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4013      	ands	r3, r2
 80048a4:	d009      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048aa:	4a42      	ldr	r2, [pc, #264]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	0019      	movs	r1, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699a      	ldr	r2, [r3, #24]
 80048b4:	4b37      	ldr	r3, [pc, #220]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048b6:	430a      	orrs	r2, r1
 80048b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2220      	movs	r2, #32
 80048c0:	4013      	ands	r3, r2
 80048c2:	d009      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048c4:	4b33      	ldr	r3, [pc, #204]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c8:	4a3b      	ldr	r2, [pc, #236]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	0019      	movs	r1, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	4b30      	ldr	r3, [pc, #192]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048d4:	430a      	orrs	r2, r1
 80048d6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	2380      	movs	r3, #128	@ 0x80
 80048de:	01db      	lsls	r3, r3, #7
 80048e0:	4013      	ands	r3, r2
 80048e2:	d015      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	0899      	lsrs	r1, r3, #2
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69da      	ldr	r2, [r3, #28]
 80048f0:	4b28      	ldr	r3, [pc, #160]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048f2:	430a      	orrs	r2, r1
 80048f4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69da      	ldr	r2, [r3, #28]
 80048fa:	2380      	movs	r3, #128	@ 0x80
 80048fc:	05db      	lsls	r3, r3, #23
 80048fe:	429a      	cmp	r2, r3
 8004900:	d106      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004902:	4b24      	ldr	r3, [pc, #144]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	4b23      	ldr	r3, [pc, #140]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004908:	2180      	movs	r1, #128	@ 0x80
 800490a:	0249      	lsls	r1, r1, #9
 800490c:	430a      	orrs	r2, r1
 800490e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	2380      	movs	r3, #128	@ 0x80
 8004916:	039b      	lsls	r3, r3, #14
 8004918:	4013      	ands	r3, r2
 800491a:	d016      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800491c:	4b1d      	ldr	r3, [pc, #116]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800491e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004920:	4a26      	ldr	r2, [pc, #152]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004922:	4013      	ands	r3, r2
 8004924:	0019      	movs	r1, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1a      	ldr	r2, [r3, #32]
 800492a:	4b1a      	ldr	r3, [pc, #104]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800492c:	430a      	orrs	r2, r1
 800492e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1a      	ldr	r2, [r3, #32]
 8004934:	2380      	movs	r3, #128	@ 0x80
 8004936:	03db      	lsls	r3, r3, #15
 8004938:	429a      	cmp	r2, r3
 800493a:	d106      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800493c:	4b15      	ldr	r3, [pc, #84]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	4b14      	ldr	r3, [pc, #80]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004942:	2180      	movs	r1, #128	@ 0x80
 8004944:	0449      	lsls	r1, r1, #17
 8004946:	430a      	orrs	r2, r1
 8004948:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	2380      	movs	r3, #128	@ 0x80
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	4013      	ands	r3, r2
 8004954:	d016      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004956:	4b0f      	ldr	r3, [pc, #60]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495a:	4a19      	ldr	r2, [pc, #100]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800495c:	4013      	ands	r3, r2
 800495e:	0019      	movs	r1, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004966:	430a      	orrs	r2, r1
 8004968:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	2380      	movs	r3, #128	@ 0x80
 8004970:	01db      	lsls	r3, r3, #7
 8004972:	429a      	cmp	r2, r3
 8004974:	d106      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004976:	4b07      	ldr	r3, [pc, #28]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	4b06      	ldr	r3, [pc, #24]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800497c:	2180      	movs	r1, #128	@ 0x80
 800497e:	0249      	lsls	r1, r1, #9
 8004980:	430a      	orrs	r2, r1
 8004982:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004984:	2312      	movs	r3, #18
 8004986:	18fb      	adds	r3, r7, r3
 8004988:	781b      	ldrb	r3, [r3, #0]
}
 800498a:	0018      	movs	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	b006      	add	sp, #24
 8004990:	bd80      	pop	{r7, pc}
 8004992:	46c0      	nop			@ (mov r8, r8)
 8004994:	40021000 	.word	0x40021000
 8004998:	40007000 	.word	0x40007000
 800499c:	fffffcff 	.word	0xfffffcff
 80049a0:	fffeffff 	.word	0xfffeffff
 80049a4:	00001388 	.word	0x00001388
 80049a8:	efffffff 	.word	0xefffffff
 80049ac:	fffff3ff 	.word	0xfffff3ff
 80049b0:	fff3ffff 	.word	0xfff3ffff
 80049b4:	ffcfffff 	.word	0xffcfffff
 80049b8:	ffffcfff 	.word	0xffffcfff
 80049bc:	ffbfffff 	.word	0xffbfffff
 80049c0:	ffff3fff 	.word	0xffff3fff

080049c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	2380      	movs	r3, #128	@ 0x80
 80049d4:	029b      	lsls	r3, r3, #10
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d136      	bne.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80049da:	4bcd      	ldr	r3, [pc, #820]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80049dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049de:	23c0      	movs	r3, #192	@ 0xc0
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4013      	ands	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80049e6:	4bca      	ldr	r3, [pc, #808]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80049e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ea:	2202      	movs	r2, #2
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d108      	bne.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	2380      	movs	r3, #128	@ 0x80
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d103      	bne.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 80049fc:	2380      	movs	r3, #128	@ 0x80
 80049fe:	021b      	lsls	r3, r3, #8
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	e26b      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004a04:	4bc2      	ldr	r3, [pc, #776]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a08:	2202      	movs	r2, #2
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d108      	bne.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	2380      	movs	r3, #128	@ 0x80
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d103      	bne.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8004a1a:	23fa      	movs	r3, #250	@ 0xfa
 8004a1c:	01db      	lsls	r3, r3, #7
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	e25c      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004a22:	4bbb      	ldr	r3, [pc, #748]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	2380      	movs	r3, #128	@ 0x80
 8004a28:	029b      	lsls	r3, r3, #10
 8004a2a:	401a      	ands	r2, r3
 8004a2c:	2380      	movs	r3, #128	@ 0x80
 8004a2e:	029b      	lsls	r3, r3, #10
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d000      	beq.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8004a34:	e252      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	23c0      	movs	r3, #192	@ 0xc0
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d000      	beq.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8004a40:	e24c      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 8004a42:	4bb4      	ldr	r3, [pc, #720]	@ (8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	e249      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8004a48:	4bb1      	ldr	r3, [pc, #708]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d102      	bne.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8004a54:	4bb0      	ldr	r3, [pc, #704]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	e00a      	b.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8004a5a:	4bad      	ldr	r3, [pc, #692]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	2203      	movs	r2, #3
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d102      	bne.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8004a66:	4bac      	ldr	r3, [pc, #688]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	e001      	b.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a70:	4ba7      	ldr	r3, [pc, #668]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	2207      	movs	r2, #7
 8004a78:	4013      	ands	r3, r2
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	6938      	ldr	r0, [r7, #16]
 8004a80:	f7fb fb40 	bl	8000104 <__udivsi3>
 8004a84:	0003      	movs	r3, r0
 8004a86:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	2380      	movs	r3, #128	@ 0x80
 8004a8c:	039b      	lsls	r3, r3, #14
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d100      	bne.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8004a92:	e1e3      	b.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	2380      	movs	r3, #128	@ 0x80
 8004a98:	039b      	lsls	r3, r3, #14
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d900      	bls.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004a9e:	e20c      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	2380      	movs	r3, #128	@ 0x80
 8004aa4:	01db      	lsls	r3, r3, #7
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d100      	bne.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8004aaa:	e0a5      	b.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	2380      	movs	r3, #128	@ 0x80
 8004ab0:	01db      	lsls	r3, r3, #7
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d900      	bls.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004ab6:	e200      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	2380      	movs	r3, #128	@ 0x80
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d100      	bne.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004ac2:	e0fc      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	2380      	movs	r3, #128	@ 0x80
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d900      	bls.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004ace:	e1f4      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	2380      	movs	r3, #128	@ 0x80
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d100      	bne.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8004ada:	e181      	b.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	2380      	movs	r3, #128	@ 0x80
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d900      	bls.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004ae6:	e1e8      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	2380      	movs	r3, #128	@ 0x80
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d100      	bne.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8004af2:	e135      	b.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	2380      	movs	r3, #128	@ 0x80
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d900      	bls.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004afe:	e1dc      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d100      	bne.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004b06:	e0af      	b.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	d900      	bls.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8004b0e:	e1d4      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d003      	beq.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b10      	cmp	r3, #16
 8004b1a:	d033      	beq.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8004b1c:	e1cd      	b.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004b1e:	4b7c      	ldr	r3, [pc, #496]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b22:	2203      	movs	r2, #3
 8004b24:	4013      	ands	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d104      	bne.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b2e:	f7ff fdb9 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8004b32:	0003      	movs	r3, r0
 8004b34:	617b      	str	r3, [r7, #20]
        break;
 8004b36:	e1c2      	b.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d104      	bne.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b3e:	f7ff fd27 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 8004b42:	0003      	movs	r3, r0
 8004b44:	617b      	str	r3, [r7, #20]
        break;
 8004b46:	e1ba      	b.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004b48:	4b71      	ldr	r3, [pc, #452]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	2380      	movs	r3, #128	@ 0x80
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	401a      	ands	r2, r3
 8004b52:	2380      	movs	r3, #128	@ 0x80
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d105      	bne.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d102      	bne.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 8004b60:	4b6d      	ldr	r3, [pc, #436]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004b62:	617b      	str	r3, [r7, #20]
        break;
 8004b64:	e1ab      	b.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004b66:	4b6a      	ldr	r3, [pc, #424]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d000      	beq.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8004b72:	e1a4      	b.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d000      	beq.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8004b7a:	e1a0      	b.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 8004b7c:	2380      	movs	r3, #128	@ 0x80
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	617b      	str	r3, [r7, #20]
        break;
 8004b82:	e19c      	b.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004b84:	4b62      	ldr	r3, [pc, #392]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004b86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b88:	23c0      	movs	r3, #192	@ 0xc0
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d104      	bne.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b96:	f7ff fd85 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8004b9a:	0003      	movs	r3, r0
 8004b9c:	617b      	str	r3, [r7, #20]
        break;
 8004b9e:	e190      	b.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	2380      	movs	r3, #128	@ 0x80
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d104      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004baa:	f7ff fcf1 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 8004bae:	0003      	movs	r3, r0
 8004bb0:	617b      	str	r3, [r7, #20]
        break;
 8004bb2:	e186      	b.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004bb4:	4b56      	ldr	r3, [pc, #344]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	2380      	movs	r3, #128	@ 0x80
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	401a      	ands	r2, r3
 8004bbe:	2380      	movs	r3, #128	@ 0x80
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d107      	bne.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	2380      	movs	r3, #128	@ 0x80
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d102      	bne.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 8004bd0:	4b51      	ldr	r3, [pc, #324]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004bd2:	617b      	str	r3, [r7, #20]
        break;
 8004bd4:	e175      	b.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004bd6:	4b4e      	ldr	r3, [pc, #312]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bda:	2202      	movs	r2, #2
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d000      	beq.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 8004be2:	e16e      	b.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	23c0      	movs	r3, #192	@ 0xc0
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d000      	beq.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8004bee:	e168      	b.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 8004bf0:	2380      	movs	r3, #128	@ 0x80
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	617b      	str	r3, [r7, #20]
        break;
 8004bf6:	e164      	b.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004bf8:	4b45      	ldr	r3, [pc, #276]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfc:	0f9b      	lsrs	r3, r3, #30
 8004bfe:	079b      	lsls	r3, r3, #30
 8004c00:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c08:	f7ff fcc2 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	617b      	str	r3, [r7, #20]
        break;
 8004c10:	e159      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	2380      	movs	r3, #128	@ 0x80
 8004c16:	061b      	lsls	r3, r3, #24
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d102      	bne.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 8004c1c:	4b3e      	ldr	r3, [pc, #248]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004c1e:	617b      	str	r3, [r7, #20]
        break;
 8004c20:	e151      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	2380      	movs	r3, #128	@ 0x80
 8004c26:	05db      	lsls	r3, r3, #23
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d000      	beq.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004c2c:	e14b      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8004c2e:	4b38      	ldr	r3, [pc, #224]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	2380      	movs	r3, #128	@ 0x80
 8004c34:	025b      	lsls	r3, r3, #9
 8004c36:	4013      	ands	r3, r2
 8004c38:	d100      	bne.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 8004c3a:	e144      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004c3c:	4b34      	ldr	r3, [pc, #208]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	0a1b      	lsrs	r3, r3, #8
 8004c42:	227f      	movs	r2, #127	@ 0x7f
 8004c44:	4013      	ands	r3, r2
 8004c46:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	435a      	muls	r2, r3
 8004c4e:	4b30      	ldr	r3, [pc, #192]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	0c5b      	lsrs	r3, r3, #17
 8004c54:	211f      	movs	r1, #31
 8004c56:	400b      	ands	r3, r1
 8004c58:	3301      	adds	r3, #1
 8004c5a:	0019      	movs	r1, r3
 8004c5c:	0010      	movs	r0, r2
 8004c5e:	f7fb fa51 	bl	8000104 <__udivsi3>
 8004c62:	0003      	movs	r3, r0
 8004c64:	617b      	str	r3, [r7, #20]
        break;
 8004c66:	e12e      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004c68:	4b29      	ldr	r3, [pc, #164]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004c6a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c6c:	23c0      	movs	r3, #192	@ 0xc0
 8004c6e:	019b      	lsls	r3, r3, #6
 8004c70:	4013      	ands	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d104      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c7a:	f7ff fd13 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8004c7e:	0003      	movs	r3, r0
 8004c80:	617b      	str	r3, [r7, #20]
        break;
 8004c82:	e122      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	2380      	movs	r3, #128	@ 0x80
 8004c88:	015b      	lsls	r3, r3, #5
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d104      	bne.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c8e:	f7ff fc7f 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 8004c92:	0003      	movs	r3, r0
 8004c94:	617b      	str	r3, [r7, #20]
        break;
 8004c96:	e118      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004c98:	4b1d      	ldr	r3, [pc, #116]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	2380      	movs	r3, #128	@ 0x80
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	401a      	ands	r2, r3
 8004ca2:	2380      	movs	r3, #128	@ 0x80
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d000      	beq.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8004caa:	e10e      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	2380      	movs	r3, #128	@ 0x80
 8004cb0:	019b      	lsls	r3, r3, #6
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d000      	beq.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004cb6:	e108      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 8004cb8:	4b17      	ldr	r3, [pc, #92]	@ (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004cba:	617b      	str	r3, [r7, #20]
        break;
 8004cbc:	e105      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8004cbe:	4b14      	ldr	r3, [pc, #80]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004cc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cc2:	23c0      	movs	r3, #192	@ 0xc0
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	2380      	movs	r3, #128	@ 0x80
 8004cce:	01db      	lsls	r3, r3, #7
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d123      	bne.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8004cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	2380      	movs	r3, #128	@ 0x80
 8004cda:	025b      	lsls	r3, r3, #9
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d100      	bne.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004ce0:	e0f5      	b.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	0a1b      	lsrs	r3, r3, #8
 8004ce8:	227f      	movs	r2, #127	@ 0x7f
 8004cea:	4013      	ands	r3, r2
 8004cec:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	435a      	muls	r2, r3
 8004cf4:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	0c5b      	lsrs	r3, r3, #17
 8004cfa:	211f      	movs	r1, #31
 8004cfc:	400b      	ands	r3, r1
 8004cfe:	3301      	adds	r3, #1
 8004d00:	0019      	movs	r1, r3
 8004d02:	0010      	movs	r0, r2
 8004d04:	f7fb f9fe 	bl	8000104 <__udivsi3>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	617b      	str	r3, [r7, #20]
        break;
 8004d0c:	e0df      	b.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8004d0e:	46c0      	nop			@ (mov r8, r8)
 8004d10:	40021000 	.word	0x40021000
 8004d14:	0007a120 	.word	0x0007a120
 8004d18:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d104      	bne.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d22:	f7ff fc35 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 8004d26:	0003      	movs	r3, r0
 8004d28:	617b      	str	r3, [r7, #20]
        break;
 8004d2a:	e0d0      	b.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8004d2c:	4b6e      	ldr	r3, [pc, #440]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	2380      	movs	r3, #128	@ 0x80
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	401a      	ands	r2, r3
 8004d36:	2380      	movs	r3, #128	@ 0x80
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d107      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	2380      	movs	r3, #128	@ 0x80
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d102      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 8004d48:	4b68      	ldr	r3, [pc, #416]	@ (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8004d4a:	617b      	str	r3, [r7, #20]
        break;
 8004d4c:	e0bf      	b.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	23c0      	movs	r3, #192	@ 0xc0
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d000      	beq.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8004d58:	e0b9      	b.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8004d5a:	4b65      	ldr	r3, [pc, #404]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8004d5c:	617b      	str	r3, [r7, #20]
        break;
 8004d5e:	e0b6      	b.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004d60:	4b61      	ldr	r3, [pc, #388]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004d62:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d64:	23c0      	movs	r3, #192	@ 0xc0
 8004d66:	031b      	lsls	r3, r3, #12
 8004d68:	4013      	ands	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d104      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d72:	f7ff fc97 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8004d76:	0003      	movs	r3, r0
 8004d78:	617b      	str	r3, [r7, #20]
        break;
 8004d7a:	e0aa      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004d7c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d80:	2202      	movs	r2, #2
 8004d82:	4013      	ands	r3, r2
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d108      	bne.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	2380      	movs	r3, #128	@ 0x80
 8004d8c:	02db      	lsls	r3, r3, #11
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d103      	bne.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 8004d92:	23fa      	movs	r3, #250	@ 0xfa
 8004d94:	01db      	lsls	r3, r3, #7
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	e021      	b.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004d9a:	4b53      	ldr	r3, [pc, #332]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	2380      	movs	r3, #128	@ 0x80
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	401a      	ands	r2, r3
 8004da4:	2380      	movs	r3, #128	@ 0x80
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d107      	bne.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	2380      	movs	r3, #128	@ 0x80
 8004db0:	031b      	lsls	r3, r3, #12
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d102      	bne.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 8004db6:	4b4d      	ldr	r3, [pc, #308]	@ (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	e010      	b.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004dbc:	4b4a      	ldr	r3, [pc, #296]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d000      	beq.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 8004dc8:	e083      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	23c0      	movs	r3, #192	@ 0xc0
 8004dce:	031b      	lsls	r3, r3, #12
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d000      	beq.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8004dd4:	e07d      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 8004dd6:	2380      	movs	r3, #128	@ 0x80
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	617b      	str	r3, [r7, #20]
        break;
 8004ddc:	e079      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8004dde:	e078      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004de0:	4b41      	ldr	r3, [pc, #260]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004de2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004de4:	23c0      	movs	r3, #192	@ 0xc0
 8004de6:	039b      	lsls	r3, r3, #14
 8004de8:	4013      	ands	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d104      	bne.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004df2:	f7ff fc57 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8004df6:	0003      	movs	r3, r0
 8004df8:	617b      	str	r3, [r7, #20]
        break;
 8004dfa:	e06c      	b.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e00:	2202      	movs	r2, #2
 8004e02:	4013      	ands	r3, r2
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d108      	bne.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	2380      	movs	r3, #128	@ 0x80
 8004e0c:	035b      	lsls	r3, r3, #13
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d103      	bne.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 8004e12:	23fa      	movs	r3, #250	@ 0xfa
 8004e14:	01db      	lsls	r3, r3, #7
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	e01f      	b.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004e1a:	4b33      	ldr	r3, [pc, #204]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	2380      	movs	r3, #128	@ 0x80
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	401a      	ands	r2, r3
 8004e24:	2380      	movs	r3, #128	@ 0x80
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d107      	bne.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	2380      	movs	r3, #128	@ 0x80
 8004e30:	039b      	lsls	r3, r3, #14
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d102      	bne.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 8004e36:	4b2d      	ldr	r3, [pc, #180]	@ (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	e00e      	b.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e40:	2202      	movs	r2, #2
 8004e42:	4013      	ands	r3, r2
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d146      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	23c0      	movs	r3, #192	@ 0xc0
 8004e4c:	039b      	lsls	r3, r3, #14
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d141      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 8004e52:	2380      	movs	r3, #128	@ 0x80
 8004e54:	021b      	lsls	r3, r3, #8
 8004e56:	617b      	str	r3, [r7, #20]
        break;
 8004e58:	e03d      	b.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 8004e5a:	e03c      	b.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8004e5c:	4b22      	ldr	r3, [pc, #136]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004e5e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e60:	2380      	movs	r3, #128	@ 0x80
 8004e62:	03db      	lsls	r3, r3, #15
 8004e64:	4013      	ands	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	2380      	movs	r3, #128	@ 0x80
 8004e6c:	03db      	lsls	r3, r3, #15
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d11b      	bne.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8004e72:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	2380      	movs	r3, #128	@ 0x80
 8004e78:	045b      	lsls	r3, r3, #17
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d02d      	beq.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	227f      	movs	r2, #127	@ 0x7f
 8004e86:	4013      	ands	r3, r2
 8004e88:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	435a      	muls	r2, r3
 8004e90:	4b15      	ldr	r3, [pc, #84]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	0e5b      	lsrs	r3, r3, #25
 8004e96:	2107      	movs	r1, #7
 8004e98:	400b      	ands	r3, r1
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	0019      	movs	r1, r3
 8004e9e:	0010      	movs	r0, r2
 8004ea0:	f7fb f930 	bl	8000104 <__udivsi3>
 8004ea4:	0003      	movs	r3, r0
 8004ea6:	617b      	str	r3, [r7, #20]
        break;
 8004ea8:	e017      	b.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d114      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004eb0:	f7ff fbf8 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8004eb4:	0003      	movs	r3, r0
 8004eb6:	617b      	str	r3, [r7, #20]
        break;
 8004eb8:	e00f      	b.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 8004eba:	46c0      	nop			@ (mov r8, r8)
 8004ebc:	e00e      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004ebe:	46c0      	nop			@ (mov r8, r8)
 8004ec0:	e00c      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004ec2:	46c0      	nop			@ (mov r8, r8)
 8004ec4:	e00a      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004ec6:	46c0      	nop			@ (mov r8, r8)
 8004ec8:	e008      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	e006      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004ece:	46c0      	nop			@ (mov r8, r8)
 8004ed0:	e004      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004ed2:	46c0      	nop			@ (mov r8, r8)
 8004ed4:	e002      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004ed6:	46c0      	nop			@ (mov r8, r8)
 8004ed8:	e000      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8004eda:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 8004edc:	697b      	ldr	r3, [r7, #20]
}
 8004ede:	0018      	movs	r0, r3
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b006      	add	sp, #24
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	46c0      	nop			@ (mov r8, r8)
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	00f42400 	.word	0x00f42400
 8004ef0:	00bb8000 	.word	0x00bb8000

08004ef4 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8004ef4:	b590      	push	{r4, r7, lr}
 8004ef6:	b08b      	sub	sp, #44	@ 0x2c
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8004efc:	2427      	movs	r4, #39	@ 0x27
 8004efe:	193b      	adds	r3, r7, r4
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 8004f04:	2326      	movs	r3, #38	@ 0x26
 8004f06:	18fb      	adds	r3, r7, r3
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 8004f0c:	4b31      	ldr	r3, [pc, #196]	@ (8004fd4 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f10:	4b30      	ldr	r3, [pc, #192]	@ (8004fd4 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004f12:	2101      	movs	r1, #1
 8004f14:	430a      	orrs	r2, r1
 8004f16:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f18:	4b2e      	ldr	r3, [pc, #184]	@ (8004fd4 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	4013      	ands	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8004f24:	2110      	movs	r1, #16
 8004f26:	187b      	adds	r3, r7, r1
 8004f28:	2204      	movs	r2, #4
 8004f2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f2c:	187b      	adds	r3, r7, r1
 8004f2e:	2203      	movs	r2, #3
 8004f30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f32:	187b      	adds	r3, r7, r1
 8004f34:	2203      	movs	r2, #3
 8004f36:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f38:	187b      	adds	r3, r7, r1
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8004f3e:	187a      	adds	r2, r7, r1
 8004f40:	23a0      	movs	r3, #160	@ 0xa0
 8004f42:	05db      	lsls	r3, r3, #23
 8004f44:	0011      	movs	r1, r2
 8004f46:	0018      	movs	r0, r3
 8004f48:	f7fd fd6e 	bl	8002a28 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f4c:	4b21      	ldr	r3, [pc, #132]	@ (8004fd4 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004f4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f50:	2380      	movs	r3, #128	@ 0x80
 8004f52:	055b      	lsls	r3, r3, #21
 8004f54:	4013      	ands	r3, r2
 8004f56:	d110      	bne.n	8004f7a <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f58:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd4 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004f5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd4 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004f5e:	2180      	movs	r1, #128	@ 0x80
 8004f60:	0549      	lsls	r1, r1, #21
 8004f62:	430a      	orrs	r2, r1
 8004f64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004f66:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd4 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004f68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f6a:	2380      	movs	r3, #128	@ 0x80
 8004f6c:	055b      	lsls	r3, r3, #21
 8004f6e:	4013      	ands	r3, r2
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8004f74:	193b      	adds	r3, r7, r4
 8004f76:	2201      	movs	r2, #1
 8004f78:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f7a:	4b17      	ldr	r3, [pc, #92]	@ (8004fd8 <HAL_RCCEx_EnableLSCO+0xe4>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	2380      	movs	r3, #128	@ 0x80
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	4013      	ands	r3, r2
 8004f84:	d105      	bne.n	8004f92 <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 8004f86:	f7fe fe77 	bl	8003c78 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 8004f8a:	2326      	movs	r3, #38	@ 0x26
 8004f8c:	18fb      	adds	r3, r7, r3
 8004f8e:	2201      	movs	r2, #1
 8004f90:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8004f92:	4b10      	ldr	r3, [pc, #64]	@ (8004fd4 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f96:	4a11      	ldr	r2, [pc, #68]	@ (8004fdc <HAL_RCCEx_EnableLSCO+0xe8>)
 8004f98:	401a      	ands	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd4 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004fa0:	2180      	movs	r1, #128	@ 0x80
 8004fa2:	0449      	lsls	r1, r1, #17
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 8004fa8:	2326      	movs	r3, #38	@ 0x26
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 8004fb2:	f7fe fe6f 	bl	8003c94 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 8004fb6:	2327      	movs	r3, #39	@ 0x27
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d105      	bne.n	8004fcc <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fc0:	4b04      	ldr	r3, [pc, #16]	@ (8004fd4 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004fc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fc4:	4b03      	ldr	r3, [pc, #12]	@ (8004fd4 <HAL_RCCEx_EnableLSCO+0xe0>)
 8004fc6:	4906      	ldr	r1, [pc, #24]	@ (8004fe0 <HAL_RCCEx_EnableLSCO+0xec>)
 8004fc8:	400a      	ands	r2, r1
 8004fca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8004fcc:	46c0      	nop			@ (mov r8, r8)
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b00b      	add	sp, #44	@ 0x2c
 8004fd2:	bd90      	pop	{r4, r7, pc}
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	40007000 	.word	0x40007000
 8004fdc:	fcffffff 	.word	0xfcffffff
 8004fe0:	efffffff 	.word	0xefffffff

08004fe4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004fe4:	b5b0      	push	{r4, r5, r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004fec:	230f      	movs	r3, #15
 8004fee:	18fb      	adds	r3, r7, r3
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d100      	bne.n	8004ffc <HAL_RTC_Init+0x18>
 8004ffa:	e08c      	b.n	8005116 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2229      	movs	r2, #41	@ 0x29
 8005000:	5c9b      	ldrb	r3, [r3, r2]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2228      	movs	r2, #40	@ 0x28
 800500c:	2100      	movs	r1, #0
 800500e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2288      	movs	r2, #136	@ 0x88
 8005014:	0212      	lsls	r2, r2, #8
 8005016:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	0018      	movs	r0, r3
 800501c:	f7fd f9da 	bl	80023d4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2229      	movs	r2, #41	@ 0x29
 8005024:	2102      	movs	r1, #2
 8005026:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	2210      	movs	r2, #16
 8005030:	4013      	ands	r3, r2
 8005032:	2b10      	cmp	r3, #16
 8005034:	d062      	beq.n	80050fc <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	22ca      	movs	r2, #202	@ 0xca
 800503c:	625a      	str	r2, [r3, #36]	@ 0x24
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2253      	movs	r2, #83	@ 0x53
 8005044:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005046:	250f      	movs	r5, #15
 8005048:	197c      	adds	r4, r7, r5
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	0018      	movs	r0, r3
 800504e:	f000 fcb9 	bl	80059c4 <RTC_EnterInitMode>
 8005052:	0003      	movs	r3, r0
 8005054:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8005056:	0028      	movs	r0, r5
 8005058:	183b      	adds	r3, r7, r0
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d12c      	bne.n	80050ba <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	492e      	ldr	r1, [pc, #184]	@ (8005124 <HAL_RTC_Init+0x140>)
 800506c:	400a      	ands	r2, r1
 800506e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6999      	ldr	r1, [r3, #24]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	431a      	orrs	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6912      	ldr	r2, [r2, #16]
 8005096:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6919      	ldr	r1, [r3, #16]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	041a      	lsls	r2, r3, #16
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80050ac:	183c      	adds	r4, r7, r0
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	0018      	movs	r0, r3
 80050b2:	f000 fcc9 	bl	8005a48 <RTC_ExitInitMode>
 80050b6:	0003      	movs	r3, r0
 80050b8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80050ba:	230f      	movs	r3, #15
 80050bc:	18fb      	adds	r3, r7, r3
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d116      	bne.n	80050f2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699a      	ldr	r2, [r3, #24]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	00d2      	lsls	r2, r2, #3
 80050d0:	08d2      	lsrs	r2, r2, #3
 80050d2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6999      	ldr	r1, [r3, #24]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	22ff      	movs	r2, #255	@ 0xff
 80050f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80050fa:	e003      	b.n	8005104 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80050fc:	230f      	movs	r3, #15
 80050fe:	18fb      	adds	r3, r7, r3
 8005100:	2200      	movs	r2, #0
 8005102:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005104:	230f      	movs	r3, #15
 8005106:	18fb      	adds	r3, r7, r3
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d103      	bne.n	8005116 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2229      	movs	r2, #41	@ 0x29
 8005112:	2101      	movs	r1, #1
 8005114:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005116:	230f      	movs	r3, #15
 8005118:	18fb      	adds	r3, r7, r3
 800511a:	781b      	ldrb	r3, [r3, #0]
}
 800511c:	0018      	movs	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	b004      	add	sp, #16
 8005122:	bdb0      	pop	{r4, r5, r7, pc}
 8005124:	fb8fffbf 	.word	0xfb8fffbf

08005128 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005128:	b5b0      	push	{r4, r5, r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2228      	movs	r2, #40	@ 0x28
 8005138:	5c9b      	ldrb	r3, [r3, r2]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_RTC_SetTime+0x1a>
 800513e:	2302      	movs	r3, #2
 8005140:	e092      	b.n	8005268 <HAL_RTC_SetTime+0x140>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2228      	movs	r2, #40	@ 0x28
 8005146:	2101      	movs	r1, #1
 8005148:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2229      	movs	r2, #41	@ 0x29
 800514e:	2102      	movs	r1, #2
 8005150:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	22ca      	movs	r2, #202	@ 0xca
 8005158:	625a      	str	r2, [r3, #36]	@ 0x24
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2253      	movs	r2, #83	@ 0x53
 8005160:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005162:	2513      	movs	r5, #19
 8005164:	197c      	adds	r4, r7, r5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	0018      	movs	r0, r3
 800516a:	f000 fc2b 	bl	80059c4 <RTC_EnterInitMode>
 800516e:	0003      	movs	r3, r0
 8005170:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005172:	197b      	adds	r3, r7, r5
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d162      	bne.n	8005240 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d125      	bne.n	80051cc <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	2240      	movs	r2, #64	@ 0x40
 8005188:	4013      	ands	r3, r2
 800518a:	d102      	bne.n	8005192 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2200      	movs	r2, #0
 8005190:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	0018      	movs	r0, r3
 8005198:	f000 fc9a 	bl	8005ad0 <RTC_ByteToBcd2>
 800519c:	0003      	movs	r3, r0
 800519e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	785b      	ldrb	r3, [r3, #1]
 80051a4:	0018      	movs	r0, r3
 80051a6:	f000 fc93 	bl	8005ad0 <RTC_ByteToBcd2>
 80051aa:	0003      	movs	r3, r0
 80051ac:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051ae:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	789b      	ldrb	r3, [r3, #2]
 80051b4:	0018      	movs	r0, r3
 80051b6:	f000 fc8b 	bl	8005ad0 <RTC_ByteToBcd2>
 80051ba:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051bc:	0022      	movs	r2, r4
 80051be:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	78db      	ldrb	r3, [r3, #3]
 80051c4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	e017      	b.n	80051fc <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	2240      	movs	r2, #64	@ 0x40
 80051d4:	4013      	ands	r3, r2
 80051d6:	d102      	bne.n	80051de <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2200      	movs	r2, #0
 80051dc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	785b      	ldrb	r3, [r3, #1]
 80051e8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051ea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051f0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	78db      	ldrb	r3, [r3, #3]
 80051f6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	491b      	ldr	r1, [pc, #108]	@ (8005270 <HAL_RTC_SetTime+0x148>)
 8005204:	400a      	ands	r2, r1
 8005206:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4918      	ldr	r1, [pc, #96]	@ (8005274 <HAL_RTC_SetTime+0x14c>)
 8005214:	400a      	ands	r2, r1
 8005216:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6999      	ldr	r1, [r3, #24]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	431a      	orrs	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005230:	2313      	movs	r3, #19
 8005232:	18fc      	adds	r4, r7, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	0018      	movs	r0, r3
 8005238:	f000 fc06 	bl	8005a48 <RTC_ExitInitMode>
 800523c:	0003      	movs	r3, r0
 800523e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	22ff      	movs	r2, #255	@ 0xff
 8005246:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8005248:	2313      	movs	r3, #19
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d103      	bne.n	800525a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2229      	movs	r2, #41	@ 0x29
 8005256:	2101      	movs	r1, #1
 8005258:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2228      	movs	r2, #40	@ 0x28
 800525e:	2100      	movs	r1, #0
 8005260:	5499      	strb	r1, [r3, r2]

  return status;
 8005262:	2313      	movs	r3, #19
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	781b      	ldrb	r3, [r3, #0]
}
 8005268:	0018      	movs	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	b006      	add	sp, #24
 800526e:	bdb0      	pop	{r4, r5, r7, pc}
 8005270:	007f7f7f 	.word	0x007f7f7f
 8005274:	fffbffff 	.word	0xfffbffff

08005278 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	045b      	lsls	r3, r3, #17
 8005296:	0c5a      	lsrs	r2, r3, #17
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a22      	ldr	r2, [pc, #136]	@ (800532c <HAL_RTC_GetTime+0xb4>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	0c1b      	lsrs	r3, r3, #16
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	223f      	movs	r2, #63	@ 0x3f
 80052b0:	4013      	ands	r3, r2
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	0a1b      	lsrs	r3, r3, #8
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	227f      	movs	r2, #127	@ 0x7f
 80052c0:	4013      	ands	r3, r2
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	227f      	movs	r2, #127	@ 0x7f
 80052ce:	4013      	ands	r3, r2
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	0d9b      	lsrs	r3, r3, #22
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2201      	movs	r2, #1
 80052de:	4013      	ands	r3, r2
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d11a      	bne.n	8005322 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	0018      	movs	r0, r3
 80052f2:	f000 fc15 	bl	8005b20 <RTC_Bcd2ToByte>
 80052f6:	0003      	movs	r3, r0
 80052f8:	001a      	movs	r2, r3
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	785b      	ldrb	r3, [r3, #1]
 8005302:	0018      	movs	r0, r3
 8005304:	f000 fc0c 	bl	8005b20 <RTC_Bcd2ToByte>
 8005308:	0003      	movs	r3, r0
 800530a:	001a      	movs	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	789b      	ldrb	r3, [r3, #2]
 8005314:	0018      	movs	r0, r3
 8005316:	f000 fc03 	bl	8005b20 <RTC_Bcd2ToByte>
 800531a:	0003      	movs	r3, r0
 800531c:	001a      	movs	r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	0018      	movs	r0, r3
 8005326:	46bd      	mov	sp, r7
 8005328:	b006      	add	sp, #24
 800532a:	bd80      	pop	{r7, pc}
 800532c:	007f7f7f 	.word	0x007f7f7f

08005330 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005330:	b5b0      	push	{r4, r5, r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2228      	movs	r2, #40	@ 0x28
 8005340:	5c9b      	ldrb	r3, [r3, r2]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_RTC_SetDate+0x1a>
 8005346:	2302      	movs	r3, #2
 8005348:	e07e      	b.n	8005448 <HAL_RTC_SetDate+0x118>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2228      	movs	r2, #40	@ 0x28
 800534e:	2101      	movs	r1, #1
 8005350:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2229      	movs	r2, #41	@ 0x29
 8005356:	2102      	movs	r1, #2
 8005358:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10e      	bne.n	800537e <HAL_RTC_SetDate+0x4e>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	785b      	ldrb	r3, [r3, #1]
 8005364:	001a      	movs	r2, r3
 8005366:	2310      	movs	r3, #16
 8005368:	4013      	ands	r3, r2
 800536a:	d008      	beq.n	800537e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	2210      	movs	r2, #16
 8005372:	4393      	bics	r3, r2
 8005374:	b2db      	uxtb	r3, r3
 8005376:	330a      	adds	r3, #10
 8005378:	b2da      	uxtb	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d11c      	bne.n	80053be <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	78db      	ldrb	r3, [r3, #3]
 8005388:	0018      	movs	r0, r3
 800538a:	f000 fba1 	bl	8005ad0 <RTC_ByteToBcd2>
 800538e:	0003      	movs	r3, r0
 8005390:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	785b      	ldrb	r3, [r3, #1]
 8005396:	0018      	movs	r0, r3
 8005398:	f000 fb9a 	bl	8005ad0 <RTC_ByteToBcd2>
 800539c:	0003      	movs	r3, r0
 800539e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80053a0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	789b      	ldrb	r3, [r3, #2]
 80053a6:	0018      	movs	r0, r3
 80053a8:	f000 fb92 	bl	8005ad0 <RTC_ByteToBcd2>
 80053ac:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80053ae:	0022      	movs	r2, r4
 80053b0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	e00e      	b.n	80053dc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	78db      	ldrb	r3, [r3, #3]
 80053c2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	785b      	ldrb	r3, [r3, #1]
 80053c8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80053ca:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80053d0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	22ca      	movs	r2, #202	@ 0xca
 80053e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2253      	movs	r2, #83	@ 0x53
 80053ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80053ec:	2513      	movs	r5, #19
 80053ee:	197c      	adds	r4, r7, r5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	0018      	movs	r0, r3
 80053f4:	f000 fae6 	bl	80059c4 <RTC_EnterInitMode>
 80053f8:	0003      	movs	r3, r0
 80053fa:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80053fc:	0028      	movs	r0, r5
 80053fe:	183b      	adds	r3, r7, r0
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10c      	bne.n	8005420 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4910      	ldr	r1, [pc, #64]	@ (8005450 <HAL_RTC_SetDate+0x120>)
 800540e:	400a      	ands	r2, r1
 8005410:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005412:	183c      	adds	r4, r7, r0
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	0018      	movs	r0, r3
 8005418:	f000 fb16 	bl	8005a48 <RTC_ExitInitMode>
 800541c:	0003      	movs	r3, r0
 800541e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	22ff      	movs	r2, #255	@ 0xff
 8005426:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005428:	2313      	movs	r3, #19
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d103      	bne.n	800543a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2229      	movs	r2, #41	@ 0x29
 8005436:	2101      	movs	r1, #1
 8005438:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2228      	movs	r2, #40	@ 0x28
 800543e:	2100      	movs	r1, #0
 8005440:	5499      	strb	r1, [r3, r2]

  return status;
 8005442:	2313      	movs	r3, #19
 8005444:	18fb      	adds	r3, r7, r3
 8005446:	781b      	ldrb	r3, [r3, #0]
}
 8005448:	0018      	movs	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	b006      	add	sp, #24
 800544e:	bdb0      	pop	{r4, r5, r7, pc}
 8005450:	00ffff3f 	.word	0x00ffff3f

08005454 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	4a21      	ldr	r2, [pc, #132]	@ (80054ec <HAL_RTC_GetDate+0x98>)
 8005468:	4013      	ands	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	0c1b      	lsrs	r3, r3, #16
 8005470:	b2da      	uxtb	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	0a1b      	lsrs	r3, r3, #8
 800547a:	b2db      	uxtb	r3, r3
 800547c:	221f      	movs	r2, #31
 800547e:	4013      	ands	r3, r2
 8005480:	b2da      	uxtb	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	223f      	movs	r2, #63	@ 0x3f
 800548c:	4013      	ands	r3, r2
 800548e:	b2da      	uxtb	r2, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	0b5b      	lsrs	r3, r3, #13
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2207      	movs	r2, #7
 800549c:	4013      	ands	r3, r2
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d11a      	bne.n	80054e0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	78db      	ldrb	r3, [r3, #3]
 80054ae:	0018      	movs	r0, r3
 80054b0:	f000 fb36 	bl	8005b20 <RTC_Bcd2ToByte>
 80054b4:	0003      	movs	r3, r0
 80054b6:	001a      	movs	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	785b      	ldrb	r3, [r3, #1]
 80054c0:	0018      	movs	r0, r3
 80054c2:	f000 fb2d 	bl	8005b20 <RTC_Bcd2ToByte>
 80054c6:	0003      	movs	r3, r0
 80054c8:	001a      	movs	r2, r3
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	789b      	ldrb	r3, [r3, #2]
 80054d2:	0018      	movs	r0, r3
 80054d4:	f000 fb24 	bl	8005b20 <RTC_Bcd2ToByte>
 80054d8:	0003      	movs	r3, r0
 80054da:	001a      	movs	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	0018      	movs	r0, r3
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b006      	add	sp, #24
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	46c0      	nop			@ (mov r8, r8)
 80054ec:	00ffff3f 	.word	0x00ffff3f

080054f0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80054f0:	b590      	push	{r4, r7, lr}
 80054f2:	b089      	sub	sp, #36	@ 0x24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2228      	movs	r2, #40	@ 0x28
 8005500:	5c9b      	ldrb	r3, [r3, r2]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_RTC_SetAlarm_IT+0x1a>
 8005506:	2302      	movs	r3, #2
 8005508:	e127      	b.n	800575a <HAL_RTC_SetAlarm_IT+0x26a>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2228      	movs	r2, #40	@ 0x28
 800550e:	2101      	movs	r1, #1
 8005510:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2229      	movs	r2, #41	@ 0x29
 8005516:	2102      	movs	r1, #2
 8005518:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d136      	bne.n	800558e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	2240      	movs	r2, #64	@ 0x40
 8005528:	4013      	ands	r3, r2
 800552a:	d102      	bne.n	8005532 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2200      	movs	r2, #0
 8005530:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	0018      	movs	r0, r3
 8005538:	f000 faca 	bl	8005ad0 <RTC_ByteToBcd2>
 800553c:	0003      	movs	r3, r0
 800553e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	785b      	ldrb	r3, [r3, #1]
 8005544:	0018      	movs	r0, r3
 8005546:	f000 fac3 	bl	8005ad0 <RTC_ByteToBcd2>
 800554a:	0003      	movs	r3, r0
 800554c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800554e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	789b      	ldrb	r3, [r3, #2]
 8005554:	0018      	movs	r0, r3
 8005556:	f000 fabb 	bl	8005ad0 <RTC_ByteToBcd2>
 800555a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800555c:	0022      	movs	r2, r4
 800555e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	78db      	ldrb	r3, [r3, #3]
 8005564:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005566:	431a      	orrs	r2, r3
 8005568:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2220      	movs	r2, #32
 800556e:	5c9b      	ldrb	r3, [r3, r2]
 8005570:	0018      	movs	r0, r3
 8005572:	f000 faad 	bl	8005ad0 <RTC_ByteToBcd2>
 8005576:	0003      	movs	r3, r0
 8005578:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800557a:	0022      	movs	r2, r4
 800557c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005582:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005588:	4313      	orrs	r3, r2
 800558a:	61fb      	str	r3, [r7, #28]
 800558c:	e022      	b.n	80055d4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	2240      	movs	r2, #64	@ 0x40
 8005596:	4013      	ands	r3, r2
 8005598:	d102      	bne.n	80055a0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2200      	movs	r2, #0
 800559e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	785b      	ldrb	r3, [r3, #1]
 80055aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80055ac:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80055b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	78db      	ldrb	r3, [r3, #3]
 80055b8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80055ba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2120      	movs	r1, #32
 80055c0:	5c5b      	ldrb	r3, [r3, r1]
 80055c2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80055c4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80055ca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80055d0:	4313      	orrs	r3, r2
 80055d2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	4313      	orrs	r3, r2
 80055de:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	22ca      	movs	r2, #202	@ 0xca
 80055e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2253      	movs	r2, #83	@ 0x53
 80055ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055f4:	2380      	movs	r3, #128	@ 0x80
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d14c      	bne.n	8005696 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4957      	ldr	r1, [pc, #348]	@ (8005764 <HAL_RTC_SetAlarm_IT+0x274>)
 8005608:	400a      	ands	r2, r1
 800560a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2101      	movs	r1, #1
 8005618:	430a      	orrs	r2, r1
 800561a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800561c:	f7fd f91c 	bl	8002858 <HAL_GetTick>
 8005620:	0003      	movs	r3, r0
 8005622:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005624:	e016      	b.n	8005654 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005626:	f7fd f917 	bl	8002858 <HAL_GetTick>
 800562a:	0002      	movs	r2, r0
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	1ad2      	subs	r2, r2, r3
 8005630:	23fa      	movs	r3, #250	@ 0xfa
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	429a      	cmp	r2, r3
 8005636:	d90d      	bls.n	8005654 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	22ff      	movs	r2, #255	@ 0xff
 800563e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2229      	movs	r2, #41	@ 0x29
 8005644:	2103      	movs	r1, #3
 8005646:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2228      	movs	r2, #40	@ 0x28
 800564c:	2100      	movs	r1, #0
 800564e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e082      	b.n	800575a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	4013      	ands	r3, r2
 800565e:	d0e2      	beq.n	8005626 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699a      	ldr	r2, [r3, #24]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2180      	movs	r1, #128	@ 0x80
 800567c:	0049      	lsls	r1, r1, #1
 800567e:	430a      	orrs	r2, r1
 8005680:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699a      	ldr	r2, [r3, #24]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2180      	movs	r1, #128	@ 0x80
 800568e:	0149      	lsls	r1, r1, #5
 8005690:	430a      	orrs	r2, r1
 8005692:	619a      	str	r2, [r3, #24]
 8005694:	e04b      	b.n	800572e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4931      	ldr	r1, [pc, #196]	@ (8005768 <HAL_RTC_SetAlarm_IT+0x278>)
 80056a2:	400a      	ands	r2, r1
 80056a4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2102      	movs	r1, #2
 80056b2:	430a      	orrs	r2, r1
 80056b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80056b6:	f7fd f8cf 	bl	8002858 <HAL_GetTick>
 80056ba:	0003      	movs	r3, r0
 80056bc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80056be:	e016      	b.n	80056ee <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80056c0:	f7fd f8ca 	bl	8002858 <HAL_GetTick>
 80056c4:	0002      	movs	r2, r0
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	1ad2      	subs	r2, r2, r3
 80056ca:	23fa      	movs	r3, #250	@ 0xfa
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d90d      	bls.n	80056ee <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	22ff      	movs	r2, #255	@ 0xff
 80056d8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2229      	movs	r2, #41	@ 0x29
 80056de:	2103      	movs	r1, #3
 80056e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2228      	movs	r2, #40	@ 0x28
 80056e6:	2100      	movs	r1, #0
 80056e8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e035      	b.n	800575a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	2202      	movs	r2, #2
 80056f6:	4013      	ands	r3, r2
 80056f8:	d0e2      	beq.n	80056c0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	699a      	ldr	r2, [r3, #24]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2180      	movs	r1, #128	@ 0x80
 8005716:	0089      	lsls	r1, r1, #2
 8005718:	430a      	orrs	r2, r1
 800571a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2180      	movs	r1, #128	@ 0x80
 8005728:	0189      	lsls	r1, r1, #6
 800572a:	430a      	orrs	r2, r1
 800572c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800572e:	4a0f      	ldr	r2, [pc, #60]	@ (800576c <HAL_RTC_SetAlarm_IT+0x27c>)
 8005730:	2380      	movs	r3, #128	@ 0x80
 8005732:	58d3      	ldr	r3, [r2, r3]
 8005734:	490d      	ldr	r1, [pc, #52]	@ (800576c <HAL_RTC_SetAlarm_IT+0x27c>)
 8005736:	2280      	movs	r2, #128	@ 0x80
 8005738:	0312      	lsls	r2, r2, #12
 800573a:	4313      	orrs	r3, r2
 800573c:	2280      	movs	r2, #128	@ 0x80
 800573e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	22ff      	movs	r2, #255	@ 0xff
 8005746:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2229      	movs	r2, #41	@ 0x29
 800574c:	2101      	movs	r1, #1
 800574e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2228      	movs	r2, #40	@ 0x28
 8005754:	2100      	movs	r1, #0
 8005756:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	0018      	movs	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	b009      	add	sp, #36	@ 0x24
 8005760:	bd90      	pop	{r4, r7, pc}
 8005762:	46c0      	nop			@ (mov r8, r8)
 8005764:	fffffeff 	.word	0xfffffeff
 8005768:	fffffdff 	.word	0xfffffdff
 800576c:	40021800 	.word	0x40021800

08005770 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	2380      	movs	r3, #128	@ 0x80
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	429a      	cmp	r2, r3
 8005786:	d144      	bne.n	8005812 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2280      	movs	r2, #128	@ 0x80
 800578c:	0052      	lsls	r2, r2, #1
 800578e:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005796:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579e:	045b      	lsls	r3, r3, #17
 80057a0:	0c5b      	lsrs	r3, r3, #17
 80057a2:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	0c1b      	lsrs	r3, r3, #16
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	223f      	movs	r2, #63	@ 0x3f
 80057ac:	4013      	ands	r3, r2
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	0a1b      	lsrs	r3, r3, #8
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	227f      	movs	r2, #127	@ 0x7f
 80057bc:	4013      	ands	r3, r2
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	227f      	movs	r2, #127	@ 0x7f
 80057ca:	4013      	ands	r3, r2
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	0d9b      	lsrs	r3, r3, #22
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2201      	movs	r2, #1
 80057da:	4013      	ands	r3, r2
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	0e1b      	lsrs	r3, r3, #24
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	223f      	movs	r2, #63	@ 0x3f
 80057f0:	4013      	ands	r3, r2
 80057f2:	b2d9      	uxtb	r1, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2220      	movs	r2, #32
 80057f8:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	2380      	movs	r3, #128	@ 0x80
 80057fe:	05db      	lsls	r3, r3, #23
 8005800:	401a      	ands	r2, r3
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	4a3b      	ldr	r2, [pc, #236]	@ (80058f8 <HAL_RTC_GetAlarm+0x188>)
 800580a:	401a      	ands	r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	615a      	str	r2, [r3, #20]
 8005810:	e043      	b.n	800589a <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2280      	movs	r2, #128	@ 0x80
 8005816:	0092      	lsls	r2, r2, #2
 8005818:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005820:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005828:	045b      	lsls	r3, r3, #17
 800582a:	0c5b      	lsrs	r3, r3, #17
 800582c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	0c1b      	lsrs	r3, r3, #16
 8005832:	b2db      	uxtb	r3, r3
 8005834:	223f      	movs	r2, #63	@ 0x3f
 8005836:	4013      	ands	r3, r2
 8005838:	b2da      	uxtb	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	0a1b      	lsrs	r3, r3, #8
 8005842:	b2db      	uxtb	r3, r3
 8005844:	227f      	movs	r2, #127	@ 0x7f
 8005846:	4013      	ands	r3, r2
 8005848:	b2da      	uxtb	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	227f      	movs	r2, #127	@ 0x7f
 8005854:	4013      	ands	r3, r2
 8005856:	b2da      	uxtb	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	0d9b      	lsrs	r3, r3, #22
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2201      	movs	r2, #1
 8005864:	4013      	ands	r3, r2
 8005866:	b2da      	uxtb	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	0e1b      	lsrs	r3, r3, #24
 8005876:	b2db      	uxtb	r3, r3
 8005878:	223f      	movs	r2, #63	@ 0x3f
 800587a:	4013      	ands	r3, r2
 800587c:	b2d9      	uxtb	r1, r3
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2220      	movs	r2, #32
 8005882:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	2380      	movs	r3, #128	@ 0x80
 8005888:	05db      	lsls	r3, r3, #23
 800588a:	401a      	ands	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	4a19      	ldr	r2, [pc, #100]	@ (80058f8 <HAL_RTC_GetAlarm+0x188>)
 8005894:	401a      	ands	r2, r3
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d125      	bne.n	80058ec <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	0018      	movs	r0, r3
 80058a6:	f000 f93b 	bl	8005b20 <RTC_Bcd2ToByte>
 80058aa:	0003      	movs	r3, r0
 80058ac:	001a      	movs	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 f932 	bl	8005b20 <RTC_Bcd2ToByte>
 80058bc:	0003      	movs	r3, r0
 80058be:	001a      	movs	r2, r3
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	789b      	ldrb	r3, [r3, #2]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f000 f929 	bl	8005b20 <RTC_Bcd2ToByte>
 80058ce:	0003      	movs	r3, r0
 80058d0:	001a      	movs	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2220      	movs	r2, #32
 80058da:	5c9b      	ldrb	r3, [r3, r2]
 80058dc:	0018      	movs	r0, r3
 80058de:	f000 f91f 	bl	8005b20 <RTC_Bcd2ToByte>
 80058e2:	0003      	movs	r3, r0
 80058e4:	0019      	movs	r1, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2220      	movs	r2, #32
 80058ea:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	0018      	movs	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b006      	add	sp, #24
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	46c0      	nop			@ (mov r8, r8)
 80058f8:	80808080 	.word	0x80808080

080058fc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	2380      	movs	r3, #128	@ 0x80
 800590c:	015b      	lsls	r3, r3, #5
 800590e:	4013      	ands	r3, r2
 8005910:	d011      	beq.n	8005936 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005918:	2201      	movs	r2, #1
 800591a:	4013      	ands	r3, r2
 800591c:	d00b      	beq.n	8005936 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2101      	movs	r1, #1
 800592a:	430a      	orrs	r2, r1
 800592c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	0018      	movs	r0, r3
 8005932:	f7fb fdab 	bl	800148c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	2380      	movs	r3, #128	@ 0x80
 800593e:	019b      	lsls	r3, r3, #6
 8005940:	4013      	ands	r3, r2
 8005942:	d011      	beq.n	8005968 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800594a:	2202      	movs	r2, #2
 800594c:	4013      	ands	r3, r2
 800594e:	d00b      	beq.n	8005968 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2102      	movs	r1, #2
 800595c:	430a      	orrs	r2, r1
 800595e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	0018      	movs	r0, r3
 8005964:	f000 f9a4 	bl	8005cb0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2229      	movs	r2, #41	@ 0x29
 800596c:	2101      	movs	r1, #1
 800596e:	5499      	strb	r1, [r3, r2]
}
 8005970:	46c0      	nop			@ (mov r8, r8)
 8005972:	46bd      	mov	sp, r7
 8005974:	b002      	add	sp, #8
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a0e      	ldr	r2, [pc, #56]	@ (80059c0 <HAL_RTC_WaitForSynchro+0x48>)
 8005986:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005988:	f7fc ff66 	bl	8002858 <HAL_GetTick>
 800598c:	0003      	movs	r3, r0
 800598e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005990:	e00a      	b.n	80059a8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005992:	f7fc ff61 	bl	8002858 <HAL_GetTick>
 8005996:	0002      	movs	r2, r0
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	1ad2      	subs	r2, r2, r3
 800599c:	23fa      	movs	r3, #250	@ 0xfa
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d901      	bls.n	80059a8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e006      	b.n	80059b6 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2220      	movs	r2, #32
 80059b0:	4013      	ands	r3, r2
 80059b2:	d0ee      	beq.n	8005992 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	0018      	movs	r0, r3
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b004      	add	sp, #16
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	46c0      	nop			@ (mov r8, r8)
 80059c0:	0001005f 	.word	0x0001005f

080059c4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80059cc:	230f      	movs	r3, #15
 80059ce:	18fb      	adds	r3, r7, r3
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	2240      	movs	r2, #64	@ 0x40
 80059dc:	4013      	ands	r3, r2
 80059de:	d12c      	bne.n	8005a3a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2180      	movs	r1, #128	@ 0x80
 80059ec:	430a      	orrs	r2, r1
 80059ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80059f0:	f7fc ff32 	bl	8002858 <HAL_GetTick>
 80059f4:	0003      	movs	r3, r0
 80059f6:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80059f8:	e014      	b.n	8005a24 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80059fa:	f7fc ff2d 	bl	8002858 <HAL_GetTick>
 80059fe:	0002      	movs	r2, r0
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	1ad2      	subs	r2, r2, r3
 8005a04:	200f      	movs	r0, #15
 8005a06:	183b      	adds	r3, r7, r0
 8005a08:	1839      	adds	r1, r7, r0
 8005a0a:	7809      	ldrb	r1, [r1, #0]
 8005a0c:	7019      	strb	r1, [r3, #0]
 8005a0e:	23fa      	movs	r3, #250	@ 0xfa
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d906      	bls.n	8005a24 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005a16:	183b      	adds	r3, r7, r0
 8005a18:	2203      	movs	r2, #3
 8005a1a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2229      	movs	r2, #41	@ 0x29
 8005a20:	2103      	movs	r1, #3
 8005a22:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	2240      	movs	r2, #64	@ 0x40
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	d104      	bne.n	8005a3a <RTC_EnterInitMode+0x76>
 8005a30:	230f      	movs	r3, #15
 8005a32:	18fb      	adds	r3, r7, r3
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d1df      	bne.n	80059fa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005a3a:	230f      	movs	r3, #15
 8005a3c:	18fb      	adds	r3, r7, r3
 8005a3e:	781b      	ldrb	r3, [r3, #0]
}
 8005a40:	0018      	movs	r0, r3
 8005a42:	46bd      	mov	sp, r7
 8005a44:	b004      	add	sp, #16
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a48:	b590      	push	{r4, r7, lr}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a50:	240f      	movs	r4, #15
 8005a52:	193b      	adds	r3, r7, r4
 8005a54:	2200      	movs	r2, #0
 8005a56:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005a58:	4b1c      	ldr	r3, [pc, #112]	@ (8005acc <RTC_ExitInitMode+0x84>)
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005acc <RTC_ExitInitMode+0x84>)
 8005a5e:	2180      	movs	r1, #128	@ 0x80
 8005a60:	438a      	bics	r2, r1
 8005a62:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005a64:	4b19      	ldr	r3, [pc, #100]	@ (8005acc <RTC_ExitInitMode+0x84>)
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	d10d      	bne.n	8005a8a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	0018      	movs	r0, r3
 8005a72:	f7ff ff81 	bl	8005978 <HAL_RTC_WaitForSynchro>
 8005a76:	1e03      	subs	r3, r0, #0
 8005a78:	d021      	beq.n	8005abe <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2229      	movs	r2, #41	@ 0x29
 8005a7e:	2103      	movs	r1, #3
 8005a80:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005a82:	193b      	adds	r3, r7, r4
 8005a84:	2203      	movs	r2, #3
 8005a86:	701a      	strb	r2, [r3, #0]
 8005a88:	e019      	b.n	8005abe <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005a8a:	4b10      	ldr	r3, [pc, #64]	@ (8005acc <RTC_ExitInitMode+0x84>)
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8005acc <RTC_ExitInitMode+0x84>)
 8005a90:	2120      	movs	r1, #32
 8005a92:	438a      	bics	r2, r1
 8005a94:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f7ff ff6d 	bl	8005978 <HAL_RTC_WaitForSynchro>
 8005a9e:	1e03      	subs	r3, r0, #0
 8005aa0:	d007      	beq.n	8005ab2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2229      	movs	r2, #41	@ 0x29
 8005aa6:	2103      	movs	r1, #3
 8005aa8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005aaa:	230f      	movs	r3, #15
 8005aac:	18fb      	adds	r3, r7, r3
 8005aae:	2203      	movs	r2, #3
 8005ab0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005ab2:	4b06      	ldr	r3, [pc, #24]	@ (8005acc <RTC_ExitInitMode+0x84>)
 8005ab4:	699a      	ldr	r2, [r3, #24]
 8005ab6:	4b05      	ldr	r3, [pc, #20]	@ (8005acc <RTC_ExitInitMode+0x84>)
 8005ab8:	2120      	movs	r1, #32
 8005aba:	430a      	orrs	r2, r1
 8005abc:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005abe:	230f      	movs	r3, #15
 8005ac0:	18fb      	adds	r3, r7, r3
 8005ac2:	781b      	ldrb	r3, [r3, #0]
}
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	b005      	add	sp, #20
 8005aca:	bd90      	pop	{r4, r7, pc}
 8005acc:	40002800 	.word	0x40002800

08005ad0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	0002      	movs	r2, r0
 8005ad8:	1dfb      	adds	r3, r7, #7
 8005ada:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005ae0:	230b      	movs	r3, #11
 8005ae2:	18fb      	adds	r3, r7, r3
 8005ae4:	1dfa      	adds	r2, r7, #7
 8005ae6:	7812      	ldrb	r2, [r2, #0]
 8005ae8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005aea:	e008      	b.n	8005afe <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	3301      	adds	r3, #1
 8005af0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005af2:	220b      	movs	r2, #11
 8005af4:	18bb      	adds	r3, r7, r2
 8005af6:	18ba      	adds	r2, r7, r2
 8005af8:	7812      	ldrb	r2, [r2, #0]
 8005afa:	3a0a      	subs	r2, #10
 8005afc:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005afe:	210b      	movs	r1, #11
 8005b00:	187b      	adds	r3, r7, r1
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b09      	cmp	r3, #9
 8005b06:	d8f1      	bhi.n	8005aec <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	187b      	adds	r3, r7, r1
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	b2db      	uxtb	r3, r3
}
 8005b18:	0018      	movs	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b004      	add	sp, #16
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	0002      	movs	r2, r0
 8005b28:	1dfb      	adds	r3, r7, #7
 8005b2a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005b2c:	1dfb      	adds	r3, r7, #7
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	001a      	movs	r2, r3
 8005b36:	0013      	movs	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	189b      	adds	r3, r3, r2
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	1dfb      	adds	r3, r7, #7
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	210f      	movs	r1, #15
 8005b4a:	400b      	ands	r3, r1
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	18d3      	adds	r3, r2, r3
 8005b50:	b2db      	uxtb	r3, r3
}
 8005b52:	0018      	movs	r0, r3
 8005b54:	46bd      	mov	sp, r7
 8005b56:	b004      	add	sp, #16
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b086      	sub	sp, #24
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	607a      	str	r2, [r7, #4]
 8005b66:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2228      	movs	r2, #40	@ 0x28
 8005b6c:	5c9b      	ldrb	r3, [r3, r2]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <HAL_RTCEx_SetSmoothCalib+0x1c>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e04f      	b.n	8005c16 <HAL_RTCEx_SetSmoothCalib+0xbc>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2228      	movs	r2, #40	@ 0x28
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2229      	movs	r2, #41	@ 0x29
 8005b82:	2102      	movs	r1, #2
 8005b84:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	22ca      	movs	r2, #202	@ 0xca
 8005b8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2253      	movs	r2, #83	@ 0x53
 8005b94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	2380      	movs	r3, #128	@ 0x80
 8005b9e:	025b      	lsls	r3, r3, #9
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d022      	beq.n	8005bea <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8005ba4:	f7fc fe58 	bl	8002858 <HAL_GetTick>
 8005ba8:	0003      	movs	r3, r0
 8005baa:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8005bac:	e016      	b.n	8005bdc <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005bae:	f7fc fe53 	bl	8002858 <HAL_GetTick>
 8005bb2:	0002      	movs	r2, r0
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	1ad2      	subs	r2, r2, r3
 8005bb8:	23fa      	movs	r3, #250	@ 0xfa
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d90d      	bls.n	8005bdc <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	22ff      	movs	r2, #255	@ 0xff
 8005bc6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2229      	movs	r2, #41	@ 0x29
 8005bcc:	2103      	movs	r1, #3
 8005bce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2228      	movs	r2, #40	@ 0x28
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e01c      	b.n	8005c16 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	2380      	movs	r3, #128	@ 0x80
 8005be4:	025b      	lsls	r3, r3, #9
 8005be6:	4013      	ands	r3, r2
 8005be8:	d1e1      	bne.n	8005bae <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	0011      	movs	r1, r2
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	22ff      	movs	r2, #255	@ 0xff
 8005c02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2229      	movs	r2, #41	@ 0x29
 8005c08:	2101      	movs	r1, #1
 8005c0a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2228      	movs	r2, #40	@ 0x28
 8005c10:	2100      	movs	r1, #0
 8005c12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	0018      	movs	r0, r3
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	b006      	add	sp, #24
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2228      	movs	r2, #40	@ 0x28
 8005c2e:	5c9b      	ldrb	r3, [r3, r2]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e035      	b.n	8005ca4 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2228      	movs	r2, #40	@ 0x28
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2229      	movs	r2, #41	@ 0x29
 8005c44:	2102      	movs	r1, #2
 8005c46:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	22ca      	movs	r2, #202	@ 0xca
 8005c4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2253      	movs	r2, #83	@ 0x53
 8005c56:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4912      	ldr	r1, [pc, #72]	@ (8005cac <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8005c64:	400a      	ands	r2, r1
 8005c66:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6999      	ldr	r1, [r3, #24]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2180      	movs	r1, #128	@ 0x80
 8005c84:	0409      	lsls	r1, r1, #16
 8005c86:	430a      	orrs	r2, r1
 8005c88:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	22ff      	movs	r2, #255	@ 0xff
 8005c90:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2229      	movs	r2, #41	@ 0x29
 8005c96:	2101      	movs	r1, #1
 8005c98:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2228      	movs	r2, #40	@ 0x28
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	b002      	add	sp, #8
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	fff7ffff 	.word	0xfff7ffff

08005cb0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005cb8:	46c0      	nop			@ (mov r8, r8)
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	b002      	add	sp, #8
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	001a      	movs	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	18d3      	adds	r3, r2, r3
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	33ff      	adds	r3, #255	@ 0xff
 8005ce0:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	18d3      	adds	r3, r2, r3
 8005cea:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	601a      	str	r2, [r3, #0]
}
 8005cf2:	46c0      	nop			@ (mov r8, r8)
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	b006      	add	sp, #24
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	001a      	movs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	18d3      	adds	r3, r2, r3
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3301      	adds	r3, #1
 8005d16:	33ff      	adds	r3, #255	@ 0xff
 8005d18:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	18d3      	adds	r3, r2, r3
 8005d22:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	681b      	ldr	r3, [r3, #0]
}
 8005d28:	0018      	movs	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	b004      	add	sp, #16
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e0a8      	b.n	8005e94 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d109      	bne.n	8005d5e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	2382      	movs	r3, #130	@ 0x82
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d009      	beq.n	8005d6a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	61da      	str	r2, [r3, #28]
 8005d5c:	e005      	b.n	8005d6a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	225d      	movs	r2, #93	@ 0x5d
 8005d74:	5c9b      	ldrb	r3, [r3, r2]
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d107      	bne.n	8005d8c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	225c      	movs	r2, #92	@ 0x5c
 8005d80:	2100      	movs	r1, #0
 8005d82:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	0018      	movs	r0, r3
 8005d88:	f7fc fb6a 	bl	8002460 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	225d      	movs	r2, #93	@ 0x5d
 8005d90:	2102      	movs	r1, #2
 8005d92:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2140      	movs	r1, #64	@ 0x40
 8005da0:	438a      	bics	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	23e0      	movs	r3, #224	@ 0xe0
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d902      	bls.n	8005db6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e002      	b.n	8005dbc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005db6:	2380      	movs	r3, #128	@ 0x80
 8005db8:	015b      	lsls	r3, r3, #5
 8005dba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	23f0      	movs	r3, #240	@ 0xf0
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d008      	beq.n	8005dda <HAL_SPI_Init+0xaa>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	23e0      	movs	r3, #224	@ 0xe0
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d002      	beq.n	8005dda <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	2382      	movs	r3, #130	@ 0x82
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	401a      	ands	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6899      	ldr	r1, [r3, #8]
 8005de8:	2384      	movs	r3, #132	@ 0x84
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	400b      	ands	r3, r1
 8005dee:	431a      	orrs	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	2102      	movs	r1, #2
 8005df6:	400b      	ands	r3, r1
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	2101      	movs	r1, #1
 8005e00:	400b      	ands	r3, r1
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6999      	ldr	r1, [r3, #24]
 8005e08:	2380      	movs	r3, #128	@ 0x80
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	400b      	ands	r3, r1
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	2138      	movs	r1, #56	@ 0x38
 8005e16:	400b      	ands	r3, r1
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	2180      	movs	r1, #128	@ 0x80
 8005e20:	400b      	ands	r3, r1
 8005e22:	431a      	orrs	r2, r3
 8005e24:	0011      	movs	r1, r2
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e2a:	2380      	movs	r3, #128	@ 0x80
 8005e2c:	019b      	lsls	r3, r3, #6
 8005e2e:	401a      	ands	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	0c1b      	lsrs	r3, r3, #16
 8005e3e:	2204      	movs	r2, #4
 8005e40:	401a      	ands	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e46:	2110      	movs	r1, #16
 8005e48:	400b      	ands	r3, r1
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e50:	2108      	movs	r1, #8
 8005e52:	400b      	ands	r3, r1
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68d9      	ldr	r1, [r3, #12]
 8005e5a:	23f0      	movs	r3, #240	@ 0xf0
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	400b      	ands	r3, r1
 8005e60:	431a      	orrs	r2, r3
 8005e62:	0011      	movs	r1, r2
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	2380      	movs	r3, #128	@ 0x80
 8005e68:	015b      	lsls	r3, r3, #5
 8005e6a:	401a      	ands	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69da      	ldr	r2, [r3, #28]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4907      	ldr	r1, [pc, #28]	@ (8005e9c <HAL_SPI_Init+0x16c>)
 8005e80:	400a      	ands	r2, r1
 8005e82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	225d      	movs	r2, #93	@ 0x5d
 8005e8e:	2101      	movs	r1, #1
 8005e90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	0018      	movs	r0, r3
 8005e96:	46bd      	mov	sp, r7
 8005e98:	b004      	add	sp, #16
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	fffff7ff 	.word	0xfffff7ff

08005ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e04a      	b.n	8005f48 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	223d      	movs	r2, #61	@ 0x3d
 8005eb6:	5c9b      	ldrb	r3, [r3, r2]
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d107      	bne.n	8005ece <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	223c      	movs	r2, #60	@ 0x3c
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f7fc fb45 	bl	8002558 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	223d      	movs	r2, #61	@ 0x3d
 8005ed2:	2102      	movs	r1, #2
 8005ed4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3304      	adds	r3, #4
 8005ede:	0019      	movs	r1, r3
 8005ee0:	0010      	movs	r0, r2
 8005ee2:	f000 fc87 	bl	80067f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2248      	movs	r2, #72	@ 0x48
 8005eea:	2101      	movs	r1, #1
 8005eec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	223e      	movs	r2, #62	@ 0x3e
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	5499      	strb	r1, [r3, r2]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	223f      	movs	r2, #63	@ 0x3f
 8005efa:	2101      	movs	r1, #1
 8005efc:	5499      	strb	r1, [r3, r2]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2240      	movs	r2, #64	@ 0x40
 8005f02:	2101      	movs	r1, #1
 8005f04:	5499      	strb	r1, [r3, r2]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2241      	movs	r2, #65	@ 0x41
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	5499      	strb	r1, [r3, r2]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2242      	movs	r2, #66	@ 0x42
 8005f12:	2101      	movs	r1, #1
 8005f14:	5499      	strb	r1, [r3, r2]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2243      	movs	r2, #67	@ 0x43
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2244      	movs	r2, #68	@ 0x44
 8005f22:	2101      	movs	r1, #1
 8005f24:	5499      	strb	r1, [r3, r2]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2245      	movs	r2, #69	@ 0x45
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	5499      	strb	r1, [r3, r2]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2246      	movs	r2, #70	@ 0x46
 8005f32:	2101      	movs	r1, #1
 8005f34:	5499      	strb	r1, [r3, r2]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2247      	movs	r2, #71	@ 0x47
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	223d      	movs	r2, #61	@ 0x3d
 8005f42:	2101      	movs	r1, #1
 8005f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	0018      	movs	r0, r3
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	b002      	add	sp, #8
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	223d      	movs	r2, #61	@ 0x3d
 8005f5c:	5c9b      	ldrb	r3, [r3, r2]
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d001      	beq.n	8005f68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e035      	b.n	8005fd4 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	223d      	movs	r2, #61	@ 0x3d
 8005f6c:	2102      	movs	r1, #2
 8005f6e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a19      	ldr	r2, [pc, #100]	@ (8005fdc <HAL_TIM_Base_Start+0x8c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00a      	beq.n	8005f90 <HAL_TIM_Base_Start+0x40>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	2380      	movs	r3, #128	@ 0x80
 8005f80:	05db      	lsls	r3, r3, #23
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d004      	beq.n	8005f90 <HAL_TIM_Base_Start+0x40>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a15      	ldr	r2, [pc, #84]	@ (8005fe0 <HAL_TIM_Base_Start+0x90>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d116      	bne.n	8005fbe <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	4a13      	ldr	r2, [pc, #76]	@ (8005fe4 <HAL_TIM_Base_Start+0x94>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b06      	cmp	r3, #6
 8005fa0:	d016      	beq.n	8005fd0 <HAL_TIM_Base_Start+0x80>
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	2380      	movs	r3, #128	@ 0x80
 8005fa6:	025b      	lsls	r3, r3, #9
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d011      	beq.n	8005fd0 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fbc:	e008      	b.n	8005fd0 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2101      	movs	r1, #1
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	e000      	b.n	8005fd2 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	b004      	add	sp, #16
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40012c00 	.word	0x40012c00
 8005fe0:	40000400 	.word	0x40000400
 8005fe4:	00010007 	.word	0x00010007

08005fe8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	4a0d      	ldr	r2, [pc, #52]	@ (800602c <HAL_TIM_Base_Stop+0x44>)
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	d10d      	bne.n	8006018 <HAL_TIM_Base_Stop+0x30>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	4a0b      	ldr	r2, [pc, #44]	@ (8006030 <HAL_TIM_Base_Stop+0x48>)
 8006004:	4013      	ands	r3, r2
 8006006:	d107      	bne.n	8006018 <HAL_TIM_Base_Stop+0x30>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2101      	movs	r1, #1
 8006014:	438a      	bics	r2, r1
 8006016:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	223d      	movs	r2, #61	@ 0x3d
 800601c:	2101      	movs	r1, #1
 800601e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	0018      	movs	r0, r3
 8006024:	46bd      	mov	sp, r7
 8006026:	b002      	add	sp, #8
 8006028:	bd80      	pop	{r7, pc}
 800602a:	46c0      	nop			@ (mov r8, r8)
 800602c:	00001111 	.word	0x00001111
 8006030:	00000444 	.word	0x00000444

08006034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	223d      	movs	r2, #61	@ 0x3d
 8006040:	5c9b      	ldrb	r3, [r3, r2]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b01      	cmp	r3, #1
 8006046:	d001      	beq.n	800604c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e03d      	b.n	80060c8 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	223d      	movs	r2, #61	@ 0x3d
 8006050:	2102      	movs	r1, #2
 8006052:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2101      	movs	r1, #1
 8006060:	430a      	orrs	r2, r1
 8006062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a19      	ldr	r2, [pc, #100]	@ (80060d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00a      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x50>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	2380      	movs	r3, #128	@ 0x80
 8006074:	05db      	lsls	r3, r3, #23
 8006076:	429a      	cmp	r2, r3
 8006078:	d004      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x50>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a15      	ldr	r2, [pc, #84]	@ (80060d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d116      	bne.n	80060b2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	4a13      	ldr	r2, [pc, #76]	@ (80060d8 <HAL_TIM_Base_Start_IT+0xa4>)
 800608c:	4013      	ands	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b06      	cmp	r3, #6
 8006094:	d016      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x90>
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	2380      	movs	r3, #128	@ 0x80
 800609a:	025b      	lsls	r3, r3, #9
 800609c:	429a      	cmp	r2, r3
 800609e:	d011      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2101      	movs	r1, #1
 80060ac:	430a      	orrs	r2, r1
 80060ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b0:	e008      	b.n	80060c4 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2101      	movs	r1, #1
 80060be:	430a      	orrs	r2, r1
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	e000      	b.n	80060c6 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	0018      	movs	r0, r3
 80060ca:	46bd      	mov	sp, r7
 80060cc:	b004      	add	sp, #16
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40012c00 	.word	0x40012c00
 80060d4:	40000400 	.word	0x40000400
 80060d8:	00010007 	.word	0x00010007

080060dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2101      	movs	r1, #1
 80060f0:	438a      	bics	r2, r1
 80060f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	4a0d      	ldr	r2, [pc, #52]	@ (8006130 <HAL_TIM_Base_Stop_IT+0x54>)
 80060fc:	4013      	ands	r3, r2
 80060fe:	d10d      	bne.n	800611c <HAL_TIM_Base_Stop_IT+0x40>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	4a0b      	ldr	r2, [pc, #44]	@ (8006134 <HAL_TIM_Base_Stop_IT+0x58>)
 8006108:	4013      	ands	r3, r2
 800610a:	d107      	bne.n	800611c <HAL_TIM_Base_Stop_IT+0x40>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2101      	movs	r1, #1
 8006118:	438a      	bics	r2, r1
 800611a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	223d      	movs	r2, #61	@ 0x3d
 8006120:	2101      	movs	r1, #1
 8006122:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	0018      	movs	r0, r3
 8006128:	46bd      	mov	sp, r7
 800612a:	b002      	add	sp, #8
 800612c:	bd80      	pop	{r7, pc}
 800612e:	46c0      	nop			@ (mov r8, r8)
 8006130:	00001111 	.word	0x00001111
 8006134:	00000444 	.word	0x00000444

08006138 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e04a      	b.n	80061e0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	223d      	movs	r2, #61	@ 0x3d
 800614e:	5c9b      	ldrb	r3, [r3, r2]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d107      	bne.n	8006166 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	223c      	movs	r2, #60	@ 0x3c
 800615a:	2100      	movs	r1, #0
 800615c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	0018      	movs	r0, r3
 8006162:	f7fc f9dd 	bl	8002520 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	223d      	movs	r2, #61	@ 0x3d
 800616a:	2102      	movs	r1, #2
 800616c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3304      	adds	r3, #4
 8006176:	0019      	movs	r1, r3
 8006178:	0010      	movs	r0, r2
 800617a:	f000 fb3b 	bl	80067f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2248      	movs	r2, #72	@ 0x48
 8006182:	2101      	movs	r1, #1
 8006184:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	223e      	movs	r2, #62	@ 0x3e
 800618a:	2101      	movs	r1, #1
 800618c:	5499      	strb	r1, [r3, r2]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	223f      	movs	r2, #63	@ 0x3f
 8006192:	2101      	movs	r1, #1
 8006194:	5499      	strb	r1, [r3, r2]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2240      	movs	r2, #64	@ 0x40
 800619a:	2101      	movs	r1, #1
 800619c:	5499      	strb	r1, [r3, r2]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2241      	movs	r2, #65	@ 0x41
 80061a2:	2101      	movs	r1, #1
 80061a4:	5499      	strb	r1, [r3, r2]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2242      	movs	r2, #66	@ 0x42
 80061aa:	2101      	movs	r1, #1
 80061ac:	5499      	strb	r1, [r3, r2]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2243      	movs	r2, #67	@ 0x43
 80061b2:	2101      	movs	r1, #1
 80061b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2244      	movs	r2, #68	@ 0x44
 80061ba:	2101      	movs	r1, #1
 80061bc:	5499      	strb	r1, [r3, r2]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2245      	movs	r2, #69	@ 0x45
 80061c2:	2101      	movs	r1, #1
 80061c4:	5499      	strb	r1, [r3, r2]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2246      	movs	r2, #70	@ 0x46
 80061ca:	2101      	movs	r1, #1
 80061cc:	5499      	strb	r1, [r3, r2]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2247      	movs	r2, #71	@ 0x47
 80061d2:	2101      	movs	r1, #1
 80061d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	223d      	movs	r2, #61	@ 0x3d
 80061da:	2101      	movs	r1, #1
 80061dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	0018      	movs	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	b002      	add	sp, #8
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d108      	bne.n	800620a <HAL_TIM_PWM_Start+0x22>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	223e      	movs	r2, #62	@ 0x3e
 80061fc:	5c9b      	ldrb	r3, [r3, r2]
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	3b01      	subs	r3, #1
 8006202:	1e5a      	subs	r2, r3, #1
 8006204:	4193      	sbcs	r3, r2
 8006206:	b2db      	uxtb	r3, r3
 8006208:	e037      	b.n	800627a <HAL_TIM_PWM_Start+0x92>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b04      	cmp	r3, #4
 800620e:	d108      	bne.n	8006222 <HAL_TIM_PWM_Start+0x3a>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	223f      	movs	r2, #63	@ 0x3f
 8006214:	5c9b      	ldrb	r3, [r3, r2]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	1e5a      	subs	r2, r3, #1
 800621c:	4193      	sbcs	r3, r2
 800621e:	b2db      	uxtb	r3, r3
 8006220:	e02b      	b.n	800627a <HAL_TIM_PWM_Start+0x92>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b08      	cmp	r3, #8
 8006226:	d108      	bne.n	800623a <HAL_TIM_PWM_Start+0x52>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2240      	movs	r2, #64	@ 0x40
 800622c:	5c9b      	ldrb	r3, [r3, r2]
 800622e:	b2db      	uxtb	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	1e5a      	subs	r2, r3, #1
 8006234:	4193      	sbcs	r3, r2
 8006236:	b2db      	uxtb	r3, r3
 8006238:	e01f      	b.n	800627a <HAL_TIM_PWM_Start+0x92>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b0c      	cmp	r3, #12
 800623e:	d108      	bne.n	8006252 <HAL_TIM_PWM_Start+0x6a>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2241      	movs	r2, #65	@ 0x41
 8006244:	5c9b      	ldrb	r3, [r3, r2]
 8006246:	b2db      	uxtb	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	1e5a      	subs	r2, r3, #1
 800624c:	4193      	sbcs	r3, r2
 800624e:	b2db      	uxtb	r3, r3
 8006250:	e013      	b.n	800627a <HAL_TIM_PWM_Start+0x92>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b10      	cmp	r3, #16
 8006256:	d108      	bne.n	800626a <HAL_TIM_PWM_Start+0x82>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2242      	movs	r2, #66	@ 0x42
 800625c:	5c9b      	ldrb	r3, [r3, r2]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	1e5a      	subs	r2, r3, #1
 8006264:	4193      	sbcs	r3, r2
 8006266:	b2db      	uxtb	r3, r3
 8006268:	e007      	b.n	800627a <HAL_TIM_PWM_Start+0x92>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2243      	movs	r2, #67	@ 0x43
 800626e:	5c9b      	ldrb	r3, [r3, r2]
 8006270:	b2db      	uxtb	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	1e5a      	subs	r2, r3, #1
 8006276:	4193      	sbcs	r3, r2
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e081      	b.n	8006386 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <HAL_TIM_PWM_Start+0xaa>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	223e      	movs	r2, #62	@ 0x3e
 800628c:	2102      	movs	r1, #2
 800628e:	5499      	strb	r1, [r3, r2]
 8006290:	e023      	b.n	80062da <HAL_TIM_PWM_Start+0xf2>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b04      	cmp	r3, #4
 8006296:	d104      	bne.n	80062a2 <HAL_TIM_PWM_Start+0xba>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	223f      	movs	r2, #63	@ 0x3f
 800629c:	2102      	movs	r1, #2
 800629e:	5499      	strb	r1, [r3, r2]
 80062a0:	e01b      	b.n	80062da <HAL_TIM_PWM_Start+0xf2>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d104      	bne.n	80062b2 <HAL_TIM_PWM_Start+0xca>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2240      	movs	r2, #64	@ 0x40
 80062ac:	2102      	movs	r1, #2
 80062ae:	5499      	strb	r1, [r3, r2]
 80062b0:	e013      	b.n	80062da <HAL_TIM_PWM_Start+0xf2>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b0c      	cmp	r3, #12
 80062b6:	d104      	bne.n	80062c2 <HAL_TIM_PWM_Start+0xda>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2241      	movs	r2, #65	@ 0x41
 80062bc:	2102      	movs	r1, #2
 80062be:	5499      	strb	r1, [r3, r2]
 80062c0:	e00b      	b.n	80062da <HAL_TIM_PWM_Start+0xf2>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b10      	cmp	r3, #16
 80062c6:	d104      	bne.n	80062d2 <HAL_TIM_PWM_Start+0xea>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2242      	movs	r2, #66	@ 0x42
 80062cc:	2102      	movs	r1, #2
 80062ce:	5499      	strb	r1, [r3, r2]
 80062d0:	e003      	b.n	80062da <HAL_TIM_PWM_Start+0xf2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2243      	movs	r2, #67	@ 0x43
 80062d6:	2102      	movs	r1, #2
 80062d8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	2201      	movs	r2, #1
 80062e2:	0018      	movs	r0, r3
 80062e4:	f000 fda6 	bl	8006e34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a28      	ldr	r2, [pc, #160]	@ (8006390 <HAL_TIM_PWM_Start+0x1a8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_TIM_PWM_Start+0x11e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a27      	ldr	r2, [pc, #156]	@ (8006394 <HAL_TIM_PWM_Start+0x1ac>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <HAL_TIM_PWM_Start+0x11e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a25      	ldr	r2, [pc, #148]	@ (8006398 <HAL_TIM_PWM_Start+0x1b0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d101      	bne.n	800630a <HAL_TIM_PWM_Start+0x122>
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <HAL_TIM_PWM_Start+0x124>
 800630a:	2300      	movs	r3, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d008      	beq.n	8006322 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2180      	movs	r1, #128	@ 0x80
 800631c:	0209      	lsls	r1, r1, #8
 800631e:	430a      	orrs	r2, r1
 8006320:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a1a      	ldr	r2, [pc, #104]	@ (8006390 <HAL_TIM_PWM_Start+0x1a8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d00a      	beq.n	8006342 <HAL_TIM_PWM_Start+0x15a>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	2380      	movs	r3, #128	@ 0x80
 8006332:	05db      	lsls	r3, r3, #23
 8006334:	429a      	cmp	r2, r3
 8006336:	d004      	beq.n	8006342 <HAL_TIM_PWM_Start+0x15a>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a17      	ldr	r2, [pc, #92]	@ (800639c <HAL_TIM_PWM_Start+0x1b4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d116      	bne.n	8006370 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	4a15      	ldr	r2, [pc, #84]	@ (80063a0 <HAL_TIM_PWM_Start+0x1b8>)
 800634a:	4013      	ands	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b06      	cmp	r3, #6
 8006352:	d016      	beq.n	8006382 <HAL_TIM_PWM_Start+0x19a>
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	2380      	movs	r3, #128	@ 0x80
 8006358:	025b      	lsls	r3, r3, #9
 800635a:	429a      	cmp	r2, r3
 800635c:	d011      	beq.n	8006382 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2101      	movs	r1, #1
 800636a:	430a      	orrs	r2, r1
 800636c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800636e:	e008      	b.n	8006382 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2101      	movs	r1, #1
 800637c:	430a      	orrs	r2, r1
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	e000      	b.n	8006384 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006382:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	0018      	movs	r0, r3
 8006388:	46bd      	mov	sp, r7
 800638a:	b004      	add	sp, #16
 800638c:	bd80      	pop	{r7, pc}
 800638e:	46c0      	nop			@ (mov r8, r8)
 8006390:	40012c00 	.word	0x40012c00
 8006394:	40014400 	.word	0x40014400
 8006398:	40014800 	.word	0x40014800
 800639c:	40000400 	.word	0x40000400
 80063a0:	00010007 	.word	0x00010007

080063a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2202      	movs	r2, #2
 80063c0:	4013      	ands	r3, r2
 80063c2:	d021      	beq.n	8006408 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2202      	movs	r2, #2
 80063c8:	4013      	ands	r3, r2
 80063ca:	d01d      	beq.n	8006408 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2203      	movs	r2, #3
 80063d2:	4252      	negs	r2, r2
 80063d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	2203      	movs	r2, #3
 80063e4:	4013      	ands	r3, r2
 80063e6:	d004      	beq.n	80063f2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	0018      	movs	r0, r3
 80063ec:	f000 f9ea 	bl	80067c4 <HAL_TIM_IC_CaptureCallback>
 80063f0:	e007      	b.n	8006402 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	0018      	movs	r0, r3
 80063f6:	f000 f9dd 	bl	80067b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	0018      	movs	r0, r3
 80063fe:	f000 f9e9 	bl	80067d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2204      	movs	r2, #4
 800640c:	4013      	ands	r3, r2
 800640e:	d022      	beq.n	8006456 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2204      	movs	r2, #4
 8006414:	4013      	ands	r3, r2
 8006416:	d01e      	beq.n	8006456 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2205      	movs	r2, #5
 800641e:	4252      	negs	r2, r2
 8006420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2202      	movs	r2, #2
 8006426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699a      	ldr	r2, [r3, #24]
 800642e:	23c0      	movs	r3, #192	@ 0xc0
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4013      	ands	r3, r2
 8006434:	d004      	beq.n	8006440 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	0018      	movs	r0, r3
 800643a:	f000 f9c3 	bl	80067c4 <HAL_TIM_IC_CaptureCallback>
 800643e:	e007      	b.n	8006450 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	0018      	movs	r0, r3
 8006444:	f000 f9b6 	bl	80067b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	0018      	movs	r0, r3
 800644c:	f000 f9c2 	bl	80067d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2208      	movs	r2, #8
 800645a:	4013      	ands	r3, r2
 800645c:	d021      	beq.n	80064a2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2208      	movs	r2, #8
 8006462:	4013      	ands	r3, r2
 8006464:	d01d      	beq.n	80064a2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2209      	movs	r2, #9
 800646c:	4252      	negs	r2, r2
 800646e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2204      	movs	r2, #4
 8006474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	2203      	movs	r2, #3
 800647e:	4013      	ands	r3, r2
 8006480:	d004      	beq.n	800648c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	0018      	movs	r0, r3
 8006486:	f000 f99d 	bl	80067c4 <HAL_TIM_IC_CaptureCallback>
 800648a:	e007      	b.n	800649c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	0018      	movs	r0, r3
 8006490:	f000 f990 	bl	80067b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	0018      	movs	r0, r3
 8006498:	f000 f99c 	bl	80067d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2210      	movs	r2, #16
 80064a6:	4013      	ands	r3, r2
 80064a8:	d022      	beq.n	80064f0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2210      	movs	r2, #16
 80064ae:	4013      	ands	r3, r2
 80064b0:	d01e      	beq.n	80064f0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2211      	movs	r2, #17
 80064b8:	4252      	negs	r2, r2
 80064ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2208      	movs	r2, #8
 80064c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69da      	ldr	r2, [r3, #28]
 80064c8:	23c0      	movs	r3, #192	@ 0xc0
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4013      	ands	r3, r2
 80064ce:	d004      	beq.n	80064da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	0018      	movs	r0, r3
 80064d4:	f000 f976 	bl	80067c4 <HAL_TIM_IC_CaptureCallback>
 80064d8:	e007      	b.n	80064ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	0018      	movs	r0, r3
 80064de:	f000 f969 	bl	80067b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	0018      	movs	r0, r3
 80064e6:	f000 f975 	bl	80067d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2201      	movs	r2, #1
 80064f4:	4013      	ands	r3, r2
 80064f6:	d00c      	beq.n	8006512 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	4013      	ands	r3, r2
 80064fe:	d008      	beq.n	8006512 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2202      	movs	r2, #2
 8006506:	4252      	negs	r2, r2
 8006508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	0018      	movs	r0, r3
 800650e:	f7fb f90b 	bl	8001728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2280      	movs	r2, #128	@ 0x80
 8006516:	4013      	ands	r3, r2
 8006518:	d104      	bne.n	8006524 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	2380      	movs	r3, #128	@ 0x80
 800651e:	019b      	lsls	r3, r3, #6
 8006520:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006522:	d00b      	beq.n	800653c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2280      	movs	r2, #128	@ 0x80
 8006528:	4013      	ands	r3, r2
 800652a:	d007      	beq.n	800653c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a1e      	ldr	r2, [pc, #120]	@ (80065ac <HAL_TIM_IRQHandler+0x208>)
 8006532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	0018      	movs	r0, r3
 8006538:	f000 fd10 	bl	8006f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	2380      	movs	r3, #128	@ 0x80
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	4013      	ands	r3, r2
 8006544:	d00b      	beq.n	800655e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2280      	movs	r2, #128	@ 0x80
 800654a:	4013      	ands	r3, r2
 800654c:	d007      	beq.n	800655e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a17      	ldr	r2, [pc, #92]	@ (80065b0 <HAL_TIM_IRQHandler+0x20c>)
 8006554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	0018      	movs	r0, r3
 800655a:	f000 fd07 	bl	8006f6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2240      	movs	r2, #64	@ 0x40
 8006562:	4013      	ands	r3, r2
 8006564:	d00c      	beq.n	8006580 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2240      	movs	r2, #64	@ 0x40
 800656a:	4013      	ands	r3, r2
 800656c:	d008      	beq.n	8006580 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2241      	movs	r2, #65	@ 0x41
 8006574:	4252      	negs	r2, r2
 8006576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	0018      	movs	r0, r3
 800657c:	f000 f932 	bl	80067e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2220      	movs	r2, #32
 8006584:	4013      	ands	r3, r2
 8006586:	d00c      	beq.n	80065a2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2220      	movs	r2, #32
 800658c:	4013      	ands	r3, r2
 800658e:	d008      	beq.n	80065a2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2221      	movs	r2, #33	@ 0x21
 8006596:	4252      	negs	r2, r2
 8006598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	0018      	movs	r0, r3
 800659e:	f000 fcd5 	bl	8006f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065a2:	46c0      	nop			@ (mov r8, r8)
 80065a4:	46bd      	mov	sp, r7
 80065a6:	b004      	add	sp, #16
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	46c0      	nop			@ (mov r8, r8)
 80065ac:	ffffdf7f 	.word	0xffffdf7f
 80065b0:	fffffeff 	.word	0xfffffeff

080065b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065c0:	2317      	movs	r3, #23
 80065c2:	18fb      	adds	r3, r7, r3
 80065c4:	2200      	movs	r2, #0
 80065c6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	223c      	movs	r2, #60	@ 0x3c
 80065cc:	5c9b      	ldrb	r3, [r3, r2]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d101      	bne.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80065d2:	2302      	movs	r3, #2
 80065d4:	e0e5      	b.n	80067a2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	223c      	movs	r2, #60	@ 0x3c
 80065da:	2101      	movs	r1, #1
 80065dc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b14      	cmp	r3, #20
 80065e2:	d900      	bls.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80065e4:	e0d1      	b.n	800678a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	009a      	lsls	r2, r3, #2
 80065ea:	4b70      	ldr	r3, [pc, #448]	@ (80067ac <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80065ec:	18d3      	adds	r3, r2, r3
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	0011      	movs	r1, r2
 80065fa:	0018      	movs	r0, r3
 80065fc:	f000 f97e 	bl	80068fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2108      	movs	r1, #8
 800660c:	430a      	orrs	r2, r1
 800660e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2104      	movs	r1, #4
 800661c:	438a      	bics	r2, r1
 800661e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6999      	ldr	r1, [r3, #24]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	691a      	ldr	r2, [r3, #16]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	619a      	str	r2, [r3, #24]
      break;
 8006632:	e0af      	b.n	8006794 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	0011      	movs	r1, r2
 800663c:	0018      	movs	r0, r3
 800663e:	f000 f9dd 	bl	80069fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699a      	ldr	r2, [r3, #24]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2180      	movs	r1, #128	@ 0x80
 800664e:	0109      	lsls	r1, r1, #4
 8006650:	430a      	orrs	r2, r1
 8006652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4954      	ldr	r1, [pc, #336]	@ (80067b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006660:	400a      	ands	r2, r1
 8006662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6999      	ldr	r1, [r3, #24]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	021a      	lsls	r2, r3, #8
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	619a      	str	r2, [r3, #24]
      break;
 8006678:	e08c      	b.n	8006794 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	0011      	movs	r1, r2
 8006682:	0018      	movs	r0, r3
 8006684:	f000 fa38 	bl	8006af8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69da      	ldr	r2, [r3, #28]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2108      	movs	r1, #8
 8006694:	430a      	orrs	r2, r1
 8006696:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69da      	ldr	r2, [r3, #28]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2104      	movs	r1, #4
 80066a4:	438a      	bics	r2, r1
 80066a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69d9      	ldr	r1, [r3, #28]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	691a      	ldr	r2, [r3, #16]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	61da      	str	r2, [r3, #28]
      break;
 80066ba:	e06b      	b.n	8006794 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	0011      	movs	r1, r2
 80066c4:	0018      	movs	r0, r3
 80066c6:	f000 fa99 	bl	8006bfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69da      	ldr	r2, [r3, #28]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2180      	movs	r1, #128	@ 0x80
 80066d6:	0109      	lsls	r1, r1, #4
 80066d8:	430a      	orrs	r2, r1
 80066da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	69da      	ldr	r2, [r3, #28]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4932      	ldr	r1, [pc, #200]	@ (80067b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80066e8:	400a      	ands	r2, r1
 80066ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	69d9      	ldr	r1, [r3, #28]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	021a      	lsls	r2, r3, #8
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	61da      	str	r2, [r3, #28]
      break;
 8006700:	e048      	b.n	8006794 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	0011      	movs	r1, r2
 800670a:	0018      	movs	r0, r3
 800670c:	f000 fada 	bl	8006cc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2108      	movs	r1, #8
 800671c:	430a      	orrs	r2, r1
 800671e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2104      	movs	r1, #4
 800672c:	438a      	bics	r2, r1
 800672e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006742:	e027      	b.n	8006794 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	0011      	movs	r1, r2
 800674c:	0018      	movs	r0, r3
 800674e:	f000 fb13 	bl	8006d78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2180      	movs	r1, #128	@ 0x80
 800675e:	0109      	lsls	r1, r1, #4
 8006760:	430a      	orrs	r2, r1
 8006762:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4910      	ldr	r1, [pc, #64]	@ (80067b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006770:	400a      	ands	r2, r1
 8006772:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	021a      	lsls	r2, r3, #8
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006788:	e004      	b.n	8006794 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800678a:	2317      	movs	r3, #23
 800678c:	18fb      	adds	r3, r7, r3
 800678e:	2201      	movs	r2, #1
 8006790:	701a      	strb	r2, [r3, #0]
      break;
 8006792:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	223c      	movs	r2, #60	@ 0x3c
 8006798:	2100      	movs	r1, #0
 800679a:	5499      	strb	r1, [r3, r2]

  return status;
 800679c:	2317      	movs	r3, #23
 800679e:	18fb      	adds	r3, r7, r3
 80067a0:	781b      	ldrb	r3, [r3, #0]
}
 80067a2:	0018      	movs	r0, r3
 80067a4:	46bd      	mov	sp, r7
 80067a6:	b006      	add	sp, #24
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	46c0      	nop			@ (mov r8, r8)
 80067ac:	08007094 	.word	0x08007094
 80067b0:	fffffbff 	.word	0xfffffbff

080067b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067bc:	46c0      	nop			@ (mov r8, r8)
 80067be:	46bd      	mov	sp, r7
 80067c0:	b002      	add	sp, #8
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067cc:	46c0      	nop			@ (mov r8, r8)
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b002      	add	sp, #8
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067dc:	46c0      	nop			@ (mov r8, r8)
 80067de:	46bd      	mov	sp, r7
 80067e0:	b002      	add	sp, #8
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067ec:	46c0      	nop			@ (mov r8, r8)
 80067ee:	46bd      	mov	sp, r7
 80067f0:	b002      	add	sp, #8
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a37      	ldr	r2, [pc, #220]	@ (80068e4 <TIM_Base_SetConfig+0xf0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d008      	beq.n	800681e <TIM_Base_SetConfig+0x2a>
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	2380      	movs	r3, #128	@ 0x80
 8006810:	05db      	lsls	r3, r3, #23
 8006812:	429a      	cmp	r2, r3
 8006814:	d003      	beq.n	800681e <TIM_Base_SetConfig+0x2a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a33      	ldr	r2, [pc, #204]	@ (80068e8 <TIM_Base_SetConfig+0xf4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d108      	bne.n	8006830 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2270      	movs	r2, #112	@ 0x70
 8006822:	4393      	bics	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	4313      	orrs	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a2c      	ldr	r2, [pc, #176]	@ (80068e4 <TIM_Base_SetConfig+0xf0>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d014      	beq.n	8006862 <TIM_Base_SetConfig+0x6e>
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	2380      	movs	r3, #128	@ 0x80
 800683c:	05db      	lsls	r3, r3, #23
 800683e:	429a      	cmp	r2, r3
 8006840:	d00f      	beq.n	8006862 <TIM_Base_SetConfig+0x6e>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a28      	ldr	r2, [pc, #160]	@ (80068e8 <TIM_Base_SetConfig+0xf4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00b      	beq.n	8006862 <TIM_Base_SetConfig+0x6e>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a27      	ldr	r2, [pc, #156]	@ (80068ec <TIM_Base_SetConfig+0xf8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d007      	beq.n	8006862 <TIM_Base_SetConfig+0x6e>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a26      	ldr	r2, [pc, #152]	@ (80068f0 <TIM_Base_SetConfig+0xfc>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_Base_SetConfig+0x6e>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a25      	ldr	r2, [pc, #148]	@ (80068f4 <TIM_Base_SetConfig+0x100>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d108      	bne.n	8006874 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4a24      	ldr	r2, [pc, #144]	@ (80068f8 <TIM_Base_SetConfig+0x104>)
 8006866:	4013      	ands	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2280      	movs	r2, #128	@ 0x80
 8006878:	4393      	bics	r3, r2
 800687a:	001a      	movs	r2, r3
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	689a      	ldr	r2, [r3, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a11      	ldr	r2, [pc, #68]	@ (80068e4 <TIM_Base_SetConfig+0xf0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d007      	beq.n	80068b2 <TIM_Base_SetConfig+0xbe>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a12      	ldr	r2, [pc, #72]	@ (80068f0 <TIM_Base_SetConfig+0xfc>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d003      	beq.n	80068b2 <TIM_Base_SetConfig+0xbe>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a11      	ldr	r2, [pc, #68]	@ (80068f4 <TIM_Base_SetConfig+0x100>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d103      	bne.n	80068ba <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	691a      	ldr	r2, [r3, #16]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	2201      	movs	r2, #1
 80068c6:	4013      	ands	r3, r2
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d106      	bne.n	80068da <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	2201      	movs	r2, #1
 80068d2:	4393      	bics	r3, r2
 80068d4:	001a      	movs	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	611a      	str	r2, [r3, #16]
  }
}
 80068da:	46c0      	nop			@ (mov r8, r8)
 80068dc:	46bd      	mov	sp, r7
 80068de:	b004      	add	sp, #16
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	46c0      	nop			@ (mov r8, r8)
 80068e4:	40012c00 	.word	0x40012c00
 80068e8:	40000400 	.word	0x40000400
 80068ec:	40002000 	.word	0x40002000
 80068f0:	40014400 	.word	0x40014400
 80068f4:	40014800 	.word	0x40014800
 80068f8:	fffffcff 	.word	0xfffffcff

080068fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	2201      	movs	r2, #1
 8006912:	4393      	bics	r3, r2
 8006914:	001a      	movs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4a2e      	ldr	r2, [pc, #184]	@ (80069e4 <TIM_OC1_SetConfig+0xe8>)
 800692a:	4013      	ands	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2203      	movs	r2, #3
 8006932:	4393      	bics	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2202      	movs	r2, #2
 8006944:	4393      	bics	r3, r2
 8006946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a24      	ldr	r2, [pc, #144]	@ (80069e8 <TIM_OC1_SetConfig+0xec>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d007      	beq.n	800696a <TIM_OC1_SetConfig+0x6e>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a23      	ldr	r2, [pc, #140]	@ (80069ec <TIM_OC1_SetConfig+0xf0>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d003      	beq.n	800696a <TIM_OC1_SetConfig+0x6e>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a22      	ldr	r2, [pc, #136]	@ (80069f0 <TIM_OC1_SetConfig+0xf4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d10c      	bne.n	8006984 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2208      	movs	r2, #8
 800696e:	4393      	bics	r3, r2
 8006970:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4313      	orrs	r3, r2
 800697a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2204      	movs	r2, #4
 8006980:	4393      	bics	r3, r2
 8006982:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a18      	ldr	r2, [pc, #96]	@ (80069e8 <TIM_OC1_SetConfig+0xec>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d007      	beq.n	800699c <TIM_OC1_SetConfig+0xa0>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a17      	ldr	r2, [pc, #92]	@ (80069ec <TIM_OC1_SetConfig+0xf0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d003      	beq.n	800699c <TIM_OC1_SetConfig+0xa0>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a16      	ldr	r2, [pc, #88]	@ (80069f0 <TIM_OC1_SetConfig+0xf4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d111      	bne.n	80069c0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	4a15      	ldr	r2, [pc, #84]	@ (80069f4 <TIM_OC1_SetConfig+0xf8>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	4a14      	ldr	r2, [pc, #80]	@ (80069f8 <TIM_OC1_SetConfig+0xfc>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	621a      	str	r2, [r3, #32]
}
 80069da:	46c0      	nop			@ (mov r8, r8)
 80069dc:	46bd      	mov	sp, r7
 80069de:	b006      	add	sp, #24
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	46c0      	nop			@ (mov r8, r8)
 80069e4:	fffeff8f 	.word	0xfffeff8f
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40014400 	.word	0x40014400
 80069f0:	40014800 	.word	0x40014800
 80069f4:	fffffeff 	.word	0xfffffeff
 80069f8:	fffffdff 	.word	0xfffffdff

080069fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	2210      	movs	r2, #16
 8006a12:	4393      	bics	r3, r2
 8006a14:	001a      	movs	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4a2c      	ldr	r2, [pc, #176]	@ (8006adc <TIM_OC2_SetConfig+0xe0>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4a2b      	ldr	r2, [pc, #172]	@ (8006ae0 <TIM_OC2_SetConfig+0xe4>)
 8006a32:	4013      	ands	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	021b      	lsls	r3, r3, #8
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2220      	movs	r2, #32
 8006a46:	4393      	bics	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a22      	ldr	r2, [pc, #136]	@ (8006ae4 <TIM_OC2_SetConfig+0xe8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d10d      	bne.n	8006a7a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2280      	movs	r2, #128	@ 0x80
 8006a62:	4393      	bics	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2240      	movs	r2, #64	@ 0x40
 8006a76:	4393      	bics	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a19      	ldr	r2, [pc, #100]	@ (8006ae4 <TIM_OC2_SetConfig+0xe8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d007      	beq.n	8006a92 <TIM_OC2_SetConfig+0x96>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a18      	ldr	r2, [pc, #96]	@ (8006ae8 <TIM_OC2_SetConfig+0xec>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d003      	beq.n	8006a92 <TIM_OC2_SetConfig+0x96>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a17      	ldr	r2, [pc, #92]	@ (8006aec <TIM_OC2_SetConfig+0xf0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d113      	bne.n	8006aba <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	4a16      	ldr	r2, [pc, #88]	@ (8006af0 <TIM_OC2_SetConfig+0xf4>)
 8006a96:	4013      	ands	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	4a15      	ldr	r2, [pc, #84]	@ (8006af4 <TIM_OC2_SetConfig+0xf8>)
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	621a      	str	r2, [r3, #32]
}
 8006ad4:	46c0      	nop			@ (mov r8, r8)
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	b006      	add	sp, #24
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	feff8fff 	.word	0xfeff8fff
 8006ae0:	fffffcff 	.word	0xfffffcff
 8006ae4:	40012c00 	.word	0x40012c00
 8006ae8:	40014400 	.word	0x40014400
 8006aec:	40014800 	.word	0x40014800
 8006af0:	fffffbff 	.word	0xfffffbff
 8006af4:	fffff7ff 	.word	0xfffff7ff

08006af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	4a31      	ldr	r2, [pc, #196]	@ (8006bd4 <TIM_OC3_SetConfig+0xdc>)
 8006b0e:	401a      	ands	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4a2d      	ldr	r2, [pc, #180]	@ (8006bd8 <TIM_OC3_SetConfig+0xe0>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2203      	movs	r2, #3
 8006b2c:	4393      	bics	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	4a27      	ldr	r2, [pc, #156]	@ (8006bdc <TIM_OC3_SetConfig+0xe4>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	021b      	lsls	r3, r3, #8
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a23      	ldr	r2, [pc, #140]	@ (8006be0 <TIM_OC3_SetConfig+0xe8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d10d      	bne.n	8006b72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	4a22      	ldr	r2, [pc, #136]	@ (8006be4 <TIM_OC3_SetConfig+0xec>)
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	4a1e      	ldr	r2, [pc, #120]	@ (8006be8 <TIM_OC3_SetConfig+0xf0>)
 8006b6e:	4013      	ands	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a1a      	ldr	r2, [pc, #104]	@ (8006be0 <TIM_OC3_SetConfig+0xe8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d007      	beq.n	8006b8a <TIM_OC3_SetConfig+0x92>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006bec <TIM_OC3_SetConfig+0xf4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d003      	beq.n	8006b8a <TIM_OC3_SetConfig+0x92>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a1a      	ldr	r2, [pc, #104]	@ (8006bf0 <TIM_OC3_SetConfig+0xf8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d113      	bne.n	8006bb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	4a19      	ldr	r2, [pc, #100]	@ (8006bf4 <TIM_OC3_SetConfig+0xfc>)
 8006b8e:	4013      	ands	r3, r2
 8006b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	4a18      	ldr	r2, [pc, #96]	@ (8006bf8 <TIM_OC3_SetConfig+0x100>)
 8006b96:	4013      	ands	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	621a      	str	r2, [r3, #32]
}
 8006bcc:	46c0      	nop			@ (mov r8, r8)
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	b006      	add	sp, #24
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	fffffeff 	.word	0xfffffeff
 8006bd8:	fffeff8f 	.word	0xfffeff8f
 8006bdc:	fffffdff 	.word	0xfffffdff
 8006be0:	40012c00 	.word	0x40012c00
 8006be4:	fffff7ff 	.word	0xfffff7ff
 8006be8:	fffffbff 	.word	0xfffffbff
 8006bec:	40014400 	.word	0x40014400
 8006bf0:	40014800 	.word	0x40014800
 8006bf4:	ffffefff 	.word	0xffffefff
 8006bf8:	ffffdfff 	.word	0xffffdfff

08006bfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	4a24      	ldr	r2, [pc, #144]	@ (8006ca4 <TIM_OC4_SetConfig+0xa8>)
 8006c12:	401a      	ands	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4a20      	ldr	r2, [pc, #128]	@ (8006ca8 <TIM_OC4_SetConfig+0xac>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8006cac <TIM_OC4_SetConfig+0xb0>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	021b      	lsls	r3, r3, #8
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	4a1b      	ldr	r2, [pc, #108]	@ (8006cb0 <TIM_OC4_SetConfig+0xb4>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	031b      	lsls	r3, r3, #12
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a17      	ldr	r2, [pc, #92]	@ (8006cb4 <TIM_OC4_SetConfig+0xb8>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d007      	beq.n	8006c6c <TIM_OC4_SetConfig+0x70>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a16      	ldr	r2, [pc, #88]	@ (8006cb8 <TIM_OC4_SetConfig+0xbc>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d003      	beq.n	8006c6c <TIM_OC4_SetConfig+0x70>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a15      	ldr	r2, [pc, #84]	@ (8006cbc <TIM_OC4_SetConfig+0xc0>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d109      	bne.n	8006c80 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	4a14      	ldr	r2, [pc, #80]	@ (8006cc0 <TIM_OC4_SetConfig+0xc4>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	019b      	lsls	r3, r3, #6
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	621a      	str	r2, [r3, #32]
}
 8006c9a:	46c0      	nop			@ (mov r8, r8)
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	b006      	add	sp, #24
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	46c0      	nop			@ (mov r8, r8)
 8006ca4:	ffffefff 	.word	0xffffefff
 8006ca8:	feff8fff 	.word	0xfeff8fff
 8006cac:	fffffcff 	.word	0xfffffcff
 8006cb0:	ffffdfff 	.word	0xffffdfff
 8006cb4:	40012c00 	.word	0x40012c00
 8006cb8:	40014400 	.word	0x40014400
 8006cbc:	40014800 	.word	0x40014800
 8006cc0:	ffffbfff 	.word	0xffffbfff

08006cc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	4a21      	ldr	r2, [pc, #132]	@ (8006d60 <TIM_OC5_SetConfig+0x9c>)
 8006cda:	401a      	ands	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4a1d      	ldr	r2, [pc, #116]	@ (8006d64 <TIM_OC5_SetConfig+0xa0>)
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	4a19      	ldr	r2, [pc, #100]	@ (8006d68 <TIM_OC5_SetConfig+0xa4>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	041b      	lsls	r3, r3, #16
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a15      	ldr	r2, [pc, #84]	@ (8006d6c <TIM_OC5_SetConfig+0xa8>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d007      	beq.n	8006d2a <TIM_OC5_SetConfig+0x66>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a14      	ldr	r2, [pc, #80]	@ (8006d70 <TIM_OC5_SetConfig+0xac>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d003      	beq.n	8006d2a <TIM_OC5_SetConfig+0x66>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a13      	ldr	r2, [pc, #76]	@ (8006d74 <TIM_OC5_SetConfig+0xb0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d109      	bne.n	8006d3e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8006d60 <TIM_OC5_SetConfig+0x9c>)
 8006d2e:	4013      	ands	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	021b      	lsls	r3, r3, #8
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	621a      	str	r2, [r3, #32]
}
 8006d58:	46c0      	nop			@ (mov r8, r8)
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	b006      	add	sp, #24
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	fffeffff 	.word	0xfffeffff
 8006d64:	fffeff8f 	.word	0xfffeff8f
 8006d68:	fffdffff 	.word	0xfffdffff
 8006d6c:	40012c00 	.word	0x40012c00
 8006d70:	40014400 	.word	0x40014400
 8006d74:	40014800 	.word	0x40014800

08006d78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	4a22      	ldr	r2, [pc, #136]	@ (8006e18 <TIM_OC6_SetConfig+0xa0>)
 8006d8e:	401a      	ands	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4a1e      	ldr	r2, [pc, #120]	@ (8006e1c <TIM_OC6_SetConfig+0xa4>)
 8006da4:	4013      	ands	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	021b      	lsls	r3, r3, #8
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	4a1a      	ldr	r2, [pc, #104]	@ (8006e20 <TIM_OC6_SetConfig+0xa8>)
 8006db8:	4013      	ands	r3, r2
 8006dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	051b      	lsls	r3, r3, #20
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a16      	ldr	r2, [pc, #88]	@ (8006e24 <TIM_OC6_SetConfig+0xac>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d007      	beq.n	8006de0 <TIM_OC6_SetConfig+0x68>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a15      	ldr	r2, [pc, #84]	@ (8006e28 <TIM_OC6_SetConfig+0xb0>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d003      	beq.n	8006de0 <TIM_OC6_SetConfig+0x68>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a14      	ldr	r2, [pc, #80]	@ (8006e2c <TIM_OC6_SetConfig+0xb4>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d109      	bne.n	8006df4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	4a13      	ldr	r2, [pc, #76]	@ (8006e30 <TIM_OC6_SetConfig+0xb8>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	029b      	lsls	r3, r3, #10
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	621a      	str	r2, [r3, #32]
}
 8006e0e:	46c0      	nop			@ (mov r8, r8)
 8006e10:	46bd      	mov	sp, r7
 8006e12:	b006      	add	sp, #24
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	46c0      	nop			@ (mov r8, r8)
 8006e18:	ffefffff 	.word	0xffefffff
 8006e1c:	feff8fff 	.word	0xfeff8fff
 8006e20:	ffdfffff 	.word	0xffdfffff
 8006e24:	40012c00 	.word	0x40012c00
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800
 8006e30:	fffbffff 	.word	0xfffbffff

08006e34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	221f      	movs	r2, #31
 8006e44:	4013      	ands	r3, r2
 8006e46:	2201      	movs	r2, #1
 8006e48:	409a      	lsls	r2, r3
 8006e4a:	0013      	movs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	43d2      	mvns	r2, r2
 8006e56:	401a      	ands	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a1a      	ldr	r2, [r3, #32]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	211f      	movs	r1, #31
 8006e64:	400b      	ands	r3, r1
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	4099      	lsls	r1, r3
 8006e6a:	000b      	movs	r3, r1
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	621a      	str	r2, [r3, #32]
}
 8006e72:	46c0      	nop			@ (mov r8, r8)
 8006e74:	46bd      	mov	sp, r7
 8006e76:	b006      	add	sp, #24
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	223c      	movs	r2, #60	@ 0x3c
 8006e8a:	5c9b      	ldrb	r3, [r3, r2]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d101      	bne.n	8006e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e90:	2302      	movs	r3, #2
 8006e92:	e050      	b.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	223c      	movs	r2, #60	@ 0x3c
 8006e98:	2101      	movs	r1, #1
 8006e9a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	223d      	movs	r2, #61	@ 0x3d
 8006ea0:	2102      	movs	r1, #2
 8006ea2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a21      	ldr	r2, [pc, #132]	@ (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d108      	bne.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4a20      	ldr	r2, [pc, #128]	@ (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2270      	movs	r2, #112	@ 0x70
 8006ed4:	4393      	bics	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a14      	ldr	r2, [pc, #80]	@ (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d00a      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	2380      	movs	r3, #128	@ 0x80
 8006efa:	05db      	lsls	r3, r3, #23
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d004      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a10      	ldr	r2, [pc, #64]	@ (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d10c      	bne.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2280      	movs	r2, #128	@ 0x80
 8006f0e:	4393      	bics	r3, r2
 8006f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	223d      	movs	r2, #61	@ 0x3d
 8006f28:	2101      	movs	r1, #1
 8006f2a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	223c      	movs	r2, #60	@ 0x3c
 8006f30:	2100      	movs	r1, #0
 8006f32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	0018      	movs	r0, r3
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	b004      	add	sp, #16
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	46c0      	nop			@ (mov r8, r8)
 8006f40:	40012c00 	.word	0x40012c00
 8006f44:	ff0fffff 	.word	0xff0fffff
 8006f48:	40000400 	.word	0x40000400

08006f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f54:	46c0      	nop			@ (mov r8, r8)
 8006f56:	46bd      	mov	sp, r7
 8006f58:	b002      	add	sp, #8
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f64:	46c0      	nop			@ (mov r8, r8)
 8006f66:	46bd      	mov	sp, r7
 8006f68:	b002      	add	sp, #8
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f74:	46c0      	nop			@ (mov r8, r8)
 8006f76:	46bd      	mov	sp, r7
 8006f78:	b002      	add	sp, #8
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <memset>:
 8006f7c:	0003      	movs	r3, r0
 8006f7e:	1882      	adds	r2, r0, r2
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d100      	bne.n	8006f86 <memset+0xa>
 8006f84:	4770      	bx	lr
 8006f86:	7019      	strb	r1, [r3, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	e7f9      	b.n	8006f80 <memset+0x4>

08006f8c <__libc_init_array>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	2600      	movs	r6, #0
 8006f90:	4c0c      	ldr	r4, [pc, #48]	@ (8006fc4 <__libc_init_array+0x38>)
 8006f92:	4d0d      	ldr	r5, [pc, #52]	@ (8006fc8 <__libc_init_array+0x3c>)
 8006f94:	1b64      	subs	r4, r4, r5
 8006f96:	10a4      	asrs	r4, r4, #2
 8006f98:	42a6      	cmp	r6, r4
 8006f9a:	d109      	bne.n	8006fb0 <__libc_init_array+0x24>
 8006f9c:	2600      	movs	r6, #0
 8006f9e:	f000 f823 	bl	8006fe8 <_init>
 8006fa2:	4c0a      	ldr	r4, [pc, #40]	@ (8006fcc <__libc_init_array+0x40>)
 8006fa4:	4d0a      	ldr	r5, [pc, #40]	@ (8006fd0 <__libc_init_array+0x44>)
 8006fa6:	1b64      	subs	r4, r4, r5
 8006fa8:	10a4      	asrs	r4, r4, #2
 8006faa:	42a6      	cmp	r6, r4
 8006fac:	d105      	bne.n	8006fba <__libc_init_array+0x2e>
 8006fae:	bd70      	pop	{r4, r5, r6, pc}
 8006fb0:	00b3      	lsls	r3, r6, #2
 8006fb2:	58eb      	ldr	r3, [r5, r3]
 8006fb4:	4798      	blx	r3
 8006fb6:	3601      	adds	r6, #1
 8006fb8:	e7ee      	b.n	8006f98 <__libc_init_array+0xc>
 8006fba:	00b3      	lsls	r3, r6, #2
 8006fbc:	58eb      	ldr	r3, [r5, r3]
 8006fbe:	4798      	blx	r3
 8006fc0:	3601      	adds	r6, #1
 8006fc2:	e7f2      	b.n	8006faa <__libc_init_array+0x1e>
 8006fc4:	080070e8 	.word	0x080070e8
 8006fc8:	080070e8 	.word	0x080070e8
 8006fcc:	080070ec 	.word	0x080070ec
 8006fd0:	080070e8 	.word	0x080070e8

08006fd4 <memcpy>:
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	b510      	push	{r4, lr}
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d100      	bne.n	8006fde <memcpy+0xa>
 8006fdc:	bd10      	pop	{r4, pc}
 8006fde:	5ccc      	ldrb	r4, [r1, r3]
 8006fe0:	54c4      	strb	r4, [r0, r3]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	e7f8      	b.n	8006fd8 <memcpy+0x4>
	...

08006fe8 <_init>:
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	46c0      	nop			@ (mov r8, r8)
 8006fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fee:	bc08      	pop	{r3}
 8006ff0:	469e      	mov	lr, r3
 8006ff2:	4770      	bx	lr

08006ff4 <_fini>:
 8006ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff6:	46c0      	nop			@ (mov r8, r8)
 8006ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffa:	bc08      	pop	{r3}
 8006ffc:	469e      	mov	lr, r3
 8006ffe:	4770      	bx	lr
