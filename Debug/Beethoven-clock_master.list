
Beethoven-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000543c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080054f8  080054f8  000064f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055b8  080055b8  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080055b8  080055b8  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055b8  080055b8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055b8  080055b8  000065b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055bc  080055bc  000065bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080055c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  080055cc  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080055cc  000071c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013346  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c01  00000000  00000000  0001a37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0001cf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd1  00000000  00000000  0001e3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ea5  00000000  00000000  0001f389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182ec  00000000  00000000  0002222e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097406  00000000  00000000  0003a51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1920  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a04  00000000  00000000  000d1964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d6368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080054e0 	.word	0x080054e0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080054e0 	.word	0x080054e0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <W25Q_Init>:
#endif


uint8_t W25Q_Init(W25Q *wq, GPIO_TypeDef *nCSPort, GPIO_TypeDef *nWPPort, GPIO_TypeDef *nHOLDPort,
					uint32_t nCSPin, uint32_t nWPPin, uint32_t nHOLDPin, SPI_HandleTypeDef *hspi,
					uint8_t devID, uint8_t isQuadChip, uint8_t driveStrength) {
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b087      	sub	sp, #28
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	// Map struct GPIO Ports & Pins to passed parameters
	wq->nCSPort = nCSPort;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	68ba      	ldr	r2, [r7, #8]
 800022e:	601a      	str	r2, [r3, #0]
	wq->nWPPort = nWPPort;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	605a      	str	r2, [r3, #4]
	wq->nHOLDPort = nHOLDPort;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	683a      	ldr	r2, [r7, #0]
 800023a:	609a      	str	r2, [r3, #8]

	wq->nCSPin = nCSPin;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000240:	60da      	str	r2, [r3, #12]
	wq->nWPPin = nWPPin;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000246:	611a      	str	r2, [r3, #16]
	wq->nHOLDPin = nHOLDPin;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800024c:	615a      	str	r2, [r3, #20]

	wq->hspi = hspi;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000252:	619a      	str	r2, [r3, #24]

	wq->quadEnable = isQuadChip;		// Default state depends on PN of chip.
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	223c      	movs	r2, #60	@ 0x3c
 8000258:	2108      	movs	r1, #8
 800025a:	1852      	adds	r2, r2, r1
 800025c:	19d2      	adds	r2, r2, r7
 800025e:	2125      	movs	r1, #37	@ 0x25
 8000260:	7812      	ldrb	r2, [r2, #0]
 8000262:	545a      	strb	r2, [r3, r1]
	wq->writeEnable = 0;
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	2223      	movs	r2, #35	@ 0x23
 8000268:	2100      	movs	r1, #0
 800026a:	5499      	strb	r1, [r3, r2]

	// Set CS pin high
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	6818      	ldr	r0, [r3, #0]
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	b29b      	uxth	r3, r3
 8000276:	2201      	movs	r2, #1
 8000278:	0019      	movs	r1, r3
 800027a:	f001 fd67 	bl	8001d4c <HAL_GPIO_WritePin>

	// Set hold pin high (Disable)
	HAL_GPIO_WritePin(wq->nHOLDPort, wq->nHOLDPin, GPIO_PIN_SET);
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	6898      	ldr	r0, [r3, #8]
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	b29b      	uxth	r3, r3
 8000288:	2201      	movs	r2, #1
 800028a:	0019      	movs	r1, r3
 800028c:	f001 fd5e 	bl	8001d4c <HAL_GPIO_WritePin>

	// Set WP pin high (disable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_SET);
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	6858      	ldr	r0, [r3, #4]
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	691b      	ldr	r3, [r3, #16]
 8000298:	b29b      	uxth	r3, r3
 800029a:	2201      	movs	r2, #1
 800029c:	0019      	movs	r1, r3
 800029e:	f001 fd55 	bl	8001d4c <HAL_GPIO_WritePin>

	// HAL status handle used to indicate error messages
	HAL_StatusTypeDef halRet = HAL_OK;
 80002a2:	2116      	movs	r1, #22
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2200      	movs	r2, #0
 80002a8:	701a      	strb	r2, [r3, #0]

	uint8_t returnInc = 1;			// Integer error code return, incremented after successful things.
 80002aa:	2617      	movs	r6, #23
 80002ac:	19bb      	adds	r3, r7, r6
 80002ae:	2201      	movs	r2, #1
 80002b0:	701a      	strb	r2, [r3, #0]

	uint8_t errorsEnabled = 1;		// Use for debugging
 80002b2:	2315      	movs	r3, #21
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	2201      	movs	r2, #1
 80002b8:	701a      	strb	r2, [r3, #0]

	// Release from power down mode
	halRet = W25Q_ReleasePowerDown(wq);
 80002ba:	000d      	movs	r5, r1
 80002bc:	187c      	adds	r4, r7, r1
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 f8ea 	bl	800049a <W25Q_ReleasePowerDown>
 80002c6:	0003      	movs	r3, r0
 80002c8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 80002ca:	197b      	adds	r3, r7, r5
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d007      	beq.n	80002e2 <W25Q_Init+0xc6>
 80002d2:	2315      	movs	r3, #21
 80002d4:	18fb      	adds	r3, r7, r3
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d002      	beq.n	80002e2 <W25Q_Init+0xc6>
		return returnInc;
 80002dc:	19bb      	adds	r3, r7, r6
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	e0d7      	b.n	8000492 <W25Q_Init+0x276>
	else
		returnInc++;
 80002e2:	2517      	movs	r5, #23
 80002e4:	197b      	adds	r3, r7, r5
 80002e6:	781a      	ldrb	r2, [r3, #0]
 80002e8:	197b      	adds	r3, r7, r5
 80002ea:	3201      	adds	r2, #1
 80002ec:	701a      	strb	r2, [r3, #0]

	// Reset Device
	halRet = W25Q_ChipReset(wq);
 80002ee:	2616      	movs	r6, #22
 80002f0:	19bc      	adds	r4, r7, r6
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 fbe7 	bl	8000ac8 <W25Q_ChipReset>
 80002fa:	0003      	movs	r3, r0
 80002fc:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 80002fe:	19bb      	adds	r3, r7, r6
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d007      	beq.n	8000316 <W25Q_Init+0xfa>
 8000306:	2315      	movs	r3, #21
 8000308:	18fb      	adds	r3, r7, r3
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d002      	beq.n	8000316 <W25Q_Init+0xfa>
		return returnInc;
 8000310:	197b      	adds	r3, r7, r5
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	e0bd      	b.n	8000492 <W25Q_Init+0x276>
	else
		returnInc++;
 8000316:	2517      	movs	r5, #23
 8000318:	197b      	adds	r3, r7, r5
 800031a:	781a      	ldrb	r2, [r3, #0]
 800031c:	197b      	adds	r3, r7, r5
 800031e:	3201      	adds	r2, #1
 8000320:	701a      	strb	r2, [r3, #0]

	// Read initial Status Registers
	halRet = W25Q_ReadStatusRegs(wq);
 8000322:	2616      	movs	r6, #22
 8000324:	19bc      	adds	r4, r7, r6
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	0018      	movs	r0, r3
 800032a:	f000 faef 	bl	800090c <W25Q_ReadStatusRegs>
 800032e:	0003      	movs	r3, r0
 8000330:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000332:	19bb      	adds	r3, r7, r6
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d007      	beq.n	800034a <W25Q_Init+0x12e>
 800033a:	2315      	movs	r3, #21
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d002      	beq.n	800034a <W25Q_Init+0x12e>
		return returnInc;
 8000344:	197b      	adds	r3, r7, r5
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	e0a3      	b.n	8000492 <W25Q_Init+0x276>
	else
		returnInc++;
 800034a:	2517      	movs	r5, #23
 800034c:	197b      	adds	r3, r7, r5
 800034e:	781a      	ldrb	r2, [r3, #0]
 8000350:	197b      	adds	r3, r7, r5
 8000352:	3201      	adds	r2, #1
 8000354:	701a      	strb	r2, [r3, #0]

	// Increase driver strength?
	halRet = W25Q_SetDriverStrength(wq, driveStrength);
 8000356:	2616      	movs	r6, #22
 8000358:	19bc      	adds	r4, r7, r6
 800035a:	2340      	movs	r3, #64	@ 0x40
 800035c:	2208      	movs	r2, #8
 800035e:	189b      	adds	r3, r3, r2
 8000360:	19db      	adds	r3, r3, r7
 8000362:	781a      	ldrb	r2, [r3, #0]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	0011      	movs	r1, r2
 8000368:	0018      	movs	r0, r3
 800036a:	f000 fc17 	bl	8000b9c <W25Q_SetDriverStrength>
 800036e:	0003      	movs	r3, r0
 8000370:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000372:	19bb      	adds	r3, r7, r6
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d007      	beq.n	800038a <W25Q_Init+0x16e>
 800037a:	2315      	movs	r3, #21
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d002      	beq.n	800038a <W25Q_Init+0x16e>
		return returnInc;
 8000384:	197b      	adds	r3, r7, r5
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	e083      	b.n	8000492 <W25Q_Init+0x276>
	else
		returnInc++;
 800038a:	2517      	movs	r5, #23
 800038c:	197b      	adds	r3, r7, r5
 800038e:	781a      	ldrb	r2, [r3, #0]
 8000390:	197b      	adds	r3, r7, r5
 8000392:	3201      	adds	r2, #1
 8000394:	701a      	strb	r2, [r3, #0]
//			returnInc++;
//	}


	// Get + Store IDs
	halRet = W25Q_GetIDs(wq, devID);
 8000396:	2616      	movs	r6, #22
 8000398:	19bc      	adds	r4, r7, r6
 800039a:	2338      	movs	r3, #56	@ 0x38
 800039c:	2208      	movs	r2, #8
 800039e:	189b      	adds	r3, r3, r2
 80003a0:	19db      	adds	r3, r3, r7
 80003a2:	781a      	ldrb	r2, [r3, #0]
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	0011      	movs	r1, r2
 80003a8:	0018      	movs	r0, r3
 80003aa:	f000 f8bb 	bl	8000524 <W25Q_GetIDs>
 80003ae:	0003      	movs	r3, r0
 80003b0:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 80003b2:	19bb      	adds	r3, r7, r6
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d007      	beq.n	80003ca <W25Q_Init+0x1ae>
 80003ba:	2315      	movs	r3, #21
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d002      	beq.n	80003ca <W25Q_Init+0x1ae>
		return returnInc;
 80003c4:	197b      	adds	r3, r7, r5
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	e063      	b.n	8000492 <W25Q_Init+0x276>
	else
		returnInc++;
 80003ca:	2517      	movs	r5, #23
 80003cc:	197b      	adds	r3, r7, r5
 80003ce:	781a      	ldrb	r2, [r3, #0]
 80003d0:	197b      	adds	r3, r7, r5
 80003d2:	3201      	adds	r2, #1
 80003d4:	701a      	strb	r2, [r3, #0]

	// Get + Store Status Register Contents
	halRet = W25Q_ReadStatusRegs(wq);
 80003d6:	2616      	movs	r6, #22
 80003d8:	19bc      	adds	r4, r7, r6
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	0018      	movs	r0, r3
 80003de:	f000 fa95 	bl	800090c <W25Q_ReadStatusRegs>
 80003e2:	0003      	movs	r3, r0
 80003e4:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 80003e6:	19bb      	adds	r3, r7, r6
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d007      	beq.n	80003fe <W25Q_Init+0x1e2>
 80003ee:	2315      	movs	r3, #21
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <W25Q_Init+0x1e2>
		return returnInc;
 80003f8:	197b      	adds	r3, r7, r5
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	e049      	b.n	8000492 <W25Q_Init+0x276>
	else
		returnInc++;
 80003fe:	2517      	movs	r5, #23
 8000400:	197b      	adds	r3, r7, r5
 8000402:	781a      	ldrb	r2, [r3, #0]
 8000404:	197b      	adds	r3, r7, r5
 8000406:	3201      	adds	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]

	// Disable Write Access to Memory
	if(wq->writeEnable != 0) {
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	2223      	movs	r2, #35	@ 0x23
 800040e:	5c9b      	ldrb	r3, [r3, r2]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d019      	beq.n	8000448 <W25Q_Init+0x22c>
		halRet = W25Q_DisableWrite(wq);
 8000414:	2616      	movs	r6, #22
 8000416:	19bc      	adds	r4, r7, r6
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	0018      	movs	r0, r3
 800041c:	f000 f985 	bl	800072a <W25Q_DisableWrite>
 8000420:	0003      	movs	r3, r0
 8000422:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK && errorsEnabled)
 8000424:	19bb      	adds	r3, r7, r6
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d007      	beq.n	800043c <W25Q_Init+0x220>
 800042c:	2315      	movs	r3, #21
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d002      	beq.n	800043c <W25Q_Init+0x220>
			return returnInc;
 8000436:	197b      	adds	r3, r7, r5
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	e02a      	b.n	8000492 <W25Q_Init+0x276>
		else
			returnInc++;
 800043c:	2117      	movs	r1, #23
 800043e:	187b      	adds	r3, r7, r1
 8000440:	781a      	ldrb	r2, [r3, #0]
 8000442:	187b      	adds	r3, r7, r1
 8000444:	3201      	adds	r2, #1
 8000446:	701a      	strb	r2, [r3, #0]
	}

	// Get + Store Status Register Contents
	halRet = W25Q_ReadStatusRegs(wq);
 8000448:	2516      	movs	r5, #22
 800044a:	197c      	adds	r4, r7, r5
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fa5c 	bl	800090c <W25Q_ReadStatusRegs>
 8000454:	0003      	movs	r3, r0
 8000456:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000458:	197b      	adds	r3, r7, r5
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d008      	beq.n	8000472 <W25Q_Init+0x256>
 8000460:	2315      	movs	r3, #21
 8000462:	18fb      	adds	r3, r7, r3
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d003      	beq.n	8000472 <W25Q_Init+0x256>
		return returnInc;
 800046a:	2317      	movs	r3, #23
 800046c:	18fb      	adds	r3, r7, r3
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	e00f      	b.n	8000492 <W25Q_Init+0x276>
	else
		returnInc++;
 8000472:	2117      	movs	r1, #23
 8000474:	187b      	adds	r3, r7, r1
 8000476:	781a      	ldrb	r2, [r3, #0]
 8000478:	187b      	adds	r3, r7, r1
 800047a:	3201      	adds	r2, #1
 800047c:	701a      	strb	r2, [r3, #0]

	// Set WP pin low (Enable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_RESET);
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	6858      	ldr	r0, [r3, #4]
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	691b      	ldr	r3, [r3, #16]
 8000486:	b29b      	uxth	r3, r3
 8000488:	2200      	movs	r2, #0
 800048a:	0019      	movs	r1, r3
 800048c:	f001 fc5e 	bl	8001d4c <HAL_GPIO_WritePin>

	return 0;
 8000490:	2300      	movs	r3, #0

}
 8000492:	0018      	movs	r0, r3
 8000494:	46bd      	mov	sp, r7
 8000496:	b007      	add	sp, #28
 8000498:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800049a <W25Q_ReleasePowerDown>:

HAL_StatusTypeDef W25Q_ReleasePowerDown(W25Q *wq) {
 800049a:	b590      	push	{r4, r7, lr}
 800049c:	b085      	sub	sp, #20
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004a2:	240e      	movs	r4, #14
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]

	// TX release power-down instruction
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	6818      	ldr	r0, [r3, #0]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	2200      	movs	r2, #0
 80004b6:	0019      	movs	r1, r3
 80004b8:	f001 fc48 	bl	8001d4c <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_READ_RELEASE_ID}, 1, HAL_MAX_DELAY);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6998      	ldr	r0, [r3, #24]
 80004c0:	210c      	movs	r1, #12
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	22ab      	movs	r2, #171	@ 0xab
 80004c6:	701a      	strb	r2, [r3, #0]
 80004c8:	193c      	adds	r4, r7, r4
 80004ca:	2301      	movs	r3, #1
 80004cc:	425b      	negs	r3, r3
 80004ce:	1879      	adds	r1, r7, r1
 80004d0:	2201      	movs	r2, #1
 80004d2:	f003 fc91 	bl	8003df8 <HAL_SPI_Transmit>
 80004d6:	0003      	movs	r3, r0
 80004d8:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6818      	ldr	r0, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	68db      	ldr	r3, [r3, #12]
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	2201      	movs	r2, #1
 80004e6:	0019      	movs	r1, r3
 80004e8:	f001 fc30 	bl	8001d4c <HAL_GPIO_WritePin>

	// Delay for at least 3 us
	for(uint8_t i = 0; i < 15; i++) {
 80004ec:	230f      	movs	r3, #15
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]
 80004f4:	e006      	b.n	8000504 <W25Q_ReleasePowerDown+0x6a>
		__NOP();
 80004f6:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 15; i++) {
 80004f8:	210f      	movs	r1, #15
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	781a      	ldrb	r2, [r3, #0]
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	3201      	adds	r2, #1
 8000502:	701a      	strb	r2, [r3, #0]
 8000504:	230f      	movs	r3, #15
 8000506:	18fb      	adds	r3, r7, r3
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b0e      	cmp	r3, #14
 800050c:	d9f3      	bls.n	80004f6 <W25Q_ReleasePowerDown+0x5c>
	}

	wq->powerUp = 1; 		// We have now successfully exited power-down state
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2224      	movs	r2, #36	@ 0x24
 8000512:	2101      	movs	r1, #1
 8000514:	5499      	strb	r1, [r3, r2]

	return halRet;
 8000516:	230e      	movs	r3, #14
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	781b      	ldrb	r3, [r3, #0]

}
 800051c:	0018      	movs	r0, r3
 800051e:	46bd      	mov	sp, r7
 8000520:	b005      	add	sp, #20
 8000522:	bd90      	pop	{r4, r7, pc}

08000524 <W25Q_GetIDs>:

HAL_StatusTypeDef W25Q_GetIDs(W25Q *wq, uint8_t devID_passed) {
 8000524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000526:	b089      	sub	sp, #36	@ 0x24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	000a      	movs	r2, r1
 800052e:	1cfb      	adds	r3, r7, #3
 8000530:	701a      	strb	r2, [r3, #0]


	HAL_StatusTypeDef halRet = HAL_OK;
 8000532:	241f      	movs	r4, #31
 8000534:	193b      	adds	r3, r7, r4
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]

	/*
	 * Release power down + read device ID
	 */
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	b29b      	uxth	r3, r3
 8000544:	2200      	movs	r2, #0
 8000546:	0019      	movs	r1, r3
 8000548:	f001 fc00 	bl	8001d4c <HAL_GPIO_WritePin>
		// TX return device ID instruction
		halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[4]){CMD_READ_RELEASE_ID, 0x00, 0x00, 0x00}, 4, HAL_MAX_DELAY);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6998      	ldr	r0, [r3, #24]
 8000550:	2118      	movs	r1, #24
 8000552:	187b      	adds	r3, r7, r1
 8000554:	22ab      	movs	r2, #171	@ 0xab
 8000556:	701a      	strb	r2, [r3, #0]
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	705a      	strb	r2, [r3, #1]
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	709a      	strb	r2, [r3, #2]
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	70da      	strb	r2, [r3, #3]
 800056a:	0025      	movs	r5, r4
 800056c:	193c      	adds	r4, r7, r4
 800056e:	2301      	movs	r3, #1
 8000570:	425b      	negs	r3, r3
 8000572:	1879      	adds	r1, r7, r1
 8000574:	2204      	movs	r2, #4
 8000576:	f003 fc3f 	bl	8003df8 <HAL_SPI_Transmit>
 800057a:	0003      	movs	r3, r0
 800057c:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 800057e:	197b      	adds	r3, r7, r5
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d00b      	beq.n	800059e <W25Q_GetIDs+0x7a>
			HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6818      	ldr	r0, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	b29b      	uxth	r3, r3
 8000590:	2201      	movs	r2, #1
 8000592:	0019      	movs	r1, r3
 8000594:	f001 fbda 	bl	8001d4c <HAL_GPIO_WritePin>
			return halRet;
 8000598:	197b      	adds	r3, r7, r5
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	e07c      	b.n	8000698 <W25Q_GetIDs+0x174>
		}

		// RX device ID into struct variable
		uint8_t devIDRet[1] = {0x00};
 800059e:	2514      	movs	r5, #20
 80005a0:	197b      	adds	r3, r7, r5
 80005a2:	4a3f      	ldr	r2, [pc, #252]	@ (80006a0 <W25Q_GetIDs+0x17c>)
 80005a4:	7812      	ldrb	r2, [r2, #0]
 80005a6:	701a      	strb	r2, [r3, #0]
		halRet = HAL_SPI_Receive(wq->hspi, devIDRet, 1, HAL_MAX_DELAY);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6998      	ldr	r0, [r3, #24]
 80005ac:	261f      	movs	r6, #31
 80005ae:	19bc      	adds	r4, r7, r6
 80005b0:	2301      	movs	r3, #1
 80005b2:	425b      	negs	r3, r3
 80005b4:	1979      	adds	r1, r7, r5
 80005b6:	2201      	movs	r2, #1
 80005b8:	f003 fd7e 	bl	80040b8 <HAL_SPI_Receive>
 80005bc:	0003      	movs	r3, r0
 80005be:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	2201      	movs	r2, #1
 80005cc:	0019      	movs	r1, r3
 80005ce:	f001 fbbd 	bl	8001d4c <HAL_GPIO_WritePin>
		wq->devID = devIDRet[0];
 80005d2:	197b      	adds	r3, r7, r5
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	775a      	strb	r2, [r3, #29]


		 // Check to ensure that received device ID is equal to that passed by the user in the init function
		if((halRet != HAL_OK) || (wq->devID != devID_passed))
 80005da:	19bb      	adds	r3, r7, r6
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d105      	bne.n	80005ee <W25Q_GetIDs+0xca>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	7f5b      	ldrb	r3, [r3, #29]
 80005e6:	1cfa      	adds	r2, r7, #3
 80005e8:	7812      	ldrb	r2, [r2, #0]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d001      	beq.n	80005f2 <W25Q_GetIDs+0xce>
			return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e052      	b.n	8000698 <W25Q_GetIDs+0x174>

	/*
	 * Read and check MFR ID
	 */
		// TX read mfr + device ID command
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6818      	ldr	r0, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	2200      	movs	r2, #0
 80005fe:	0019      	movs	r1, r3
 8000600:	f001 fba4 	bl	8001d4c <HAL_GPIO_WritePin>
		halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[4]){CMD_READ_MFR_ID, 0x00, 0x00, 0x00}, 4, HAL_MAX_DELAY);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6998      	ldr	r0, [r3, #24]
 8000608:	2110      	movs	r1, #16
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2290      	movs	r2, #144	@ 0x90
 800060e:	701a      	strb	r2, [r3, #0]
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	705a      	strb	r2, [r3, #1]
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	709a      	strb	r2, [r3, #2]
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	70da      	strb	r2, [r3, #3]
 8000622:	251f      	movs	r5, #31
 8000624:	197c      	adds	r4, r7, r5
 8000626:	2301      	movs	r3, #1
 8000628:	425b      	negs	r3, r3
 800062a:	1879      	adds	r1, r7, r1
 800062c:	2204      	movs	r2, #4
 800062e:	f003 fbe3 	bl	8003df8 <HAL_SPI_Transmit>
 8000632:	0003      	movs	r3, r0
 8000634:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000636:	197b      	adds	r3, r7, r5
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d002      	beq.n	8000644 <W25Q_GetIDs+0x120>
			return halRet;
 800063e:	197b      	adds	r3, r7, r5
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	e029      	b.n	8000698 <W25Q_GetIDs+0x174>
		}



		// RX device and mfr ID, store in struct variable
		uint8_t retIDs[2] = {0x00, 0x00};
 8000644:	250c      	movs	r5, #12
 8000646:	197b      	adds	r3, r7, r5
 8000648:	2200      	movs	r2, #0
 800064a:	801a      	strh	r2, [r3, #0]
		halRet = HAL_SPI_Receive(wq->hspi, retIDs, 2, HAL_MAX_DELAY);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6998      	ldr	r0, [r3, #24]
 8000650:	261f      	movs	r6, #31
 8000652:	19bc      	adds	r4, r7, r6
 8000654:	2301      	movs	r3, #1
 8000656:	425b      	negs	r3, r3
 8000658:	1979      	adds	r1, r7, r5
 800065a:	2202      	movs	r2, #2
 800065c:	f003 fd2c 	bl	80040b8 <HAL_SPI_Receive>
 8000660:	0003      	movs	r3, r0
 8000662:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	b29b      	uxth	r3, r3
 800066e:	2201      	movs	r2, #1
 8000670:	0019      	movs	r1, r3
 8000672:	f001 fb6b 	bl	8001d4c <HAL_GPIO_WritePin>
		wq->mfrID = retIDs[0];
 8000676:	197b      	adds	r3, r7, r5
 8000678:	781a      	ldrb	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	771a      	strb	r2, [r3, #28]


		// Check to ensure that received mfr ID is correct.
		if((halRet != HAL_OK) || (wq->mfrID != 0xEF))
 800067e:	19bb      	adds	r3, r7, r6
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d103      	bne.n	800068e <W25Q_GetIDs+0x16a>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7f1b      	ldrb	r3, [r3, #28]
 800068a:	2bef      	cmp	r3, #239	@ 0xef
 800068c:	d001      	beq.n	8000692 <W25Q_GetIDs+0x16e>
			return HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	e002      	b.n	8000698 <W25Q_GetIDs+0x174>

	/*
	 * Leaving out for now: Read JEDEC ID
	 */

		return halRet;
 8000692:	231f      	movs	r3, #31
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	781b      	ldrb	r3, [r3, #0]
}
 8000698:	0018      	movs	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	b009      	add	sp, #36	@ 0x24
 800069e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a0:	080054f8 	.word	0x080054f8

080006a4 <W25Q_EnableWrite>:

HAL_StatusTypeDef W25Q_EnableWrite(W25Q *wq) {
 80006a4:	b5b0      	push	{r4, r5, r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80006ac:	250f      	movs	r5, #15
 80006ae:	197b      	adds	r3, r7, r5
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]

	// TX write enable command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	2200      	movs	r2, #0
 80006c0:	0019      	movs	r1, r3
 80006c2:	f001 fb43 	bl	8001d4c <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_WRITE_ENABLE}, 1, HAL_MAX_DELAY);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6998      	ldr	r0, [r3, #24]
 80006ca:	210c      	movs	r1, #12
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2206      	movs	r2, #6
 80006d0:	701a      	strb	r2, [r3, #0]
 80006d2:	197c      	adds	r4, r7, r5
 80006d4:	2301      	movs	r3, #1
 80006d6:	425b      	negs	r3, r3
 80006d8:	1879      	adds	r1, r7, r1
 80006da:	2201      	movs	r2, #1
 80006dc:	f003 fb8c 	bl	8003df8 <HAL_SPI_Transmit>
 80006e0:	0003      	movs	r3, r0
 80006e2:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	2201      	movs	r2, #1
 80006f0:	0019      	movs	r1, r3
 80006f2:	f001 fb2b 	bl	8001d4c <HAL_GPIO_WritePin>

	if(halRet != HAL_OK)
 80006f6:	197b      	adds	r3, r7, r5
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d002      	beq.n	8000704 <W25Q_EnableWrite+0x60>
		return halRet;
 80006fe:	197b      	adds	r3, r7, r5
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	e00e      	b.n	8000722 <W25Q_EnableWrite+0x7e>

	// Read back written value and confirm
	W25Q_ReadStatusReg(wq, 1);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2101      	movs	r1, #1
 8000708:	0018      	movs	r0, r3
 800070a:	f000 f851 	bl	80007b0 <W25Q_ReadStatusReg>

	// Bit 1 of status register 1 should now be 1
	if(wq->writeEnable != 1)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2223      	movs	r2, #35	@ 0x23
 8000712:	5c9b      	ldrb	r3, [r3, r2]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d001      	beq.n	800071c <W25Q_EnableWrite+0x78>
		return HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	e002      	b.n	8000722 <W25Q_EnableWrite+0x7e>

	return halRet;
 800071c:	230f      	movs	r3, #15
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	781b      	ldrb	r3, [r3, #0]

}
 8000722:	0018      	movs	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	b004      	add	sp, #16
 8000728:	bdb0      	pop	{r4, r5, r7, pc}

0800072a <W25Q_DisableWrite>:

HAL_StatusTypeDef W25Q_DisableWrite(W25Q *wq) {
 800072a:	b5b0      	push	{r4, r5, r7, lr}
 800072c:	b084      	sub	sp, #16
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000732:	250f      	movs	r5, #15
 8000734:	197b      	adds	r3, r7, r5
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]

	// TX write disable command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	68db      	ldr	r3, [r3, #12]
 8000742:	b29b      	uxth	r3, r3
 8000744:	2200      	movs	r2, #0
 8000746:	0019      	movs	r1, r3
 8000748:	f001 fb00 	bl	8001d4c <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_WRITE_DISABLE}, 1, HAL_MAX_DELAY);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6998      	ldr	r0, [r3, #24]
 8000750:	210c      	movs	r1, #12
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2204      	movs	r2, #4
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	197c      	adds	r4, r7, r5
 800075a:	2301      	movs	r3, #1
 800075c:	425b      	negs	r3, r3
 800075e:	1879      	adds	r1, r7, r1
 8000760:	2201      	movs	r2, #1
 8000762:	f003 fb49 	bl	8003df8 <HAL_SPI_Transmit>
 8000766:	0003      	movs	r3, r0
 8000768:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6818      	ldr	r0, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	68db      	ldr	r3, [r3, #12]
 8000772:	b29b      	uxth	r3, r3
 8000774:	2201      	movs	r2, #1
 8000776:	0019      	movs	r1, r3
 8000778:	f001 fae8 	bl	8001d4c <HAL_GPIO_WritePin>

	if(halRet != HAL_OK)
 800077c:	197b      	adds	r3, r7, r5
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <W25Q_DisableWrite+0x60>
		return halRet;
 8000784:	197b      	adds	r3, r7, r5
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	e00e      	b.n	80007a8 <W25Q_DisableWrite+0x7e>

	// Read back written value and confirm
	W25Q_ReadStatusReg(wq, 1);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2101      	movs	r1, #1
 800078e:	0018      	movs	r0, r3
 8000790:	f000 f80e 	bl	80007b0 <W25Q_ReadStatusReg>

	// Bit 1 of status register 1 should still be 0
	if(wq->writeEnable != 0)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2223      	movs	r2, #35	@ 0x23
 8000798:	5c9b      	ldrb	r3, [r3, r2]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <W25Q_DisableWrite+0x78>
		return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e002      	b.n	80007a8 <W25Q_DisableWrite+0x7e>

	return halRet;
 80007a2:	230f      	movs	r3, #15
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	781b      	ldrb	r3, [r3, #0]

}
 80007a8:	0018      	movs	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b004      	add	sp, #16
 80007ae:	bdb0      	pop	{r4, r5, r7, pc}

080007b0 <W25Q_ReadStatusReg>:

HAL_StatusTypeDef W25Q_ReadStatusReg(W25Q *wq, uint8_t regNum) {
 80007b0:	b5b0      	push	{r4, r5, r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	000a      	movs	r2, r1
 80007ba:	1cfb      	adds	r3, r7, #3
 80007bc:	701a      	strb	r2, [r3, #0]

	// Check register number is valid
	if(regNum < 1 || regNum > 3) {
 80007be:	1cfb      	adds	r3, r7, #3
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d003      	beq.n	80007ce <W25Q_ReadStatusReg+0x1e>
 80007c6:	1cfb      	adds	r3, r7, #3
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	d901      	bls.n	80007d2 <W25Q_ReadStatusReg+0x22>
		return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e094      	b.n	80008fc <W25Q_ReadStatusReg+0x14c>
	}

	HAL_StatusTypeDef halRet = HAL_OK;
 80007d2:	2417      	movs	r4, #23
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]

	// Array of commands for status registers 1-3
	uint8_t statRegCMDs[3] = {CMD_READ_STAT_1, CMD_READ_STAT_2, CMD_READ_STAT_3};
 80007da:	2514      	movs	r5, #20
 80007dc:	197b      	adds	r3, r7, r5
 80007de:	4a49      	ldr	r2, [pc, #292]	@ (8000904 <W25Q_ReadStatusReg+0x154>)
 80007e0:	8811      	ldrh	r1, [r2, #0]
 80007e2:	8019      	strh	r1, [r3, #0]
 80007e4:	7892      	ldrb	r2, [r2, #2]
 80007e6:	709a      	strb	r2, [r3, #2]

	// TX read status register command
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	2200      	movs	r2, #0
 80007f4:	0019      	movs	r1, r3
 80007f6:	f001 faa9 	bl	8001d4c <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){statRegCMDs[regNum - 1]}, 1, HAL_MAX_DELAY);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6998      	ldr	r0, [r3, #24]
 80007fe:	1cfb      	adds	r3, r7, #3
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	3b01      	subs	r3, #1
 8000804:	197a      	adds	r2, r7, r5
 8000806:	5cd2      	ldrb	r2, [r2, r3]
 8000808:	2110      	movs	r1, #16
 800080a:	187b      	adds	r3, r7, r1
 800080c:	701a      	strb	r2, [r3, #0]
 800080e:	0025      	movs	r5, r4
 8000810:	193c      	adds	r4, r7, r4
 8000812:	2301      	movs	r3, #1
 8000814:	425b      	negs	r3, r3
 8000816:	1879      	adds	r1, r7, r1
 8000818:	2201      	movs	r2, #1
 800081a:	f003 faed 	bl	8003df8 <HAL_SPI_Transmit>
 800081e:	0003      	movs	r3, r0
 8000820:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK) {
 8000822:	197b      	adds	r3, r7, r5
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d00b      	beq.n	8000842 <W25Q_ReadStatusReg+0x92>
		HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6818      	ldr	r0, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	b29b      	uxth	r3, r3
 8000834:	2201      	movs	r2, #1
 8000836:	0019      	movs	r1, r3
 8000838:	f001 fa88 	bl	8001d4c <HAL_GPIO_WritePin>
		return halRet;
 800083c:	197b      	adds	r3, r7, r5
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	e05c      	b.n	80008fc <W25Q_ReadStatusReg+0x14c>
	}

	// RX status register
	uint8_t statRegRet[1] = {0x00};
 8000842:	210c      	movs	r1, #12
 8000844:	187b      	adds	r3, r7, r1
 8000846:	4a30      	ldr	r2, [pc, #192]	@ (8000908 <W25Q_ReadStatusReg+0x158>)
 8000848:	7812      	ldrb	r2, [r2, #0]
 800084a:	701a      	strb	r2, [r3, #0]
	halRet = HAL_SPI_Receive(wq->hspi, statRegRet, 1, HAL_MAX_DELAY);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6998      	ldr	r0, [r3, #24]
 8000850:	2317      	movs	r3, #23
 8000852:	18fc      	adds	r4, r7, r3
 8000854:	2301      	movs	r3, #1
 8000856:	425b      	negs	r3, r3
 8000858:	1879      	adds	r1, r7, r1
 800085a:	2201      	movs	r2, #1
 800085c:	f003 fc2c 	bl	80040b8 <HAL_SPI_Receive>
 8000860:	0003      	movs	r3, r0
 8000862:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	b29b      	uxth	r3, r3
 800086e:	2201      	movs	r2, #1
 8000870:	0019      	movs	r1, r3
 8000872:	f001 fa6b 	bl	8001d4c <HAL_GPIO_WritePin>

	switch(regNum) {
 8000876:	1cfb      	adds	r3, r7, #3
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b03      	cmp	r3, #3
 800087c:	d029      	beq.n	80008d2 <W25Q_ReadStatusReg+0x122>
 800087e:	dc3a      	bgt.n	80008f6 <W25Q_ReadStatusReg+0x146>
 8000880:	2b01      	cmp	r3, #1
 8000882:	d002      	beq.n	800088a <W25Q_ReadStatusReg+0xda>
 8000884:	2b02      	cmp	r3, #2
 8000886:	d012      	beq.n	80008ae <W25Q_ReadStatusReg+0xfe>
 8000888:	e035      	b.n	80008f6 <W25Q_ReadStatusReg+0x146>
	case 1:
		wq->statReg1 = statRegRet[0];
 800088a:	230c      	movs	r3, #12
 800088c:	18fb      	adds	r3, r7, r3
 800088e:	7819      	ldrb	r1, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2220      	movs	r2, #32
 8000894:	5499      	strb	r1, [r3, r2]
		wq->writeEnable = (wq->statReg1 & 0b00000010) >> 1;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2220      	movs	r2, #32
 800089a:	5c9b      	ldrb	r3, [r3, r2]
 800089c:	105b      	asrs	r3, r3, #1
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2201      	movs	r2, #1
 80008a2:	4013      	ands	r3, r2
 80008a4:	b2d9      	uxtb	r1, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2223      	movs	r2, #35	@ 0x23
 80008aa:	5499      	strb	r1, [r3, r2]
		break;
 80008ac:	e023      	b.n	80008f6 <W25Q_ReadStatusReg+0x146>
	case 2:
		wq->statReg2 = statRegRet[0];
 80008ae:	230c      	movs	r3, #12
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	7819      	ldrb	r1, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2221      	movs	r2, #33	@ 0x21
 80008b8:	5499      	strb	r1, [r3, r2]
		wq->quadEnable = (wq->statReg2 & 0b00000010) >> 1;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2221      	movs	r2, #33	@ 0x21
 80008be:	5c9b      	ldrb	r3, [r3, r2]
 80008c0:	105b      	asrs	r3, r3, #1
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2201      	movs	r2, #1
 80008c6:	4013      	ands	r3, r2
 80008c8:	b2d9      	uxtb	r1, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2225      	movs	r2, #37	@ 0x25
 80008ce:	5499      	strb	r1, [r3, r2]
		break;
 80008d0:	e011      	b.n	80008f6 <W25Q_ReadStatusReg+0x146>
	case 3:
		wq->statReg3 = statRegRet[0];
 80008d2:	230c      	movs	r3, #12
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	7819      	ldrb	r1, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2222      	movs	r2, #34	@ 0x22
 80008dc:	5499      	strb	r1, [r3, r2]
		wq->driverStrength = (wq->statReg3 & 0b01100000) >> 5;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2222      	movs	r2, #34	@ 0x22
 80008e2:	5c9b      	ldrb	r3, [r3, r2]
 80008e4:	115b      	asrs	r3, r3, #5
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2203      	movs	r2, #3
 80008ea:	4013      	ands	r3, r2
 80008ec:	b2d9      	uxtb	r1, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2226      	movs	r2, #38	@ 0x26
 80008f2:	5499      	strb	r1, [r3, r2]
		break;
 80008f4:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 80008f6:	2317      	movs	r3, #23
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	781b      	ldrb	r3, [r3, #0]

}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b006      	add	sp, #24
 8000902:	bdb0      	pop	{r4, r5, r7, pc}
 8000904:	080054fc 	.word	0x080054fc
 8000908:	080054f8 	.word	0x080054f8

0800090c <W25Q_ReadStatusRegs>:

HAL_StatusTypeDef W25Q_ReadStatusRegs(W25Q *wq) {
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000914:	230e      	movs	r3, #14
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 1; i <=3; i++) {
 800091c:	230f      	movs	r3, #15
 800091e:	18fb      	adds	r3, r7, r3
 8000920:	2201      	movs	r2, #1
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	e00d      	b.n	8000942 <W25Q_ReadStatusRegs+0x36>

		W25Q_ReadStatusReg(wq, i);
 8000926:	240f      	movs	r4, #15
 8000928:	193b      	adds	r3, r7, r4
 800092a:	781a      	ldrb	r2, [r3, #0]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	0011      	movs	r1, r2
 8000930:	0018      	movs	r0, r3
 8000932:	f7ff ff3d 	bl	80007b0 <W25Q_ReadStatusReg>
	for(uint8_t i = 1; i <=3; i++) {
 8000936:	0021      	movs	r1, r4
 8000938:	187b      	adds	r3, r7, r1
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	187b      	adds	r3, r7, r1
 800093e:	3201      	adds	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
 8000942:	230f      	movs	r3, #15
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b03      	cmp	r3, #3
 800094a:	d9ec      	bls.n	8000926 <W25Q_ReadStatusRegs+0x1a>

	}

	return halRet;
 800094c:	230e      	movs	r3, #14
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	781b      	ldrb	r3, [r3, #0]

}
 8000952:	0018      	movs	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	b005      	add	sp, #20
 8000958:	bd90      	pop	{r4, r7, pc}
	...

0800095c <W25Q_WriteStatusReg>:

HAL_StatusTypeDef W25Q_WriteStatusReg(W25Q *wq, uint8_t regNum, uint8_t regVal) {
 800095c:	b5b0      	push	{r4, r5, r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	0008      	movs	r0, r1
 8000966:	0011      	movs	r1, r2
 8000968:	1cfb      	adds	r3, r7, #3
 800096a:	1c02      	adds	r2, r0, #0
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	1cbb      	adds	r3, r7, #2
 8000970:	1c0a      	adds	r2, r1, #0
 8000972:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000974:	2513      	movs	r5, #19
 8000976:	197b      	adds	r3, r7, r5
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]

	// Enable Write Access to Memory
	// Write access will disable after status register write
	if(wq->writeEnable != 1) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2223      	movs	r2, #35	@ 0x23
 8000980:	5c9b      	ldrb	r3, [r3, r2]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d00c      	beq.n	80009a0 <W25Q_WriteStatusReg+0x44>
		halRet = W25Q_EnableWrite(wq);
 8000986:	197c      	adds	r4, r7, r5
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	0018      	movs	r0, r3
 800098c:	f7ff fe8a 	bl	80006a4 <W25Q_EnableWrite>
 8000990:	0003      	movs	r3, r0
 8000992:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK)
 8000994:	197b      	adds	r3, r7, r5
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <W25Q_WriteStatusReg+0x44>
			return HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	e08a      	b.n	8000ab6 <W25Q_WriteStatusReg+0x15a>
	}

	// Array of commands for status registers 1-3
	uint8_t statRegCMDs[3] = {CMD_WRITE_STAT_1, CMD_WRITE_STAT_2, CMD_WRITE_STAT_3};
 80009a0:	2410      	movs	r4, #16
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	4a46      	ldr	r2, [pc, #280]	@ (8000ac0 <W25Q_WriteStatusReg+0x164>)
 80009a6:	8811      	ldrh	r1, [r2, #0]
 80009a8:	8019      	strh	r1, [r3, #0]
 80009aa:	7892      	ldrb	r2, [r2, #2]
 80009ac:	709a      	strb	r2, [r3, #2]

	// TX write status reg with value
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6818      	ldr	r0, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	2200      	movs	r2, #0
 80009ba:	0019      	movs	r1, r3
 80009bc:	f001 f9c6 	bl	8001d4c <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[2]){statRegCMDs[regNum - 1], regVal}, 2, HAL_MAX_DELAY);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6998      	ldr	r0, [r3, #24]
 80009c4:	1cfb      	adds	r3, r7, #3
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	3b01      	subs	r3, #1
 80009ca:	193a      	adds	r2, r7, r4
 80009cc:	5cd2      	ldrb	r2, [r2, r3]
 80009ce:	210c      	movs	r1, #12
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	701a      	strb	r2, [r3, #0]
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	1cba      	adds	r2, r7, #2
 80009d8:	7812      	ldrb	r2, [r2, #0]
 80009da:	705a      	strb	r2, [r3, #1]
 80009dc:	2513      	movs	r5, #19
 80009de:	197c      	adds	r4, r7, r5
 80009e0:	2301      	movs	r3, #1
 80009e2:	425b      	negs	r3, r3
 80009e4:	1879      	adds	r1, r7, r1
 80009e6:	2202      	movs	r2, #2
 80009e8:	f003 fa06 	bl	8003df8 <HAL_SPI_Transmit>
 80009ec:	0003      	movs	r3, r0
 80009ee:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	2201      	movs	r2, #1
 80009fc:	0019      	movs	r1, r3
 80009fe:	f001 f9a5 	bl	8001d4c <HAL_GPIO_WritePin>

	// WEL bit will now be set back to 0
	halRet = W25Q_ReadStatusReg(wq, 1);
 8000a02:	197c      	adds	r4, r7, r5
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2101      	movs	r1, #1
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff fed1 	bl	80007b0 <W25Q_ReadStatusReg>
 8000a0e:	0003      	movs	r3, r0
 8000a10:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000a12:	197b      	adds	r3, r7, r5
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d002      	beq.n	8000a20 <W25Q_WriteStatusReg+0xc4>
		return halRet;
 8000a1a:	197b      	adds	r3, r7, r5
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	e04a      	b.n	8000ab6 <W25Q_WriteStatusReg+0x15a>

	// Delay maximum status register write time (15ms), as given by chip datasheet.
	// ~235ns per i
	for(uint32_t i = 0; i < 70000; i++) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	e003      	b.n	8000a2e <W25Q_WriteStatusReg+0xd2>
		__NOP();
 8000a26:	46c0      	nop			@ (mov r8, r8)
	for(uint32_t i = 0; i < 70000; i++) {
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	4a24      	ldr	r2, [pc, #144]	@ (8000ac4 <W25Q_WriteStatusReg+0x168>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d9f7      	bls.n	8000a26 <W25Q_WriteStatusReg+0xca>
	}

	if(halRet != HAL_OK)
 8000a36:	2213      	movs	r2, #19
 8000a38:	18bb      	adds	r3, r7, r2
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <W25Q_WriteStatusReg+0xea>
		return halRet;
 8000a40:	18bb      	adds	r3, r7, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	e037      	b.n	8000ab6 <W25Q_WriteStatusReg+0x15a>

	// Read back written value and confirm
	halRet = W25Q_ReadStatusReg(wq, regNum);
 8000a46:	2313      	movs	r3, #19
 8000a48:	18fc      	adds	r4, r7, r3
 8000a4a:	1cfb      	adds	r3, r7, #3
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	0011      	movs	r1, r2
 8000a52:	0018      	movs	r0, r3
 8000a54:	f7ff feac 	bl	80007b0 <W25Q_ReadStatusReg>
 8000a58:	0003      	movs	r3, r0
 8000a5a:	7023      	strb	r3, [r4, #0]
	switch(regNum) {
 8000a5c:	1cfb      	adds	r3, r7, #3
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d017      	beq.n	8000a94 <W25Q_WriteStatusReg+0x138>
 8000a64:	dc24      	bgt.n	8000ab0 <W25Q_WriteStatusReg+0x154>
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d002      	beq.n	8000a70 <W25Q_WriteStatusReg+0x114>
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d009      	beq.n	8000a82 <W25Q_WriteStatusReg+0x126>
 8000a6e:	e01f      	b.n	8000ab0 <W25Q_WriteStatusReg+0x154>
		case 1:
			if(wq->statReg1 != regVal)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2220      	movs	r2, #32
 8000a74:	5c9b      	ldrb	r3, [r3, r2]
 8000a76:	1cba      	adds	r2, r7, #2
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d013      	beq.n	8000aa6 <W25Q_WriteStatusReg+0x14a>
				return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e019      	b.n	8000ab6 <W25Q_WriteStatusReg+0x15a>
			break;
		case 2:
			if(wq->statReg2 != regVal)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2221      	movs	r2, #33	@ 0x21
 8000a86:	5c9b      	ldrb	r3, [r3, r2]
 8000a88:	1cba      	adds	r2, r7, #2
 8000a8a:	7812      	ldrb	r2, [r2, #0]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d00c      	beq.n	8000aaa <W25Q_WriteStatusReg+0x14e>
				return HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e010      	b.n	8000ab6 <W25Q_WriteStatusReg+0x15a>
			break;
		case 3:
			if(wq->statReg3 != regVal)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2222      	movs	r2, #34	@ 0x22
 8000a98:	5c9b      	ldrb	r3, [r3, r2]
 8000a9a:	1cba      	adds	r2, r7, #2
 8000a9c:	7812      	ldrb	r2, [r2, #0]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d005      	beq.n	8000aae <W25Q_WriteStatusReg+0x152>
				return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e007      	b.n	8000ab6 <W25Q_WriteStatusReg+0x15a>
			break;
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	e002      	b.n	8000ab0 <W25Q_WriteStatusReg+0x154>
			break;
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	e000      	b.n	8000ab0 <W25Q_WriteStatusReg+0x154>
			break;
 8000aae:	46c0      	nop			@ (mov r8, r8)
	}

	return halRet;
 8000ab0:	2313      	movs	r3, #19
 8000ab2:	18fb      	adds	r3, r7, r3
 8000ab4:	781b      	ldrb	r3, [r3, #0]


}
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b006      	add	sp, #24
 8000abc:	bdb0      	pop	{r4, r5, r7, pc}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	08005500 	.word	0x08005500
 8000ac4:	0001116f 	.word	0x0001116f

08000ac8 <W25Q_ChipReset>:
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);

	return halRet;
}

HAL_StatusTypeDef W25Q_ChipReset(W25Q *wq) {
 8000ac8:	b5b0      	push	{r4, r5, r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000ad0:	250e      	movs	r5, #14
 8000ad2:	197b      	adds	r3, r7, r5
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]

	/*
	 * Send both enable reset an reset device commands
	 */
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	f001 f931 	bl	8001d4c <HAL_GPIO_WritePin>
	// TX enable reset instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_ENABLE}, 1, HAL_MAX_DELAY);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6998      	ldr	r0, [r3, #24]
 8000aee:	210c      	movs	r1, #12
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2266      	movs	r2, #102	@ 0x66
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	197c      	adds	r4, r7, r5
 8000af8:	2301      	movs	r3, #1
 8000afa:	425b      	negs	r3, r3
 8000afc:	1879      	adds	r1, r7, r1
 8000afe:	2201      	movs	r2, #1
 8000b00:	f003 f97a 	bl	8003df8 <HAL_SPI_Transmit>
 8000b04:	0003      	movs	r3, r0
 8000b06:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	2201      	movs	r2, #1
 8000b14:	0019      	movs	r1, r3
 8000b16:	f001 f919 	bl	8001d4c <HAL_GPIO_WritePin>
	if(halRet != HAL_OK)
 8000b1a:	197b      	adds	r3, r7, r5
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d002      	beq.n	8000b28 <W25Q_ChipReset+0x60>
		return halRet;
 8000b22:	197b      	adds	r3, r7, r5
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	e035      	b.n	8000b94 <W25Q_ChipReset+0xcc>

	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	2200      	movs	r2, #0
 8000b34:	0019      	movs	r1, r3
 8000b36:	f001 f909 	bl	8001d4c <HAL_GPIO_WritePin>
	// TX reset device instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_DEVICE}, 1, HAL_MAX_DELAY);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6998      	ldr	r0, [r3, #24]
 8000b3e:	2108      	movs	r1, #8
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2299      	movs	r2, #153	@ 0x99
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	230e      	movs	r3, #14
 8000b48:	18fc      	adds	r4, r7, r3
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	1879      	adds	r1, r7, r1
 8000b50:	2201      	movs	r2, #1
 8000b52:	f003 f951 	bl	8003df8 <HAL_SPI_Transmit>
 8000b56:	0003      	movs	r3, r0
 8000b58:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6818      	ldr	r0, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	2201      	movs	r2, #1
 8000b66:	0019      	movs	r1, r3
 8000b68:	f001 f8f0 	bl	8001d4c <HAL_GPIO_WritePin>

	// Delay at least 30 us
	for(uint8_t i = 0; i < 180; i++) {
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
 8000b74:	e006      	b.n	8000b84 <W25Q_ChipReset+0xbc>
		__NOP();
 8000b76:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 180; i++) {
 8000b78:	210f      	movs	r1, #15
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	781a      	ldrb	r2, [r3, #0]
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	3201      	adds	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
 8000b84:	230f      	movs	r3, #15
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2bb3      	cmp	r3, #179	@ 0xb3
 8000b8c:	d9f3      	bls.n	8000b76 <W25Q_ChipReset+0xae>
	}


	return halRet;
 8000b8e:	230e      	movs	r3, #14
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	781b      	ldrb	r3, [r3, #0]

}
 8000b94:	0018      	movs	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b004      	add	sp, #16
 8000b9a:	bdb0      	pop	{r4, r5, r7, pc}

08000b9c <W25Q_SetDriverStrength>:

	return halRet;

}

HAL_StatusTypeDef W25Q_SetDriverStrength(W25Q *wq, uint8_t driverStrength) {
 8000b9c:	b5b0      	push	{r4, r5, r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	000a      	movs	r2, r1
 8000ba6:	1cfb      	adds	r3, r7, #3
 8000ba8:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000baa:	230f      	movs	r3, #15
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]

	// Check to ensure passed driver strength value lies in range
	if(driverStrength < 0 || driverStrength > 3)
 8000bb2:	1cfb      	adds	r3, r7, #3
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	d901      	bls.n	8000bbe <W25Q_SetDriverStrength+0x22>
		return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e041      	b.n	8000c42 <W25Q_SetDriverStrength+0xa6>

	// Read current value in status register 3
	halRet = W25Q_ReadStatusReg(wq, 3);
 8000bbe:	250f      	movs	r5, #15
 8000bc0:	197c      	adds	r4, r7, r5
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2103      	movs	r1, #3
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff fdf2 	bl	80007b0 <W25Q_ReadStatusReg>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	7023      	strb	r3, [r4, #0]

	// Isolate bits 5-6 and change value to reflect new driver strength
	uint8_t newRegVal = (wq->statReg3) & (0b10011111);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2222      	movs	r2, #34	@ 0x22
 8000bd4:	5c9a      	ldrb	r2, [r3, r2]
 8000bd6:	200e      	movs	r0, #14
 8000bd8:	183b      	adds	r3, r7, r0
 8000bda:	2160      	movs	r1, #96	@ 0x60
 8000bdc:	438a      	bics	r2, r1
 8000bde:	701a      	strb	r2, [r3, #0]
	newRegVal = (newRegVal) | (driverStrength << 5);
 8000be0:	1cfb      	adds	r3, r7, #3
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	015b      	lsls	r3, r3, #5
 8000be6:	b25a      	sxtb	r2, r3
 8000be8:	183b      	adds	r3, r7, r0
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	b25a      	sxtb	r2, r3
 8000bf2:	183b      	adds	r3, r7, r0
 8000bf4:	701a      	strb	r2, [r3, #0]

	// Write status register 3 with new value
	halRet = W25Q_WriteStatusReg(wq, 3, newRegVal);
 8000bf6:	197c      	adds	r4, r7, r5
 8000bf8:	183b      	adds	r3, r7, r0
 8000bfa:	781a      	ldrb	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2103      	movs	r1, #3
 8000c00:	0018      	movs	r0, r3
 8000c02:	f7ff feab 	bl	800095c <W25Q_WriteStatusReg>
 8000c06:	0003      	movs	r3, r0
 8000c08:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000c0a:	197b      	adds	r3, r7, r5
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <W25Q_SetDriverStrength+0x7c>
		return halRet;
 8000c12:	197b      	adds	r3, r7, r5
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	e014      	b.n	8000c42 <W25Q_SetDriverStrength+0xa6>

	// Read back status register 3 and confirm successful write
	halRet = W25Q_ReadStatusReg(wq, 3);
 8000c18:	230f      	movs	r3, #15
 8000c1a:	18fc      	adds	r4, r7, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2103      	movs	r1, #3
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff fdc5 	bl	80007b0 <W25Q_ReadStatusReg>
 8000c26:	0003      	movs	r3, r0
 8000c28:	7023      	strb	r3, [r4, #0]
	if(wq->driverStrength != driverStrength)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2226      	movs	r2, #38	@ 0x26
 8000c2e:	5c9b      	ldrb	r3, [r3, r2]
 8000c30:	1cfa      	adds	r2, r7, #3
 8000c32:	7812      	ldrb	r2, [r2, #0]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d001      	beq.n	8000c3c <W25Q_SetDriverStrength+0xa0>
		return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e002      	b.n	8000c42 <W25Q_SetDriverStrength+0xa6>

	return halRet;
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	781b      	ldrb	r3, [r3, #0]

}
 8000c42:	0018      	movs	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b004      	add	sp, #16
 8000c48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4e:	b0cd      	sub	sp, #308	@ 0x134
 8000c50:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c52:	f000 fddd 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c56:	f000 f89b 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5a:	f000 fab1 	bl	80011c0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000c5e:	f000 f965 	bl	8000f2c <MX_RTC_Init>
  MX_I2C1_Init();
 8000c62:	f000 f8fb 	bl	8000e5c <MX_I2C1_Init>
  MX_I2S1_Init();
 8000c66:	f000 f939 	bl	8000edc <MX_I2S1_Init>
  MX_SPI2_Init();
 8000c6a:	f000 fa0b 	bl	8001084 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000c6e:	f000 fa47 	bl	8001100 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	  // Init Memory Chip
     uint8_t initStat = W25Q_Init(&w25q, GPIOA, GPIOA, GPIOA,
 8000c72:	2610      	movs	r6, #16
 8000c74:	36ff      	adds	r6, #255	@ 0xff
 8000c76:	19bc      	adds	r4, r7, r6
 8000c78:	23a0      	movs	r3, #160	@ 0xa0
 8000c7a:	05dd      	lsls	r5, r3, #23
 8000c7c:	23a0      	movs	r3, #160	@ 0xa0
 8000c7e:	05da      	lsls	r2, r3, #23
 8000c80:	23a0      	movs	r3, #160	@ 0xa0
 8000c82:	05d9      	lsls	r1, r3, #23
 8000c84:	4840      	ldr	r0, [pc, #256]	@ (8000d88 <main+0x13c>)
 8000c86:	2301      	movs	r3, #1
 8000c88:	9306      	str	r3, [sp, #24]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	9305      	str	r3, [sp, #20]
 8000c8e:	2317      	movs	r3, #23
 8000c90:	9304      	str	r3, [sp, #16]
 8000c92:	4b3e      	ldr	r3, [pc, #248]	@ (8000d8c <main+0x140>)
 8000c94:	9303      	str	r3, [sp, #12]
 8000c96:	2380      	movs	r3, #128	@ 0x80
 8000c98:	9302      	str	r3, [sp, #8]
 8000c9a:	2340      	movs	r3, #64	@ 0x40
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	2320      	movs	r3, #32
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	002b      	movs	r3, r5
 8000ca4:	f7ff faba 	bl	800021c <W25Q_Init>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	7023      	strb	r3, [r4, #0]
   		  	  	  	  	  	  GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7, &hspi2, 0x17, 1, 1);

     // Enter error loop if there's an error in initialization
     if(initStat != 0) {
 8000cac:	19bb      	adds	r3, r7, r6
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <main+0x6c>
  	   while(1) {
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	e7fd      	b.n	8000cb4 <main+0x68>
     }


     // Use DMA to read data on chip
        // Put this into a function eventually
        HAL_StatusTypeDef halRet = HAL_OK;
 8000cb8:	2487      	movs	r4, #135	@ 0x87
 8000cba:	0064      	lsls	r4, r4, #1
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
     //   uint16_t i2sDataTxArr[BUFFER_SIZE / 2];
     //
     	// Create read data array with start address
     	uint8_t dataTXArr[4];
     //	uint32_t startAddress = 0x000409D0;
     	uint32_t startAddress = 0x00;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	2184      	movs	r1, #132	@ 0x84
 8000cc6:	0049      	lsls	r1, r1, #1
 8000cc8:	187a      	adds	r2, r7, r1
 8000cca:	6013      	str	r3, [r2, #0]
     	dataTXArr[0] = CMD_READ_DATA;
 8000ccc:	1d7b      	adds	r3, r7, #5
 8000cce:	33ff      	adds	r3, #255	@ 0xff
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	701a      	strb	r2, [r3, #0]
     	dataTXArr[1] = (startAddress >> 16);
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	0c1b      	lsrs	r3, r3, #16
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	1d7b      	adds	r3, r7, #5
 8000cde:	33ff      	adds	r3, #255	@ 0xff
 8000ce0:	705a      	strb	r2, [r3, #1]
     	dataTXArr[2] = (startAddress >> 8) & (0xff);
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	0a1b      	lsrs	r3, r3, #8
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	1d7b      	adds	r3, r7, #5
 8000cec:	33ff      	adds	r3, #255	@ 0xff
 8000cee:	709a      	strb	r2, [r3, #2]
     	dataTXArr[3] = (startAddress & 0xff);
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	1d7b      	adds	r3, r7, #5
 8000cf8:	33ff      	adds	r3, #255	@ 0xff
 8000cfa:	70da      	strb	r2, [r3, #3]


     	HAL_GPIO_WritePin(w25q.nCSPort, w25q.nCSPin, GPIO_PIN_RESET);
 8000cfc:	4b22      	ldr	r3, [pc, #136]	@ (8000d88 <main+0x13c>)
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <main+0x13c>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	2200      	movs	r2, #0
 8000d08:	0019      	movs	r1, r3
 8000d0a:	f001 f81f 	bl	8001d4c <HAL_GPIO_WritePin>
     	halRet = HAL_SPI_Transmit(w25q.hspi, dataTXArr, 4, HAL_MAX_DELAY);
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <main+0x13c>)
 8000d10:	6998      	ldr	r0, [r3, #24]
 8000d12:	0025      	movs	r5, r4
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	2301      	movs	r3, #1
 8000d18:	425b      	negs	r3, r3
 8000d1a:	1d79      	adds	r1, r7, #5
 8000d1c:	31ff      	adds	r1, #255	@ 0xff
 8000d1e:	2204      	movs	r2, #4
 8000d20:	f003 f86a 	bl	8003df8 <HAL_SPI_Transmit>
 8000d24:	0003      	movs	r3, r0
 8000d26:	7023      	strb	r3, [r4, #0]
     	if(halRet != HAL_OK) {
 8000d28:	002c      	movs	r4, r5
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00b      	beq.n	8000d4a <main+0xfe>
     		HAL_GPIO_WritePin(w25q.nCSPort, w25q.nCSPin, GPIO_PIN_SET);
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <main+0x13c>)
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <main+0x13c>)
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	0019      	movs	r1, r3
 8000d40:	f001 f804 	bl	8001d4c <HAL_GPIO_WritePin>
     		return halRet;
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	e019      	b.n	8000d7e <main+0x132>
     	}

     		// RX data
     	uint8_t dataRXArr[256];
     		halRet = HAL_SPI_Receive(w25q.hspi, dataRXArr, 256, HAL_MAX_DELAY);
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <main+0x13c>)
 8000d4c:	6998      	ldr	r0, [r3, #24]
 8000d4e:	2387      	movs	r3, #135	@ 0x87
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	18fc      	adds	r4, r7, r3
 8000d54:	2301      	movs	r3, #1
 8000d56:	425b      	negs	r3, r3
 8000d58:	2280      	movs	r2, #128	@ 0x80
 8000d5a:	0052      	lsls	r2, r2, #1
 8000d5c:	1d39      	adds	r1, r7, #4
 8000d5e:	f003 f9ab 	bl	80040b8 <HAL_SPI_Receive>
 8000d62:	0003      	movs	r3, r0
 8000d64:	7023      	strb	r3, [r4, #0]

     		HAL_GPIO_WritePin(w25q.nCSPort, w25q.nCSPin, GPIO_PIN_SET);
 8000d66:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <main+0x13c>)
 8000d68:	6818      	ldr	r0, [r3, #0]
 8000d6a:	4b07      	ldr	r3, [pc, #28]	@ (8000d88 <main+0x13c>)
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	2201      	movs	r2, #1
 8000d72:	0019      	movs	r1, r3
 8000d74:	f000 ffea 	bl	8001d4c <HAL_GPIO_WritePin>


     		// Convert 8-bit values to 16-bit values?


     	   __NOP();
 8000d78:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	e7fd      	b.n	8000d7a <main+0x12e>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b045      	add	sp, #276	@ 0x114
 8000d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	20000194 	.word	0x20000194
 8000d8c:	200000e4 	.word	0x200000e4

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b093      	sub	sp, #76	@ 0x4c
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	2410      	movs	r4, #16
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	2338      	movs	r3, #56	@ 0x38
 8000d9e:	001a      	movs	r2, r3
 8000da0:	2100      	movs	r1, #0
 8000da2:	f004 fb71 	bl	8005488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da6:	003b      	movs	r3, r7
 8000da8:	0018      	movs	r0, r3
 8000daa:	2310      	movs	r3, #16
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f004 fb6a 	bl	8005488 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	0018      	movs	r0, r3
 8000dba:	f001 fa27 	bl	800220c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dbe:	f001 fa17 	bl	80021f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000dc2:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <SystemClock_Config+0xc8>)
 8000dc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000dc6:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <SystemClock_Config+0xc8>)
 8000dc8:	2118      	movs	r1, #24
 8000dca:	438a      	bics	r2, r1
 8000dcc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	2205      	movs	r2, #5
 8000dd2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	2280      	movs	r2, #128	@ 0x80
 8000dd8:	0252      	lsls	r2, r2, #9
 8000dda:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ddc:	0021      	movs	r1, r4
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2201      	movs	r2, #1
 8000de2:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2202      	movs	r2, #2
 8000de8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2203      	movs	r2, #3
 8000dee:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2208      	movs	r2, #8
 8000dfa:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	22c0      	movs	r2, #192	@ 0xc0
 8000e00:	02d2      	lsls	r2, r2, #11
 8000e02:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2280      	movs	r2, #128	@ 0x80
 8000e08:	0492      	lsls	r2, r2, #18
 8000e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2280      	movs	r2, #128	@ 0x80
 8000e10:	0592      	lsls	r2, r2, #22
 8000e12:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	0018      	movs	r0, r3
 8000e18:	f001 fa44 	bl	80022a4 <HAL_RCC_OscConfig>
 8000e1c:	1e03      	subs	r3, r0, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e20:	f000 faa6 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e24:	003b      	movs	r3, r7
 8000e26:	2207      	movs	r2, #7
 8000e28:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2a:	003b      	movs	r3, r7
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e30:	003b      	movs	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e36:	003b      	movs	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e3c:	003b      	movs	r3, r7
 8000e3e:	2102      	movs	r1, #2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f001 fd49 	bl	80028d8 <HAL_RCC_ClockConfig>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000e4a:	f000 fa91 	bl	8001370 <Error_Handler>
  }
}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b013      	add	sp, #76	@ 0x4c
 8000e54:	bd90      	pop	{r4, r7, pc}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	40021000 	.word	0x40021000

08000e5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e62:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed4 <MX_I2C1_Init+0x78>)
 8000e64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e68:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed8 <MX_I2C1_Init+0x7c>)
 8000e6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e72:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e78:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f000 ff75 	bl	8001d88 <HAL_I2C_Init>
 8000e9e:	1e03      	subs	r3, r0, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ea2:	f000 fa65 	bl	8001370 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f001 f812 	bl	8001ed4 <HAL_I2CEx_ConfigAnalogFilter>
 8000eb0:	1e03      	subs	r3, r0, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000eb4:	f000 fa5c 	bl	8001370 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f001 f855 	bl	8001f6c <HAL_I2CEx_ConfigDigitalFilter>
 8000ec2:	1e03      	subs	r3, r0, #0
 8000ec4:	d001      	beq.n	8000eca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ec6:	f000 fa53 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000028 	.word	0x20000028
 8000ed4:	40005400 	.word	0x40005400
 8000ed8:	10707dbc 	.word	0x10707dbc

08000edc <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000ee0:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <MX_I2S1_Init+0x48>)
 8000ee2:	4a11      	ldr	r2, [pc, #68]	@ (8000f28 <MX_I2S1_Init+0x4c>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_I2S1_Init+0x48>)
 8000ee8:	2280      	movs	r2, #128	@ 0x80
 8000eea:	0092      	lsls	r2, r2, #2
 8000eec:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000eee:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <MX_I2S1_Init+0x48>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <MX_I2S1_Init+0x48>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <MX_I2S1_Init+0x48>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <MX_I2S1_Init+0x48>)
 8000f02:	22fa      	movs	r2, #250	@ 0xfa
 8000f04:	0152      	lsls	r2, r2, #5
 8000f06:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MX_I2S1_Init+0x48>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000f0e:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <MX_I2S1_Init+0x48>)
 8000f10:	0018      	movs	r0, r3
 8000f12:	f001 f877 	bl	8002004 <HAL_I2S_Init>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d001      	beq.n	8000f1e <MX_I2S1_Init+0x42>
  {
    Error_Handler();
 8000f1a:	f000 fa29 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000007c 	.word	0x2000007c
 8000f28:	40013000 	.word	0x40013000

08000f2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b090      	sub	sp, #64	@ 0x40
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f32:	232c      	movs	r3, #44	@ 0x2c
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	0018      	movs	r0, r3
 8000f38:	2314      	movs	r3, #20
 8000f3a:	001a      	movs	r2, r3
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	f004 faa3 	bl	8005488 <memset>
  RTC_DateTypeDef sDate = {0};
 8000f42:	2328      	movs	r3, #40	@ 0x28
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000f4a:	003b      	movs	r3, r7
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	2328      	movs	r3, #40	@ 0x28
 8000f50:	001a      	movs	r2, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	f004 fa98 	bl	8005488 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f58:	4b48      	ldr	r3, [pc, #288]	@ (800107c <MX_RTC_Init+0x150>)
 8000f5a:	4a49      	ldr	r2, [pc, #292]	@ (8001080 <MX_RTC_Init+0x154>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f5e:	4b47      	ldr	r3, [pc, #284]	@ (800107c <MX_RTC_Init+0x150>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000f64:	4b45      	ldr	r3, [pc, #276]	@ (800107c <MX_RTC_Init+0x150>)
 8000f66:	227f      	movs	r2, #127	@ 0x7f
 8000f68:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000f6a:	4b44      	ldr	r3, [pc, #272]	@ (800107c <MX_RTC_Init+0x150>)
 8000f6c:	22ff      	movs	r2, #255	@ 0xff
 8000f6e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f70:	4b42      	ldr	r3, [pc, #264]	@ (800107c <MX_RTC_Init+0x150>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f76:	4b41      	ldr	r3, [pc, #260]	@ (800107c <MX_RTC_Init+0x150>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800107c <MX_RTC_Init+0x150>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f82:	4b3e      	ldr	r3, [pc, #248]	@ (800107c <MX_RTC_Init+0x150>)
 8000f84:	2280      	movs	r2, #128	@ 0x80
 8000f86:	05d2      	lsls	r2, r2, #23
 8000f88:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000f8a:	4b3c      	ldr	r3, [pc, #240]	@ (800107c <MX_RTC_Init+0x150>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f90:	4b3a      	ldr	r3, [pc, #232]	@ (800107c <MX_RTC_Init+0x150>)
 8000f92:	0018      	movs	r0, r3
 8000f94:	f002 fa5a 	bl	800344c <HAL_RTC_Init>
 8000f98:	1e03      	subs	r3, r0, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000f9c:	f000 f9e8 	bl	8001370 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000fa0:	212c      	movs	r1, #44	@ 0x2c
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2200      	movs	r2, #0
 8000fac:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fc6:	1879      	adds	r1, r7, r1
 8000fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800107c <MX_RTC_Init+0x150>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f002 fadf 	bl	8003590 <HAL_RTC_SetTime>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d001      	beq.n	8000fda <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8000fd6:	f000 f9cb 	bl	8001370 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000fda:	2128      	movs	r1, #40	@ 0x28
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	2201      	movs	r2, #1
 8000fec:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ff4:	1879      	adds	r1, r7, r1
 8000ff6:	4b21      	ldr	r3, [pc, #132]	@ (800107c <MX_RTC_Init+0x150>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f002 fb70 	bl	80036e0 <HAL_RTC_SetDate>
 8001000:	1e03      	subs	r3, r0, #0
 8001002:	d001      	beq.n	8001008 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8001004:	f000 f9b4 	bl	8001370 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001008:	003b      	movs	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800100e:	003b      	movs	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001014:	003b      	movs	r3, r7
 8001016:	2200      	movs	r2, #0
 8001018:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800101a:	003b      	movs	r3, r7
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001020:	003b      	movs	r3, r7
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001026:	003b      	movs	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800102c:	003b      	movs	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001032:	003b      	movs	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001038:	003b      	movs	r3, r7
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800103e:	003b      	movs	r3, r7
 8001040:	2220      	movs	r2, #32
 8001042:	2101      	movs	r1, #1
 8001044:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001046:	003b      	movs	r3, r7
 8001048:	2280      	movs	r2, #128	@ 0x80
 800104a:	0052      	lsls	r2, r2, #1
 800104c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800104e:	0039      	movs	r1, r7
 8001050:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <MX_RTC_Init+0x150>)
 8001052:	2201      	movs	r2, #1
 8001054:	0018      	movs	r0, r3
 8001056:	f002 fbd5 	bl	8003804 <HAL_RTC_SetAlarm>
 800105a:	1e03      	subs	r3, r0, #0
 800105c:	d001      	beq.n	8001062 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 800105e:	f000 f987 	bl	8001370 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <MX_RTC_Init+0x150>)
 8001064:	2100      	movs	r1, #0
 8001066:	0018      	movs	r0, r3
 8001068:	f002 fdc6 	bl	8003bf8 <HAL_RTCEx_SetCalibrationOutPut>
 800106c:	1e03      	subs	r3, r0, #0
 800106e:	d001      	beq.n	8001074 <MX_RTC_Init+0x148>
  {
    Error_Handler();
 8001070:	f000 f97e 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001074:	46c0      	nop			@ (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b010      	add	sp, #64	@ 0x40
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200000b8 	.word	0x200000b8
 8001080:	40002800 	.word	0x40002800

08001084 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001088:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <MX_SPI2_Init+0x74>)
 800108a:	4a1c      	ldr	r2, [pc, #112]	@ (80010fc <MX_SPI2_Init+0x78>)
 800108c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800108e:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_SPI2_Init+0x74>)
 8001090:	2282      	movs	r2, #130	@ 0x82
 8001092:	0052      	lsls	r2, r2, #1
 8001094:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001096:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <MX_SPI2_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800109c:	4b16      	ldr	r3, [pc, #88]	@ (80010f8 <MX_SPI2_Init+0x74>)
 800109e:	22e0      	movs	r2, #224	@ 0xe0
 80010a0:	00d2      	lsls	r2, r2, #3
 80010a2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_SPI2_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010aa:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <MX_SPI2_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_SPI2_Init+0x74>)
 80010b2:	2280      	movs	r2, #128	@ 0x80
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <MX_SPI2_Init+0x74>)
 80010ba:	2210      	movs	r2, #16
 80010bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010be:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <MX_SPI2_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <MX_SPI2_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <MX_SPI2_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <MX_SPI2_Init+0x74>)
 80010d2:	2207      	movs	r2, #7
 80010d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <MX_SPI2_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <MX_SPI2_Init+0x74>)
 80010de:	2208      	movs	r2, #8
 80010e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010e2:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <MX_SPI2_Init+0x74>)
 80010e4:	0018      	movs	r0, r3
 80010e6:	f002 fdcf 	bl	8003c88 <HAL_SPI_Init>
 80010ea:	1e03      	subs	r3, r0, #0
 80010ec:	d001      	beq.n	80010f2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80010ee:	f000 f93f 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200000e4 	.word	0x200000e4
 80010fc:	40003800 	.word	0x40003800

08001100 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	@ 0x28
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001106:	231c      	movs	r3, #28
 8001108:	18fb      	adds	r3, r7, r3
 800110a:	0018      	movs	r0, r3
 800110c:	230c      	movs	r3, #12
 800110e:	001a      	movs	r2, r3
 8001110:	2100      	movs	r1, #0
 8001112:	f004 f9b9 	bl	8005488 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001116:	003b      	movs	r3, r7
 8001118:	0018      	movs	r0, r3
 800111a:	231c      	movs	r3, #28
 800111c:	001a      	movs	r2, r3
 800111e:	2100      	movs	r1, #0
 8001120:	f004 f9b2 	bl	8005488 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001124:	4b25      	ldr	r3, [pc, #148]	@ (80011bc <MX_TIM2_Init+0xbc>)
 8001126:	2280      	movs	r2, #128	@ 0x80
 8001128:	05d2      	lsls	r2, r2, #23
 800112a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800112c:	4b23      	ldr	r3, [pc, #140]	@ (80011bc <MX_TIM2_Init+0xbc>)
 800112e:	2200      	movs	r2, #0
 8001130:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <MX_TIM2_Init+0xbc>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001138:	4b20      	ldr	r3, [pc, #128]	@ (80011bc <MX_TIM2_Init+0xbc>)
 800113a:	2201      	movs	r2, #1
 800113c:	4252      	negs	r2, r2
 800113e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	4b1e      	ldr	r3, [pc, #120]	@ (80011bc <MX_TIM2_Init+0xbc>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <MX_TIM2_Init+0xbc>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800114c:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <MX_TIM2_Init+0xbc>)
 800114e:	0018      	movs	r0, r3
 8001150:	f003 fcba 	bl	8004ac8 <HAL_TIM_PWM_Init>
 8001154:	1e03      	subs	r3, r0, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001158:	f000 f90a 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115c:	211c      	movs	r1, #28
 800115e:	187b      	adds	r3, r7, r1
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800116a:	187a      	adds	r2, r7, r1
 800116c:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <MX_TIM2_Init+0xbc>)
 800116e:	0011      	movs	r1, r2
 8001170:	0018      	movs	r0, r3
 8001172:	f004 f921 	bl	80053b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001176:	1e03      	subs	r3, r0, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800117a:	f000 f8f9 	bl	8001370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800117e:	003b      	movs	r3, r7
 8001180:	2260      	movs	r2, #96	@ 0x60
 8001182:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001184:	003b      	movs	r3, r7
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800118a:	003b      	movs	r3, r7
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001190:	003b      	movs	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001196:	0039      	movs	r1, r7
 8001198:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <MX_TIM2_Init+0xbc>)
 800119a:	2208      	movs	r2, #8
 800119c:	0018      	movs	r0, r3
 800119e:	f003 fceb 	bl	8004b78 <HAL_TIM_PWM_ConfigChannel>
 80011a2:	1e03      	subs	r3, r0, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80011a6:	f000 f8e3 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011aa:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <MX_TIM2_Init+0xbc>)
 80011ac:	0018      	movs	r0, r3
 80011ae:	f000 faab 	bl	8001708 <HAL_TIM_MspPostInit>

}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b00a      	add	sp, #40	@ 0x28
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	20000148 	.word	0x20000148

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b08b      	sub	sp, #44	@ 0x2c
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	2414      	movs	r4, #20
 80011c8:	193b      	adds	r3, r7, r4
 80011ca:	0018      	movs	r0, r3
 80011cc:	2314      	movs	r3, #20
 80011ce:	001a      	movs	r2, r3
 80011d0:	2100      	movs	r1, #0
 80011d2:	f004 f959 	bl	8005488 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	4b61      	ldr	r3, [pc, #388]	@ (800135c <MX_GPIO_Init+0x19c>)
 80011d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011da:	4b60      	ldr	r3, [pc, #384]	@ (800135c <MX_GPIO_Init+0x19c>)
 80011dc:	2104      	movs	r1, #4
 80011de:	430a      	orrs	r2, r1
 80011e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80011e2:	4b5e      	ldr	r3, [pc, #376]	@ (800135c <MX_GPIO_Init+0x19c>)
 80011e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011e6:	2204      	movs	r2, #4
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ee:	4b5b      	ldr	r3, [pc, #364]	@ (800135c <MX_GPIO_Init+0x19c>)
 80011f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011f2:	4b5a      	ldr	r3, [pc, #360]	@ (800135c <MX_GPIO_Init+0x19c>)
 80011f4:	2120      	movs	r1, #32
 80011f6:	430a      	orrs	r2, r1
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80011fa:	4b58      	ldr	r3, [pc, #352]	@ (800135c <MX_GPIO_Init+0x19c>)
 80011fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011fe:	2220      	movs	r2, #32
 8001200:	4013      	ands	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b55      	ldr	r3, [pc, #340]	@ (800135c <MX_GPIO_Init+0x19c>)
 8001208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800120a:	4b54      	ldr	r3, [pc, #336]	@ (800135c <MX_GPIO_Init+0x19c>)
 800120c:	2101      	movs	r1, #1
 800120e:	430a      	orrs	r2, r1
 8001210:	635a      	str	r2, [r3, #52]	@ 0x34
 8001212:	4b52      	ldr	r3, [pc, #328]	@ (800135c <MX_GPIO_Init+0x19c>)
 8001214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001216:	2201      	movs	r2, #1
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b4f      	ldr	r3, [pc, #316]	@ (800135c <MX_GPIO_Init+0x19c>)
 8001220:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001222:	4b4e      	ldr	r3, [pc, #312]	@ (800135c <MX_GPIO_Init+0x19c>)
 8001224:	2102      	movs	r1, #2
 8001226:	430a      	orrs	r2, r1
 8001228:	635a      	str	r2, [r3, #52]	@ 0x34
 800122a:	4b4c      	ldr	r3, [pc, #304]	@ (800135c <MX_GPIO_Init+0x19c>)
 800122c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800122e:	2202      	movs	r2, #2
 8001230:	4013      	ands	r3, r2
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001236:	4b49      	ldr	r3, [pc, #292]	@ (800135c <MX_GPIO_Init+0x19c>)
 8001238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800123a:	4b48      	ldr	r3, [pc, #288]	@ (800135c <MX_GPIO_Init+0x19c>)
 800123c:	2108      	movs	r1, #8
 800123e:	430a      	orrs	r2, r1
 8001240:	635a      	str	r2, [r3, #52]	@ 0x34
 8001242:	4b46      	ldr	r3, [pc, #280]	@ (800135c <MX_GPIO_Init+0x19c>)
 8001244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001246:	2208      	movs	r2, #8
 8001248:	4013      	ands	r3, r2
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nRST_Pin|SHIFT_DATA_IN_Pin
 800124e:	23ee      	movs	r3, #238	@ 0xee
 8001250:	0119      	lsls	r1, r3, #4
 8001252:	23a0      	movs	r3, #160	@ 0xa0
 8001254:	05db      	lsls	r3, r3, #23
 8001256:	2200      	movs	r2, #0
 8001258:	0018      	movs	r0, r3
 800125a:	f000 fd77 	bl	8001d4c <HAL_GPIO_WritePin>
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin, GPIO_PIN_RESET);
 800125e:	4940      	ldr	r1, [pc, #256]	@ (8001360 <MX_GPIO_Init+0x1a0>)
 8001260:	4b40      	ldr	r3, [pc, #256]	@ (8001364 <MX_GPIO_Init+0x1a4>)
 8001262:	2200      	movs	r2, #0
 8001264:	0018      	movs	r0, r3
 8001266:	f000 fd71 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 800126a:	4b3f      	ldr	r3, [pc, #252]	@ (8001368 <MX_GPIO_Init+0x1a8>)
 800126c:	2200      	movs	r2, #0
 800126e:	2180      	movs	r1, #128	@ 0x80
 8001270:	0018      	movs	r0, r3
 8001272:	f000 fd6b 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nRST_Pin SHIFT_DATA_IN_Pin
                           SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nRST_Pin|SHIFT_DATA_IN_Pin
 8001276:	193b      	adds	r3, r7, r4
 8001278:	22ee      	movs	r2, #238	@ 0xee
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	601a      	str	r2, [r3, #0]
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	193b      	adds	r3, r7, r4
 8001280:	2201      	movs	r2, #1
 8001282:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	193b      	adds	r3, r7, r4
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	193b      	adds	r3, r7, r4
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	193a      	adds	r2, r7, r4
 8001292:	23a0      	movs	r3, #160	@ 0xa0
 8001294:	05db      	lsls	r3, r3, #23
 8001296:	0011      	movs	r1, r2
 8001298:	0018      	movs	r0, r3
 800129a:	f000 fbf3 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_ENABLE_Pin DEBUG_LED_Pin CAPTOUCH_RESET_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin;
 800129e:	193b      	adds	r3, r7, r4
 80012a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001360 <MX_GPIO_Init+0x1a0>)
 80012a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	193b      	adds	r3, r7, r4
 80012a6:	2201      	movs	r2, #1
 80012a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	193b      	adds	r3, r7, r4
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	193b      	adds	r3, r7, r4
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	193b      	adds	r3, r7, r4
 80012b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001364 <MX_GPIO_Init+0x1a4>)
 80012ba:	0019      	movs	r1, r3
 80012bc:	0010      	movs	r0, r2
 80012be:	f000 fbe1 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 80012c2:	193b      	adds	r3, r7, r4
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	193b      	adds	r3, r7, r4
 80012ca:	2201      	movs	r2, #1
 80012cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	193b      	adds	r3, r7, r4
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 80012da:	193b      	adds	r3, r7, r4
 80012dc:	4a22      	ldr	r2, [pc, #136]	@ (8001368 <MX_GPIO_Init+0x1a8>)
 80012de:	0019      	movs	r1, r3
 80012e0:	0010      	movs	r0, r2
 80012e2:	f000 fbcf 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_SET_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = ALARM_SET_BUTTON_EXTI_Pin;
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	2280      	movs	r2, #128	@ 0x80
 80012ea:	0212      	lsls	r2, r2, #8
 80012ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ee:	193b      	adds	r3, r7, r4
 80012f0:	2288      	movs	r2, #136	@ 0x88
 80012f2:	0352      	lsls	r2, r2, #13
 80012f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	193b      	adds	r3, r7, r4
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALARM_SET_BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 80012fc:	193a      	adds	r2, r7, r4
 80012fe:	23a0      	movs	r3, #160	@ 0xa0
 8001300:	05db      	lsls	r3, r3, #23
 8001302:	0011      	movs	r1, r2
 8001304:	0018      	movs	r0, r3
 8001306:	f000 fbbd 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_EXTI_Pin MINUTE_SET_BUTTON_EXTI_Pin ALARM_EN_BUTTON_EXTI_Pin DISPLAY_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_EXTI_Pin|MINUTE_SET_BUTTON_EXTI_Pin|ALARM_EN_BUTTON_EXTI_Pin|DISPLAY_BUTTON_EXTI_Pin;
 800130a:	0021      	movs	r1, r4
 800130c:	187b      	adds	r3, r7, r1
 800130e:	220f      	movs	r2, #15
 8001310:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001312:	187b      	adds	r3, r7, r1
 8001314:	2288      	movs	r2, #136	@ 0x88
 8001316:	0352      	lsls	r2, r2, #13
 8001318:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	187b      	adds	r3, r7, r1
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001320:	000c      	movs	r4, r1
 8001322:	187b      	adds	r3, r7, r1
 8001324:	4a11      	ldr	r2, [pc, #68]	@ (800136c <MX_GPIO_Init+0x1ac>)
 8001326:	0019      	movs	r1, r3
 8001328:	0010      	movs	r0, r2
 800132a:	f000 fbab 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIME_SWITCH_EXTI_Pin CAPTOUCH_CHANGE_EXTI_Pin */
  GPIO_InitStruct.Pin = TIME_SWITCH_EXTI_Pin|CAPTOUCH_CHANGE_EXTI_Pin;
 800132e:	0021      	movs	r1, r4
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2284      	movs	r2, #132	@ 0x84
 8001334:	0092      	lsls	r2, r2, #2
 8001336:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001338:	187b      	adds	r3, r7, r1
 800133a:	2288      	movs	r2, #136	@ 0x88
 800133c:	0352      	lsls	r2, r2, #13
 800133e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	187b      	adds	r3, r7, r1
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	187b      	adds	r3, r7, r1
 8001348:	4a06      	ldr	r2, [pc, #24]	@ (8001364 <MX_GPIO_Init+0x1a4>)
 800134a:	0019      	movs	r1, r3
 800134c:	0010      	movs	r0, r2
 800134e:	f000 fb99 	bl	8001a84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b00b      	add	sp, #44	@ 0x2c
 8001358:	bd90      	pop	{r4, r7, pc}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	40021000 	.word	0x40021000
 8001360:	00001102 	.word	0x00001102
 8001364:	50000400 	.word	0x50000400
 8001368:	50000800 	.word	0x50000800
 800136c:	50000c00 	.word	0x50000c00

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	46c0      	nop			@ (mov r8, r8)
 800137a:	e7fd      	b.n	8001378 <Error_Handler+0x8>

0800137c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <HAL_MspInit+0x44>)
 8001384:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <HAL_MspInit+0x44>)
 8001388:	2101      	movs	r1, #1
 800138a:	430a      	orrs	r2, r1
 800138c:	641a      	str	r2, [r3, #64]	@ 0x40
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <HAL_MspInit+0x44>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	2201      	movs	r2, #1
 8001394:	4013      	ands	r3, r2
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <HAL_MspInit+0x44>)
 800139c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <HAL_MspInit+0x44>)
 80013a0:	2180      	movs	r1, #128	@ 0x80
 80013a2:	0549      	lsls	r1, r1, #21
 80013a4:	430a      	orrs	r2, r1
 80013a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013a8:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <HAL_MspInit+0x44>)
 80013aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	055b      	lsls	r3, r3, #21
 80013b0:	4013      	ands	r3, r2
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b6:	46c0      	nop			@ (mov r8, r8)
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b002      	add	sp, #8
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	40021000 	.word	0x40021000

080013c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b095      	sub	sp, #84	@ 0x54
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	233c      	movs	r3, #60	@ 0x3c
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	0018      	movs	r0, r3
 80013d2:	2314      	movs	r3, #20
 80013d4:	001a      	movs	r2, r3
 80013d6:	2100      	movs	r1, #0
 80013d8:	f004 f856 	bl	8005488 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013dc:	2414      	movs	r4, #20
 80013de:	193b      	adds	r3, r7, r4
 80013e0:	0018      	movs	r0, r3
 80013e2:	2328      	movs	r3, #40	@ 0x28
 80013e4:	001a      	movs	r2, r3
 80013e6:	2100      	movs	r1, #0
 80013e8:	f004 f84e 	bl	8005488 <memset>
  if(hi2c->Instance==I2C1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a22      	ldr	r2, [pc, #136]	@ (800147c <HAL_I2C_MspInit+0xb8>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d13d      	bne.n	8001472 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013f6:	193b      	adds	r3, r7, r4
 80013f8:	2220      	movs	r2, #32
 80013fa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013fc:	193b      	adds	r3, r7, r4
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001402:	193b      	adds	r3, r7, r4
 8001404:	0018      	movs	r0, r3
 8001406:	f001 fc0f 	bl	8002c28 <HAL_RCCEx_PeriphCLKConfig>
 800140a:	1e03      	subs	r3, r0, #0
 800140c:	d001      	beq.n	8001412 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800140e:	f7ff ffaf 	bl	8001370 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <HAL_I2C_MspInit+0xbc>)
 8001414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001416:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <HAL_I2C_MspInit+0xbc>)
 8001418:	2102      	movs	r1, #2
 800141a:	430a      	orrs	r2, r1
 800141c:	635a      	str	r2, [r3, #52]	@ 0x34
 800141e:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <HAL_I2C_MspInit+0xbc>)
 8001420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001422:	2202      	movs	r2, #2
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800142a:	213c      	movs	r1, #60	@ 0x3c
 800142c:	187b      	adds	r3, r7, r1
 800142e:	22c0      	movs	r2, #192	@ 0xc0
 8001430:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001432:	187b      	adds	r3, r7, r1
 8001434:	2212      	movs	r2, #18
 8001436:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	187b      	adds	r3, r7, r1
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	187b      	adds	r3, r7, r1
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001444:	187b      	adds	r3, r7, r1
 8001446:	2206      	movs	r2, #6
 8001448:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	187b      	adds	r3, r7, r1
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <HAL_I2C_MspInit+0xc0>)
 800144e:	0019      	movs	r1, r3
 8001450:	0010      	movs	r0, r2
 8001452:	f000 fb17 	bl	8001a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001456:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <HAL_I2C_MspInit+0xbc>)
 8001458:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800145a:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <HAL_I2C_MspInit+0xbc>)
 800145c:	2180      	movs	r1, #128	@ 0x80
 800145e:	0389      	lsls	r1, r1, #14
 8001460:	430a      	orrs	r2, r1
 8001462:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_I2C_MspInit+0xbc>)
 8001466:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	039b      	lsls	r3, r3, #14
 800146c:	4013      	ands	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	b015      	add	sp, #84	@ 0x54
 8001478:	bd90      	pop	{r4, r7, pc}
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	40005400 	.word	0x40005400
 8001480:	40021000 	.word	0x40021000
 8001484:	50000400 	.word	0x50000400

08001488 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b095      	sub	sp, #84	@ 0x54
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	233c      	movs	r3, #60	@ 0x3c
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	0018      	movs	r0, r3
 8001496:	2314      	movs	r3, #20
 8001498:	001a      	movs	r2, r3
 800149a:	2100      	movs	r1, #0
 800149c:	f003 fff4 	bl	8005488 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a0:	2414      	movs	r4, #20
 80014a2:	193b      	adds	r3, r7, r4
 80014a4:	0018      	movs	r0, r3
 80014a6:	2328      	movs	r3, #40	@ 0x28
 80014a8:	001a      	movs	r2, r3
 80014aa:	2100      	movs	r1, #0
 80014ac:	f003 ffec 	bl	8005488 <memset>
  if(hi2s->Instance==SPI1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a34      	ldr	r2, [pc, #208]	@ (8001588 <HAL_I2S_MspInit+0x100>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d161      	bne.n	800157e <HAL_I2S_MspInit+0xf6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	2280      	movs	r2, #128	@ 0x80
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c8:	193b      	adds	r3, r7, r4
 80014ca:	0018      	movs	r0, r3
 80014cc:	f001 fbac 	bl	8002c28 <HAL_RCCEx_PeriphCLKConfig>
 80014d0:	1e03      	subs	r3, r0, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80014d4:	f7ff ff4c 	bl	8001370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014d8:	4b2c      	ldr	r3, [pc, #176]	@ (800158c <HAL_I2S_MspInit+0x104>)
 80014da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014dc:	4b2b      	ldr	r3, [pc, #172]	@ (800158c <HAL_I2S_MspInit+0x104>)
 80014de:	2180      	movs	r1, #128	@ 0x80
 80014e0:	0149      	lsls	r1, r1, #5
 80014e2:	430a      	orrs	r2, r1
 80014e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80014e6:	4b29      	ldr	r3, [pc, #164]	@ (800158c <HAL_I2S_MspInit+0x104>)
 80014e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014ea:	2380      	movs	r3, #128	@ 0x80
 80014ec:	015b      	lsls	r3, r3, #5
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	4b25      	ldr	r3, [pc, #148]	@ (800158c <HAL_I2S_MspInit+0x104>)
 80014f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014f8:	4b24      	ldr	r3, [pc, #144]	@ (800158c <HAL_I2S_MspInit+0x104>)
 80014fa:	2101      	movs	r1, #1
 80014fc:	430a      	orrs	r2, r1
 80014fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001500:	4b22      	ldr	r3, [pc, #136]	@ (800158c <HAL_I2S_MspInit+0x104>)
 8001502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001504:	2201      	movs	r2, #1
 8001506:	4013      	ands	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150c:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <HAL_I2S_MspInit+0x104>)
 800150e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001510:	4b1e      	ldr	r3, [pc, #120]	@ (800158c <HAL_I2S_MspInit+0x104>)
 8001512:	2102      	movs	r1, #2
 8001514:	430a      	orrs	r2, r1
 8001516:	635a      	str	r2, [r3, #52]	@ 0x34
 8001518:	4b1c      	ldr	r3, [pc, #112]	@ (800158c <HAL_I2S_MspInit+0x104>)
 800151a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800151c:	2202      	movs	r2, #2
 800151e:	4013      	ands	r3, r2
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PA2     ------> I2S1_SD
    PB0     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001524:	243c      	movs	r4, #60	@ 0x3c
 8001526:	193b      	adds	r3, r7, r4
 8001528:	2206      	movs	r2, #6
 800152a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	193b      	adds	r3, r7, r4
 800152e:	2202      	movs	r2, #2
 8001530:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	193b      	adds	r3, r7, r4
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	193b      	adds	r3, r7, r4
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800153e:	193b      	adds	r3, r7, r4
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	193a      	adds	r2, r7, r4
 8001546:	23a0      	movs	r3, #160	@ 0xa0
 8001548:	05db      	lsls	r3, r3, #23
 800154a:	0011      	movs	r1, r2
 800154c:	0018      	movs	r0, r3
 800154e:	f000 fa99 	bl	8001a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001552:	0021      	movs	r1, r4
 8001554:	187b      	adds	r3, r7, r1
 8001556:	2201      	movs	r2, #1
 8001558:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	187b      	adds	r3, r7, r1
 800155c:	2202      	movs	r2, #2
 800155e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	187b      	adds	r3, r7, r1
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001572:	187b      	adds	r3, r7, r1
 8001574:	4a06      	ldr	r2, [pc, #24]	@ (8001590 <HAL_I2S_MspInit+0x108>)
 8001576:	0019      	movs	r1, r3
 8001578:	0010      	movs	r0, r2
 800157a:	f000 fa83 	bl	8001a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800157e:	46c0      	nop			@ (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	b015      	add	sp, #84	@ 0x54
 8001584:	bd90      	pop	{r4, r7, pc}
 8001586:	46c0      	nop			@ (mov r8, r8)
 8001588:	40013000 	.word	0x40013000
 800158c:	40021000 	.word	0x40021000
 8001590:	50000400 	.word	0x50000400

08001594 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b08f      	sub	sp, #60	@ 0x3c
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800159c:	2410      	movs	r4, #16
 800159e:	193b      	adds	r3, r7, r4
 80015a0:	0018      	movs	r0, r3
 80015a2:	2328      	movs	r3, #40	@ 0x28
 80015a4:	001a      	movs	r2, r3
 80015a6:	2100      	movs	r1, #0
 80015a8:	f003 ff6e 	bl	8005488 <memset>
  if(hrtc->Instance==RTC)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a15      	ldr	r2, [pc, #84]	@ (8001608 <HAL_RTC_MspInit+0x74>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d124      	bne.n	8001600 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80015b6:	193b      	adds	r3, r7, r4
 80015b8:	2280      	movs	r2, #128	@ 0x80
 80015ba:	0292      	lsls	r2, r2, #10
 80015bc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80015be:	193b      	adds	r3, r7, r4
 80015c0:	2280      	movs	r2, #128	@ 0x80
 80015c2:	0052      	lsls	r2, r2, #1
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c6:	193b      	adds	r3, r7, r4
 80015c8:	0018      	movs	r0, r3
 80015ca:	f001 fb2d 	bl	8002c28 <HAL_RCCEx_PeriphCLKConfig>
 80015ce:	1e03      	subs	r3, r0, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80015d2:	f7ff fecd 	bl	8001370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015d6:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <HAL_RTC_MspInit+0x78>)
 80015d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015da:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <HAL_RTC_MspInit+0x78>)
 80015dc:	2180      	movs	r1, #128	@ 0x80
 80015de:	0209      	lsls	r1, r1, #8
 80015e0:	430a      	orrs	r2, r1
 80015e2:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80015e4:	4b09      	ldr	r3, [pc, #36]	@ (800160c <HAL_RTC_MspInit+0x78>)
 80015e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <HAL_RTC_MspInit+0x78>)
 80015ea:	2180      	movs	r1, #128	@ 0x80
 80015ec:	00c9      	lsls	r1, r1, #3
 80015ee:	430a      	orrs	r2, r1
 80015f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_RTC_MspInit+0x78>)
 80015f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015f6:	2380      	movs	r3, #128	@ 0x80
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4013      	ands	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001600:	46c0      	nop			@ (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b00f      	add	sp, #60	@ 0x3c
 8001606:	bd90      	pop	{r4, r7, pc}
 8001608:	40002800 	.word	0x40002800
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b08b      	sub	sp, #44	@ 0x2c
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	2414      	movs	r4, #20
 800161a:	193b      	adds	r3, r7, r4
 800161c:	0018      	movs	r0, r3
 800161e:	2314      	movs	r3, #20
 8001620:	001a      	movs	r2, r3
 8001622:	2100      	movs	r1, #0
 8001624:	f003 ff30 	bl	8005488 <memset>
  if(hspi->Instance==SPI2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a26      	ldr	r2, [pc, #152]	@ (80016c8 <HAL_SPI_MspInit+0xb8>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d146      	bne.n	80016c0 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001632:	4b26      	ldr	r3, [pc, #152]	@ (80016cc <HAL_SPI_MspInit+0xbc>)
 8001634:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001636:	4b25      	ldr	r3, [pc, #148]	@ (80016cc <HAL_SPI_MspInit+0xbc>)
 8001638:	2180      	movs	r1, #128	@ 0x80
 800163a:	01c9      	lsls	r1, r1, #7
 800163c:	430a      	orrs	r2, r1
 800163e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001640:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <HAL_SPI_MspInit+0xbc>)
 8001642:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001644:	2380      	movs	r3, #128	@ 0x80
 8001646:	01db      	lsls	r3, r3, #7
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <HAL_SPI_MspInit+0xbc>)
 8001650:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001652:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <HAL_SPI_MspInit+0xbc>)
 8001654:	2101      	movs	r1, #1
 8001656:	430a      	orrs	r2, r1
 8001658:	635a      	str	r2, [r3, #52]	@ 0x34
 800165a:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <HAL_SPI_MspInit+0xbc>)
 800165c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800165e:	2201      	movs	r2, #1
 8001660:	4013      	ands	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001666:	193b      	adds	r3, r7, r4
 8001668:	2209      	movs	r2, #9
 800166a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	193b      	adds	r3, r7, r4
 800166e:	2202      	movs	r2, #2
 8001670:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	193b      	adds	r3, r7, r4
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	193b      	adds	r3, r7, r4
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800167e:	193b      	adds	r3, r7, r4
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	193a      	adds	r2, r7, r4
 8001686:	23a0      	movs	r3, #160	@ 0xa0
 8001688:	05db      	lsls	r3, r3, #23
 800168a:	0011      	movs	r1, r2
 800168c:	0018      	movs	r0, r3
 800168e:	f000 f9f9 	bl	8001a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001692:	0021      	movs	r1, r4
 8001694:	187b      	adds	r3, r7, r1
 8001696:	2210      	movs	r2, #16
 8001698:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	187b      	adds	r3, r7, r1
 800169c:	2202      	movs	r2, #2
 800169e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80016ac:	187b      	adds	r3, r7, r1
 80016ae:	2201      	movs	r2, #1
 80016b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	187a      	adds	r2, r7, r1
 80016b4:	23a0      	movs	r3, #160	@ 0xa0
 80016b6:	05db      	lsls	r3, r3, #23
 80016b8:	0011      	movs	r1, r2
 80016ba:	0018      	movs	r0, r3
 80016bc:	f000 f9e2 	bl	8001a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80016c0:	46c0      	nop			@ (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b00b      	add	sp, #44	@ 0x2c
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	40003800 	.word	0x40003800
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	05db      	lsls	r3, r3, #23
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d10b      	bne.n	80016fc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016e4:	4b07      	ldr	r3, [pc, #28]	@ (8001704 <HAL_TIM_PWM_MspInit+0x34>)
 80016e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_TIM_PWM_MspInit+0x34>)
 80016ea:	2101      	movs	r1, #1
 80016ec:	430a      	orrs	r2, r1
 80016ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <HAL_TIM_PWM_MspInit+0x34>)
 80016f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f4:	2201      	movs	r2, #1
 80016f6:	4013      	ands	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016fc:	46c0      	nop			@ (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	b004      	add	sp, #16
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b089      	sub	sp, #36	@ 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	240c      	movs	r4, #12
 8001712:	193b      	adds	r3, r7, r4
 8001714:	0018      	movs	r0, r3
 8001716:	2314      	movs	r3, #20
 8001718:	001a      	movs	r2, r3
 800171a:	2100      	movs	r1, #0
 800171c:	f003 feb4 	bl	8005488 <memset>
  if(htim->Instance==TIM2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	2380      	movs	r3, #128	@ 0x80
 8001726:	05db      	lsls	r3, r3, #23
 8001728:	429a      	cmp	r2, r3
 800172a:	d121      	bne.n	8001770 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <HAL_TIM_MspPostInit+0x70>)
 800172e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001730:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <HAL_TIM_MspPostInit+0x70>)
 8001732:	2104      	movs	r1, #4
 8001734:	430a      	orrs	r2, r1
 8001736:	635a      	str	r2, [r3, #52]	@ 0x34
 8001738:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <HAL_TIM_MspPostInit+0x70>)
 800173a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800173c:	2204      	movs	r2, #4
 800173e:	4013      	ands	r3, r2
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_SHIFT_nOE_Pin;
 8001744:	0021      	movs	r1, r4
 8001746:	187b      	adds	r3, r7, r1
 8001748:	2240      	movs	r2, #64	@ 0x40
 800174a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	187b      	adds	r3, r7, r1
 800174e:	2202      	movs	r2, #2
 8001750:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	187b      	adds	r3, r7, r1
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	187b      	adds	r3, r7, r1
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800175e:	187b      	adds	r3, r7, r1
 8001760:	2202      	movs	r2, #2
 8001762:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_SHIFT_nOE_GPIO_Port, &GPIO_InitStruct);
 8001764:	187b      	adds	r3, r7, r1
 8001766:	4a05      	ldr	r2, [pc, #20]	@ (800177c <HAL_TIM_MspPostInit+0x74>)
 8001768:	0019      	movs	r1, r3
 800176a:	0010      	movs	r0, r2
 800176c:	f000 f98a 	bl	8001a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001770:	46c0      	nop			@ (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	b009      	add	sp, #36	@ 0x24
 8001776:	bd90      	pop	{r4, r7, pc}
 8001778:	40021000 	.word	0x40021000
 800177c:	50000800 	.word	0x50000800

08001780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001784:	46c0      	nop			@ (mov r8, r8)
 8001786:	e7fd      	b.n	8001784 <NMI_Handler+0x4>

08001788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178c:	46c0      	nop			@ (mov r8, r8)
 800178e:	e7fd      	b.n	800178c <HardFault_Handler+0x4>

08001790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001794:	46c0      	nop			@ (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179e:	46c0      	nop			@ (mov r8, r8)
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a8:	f000 f89c 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ac:	46c0      	nop			@ (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017bc:	480d      	ldr	r0, [pc, #52]	@ (80017f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017c0:	f7ff fff7 	bl	80017b2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c4:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017c6:	490d      	ldr	r1, [pc, #52]	@ (80017fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80017c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <LoopForever+0xe>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001808 <LoopForever+0x16>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017ea:	f003 fe55 	bl	8005498 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80017ee:	f7ff fa2d 	bl	8000c4c <main>

080017f2 <LoopForever>:

LoopForever:
  b LoopForever
 80017f2:	e7fe      	b.n	80017f2 <LoopForever>
  ldr   r0, =_estack
 80017f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001800:	080055c0 	.word	0x080055c0
  ldr r2, =_sbss
 8001804:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001808:	200001c0 	.word	0x200001c0

0800180c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC1_IRQHandler>
	...

08001810 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800181c:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <HAL_Init+0x3c>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <HAL_Init+0x3c>)
 8001822:	2180      	movs	r1, #128	@ 0x80
 8001824:	0049      	lsls	r1, r1, #1
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800182a:	2003      	movs	r0, #3
 800182c:	f000 f810 	bl	8001850 <HAL_InitTick>
 8001830:	1e03      	subs	r3, r0, #0
 8001832:	d003      	beq.n	800183c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001834:	1dfb      	adds	r3, r7, #7
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
 800183a:	e001      	b.n	8001840 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800183c:	f7ff fd9e 	bl	800137c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001840:	1dfb      	adds	r3, r7, #7
 8001842:	781b      	ldrb	r3, [r3, #0]
}
 8001844:	0018      	movs	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	b002      	add	sp, #8
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40022000 	.word	0x40022000

08001850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001858:	230f      	movs	r3, #15
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001860:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <HAL_InitTick+0x88>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d02b      	beq.n	80018c0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001868:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <HAL_InitTick+0x8c>)
 800186a:	681c      	ldr	r4, [r3, #0]
 800186c:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <HAL_InitTick+0x88>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	0019      	movs	r1, r3
 8001872:	23fa      	movs	r3, #250	@ 0xfa
 8001874:	0098      	lsls	r0, r3, #2
 8001876:	f7fe fc45 	bl	8000104 <__udivsi3>
 800187a:	0003      	movs	r3, r0
 800187c:	0019      	movs	r1, r3
 800187e:	0020      	movs	r0, r4
 8001880:	f7fe fc40 	bl	8000104 <__udivsi3>
 8001884:	0003      	movs	r3, r0
 8001886:	0018      	movs	r0, r3
 8001888:	f000 f8ef 	bl	8001a6a <HAL_SYSTICK_Config>
 800188c:	1e03      	subs	r3, r0, #0
 800188e:	d112      	bne.n	80018b6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b03      	cmp	r3, #3
 8001894:	d80a      	bhi.n	80018ac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	2301      	movs	r3, #1
 800189a:	425b      	negs	r3, r3
 800189c:	2200      	movs	r2, #0
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 f8ce 	bl	8001a40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a4:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <HAL_InitTick+0x90>)
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	e00d      	b.n	80018c8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80018ac:	230f      	movs	r3, #15
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	e008      	b.n	80018c8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018b6:	230f      	movs	r3, #15
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	e003      	b.n	80018c8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c0:	230f      	movs	r3, #15
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80018c8:	230f      	movs	r3, #15
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	781b      	ldrb	r3, [r3, #0]
}
 80018ce:	0018      	movs	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b005      	add	sp, #20
 80018d4:	bd90      	pop	{r4, r7, pc}
 80018d6:	46c0      	nop			@ (mov r8, r8)
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <HAL_IncTick+0x1c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	001a      	movs	r2, r3
 80018ee:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <HAL_IncTick+0x20>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	18d2      	adds	r2, r2, r3
 80018f4:	4b03      	ldr	r3, [pc, #12]	@ (8001904 <HAL_IncTick+0x20>)
 80018f6:	601a      	str	r2, [r3, #0]
}
 80018f8:	46c0      	nop			@ (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	20000008 	.word	0x20000008
 8001904:	200001bc 	.word	0x200001bc

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b02      	ldr	r3, [pc, #8]	@ (8001918 <HAL_GetTick+0x10>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	0018      	movs	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	200001bc 	.word	0x200001bc

0800191c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	0002      	movs	r2, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800192a:	1dfb      	adds	r3, r7, #7
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001930:	d828      	bhi.n	8001984 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001932:	4a2f      	ldr	r2, [pc, #188]	@ (80019f0 <__NVIC_SetPriority+0xd4>)
 8001934:	1dfb      	adds	r3, r7, #7
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b25b      	sxtb	r3, r3
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	33c0      	adds	r3, #192	@ 0xc0
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	589b      	ldr	r3, [r3, r2]
 8001942:	1dfa      	adds	r2, r7, #7
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	0011      	movs	r1, r2
 8001948:	2203      	movs	r2, #3
 800194a:	400a      	ands	r2, r1
 800194c:	00d2      	lsls	r2, r2, #3
 800194e:	21ff      	movs	r1, #255	@ 0xff
 8001950:	4091      	lsls	r1, r2
 8001952:	000a      	movs	r2, r1
 8001954:	43d2      	mvns	r2, r2
 8001956:	401a      	ands	r2, r3
 8001958:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	22ff      	movs	r2, #255	@ 0xff
 8001960:	401a      	ands	r2, r3
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	0018      	movs	r0, r3
 8001968:	2303      	movs	r3, #3
 800196a:	4003      	ands	r3, r0
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001970:	481f      	ldr	r0, [pc, #124]	@ (80019f0 <__NVIC_SetPriority+0xd4>)
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b25b      	sxtb	r3, r3
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	430a      	orrs	r2, r1
 800197c:	33c0      	adds	r3, #192	@ 0xc0
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001982:	e031      	b.n	80019e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001984:	4a1b      	ldr	r2, [pc, #108]	@ (80019f4 <__NVIC_SetPriority+0xd8>)
 8001986:	1dfb      	adds	r3, r7, #7
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	0019      	movs	r1, r3
 800198c:	230f      	movs	r3, #15
 800198e:	400b      	ands	r3, r1
 8001990:	3b08      	subs	r3, #8
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	3306      	adds	r3, #6
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	18d3      	adds	r3, r2, r3
 800199a:	3304      	adds	r3, #4
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	1dfa      	adds	r2, r7, #7
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	0011      	movs	r1, r2
 80019a4:	2203      	movs	r2, #3
 80019a6:	400a      	ands	r2, r1
 80019a8:	00d2      	lsls	r2, r2, #3
 80019aa:	21ff      	movs	r1, #255	@ 0xff
 80019ac:	4091      	lsls	r1, r2
 80019ae:	000a      	movs	r2, r1
 80019b0:	43d2      	mvns	r2, r2
 80019b2:	401a      	ands	r2, r3
 80019b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	019b      	lsls	r3, r3, #6
 80019ba:	22ff      	movs	r2, #255	@ 0xff
 80019bc:	401a      	ands	r2, r3
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	0018      	movs	r0, r3
 80019c4:	2303      	movs	r3, #3
 80019c6:	4003      	ands	r3, r0
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019cc:	4809      	ldr	r0, [pc, #36]	@ (80019f4 <__NVIC_SetPriority+0xd8>)
 80019ce:	1dfb      	adds	r3, r7, #7
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	001c      	movs	r4, r3
 80019d4:	230f      	movs	r3, #15
 80019d6:	4023      	ands	r3, r4
 80019d8:	3b08      	subs	r3, #8
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	430a      	orrs	r2, r1
 80019de:	3306      	adds	r3, #6
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	18c3      	adds	r3, r0, r3
 80019e4:	3304      	adds	r3, #4
 80019e6:	601a      	str	r2, [r3, #0]
}
 80019e8:	46c0      	nop			@ (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b003      	add	sp, #12
 80019ee:	bd90      	pop	{r4, r7, pc}
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	1e5a      	subs	r2, r3, #1
 8001a04:	2380      	movs	r3, #128	@ 0x80
 8001a06:	045b      	lsls	r3, r3, #17
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d301      	bcc.n	8001a10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e010      	b.n	8001a32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a10:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <SysTick_Config+0x44>)
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	3a01      	subs	r2, #1
 8001a16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a18:	2301      	movs	r3, #1
 8001a1a:	425b      	negs	r3, r3
 8001a1c:	2103      	movs	r1, #3
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f7ff ff7c 	bl	800191c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <SysTick_Config+0x44>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2a:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <SysTick_Config+0x44>)
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b002      	add	sp, #8
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	e000e010 	.word	0xe000e010

08001a40 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	1c02      	adds	r2, r0, #0
 8001a50:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	0011      	movs	r1, r2
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff ff5d 	bl	800191c <__NVIC_SetPriority>
}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b004      	add	sp, #16
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff ffbf 	bl	80019f8 <SysTick_Config>
 8001a7a:	0003      	movs	r3, r0
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b002      	add	sp, #8
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a92:	e147      	b.n	8001d24 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2101      	movs	r1, #1
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4091      	lsls	r1, r2
 8001a9e:	000a      	movs	r2, r1
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d100      	bne.n	8001aac <HAL_GPIO_Init+0x28>
 8001aaa:	e138      	b.n	8001d1e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d005      	beq.n	8001ac4 <HAL_GPIO_Init+0x40>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2203      	movs	r2, #3
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d130      	bne.n	8001b26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	0013      	movs	r3, r2
 8001ad4:	43da      	mvns	r2, r3
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	0013      	movs	r3, r2
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001afa:	2201      	movs	r2, #1
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
 8001b00:	0013      	movs	r3, r2
 8001b02:	43da      	mvns	r2, r3
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	2201      	movs	r2, #1
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
 8001b18:	0013      	movs	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d017      	beq.n	8001b62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	0013      	movs	r3, r2
 8001b42:	43da      	mvns	r2, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	409a      	lsls	r2, r3
 8001b54:	0013      	movs	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2203      	movs	r2, #3
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d123      	bne.n	8001bb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3208      	adds	r2, #8
 8001b76:	0092      	lsls	r2, r2, #2
 8001b78:	58d3      	ldr	r3, [r2, r3]
 8001b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2207      	movs	r2, #7
 8001b80:	4013      	ands	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	409a      	lsls	r2, r3
 8001b88:	0013      	movs	r3, r2
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2107      	movs	r1, #7
 8001b9a:	400b      	ands	r3, r1
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	0013      	movs	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	08da      	lsrs	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3208      	adds	r2, #8
 8001bb0:	0092      	lsls	r2, r2, #2
 8001bb2:	6939      	ldr	r1, [r7, #16]
 8001bb4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	0013      	movs	r3, r2
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	0013      	movs	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	23c0      	movs	r3, #192	@ 0xc0
 8001bf0:	029b      	lsls	r3, r3, #10
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d100      	bne.n	8001bf8 <HAL_GPIO_Init+0x174>
 8001bf6:	e092      	b.n	8001d1e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001bf8:	4a50      	ldr	r2, [pc, #320]	@ (8001d3c <HAL_GPIO_Init+0x2b8>)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	3318      	adds	r3, #24
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	589b      	ldr	r3, [r3, r2]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2203      	movs	r2, #3
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	220f      	movs	r2, #15
 8001c10:	409a      	lsls	r2, r3
 8001c12:	0013      	movs	r3, r2
 8001c14:	43da      	mvns	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	23a0      	movs	r3, #160	@ 0xa0
 8001c20:	05db      	lsls	r3, r3, #23
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d013      	beq.n	8001c4e <HAL_GPIO_Init+0x1ca>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a45      	ldr	r2, [pc, #276]	@ (8001d40 <HAL_GPIO_Init+0x2bc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00d      	beq.n	8001c4a <HAL_GPIO_Init+0x1c6>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a44      	ldr	r2, [pc, #272]	@ (8001d44 <HAL_GPIO_Init+0x2c0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <HAL_GPIO_Init+0x1c2>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a43      	ldr	r2, [pc, #268]	@ (8001d48 <HAL_GPIO_Init+0x2c4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d101      	bne.n	8001c42 <HAL_GPIO_Init+0x1be>
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x1cc>
 8001c42:	2305      	movs	r3, #5
 8001c44:	e004      	b.n	8001c50 <HAL_GPIO_Init+0x1cc>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_Init+0x1cc>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_GPIO_Init+0x1cc>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	2103      	movs	r1, #3
 8001c54:	400a      	ands	r2, r1
 8001c56:	00d2      	lsls	r2, r2, #3
 8001c58:	4093      	lsls	r3, r2
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001c60:	4936      	ldr	r1, [pc, #216]	@ (8001d3c <HAL_GPIO_Init+0x2b8>)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	3318      	adds	r3, #24
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c6e:	4b33      	ldr	r3, [pc, #204]	@ (8001d3c <HAL_GPIO_Init+0x2b8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43da      	mvns	r2, r3
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	2380      	movs	r3, #128	@ 0x80
 8001c84:	035b      	lsls	r3, r3, #13
 8001c86:	4013      	ands	r3, r2
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c92:	4b2a      	ldr	r3, [pc, #168]	@ (8001d3c <HAL_GPIO_Init+0x2b8>)
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c98:	4b28      	ldr	r3, [pc, #160]	@ (8001d3c <HAL_GPIO_Init+0x2b8>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43da      	mvns	r2, r3
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	2380      	movs	r3, #128	@ 0x80
 8001cae:	039b      	lsls	r3, r3, #14
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <HAL_GPIO_Init+0x2b8>)
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d3c <HAL_GPIO_Init+0x2b8>)
 8001cc4:	2384      	movs	r3, #132	@ 0x84
 8001cc6:	58d3      	ldr	r3, [r2, r3]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	43da      	mvns	r2, r3
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	2380      	movs	r3, #128	@ 0x80
 8001cda:	029b      	lsls	r3, r3, #10
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ce8:	4914      	ldr	r1, [pc, #80]	@ (8001d3c <HAL_GPIO_Init+0x2b8>)
 8001cea:	2284      	movs	r2, #132	@ 0x84
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001cf0:	4a12      	ldr	r2, [pc, #72]	@ (8001d3c <HAL_GPIO_Init+0x2b8>)
 8001cf2:	2380      	movs	r3, #128	@ 0x80
 8001cf4:	58d3      	ldr	r3, [r2, r3]
 8001cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	2380      	movs	r3, #128	@ 0x80
 8001d08:	025b      	lsls	r3, r3, #9
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d16:	4909      	ldr	r1, [pc, #36]	@ (8001d3c <HAL_GPIO_Init+0x2b8>)
 8001d18:	2280      	movs	r2, #128	@ 0x80
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	3301      	adds	r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	40da      	lsrs	r2, r3
 8001d2c:	1e13      	subs	r3, r2, #0
 8001d2e:	d000      	beq.n	8001d32 <HAL_GPIO_Init+0x2ae>
 8001d30:	e6b0      	b.n	8001a94 <HAL_GPIO_Init+0x10>
  }
}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	46c0      	nop			@ (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b006      	add	sp, #24
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021800 	.word	0x40021800
 8001d40:	50000400 	.word	0x50000400
 8001d44:	50000800 	.word	0x50000800
 8001d48:	50000c00 	.word	0x50000c00

08001d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	0008      	movs	r0, r1
 8001d56:	0011      	movs	r1, r2
 8001d58:	1cbb      	adds	r3, r7, #2
 8001d5a:	1c02      	adds	r2, r0, #0
 8001d5c:	801a      	strh	r2, [r3, #0]
 8001d5e:	1c7b      	adds	r3, r7, #1
 8001d60:	1c0a      	adds	r2, r1, #0
 8001d62:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d64:	1c7b      	adds	r3, r7, #1
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d6c:	1cbb      	adds	r3, r7, #2
 8001d6e:	881a      	ldrh	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d74:	e003      	b.n	8001d7e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d76:	1cbb      	adds	r3, r7, #2
 8001d78:	881a      	ldrh	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d7e:	46c0      	nop			@ (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b002      	add	sp, #8
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e08f      	b.n	8001eba <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2241      	movs	r2, #65	@ 0x41
 8001d9e:	5c9b      	ldrb	r3, [r3, r2]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d107      	bne.n	8001db6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2240      	movs	r2, #64	@ 0x40
 8001daa:	2100      	movs	r1, #0
 8001dac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7ff fb07 	bl	80013c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2241      	movs	r2, #65	@ 0x41
 8001dba:	2124      	movs	r1, #36	@ 0x24
 8001dbc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	438a      	bics	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	493b      	ldr	r1, [pc, #236]	@ (8001ec4 <HAL_I2C_Init+0x13c>)
 8001dd8:	400a      	ands	r2, r1
 8001dda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4938      	ldr	r1, [pc, #224]	@ (8001ec8 <HAL_I2C_Init+0x140>)
 8001de8:	400a      	ands	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d108      	bne.n	8001e06 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2180      	movs	r1, #128	@ 0x80
 8001dfe:	0209      	lsls	r1, r1, #8
 8001e00:	430a      	orrs	r2, r1
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	e007      	b.n	8001e16 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2184      	movs	r1, #132	@ 0x84
 8001e10:	0209      	lsls	r1, r1, #8
 8001e12:	430a      	orrs	r2, r1
 8001e14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d109      	bne.n	8001e32 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2180      	movs	r1, #128	@ 0x80
 8001e2a:	0109      	lsls	r1, r1, #4
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	e007      	b.n	8001e42 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4923      	ldr	r1, [pc, #140]	@ (8001ecc <HAL_I2C_Init+0x144>)
 8001e3e:	400a      	ands	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4920      	ldr	r1, [pc, #128]	@ (8001ed0 <HAL_I2C_Init+0x148>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	491a      	ldr	r1, [pc, #104]	@ (8001ec8 <HAL_I2C_Init+0x140>)
 8001e5e:	400a      	ands	r2, r1
 8001e60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691a      	ldr	r2, [r3, #16]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69d9      	ldr	r1, [r3, #28]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1a      	ldr	r2, [r3, #32]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2101      	movs	r1, #1
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2241      	movs	r2, #65	@ 0x41
 8001ea6:	2120      	movs	r1, #32
 8001ea8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2242      	movs	r2, #66	@ 0x42
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b002      	add	sp, #8
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	f0ffffff 	.word	0xf0ffffff
 8001ec8:	ffff7fff 	.word	0xffff7fff
 8001ecc:	fffff7ff 	.word	0xfffff7ff
 8001ed0:	02008000 	.word	0x02008000

08001ed4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2241      	movs	r2, #65	@ 0x41
 8001ee2:	5c9b      	ldrb	r3, [r3, r2]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	d138      	bne.n	8001f5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2240      	movs	r2, #64	@ 0x40
 8001eee:	5c9b      	ldrb	r3, [r3, r2]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e032      	b.n	8001f5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2240      	movs	r2, #64	@ 0x40
 8001efc:	2101      	movs	r1, #1
 8001efe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2241      	movs	r2, #65	@ 0x41
 8001f04:	2124      	movs	r1, #36	@ 0x24
 8001f06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2101      	movs	r1, #1
 8001f14:	438a      	bics	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4911      	ldr	r1, [pc, #68]	@ (8001f68 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f24:	400a      	ands	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6819      	ldr	r1, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2101      	movs	r1, #1
 8001f44:	430a      	orrs	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2241      	movs	r2, #65	@ 0x41
 8001f4c:	2120      	movs	r1, #32
 8001f4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2240      	movs	r2, #64	@ 0x40
 8001f54:	2100      	movs	r1, #0
 8001f56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e000      	b.n	8001f5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f5c:	2302      	movs	r3, #2
  }
}
 8001f5e:	0018      	movs	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b002      	add	sp, #8
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	ffffefff 	.word	0xffffefff

08001f6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2241      	movs	r2, #65	@ 0x41
 8001f7a:	5c9b      	ldrb	r3, [r3, r2]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d139      	bne.n	8001ff6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2240      	movs	r2, #64	@ 0x40
 8001f86:	5c9b      	ldrb	r3, [r3, r2]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e033      	b.n	8001ff8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2240      	movs	r2, #64	@ 0x40
 8001f94:	2101      	movs	r1, #1
 8001f96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2241      	movs	r2, #65	@ 0x41
 8001f9c:	2124      	movs	r1, #36	@ 0x24
 8001f9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2101      	movs	r1, #1
 8001fac:	438a      	bics	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a11      	ldr	r2, [pc, #68]	@ (8002000 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2101      	movs	r1, #1
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2241      	movs	r2, #65	@ 0x41
 8001fe6:	2120      	movs	r1, #32
 8001fe8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2240      	movs	r2, #64	@ 0x40
 8001fee:	2100      	movs	r1, #0
 8001ff0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ff6:	2302      	movs	r3, #2
  }
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b004      	add	sp, #16
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	fffff0ff 	.word	0xfffff0ff

08002004 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e0e5      	b.n	80021e2 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2235      	movs	r2, #53	@ 0x35
 800201a:	5c9b      	ldrb	r3, [r3, r2]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d107      	bne.n	8002032 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2234      	movs	r2, #52	@ 0x34
 8002026:	2100      	movs	r1, #0
 8002028:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	0018      	movs	r0, r3
 800202e:	f7ff fa2b 	bl	8001488 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2235      	movs	r2, #53	@ 0x35
 8002036:	2102      	movs	r1, #2
 8002038:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	69da      	ldr	r2, [r3, #28]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4969      	ldr	r1, [pc, #420]	@ (80021ec <HAL_I2S_Init+0x1e8>)
 8002046:	400a      	ands	r2, r1
 8002048:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2202      	movs	r2, #2
 8002050:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d100      	bne.n	800205c <HAL_I2S_Init+0x58>
 800205a:	e076      	b.n	800214a <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002064:	2310      	movs	r3, #16
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	e001      	b.n	800206e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800206a:	2320      	movs	r3, #32
 800206c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b20      	cmp	r3, #32
 8002074:	d802      	bhi.n	800207c <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 800207c:	2380      	movs	r3, #128	@ 0x80
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	0018      	movs	r0, r3
 8002082:	f000 ff4b 	bl	8002f1c <HAL_RCCEx_GetPeriphCLKFreq>
 8002086:	0003      	movs	r3, r0
 8002088:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	2380      	movs	r3, #128	@ 0x80
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	429a      	cmp	r2, r3
 8002094:	d131      	bne.n	80020fa <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d016      	beq.n	80020cc <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	0019      	movs	r1, r3
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f7fe f82d 	bl	8000104 <__udivsi3>
 80020aa:	0003      	movs	r3, r0
 80020ac:	001a      	movs	r2, r3
 80020ae:	0013      	movs	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	189b      	adds	r3, r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	001a      	movs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	0019      	movs	r1, r3
 80020be:	0010      	movs	r0, r2
 80020c0:	f7fe f820 	bl	8000104 <__udivsi3>
 80020c4:	0003      	movs	r3, r0
 80020c6:	3305      	adds	r3, #5
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	e02a      	b.n	8002122 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	0019      	movs	r1, r3
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f7fe f816 	bl	8000104 <__udivsi3>
 80020d8:	0003      	movs	r3, r0
 80020da:	001a      	movs	r2, r3
 80020dc:	0013      	movs	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	189b      	adds	r3, r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	001a      	movs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	0019      	movs	r1, r3
 80020ec:	0010      	movs	r0, r2
 80020ee:	f7fe f809 	bl	8000104 <__udivsi3>
 80020f2:	0003      	movs	r3, r0
 80020f4:	3305      	adds	r3, #5
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	e013      	b.n	8002122 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80020fa:	6979      	ldr	r1, [r7, #20]
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f7fe f801 	bl	8000104 <__udivsi3>
 8002102:	0003      	movs	r3, r0
 8002104:	001a      	movs	r2, r3
 8002106:	0013      	movs	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	189b      	adds	r3, r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	001a      	movs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	0019      	movs	r1, r3
 8002116:	0010      	movs	r0, r2
 8002118:	f7fd fff4 	bl	8000104 <__udivsi3>
 800211c:	0003      	movs	r3, r0
 800211e:	3305      	adds	r3, #5
 8002120:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	210a      	movs	r1, #10
 8002126:	0018      	movs	r0, r3
 8002128:	f7fd ffec 	bl	8000104 <__udivsi3>
 800212c:	0003      	movs	r3, r0
 800212e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2201      	movs	r2, #1
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	085b      	lsrs	r3, r3, #1
 8002140:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	021b      	lsls	r3, r3, #8
 8002146:	61bb      	str	r3, [r7, #24]
 8002148:	e003      	b.n	8002152 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800214a:	2302      	movs	r3, #2
 800214c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d902      	bls.n	800215e <HAL_I2S_Init+0x15a>
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	2bff      	cmp	r3, #255	@ 0xff
 800215c:	d907      	bls.n	800216e <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002162:	2210      	movs	r2, #16
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e039      	b.n	80021e2 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	431a      	orrs	r2, r3
 8002176:	0011      	movs	r1, r2
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	430a      	orrs	r2, r1
 8002180:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	4a18      	ldr	r2, [pc, #96]	@ (80021ec <HAL_I2S_Init+0x1e8>)
 800218a:	401a      	ands	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4319      	orrs	r1, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	4319      	orrs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2180      	movs	r1, #128	@ 0x80
 80021aa:	0109      	lsls	r1, r1, #4
 80021ac:	430a      	orrs	r2, r1
 80021ae:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b30      	cmp	r3, #48	@ 0x30
 80021b6:	d003      	beq.n	80021c0 <HAL_I2S_Init+0x1bc>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2bb0      	cmp	r3, #176	@ 0xb0
 80021be:	d108      	bne.n	80021d2 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69da      	ldr	r2, [r3, #28]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2180      	movs	r1, #128	@ 0x80
 80021cc:	0149      	lsls	r1, r1, #5
 80021ce:	430a      	orrs	r2, r1
 80021d0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2235      	movs	r2, #53	@ 0x35
 80021dc:	2101      	movs	r1, #1
 80021de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b008      	add	sp, #32
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			@ (mov r8, r8)
 80021ec:	fffff040 	.word	0xfffff040

080021f0 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021f4:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <HAL_PWR_EnableBkUpAccess+0x18>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b03      	ldr	r3, [pc, #12]	@ (8002208 <HAL_PWR_EnableBkUpAccess+0x18>)
 80021fa:	2180      	movs	r1, #128	@ 0x80
 80021fc:	0049      	lsls	r1, r1, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]
}
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40007000 	.word	0x40007000

0800220c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002214:	4b19      	ldr	r3, [pc, #100]	@ (800227c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a19      	ldr	r2, [pc, #100]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800221a:	4013      	ands	r3, r2
 800221c:	0019      	movs	r1, r3
 800221e:	4b17      	ldr	r3, [pc, #92]	@ (800227c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	2380      	movs	r3, #128	@ 0x80
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	429a      	cmp	r2, r3
 800222e:	d11f      	bne.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	0013      	movs	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	189b      	adds	r3, r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4912      	ldr	r1, [pc, #72]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800223e:	0018      	movs	r0, r3
 8002240:	f7fd ff60 	bl	8000104 <__udivsi3>
 8002244:	0003      	movs	r3, r0
 8002246:	3301      	adds	r3, #1
 8002248:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800224a:	e008      	b.n	800225e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	3b01      	subs	r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	e001      	b.n	800225e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e009      	b.n	8002272 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800225e:	4b07      	ldr	r3, [pc, #28]	@ (800227c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	2380      	movs	r3, #128	@ 0x80
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	401a      	ands	r2, r3
 8002268:	2380      	movs	r3, #128	@ 0x80
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	429a      	cmp	r2, r3
 800226e:	d0ed      	beq.n	800224c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	0018      	movs	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	b004      	add	sp, #16
 8002278:	bd80      	pop	{r7, pc}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	40007000 	.word	0x40007000
 8002280:	fffff9ff 	.word	0xfffff9ff
 8002284:	20000000 	.word	0x20000000
 8002288:	000f4240 	.word	0x000f4240

0800228c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002290:	4b03      	ldr	r3, [pc, #12]	@ (80022a0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	23e0      	movs	r3, #224	@ 0xe0
 8002296:	01db      	lsls	r3, r3, #7
 8002298:	4013      	ands	r3, r2
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000

080022a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e2fe      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2201      	movs	r2, #1
 80022bc:	4013      	ands	r3, r2
 80022be:	d100      	bne.n	80022c2 <HAL_RCC_OscConfig+0x1e>
 80022c0:	e07c      	b.n	80023bc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022c2:	4bc3      	ldr	r3, [pc, #780]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2238      	movs	r2, #56	@ 0x38
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022cc:	4bc0      	ldr	r3, [pc, #768]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2203      	movs	r2, #3
 80022d2:	4013      	ands	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2b10      	cmp	r3, #16
 80022da:	d102      	bne.n	80022e2 <HAL_RCC_OscConfig+0x3e>
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d10b      	bne.n	8002300 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	4bb9      	ldr	r3, [pc, #740]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2380      	movs	r3, #128	@ 0x80
 80022ee:	029b      	lsls	r3, r3, #10
 80022f0:	4013      	ands	r3, r2
 80022f2:	d062      	beq.n	80023ba <HAL_RCC_OscConfig+0x116>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d15e      	bne.n	80023ba <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e2d9      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	2380      	movs	r3, #128	@ 0x80
 8002306:	025b      	lsls	r3, r3, #9
 8002308:	429a      	cmp	r2, r3
 800230a:	d107      	bne.n	800231c <HAL_RCC_OscConfig+0x78>
 800230c:	4bb0      	ldr	r3, [pc, #704]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4baf      	ldr	r3, [pc, #700]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002312:	2180      	movs	r1, #128	@ 0x80
 8002314:	0249      	lsls	r1, r1, #9
 8002316:	430a      	orrs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	e020      	b.n	800235e <HAL_RCC_OscConfig+0xba>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	23a0      	movs	r3, #160	@ 0xa0
 8002322:	02db      	lsls	r3, r3, #11
 8002324:	429a      	cmp	r2, r3
 8002326:	d10e      	bne.n	8002346 <HAL_RCC_OscConfig+0xa2>
 8002328:	4ba9      	ldr	r3, [pc, #676]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4ba8      	ldr	r3, [pc, #672]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 800232e:	2180      	movs	r1, #128	@ 0x80
 8002330:	02c9      	lsls	r1, r1, #11
 8002332:	430a      	orrs	r2, r1
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	4ba6      	ldr	r3, [pc, #664]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4ba5      	ldr	r3, [pc, #660]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 800233c:	2180      	movs	r1, #128	@ 0x80
 800233e:	0249      	lsls	r1, r1, #9
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e00b      	b.n	800235e <HAL_RCC_OscConfig+0xba>
 8002346:	4ba2      	ldr	r3, [pc, #648]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	4ba1      	ldr	r3, [pc, #644]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 800234c:	49a1      	ldr	r1, [pc, #644]	@ (80025d4 <HAL_RCC_OscConfig+0x330>)
 800234e:	400a      	ands	r2, r1
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	4b9f      	ldr	r3, [pc, #636]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4b9e      	ldr	r3, [pc, #632]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002358:	499f      	ldr	r1, [pc, #636]	@ (80025d8 <HAL_RCC_OscConfig+0x334>)
 800235a:	400a      	ands	r2, r1
 800235c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d014      	beq.n	8002390 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7ff facf 	bl	8001908 <HAL_GetTick>
 800236a:	0003      	movs	r3, r0
 800236c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7ff faca 	bl	8001908 <HAL_GetTick>
 8002374:	0002      	movs	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	@ 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e298      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002382:	4b93      	ldr	r3, [pc, #588]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	2380      	movs	r3, #128	@ 0x80
 8002388:	029b      	lsls	r3, r3, #10
 800238a:	4013      	ands	r3, r2
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0xcc>
 800238e:	e015      	b.n	80023bc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff faba 	bl	8001908 <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800239a:	f7ff fab5 	bl	8001908 <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b64      	cmp	r3, #100	@ 0x64
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e283      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ac:	4b88      	ldr	r3, [pc, #544]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2380      	movs	r3, #128	@ 0x80
 80023b2:	029b      	lsls	r3, r3, #10
 80023b4:	4013      	ands	r3, r2
 80023b6:	d1f0      	bne.n	800239a <HAL_RCC_OscConfig+0xf6>
 80023b8:	e000      	b.n	80023bc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ba:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2202      	movs	r2, #2
 80023c2:	4013      	ands	r3, r2
 80023c4:	d100      	bne.n	80023c8 <HAL_RCC_OscConfig+0x124>
 80023c6:	e099      	b.n	80024fc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c8:	4b81      	ldr	r3, [pc, #516]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2238      	movs	r2, #56	@ 0x38
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d2:	4b7f      	ldr	r3, [pc, #508]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2203      	movs	r2, #3
 80023d8:	4013      	ands	r3, r2
 80023da:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2b10      	cmp	r3, #16
 80023e0:	d102      	bne.n	80023e8 <HAL_RCC_OscConfig+0x144>
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d002      	beq.n	80023ee <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d135      	bne.n	800245a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ee:	4b78      	ldr	r3, [pc, #480]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	2380      	movs	r3, #128	@ 0x80
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4013      	ands	r3, r2
 80023f8:	d005      	beq.n	8002406 <HAL_RCC_OscConfig+0x162>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e256      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002406:	4b72      	ldr	r3, [pc, #456]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4a74      	ldr	r2, [pc, #464]	@ (80025dc <HAL_RCC_OscConfig+0x338>)
 800240c:	4013      	ands	r3, r2
 800240e:	0019      	movs	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	021a      	lsls	r2, r3, #8
 8002416:	4b6e      	ldr	r3, [pc, #440]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002418:	430a      	orrs	r2, r1
 800241a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d112      	bne.n	8002448 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002422:	4b6b      	ldr	r3, [pc, #428]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a6e      	ldr	r2, [pc, #440]	@ (80025e0 <HAL_RCC_OscConfig+0x33c>)
 8002428:	4013      	ands	r3, r2
 800242a:	0019      	movs	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	4b67      	ldr	r3, [pc, #412]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002432:	430a      	orrs	r2, r1
 8002434:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002436:	4b66      	ldr	r3, [pc, #408]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	0adb      	lsrs	r3, r3, #11
 800243c:	2207      	movs	r2, #7
 800243e:	4013      	ands	r3, r2
 8002440:	4a68      	ldr	r2, [pc, #416]	@ (80025e4 <HAL_RCC_OscConfig+0x340>)
 8002442:	40da      	lsrs	r2, r3
 8002444:	4b68      	ldr	r3, [pc, #416]	@ (80025e8 <HAL_RCC_OscConfig+0x344>)
 8002446:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002448:	4b68      	ldr	r3, [pc, #416]	@ (80025ec <HAL_RCC_OscConfig+0x348>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0018      	movs	r0, r3
 800244e:	f7ff f9ff 	bl	8001850 <HAL_InitTick>
 8002452:	1e03      	subs	r3, r0, #0
 8002454:	d051      	beq.n	80024fa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e22c      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d030      	beq.n	80024c4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002462:	4b5b      	ldr	r3, [pc, #364]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a5e      	ldr	r2, [pc, #376]	@ (80025e0 <HAL_RCC_OscConfig+0x33c>)
 8002468:	4013      	ands	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	4b57      	ldr	r3, [pc, #348]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002472:	430a      	orrs	r2, r1
 8002474:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002476:	4b56      	ldr	r3, [pc, #344]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b55      	ldr	r3, [pc, #340]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 800247c:	2180      	movs	r1, #128	@ 0x80
 800247e:	0049      	lsls	r1, r1, #1
 8002480:	430a      	orrs	r2, r1
 8002482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7ff fa40 	bl	8001908 <HAL_GetTick>
 8002488:	0003      	movs	r3, r0
 800248a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248e:	f7ff fa3b 	bl	8001908 <HAL_GetTick>
 8002492:	0002      	movs	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e209      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a0:	4b4b      	ldr	r3, [pc, #300]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	2380      	movs	r3, #128	@ 0x80
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4013      	ands	r3, r2
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ac:	4b48      	ldr	r3, [pc, #288]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4a4a      	ldr	r2, [pc, #296]	@ (80025dc <HAL_RCC_OscConfig+0x338>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	021a      	lsls	r2, r3, #8
 80024bc:	4b44      	ldr	r3, [pc, #272]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 80024be:	430a      	orrs	r2, r1
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	e01b      	b.n	80024fc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80024c4:	4b42      	ldr	r3, [pc, #264]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b41      	ldr	r3, [pc, #260]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 80024ca:	4949      	ldr	r1, [pc, #292]	@ (80025f0 <HAL_RCC_OscConfig+0x34c>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff fa1a 	bl	8001908 <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024da:	f7ff fa15 	bl	8001908 <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e1e3      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024ec:	4b38      	ldr	r3, [pc, #224]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	@ 0x80
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4013      	ands	r3, r2
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x236>
 80024f8:	e000      	b.n	80024fc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024fa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2208      	movs	r2, #8
 8002502:	4013      	ands	r3, r2
 8002504:	d047      	beq.n	8002596 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002506:	4b32      	ldr	r3, [pc, #200]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2238      	movs	r2, #56	@ 0x38
 800250c:	4013      	ands	r3, r2
 800250e:	2b18      	cmp	r3, #24
 8002510:	d10a      	bne.n	8002528 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002512:	4b2f      	ldr	r3, [pc, #188]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002516:	2202      	movs	r2, #2
 8002518:	4013      	ands	r3, r2
 800251a:	d03c      	beq.n	8002596 <HAL_RCC_OscConfig+0x2f2>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d138      	bne.n	8002596 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e1c5      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d019      	beq.n	8002564 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002530:	4b27      	ldr	r3, [pc, #156]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002532:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002534:	4b26      	ldr	r3, [pc, #152]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002536:	2101      	movs	r1, #1
 8002538:	430a      	orrs	r2, r1
 800253a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7ff f9e4 	bl	8001908 <HAL_GetTick>
 8002540:	0003      	movs	r3, r0
 8002542:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002546:	f7ff f9df 	bl	8001908 <HAL_GetTick>
 800254a:	0002      	movs	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e1ad      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002558:	4b1d      	ldr	r3, [pc, #116]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 800255a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255c:	2202      	movs	r2, #2
 800255e:	4013      	ands	r3, r2
 8002560:	d0f1      	beq.n	8002546 <HAL_RCC_OscConfig+0x2a2>
 8002562:	e018      	b.n	8002596 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002564:	4b1a      	ldr	r3, [pc, #104]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 8002566:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002568:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 800256a:	2101      	movs	r1, #1
 800256c:	438a      	bics	r2, r1
 800256e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7ff f9ca 	bl	8001908 <HAL_GetTick>
 8002574:	0003      	movs	r3, r0
 8002576:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257a:	f7ff f9c5 	bl	8001908 <HAL_GetTick>
 800257e:	0002      	movs	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e193      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800258c:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 800258e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002590:	2202      	movs	r2, #2
 8002592:	4013      	ands	r3, r2
 8002594:	d1f1      	bne.n	800257a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2204      	movs	r2, #4
 800259c:	4013      	ands	r3, r2
 800259e:	d100      	bne.n	80025a2 <HAL_RCC_OscConfig+0x2fe>
 80025a0:	e0c6      	b.n	8002730 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	231f      	movs	r3, #31
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025aa:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2238      	movs	r2, #56	@ 0x38
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	d11e      	bne.n	80025f4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80025b6:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <HAL_RCC_OscConfig+0x32c>)
 80025b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ba:	2202      	movs	r2, #2
 80025bc:	4013      	ands	r3, r2
 80025be:	d100      	bne.n	80025c2 <HAL_RCC_OscConfig+0x31e>
 80025c0:	e0b6      	b.n	8002730 <HAL_RCC_OscConfig+0x48c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d000      	beq.n	80025cc <HAL_RCC_OscConfig+0x328>
 80025ca:	e0b1      	b.n	8002730 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e171      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
 80025d0:	40021000 	.word	0x40021000
 80025d4:	fffeffff 	.word	0xfffeffff
 80025d8:	fffbffff 	.word	0xfffbffff
 80025dc:	ffff80ff 	.word	0xffff80ff
 80025e0:	ffffc7ff 	.word	0xffffc7ff
 80025e4:	00f42400 	.word	0x00f42400
 80025e8:	20000000 	.word	0x20000000
 80025ec:	20000004 	.word	0x20000004
 80025f0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025f4:	4bb1      	ldr	r3, [pc, #708]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80025f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025f8:	2380      	movs	r3, #128	@ 0x80
 80025fa:	055b      	lsls	r3, r3, #21
 80025fc:	4013      	ands	r3, r2
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_OscConfig+0x360>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_RCC_OscConfig+0x362>
 8002604:	2300      	movs	r3, #0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d011      	beq.n	800262e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	4bac      	ldr	r3, [pc, #688]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 800260c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800260e:	4bab      	ldr	r3, [pc, #684]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002610:	2180      	movs	r1, #128	@ 0x80
 8002612:	0549      	lsls	r1, r1, #21
 8002614:	430a      	orrs	r2, r1
 8002616:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002618:	4ba8      	ldr	r3, [pc, #672]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 800261a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800261c:	2380      	movs	r3, #128	@ 0x80
 800261e:	055b      	lsls	r3, r3, #21
 8002620:	4013      	ands	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002626:	231f      	movs	r3, #31
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262e:	4ba4      	ldr	r3, [pc, #656]	@ (80028c0 <HAL_RCC_OscConfig+0x61c>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	2380      	movs	r3, #128	@ 0x80
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4013      	ands	r3, r2
 8002638:	d11a      	bne.n	8002670 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800263a:	4ba1      	ldr	r3, [pc, #644]	@ (80028c0 <HAL_RCC_OscConfig+0x61c>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4ba0      	ldr	r3, [pc, #640]	@ (80028c0 <HAL_RCC_OscConfig+0x61c>)
 8002640:	2180      	movs	r1, #128	@ 0x80
 8002642:	0049      	lsls	r1, r1, #1
 8002644:	430a      	orrs	r2, r1
 8002646:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002648:	f7ff f95e 	bl	8001908 <HAL_GetTick>
 800264c:	0003      	movs	r3, r0
 800264e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002652:	f7ff f959 	bl	8001908 <HAL_GetTick>
 8002656:	0002      	movs	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e127      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002664:	4b96      	ldr	r3, [pc, #600]	@ (80028c0 <HAL_RCC_OscConfig+0x61c>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2380      	movs	r3, #128	@ 0x80
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4013      	ands	r3, r2
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d106      	bne.n	8002686 <HAL_RCC_OscConfig+0x3e2>
 8002678:	4b90      	ldr	r3, [pc, #576]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 800267a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800267c:	4b8f      	ldr	r3, [pc, #572]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 800267e:	2101      	movs	r1, #1
 8002680:	430a      	orrs	r2, r1
 8002682:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002684:	e01c      	b.n	80026c0 <HAL_RCC_OscConfig+0x41c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b05      	cmp	r3, #5
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x404>
 800268e:	4b8b      	ldr	r3, [pc, #556]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002690:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002692:	4b8a      	ldr	r3, [pc, #552]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002694:	2104      	movs	r1, #4
 8002696:	430a      	orrs	r2, r1
 8002698:	65da      	str	r2, [r3, #92]	@ 0x5c
 800269a:	4b88      	ldr	r3, [pc, #544]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 800269c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800269e:	4b87      	ldr	r3, [pc, #540]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80026a0:	2101      	movs	r1, #1
 80026a2:	430a      	orrs	r2, r1
 80026a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026a6:	e00b      	b.n	80026c0 <HAL_RCC_OscConfig+0x41c>
 80026a8:	4b84      	ldr	r3, [pc, #528]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80026aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026ac:	4b83      	ldr	r3, [pc, #524]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80026ae:	2101      	movs	r1, #1
 80026b0:	438a      	bics	r2, r1
 80026b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026b4:	4b81      	ldr	r3, [pc, #516]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80026b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026b8:	4b80      	ldr	r3, [pc, #512]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80026ba:	2104      	movs	r1, #4
 80026bc:	438a      	bics	r2, r1
 80026be:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d014      	beq.n	80026f2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7ff f91e 	bl	8001908 <HAL_GetTick>
 80026cc:	0003      	movs	r3, r0
 80026ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d0:	e009      	b.n	80026e6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7ff f919 	bl	8001908 <HAL_GetTick>
 80026d6:	0002      	movs	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	4a79      	ldr	r2, [pc, #484]	@ (80028c4 <HAL_RCC_OscConfig+0x620>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e0e6      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e6:	4b75      	ldr	r3, [pc, #468]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80026e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ea:	2202      	movs	r2, #2
 80026ec:	4013      	ands	r3, r2
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x42e>
 80026f0:	e013      	b.n	800271a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7ff f909 	bl	8001908 <HAL_GetTick>
 80026f6:	0003      	movs	r3, r0
 80026f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026fa:	e009      	b.n	8002710 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7ff f904 	bl	8001908 <HAL_GetTick>
 8002700:	0002      	movs	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	4a6f      	ldr	r2, [pc, #444]	@ (80028c4 <HAL_RCC_OscConfig+0x620>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e0d1      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002710:	4b6a      	ldr	r3, [pc, #424]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002714:	2202      	movs	r2, #2
 8002716:	4013      	ands	r3, r2
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800271a:	231f      	movs	r3, #31
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002724:	4b65      	ldr	r3, [pc, #404]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002726:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002728:	4b64      	ldr	r3, [pc, #400]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 800272a:	4967      	ldr	r1, [pc, #412]	@ (80028c8 <HAL_RCC_OscConfig+0x624>)
 800272c:	400a      	ands	r2, r1
 800272e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d100      	bne.n	800273a <HAL_RCC_OscConfig+0x496>
 8002738:	e0bb      	b.n	80028b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800273a:	4b60      	ldr	r3, [pc, #384]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2238      	movs	r2, #56	@ 0x38
 8002740:	4013      	ands	r3, r2
 8002742:	2b10      	cmp	r3, #16
 8002744:	d100      	bne.n	8002748 <HAL_RCC_OscConfig+0x4a4>
 8002746:	e07b      	b.n	8002840 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d156      	bne.n	80027fe <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002750:	4b5a      	ldr	r3, [pc, #360]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b59      	ldr	r3, [pc, #356]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002756:	495d      	ldr	r1, [pc, #372]	@ (80028cc <HAL_RCC_OscConfig+0x628>)
 8002758:	400a      	ands	r2, r1
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7ff f8d4 	bl	8001908 <HAL_GetTick>
 8002760:	0003      	movs	r3, r0
 8002762:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002766:	f7ff f8cf 	bl	8001908 <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e09d      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002778:	4b50      	ldr	r3, [pc, #320]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	2380      	movs	r3, #128	@ 0x80
 800277e:	049b      	lsls	r3, r3, #18
 8002780:	4013      	ands	r3, r2
 8002782:	d1f0      	bne.n	8002766 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002784:	4b4d      	ldr	r3, [pc, #308]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a51      	ldr	r2, [pc, #324]	@ (80028d0 <HAL_RCC_OscConfig+0x62c>)
 800278a:	4013      	ands	r3, r2
 800278c:	0019      	movs	r1, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1a      	ldr	r2, [r3, #32]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b0:	431a      	orrs	r2, r3
 80027b2:	4b42      	ldr	r3, [pc, #264]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80027b4:	430a      	orrs	r2, r1
 80027b6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b8:	4b40      	ldr	r3, [pc, #256]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b3f      	ldr	r3, [pc, #252]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80027be:	2180      	movs	r1, #128	@ 0x80
 80027c0:	0449      	lsls	r1, r1, #17
 80027c2:	430a      	orrs	r2, r1
 80027c4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80027c6:	4b3d      	ldr	r3, [pc, #244]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	4b3c      	ldr	r3, [pc, #240]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80027cc:	2180      	movs	r1, #128	@ 0x80
 80027ce:	0549      	lsls	r1, r1, #21
 80027d0:	430a      	orrs	r2, r1
 80027d2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7ff f898 	bl	8001908 <HAL_GetTick>
 80027d8:	0003      	movs	r3, r0
 80027da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027de:	f7ff f893 	bl	8001908 <HAL_GetTick>
 80027e2:	0002      	movs	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e061      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f0:	4b32      	ldr	r3, [pc, #200]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	049b      	lsls	r3, r3, #18
 80027f8:	4013      	ands	r3, r2
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x53a>
 80027fc:	e059      	b.n	80028b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fe:	4b2f      	ldr	r3, [pc, #188]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	4b2e      	ldr	r3, [pc, #184]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002804:	4931      	ldr	r1, [pc, #196]	@ (80028cc <HAL_RCC_OscConfig+0x628>)
 8002806:	400a      	ands	r2, r1
 8002808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280a:	f7ff f87d 	bl	8001908 <HAL_GetTick>
 800280e:	0003      	movs	r3, r0
 8002810:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002814:	f7ff f878 	bl	8001908 <HAL_GetTick>
 8002818:	0002      	movs	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e046      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002826:	4b25      	ldr	r3, [pc, #148]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	2380      	movs	r3, #128	@ 0x80
 800282c:	049b      	lsls	r3, r3, #18
 800282e:	4013      	ands	r3, r2
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002832:	4b22      	ldr	r3, [pc, #136]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	4b21      	ldr	r3, [pc, #132]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 8002838:	4926      	ldr	r1, [pc, #152]	@ (80028d4 <HAL_RCC_OscConfig+0x630>)
 800283a:	400a      	ands	r2, r1
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	e038      	b.n	80028b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e033      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800284c:	4b1b      	ldr	r3, [pc, #108]	@ (80028bc <HAL_RCC_OscConfig+0x618>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2203      	movs	r2, #3
 8002856:	401a      	ands	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	429a      	cmp	r2, r3
 800285e:	d126      	bne.n	80028ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2270      	movs	r2, #112	@ 0x70
 8002864:	401a      	ands	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d11f      	bne.n	80028ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	23fe      	movs	r3, #254	@ 0xfe
 8002872:	01db      	lsls	r3, r3, #7
 8002874:	401a      	ands	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d116      	bne.n	80028ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	23f8      	movs	r3, #248	@ 0xf8
 8002884:	039b      	lsls	r3, r3, #14
 8002886:	401a      	ands	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d10e      	bne.n	80028ae <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	23e0      	movs	r3, #224	@ 0xe0
 8002894:	051b      	lsls	r3, r3, #20
 8002896:	401a      	ands	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	0f5b      	lsrs	r3, r3, #29
 80028a4:	075a      	lsls	r2, r3, #29
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b008      	add	sp, #32
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40007000 	.word	0x40007000
 80028c4:	00001388 	.word	0x00001388
 80028c8:	efffffff 	.word	0xefffffff
 80028cc:	feffffff 	.word	0xfeffffff
 80028d0:	11c1808c 	.word	0x11c1808c
 80028d4:	eefefffc 	.word	0xeefefffc

080028d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0e9      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028ec:	4b76      	ldr	r3, [pc, #472]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2207      	movs	r2, #7
 80028f2:	4013      	ands	r3, r2
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d91e      	bls.n	8002938 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b73      	ldr	r3, [pc, #460]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2207      	movs	r2, #7
 8002900:	4393      	bics	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	4b70      	ldr	r3, [pc, #448]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800290c:	f7fe fffc 	bl	8001908 <HAL_GetTick>
 8002910:	0003      	movs	r3, r0
 8002912:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002914:	e009      	b.n	800292a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002916:	f7fe fff7 	bl	8001908 <HAL_GetTick>
 800291a:	0002      	movs	r2, r0
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	4a6a      	ldr	r2, [pc, #424]	@ (8002acc <HAL_RCC_ClockConfig+0x1f4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e0ca      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800292a:	4b67      	ldr	r3, [pc, #412]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2207      	movs	r2, #7
 8002930:	4013      	ands	r3, r2
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d1ee      	bne.n	8002916 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2202      	movs	r2, #2
 800293e:	4013      	ands	r3, r2
 8002940:	d015      	beq.n	800296e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2204      	movs	r2, #4
 8002948:	4013      	ands	r3, r2
 800294a:	d006      	beq.n	800295a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800294c:	4b60      	ldr	r3, [pc, #384]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	4b5f      	ldr	r3, [pc, #380]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 8002952:	21e0      	movs	r1, #224	@ 0xe0
 8002954:	01c9      	lsls	r1, r1, #7
 8002956:	430a      	orrs	r2, r1
 8002958:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	4a5d      	ldr	r2, [pc, #372]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1fc>)
 8002960:	4013      	ands	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	4b59      	ldr	r3, [pc, #356]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 800296a:	430a      	orrs	r2, r1
 800296c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2201      	movs	r2, #1
 8002974:	4013      	ands	r3, r2
 8002976:	d057      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d107      	bne.n	8002990 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002980:	4b53      	ldr	r3, [pc, #332]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	029b      	lsls	r3, r3, #10
 8002988:	4013      	ands	r3, r2
 800298a:	d12b      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e097      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d107      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002998:	4b4d      	ldr	r3, [pc, #308]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	049b      	lsls	r3, r3, #18
 80029a0:	4013      	ands	r3, r2
 80029a2:	d11f      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e08b      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b0:	4b47      	ldr	r3, [pc, #284]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2380      	movs	r3, #128	@ 0x80
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4013      	ands	r3, r2
 80029ba:	d113      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e07f      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d106      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c8:	4b41      	ldr	r3, [pc, #260]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 80029ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029cc:	2202      	movs	r2, #2
 80029ce:	4013      	ands	r3, r2
 80029d0:	d108      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e074      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 80029d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029da:	2202      	movs	r2, #2
 80029dc:	4013      	ands	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e06d      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029e4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2207      	movs	r2, #7
 80029ea:	4393      	bics	r3, r2
 80029ec:	0019      	movs	r1, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	4b37      	ldr	r3, [pc, #220]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 80029f4:	430a      	orrs	r2, r1
 80029f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f8:	f7fe ff86 	bl	8001908 <HAL_GetTick>
 80029fc:	0003      	movs	r3, r0
 80029fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a00:	e009      	b.n	8002a16 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a02:	f7fe ff81 	bl	8001908 <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8002acc <HAL_RCC_ClockConfig+0x1f4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e054      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2238      	movs	r2, #56	@ 0x38
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d1ec      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a28:	4b27      	ldr	r3, [pc, #156]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	4013      	ands	r3, r2
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d21e      	bcs.n	8002a74 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b24      	ldr	r3, [pc, #144]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	4393      	bics	r3, r2
 8002a3e:	0019      	movs	r1, r3
 8002a40:	4b21      	ldr	r3, [pc, #132]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a48:	f7fe ff5e 	bl	8001908 <HAL_GetTick>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a50:	e009      	b.n	8002a66 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a52:	f7fe ff59 	bl	8001908 <HAL_GetTick>
 8002a56:	0002      	movs	r2, r0
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002acc <HAL_RCC_ClockConfig+0x1f4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e02c      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a66:	4b18      	ldr	r3, [pc, #96]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2207      	movs	r2, #7
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d1ee      	bne.n	8002a52 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2204      	movs	r2, #4
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a7e:	4b14      	ldr	r3, [pc, #80]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	4a15      	ldr	r2, [pc, #84]	@ (8002ad8 <HAL_RCC_ClockConfig+0x200>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	0019      	movs	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a92:	f000 f829 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002a96:	0001      	movs	r1, r0
 8002a98:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	220f      	movs	r2, #15
 8002aa0:	401a      	ands	r2, r3
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <HAL_RCC_ClockConfig+0x204>)
 8002aa4:	0092      	lsls	r2, r2, #2
 8002aa6:	58d3      	ldr	r3, [r2, r3]
 8002aa8:	221f      	movs	r2, #31
 8002aaa:	4013      	ands	r3, r2
 8002aac:	000a      	movs	r2, r1
 8002aae:	40da      	lsrs	r2, r3
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <HAL_RCC_ClockConfig+0x208>)
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <HAL_RCC_ClockConfig+0x20c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7fe fec9 	bl	8001850 <HAL_InitTick>
 8002abe:	0003      	movs	r3, r0
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b004      	add	sp, #16
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40022000 	.word	0x40022000
 8002acc:	00001388 	.word	0x00001388
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	fffff0ff 	.word	0xfffff0ff
 8002ad8:	ffff8fff 	.word	0xffff8fff
 8002adc:	08005504 	.word	0x08005504
 8002ae0:	20000000 	.word	0x20000000
 8002ae4:	20000004 	.word	0x20000004

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aee:	4b3c      	ldr	r3, [pc, #240]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2238      	movs	r2, #56	@ 0x38
 8002af4:	4013      	ands	r3, r2
 8002af6:	d10f      	bne.n	8002b18 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002af8:	4b39      	ldr	r3, [pc, #228]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0adb      	lsrs	r3, r3, #11
 8002afe:	2207      	movs	r2, #7
 8002b00:	4013      	ands	r3, r2
 8002b02:	2201      	movs	r2, #1
 8002b04:	409a      	lsls	r2, r3
 8002b06:	0013      	movs	r3, r2
 8002b08:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b0a:	6839      	ldr	r1, [r7, #0]
 8002b0c:	4835      	ldr	r0, [pc, #212]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b0e:	f7fd faf9 	bl	8000104 <__udivsi3>
 8002b12:	0003      	movs	r3, r0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	e05d      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b18:	4b31      	ldr	r3, [pc, #196]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2238      	movs	r2, #56	@ 0x38
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d102      	bne.n	8002b2a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b24:	4b2f      	ldr	r3, [pc, #188]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	e054      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2238      	movs	r2, #56	@ 0x38
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d138      	bne.n	8002ba8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b36:	4b2a      	ldr	r3, [pc, #168]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b40:	4b27      	ldr	r3, [pc, #156]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	2207      	movs	r2, #7
 8002b48:	4013      	ands	r3, r2
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d10d      	bne.n	8002b70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	4823      	ldr	r0, [pc, #140]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b58:	f7fd fad4 	bl	8000104 <__udivsi3>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	0019      	movs	r1, r3
 8002b60:	4b1f      	ldr	r3, [pc, #124]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	0a1b      	lsrs	r3, r3, #8
 8002b66:	227f      	movs	r2, #127	@ 0x7f
 8002b68:	4013      	ands	r3, r2
 8002b6a:	434b      	muls	r3, r1
 8002b6c:	617b      	str	r3, [r7, #20]
        break;
 8002b6e:	e00d      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	481c      	ldr	r0, [pc, #112]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b74:	f7fd fac6 	bl	8000104 <__udivsi3>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	227f      	movs	r2, #127	@ 0x7f
 8002b84:	4013      	ands	r3, r2
 8002b86:	434b      	muls	r3, r1
 8002b88:	617b      	str	r3, [r7, #20]
        break;
 8002b8a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b8c:	4b14      	ldr	r3, [pc, #80]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	0f5b      	lsrs	r3, r3, #29
 8002b92:	2207      	movs	r2, #7
 8002b94:	4013      	ands	r3, r2
 8002b96:	3301      	adds	r3, #1
 8002b98:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	6978      	ldr	r0, [r7, #20]
 8002b9e:	f7fd fab1 	bl	8000104 <__udivsi3>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	e015      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2238      	movs	r2, #56	@ 0x38
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d103      	bne.n	8002bbc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002bbc:	4b08      	ldr	r3, [pc, #32]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2238      	movs	r2, #56	@ 0x38
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b18      	cmp	r3, #24
 8002bc6:	d103      	bne.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002bc8:	23fa      	movs	r3, #250	@ 0xfa
 8002bca:	01db      	lsls	r3, r3, #7
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	e001      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bd4:	693b      	ldr	r3, [r7, #16]
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b006      	add	sp, #24
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	40021000 	.word	0x40021000
 8002be4:	00f42400 	.word	0x00f42400

08002be8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bec:	4b02      	ldr	r3, [pc, #8]	@ (8002bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bee:	681b      	ldr	r3, [r3, #0]
}
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	20000000 	.word	0x20000000

08002bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bfc:	b5b0      	push	{r4, r5, r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c00:	f7ff fff2 	bl	8002be8 <HAL_RCC_GetHCLKFreq>
 8002c04:	0004      	movs	r4, r0
 8002c06:	f7ff fb41 	bl	800228c <LL_RCC_GetAPB1Prescaler>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	0b1a      	lsrs	r2, r3, #12
 8002c0e:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c10:	0092      	lsls	r2, r2, #2
 8002c12:	58d3      	ldr	r3, [r2, r3]
 8002c14:	221f      	movs	r2, #31
 8002c16:	4013      	ands	r3, r2
 8002c18:	40dc      	lsrs	r4, r3
 8002c1a:	0023      	movs	r3, r4
}
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bdb0      	pop	{r4, r5, r7, pc}
 8002c22:	46c0      	nop			@ (mov r8, r8)
 8002c24:	08005544 	.word	0x08005544

08002c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002c30:	2313      	movs	r3, #19
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c38:	2312      	movs	r3, #18
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	2380      	movs	r3, #128	@ 0x80
 8002c46:	029b      	lsls	r3, r3, #10
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d100      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c4c:	e0a3      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c4e:	2011      	movs	r0, #17
 8002c50:	183b      	adds	r3, r7, r0
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c56:	4ba5      	ldr	r3, [pc, #660]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c5a:	2380      	movs	r3, #128	@ 0x80
 8002c5c:	055b      	lsls	r3, r3, #21
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d110      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	4ba2      	ldr	r3, [pc, #648]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c66:	4ba1      	ldr	r3, [pc, #644]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c68:	2180      	movs	r1, #128	@ 0x80
 8002c6a:	0549      	lsls	r1, r1, #21
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c70:	4b9e      	ldr	r3, [pc, #632]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c74:	2380      	movs	r3, #128	@ 0x80
 8002c76:	055b      	lsls	r3, r3, #21
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7e:	183b      	adds	r3, r7, r0
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c84:	4b9a      	ldr	r3, [pc, #616]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b99      	ldr	r3, [pc, #612]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002c8a:	2180      	movs	r1, #128	@ 0x80
 8002c8c:	0049      	lsls	r1, r1, #1
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c92:	f7fe fe39 	bl	8001908 <HAL_GetTick>
 8002c96:	0003      	movs	r3, r0
 8002c98:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9c:	f7fe fe34 	bl	8001908 <HAL_GetTick>
 8002ca0:	0002      	movs	r2, r0
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d904      	bls.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002caa:	2313      	movs	r3, #19
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	2203      	movs	r2, #3
 8002cb0:	701a      	strb	r2, [r3, #0]
        break;
 8002cb2:	e005      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cb4:	4b8e      	ldr	r3, [pc, #568]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	2380      	movs	r3, #128	@ 0x80
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d0ed      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002cc0:	2313      	movs	r3, #19
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d154      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cca:	4b88      	ldr	r3, [pc, #544]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ccc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cce:	23c0      	movs	r3, #192	@ 0xc0
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d019      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d014      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ce6:	4b81      	ldr	r3, [pc, #516]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cea:	4a82      	ldr	r2, [pc, #520]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cf0:	4b7e      	ldr	r3, [pc, #504]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cf2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cf4:	4b7d      	ldr	r3, [pc, #500]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cf6:	2180      	movs	r1, #128	@ 0x80
 8002cf8:	0249      	lsls	r1, r1, #9
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cfe:	4b7b      	ldr	r3, [pc, #492]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d02:	4b7a      	ldr	r3, [pc, #488]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d04:	497c      	ldr	r1, [pc, #496]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002d06:	400a      	ands	r2, r1
 8002d08:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d0a:	4b78      	ldr	r3, [pc, #480]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2201      	movs	r2, #1
 8002d14:	4013      	ands	r3, r2
 8002d16:	d016      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe fdf6 	bl	8001908 <HAL_GetTick>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d20:	e00c      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d22:	f7fe fdf1 	bl	8001908 <HAL_GetTick>
 8002d26:	0002      	movs	r2, r0
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	4a73      	ldr	r2, [pc, #460]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d904      	bls.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002d32:	2313      	movs	r3, #19
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	2203      	movs	r2, #3
 8002d38:	701a      	strb	r2, [r3, #0]
            break;
 8002d3a:	e004      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3c:	4b6b      	ldr	r3, [pc, #428]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d40:	2202      	movs	r2, #2
 8002d42:	4013      	ands	r3, r2
 8002d44:	d0ed      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d46:	2313      	movs	r3, #19
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d50:	4b66      	ldr	r3, [pc, #408]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d54:	4a67      	ldr	r2, [pc, #412]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d5e:	4b63      	ldr	r3, [pc, #396]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d60:	430a      	orrs	r2, r1
 8002d62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d64:	e00c      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d66:	2312      	movs	r3, #18
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	2213      	movs	r2, #19
 8002d6c:	18ba      	adds	r2, r7, r2
 8002d6e:	7812      	ldrb	r2, [r2, #0]
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e005      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d74:	2312      	movs	r3, #18
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	2213      	movs	r2, #19
 8002d7a:	18ba      	adds	r2, r7, r2
 8002d7c:	7812      	ldrb	r2, [r2, #0]
 8002d7e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d80:	2311      	movs	r3, #17
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d105      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8a:	4b58      	ldr	r3, [pc, #352]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d8e:	4b57      	ldr	r3, [pc, #348]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d90:	495b      	ldr	r1, [pc, #364]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002d92:	400a      	ands	r2, r1
 8002d94:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002da0:	4b52      	ldr	r3, [pc, #328]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da4:	2203      	movs	r2, #3
 8002da6:	4393      	bics	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	4b4f      	ldr	r3, [pc, #316]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002db0:	430a      	orrs	r2, r1
 8002db2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2210      	movs	r2, #16
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d009      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dbe:	4b4b      	ldr	r3, [pc, #300]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc2:	4a50      	ldr	r2, [pc, #320]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	4b47      	ldr	r3, [pc, #284]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	2380      	movs	r3, #128	@ 0x80
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dde:	4b43      	ldr	r3, [pc, #268]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de2:	4a49      	ldr	r2, [pc, #292]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	0019      	movs	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	4b3f      	ldr	r3, [pc, #252]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dee:	430a      	orrs	r2, r1
 8002df0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	2380      	movs	r3, #128	@ 0x80
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e02:	4a42      	ldr	r2, [pc, #264]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	4b37      	ldr	r3, [pc, #220]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2220      	movs	r2, #32
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d009      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e1c:	4b33      	ldr	r3, [pc, #204]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e20:	4a3b      	ldr	r2, [pc, #236]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	0019      	movs	r1, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	4b30      	ldr	r3, [pc, #192]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	2380      	movs	r3, #128	@ 0x80
 8002e36:	01db      	lsls	r3, r3, #7
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d015      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	0899      	lsrs	r1, r3, #2
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69da      	ldr	r2, [r3, #28]
 8002e48:	4b28      	ldr	r3, [pc, #160]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	2380      	movs	r3, #128	@ 0x80
 8002e54:	05db      	lsls	r3, r3, #23
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d106      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e5a:	4b24      	ldr	r3, [pc, #144]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	4b23      	ldr	r3, [pc, #140]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e60:	2180      	movs	r1, #128	@ 0x80
 8002e62:	0249      	lsls	r1, r1, #9
 8002e64:	430a      	orrs	r2, r1
 8002e66:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	2380      	movs	r3, #128	@ 0x80
 8002e6e:	039b      	lsls	r3, r3, #14
 8002e70:	4013      	ands	r3, r2
 8002e72:	d016      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e74:	4b1d      	ldr	r3, [pc, #116]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e78:	4a26      	ldr	r2, [pc, #152]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1a      	ldr	r2, [r3, #32]
 8002e82:	4b1a      	ldr	r3, [pc, #104]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e84:	430a      	orrs	r2, r1
 8002e86:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1a      	ldr	r2, [r3, #32]
 8002e8c:	2380      	movs	r3, #128	@ 0x80
 8002e8e:	03db      	lsls	r3, r3, #15
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d106      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e94:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	4b14      	ldr	r3, [pc, #80]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e9a:	2180      	movs	r1, #128	@ 0x80
 8002e9c:	0449      	lsls	r1, r1, #17
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	2380      	movs	r3, #128	@ 0x80
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d016      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002eae:	4b0f      	ldr	r3, [pc, #60]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb2:	4a19      	ldr	r2, [pc, #100]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	2380      	movs	r3, #128	@ 0x80
 8002ec8:	01db      	lsls	r3, r3, #7
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d106      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ece:	4b07      	ldr	r3, [pc, #28]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	4b06      	ldr	r3, [pc, #24]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ed4:	2180      	movs	r1, #128	@ 0x80
 8002ed6:	0249      	lsls	r1, r1, #9
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002edc:	2312      	movs	r3, #18
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	781b      	ldrb	r3, [r3, #0]
}
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b006      	add	sp, #24
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	46c0      	nop			@ (mov r8, r8)
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	fffffcff 	.word	0xfffffcff
 8002ef8:	fffeffff 	.word	0xfffeffff
 8002efc:	00001388 	.word	0x00001388
 8002f00:	efffffff 	.word	0xefffffff
 8002f04:	fffff3ff 	.word	0xfffff3ff
 8002f08:	fff3ffff 	.word	0xfff3ffff
 8002f0c:	ffcfffff 	.word	0xffcfffff
 8002f10:	ffffcfff 	.word	0xffffcfff
 8002f14:	ffbfffff 	.word	0xffbfffff
 8002f18:	ffff3fff 	.word	0xffff3fff

08002f1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	2380      	movs	r3, #128	@ 0x80
 8002f2c:	029b      	lsls	r3, r3, #10
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d136      	bne.n	8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002f32:	4bcd      	ldr	r3, [pc, #820]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002f34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f36:	23c0      	movs	r3, #192	@ 0xc0
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8002f3e:	4bca      	ldr	r3, [pc, #808]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f42:	2202      	movs	r2, #2
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d108      	bne.n	8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	2380      	movs	r3, #128	@ 0x80
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d103      	bne.n	8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8002f54:	2380      	movs	r3, #128	@ 0x80
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e26b      	b.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8002f5c:	4bc2      	ldr	r3, [pc, #776]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f60:	2202      	movs	r2, #2
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d108      	bne.n	8002f7a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	2380      	movs	r3, #128	@ 0x80
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d103      	bne.n	8002f7a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8002f72:	23fa      	movs	r3, #250	@ 0xfa
 8002f74:	01db      	lsls	r3, r3, #7
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	e25c      	b.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8002f7a:	4bbb      	ldr	r3, [pc, #748]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	2380      	movs	r3, #128	@ 0x80
 8002f80:	029b      	lsls	r3, r3, #10
 8002f82:	401a      	ands	r2, r3
 8002f84:	2380      	movs	r3, #128	@ 0x80
 8002f86:	029b      	lsls	r3, r3, #10
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d000      	beq.n	8002f8e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8002f8c:	e252      	b.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	23c0      	movs	r3, #192	@ 0xc0
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d000      	beq.n	8002f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8002f98:	e24c      	b.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 8002f9a:	4bb4      	ldr	r3, [pc, #720]	@ (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e249      	b.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8002fa0:	4bb1      	ldr	r3, [pc, #708]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d102      	bne.n	8002fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8002fac:	4bb0      	ldr	r3, [pc, #704]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8002fb2:	4bad      	ldr	r3, [pc, #692]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d102      	bne.n	8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8002fbe:	4bac      	ldr	r3, [pc, #688]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	e001      	b.n	8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002fc8:	4ba7      	ldr	r3, [pc, #668]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	2207      	movs	r2, #7
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	6938      	ldr	r0, [r7, #16]
 8002fd8:	f7fd f894 	bl	8000104 <__udivsi3>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	2380      	movs	r3, #128	@ 0x80
 8002fe4:	039b      	lsls	r3, r3, #14
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d100      	bne.n	8002fec <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8002fea:	e1e3      	b.n	80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	2380      	movs	r3, #128	@ 0x80
 8002ff0:	039b      	lsls	r3, r3, #14
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d900      	bls.n	8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002ff6:	e20c      	b.n	8003412 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	2380      	movs	r3, #128	@ 0x80
 8002ffc:	01db      	lsls	r3, r3, #7
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d100      	bne.n	8003004 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8003002:	e0a5      	b.n	8003150 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	2380      	movs	r3, #128	@ 0x80
 8003008:	01db      	lsls	r3, r3, #7
 800300a:	429a      	cmp	r2, r3
 800300c:	d900      	bls.n	8003010 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800300e:	e200      	b.n	8003412 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	2380      	movs	r3, #128	@ 0x80
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	429a      	cmp	r2, r3
 8003018:	d100      	bne.n	800301c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800301a:	e0fc      	b.n	8003216 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	2380      	movs	r3, #128	@ 0x80
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	429a      	cmp	r2, r3
 8003024:	d900      	bls.n	8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8003026:	e1f4      	b.n	8003412 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	2380      	movs	r3, #128	@ 0x80
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	429a      	cmp	r2, r3
 8003030:	d100      	bne.n	8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8003032:	e181      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	2380      	movs	r3, #128	@ 0x80
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	429a      	cmp	r2, r3
 800303c:	d900      	bls.n	8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800303e:	e1e8      	b.n	8003412 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	2380      	movs	r3, #128	@ 0x80
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	429a      	cmp	r2, r3
 8003048:	d100      	bne.n	800304c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800304a:	e135      	b.n	80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	2380      	movs	r3, #128	@ 0x80
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	429a      	cmp	r2, r3
 8003054:	d900      	bls.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8003056:	e1dc      	b.n	8003412 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b20      	cmp	r3, #32
 800305c:	d100      	bne.n	8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800305e:	e0af      	b.n	80031c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b20      	cmp	r3, #32
 8003064:	d900      	bls.n	8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8003066:	e1d4      	b.n	8003412 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d003      	beq.n	8003076 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b10      	cmp	r3, #16
 8003072:	d033      	beq.n	80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8003074:	e1cd      	b.n	8003412 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003076:	4b7c      	ldr	r3, [pc, #496]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8003078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307a:	2203      	movs	r2, #3
 800307c:	4013      	ands	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d104      	bne.n	8003090 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003086:	f7ff fdb9 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 800308a:	0003      	movs	r3, r0
 800308c:	617b      	str	r3, [r7, #20]
        break;
 800308e:	e1c2      	b.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d104      	bne.n	80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 8003096:	f7ff fd27 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 800309a:	0003      	movs	r3, r0
 800309c:	617b      	str	r3, [r7, #20]
        break;
 800309e:	e1ba      	b.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80030a0:	4b71      	ldr	r3, [pc, #452]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	401a      	ands	r2, r3
 80030aa:	2380      	movs	r3, #128	@ 0x80
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d105      	bne.n	80030be <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d102      	bne.n	80030be <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 80030b8:	4b6d      	ldr	r3, [pc, #436]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80030ba:	617b      	str	r3, [r7, #20]
        break;
 80030bc:	e1ab      	b.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80030be:	4b6a      	ldr	r3, [pc, #424]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80030c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c2:	2202      	movs	r2, #2
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d000      	beq.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 80030ca:	e1a4      	b.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d000      	beq.n	80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80030d2:	e1a0      	b.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 80030d4:	2380      	movs	r3, #128	@ 0x80
 80030d6:	021b      	lsls	r3, r3, #8
 80030d8:	617b      	str	r3, [r7, #20]
        break;
 80030da:	e19c      	b.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80030dc:	4b62      	ldr	r3, [pc, #392]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80030de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030e0:	23c0      	movs	r3, #192	@ 0xc0
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d104      	bne.n	80030f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80030ee:	f7ff fd85 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 80030f2:	0003      	movs	r3, r0
 80030f4:	617b      	str	r3, [r7, #20]
        break;
 80030f6:	e190      	b.n	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	2380      	movs	r3, #128	@ 0x80
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	429a      	cmp	r2, r3
 8003100:	d104      	bne.n	800310c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003102:	f7ff fcf1 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8003106:	0003      	movs	r3, r0
 8003108:	617b      	str	r3, [r7, #20]
        break;
 800310a:	e186      	b.n	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800310c:	4b56      	ldr	r3, [pc, #344]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	2380      	movs	r3, #128	@ 0x80
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	401a      	ands	r2, r3
 8003116:	2380      	movs	r3, #128	@ 0x80
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	429a      	cmp	r2, r3
 800311c:	d107      	bne.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	2380      	movs	r3, #128	@ 0x80
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	429a      	cmp	r2, r3
 8003126:	d102      	bne.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 8003128:	4b51      	ldr	r3, [pc, #324]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800312a:	617b      	str	r3, [r7, #20]
        break;
 800312c:	e175      	b.n	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800312e:	4b4e      	ldr	r3, [pc, #312]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8003130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003132:	2202      	movs	r2, #2
 8003134:	4013      	ands	r3, r2
 8003136:	2b02      	cmp	r3, #2
 8003138:	d000      	beq.n	800313c <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800313a:	e16e      	b.n	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	23c0      	movs	r3, #192	@ 0xc0
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	429a      	cmp	r2, r3
 8003144:	d000      	beq.n	8003148 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8003146:	e168      	b.n	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 8003148:	2380      	movs	r3, #128	@ 0x80
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	617b      	str	r3, [r7, #20]
        break;
 800314e:	e164      	b.n	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003150:	4b45      	ldr	r3, [pc, #276]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8003152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003154:	0f9b      	lsrs	r3, r3, #30
 8003156:	079b      	lsls	r3, r3, #30
 8003158:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d104      	bne.n	800316a <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 8003160:	f7ff fcc2 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8003164:	0003      	movs	r3, r0
 8003166:	617b      	str	r3, [r7, #20]
        break;
 8003168:	e159      	b.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	2380      	movs	r3, #128	@ 0x80
 800316e:	061b      	lsls	r3, r3, #24
 8003170:	429a      	cmp	r2, r3
 8003172:	d102      	bne.n	800317a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 8003174:	4b3e      	ldr	r3, [pc, #248]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8003176:	617b      	str	r3, [r7, #20]
        break;
 8003178:	e151      	b.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	2380      	movs	r3, #128	@ 0x80
 800317e:	05db      	lsls	r3, r3, #23
 8003180:	429a      	cmp	r2, r3
 8003182:	d000      	beq.n	8003186 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003184:	e14b      	b.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8003186:	4b38      	ldr	r3, [pc, #224]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	2380      	movs	r3, #128	@ 0x80
 800318c:	025b      	lsls	r3, r3, #9
 800318e:	4013      	ands	r3, r2
 8003190:	d100      	bne.n	8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 8003192:	e144      	b.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003194:	4b34      	ldr	r3, [pc, #208]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	0a1b      	lsrs	r3, r3, #8
 800319a:	227f      	movs	r2, #127	@ 0x7f
 800319c:	4013      	ands	r3, r2
 800319e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	435a      	muls	r2, r3
 80031a6:	4b30      	ldr	r3, [pc, #192]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	0c5b      	lsrs	r3, r3, #17
 80031ac:	211f      	movs	r1, #31
 80031ae:	400b      	ands	r3, r1
 80031b0:	3301      	adds	r3, #1
 80031b2:	0019      	movs	r1, r3
 80031b4:	0010      	movs	r0, r2
 80031b6:	f7fc ffa5 	bl	8000104 <__udivsi3>
 80031ba:	0003      	movs	r3, r0
 80031bc:	617b      	str	r3, [r7, #20]
        break;
 80031be:	e12e      	b.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80031c0:	4b29      	ldr	r3, [pc, #164]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80031c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031c4:	23c0      	movs	r3, #192	@ 0xc0
 80031c6:	019b      	lsls	r3, r3, #6
 80031c8:	4013      	ands	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d104      	bne.n	80031dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 80031d2:	f7ff fd13 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 80031d6:	0003      	movs	r3, r0
 80031d8:	617b      	str	r3, [r7, #20]
        break;
 80031da:	e122      	b.n	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	2380      	movs	r3, #128	@ 0x80
 80031e0:	015b      	lsls	r3, r3, #5
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d104      	bne.n	80031f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 80031e6:	f7ff fc7f 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 80031ea:	0003      	movs	r3, r0
 80031ec:	617b      	str	r3, [r7, #20]
        break;
 80031ee:	e118      	b.n	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80031f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	2380      	movs	r3, #128	@ 0x80
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	401a      	ands	r2, r3
 80031fa:	2380      	movs	r3, #128	@ 0x80
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	429a      	cmp	r2, r3
 8003200:	d000      	beq.n	8003204 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8003202:	e10e      	b.n	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	2380      	movs	r3, #128	@ 0x80
 8003208:	019b      	lsls	r3, r3, #6
 800320a:	429a      	cmp	r2, r3
 800320c:	d000      	beq.n	8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800320e:	e108      	b.n	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 8003210:	4b17      	ldr	r3, [pc, #92]	@ (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8003212:	617b      	str	r3, [r7, #20]
        break;
 8003214:	e105      	b.n	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8003216:	4b14      	ldr	r3, [pc, #80]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8003218:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800321a:	23c0      	movs	r3, #192	@ 0xc0
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	4013      	ands	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	2380      	movs	r3, #128	@ 0x80
 8003226:	01db      	lsls	r3, r3, #7
 8003228:	429a      	cmp	r2, r3
 800322a:	d123      	bne.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800322c:	4b0e      	ldr	r3, [pc, #56]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	2380      	movs	r3, #128	@ 0x80
 8003232:	025b      	lsls	r3, r3, #9
 8003234:	4013      	ands	r3, r2
 8003236:	d100      	bne.n	800323a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8003238:	e0f5      	b.n	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800323a:	4b0b      	ldr	r3, [pc, #44]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	227f      	movs	r2, #127	@ 0x7f
 8003242:	4013      	ands	r3, r2
 8003244:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	435a      	muls	r2, r3
 800324c:	4b06      	ldr	r3, [pc, #24]	@ (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	0c5b      	lsrs	r3, r3, #17
 8003252:	211f      	movs	r1, #31
 8003254:	400b      	ands	r3, r1
 8003256:	3301      	adds	r3, #1
 8003258:	0019      	movs	r1, r3
 800325a:	0010      	movs	r0, r2
 800325c:	f7fc ff52 	bl	8000104 <__udivsi3>
 8003260:	0003      	movs	r3, r0
 8003262:	617b      	str	r3, [r7, #20]
        break;
 8003264:	e0df      	b.n	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8003266:	46c0      	nop			@ (mov r8, r8)
 8003268:	40021000 	.word	0x40021000
 800326c:	0007a120 	.word	0x0007a120
 8003270:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d104      	bne.n	8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 800327a:	f7ff fc35 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 800327e:	0003      	movs	r3, r0
 8003280:	617b      	str	r3, [r7, #20]
        break;
 8003282:	e0d0      	b.n	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8003284:	4b6e      	ldr	r3, [pc, #440]	@ (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	2380      	movs	r3, #128	@ 0x80
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	401a      	ands	r2, r3
 800328e:	2380      	movs	r3, #128	@ 0x80
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	429a      	cmp	r2, r3
 8003294:	d107      	bne.n	80032a6 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	2380      	movs	r3, #128	@ 0x80
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	429a      	cmp	r2, r3
 800329e:	d102      	bne.n	80032a6 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 80032a0:	4b68      	ldr	r3, [pc, #416]	@ (8003444 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e0bf      	b.n	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	23c0      	movs	r3, #192	@ 0xc0
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d000      	beq.n	80032b2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80032b0:	e0b9      	b.n	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 80032b2:	4b65      	ldr	r3, [pc, #404]	@ (8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80032b4:	617b      	str	r3, [r7, #20]
        break;
 80032b6:	e0b6      	b.n	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80032b8:	4b61      	ldr	r3, [pc, #388]	@ (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80032ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032bc:	23c0      	movs	r3, #192	@ 0xc0
 80032be:	031b      	lsls	r3, r3, #12
 80032c0:	4013      	ands	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d104      	bne.n	80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80032ca:	f7ff fc97 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 80032ce:	0003      	movs	r3, r0
 80032d0:	617b      	str	r3, [r7, #20]
        break;
 80032d2:	e0aa      	b.n	800342a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80032d4:	4b5a      	ldr	r3, [pc, #360]	@ (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80032d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d8:	2202      	movs	r2, #2
 80032da:	4013      	ands	r3, r2
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d108      	bne.n	80032f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	2380      	movs	r3, #128	@ 0x80
 80032e4:	02db      	lsls	r3, r3, #11
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d103      	bne.n	80032f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 80032ea:	23fa      	movs	r3, #250	@ 0xfa
 80032ec:	01db      	lsls	r3, r3, #7
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e021      	b.n	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80032f2:	4b53      	ldr	r3, [pc, #332]	@ (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	2380      	movs	r3, #128	@ 0x80
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	401a      	ands	r2, r3
 80032fc:	2380      	movs	r3, #128	@ 0x80
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	429a      	cmp	r2, r3
 8003302:	d107      	bne.n	8003314 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	2380      	movs	r3, #128	@ 0x80
 8003308:	031b      	lsls	r3, r3, #12
 800330a:	429a      	cmp	r2, r3
 800330c:	d102      	bne.n	8003314 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 800330e:	4b4d      	ldr	r3, [pc, #308]	@ (8003444 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	e010      	b.n	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8003314:	4b4a      	ldr	r3, [pc, #296]	@ (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003318:	2202      	movs	r2, #2
 800331a:	4013      	ands	r3, r2
 800331c:	2b02      	cmp	r3, #2
 800331e:	d000      	beq.n	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 8003320:	e083      	b.n	800342a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	23c0      	movs	r3, #192	@ 0xc0
 8003326:	031b      	lsls	r3, r3, #12
 8003328:	429a      	cmp	r2, r3
 800332a:	d000      	beq.n	800332e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 800332c:	e07d      	b.n	800342a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 800332e:	2380      	movs	r3, #128	@ 0x80
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	617b      	str	r3, [r7, #20]
        break;
 8003334:	e079      	b.n	800342a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8003336:	e078      	b.n	800342a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003338:	4b41      	ldr	r3, [pc, #260]	@ (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800333a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800333c:	23c0      	movs	r3, #192	@ 0xc0
 800333e:	039b      	lsls	r3, r3, #14
 8003340:	4013      	ands	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 800334a:	f7ff fc57 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 800334e:	0003      	movs	r3, r0
 8003350:	617b      	str	r3, [r7, #20]
        break;
 8003352:	e06c      	b.n	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8003354:	4b3a      	ldr	r3, [pc, #232]	@ (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003358:	2202      	movs	r2, #2
 800335a:	4013      	ands	r3, r2
 800335c:	2b02      	cmp	r3, #2
 800335e:	d108      	bne.n	8003372 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	2380      	movs	r3, #128	@ 0x80
 8003364:	035b      	lsls	r3, r3, #13
 8003366:	429a      	cmp	r2, r3
 8003368:	d103      	bne.n	8003372 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 800336a:	23fa      	movs	r3, #250	@ 0xfa
 800336c:	01db      	lsls	r3, r3, #7
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	e01f      	b.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8003372:	4b33      	ldr	r3, [pc, #204]	@ (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	2380      	movs	r3, #128	@ 0x80
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	401a      	ands	r2, r3
 800337c:	2380      	movs	r3, #128	@ 0x80
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	429a      	cmp	r2, r3
 8003382:	d107      	bne.n	8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	2380      	movs	r3, #128	@ 0x80
 8003388:	039b      	lsls	r3, r3, #14
 800338a:	429a      	cmp	r2, r3
 800338c:	d102      	bne.n	8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 800338e:	4b2d      	ldr	r3, [pc, #180]	@ (8003444 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e00e      	b.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8003394:	4b2a      	ldr	r3, [pc, #168]	@ (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003398:	2202      	movs	r2, #2
 800339a:	4013      	ands	r3, r2
 800339c:	2b02      	cmp	r3, #2
 800339e:	d146      	bne.n	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	23c0      	movs	r3, #192	@ 0xc0
 80033a4:	039b      	lsls	r3, r3, #14
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d141      	bne.n	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 80033aa:	2380      	movs	r3, #128	@ 0x80
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	617b      	str	r3, [r7, #20]
        break;
 80033b0:	e03d      	b.n	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80033b2:	e03c      	b.n	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80033b4:	4b22      	ldr	r3, [pc, #136]	@ (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80033b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033b8:	2380      	movs	r3, #128	@ 0x80
 80033ba:	03db      	lsls	r3, r3, #15
 80033bc:	4013      	ands	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	2380      	movs	r3, #128	@ 0x80
 80033c4:	03db      	lsls	r3, r3, #15
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d11b      	bne.n	8003402 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80033ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	2380      	movs	r3, #128	@ 0x80
 80033d0:	045b      	lsls	r3, r3, #17
 80033d2:	4013      	ands	r3, r2
 80033d4:	d02d      	beq.n	8003432 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80033d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	0a1b      	lsrs	r3, r3, #8
 80033dc:	227f      	movs	r2, #127	@ 0x7f
 80033de:	4013      	ands	r3, r2
 80033e0:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	435a      	muls	r2, r3
 80033e8:	4b15      	ldr	r3, [pc, #84]	@ (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	0e5b      	lsrs	r3, r3, #25
 80033ee:	2107      	movs	r1, #7
 80033f0:	400b      	ands	r3, r1
 80033f2:	3301      	adds	r3, #1
 80033f4:	0019      	movs	r1, r3
 80033f6:	0010      	movs	r0, r2
 80033f8:	f7fc fe84 	bl	8000104 <__udivsi3>
 80033fc:	0003      	movs	r3, r0
 80033fe:	617b      	str	r3, [r7, #20]
        break;
 8003400:	e017      	b.n	8003432 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d114      	bne.n	8003432 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003408:	f7ff fbf8 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 800340c:	0003      	movs	r3, r0
 800340e:	617b      	str	r3, [r7, #20]
        break;
 8003410:	e00f      	b.n	8003432 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 8003412:	46c0      	nop			@ (mov r8, r8)
 8003414:	e00e      	b.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	e00c      	b.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800341a:	46c0      	nop			@ (mov r8, r8)
 800341c:	e00a      	b.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	e008      	b.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8003422:	46c0      	nop			@ (mov r8, r8)
 8003424:	e006      	b.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	e004      	b.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	e002      	b.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	e000      	b.n	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8003432:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 8003434:	697b      	ldr	r3, [r7, #20]
}
 8003436:	0018      	movs	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	b006      	add	sp, #24
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	40021000 	.word	0x40021000
 8003444:	00f42400 	.word	0x00f42400
 8003448:	00bb8000 	.word	0x00bb8000

0800344c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800344c:	b5b0      	push	{r4, r5, r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003454:	230f      	movs	r3, #15
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	2201      	movs	r2, #1
 800345a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d100      	bne.n	8003464 <HAL_RTC_Init+0x18>
 8003462:	e08c      	b.n	800357e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2229      	movs	r2, #41	@ 0x29
 8003468:	5c9b      	ldrb	r3, [r3, r2]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2228      	movs	r2, #40	@ 0x28
 8003474:	2100      	movs	r1, #0
 8003476:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2288      	movs	r2, #136	@ 0x88
 800347c:	0212      	lsls	r2, r2, #8
 800347e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	0018      	movs	r0, r3
 8003484:	f7fe f886 	bl	8001594 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2229      	movs	r2, #41	@ 0x29
 800348c:	2102      	movs	r1, #2
 800348e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2210      	movs	r2, #16
 8003498:	4013      	ands	r3, r2
 800349a:	2b10      	cmp	r3, #16
 800349c:	d062      	beq.n	8003564 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	22ca      	movs	r2, #202	@ 0xca
 80034a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2253      	movs	r2, #83	@ 0x53
 80034ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80034ae:	250f      	movs	r5, #15
 80034b0:	197c      	adds	r4, r7, r5
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	0018      	movs	r0, r3
 80034b6:	f000 faf1 	bl	8003a9c <RTC_EnterInitMode>
 80034ba:	0003      	movs	r3, r0
 80034bc:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80034be:	0028      	movs	r0, r5
 80034c0:	183b      	adds	r3, r7, r0
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d12c      	bne.n	8003522 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	492e      	ldr	r1, [pc, #184]	@ (800358c <HAL_RTC_Init+0x140>)
 80034d4:	400a      	ands	r2, r1
 80034d6:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6999      	ldr	r1, [r3, #24]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6912      	ldr	r2, [r2, #16]
 80034fe:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6919      	ldr	r1, [r3, #16]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	041a      	lsls	r2, r3, #16
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003514:	183c      	adds	r4, r7, r0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	0018      	movs	r0, r3
 800351a:	f000 fb01 	bl	8003b20 <RTC_ExitInitMode>
 800351e:	0003      	movs	r3, r0
 8003520:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8003522:	230f      	movs	r3, #15
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d116      	bne.n	800355a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	00d2      	lsls	r2, r2, #3
 8003538:	08d2      	lsrs	r2, r2, #3
 800353a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6999      	ldr	r1, [r3, #24]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	22ff      	movs	r2, #255	@ 0xff
 8003560:	625a      	str	r2, [r3, #36]	@ 0x24
 8003562:	e003      	b.n	800356c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003564:	230f      	movs	r3, #15
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800356c:	230f      	movs	r3, #15
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2229      	movs	r2, #41	@ 0x29
 800357a:	2101      	movs	r1, #1
 800357c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800357e:	230f      	movs	r3, #15
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	781b      	ldrb	r3, [r3, #0]
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b004      	add	sp, #16
 800358a:	bdb0      	pop	{r4, r5, r7, pc}
 800358c:	fb8fffbf 	.word	0xfb8fffbf

08003590 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003590:	b5b0      	push	{r4, r5, r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2228      	movs	r2, #40	@ 0x28
 80035a0:	5c9b      	ldrb	r3, [r3, r2]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_RTC_SetTime+0x1a>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e092      	b.n	80036d0 <HAL_RTC_SetTime+0x140>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2228      	movs	r2, #40	@ 0x28
 80035ae:	2101      	movs	r1, #1
 80035b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2229      	movs	r2, #41	@ 0x29
 80035b6:	2102      	movs	r1, #2
 80035b8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	22ca      	movs	r2, #202	@ 0xca
 80035c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2253      	movs	r2, #83	@ 0x53
 80035c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80035ca:	2513      	movs	r5, #19
 80035cc:	197c      	adds	r4, r7, r5
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	0018      	movs	r0, r3
 80035d2:	f000 fa63 	bl	8003a9c <RTC_EnterInitMode>
 80035d6:	0003      	movs	r3, r0
 80035d8:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80035da:	197b      	adds	r3, r7, r5
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d162      	bne.n	80036a8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d125      	bne.n	8003634 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2240      	movs	r2, #64	@ 0x40
 80035f0:	4013      	ands	r3, r2
 80035f2:	d102      	bne.n	80035fa <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2200      	movs	r2, #0
 80035f8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	0018      	movs	r0, r3
 8003600:	f000 fad2 	bl	8003ba8 <RTC_ByteToBcd2>
 8003604:	0003      	movs	r3, r0
 8003606:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	785b      	ldrb	r3, [r3, #1]
 800360c:	0018      	movs	r0, r3
 800360e:	f000 facb 	bl	8003ba8 <RTC_ByteToBcd2>
 8003612:	0003      	movs	r3, r0
 8003614:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003616:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	789b      	ldrb	r3, [r3, #2]
 800361c:	0018      	movs	r0, r3
 800361e:	f000 fac3 	bl	8003ba8 <RTC_ByteToBcd2>
 8003622:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003624:	0022      	movs	r2, r4
 8003626:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	78db      	ldrb	r3, [r3, #3]
 800362c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e017      	b.n	8003664 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2240      	movs	r2, #64	@ 0x40
 800363c:	4013      	ands	r3, r2
 800363e:	d102      	bne.n	8003646 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2200      	movs	r2, #0
 8003644:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	785b      	ldrb	r3, [r3, #1]
 8003650:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003652:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003658:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	78db      	ldrb	r3, [r3, #3]
 800365e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	491b      	ldr	r1, [pc, #108]	@ (80036d8 <HAL_RTC_SetTime+0x148>)
 800366c:	400a      	ands	r2, r1
 800366e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4918      	ldr	r1, [pc, #96]	@ (80036dc <HAL_RTC_SetTime+0x14c>)
 800367c:	400a      	ands	r2, r1
 800367e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6999      	ldr	r1, [r3, #24]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	431a      	orrs	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003698:	2313      	movs	r3, #19
 800369a:	18fc      	adds	r4, r7, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 fa3e 	bl	8003b20 <RTC_ExitInitMode>
 80036a4:	0003      	movs	r3, r0
 80036a6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	22ff      	movs	r2, #255	@ 0xff
 80036ae:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 80036b0:	2313      	movs	r3, #19
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d103      	bne.n	80036c2 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2229      	movs	r2, #41	@ 0x29
 80036be:	2101      	movs	r1, #1
 80036c0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2228      	movs	r2, #40	@ 0x28
 80036c6:	2100      	movs	r1, #0
 80036c8:	5499      	strb	r1, [r3, r2]

  return status;
 80036ca:	2313      	movs	r3, #19
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	781b      	ldrb	r3, [r3, #0]
}
 80036d0:	0018      	movs	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b006      	add	sp, #24
 80036d6:	bdb0      	pop	{r4, r5, r7, pc}
 80036d8:	007f7f7f 	.word	0x007f7f7f
 80036dc:	fffbffff 	.word	0xfffbffff

080036e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80036e0:	b5b0      	push	{r4, r5, r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2228      	movs	r2, #40	@ 0x28
 80036f0:	5c9b      	ldrb	r3, [r3, r2]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_RTC_SetDate+0x1a>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e07e      	b.n	80037f8 <HAL_RTC_SetDate+0x118>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2228      	movs	r2, #40	@ 0x28
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2229      	movs	r2, #41	@ 0x29
 8003706:	2102      	movs	r1, #2
 8003708:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10e      	bne.n	800372e <HAL_RTC_SetDate+0x4e>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	785b      	ldrb	r3, [r3, #1]
 8003714:	001a      	movs	r2, r3
 8003716:	2310      	movs	r3, #16
 8003718:	4013      	ands	r3, r2
 800371a:	d008      	beq.n	800372e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	785b      	ldrb	r3, [r3, #1]
 8003720:	2210      	movs	r2, #16
 8003722:	4393      	bics	r3, r2
 8003724:	b2db      	uxtb	r3, r3
 8003726:	330a      	adds	r3, #10
 8003728:	b2da      	uxtb	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d11c      	bne.n	800376e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	78db      	ldrb	r3, [r3, #3]
 8003738:	0018      	movs	r0, r3
 800373a:	f000 fa35 	bl	8003ba8 <RTC_ByteToBcd2>
 800373e:	0003      	movs	r3, r0
 8003740:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	785b      	ldrb	r3, [r3, #1]
 8003746:	0018      	movs	r0, r3
 8003748:	f000 fa2e 	bl	8003ba8 <RTC_ByteToBcd2>
 800374c:	0003      	movs	r3, r0
 800374e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003750:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	789b      	ldrb	r3, [r3, #2]
 8003756:	0018      	movs	r0, r3
 8003758:	f000 fa26 	bl	8003ba8 <RTC_ByteToBcd2>
 800375c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800375e:	0022      	movs	r2, r4
 8003760:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	e00e      	b.n	800378c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	78db      	ldrb	r3, [r3, #3]
 8003772:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	785b      	ldrb	r3, [r3, #1]
 8003778:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800377a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003780:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	22ca      	movs	r2, #202	@ 0xca
 8003792:	625a      	str	r2, [r3, #36]	@ 0x24
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2253      	movs	r2, #83	@ 0x53
 800379a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800379c:	2513      	movs	r5, #19
 800379e:	197c      	adds	r4, r7, r5
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	0018      	movs	r0, r3
 80037a4:	f000 f97a 	bl	8003a9c <RTC_EnterInitMode>
 80037a8:	0003      	movs	r3, r0
 80037aa:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80037ac:	0028      	movs	r0, r5
 80037ae:	183b      	adds	r3, r7, r0
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10c      	bne.n	80037d0 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4910      	ldr	r1, [pc, #64]	@ (8003800 <HAL_RTC_SetDate+0x120>)
 80037be:	400a      	ands	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80037c2:	183c      	adds	r4, r7, r0
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	0018      	movs	r0, r3
 80037c8:	f000 f9aa 	bl	8003b20 <RTC_ExitInitMode>
 80037cc:	0003      	movs	r3, r0
 80037ce:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	22ff      	movs	r2, #255	@ 0xff
 80037d6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80037d8:	2313      	movs	r3, #19
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2229      	movs	r2, #41	@ 0x29
 80037e6:	2101      	movs	r1, #1
 80037e8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2228      	movs	r2, #40	@ 0x28
 80037ee:	2100      	movs	r1, #0
 80037f0:	5499      	strb	r1, [r3, r2]

  return status;
 80037f2:	2313      	movs	r3, #19
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	781b      	ldrb	r3, [r3, #0]
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b006      	add	sp, #24
 80037fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003800:	00ffff3f 	.word	0x00ffff3f

08003804 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b089      	sub	sp, #36	@ 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2228      	movs	r2, #40	@ 0x28
 8003814:	5c9b      	ldrb	r3, [r3, r2]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_RTC_SetAlarm+0x1a>
 800381a:	2302      	movs	r3, #2
 800381c:	e10c      	b.n	8003a38 <HAL_RTC_SetAlarm+0x234>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2228      	movs	r2, #40	@ 0x28
 8003822:	2101      	movs	r1, #1
 8003824:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2229      	movs	r2, #41	@ 0x29
 800382a:	2102      	movs	r1, #2
 800382c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d136      	bne.n	80038a2 <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2240      	movs	r2, #64	@ 0x40
 800383c:	4013      	ands	r3, r2
 800383e:	d102      	bne.n	8003846 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2200      	movs	r2, #0
 8003844:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	0018      	movs	r0, r3
 800384c:	f000 f9ac 	bl	8003ba8 <RTC_ByteToBcd2>
 8003850:	0003      	movs	r3, r0
 8003852:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	785b      	ldrb	r3, [r3, #1]
 8003858:	0018      	movs	r0, r3
 800385a:	f000 f9a5 	bl	8003ba8 <RTC_ByteToBcd2>
 800385e:	0003      	movs	r3, r0
 8003860:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003862:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	789b      	ldrb	r3, [r3, #2]
 8003868:	0018      	movs	r0, r3
 800386a:	f000 f99d 	bl	8003ba8 <RTC_ByteToBcd2>
 800386e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003870:	0022      	movs	r2, r4
 8003872:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	78db      	ldrb	r3, [r3, #3]
 8003878:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800387a:	431a      	orrs	r2, r3
 800387c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2220      	movs	r2, #32
 8003882:	5c9b      	ldrb	r3, [r3, r2]
 8003884:	0018      	movs	r0, r3
 8003886:	f000 f98f 	bl	8003ba8 <RTC_ByteToBcd2>
 800388a:	0003      	movs	r3, r0
 800388c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800388e:	0022      	movs	r2, r4
 8003890:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003896:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800389c:	4313      	orrs	r3, r2
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	e022      	b.n	80038e8 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2240      	movs	r2, #64	@ 0x40
 80038aa:	4013      	ands	r3, r2
 80038ac:	d102      	bne.n	80038b4 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2200      	movs	r2, #0
 80038b2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	785b      	ldrb	r3, [r3, #1]
 80038be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80038c0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80038c6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	78db      	ldrb	r3, [r3, #3]
 80038cc:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80038ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2120      	movs	r1, #32
 80038d4:	5c5b      	ldrb	r3, [r3, r1]
 80038d6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80038d8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80038de:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	22ca      	movs	r2, #202	@ 0xca
 80038fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2253      	movs	r2, #83	@ 0x53
 8003902:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003908:	2380      	movs	r3, #128	@ 0x80
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	429a      	cmp	r2, r3
 800390e:	d143      	bne.n	8003998 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4949      	ldr	r1, [pc, #292]	@ (8003a40 <HAL_RTC_SetAlarm+0x23c>)
 800391c:	400a      	ands	r2, r1
 800391e:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4946      	ldr	r1, [pc, #280]	@ (8003a44 <HAL_RTC_SetAlarm+0x240>)
 800392c:	400a      	ands	r2, r1
 800392e:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8003930:	f7fd ffea 	bl	8001908 <HAL_GetTick>
 8003934:	0003      	movs	r3, r0
 8003936:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003938:	e016      	b.n	8003968 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800393a:	f7fd ffe5 	bl	8001908 <HAL_GetTick>
 800393e:	0002      	movs	r2, r0
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	1ad2      	subs	r2, r2, r3
 8003944:	23fa      	movs	r3, #250	@ 0xfa
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	429a      	cmp	r2, r3
 800394a:	d90d      	bls.n	8003968 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	22ff      	movs	r2, #255	@ 0xff
 8003952:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2229      	movs	r2, #41	@ 0x29
 8003958:	2103      	movs	r1, #3
 800395a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2228      	movs	r2, #40	@ 0x28
 8003960:	2100      	movs	r1, #0
 8003962:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e067      	b.n	8003a38 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	4013      	ands	r3, r2
 8003972:	d0e2      	beq.n	800393a <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2180      	movs	r1, #128	@ 0x80
 8003990:	0049      	lsls	r1, r1, #1
 8003992:	430a      	orrs	r2, r1
 8003994:	619a      	str	r2, [r3, #24]
 8003996:	e042      	b.n	8003a1e <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4929      	ldr	r1, [pc, #164]	@ (8003a48 <HAL_RTC_SetAlarm+0x244>)
 80039a4:	400a      	ands	r2, r1
 80039a6:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4926      	ldr	r1, [pc, #152]	@ (8003a4c <HAL_RTC_SetAlarm+0x248>)
 80039b4:	400a      	ands	r2, r1
 80039b6:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 80039b8:	f7fd ffa6 	bl	8001908 <HAL_GetTick>
 80039bc:	0003      	movs	r3, r0
 80039be:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80039c0:	e016      	b.n	80039f0 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80039c2:	f7fd ffa1 	bl	8001908 <HAL_GetTick>
 80039c6:	0002      	movs	r2, r0
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	1ad2      	subs	r2, r2, r3
 80039cc:	23fa      	movs	r3, #250	@ 0xfa
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d90d      	bls.n	80039f0 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	22ff      	movs	r2, #255	@ 0xff
 80039da:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2229      	movs	r2, #41	@ 0x29
 80039e0:	2103      	movs	r1, #3
 80039e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2228      	movs	r2, #40	@ 0x28
 80039e8:	2100      	movs	r1, #0
 80039ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e023      	b.n	8003a38 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2202      	movs	r2, #2
 80039f8:	4013      	ands	r3, r2
 80039fa:	d0e2      	beq.n	80039c2 <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2180      	movs	r1, #128	@ 0x80
 8003a18:	0089      	lsls	r1, r1, #2
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	22ff      	movs	r2, #255	@ 0xff
 8003a24:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2229      	movs	r2, #41	@ 0x29
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2228      	movs	r2, #40	@ 0x28
 8003a32:	2100      	movs	r1, #0
 8003a34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	0018      	movs	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b009      	add	sp, #36	@ 0x24
 8003a3e:	bd90      	pop	{r4, r7, pc}
 8003a40:	fffffeff 	.word	0xfffffeff
 8003a44:	ffffefff 	.word	0xffffefff
 8003a48:	fffffdff 	.word	0xfffffdff
 8003a4c:	ffffdfff 	.word	0xffffdfff

08003a50 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a0e      	ldr	r2, [pc, #56]	@ (8003a98 <HAL_RTC_WaitForSynchro+0x48>)
 8003a5e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003a60:	f7fd ff52 	bl	8001908 <HAL_GetTick>
 8003a64:	0003      	movs	r3, r0
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003a68:	e00a      	b.n	8003a80 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003a6a:	f7fd ff4d 	bl	8001908 <HAL_GetTick>
 8003a6e:	0002      	movs	r2, r0
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1ad2      	subs	r2, r2, r3
 8003a74:	23fa      	movs	r3, #250	@ 0xfa
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d901      	bls.n	8003a80 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e006      	b.n	8003a8e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d0ee      	beq.n	8003a6a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	0018      	movs	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b004      	add	sp, #16
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	0001005f 	.word	0x0001005f

08003a9c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8003aa4:	230f      	movs	r3, #15
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2240      	movs	r2, #64	@ 0x40
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d12c      	bne.n	8003b12 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2180      	movs	r1, #128	@ 0x80
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003ac8:	f7fd ff1e 	bl	8001908 <HAL_GetTick>
 8003acc:	0003      	movs	r3, r0
 8003ace:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003ad0:	e014      	b.n	8003afc <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003ad2:	f7fd ff19 	bl	8001908 <HAL_GetTick>
 8003ad6:	0002      	movs	r2, r0
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	1ad2      	subs	r2, r2, r3
 8003adc:	200f      	movs	r0, #15
 8003ade:	183b      	adds	r3, r7, r0
 8003ae0:	1839      	adds	r1, r7, r0
 8003ae2:	7809      	ldrb	r1, [r1, #0]
 8003ae4:	7019      	strb	r1, [r3, #0]
 8003ae6:	23fa      	movs	r3, #250	@ 0xfa
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d906      	bls.n	8003afc <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8003aee:	183b      	adds	r3, r7, r0
 8003af0:	2203      	movs	r2, #3
 8003af2:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2229      	movs	r2, #41	@ 0x29
 8003af8:	2103      	movs	r1, #3
 8003afa:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	2240      	movs	r2, #64	@ 0x40
 8003b04:	4013      	ands	r3, r2
 8003b06:	d104      	bne.n	8003b12 <RTC_EnterInitMode+0x76>
 8003b08:	230f      	movs	r3, #15
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d1df      	bne.n	8003ad2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003b12:	230f      	movs	r3, #15
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	781b      	ldrb	r3, [r3, #0]
}
 8003b18:	0018      	movs	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b004      	add	sp, #16
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	240f      	movs	r4, #15
 8003b2a:	193b      	adds	r3, r7, r4
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003b30:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba4 <RTC_ExitInitMode+0x84>)
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba4 <RTC_ExitInitMode+0x84>)
 8003b36:	2180      	movs	r1, #128	@ 0x80
 8003b38:	438a      	bics	r2, r1
 8003b3a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003b3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ba4 <RTC_ExitInitMode+0x84>)
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	2220      	movs	r2, #32
 8003b42:	4013      	ands	r3, r2
 8003b44:	d10d      	bne.n	8003b62 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f7ff ff81 	bl	8003a50 <HAL_RTC_WaitForSynchro>
 8003b4e:	1e03      	subs	r3, r0, #0
 8003b50:	d021      	beq.n	8003b96 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2229      	movs	r2, #41	@ 0x29
 8003b56:	2103      	movs	r1, #3
 8003b58:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003b5a:	193b      	adds	r3, r7, r4
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	701a      	strb	r2, [r3, #0]
 8003b60:	e019      	b.n	8003b96 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003b62:	4b10      	ldr	r3, [pc, #64]	@ (8003ba4 <RTC_ExitInitMode+0x84>)
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba4 <RTC_ExitInitMode+0x84>)
 8003b68:	2120      	movs	r1, #32
 8003b6a:	438a      	bics	r2, r1
 8003b6c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	0018      	movs	r0, r3
 8003b72:	f7ff ff6d 	bl	8003a50 <HAL_RTC_WaitForSynchro>
 8003b76:	1e03      	subs	r3, r0, #0
 8003b78:	d007      	beq.n	8003b8a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2229      	movs	r2, #41	@ 0x29
 8003b7e:	2103      	movs	r1, #3
 8003b80:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003b82:	230f      	movs	r3, #15
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	2203      	movs	r2, #3
 8003b88:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003b8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ba4 <RTC_ExitInitMode+0x84>)
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <RTC_ExitInitMode+0x84>)
 8003b90:	2120      	movs	r1, #32
 8003b92:	430a      	orrs	r2, r1
 8003b94:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003b96:	230f      	movs	r3, #15
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	781b      	ldrb	r3, [r3, #0]
}
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b005      	add	sp, #20
 8003ba2:	bd90      	pop	{r4, r7, pc}
 8003ba4:	40002800 	.word	0x40002800

08003ba8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	0002      	movs	r2, r0
 8003bb0:	1dfb      	adds	r3, r7, #7
 8003bb2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003bb8:	230b      	movs	r3, #11
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	1dfa      	adds	r2, r7, #7
 8003bbe:	7812      	ldrb	r2, [r2, #0]
 8003bc0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8003bc2:	e008      	b.n	8003bd6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003bca:	220b      	movs	r2, #11
 8003bcc:	18bb      	adds	r3, r7, r2
 8003bce:	18ba      	adds	r2, r7, r2
 8003bd0:	7812      	ldrb	r2, [r2, #0]
 8003bd2:	3a0a      	subs	r2, #10
 8003bd4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003bd6:	210b      	movs	r1, #11
 8003bd8:	187b      	adds	r3, r7, r1
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b09      	cmp	r3, #9
 8003bde:	d8f1      	bhi.n	8003bc4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	187b      	adds	r3, r7, r1
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	b2db      	uxtb	r3, r3
}
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b004      	add	sp, #16
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2228      	movs	r2, #40	@ 0x28
 8003c06:	5c9b      	ldrb	r3, [r3, r2]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e035      	b.n	8003c7c <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2228      	movs	r2, #40	@ 0x28
 8003c14:	2101      	movs	r1, #1
 8003c16:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2229      	movs	r2, #41	@ 0x29
 8003c1c:	2102      	movs	r1, #2
 8003c1e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	22ca      	movs	r2, #202	@ 0xca
 8003c26:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2253      	movs	r2, #83	@ 0x53
 8003c2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4912      	ldr	r1, [pc, #72]	@ (8003c84 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8003c3c:	400a      	ands	r2, r1
 8003c3e:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6999      	ldr	r1, [r3, #24]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2180      	movs	r1, #128	@ 0x80
 8003c5c:	0409      	lsls	r1, r1, #16
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	22ff      	movs	r2, #255	@ 0xff
 8003c68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2229      	movs	r2, #41	@ 0x29
 8003c6e:	2101      	movs	r1, #1
 8003c70:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2228      	movs	r2, #40	@ 0x28
 8003c76:	2100      	movs	r1, #0
 8003c78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b002      	add	sp, #8
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	fff7ffff 	.word	0xfff7ffff

08003c88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0a8      	b.n	8003dec <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	2382      	movs	r3, #130	@ 0x82
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d009      	beq.n	8003cc2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	61da      	str	r2, [r3, #28]
 8003cb4:	e005      	b.n	8003cc2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	225d      	movs	r2, #93	@ 0x5d
 8003ccc:	5c9b      	ldrb	r3, [r3, r2]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d107      	bne.n	8003ce4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	225c      	movs	r2, #92	@ 0x5c
 8003cd8:	2100      	movs	r1, #0
 8003cda:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f7fd fc96 	bl	8001610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	225d      	movs	r2, #93	@ 0x5d
 8003ce8:	2102      	movs	r1, #2
 8003cea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2140      	movs	r1, #64	@ 0x40
 8003cf8:	438a      	bics	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	23e0      	movs	r3, #224	@ 0xe0
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d902      	bls.n	8003d0e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e002      	b.n	8003d14 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d0e:	2380      	movs	r3, #128	@ 0x80
 8003d10:	015b      	lsls	r3, r3, #5
 8003d12:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	23f0      	movs	r3, #240	@ 0xf0
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d008      	beq.n	8003d32 <HAL_SPI_Init+0xaa>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	23e0      	movs	r3, #224	@ 0xe0
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d002      	beq.n	8003d32 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	2382      	movs	r3, #130	@ 0x82
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6899      	ldr	r1, [r3, #8]
 8003d40:	2384      	movs	r3, #132	@ 0x84
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	400b      	ands	r3, r1
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	400b      	ands	r3, r1
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	2101      	movs	r1, #1
 8003d58:	400b      	ands	r3, r1
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6999      	ldr	r1, [r3, #24]
 8003d60:	2380      	movs	r3, #128	@ 0x80
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	400b      	ands	r3, r1
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	2138      	movs	r1, #56	@ 0x38
 8003d6e:	400b      	ands	r3, r1
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	2180      	movs	r1, #128	@ 0x80
 8003d78:	400b      	ands	r3, r1
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	0011      	movs	r1, r2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d82:	2380      	movs	r3, #128	@ 0x80
 8003d84:	019b      	lsls	r3, r3, #6
 8003d86:	401a      	ands	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	0c1b      	lsrs	r3, r3, #16
 8003d96:	2204      	movs	r2, #4
 8003d98:	401a      	ands	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	2110      	movs	r1, #16
 8003da0:	400b      	ands	r3, r1
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da8:	2108      	movs	r1, #8
 8003daa:	400b      	ands	r3, r1
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68d9      	ldr	r1, [r3, #12]
 8003db2:	23f0      	movs	r3, #240	@ 0xf0
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	400b      	ands	r3, r1
 8003db8:	431a      	orrs	r2, r3
 8003dba:	0011      	movs	r1, r2
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	2380      	movs	r3, #128	@ 0x80
 8003dc0:	015b      	lsls	r3, r3, #5
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4907      	ldr	r1, [pc, #28]	@ (8003df4 <HAL_SPI_Init+0x16c>)
 8003dd8:	400a      	ands	r2, r1
 8003dda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	225d      	movs	r2, #93	@ 0x5d
 8003de6:	2101      	movs	r1, #1
 8003de8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b004      	add	sp, #16
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	fffff7ff 	.word	0xfffff7ff

08003df8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	1dbb      	adds	r3, r7, #6
 8003e06:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e08:	231f      	movs	r3, #31
 8003e0a:	18fb      	adds	r3, r7, r3
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	225c      	movs	r2, #92	@ 0x5c
 8003e14:	5c9b      	ldrb	r3, [r3, r2]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_SPI_Transmit+0x26>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e147      	b.n	80040ae <HAL_SPI_Transmit+0x2b6>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	225c      	movs	r2, #92	@ 0x5c
 8003e22:	2101      	movs	r1, #1
 8003e24:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e26:	f7fd fd6f 	bl	8001908 <HAL_GetTick>
 8003e2a:	0003      	movs	r3, r0
 8003e2c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003e2e:	2316      	movs	r3, #22
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	1dba      	adds	r2, r7, #6
 8003e34:	8812      	ldrh	r2, [r2, #0]
 8003e36:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	225d      	movs	r2, #93	@ 0x5d
 8003e3c:	5c9b      	ldrb	r3, [r3, r2]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d004      	beq.n	8003e4e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003e44:	231f      	movs	r3, #31
 8003e46:	18fb      	adds	r3, r7, r3
 8003e48:	2202      	movs	r2, #2
 8003e4a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e4c:	e128      	b.n	80040a0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_SPI_Transmit+0x64>
 8003e54:	1dbb      	adds	r3, r7, #6
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d104      	bne.n	8003e66 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003e5c:	231f      	movs	r3, #31
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	2201      	movs	r2, #1
 8003e62:	701a      	strb	r2, [r3, #0]
    goto error;
 8003e64:	e11c      	b.n	80040a0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	225d      	movs	r2, #93	@ 0x5d
 8003e6a:	2103      	movs	r1, #3
 8003e6c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1dba      	adds	r2, r7, #6
 8003e7e:	8812      	ldrh	r2, [r2, #0]
 8003e80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1dba      	adds	r2, r7, #6
 8003e86:	8812      	ldrh	r2, [r2, #0]
 8003e88:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2244      	movs	r2, #68	@ 0x44
 8003e94:	2100      	movs	r1, #0
 8003e96:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2246      	movs	r2, #70	@ 0x46
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	2380      	movs	r3, #128	@ 0x80
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d110      	bne.n	8003eda <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2140      	movs	r1, #64	@ 0x40
 8003ec4:	438a      	bics	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2180      	movs	r1, #128	@ 0x80
 8003ed4:	01c9      	lsls	r1, r1, #7
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2240      	movs	r2, #64	@ 0x40
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b40      	cmp	r3, #64	@ 0x40
 8003ee6:	d007      	beq.n	8003ef8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2140      	movs	r1, #64	@ 0x40
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	23e0      	movs	r3, #224	@ 0xe0
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d952      	bls.n	8003faa <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <HAL_SPI_Transmit+0x11e>
 8003f0c:	2316      	movs	r3, #22
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d143      	bne.n	8003f9e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1a:	881a      	ldrh	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f26:	1c9a      	adds	r2, r3, #2
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f3a:	e030      	b.n	8003f9e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2202      	movs	r2, #2
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d112      	bne.n	8003f70 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4e:	881a      	ldrh	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5a:	1c9a      	adds	r2, r3, #2
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f6e:	e016      	b.n	8003f9e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f70:	f7fd fcca 	bl	8001908 <HAL_GetTick>
 8003f74:	0002      	movs	r2, r0
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d802      	bhi.n	8003f86 <HAL_SPI_Transmit+0x18e>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	3301      	adds	r3, #1
 8003f84:	d102      	bne.n	8003f8c <HAL_SPI_Transmit+0x194>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d108      	bne.n	8003f9e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003f8c:	231f      	movs	r3, #31
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	2203      	movs	r2, #3
 8003f92:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	225d      	movs	r2, #93	@ 0x5d
 8003f98:	2101      	movs	r1, #1
 8003f9a:	5499      	strb	r1, [r3, r2]
          goto error;
 8003f9c:	e080      	b.n	80040a0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1c9      	bne.n	8003f3c <HAL_SPI_Transmit+0x144>
 8003fa8:	e053      	b.n	8004052 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <HAL_SPI_Transmit+0x1c4>
 8003fb2:	2316      	movs	r3, #22
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d145      	bne.n	8004048 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	7812      	ldrb	r2, [r2, #0]
 8003fc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003fe2:	e031      	b.n	8004048 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2202      	movs	r2, #2
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d113      	bne.n	800401a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	330c      	adds	r3, #12
 8003ffc:	7812      	ldrb	r2, [r2, #0]
 8003ffe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004018:	e016      	b.n	8004048 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800401a:	f7fd fc75 	bl	8001908 <HAL_GetTick>
 800401e:	0002      	movs	r2, r0
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d802      	bhi.n	8004030 <HAL_SPI_Transmit+0x238>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	3301      	adds	r3, #1
 800402e:	d102      	bne.n	8004036 <HAL_SPI_Transmit+0x23e>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d108      	bne.n	8004048 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8004036:	231f      	movs	r3, #31
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	2203      	movs	r2, #3
 800403c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	225d      	movs	r2, #93	@ 0x5d
 8004042:	2101      	movs	r1, #1
 8004044:	5499      	strb	r1, [r3, r2]
          goto error;
 8004046:	e02b      	b.n	80040a0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1c8      	bne.n	8003fe4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	6839      	ldr	r1, [r7, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	0018      	movs	r0, r3
 800405a:	f000 fcef 	bl	8004a3c <SPI_EndRxTxTransaction>
 800405e:	1e03      	subs	r3, r0, #0
 8004060:	d002      	beq.n	8004068 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10a      	bne.n	8004086 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800408a:	2b00      	cmp	r3, #0
 800408c:	d004      	beq.n	8004098 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800408e:	231f      	movs	r3, #31
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	e003      	b.n	80040a0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	225d      	movs	r2, #93	@ 0x5d
 800409c:	2101      	movs	r1, #1
 800409e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	225c      	movs	r2, #92	@ 0x5c
 80040a4:	2100      	movs	r1, #0
 80040a6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80040a8:	231f      	movs	r3, #31
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	781b      	ldrb	r3, [r3, #0]
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b008      	add	sp, #32
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b8:	b590      	push	{r4, r7, lr}
 80040ba:	b089      	sub	sp, #36	@ 0x24
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	1dbb      	adds	r3, r7, #6
 80040c6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040c8:	2117      	movs	r1, #23
 80040ca:	187b      	adds	r3, r7, r1
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	225d      	movs	r2, #93	@ 0x5d
 80040d4:	5c9b      	ldrb	r3, [r3, r2]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d003      	beq.n	80040e4 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80040dc:	187b      	adds	r3, r7, r1
 80040de:	2202      	movs	r2, #2
 80040e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80040e2:	e12b      	b.n	800433c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	2382      	movs	r3, #130	@ 0x82
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d113      	bne.n	8004118 <HAL_SPI_Receive+0x60>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10f      	bne.n	8004118 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	225d      	movs	r2, #93	@ 0x5d
 80040fc:	2104      	movs	r1, #4
 80040fe:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004100:	1dbb      	adds	r3, r7, #6
 8004102:	881c      	ldrh	r4, [r3, #0]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	0023      	movs	r3, r4
 8004110:	f000 f924 	bl	800435c <HAL_SPI_TransmitReceive>
 8004114:	0003      	movs	r3, r0
 8004116:	e118      	b.n	800434a <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	225c      	movs	r2, #92	@ 0x5c
 800411c:	5c9b      	ldrb	r3, [r3, r2]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_SPI_Receive+0x6e>
 8004122:	2302      	movs	r3, #2
 8004124:	e111      	b.n	800434a <HAL_SPI_Receive+0x292>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	225c      	movs	r2, #92	@ 0x5c
 800412a:	2101      	movs	r1, #1
 800412c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800412e:	f7fd fbeb 	bl	8001908 <HAL_GetTick>
 8004132:	0003      	movs	r3, r0
 8004134:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_SPI_Receive+0x8c>
 800413c:	1dbb      	adds	r3, r7, #6
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d104      	bne.n	800414e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8004144:	2317      	movs	r3, #23
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	2201      	movs	r2, #1
 800414a:	701a      	strb	r2, [r3, #0]
    goto error;
 800414c:	e0f6      	b.n	800433c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	225d      	movs	r2, #93	@ 0x5d
 8004152:	2104      	movs	r1, #4
 8004154:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1dba      	adds	r2, r7, #6
 8004166:	2144      	movs	r1, #68	@ 0x44
 8004168:	8812      	ldrh	r2, [r2, #0]
 800416a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	1dba      	adds	r2, r7, #6
 8004170:	2146      	movs	r1, #70	@ 0x46
 8004172:	8812      	ldrh	r2, [r2, #0]
 8004174:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	23e0      	movs	r3, #224	@ 0xe0
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	429a      	cmp	r2, r3
 800419e:	d908      	bls.n	80041b2 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	496a      	ldr	r1, [pc, #424]	@ (8004354 <HAL_SPI_Receive+0x29c>)
 80041ac:	400a      	ands	r2, r1
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	e008      	b.n	80041c4 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2180      	movs	r1, #128	@ 0x80
 80041be:	0149      	lsls	r1, r1, #5
 80041c0:	430a      	orrs	r2, r1
 80041c2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	2380      	movs	r3, #128	@ 0x80
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d10f      	bne.n	80041f0 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2140      	movs	r1, #64	@ 0x40
 80041dc:	438a      	bics	r2, r1
 80041de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	495b      	ldr	r1, [pc, #364]	@ (8004358 <HAL_SPI_Receive+0x2a0>)
 80041ec:	400a      	ands	r2, r1
 80041ee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2240      	movs	r2, #64	@ 0x40
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b40      	cmp	r3, #64	@ 0x40
 80041fc:	d007      	beq.n	800420e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2140      	movs	r1, #64	@ 0x40
 800420a:	430a      	orrs	r2, r1
 800420c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	23e0      	movs	r3, #224	@ 0xe0
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	429a      	cmp	r2, r3
 8004218:	d900      	bls.n	800421c <HAL_SPI_Receive+0x164>
 800421a:	e071      	b.n	8004300 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800421c:	e035      	b.n	800428a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2201      	movs	r2, #1
 8004226:	4013      	ands	r3, r2
 8004228:	2b01      	cmp	r3, #1
 800422a:	d117      	bne.n	800425c <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	330c      	adds	r3, #12
 8004232:	001a      	movs	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	7812      	ldrb	r2, [r2, #0]
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2246      	movs	r2, #70	@ 0x46
 800424c:	5a9b      	ldrh	r3, [r3, r2]
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b299      	uxth	r1, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2246      	movs	r2, #70	@ 0x46
 8004258:	5299      	strh	r1, [r3, r2]
 800425a:	e016      	b.n	800428a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800425c:	f7fd fb54 	bl	8001908 <HAL_GetTick>
 8004260:	0002      	movs	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d802      	bhi.n	8004272 <HAL_SPI_Receive+0x1ba>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	3301      	adds	r3, #1
 8004270:	d102      	bne.n	8004278 <HAL_SPI_Receive+0x1c0>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d108      	bne.n	800428a <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8004278:	2317      	movs	r3, #23
 800427a:	18fb      	adds	r3, r7, r3
 800427c:	2203      	movs	r2, #3
 800427e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	225d      	movs	r2, #93	@ 0x5d
 8004284:	2101      	movs	r1, #1
 8004286:	5499      	strb	r1, [r3, r2]
          goto error;
 8004288:	e058      	b.n	800433c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2246      	movs	r2, #70	@ 0x46
 800428e:	5a9b      	ldrh	r3, [r3, r2]
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1c3      	bne.n	800421e <HAL_SPI_Receive+0x166>
 8004296:	e039      	b.n	800430c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2201      	movs	r2, #1
 80042a0:	4013      	ands	r3, r2
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d115      	bne.n	80042d2 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	b292      	uxth	r2, r2
 80042b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b8:	1c9a      	adds	r2, r3, #2
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2246      	movs	r2, #70	@ 0x46
 80042c2:	5a9b      	ldrh	r3, [r3, r2]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b299      	uxth	r1, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2246      	movs	r2, #70	@ 0x46
 80042ce:	5299      	strh	r1, [r3, r2]
 80042d0:	e016      	b.n	8004300 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042d2:	f7fd fb19 	bl	8001908 <HAL_GetTick>
 80042d6:	0002      	movs	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d802      	bhi.n	80042e8 <HAL_SPI_Receive+0x230>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	3301      	adds	r3, #1
 80042e6:	d102      	bne.n	80042ee <HAL_SPI_Receive+0x236>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d108      	bne.n	8004300 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80042ee:	2317      	movs	r3, #23
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	2203      	movs	r2, #3
 80042f4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	225d      	movs	r2, #93	@ 0x5d
 80042fa:	2101      	movs	r1, #1
 80042fc:	5499      	strb	r1, [r3, r2]
          goto error;
 80042fe:	e01d      	b.n	800433c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2246      	movs	r2, #70	@ 0x46
 8004304:	5a9b      	ldrh	r3, [r3, r2]
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1c5      	bne.n	8004298 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	6839      	ldr	r1, [r7, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	0018      	movs	r0, r3
 8004314:	f000 fb34 	bl	8004980 <SPI_EndRxTransaction>
 8004318:	1e03      	subs	r3, r0, #0
 800431a:	d002      	beq.n	8004322 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004326:	2b00      	cmp	r3, #0
 8004328:	d004      	beq.n	8004334 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800432a:	2317      	movs	r3, #23
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	2201      	movs	r2, #1
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	e003      	b.n	800433c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	225d      	movs	r2, #93	@ 0x5d
 8004338:	2101      	movs	r1, #1
 800433a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	225c      	movs	r2, #92	@ 0x5c
 8004340:	2100      	movs	r1, #0
 8004342:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004344:	2317      	movs	r3, #23
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	781b      	ldrb	r3, [r3, #0]
}
 800434a:	0018      	movs	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	b007      	add	sp, #28
 8004350:	bd90      	pop	{r4, r7, pc}
 8004352:	46c0      	nop			@ (mov r8, r8)
 8004354:	ffffefff 	.word	0xffffefff
 8004358:	ffffbfff 	.word	0xffffbfff

0800435c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	@ 0x28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	001a      	movs	r2, r3
 800436a:	1cbb      	adds	r3, r7, #2
 800436c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800436e:	2301      	movs	r3, #1
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004372:	2323      	movs	r3, #35	@ 0x23
 8004374:	18fb      	adds	r3, r7, r3
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	225c      	movs	r2, #92	@ 0x5c
 800437e:	5c9b      	ldrb	r3, [r3, r2]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_SPI_TransmitReceive+0x2c>
 8004384:	2302      	movs	r3, #2
 8004386:	e1c4      	b.n	8004712 <HAL_SPI_TransmitReceive+0x3b6>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	225c      	movs	r2, #92	@ 0x5c
 800438c:	2101      	movs	r1, #1
 800438e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004390:	f7fd faba 	bl	8001908 <HAL_GetTick>
 8004394:	0003      	movs	r3, r0
 8004396:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004398:	201b      	movs	r0, #27
 800439a:	183b      	adds	r3, r7, r0
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	215d      	movs	r1, #93	@ 0x5d
 80043a0:	5c52      	ldrb	r2, [r2, r1]
 80043a2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80043aa:	2312      	movs	r3, #18
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	1cba      	adds	r2, r7, #2
 80043b0:	8812      	ldrh	r2, [r2, #0]
 80043b2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043b4:	183b      	adds	r3, r7, r0
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d011      	beq.n	80043e0 <HAL_SPI_TransmitReceive+0x84>
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	2382      	movs	r3, #130	@ 0x82
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d107      	bne.n	80043d6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d103      	bne.n	80043d6 <HAL_SPI_TransmitReceive+0x7a>
 80043ce:	183b      	adds	r3, r7, r0
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d004      	beq.n	80043e0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80043d6:	2323      	movs	r3, #35	@ 0x23
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	2202      	movs	r2, #2
 80043dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80043de:	e191      	b.n	8004704 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d006      	beq.n	80043f4 <HAL_SPI_TransmitReceive+0x98>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_SPI_TransmitReceive+0x98>
 80043ec:	1cbb      	adds	r3, r7, #2
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d104      	bne.n	80043fe <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80043f4:	2323      	movs	r3, #35	@ 0x23
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80043fc:	e182      	b.n	8004704 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	225d      	movs	r2, #93	@ 0x5d
 8004402:	5c9b      	ldrb	r3, [r3, r2]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b04      	cmp	r3, #4
 8004408:	d003      	beq.n	8004412 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	225d      	movs	r2, #93	@ 0x5d
 800440e:	2105      	movs	r1, #5
 8004410:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1cba      	adds	r2, r7, #2
 8004422:	2146      	movs	r1, #70	@ 0x46
 8004424:	8812      	ldrh	r2, [r2, #0]
 8004426:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1cba      	adds	r2, r7, #2
 800442c:	2144      	movs	r1, #68	@ 0x44
 800442e:	8812      	ldrh	r2, [r2, #0]
 8004430:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1cba      	adds	r2, r7, #2
 800443c:	8812      	ldrh	r2, [r2, #0]
 800443e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1cba      	adds	r2, r7, #2
 8004444:	8812      	ldrh	r2, [r2, #0]
 8004446:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	23e0      	movs	r3, #224	@ 0xe0
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	429a      	cmp	r2, r3
 800445e:	d908      	bls.n	8004472 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	49ac      	ldr	r1, [pc, #688]	@ (800471c <HAL_SPI_TransmitReceive+0x3c0>)
 800446c:	400a      	ands	r2, r1
 800446e:	605a      	str	r2, [r3, #4]
 8004470:	e008      	b.n	8004484 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2180      	movs	r1, #128	@ 0x80
 800447e:	0149      	lsls	r1, r1, #5
 8004480:	430a      	orrs	r2, r1
 8004482:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2240      	movs	r2, #64	@ 0x40
 800448c:	4013      	ands	r3, r2
 800448e:	2b40      	cmp	r3, #64	@ 0x40
 8004490:	d007      	beq.n	80044a2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2140      	movs	r1, #64	@ 0x40
 800449e:	430a      	orrs	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	23e0      	movs	r3, #224	@ 0xe0
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d800      	bhi.n	80044b0 <HAL_SPI_TransmitReceive+0x154>
 80044ae:	e083      	b.n	80045b8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_SPI_TransmitReceive+0x168>
 80044b8:	2312      	movs	r3, #18
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d000      	beq.n	80044c4 <HAL_SPI_TransmitReceive+0x168>
 80044c2:	e06d      	b.n	80045a0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c8:	881a      	ldrh	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d4:	1c9a      	adds	r2, r3, #2
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044e8:	e05a      	b.n	80045a0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2202      	movs	r2, #2
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d11b      	bne.n	8004530 <HAL_SPI_TransmitReceive+0x1d4>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d016      	beq.n	8004530 <HAL_SPI_TransmitReceive+0x1d4>
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	2b01      	cmp	r3, #1
 8004506:	d113      	bne.n	8004530 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450c:	881a      	ldrh	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004518:	1c9a      	adds	r2, r3, #2
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2201      	movs	r2, #1
 8004538:	4013      	ands	r3, r2
 800453a:	2b01      	cmp	r3, #1
 800453c:	d11c      	bne.n	8004578 <HAL_SPI_TransmitReceive+0x21c>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2246      	movs	r2, #70	@ 0x46
 8004542:	5a9b      	ldrh	r3, [r3, r2]
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d016      	beq.n	8004578 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004554:	b292      	uxth	r2, r2
 8004556:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455c:	1c9a      	adds	r2, r3, #2
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2246      	movs	r2, #70	@ 0x46
 8004566:	5a9b      	ldrh	r3, [r3, r2]
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b299      	uxth	r1, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2246      	movs	r2, #70	@ 0x46
 8004572:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004574:	2301      	movs	r3, #1
 8004576:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004578:	f7fd f9c6 	bl	8001908 <HAL_GetTick>
 800457c:	0002      	movs	r2, r0
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004584:	429a      	cmp	r2, r3
 8004586:	d80b      	bhi.n	80045a0 <HAL_SPI_TransmitReceive+0x244>
 8004588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458a:	3301      	adds	r3, #1
 800458c:	d008      	beq.n	80045a0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800458e:	2323      	movs	r3, #35	@ 0x23
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	2203      	movs	r2, #3
 8004594:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	225d      	movs	r2, #93	@ 0x5d
 800459a:	2101      	movs	r1, #1
 800459c:	5499      	strb	r1, [r3, r2]
        goto error;
 800459e:	e0b1      	b.n	8004704 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d19f      	bne.n	80044ea <HAL_SPI_TransmitReceive+0x18e>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2246      	movs	r2, #70	@ 0x46
 80045ae:	5a9b      	ldrh	r3, [r3, r2]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d199      	bne.n	80044ea <HAL_SPI_TransmitReceive+0x18e>
 80045b6:	e089      	b.n	80046cc <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_SPI_TransmitReceive+0x270>
 80045c0:	2312      	movs	r3, #18
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d000      	beq.n	80045cc <HAL_SPI_TransmitReceive+0x270>
 80045ca:	e074      	b.n	80046b6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	330c      	adds	r3, #12
 80045d6:	7812      	ldrb	r2, [r2, #0]
 80045d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045f2:	e060      	b.n	80046b6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2202      	movs	r2, #2
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d11c      	bne.n	800463c <HAL_SPI_TransmitReceive+0x2e0>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d017      	beq.n	800463c <HAL_SPI_TransmitReceive+0x2e0>
 800460c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460e:	2b01      	cmp	r3, #1
 8004610:	d114      	bne.n	800463c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	330c      	adds	r3, #12
 800461c:	7812      	ldrb	r2, [r2, #0]
 800461e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2201      	movs	r2, #1
 8004644:	4013      	ands	r3, r2
 8004646:	2b01      	cmp	r3, #1
 8004648:	d11e      	bne.n	8004688 <HAL_SPI_TransmitReceive+0x32c>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2246      	movs	r2, #70	@ 0x46
 800464e:	5a9b      	ldrh	r3, [r3, r2]
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d018      	beq.n	8004688 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	001a      	movs	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004662:	7812      	ldrb	r2, [r2, #0]
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2246      	movs	r2, #70	@ 0x46
 8004676:	5a9b      	ldrh	r3, [r3, r2]
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b299      	uxth	r1, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2246      	movs	r2, #70	@ 0x46
 8004682:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004684:	2301      	movs	r3, #1
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004688:	f7fd f93e 	bl	8001908 <HAL_GetTick>
 800468c:	0002      	movs	r2, r0
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004694:	429a      	cmp	r2, r3
 8004696:	d802      	bhi.n	800469e <HAL_SPI_TransmitReceive+0x342>
 8004698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469a:	3301      	adds	r3, #1
 800469c:	d102      	bne.n	80046a4 <HAL_SPI_TransmitReceive+0x348>
 800469e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d108      	bne.n	80046b6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80046a4:	2323      	movs	r3, #35	@ 0x23
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	2203      	movs	r2, #3
 80046aa:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	225d      	movs	r2, #93	@ 0x5d
 80046b0:	2101      	movs	r1, #1
 80046b2:	5499      	strb	r1, [r3, r2]
        goto error;
 80046b4:	e026      	b.n	8004704 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d199      	bne.n	80045f4 <HAL_SPI_TransmitReceive+0x298>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2246      	movs	r2, #70	@ 0x46
 80046c4:	5a9b      	ldrh	r3, [r3, r2]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d193      	bne.n	80045f4 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	0018      	movs	r0, r3
 80046d4:	f000 f9b2 	bl	8004a3c <SPI_EndRxTxTransaction>
 80046d8:	1e03      	subs	r3, r0, #0
 80046da:	d006      	beq.n	80046ea <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80046dc:	2323      	movs	r3, #35	@ 0x23
 80046de:	18fb      	adds	r3, r7, r3
 80046e0:	2201      	movs	r2, #1
 80046e2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d004      	beq.n	80046fc <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80046f2:	2323      	movs	r3, #35	@ 0x23
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	2201      	movs	r2, #1
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e003      	b.n	8004704 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	225d      	movs	r2, #93	@ 0x5d
 8004700:	2101      	movs	r1, #1
 8004702:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	225c      	movs	r2, #92	@ 0x5c
 8004708:	2100      	movs	r1, #0
 800470a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800470c:	2323      	movs	r3, #35	@ 0x23
 800470e:	18fb      	adds	r3, r7, r3
 8004710:	781b      	ldrb	r3, [r3, #0]
}
 8004712:	0018      	movs	r0, r3
 8004714:	46bd      	mov	sp, r7
 8004716:	b00a      	add	sp, #40	@ 0x28
 8004718:	bd80      	pop	{r7, pc}
 800471a:	46c0      	nop			@ (mov r8, r8)
 800471c:	ffffefff 	.word	0xffffefff

08004720 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	1dfb      	adds	r3, r7, #7
 800472e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004730:	f7fd f8ea 	bl	8001908 <HAL_GetTick>
 8004734:	0002      	movs	r2, r0
 8004736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	18d3      	adds	r3, r2, r3
 800473e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004740:	f7fd f8e2 	bl	8001908 <HAL_GetTick>
 8004744:	0003      	movs	r3, r0
 8004746:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004748:	4b3a      	ldr	r3, [pc, #232]	@ (8004834 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	015b      	lsls	r3, r3, #5
 800474e:	0d1b      	lsrs	r3, r3, #20
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	4353      	muls	r3, r2
 8004754:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004756:	e058      	b.n	800480a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	3301      	adds	r3, #1
 800475c:	d055      	beq.n	800480a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800475e:	f7fd f8d3 	bl	8001908 <HAL_GetTick>
 8004762:	0002      	movs	r2, r0
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	429a      	cmp	r2, r3
 800476c:	d902      	bls.n	8004774 <SPI_WaitFlagStateUntilTimeout+0x54>
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d142      	bne.n	80047fa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	21e0      	movs	r1, #224	@ 0xe0
 8004780:	438a      	bics	r2, r1
 8004782:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	2382      	movs	r3, #130	@ 0x82
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	429a      	cmp	r2, r3
 800478e:	d113      	bne.n	80047b8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	2380      	movs	r3, #128	@ 0x80
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	429a      	cmp	r2, r3
 800479a:	d005      	beq.n	80047a8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	2380      	movs	r3, #128	@ 0x80
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d107      	bne.n	80047b8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2140      	movs	r1, #64	@ 0x40
 80047b4:	438a      	bics	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047bc:	2380      	movs	r3, #128	@ 0x80
 80047be:	019b      	lsls	r3, r3, #6
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d110      	bne.n	80047e6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	491a      	ldr	r1, [pc, #104]	@ (8004838 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80047d0:	400a      	ands	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2180      	movs	r1, #128	@ 0x80
 80047e0:	0189      	lsls	r1, r1, #6
 80047e2:	430a      	orrs	r2, r1
 80047e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	225d      	movs	r2, #93	@ 0x5d
 80047ea:	2101      	movs	r1, #1
 80047ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	225c      	movs	r2, #92	@ 0x5c
 80047f2:	2100      	movs	r1, #0
 80047f4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e017      	b.n	800482a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	3b01      	subs	r3, #1
 8004808:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	4013      	ands	r3, r2
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	425a      	negs	r2, r3
 800481a:	4153      	adcs	r3, r2
 800481c:	b2db      	uxtb	r3, r3
 800481e:	001a      	movs	r2, r3
 8004820:	1dfb      	adds	r3, r7, #7
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d197      	bne.n	8004758 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	0018      	movs	r0, r3
 800482c:	46bd      	mov	sp, r7
 800482e:	b008      	add	sp, #32
 8004830:	bd80      	pop	{r7, pc}
 8004832:	46c0      	nop			@ (mov r8, r8)
 8004834:	20000000 	.word	0x20000000
 8004838:	ffffdfff 	.word	0xffffdfff

0800483c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	@ 0x28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800484a:	2317      	movs	r3, #23
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004852:	f7fd f859 	bl	8001908 <HAL_GetTick>
 8004856:	0002      	movs	r2, r0
 8004858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485a:	1a9b      	subs	r3, r3, r2
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	18d3      	adds	r3, r2, r3
 8004860:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004862:	f7fd f851 	bl	8001908 <HAL_GetTick>
 8004866:	0003      	movs	r3, r0
 8004868:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004872:	4b41      	ldr	r3, [pc, #260]	@ (8004978 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	0013      	movs	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	189b      	adds	r3, r3, r2
 800487c:	00da      	lsls	r2, r3, #3
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	0d1b      	lsrs	r3, r3, #20
 8004882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004884:	4353      	muls	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004888:	e068      	b.n	800495c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	23c0      	movs	r3, #192	@ 0xc0
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	429a      	cmp	r2, r3
 8004892:	d10a      	bne.n	80048aa <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d107      	bne.n	80048aa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	2117      	movs	r1, #23
 80048a2:	187b      	adds	r3, r7, r1
 80048a4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80048a6:	187b      	adds	r3, r7, r1
 80048a8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	3301      	adds	r3, #1
 80048ae:	d055      	beq.n	800495c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048b0:	f7fd f82a 	bl	8001908 <HAL_GetTick>
 80048b4:	0002      	movs	r2, r0
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048bc:	429a      	cmp	r2, r3
 80048be:	d902      	bls.n	80048c6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d142      	bne.n	800494c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	21e0      	movs	r1, #224	@ 0xe0
 80048d2:	438a      	bics	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	2382      	movs	r3, #130	@ 0x82
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	429a      	cmp	r2, r3
 80048e0:	d113      	bne.n	800490a <SPI_WaitFifoStateUntilTimeout+0xce>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	2380      	movs	r3, #128	@ 0x80
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d005      	beq.n	80048fa <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	2380      	movs	r3, #128	@ 0x80
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d107      	bne.n	800490a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2140      	movs	r1, #64	@ 0x40
 8004906:	438a      	bics	r2, r1
 8004908:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800490e:	2380      	movs	r3, #128	@ 0x80
 8004910:	019b      	lsls	r3, r3, #6
 8004912:	429a      	cmp	r2, r3
 8004914:	d110      	bne.n	8004938 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4916      	ldr	r1, [pc, #88]	@ (800497c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004922:	400a      	ands	r2, r1
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2180      	movs	r1, #128	@ 0x80
 8004932:	0189      	lsls	r1, r1, #6
 8004934:	430a      	orrs	r2, r1
 8004936:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	225d      	movs	r2, #93	@ 0x5d
 800493c:	2101      	movs	r1, #1
 800493e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	225c      	movs	r2, #92	@ 0x5c
 8004944:	2100      	movs	r1, #0
 8004946:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e010      	b.n	800496e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	3b01      	subs	r3, #1
 800495a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	4013      	ands	r3, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	429a      	cmp	r2, r3
 800496a:	d18e      	bne.n	800488a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	0018      	movs	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	b00a      	add	sp, #40	@ 0x28
 8004974:	bd80      	pop	{r7, pc}
 8004976:	46c0      	nop			@ (mov r8, r8)
 8004978:	20000000 	.word	0x20000000
 800497c:	ffffdfff 	.word	0xffffdfff

08004980 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af02      	add	r7, sp, #8
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	2382      	movs	r3, #130	@ 0x82
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	429a      	cmp	r2, r3
 8004996:	d113      	bne.n	80049c0 <SPI_EndRxTransaction+0x40>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	2380      	movs	r3, #128	@ 0x80
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d005      	beq.n	80049b0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	2380      	movs	r3, #128	@ 0x80
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d107      	bne.n	80049c0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2140      	movs	r1, #64	@ 0x40
 80049bc:	438a      	bics	r2, r1
 80049be:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	0013      	movs	r3, r2
 80049ca:	2200      	movs	r2, #0
 80049cc:	2180      	movs	r1, #128	@ 0x80
 80049ce:	f7ff fea7 	bl	8004720 <SPI_WaitFlagStateUntilTimeout>
 80049d2:	1e03      	subs	r3, r0, #0
 80049d4:	d007      	beq.n	80049e6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049da:	2220      	movs	r2, #32
 80049dc:	431a      	orrs	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e026      	b.n	8004a34 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	2382      	movs	r3, #130	@ 0x82
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d11f      	bne.n	8004a32 <SPI_EndRxTransaction+0xb2>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	2380      	movs	r3, #128	@ 0x80
 80049f8:	021b      	lsls	r3, r3, #8
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d005      	beq.n	8004a0a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	2380      	movs	r3, #128	@ 0x80
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d113      	bne.n	8004a32 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	23c0      	movs	r3, #192	@ 0xc0
 8004a0e:	00d9      	lsls	r1, r3, #3
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	0013      	movs	r3, r2
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f7ff ff0f 	bl	800483c <SPI_WaitFifoStateUntilTimeout>
 8004a1e:	1e03      	subs	r3, r0, #0
 8004a20:	d007      	beq.n	8004a32 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a26:	2220      	movs	r2, #32
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e000      	b.n	8004a34 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	0018      	movs	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b004      	add	sp, #16
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	23c0      	movs	r3, #192	@ 0xc0
 8004a4c:	0159      	lsls	r1, r3, #5
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	0013      	movs	r3, r2
 8004a56:	2200      	movs	r2, #0
 8004a58:	f7ff fef0 	bl	800483c <SPI_WaitFifoStateUntilTimeout>
 8004a5c:	1e03      	subs	r3, r0, #0
 8004a5e:	d007      	beq.n	8004a70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a64:	2220      	movs	r2, #32
 8004a66:	431a      	orrs	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e027      	b.n	8004ac0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	0013      	movs	r3, r2
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2180      	movs	r1, #128	@ 0x80
 8004a7e:	f7ff fe4f 	bl	8004720 <SPI_WaitFlagStateUntilTimeout>
 8004a82:	1e03      	subs	r3, r0, #0
 8004a84:	d007      	beq.n	8004a96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e014      	b.n	8004ac0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	23c0      	movs	r3, #192	@ 0xc0
 8004a9a:	00d9      	lsls	r1, r3, #3
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	0013      	movs	r3, r2
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f7ff fec9 	bl	800483c <SPI_WaitFifoStateUntilTimeout>
 8004aaa:	1e03      	subs	r3, r0, #0
 8004aac:	d007      	beq.n	8004abe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e000      	b.n	8004ac0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b004      	add	sp, #16
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e04a      	b.n	8004b70 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	223d      	movs	r2, #61	@ 0x3d
 8004ade:	5c9b      	ldrb	r3, [r3, r2]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d107      	bne.n	8004af6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	223c      	movs	r2, #60	@ 0x3c
 8004aea:	2100      	movs	r1, #0
 8004aec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	0018      	movs	r0, r3
 8004af2:	f7fc fded 	bl	80016d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	223d      	movs	r2, #61	@ 0x3d
 8004afa:	2102      	movs	r1, #2
 8004afc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3304      	adds	r3, #4
 8004b06:	0019      	movs	r1, r3
 8004b08:	0010      	movs	r0, r2
 8004b0a:	f000 f935 	bl	8004d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2248      	movs	r2, #72	@ 0x48
 8004b12:	2101      	movs	r1, #1
 8004b14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	223e      	movs	r2, #62	@ 0x3e
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	5499      	strb	r1, [r3, r2]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	223f      	movs	r2, #63	@ 0x3f
 8004b22:	2101      	movs	r1, #1
 8004b24:	5499      	strb	r1, [r3, r2]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2240      	movs	r2, #64	@ 0x40
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	5499      	strb	r1, [r3, r2]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2241      	movs	r2, #65	@ 0x41
 8004b32:	2101      	movs	r1, #1
 8004b34:	5499      	strb	r1, [r3, r2]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2242      	movs	r2, #66	@ 0x42
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	5499      	strb	r1, [r3, r2]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2243      	movs	r2, #67	@ 0x43
 8004b42:	2101      	movs	r1, #1
 8004b44:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2244      	movs	r2, #68	@ 0x44
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	5499      	strb	r1, [r3, r2]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2245      	movs	r2, #69	@ 0x45
 8004b52:	2101      	movs	r1, #1
 8004b54:	5499      	strb	r1, [r3, r2]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2246      	movs	r2, #70	@ 0x46
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	5499      	strb	r1, [r3, r2]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2247      	movs	r2, #71	@ 0x47
 8004b62:	2101      	movs	r1, #1
 8004b64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	223d      	movs	r2, #61	@ 0x3d
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	0018      	movs	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b002      	add	sp, #8
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b84:	2317      	movs	r3, #23
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	223c      	movs	r2, #60	@ 0x3c
 8004b90:	5c9b      	ldrb	r3, [r3, r2]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e0e5      	b.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	223c      	movs	r2, #60	@ 0x3c
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b14      	cmp	r3, #20
 8004ba6:	d900      	bls.n	8004baa <HAL_TIM_PWM_ConfigChannel+0x32>
 8004ba8:	e0d1      	b.n	8004d4e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	009a      	lsls	r2, r3, #2
 8004bae:	4b70      	ldr	r3, [pc, #448]	@ (8004d70 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004bb0:	18d3      	adds	r3, r2, r3
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	0011      	movs	r1, r2
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f000 f95e 	bl	8004e80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699a      	ldr	r2, [r3, #24]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2108      	movs	r1, #8
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2104      	movs	r1, #4
 8004be0:	438a      	bics	r2, r1
 8004be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6999      	ldr	r1, [r3, #24]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	619a      	str	r2, [r3, #24]
      break;
 8004bf6:	e0af      	b.n	8004d58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	0011      	movs	r1, r2
 8004c00:	0018      	movs	r0, r3
 8004c02:	f000 f9bd 	bl	8004f80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699a      	ldr	r2, [r3, #24]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2180      	movs	r1, #128	@ 0x80
 8004c12:	0109      	lsls	r1, r1, #4
 8004c14:	430a      	orrs	r2, r1
 8004c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4954      	ldr	r1, [pc, #336]	@ (8004d74 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004c24:	400a      	ands	r2, r1
 8004c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6999      	ldr	r1, [r3, #24]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	021a      	lsls	r2, r3, #8
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	619a      	str	r2, [r3, #24]
      break;
 8004c3c:	e08c      	b.n	8004d58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	0011      	movs	r1, r2
 8004c46:	0018      	movs	r0, r3
 8004c48:	f000 fa18 	bl	800507c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2108      	movs	r1, #8
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69da      	ldr	r2, [r3, #28]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2104      	movs	r1, #4
 8004c68:	438a      	bics	r2, r1
 8004c6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69d9      	ldr	r1, [r3, #28]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	61da      	str	r2, [r3, #28]
      break;
 8004c7e:	e06b      	b.n	8004d58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	0011      	movs	r1, r2
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f000 fa79 	bl	8005180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69da      	ldr	r2, [r3, #28]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2180      	movs	r1, #128	@ 0x80
 8004c9a:	0109      	lsls	r1, r1, #4
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69da      	ldr	r2, [r3, #28]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4932      	ldr	r1, [pc, #200]	@ (8004d74 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004cac:	400a      	ands	r2, r1
 8004cae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	69d9      	ldr	r1, [r3, #28]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	021a      	lsls	r2, r3, #8
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	61da      	str	r2, [r3, #28]
      break;
 8004cc4:	e048      	b.n	8004d58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	0011      	movs	r1, r2
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f000 faba 	bl	8005248 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2108      	movs	r1, #8
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2104      	movs	r1, #4
 8004cf0:	438a      	bics	r2, r1
 8004cf2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	691a      	ldr	r2, [r3, #16]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004d06:	e027      	b.n	8004d58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	0011      	movs	r1, r2
 8004d10:	0018      	movs	r0, r3
 8004d12:	f000 faf3 	bl	80052fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2180      	movs	r1, #128	@ 0x80
 8004d22:	0109      	lsls	r1, r1, #4
 8004d24:	430a      	orrs	r2, r1
 8004d26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4910      	ldr	r1, [pc, #64]	@ (8004d74 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004d34:	400a      	ands	r2, r1
 8004d36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	021a      	lsls	r2, r3, #8
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004d4c:	e004      	b.n	8004d58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004d4e:	2317      	movs	r3, #23
 8004d50:	18fb      	adds	r3, r7, r3
 8004d52:	2201      	movs	r2, #1
 8004d54:	701a      	strb	r2, [r3, #0]
      break;
 8004d56:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	223c      	movs	r2, #60	@ 0x3c
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	5499      	strb	r1, [r3, r2]

  return status;
 8004d60:	2317      	movs	r3, #23
 8004d62:	18fb      	adds	r3, r7, r3
 8004d64:	781b      	ldrb	r3, [r3, #0]
}
 8004d66:	0018      	movs	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	b006      	add	sp, #24
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	46c0      	nop			@ (mov r8, r8)
 8004d70:	08005564 	.word	0x08005564
 8004d74:	fffffbff 	.word	0xfffffbff

08004d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a37      	ldr	r2, [pc, #220]	@ (8004e68 <TIM_Base_SetConfig+0xf0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d008      	beq.n	8004da2 <TIM_Base_SetConfig+0x2a>
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	2380      	movs	r3, #128	@ 0x80
 8004d94:	05db      	lsls	r3, r3, #23
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d003      	beq.n	8004da2 <TIM_Base_SetConfig+0x2a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a33      	ldr	r2, [pc, #204]	@ (8004e6c <TIM_Base_SetConfig+0xf4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d108      	bne.n	8004db4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2270      	movs	r2, #112	@ 0x70
 8004da6:	4393      	bics	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a2c      	ldr	r2, [pc, #176]	@ (8004e68 <TIM_Base_SetConfig+0xf0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d014      	beq.n	8004de6 <TIM_Base_SetConfig+0x6e>
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	2380      	movs	r3, #128	@ 0x80
 8004dc0:	05db      	lsls	r3, r3, #23
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d00f      	beq.n	8004de6 <TIM_Base_SetConfig+0x6e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a28      	ldr	r2, [pc, #160]	@ (8004e6c <TIM_Base_SetConfig+0xf4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00b      	beq.n	8004de6 <TIM_Base_SetConfig+0x6e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a27      	ldr	r2, [pc, #156]	@ (8004e70 <TIM_Base_SetConfig+0xf8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d007      	beq.n	8004de6 <TIM_Base_SetConfig+0x6e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a26      	ldr	r2, [pc, #152]	@ (8004e74 <TIM_Base_SetConfig+0xfc>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d003      	beq.n	8004de6 <TIM_Base_SetConfig+0x6e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a25      	ldr	r2, [pc, #148]	@ (8004e78 <TIM_Base_SetConfig+0x100>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d108      	bne.n	8004df8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4a24      	ldr	r2, [pc, #144]	@ (8004e7c <TIM_Base_SetConfig+0x104>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2280      	movs	r2, #128	@ 0x80
 8004dfc:	4393      	bics	r3, r2
 8004dfe:	001a      	movs	r2, r3
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a11      	ldr	r2, [pc, #68]	@ (8004e68 <TIM_Base_SetConfig+0xf0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d007      	beq.n	8004e36 <TIM_Base_SetConfig+0xbe>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a12      	ldr	r2, [pc, #72]	@ (8004e74 <TIM_Base_SetConfig+0xfc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d003      	beq.n	8004e36 <TIM_Base_SetConfig+0xbe>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a11      	ldr	r2, [pc, #68]	@ (8004e78 <TIM_Base_SetConfig+0x100>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d103      	bne.n	8004e3e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	691a      	ldr	r2, [r3, #16]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d106      	bne.n	8004e5e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	2201      	movs	r2, #1
 8004e56:	4393      	bics	r3, r2
 8004e58:	001a      	movs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	611a      	str	r2, [r3, #16]
  }
}
 8004e5e:	46c0      	nop			@ (mov r8, r8)
 8004e60:	46bd      	mov	sp, r7
 8004e62:	b004      	add	sp, #16
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	46c0      	nop			@ (mov r8, r8)
 8004e68:	40012c00 	.word	0x40012c00
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40002000 	.word	0x40002000
 8004e74:	40014400 	.word	0x40014400
 8004e78:	40014800 	.word	0x40014800
 8004e7c:	fffffcff 	.word	0xfffffcff

08004e80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	2201      	movs	r2, #1
 8004e96:	4393      	bics	r3, r2
 8004e98:	001a      	movs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a2e      	ldr	r2, [pc, #184]	@ (8004f68 <TIM_OC1_SetConfig+0xe8>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2203      	movs	r2, #3
 8004eb6:	4393      	bics	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	4393      	bics	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a24      	ldr	r2, [pc, #144]	@ (8004f6c <TIM_OC1_SetConfig+0xec>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d007      	beq.n	8004eee <TIM_OC1_SetConfig+0x6e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a23      	ldr	r2, [pc, #140]	@ (8004f70 <TIM_OC1_SetConfig+0xf0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <TIM_OC1_SetConfig+0x6e>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a22      	ldr	r2, [pc, #136]	@ (8004f74 <TIM_OC1_SetConfig+0xf4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d10c      	bne.n	8004f08 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2208      	movs	r2, #8
 8004ef2:	4393      	bics	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2204      	movs	r2, #4
 8004f04:	4393      	bics	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a18      	ldr	r2, [pc, #96]	@ (8004f6c <TIM_OC1_SetConfig+0xec>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d007      	beq.n	8004f20 <TIM_OC1_SetConfig+0xa0>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a17      	ldr	r2, [pc, #92]	@ (8004f70 <TIM_OC1_SetConfig+0xf0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_OC1_SetConfig+0xa0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a16      	ldr	r2, [pc, #88]	@ (8004f74 <TIM_OC1_SetConfig+0xf4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d111      	bne.n	8004f44 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	4a15      	ldr	r2, [pc, #84]	@ (8004f78 <TIM_OC1_SetConfig+0xf8>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	4a14      	ldr	r2, [pc, #80]	@ (8004f7c <TIM_OC1_SetConfig+0xfc>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	46c0      	nop			@ (mov r8, r8)
 8004f60:	46bd      	mov	sp, r7
 8004f62:	b006      	add	sp, #24
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	46c0      	nop			@ (mov r8, r8)
 8004f68:	fffeff8f 	.word	0xfffeff8f
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40014400 	.word	0x40014400
 8004f74:	40014800 	.word	0x40014800
 8004f78:	fffffeff 	.word	0xfffffeff
 8004f7c:	fffffdff 	.word	0xfffffdff

08004f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	2210      	movs	r2, #16
 8004f96:	4393      	bics	r3, r2
 8004f98:	001a      	movs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4a2c      	ldr	r2, [pc, #176]	@ (8005060 <TIM_OC2_SetConfig+0xe0>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8005064 <TIM_OC2_SetConfig+0xe4>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	4393      	bics	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a22      	ldr	r2, [pc, #136]	@ (8005068 <TIM_OC2_SetConfig+0xe8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d10d      	bne.n	8004ffe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2280      	movs	r2, #128	@ 0x80
 8004fe6:	4393      	bics	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2240      	movs	r2, #64	@ 0x40
 8004ffa:	4393      	bics	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a19      	ldr	r2, [pc, #100]	@ (8005068 <TIM_OC2_SetConfig+0xe8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d007      	beq.n	8005016 <TIM_OC2_SetConfig+0x96>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a18      	ldr	r2, [pc, #96]	@ (800506c <TIM_OC2_SetConfig+0xec>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d003      	beq.n	8005016 <TIM_OC2_SetConfig+0x96>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a17      	ldr	r2, [pc, #92]	@ (8005070 <TIM_OC2_SetConfig+0xf0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d113      	bne.n	800503e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4a16      	ldr	r2, [pc, #88]	@ (8005074 <TIM_OC2_SetConfig+0xf4>)
 800501a:	4013      	ands	r3, r2
 800501c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4a15      	ldr	r2, [pc, #84]	@ (8005078 <TIM_OC2_SetConfig+0xf8>)
 8005022:	4013      	ands	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	621a      	str	r2, [r3, #32]
}
 8005058:	46c0      	nop			@ (mov r8, r8)
 800505a:	46bd      	mov	sp, r7
 800505c:	b006      	add	sp, #24
 800505e:	bd80      	pop	{r7, pc}
 8005060:	feff8fff 	.word	0xfeff8fff
 8005064:	fffffcff 	.word	0xfffffcff
 8005068:	40012c00 	.word	0x40012c00
 800506c:	40014400 	.word	0x40014400
 8005070:	40014800 	.word	0x40014800
 8005074:	fffffbff 	.word	0xfffffbff
 8005078:	fffff7ff 	.word	0xfffff7ff

0800507c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	4a31      	ldr	r2, [pc, #196]	@ (8005158 <TIM_OC3_SetConfig+0xdc>)
 8005092:	401a      	ands	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4a2d      	ldr	r2, [pc, #180]	@ (800515c <TIM_OC3_SetConfig+0xe0>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2203      	movs	r2, #3
 80050b0:	4393      	bics	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	4a27      	ldr	r2, [pc, #156]	@ (8005160 <TIM_OC3_SetConfig+0xe4>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a23      	ldr	r2, [pc, #140]	@ (8005164 <TIM_OC3_SetConfig+0xe8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d10d      	bne.n	80050f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	4a22      	ldr	r2, [pc, #136]	@ (8005168 <TIM_OC3_SetConfig+0xec>)
 80050de:	4013      	ands	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	4a1e      	ldr	r2, [pc, #120]	@ (800516c <TIM_OC3_SetConfig+0xf0>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005164 <TIM_OC3_SetConfig+0xe8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d007      	beq.n	800510e <TIM_OC3_SetConfig+0x92>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a1b      	ldr	r2, [pc, #108]	@ (8005170 <TIM_OC3_SetConfig+0xf4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d003      	beq.n	800510e <TIM_OC3_SetConfig+0x92>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a1a      	ldr	r2, [pc, #104]	@ (8005174 <TIM_OC3_SetConfig+0xf8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d113      	bne.n	8005136 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4a19      	ldr	r2, [pc, #100]	@ (8005178 <TIM_OC3_SetConfig+0xfc>)
 8005112:	4013      	ands	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4a18      	ldr	r2, [pc, #96]	@ (800517c <TIM_OC3_SetConfig+0x100>)
 800511a:	4013      	ands	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	621a      	str	r2, [r3, #32]
}
 8005150:	46c0      	nop			@ (mov r8, r8)
 8005152:	46bd      	mov	sp, r7
 8005154:	b006      	add	sp, #24
 8005156:	bd80      	pop	{r7, pc}
 8005158:	fffffeff 	.word	0xfffffeff
 800515c:	fffeff8f 	.word	0xfffeff8f
 8005160:	fffffdff 	.word	0xfffffdff
 8005164:	40012c00 	.word	0x40012c00
 8005168:	fffff7ff 	.word	0xfffff7ff
 800516c:	fffffbff 	.word	0xfffffbff
 8005170:	40014400 	.word	0x40014400
 8005174:	40014800 	.word	0x40014800
 8005178:	ffffefff 	.word	0xffffefff
 800517c:	ffffdfff 	.word	0xffffdfff

08005180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	4a24      	ldr	r2, [pc, #144]	@ (8005228 <TIM_OC4_SetConfig+0xa8>)
 8005196:	401a      	ands	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4a20      	ldr	r2, [pc, #128]	@ (800522c <TIM_OC4_SetConfig+0xac>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005230 <TIM_OC4_SetConfig+0xb0>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	021b      	lsls	r3, r3, #8
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005234 <TIM_OC4_SetConfig+0xb4>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	031b      	lsls	r3, r3, #12
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a17      	ldr	r2, [pc, #92]	@ (8005238 <TIM_OC4_SetConfig+0xb8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d007      	beq.n	80051f0 <TIM_OC4_SetConfig+0x70>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a16      	ldr	r2, [pc, #88]	@ (800523c <TIM_OC4_SetConfig+0xbc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_OC4_SetConfig+0x70>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a15      	ldr	r2, [pc, #84]	@ (8005240 <TIM_OC4_SetConfig+0xc0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d109      	bne.n	8005204 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	4a14      	ldr	r2, [pc, #80]	@ (8005244 <TIM_OC4_SetConfig+0xc4>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	019b      	lsls	r3, r3, #6
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	621a      	str	r2, [r3, #32]
}
 800521e:	46c0      	nop			@ (mov r8, r8)
 8005220:	46bd      	mov	sp, r7
 8005222:	b006      	add	sp, #24
 8005224:	bd80      	pop	{r7, pc}
 8005226:	46c0      	nop			@ (mov r8, r8)
 8005228:	ffffefff 	.word	0xffffefff
 800522c:	feff8fff 	.word	0xfeff8fff
 8005230:	fffffcff 	.word	0xfffffcff
 8005234:	ffffdfff 	.word	0xffffdfff
 8005238:	40012c00 	.word	0x40012c00
 800523c:	40014400 	.word	0x40014400
 8005240:	40014800 	.word	0x40014800
 8005244:	ffffbfff 	.word	0xffffbfff

08005248 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	4a21      	ldr	r2, [pc, #132]	@ (80052e4 <TIM_OC5_SetConfig+0x9c>)
 800525e:	401a      	ands	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4a1d      	ldr	r2, [pc, #116]	@ (80052e8 <TIM_OC5_SetConfig+0xa0>)
 8005274:	4013      	ands	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	4a19      	ldr	r2, [pc, #100]	@ (80052ec <TIM_OC5_SetConfig+0xa4>)
 8005286:	4013      	ands	r3, r2
 8005288:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	041b      	lsls	r3, r3, #16
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a15      	ldr	r2, [pc, #84]	@ (80052f0 <TIM_OC5_SetConfig+0xa8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d007      	beq.n	80052ae <TIM_OC5_SetConfig+0x66>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a14      	ldr	r2, [pc, #80]	@ (80052f4 <TIM_OC5_SetConfig+0xac>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d003      	beq.n	80052ae <TIM_OC5_SetConfig+0x66>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a13      	ldr	r2, [pc, #76]	@ (80052f8 <TIM_OC5_SetConfig+0xb0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d109      	bne.n	80052c2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	4a0c      	ldr	r2, [pc, #48]	@ (80052e4 <TIM_OC5_SetConfig+0x9c>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	621a      	str	r2, [r3, #32]
}
 80052dc:	46c0      	nop			@ (mov r8, r8)
 80052de:	46bd      	mov	sp, r7
 80052e0:	b006      	add	sp, #24
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	fffeffff 	.word	0xfffeffff
 80052e8:	fffeff8f 	.word	0xfffeff8f
 80052ec:	fffdffff 	.word	0xfffdffff
 80052f0:	40012c00 	.word	0x40012c00
 80052f4:	40014400 	.word	0x40014400
 80052f8:	40014800 	.word	0x40014800

080052fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	4a22      	ldr	r2, [pc, #136]	@ (800539c <TIM_OC6_SetConfig+0xa0>)
 8005312:	401a      	ands	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4a1e      	ldr	r2, [pc, #120]	@ (80053a0 <TIM_OC6_SetConfig+0xa4>)
 8005328:	4013      	ands	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	021b      	lsls	r3, r3, #8
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	4a1a      	ldr	r2, [pc, #104]	@ (80053a4 <TIM_OC6_SetConfig+0xa8>)
 800533c:	4013      	ands	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	051b      	lsls	r3, r3, #20
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a16      	ldr	r2, [pc, #88]	@ (80053a8 <TIM_OC6_SetConfig+0xac>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d007      	beq.n	8005364 <TIM_OC6_SetConfig+0x68>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a15      	ldr	r2, [pc, #84]	@ (80053ac <TIM_OC6_SetConfig+0xb0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_OC6_SetConfig+0x68>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a14      	ldr	r2, [pc, #80]	@ (80053b0 <TIM_OC6_SetConfig+0xb4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d109      	bne.n	8005378 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	4a13      	ldr	r2, [pc, #76]	@ (80053b4 <TIM_OC6_SetConfig+0xb8>)
 8005368:	4013      	ands	r3, r2
 800536a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	029b      	lsls	r3, r3, #10
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	621a      	str	r2, [r3, #32]
}
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	46bd      	mov	sp, r7
 8005396:	b006      	add	sp, #24
 8005398:	bd80      	pop	{r7, pc}
 800539a:	46c0      	nop			@ (mov r8, r8)
 800539c:	ffefffff 	.word	0xffefffff
 80053a0:	feff8fff 	.word	0xfeff8fff
 80053a4:	ffdfffff 	.word	0xffdfffff
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40014400 	.word	0x40014400
 80053b0:	40014800 	.word	0x40014800
 80053b4:	fffbffff 	.word	0xfffbffff

080053b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	223c      	movs	r2, #60	@ 0x3c
 80053c6:	5c9b      	ldrb	r3, [r3, r2]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e050      	b.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	223c      	movs	r2, #60	@ 0x3c
 80053d4:	2101      	movs	r1, #1
 80053d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	223d      	movs	r2, #61	@ 0x3d
 80053dc:	2102      	movs	r1, #2
 80053de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a21      	ldr	r2, [pc, #132]	@ (800547c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d108      	bne.n	800540c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4a20      	ldr	r2, [pc, #128]	@ (8005480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053fe:	4013      	ands	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2270      	movs	r2, #112	@ 0x70
 8005410:	4393      	bics	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a14      	ldr	r2, [pc, #80]	@ (800547c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00a      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	2380      	movs	r3, #128	@ 0x80
 8005436:	05db      	lsls	r3, r3, #23
 8005438:	429a      	cmp	r2, r3
 800543a:	d004      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a10      	ldr	r2, [pc, #64]	@ (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d10c      	bne.n	8005460 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2280      	movs	r2, #128	@ 0x80
 800544a:	4393      	bics	r3, r2
 800544c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	4313      	orrs	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	223d      	movs	r2, #61	@ 0x3d
 8005464:	2101      	movs	r1, #1
 8005466:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	223c      	movs	r2, #60	@ 0x3c
 800546c:	2100      	movs	r1, #0
 800546e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	0018      	movs	r0, r3
 8005474:	46bd      	mov	sp, r7
 8005476:	b004      	add	sp, #16
 8005478:	bd80      	pop	{r7, pc}
 800547a:	46c0      	nop			@ (mov r8, r8)
 800547c:	40012c00 	.word	0x40012c00
 8005480:	ff0fffff 	.word	0xff0fffff
 8005484:	40000400 	.word	0x40000400

08005488 <memset>:
 8005488:	0003      	movs	r3, r0
 800548a:	1882      	adds	r2, r0, r2
 800548c:	4293      	cmp	r3, r2
 800548e:	d100      	bne.n	8005492 <memset+0xa>
 8005490:	4770      	bx	lr
 8005492:	7019      	strb	r1, [r3, #0]
 8005494:	3301      	adds	r3, #1
 8005496:	e7f9      	b.n	800548c <memset+0x4>

08005498 <__libc_init_array>:
 8005498:	b570      	push	{r4, r5, r6, lr}
 800549a:	2600      	movs	r6, #0
 800549c:	4c0c      	ldr	r4, [pc, #48]	@ (80054d0 <__libc_init_array+0x38>)
 800549e:	4d0d      	ldr	r5, [pc, #52]	@ (80054d4 <__libc_init_array+0x3c>)
 80054a0:	1b64      	subs	r4, r4, r5
 80054a2:	10a4      	asrs	r4, r4, #2
 80054a4:	42a6      	cmp	r6, r4
 80054a6:	d109      	bne.n	80054bc <__libc_init_array+0x24>
 80054a8:	2600      	movs	r6, #0
 80054aa:	f000 f819 	bl	80054e0 <_init>
 80054ae:	4c0a      	ldr	r4, [pc, #40]	@ (80054d8 <__libc_init_array+0x40>)
 80054b0:	4d0a      	ldr	r5, [pc, #40]	@ (80054dc <__libc_init_array+0x44>)
 80054b2:	1b64      	subs	r4, r4, r5
 80054b4:	10a4      	asrs	r4, r4, #2
 80054b6:	42a6      	cmp	r6, r4
 80054b8:	d105      	bne.n	80054c6 <__libc_init_array+0x2e>
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
 80054bc:	00b3      	lsls	r3, r6, #2
 80054be:	58eb      	ldr	r3, [r5, r3]
 80054c0:	4798      	blx	r3
 80054c2:	3601      	adds	r6, #1
 80054c4:	e7ee      	b.n	80054a4 <__libc_init_array+0xc>
 80054c6:	00b3      	lsls	r3, r6, #2
 80054c8:	58eb      	ldr	r3, [r5, r3]
 80054ca:	4798      	blx	r3
 80054cc:	3601      	adds	r6, #1
 80054ce:	e7f2      	b.n	80054b6 <__libc_init_array+0x1e>
 80054d0:	080055b8 	.word	0x080055b8
 80054d4:	080055b8 	.word	0x080055b8
 80054d8:	080055bc 	.word	0x080055bc
 80054dc:	080055b8 	.word	0x080055b8

080054e0 <_init>:
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	46c0      	nop			@ (mov r8, r8)
 80054e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e6:	bc08      	pop	{r3}
 80054e8:	469e      	mov	lr, r3
 80054ea:	4770      	bx	lr

080054ec <_fini>:
 80054ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f2:	bc08      	pop	{r3}
 80054f4:	469e      	mov	lr, r3
 80054f6:	4770      	bx	lr
