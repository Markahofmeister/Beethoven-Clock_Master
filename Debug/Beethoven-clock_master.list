
Beethoven-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007440  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080074fc  080074fc  000084fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075e4  080075e4  0000907c  2**0
                  CONTENTS
  4 .ARM          00000000  080075e4  080075e4  0000907c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075e4  080075e4  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075e4  080075e4  000085e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075e8  080075e8  000085e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080075ec  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  2000007c  08007668  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08007668  00009470  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017097  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000347a  00000000  00000000  0002013b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  000235b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001156  00000000  00000000  00024bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191ec  00000000  00000000  00025d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b72f  00000000  00000000  0003ef3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c4a4  00000000  00000000  0005a669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6b0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050bc  00000000  00000000  000f6b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000fbc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000007c 	.word	0x2000007c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080074e4 	.word	0x080074e4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000080 	.word	0x20000080
 8000100:	080074e4 	.word	0x080074e4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-low hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2200      	movs	r2, #0
 800025a:	0019      	movs	r1, r3
 800025c:	f003 f87f 	bl	800335e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2201      	movs	r2, #1
 800026c:	0019      	movs	r1, r3
 800026e:	f003 f876 	bl	800335e <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f006 f934 	bl	80064e4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f006 f8e3 	bl	800644c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f003 f889 	bl	8003570 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f003 f99d 	bl	80037c4 <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	080074fc 	.word	0x080074fc

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f003 f84b 	bl	8003570 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f003 f825 	bl	8003570 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f003 f939 	bl	80037c4 <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	08007500 	.word	0x08007500

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f002 ffe1 	bl	8003570 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f003 f8f5 	bl	80037c4 <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	08007504 	.word	0x08007504

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f002 ff91 	bl	8003570 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f003 f8a5 	bl	80037c4 <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	08007508 	.word	0x08007508
 8000700:	08007510 	.word	0x08007510

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f002 ff0f 	bl	8003570 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f003 f823 	bl	80037c4 <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f002 feb0 	bl	8003570 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f002 fe8f 	bl	8003570 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f002 ffa3 	bl	80037c4 <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	08007508 	.word	0x08007508
 8000894:	08007510 	.word	0x08007510

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f002 fe35 	bl	8003570 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f002 fe13 	bl	8003570 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f002 ff30 	bl	80037c4 <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	08007518 	.word	0x08007518
 8000978:	08007508 	.word	0x08007508

0800097c <NAU9315YG_Init>:

#ifndef NAU8315YG_H_
#include "../Inc/NAU8315YG.h"
#endif

void NAU9315YG_Init(NAU8315YG *nau, I2S_HandleTypeDef *hi2s, GPIO_TypeDef *enablePort, uint32_t enablePin) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]

	nau->hi2s = hi2s;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	601a      	str	r2, [r3, #0]

	nau->enablePort = enablePort;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	605a      	str	r2, [r3, #4]
	nau->enablePin = enablePin;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	609a      	str	r2, [r3, #8]

	NAU8315YG_AmpDisable(nau);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f804 	bl	80009ac <NAU8315YG_AmpDisable>

}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b004      	add	sp, #16
 80009aa:	bd80      	pop	{r7, pc}

080009ac <NAU8315YG_AmpDisable>:
	nau->ampEnableFlag = 1;

}


void NAU8315YG_AmpDisable(NAU8315YG *nau) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

	// Set enable pin high
	HAL_GPIO_WritePin(nau->enablePort, nau->enablePin, GPIO_PIN_RESET);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6858      	ldr	r0, [r3, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	2200      	movs	r2, #0
 80009c0:	0019      	movs	r1, r3
 80009c2:	f002 fccc 	bl	800335e <HAL_GPIO_WritePin>

	nau->ampEnableFlag = 0;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2200      	movs	r2, #0
 80009ca:	731a      	strb	r2, [r3, #12]

}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 80009d4:	b5b0      	push	{r4, r5, r7, lr}
 80009d6:	b09a      	sub	sp, #104	@ 0x68
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80009e0:	2567      	movs	r5, #103	@ 0x67
 80009e2:	197b      	adds	r3, r7, r5
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 80009e8:	243c      	movs	r4, #60	@ 0x3c
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	0018      	movs	r0, r3
 80009ee:	2328      	movs	r3, #40	@ 0x28
 80009f0:	001a      	movs	r2, r3
 80009f2:	2100      	movs	r1, #0
 80009f4:	f006 fd40 	bl	8007478 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	781a      	ldrb	r2, [r3, #0]
 80009fc:	0021      	movs	r1, r4
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	785b      	ldrb	r3, [r3, #1]
 8000a06:	3301      	adds	r3, #1
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	789a      	ldrb	r2, [r3, #2]
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	685a      	ldr	r2, [r3, #4]
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	78da      	ldrb	r2, [r3, #3]
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	78da      	ldrb	r2, [r3, #3]
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a2e:	0008      	movs	r0, r1
 8000a30:	183b      	adds	r3, r7, r0
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a36:	183b      	adds	r3, r7, r0
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000a3c:	183b      	adds	r3, r7, r0
 8000a3e:	4a19      	ldr	r2, [pc, #100]	@ (8000aa4 <initRTCInternalAlarm+0xd0>)
 8000a40:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000a42:	183b      	adds	r3, r7, r0
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000a48:	183b      	adds	r3, r7, r0
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 8000a4e:	183b      	adds	r3, r7, r0
 8000a50:	2220      	movs	r2, #32
 8000a52:	2101      	movs	r1, #1
 8000a54:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 8000a56:	0001      	movs	r1, r0
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2280      	movs	r2, #128	@ 0x80
 8000a5c:	0052      	lsls	r2, r2, #1
 8000a5e:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8000a60:	197c      	adds	r4, r7, r5
 8000a62:	1879      	adds	r1, r7, r1
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2200      	movs	r2, #0
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f004 ffbf 	bl	80059ec <HAL_RTC_SetAlarm_IT>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000a72:	197b      	adds	r3, r7, r5
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d002      	beq.n	8000a80 <initRTCInternalAlarm+0xac>
		return halRet;
 8000a7a:	197b      	adds	r3, r7, r5
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	e00d      	b.n	8000a9c <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8000a80:	2567      	movs	r5, #103	@ 0x67
 8000a82:	197c      	adds	r4, r7, r5
 8000a84:	2380      	movs	r3, #128	@ 0x80
 8000a86:	005a      	lsls	r2, r3, #1
 8000a88:	2314      	movs	r3, #20
 8000a8a:	18f9      	adds	r1, r7, r3
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f005 f8ec 	bl	8005c6c <HAL_RTC_GetAlarm>
 8000a94:	0003      	movs	r3, r0
 8000a96:	7023      	strb	r3, [r4, #0]
	return halRet;
 8000a98:	197b      	adds	r3, r7, r5
 8000a9a:	781b      	ldrb	r3, [r3, #0]

}
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b01a      	add	sp, #104	@ 0x68
 8000aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8000aa4:	80800080 	.word	0x80800080

08000aa8 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	0018      	movs	r0, r3
 8000abc:	f004 feec 	bl	8005898 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f004 ff42 	bl	8005950 <HAL_RTC_GetDate>

}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b004      	add	sp, #16
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad6:	b08d      	sub	sp, #52	@ 0x34
 8000ad8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ada:	f001 ffcf 	bl	8002a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ade:	f000 f98b 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae2:	f000 fbed 	bl	80012c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ae6:	f000 fbc5 	bl	8001274 <MX_DMA_Init>
  MX_RTC_Init();
 8000aea:	f000 fa5b 	bl	8000fa4 <MX_RTC_Init>
  MX_I2C1_Init();
 8000aee:	f000 f9ef 	bl	8000ed0 <MX_I2C1_Init>
  MX_I2S1_Init();
 8000af2:	f000 fa2d 	bl	8000f50 <MX_I2S1_Init>
  MX_SPI2_Init();
 8000af6:	f000 facf 	bl	8001098 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000afa:	f000 fb0b 	bl	8001114 <MX_TIM2_Init>
  MX_TIM14_Init();
 8000afe:	f000 fb69 	bl	80011d4 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000b02:	f000 fb8d 	bl	8001220 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	  // HAL Status handle for error-checking
	  HAL_StatusTypeDef halRet = HAL_OK;
 8000b06:	2317      	movs	r3, #23
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]

	  // Determine which time format we will be using
	  	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 8000b0e:	4b9f      	ldr	r3, [pc, #636]	@ (8000d8c <main+0x2b8>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2210      	movs	r2, #16
 8000b14:	0011      	movs	r1, r2
 8000b16:	0018      	movs	r0, r3
 8000b18:	f002 fc04 	bl	8003324 <HAL_GPIO_ReadPin>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	001a      	movs	r2, r3
 8000b20:	4b9b      	ldr	r3, [pc, #620]	@ (8000d90 <main+0x2bc>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d103      	bne.n	8000b30 <main+0x5c>
	  	  userTimeFormat = RTC_HOURFORMAT_12;
 8000b28:	4b9a      	ldr	r3, [pc, #616]	@ (8000d94 <main+0x2c0>)
 8000b2a:	2240      	movs	r2, #64	@ 0x40
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	e002      	b.n	8000b36 <main+0x62>
	  	}
	  	else {
	  	  userTimeFormat = RTC_HOURFORMAT_24;
 8000b30:	4b98      	ldr	r3, [pc, #608]	@ (8000d94 <main+0x2c0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
	  	}

  	  // Set Smooth Calibration Value
	  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8000b36:	4b98      	ldr	r3, [pc, #608]	@ (8000d98 <main+0x2c4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2517      	movs	r5, #23
 8000b3c:	197c      	adds	r4, r7, r5
 8000b3e:	2280      	movs	r2, #128	@ 0x80
 8000b40:	01d1      	lsls	r1, r2, #7
 8000b42:	4896      	ldr	r0, [pc, #600]	@ (8000d9c <main+0x2c8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	f005 fa86 	bl	8006056 <HAL_RTCEx_SetSmoothCalib>
 8000b4a:	0003      	movs	r3, r0
 8000b4c:	7023      	strb	r3, [r4, #0]
									RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
	  if(halRet != HAL_OK) {
 8000b4e:	197b      	adds	r3, r7, r5
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <main+0x86>
		  // Failure to talk to RTC is a hard failure
		  dispFailure();
 8000b56:	f001 f939 	bl	8001dcc <dispFailure>
	  }

	  // Init the internal RTC alarm time to track the current time
	  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8000b5a:	2517      	movs	r5, #23
 8000b5c:	197c      	adds	r4, r7, r5
 8000b5e:	4a90      	ldr	r2, [pc, #576]	@ (8000da0 <main+0x2cc>)
 8000b60:	4990      	ldr	r1, [pc, #576]	@ (8000da4 <main+0x2d0>)
 8000b62:	4b8e      	ldr	r3, [pc, #568]	@ (8000d9c <main+0x2c8>)
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff ff35 	bl	80009d4 <initRTCInternalAlarm>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	7023      	strb	r3, [r4, #0]
	  if(halRet != HAL_OK) {
 8000b6e:	197b      	adds	r3, r7, r5
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <main+0xa6>
		  // Failure to initialize RTC alarm is a hard failure
		  dispFailure();
 8000b76:	f001 f929 	bl	8001dcc <dispFailure>
		}

	  // Initialize all GPIOs to be used with 7 segment display
		sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000b7a:	2380      	movs	r3, #128	@ 0x80
 8000b7c:	009c      	lsls	r4, r3, #2
 8000b7e:	2380      	movs	r3, #128	@ 0x80
 8000b80:	00dd      	lsls	r5, r3, #3
 8000b82:	2680      	movs	r6, #128	@ 0x80
 8000b84:	2340      	movs	r3, #64	@ 0x40
 8000b86:	469c      	mov	ip, r3
 8000b88:	2380      	movs	r3, #128	@ 0x80
 8000b8a:	011a      	lsls	r2, r3, #4
 8000b8c:	4b86      	ldr	r3, [pc, #536]	@ (8000da8 <main+0x2d4>)
 8000b8e:	6819      	ldr	r1, [r3, #0]
 8000b90:	4b86      	ldr	r3, [pc, #536]	@ (8000dac <main+0x2d8>)
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	4b86      	ldr	r3, [pc, #536]	@ (8000db0 <main+0x2dc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	9304      	str	r3, [sp, #16]
 8000b9a:	9003      	str	r0, [sp, #12]
 8000b9c:	9102      	str	r1, [sp, #8]
 8000b9e:	4b85      	ldr	r3, [pc, #532]	@ (8000db4 <main+0x2e0>)
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	9200      	str	r2, [sp, #0]
 8000ba4:	4663      	mov	r3, ip
 8000ba6:	0032      	movs	r2, r6
 8000ba8:	0029      	movs	r1, r5
 8000baa:	0020      	movs	r0, r4
 8000bac:	f001 f9c0 	bl	8001f30 <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


		halRet = updateAndDisplayTime();
 8000bb0:	2517      	movs	r5, #23
 8000bb2:	197c      	adds	r4, r7, r5
 8000bb4:	f000 fc96 	bl	80014e4 <updateAndDisplayTime>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000bbc:	197b      	adds	r3, r7, r5
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <main+0xf4>
		  // Failure to display current time is a hard failure
		  dispFailure();
 8000bc4:	f001 f902 	bl	8001dcc <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

		// Used to separate return initializations into critical and non-critical errors.
		uint8_t initRet = 0;
 8000bc8:	2116      	movs	r1, #22
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]

		initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000bd0:	4b75      	ldr	r3, [pc, #468]	@ (8000da8 <main+0x2d4>)
 8000bd2:	681d      	ldr	r5, [r3, #0]
 8000bd4:	2380      	movs	r3, #128	@ 0x80
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	4a77      	ldr	r2, [pc, #476]	@ (8000db8 <main+0x2e4>)
 8000bda:	7812      	ldrb	r2, [r2, #0]
 8000bdc:	187c      	adds	r4, r7, r1
 8000bde:	4e77      	ldr	r6, [pc, #476]	@ (8000dbc <main+0x2e8>)
 8000be0:	4977      	ldr	r1, [pc, #476]	@ (8000dc0 <main+0x2ec>)
 8000be2:	4878      	ldr	r0, [pc, #480]	@ (8000dc4 <main+0x2f0>)
 8000be4:	9201      	str	r2, [sp, #4]
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	0033      	movs	r3, r6
 8000bea:	002a      	movs	r2, r5
 8000bec:	f7ff fb16 	bl	800021c <capTouch_Init>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	7023      	strb	r3, [r4, #0]
								&capTouchResetPort, capTouchResetPin, capTouchChannels);
		if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8000bf4:	2116      	movs	r1, #22
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d007      	beq.n	8000c0e <main+0x13a>
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d003      	beq.n	8000c0e <main+0x13a>
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	d102      	bne.n	8000c14 <main+0x140>
			/* Critical Errors:
			 * 1 = Failure to read correct device ID
			 * 2 = Failure to read Keys
			 * 3 = Failure to enable keys
			 */
			dispFailure();
 8000c0e:	f001 f8dd 	bl	8001dcc <dispFailure>
 8000c12:	e00d      	b.n	8000c30 <main+0x15c>
		}
		else if (initRet == 2) {
 8000c14:	2316      	movs	r3, #22
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d102      	bne.n	8000c24 <main+0x150>
			/*
			 * Non-critical Errors:
			 * 2 = Failure to Recalibrate
			 */
			dispFault();
 8000c1e:	f001 f8c5 	bl	8001dac <dispFault>
 8000c22:	e005      	b.n	8000c30 <main+0x15c>
		}
		else if(initRet == 0) {
 8000c24:	2316      	movs	r3, #22
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d100      	bne.n	8000c30 <main+0x15c>
			// initRet = 0 = all is well
			__NOP();
 8000c2e:	46c0      	nop			@ (mov r8, r8)
		}

		// Set averaging factor
		uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000c30:	4b65      	ldr	r3, [pc, #404]	@ (8000dc8 <main+0x2f4>)
 8000c32:	781a      	ldrb	r2, [r3, #0]
 8000c34:	210c      	movs	r1, #12
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	4b63      	ldr	r3, [pc, #396]	@ (8000dc8 <main+0x2f4>)
 8000c3c:	781a      	ldrb	r2, [r3, #0]
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	705a      	strb	r2, [r3, #1]
 8000c42:	4b61      	ldr	r3, [pc, #388]	@ (8000dc8 <main+0x2f4>)
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	709a      	strb	r2, [r3, #2]
 8000c4a:	4b5f      	ldr	r3, [pc, #380]	@ (8000dc8 <main+0x2f4>)
 8000c4c:	781a      	ldrb	r2, [r3, #0]
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	70da      	strb	r2, [r3, #3]
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2200      	movs	r2, #0
 8000c56:	711a      	strb	r2, [r3, #4]
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	715a      	strb	r2, [r3, #5]
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000c64:	2517      	movs	r5, #23
 8000c66:	197c      	adds	r4, r7, r5
 8000c68:	187a      	adds	r2, r7, r1
 8000c6a:	4b56      	ldr	r3, [pc, #344]	@ (8000dc4 <main+0x2f0>)
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f7ff fd48 	bl	8000704 <capTouch_SetAveragingFactor>
 8000c74:	0003      	movs	r3, r0
 8000c76:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8000c78:	197b      	adds	r3, r7, r5
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <main+0x1b0>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 8000c80:	f001 f894 	bl	8001dac <dispFault>
		}

		// Set detection integration factors
		uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000c84:	4b51      	ldr	r3, [pc, #324]	@ (8000dcc <main+0x2f8>)
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	4b4f      	ldr	r3, [pc, #316]	@ (8000dcc <main+0x2f8>)
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	705a      	strb	r2, [r3, #1]
 8000c94:	4b4d      	ldr	r3, [pc, #308]	@ (8000dcc <main+0x2f8>)
 8000c96:	781a      	ldrb	r2, [r3, #0]
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	709a      	strb	r2, [r3, #2]
 8000c9c:	4b4b      	ldr	r3, [pc, #300]	@ (8000dcc <main+0x2f8>)
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	70da      	strb	r2, [r3, #3]
 8000ca4:	4b49      	ldr	r3, [pc, #292]	@ (8000dcc <main+0x2f8>)
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	711a      	strb	r2, [r3, #4]
 8000cac:	4b47      	ldr	r3, [pc, #284]	@ (8000dcc <main+0x2f8>)
 8000cae:	781a      	ldrb	r2, [r3, #0]
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	715a      	strb	r2, [r3, #5]
 8000cb4:	4b45      	ldr	r3, [pc, #276]	@ (8000dcc <main+0x2f8>)
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000cbc:	2517      	movs	r5, #23
 8000cbe:	197c      	adds	r4, r7, r5
 8000cc0:	1d3a      	adds	r2, r7, #4
 8000cc2:	4b40      	ldr	r3, [pc, #256]	@ (8000dc4 <main+0x2f0>)
 8000cc4:	0011      	movs	r1, r2
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f7ff fde6 	bl	8000898 <capTouch_SetDetectionIntegrator>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000cd0:	197b      	adds	r3, r7, r5
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <main+0x208>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 8000cd8:	f001 f868 	bl	8001dac <dispFault>
		}

		userAlarmToggle = false;			//Default to off
 8000cdc:	4b3c      	ldr	r3, [pc, #240]	@ (8000dd0 <main+0x2fc>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

		if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8000ce2:	4b3c      	ldr	r3, [pc, #240]	@ (8000dd4 <main+0x300>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d9c <main+0x2c8>)
 8000ce8:	0011      	movs	r1, r2
 8000cea:	0018      	movs	r0, r3
 8000cec:	f005 fa83 	bl	80061f6 <HAL_RTCEx_BKUPRead>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d11c      	bne.n	8000d32 <main+0x25e>

			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8000cf8:	4b37      	ldr	r3, [pc, #220]	@ (8000dd8 <main+0x304>)
 8000cfa:	6819      	ldr	r1, [r3, #0]
 8000cfc:	4b27      	ldr	r3, [pc, #156]	@ (8000d9c <main+0x2c8>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	0018      	movs	r0, r3
 8000d02:	f005 fa5b 	bl	80061bc <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8000d06:	4b35      	ldr	r3, [pc, #212]	@ (8000ddc <main+0x308>)
 8000d08:	6819      	ldr	r1, [r3, #0]
 8000d0a:	4b24      	ldr	r3, [pc, #144]	@ (8000d9c <main+0x2c8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f005 fa54 	bl	80061bc <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8000d14:	4b32      	ldr	r3, [pc, #200]	@ (8000de0 <main+0x30c>)
 8000d16:	6819      	ldr	r1, [r3, #0]
 8000d18:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <main+0x2c8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f005 fa4d 	bl	80061bc <HAL_RTCEx_BKUPWrite>

			// Write backup register with a non-zero value to signify that it has been initialized before
			HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8000d22:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd4 <main+0x300>)
 8000d24:	6819      	ldr	r1, [r3, #0]
 8000d26:	2301      	movs	r3, #1
 8000d28:	425a      	negs	r2, r3
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <main+0x2c8>)
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f005 fa45 	bl	80061bc <HAL_RTCEx_BKUPWrite>

		}

		userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8000d32:	4b29      	ldr	r3, [pc, #164]	@ (8000dd8 <main+0x304>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4b19      	ldr	r3, [pc, #100]	@ (8000d9c <main+0x2c8>)
 8000d38:	0011      	movs	r1, r2
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f005 fa5b 	bl	80061f6 <HAL_RTCEx_BKUPRead>
 8000d40:	0003      	movs	r3, r0
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b27      	ldr	r3, [pc, #156]	@ (8000de4 <main+0x310>)
 8000d46:	701a      	strb	r2, [r3, #0]
		userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8000d48:	4b24      	ldr	r3, [pc, #144]	@ (8000ddc <main+0x308>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <main+0x2c8>)
 8000d4e:	0011      	movs	r1, r2
 8000d50:	0018      	movs	r0, r3
 8000d52:	f005 fa50 	bl	80061f6 <HAL_RTCEx_BKUPRead>
 8000d56:	0003      	movs	r3, r0
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b22      	ldr	r3, [pc, #136]	@ (8000de4 <main+0x310>)
 8000d5c:	705a      	strb	r2, [r3, #1]
		userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8000d5e:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <main+0x30c>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <main+0x2c8>)
 8000d64:	0011      	movs	r1, r2
 8000d66:	0018      	movs	r0, r3
 8000d68:	f005 fa45 	bl	80061f6 <HAL_RTCEx_BKUPRead>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <main+0x310>)
 8000d72:	70da      	strb	r2, [r3, #3]
//		   }
//		 }

     // TODO: Init i2s amplifier

		NAU9315YG_Init(&i2sAmp, &hi2s1, i2sAmp_enablePort, i2sAmp_enablePin);
 8000d74:	4b1c      	ldr	r3, [pc, #112]	@ (8000de8 <main+0x314>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <main+0x318>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	491c      	ldr	r1, [pc, #112]	@ (8000df0 <main+0x31c>)
 8000d7e:	481d      	ldr	r0, [pc, #116]	@ (8000df4 <main+0x320>)
 8000d80:	f7ff fdfc 	bl	800097c <NAU9315YG_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

		__NOP();
 8000d84:	46c0      	nop			@ (mov r8, r8)

  while (1)
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	e7fd      	b.n	8000d86 <main+0x2b2>
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000040 	.word	0x20000040
 8000d94:	200000cc 	.word	0x200000cc
 8000d98:	2000002c 	.word	0x2000002c
 8000d9c:	200001bc 	.word	0x200001bc
 8000da0:	200000b0 	.word	0x200000b0
 8000da4:	2000009c 	.word	0x2000009c
 8000da8:	20000050 	.word	0x20000050
 8000dac:	2000004c 	.word	0x2000004c
 8000db0:	20000030 	.word	0x20000030
 8000db4:	20000014 	.word	0x20000014
 8000db8:	20000010 	.word	0x20000010
 8000dbc:	2000000c 	.word	0x2000000c
 8000dc0:	200000d0 	.word	0x200000d0
 8000dc4:	200003ec 	.word	0x200003ec
 8000dc8:	20000011 	.word	0x20000011
 8000dcc:	20000012 	.word	0x20000012
 8000dd0:	20000099 	.word	0x20000099
 8000dd4:	2000003c 	.word	0x2000003c
 8000dd8:	200000c8 	.word	0x200000c8
 8000ddc:	20000034 	.word	0x20000034
 8000de0:	20000038 	.word	0x20000038
 8000de4:	200000b4 	.word	0x200000b4
 8000de8:	20000044 	.word	0x20000044
 8000dec:	20000048 	.word	0x20000048
 8000df0:	20000124 	.word	0x20000124
 8000df4:	20000400 	.word	0x20000400

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b093      	sub	sp, #76	@ 0x4c
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	2410      	movs	r4, #16
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	0018      	movs	r0, r3
 8000e04:	2338      	movs	r3, #56	@ 0x38
 8000e06:	001a      	movs	r2, r3
 8000e08:	2100      	movs	r1, #0
 8000e0a:	f006 fb35 	bl	8007478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0e:	003b      	movs	r3, r7
 8000e10:	0018      	movs	r0, r3
 8000e12:	2310      	movs	r3, #16
 8000e14:	001a      	movs	r2, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	f006 fb2e 	bl	8007478 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e1c:	2380      	movs	r3, #128	@ 0x80
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f003 fa57 	bl	80042d4 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e26:	f003 fa37 	bl	8004298 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e2a:	4b28      	ldr	r3, [pc, #160]	@ (8000ecc <SystemClock_Config+0xd4>)
 8000e2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000e2e:	4b27      	ldr	r3, [pc, #156]	@ (8000ecc <SystemClock_Config+0xd4>)
 8000e30:	2118      	movs	r1, #24
 8000e32:	438a      	bics	r2, r1
 8000e34:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8000e36:	193b      	adds	r3, r7, r4
 8000e38:	220d      	movs	r2, #13
 8000e3a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e3c:	193b      	adds	r3, r7, r4
 8000e3e:	2280      	movs	r2, #128	@ 0x80
 8000e40:	0252      	lsls	r2, r2, #9
 8000e42:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e44:	0021      	movs	r1, r4
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2201      	movs	r2, #1
 8000e4a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2201      	movs	r2, #1
 8000e50:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2202      	movs	r2, #2
 8000e56:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2200      	movs	r2, #0
 8000e62:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	2208      	movs	r2, #8
 8000e68:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	22c0      	movs	r2, #192	@ 0xc0
 8000e6e:	02d2      	lsls	r2, r2, #11
 8000e70:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2280      	movs	r2, #128	@ 0x80
 8000e76:	0492      	lsls	r2, r2, #18
 8000e78:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2280      	movs	r2, #128	@ 0x80
 8000e7e:	0592      	lsls	r2, r2, #22
 8000e80:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	0018      	movs	r0, r3
 8000e86:	f003 fa71 	bl	800436c <HAL_RCC_OscConfig>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e8e:	f001 f848 	bl	8001f22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e92:	003b      	movs	r3, r7
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e98:	003b      	movs	r3, r7
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea4:	003b      	movs	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eaa:	003b      	movs	r3, r7
 8000eac:	2102      	movs	r1, #2
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f003 fd76 	bl	80049a0 <HAL_RCC_ClockConfig>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000eb8:	f001 f833 	bl	8001f22 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f004 fb29 	bl	8005514 <HAL_RCCEx_EnableLSCO>
}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b013      	add	sp, #76	@ 0x4c
 8000ec8:	bd90      	pop	{r4, r7, pc}
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MX_I2C1_Init+0x74>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f48 <MX_I2C1_Init+0x78>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <MX_I2C1_Init+0x74>)
 8000edc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f4c <MX_I2C1_Init+0x7c>)
 8000ede:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <MX_I2C1_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <MX_I2C1_Init+0x74>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <MX_I2C1_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_I2C1_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_I2C1_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_I2C1_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_I2C1_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_I2C1_Init+0x74>)
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f002 fa89 	bl	8003424 <HAL_I2C_Init>
 8000f12:	1e03      	subs	r3, r0, #0
 8000f14:	d001      	beq.n	8000f1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f16:	f001 f804 	bl	8001f22 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <MX_I2C1_Init+0x74>)
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f003 f82c 	bl	8003f7c <HAL_I2CEx_ConfigAnalogFilter>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d001      	beq.n	8000f2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f28:	f000 fffb 	bl	8001f22 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <MX_I2C1_Init+0x74>)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	0018      	movs	r0, r3
 8000f32:	f003 f86f 	bl	8004014 <HAL_I2CEx_ConfigDigitalFilter>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d001      	beq.n	8000f3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f000 fff2 	bl	8001f22 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200000d0 	.word	0x200000d0
 8000f48:	40005400 	.word	0x40005400
 8000f4c:	00602173 	.word	0x00602173

08000f50 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000f54:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <MX_I2S1_Init+0x48>)
 8000f56:	4a11      	ldr	r2, [pc, #68]	@ (8000f9c <MX_I2S1_Init+0x4c>)
 8000f58:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <MX_I2S1_Init+0x48>)
 8000f5c:	2280      	movs	r2, #128	@ 0x80
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f62:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <MX_I2S1_Init+0x48>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <MX_I2S1_Init+0x48>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <MX_I2S1_Init+0x48>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <MX_I2S1_Init+0x48>)
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <MX_I2S1_Init+0x50>)
 8000f78:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <MX_I2S1_Init+0x48>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <MX_I2S1_Init+0x48>)
 8000f82:	0018      	movs	r0, r3
 8000f84:	f003 f892 	bl	80040ac <HAL_I2S_Init>
 8000f88:	1e03      	subs	r3, r0, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_I2S1_Init+0x40>
  {
    Error_Handler();
 8000f8c:	f000 ffc9 	bl	8001f22 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000f90:	46c0      	nop			@ (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	20000124 	.word	0x20000124
 8000f9c:	40013000 	.word	0x40013000
 8000fa0:	0000ac44 	.word	0x0000ac44

08000fa4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	@ 0x28
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 0 */

//  RTC_TimeTypeDef sTime = {0};
//  RTC_DateTypeDef sDate = {0};
  RTC_AlarmTypeDef sAlarm = {0};
 8000faa:	003b      	movs	r3, r7
 8000fac:	0018      	movs	r0, r3
 8000fae:	2328      	movs	r3, #40	@ 0x28
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	f006 fa60 	bl	8007478 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fb8:	4b33      	ldr	r3, [pc, #204]	@ (8001088 <MX_RTC_Init+0xe4>)
 8000fba:	4a34      	ldr	r2, [pc, #208]	@ (800108c <MX_RTC_Init+0xe8>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000fbe:	4b32      	ldr	r3, [pc, #200]	@ (8001088 <MX_RTC_Init+0xe4>)
 8000fc0:	2240      	movs	r2, #64	@ 0x40
 8000fc2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000fc4:	4b30      	ldr	r3, [pc, #192]	@ (8001088 <MX_RTC_Init+0xe4>)
 8000fc6:	227f      	movs	r2, #127	@ 0x7f
 8000fc8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000fca:	4b2f      	ldr	r3, [pc, #188]	@ (8001088 <MX_RTC_Init+0xe4>)
 8000fcc:	22ff      	movs	r2, #255	@ 0xff
 8000fce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001088 <MX_RTC_Init+0xe4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8001088 <MX_RTC_Init+0xe4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8001088 <MX_RTC_Init+0xe4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fe2:	4b29      	ldr	r3, [pc, #164]	@ (8001088 <MX_RTC_Init+0xe4>)
 8000fe4:	2280      	movs	r2, #128	@ 0x80
 8000fe6:	05d2      	lsls	r2, r2, #23
 8000fe8:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000fea:	4b27      	ldr	r3, [pc, #156]	@ (8001088 <MX_RTC_Init+0xe4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ff0:	4b25      	ldr	r3, [pc, #148]	@ (8001088 <MX_RTC_Init+0xe4>)
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f004 fb06 	bl	8005604 <HAL_RTC_Init>
 8000ff8:	1e03      	subs	r3, r0, #0
 8000ffa:	d001      	beq.n	8001000 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000ffc:	f000 ff91 	bl	8001f22 <Error_Handler>
//    Error_Handler();
//  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8001000:	003b      	movs	r3, r7
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001006:	003b      	movs	r3, r7
 8001008:	2201      	movs	r2, #1
 800100a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800100c:	003b      	movs	r3, r7
 800100e:	2200      	movs	r2, #0
 8001010:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001012:	003b      	movs	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001018:	003b      	movs	r3, r7
 800101a:	2200      	movs	r2, #0
 800101c:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800101e:	003b      	movs	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001024:	003b      	movs	r3, r7
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 800102a:	003b      	movs	r3, r7
 800102c:	4a18      	ldr	r2, [pc, #96]	@ (8001090 <MX_RTC_Init+0xec>)
 800102e:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001030:	003b      	movs	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001036:	003b      	movs	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800103c:	003b      	movs	r3, r7
 800103e:	2220      	movs	r2, #32
 8001040:	2101      	movs	r1, #1
 8001042:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001044:	003b      	movs	r3, r7
 8001046:	2280      	movs	r2, #128	@ 0x80
 8001048:	0052      	lsls	r2, r2, #1
 800104a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800104c:	0039      	movs	r1, r7
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <MX_RTC_Init+0xe4>)
 8001050:	2201      	movs	r2, #1
 8001052:	0018      	movs	r0, r3
 8001054:	f004 fcca 	bl	80059ec <HAL_RTC_SetAlarm_IT>
 8001058:	1e03      	subs	r3, r0, #0
 800105a:	d001      	beq.n	8001060 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 800105c:	f000 ff61 	bl	8001f22 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8001060:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_RTC_Init+0xe4>)
 8001062:	2100      	movs	r1, #0
 8001064:	0018      	movs	r0, r3
 8001066:	f005 f859 	bl	800611c <HAL_RTCEx_SetCalibrationOutPut>
 800106a:	1e03      	subs	r3, r0, #0
 800106c:	d001      	beq.n	8001072 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800106e:	f000 ff58 	bl	8001f22 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8001072:	4908      	ldr	r1, [pc, #32]	@ (8001094 <MX_RTC_Init+0xf0>)
 8001074:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <MX_RTC_Init+0xe4>)
 8001076:	2200      	movs	r2, #0
 8001078:	0018      	movs	r0, r3
 800107a:	f004 fc0d 	bl	8005898 <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	46bd      	mov	sp, r7
 8001082:	b00a      	add	sp, #40	@ 0x28
 8001084:	bd80      	pop	{r7, pc}
 8001086:	46c0      	nop			@ (mov r8, r8)
 8001088:	200001bc 	.word	0x200001bc
 800108c:	40002800 	.word	0x40002800
 8001090:	80800080 	.word	0x80800080
 8001094:	2000009c 	.word	0x2000009c

08001098 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <MX_SPI2_Init+0x74>)
 800109e:	4a1c      	ldr	r2, [pc, #112]	@ (8001110 <MX_SPI2_Init+0x78>)
 80010a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <MX_SPI2_Init+0x74>)
 80010a4:	2282      	movs	r2, #130	@ 0x82
 80010a6:	0052      	lsls	r2, r2, #1
 80010a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010aa:	4b18      	ldr	r3, [pc, #96]	@ (800110c <MX_SPI2_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b0:	4b16      	ldr	r3, [pc, #88]	@ (800110c <MX_SPI2_Init+0x74>)
 80010b2:	22e0      	movs	r2, #224	@ 0xe0
 80010b4:	00d2      	lsls	r2, r2, #3
 80010b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b8:	4b14      	ldr	r3, [pc, #80]	@ (800110c <MX_SPI2_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <MX_SPI2_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010c4:	4b11      	ldr	r3, [pc, #68]	@ (800110c <MX_SPI2_Init+0x74>)
 80010c6:	2280      	movs	r2, #128	@ 0x80
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <MX_SPI2_Init+0x74>)
 80010ce:	2210      	movs	r2, #16
 80010d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <MX_SPI2_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <MX_SPI2_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010de:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <MX_SPI2_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010e4:	4b09      	ldr	r3, [pc, #36]	@ (800110c <MX_SPI2_Init+0x74>)
 80010e6:	2207      	movs	r2, #7
 80010e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010ea:	4b08      	ldr	r3, [pc, #32]	@ (800110c <MX_SPI2_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <MX_SPI2_Init+0x74>)
 80010f2:	2208      	movs	r2, #8
 80010f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010f6:	4b05      	ldr	r3, [pc, #20]	@ (800110c <MX_SPI2_Init+0x74>)
 80010f8:	0018      	movs	r0, r3
 80010fa:	f005 f897 	bl	800622c <HAL_SPI_Init>
 80010fe:	1e03      	subs	r3, r0, #0
 8001100:	d001      	beq.n	8001106 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001102:	f000 ff0e 	bl	8001f22 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200001e8 	.word	0x200001e8
 8001110:	40003800 	.word	0x40003800

08001114 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111a:	231c      	movs	r3, #28
 800111c:	18fb      	adds	r3, r7, r3
 800111e:	0018      	movs	r0, r3
 8001120:	230c      	movs	r3, #12
 8001122:	001a      	movs	r2, r3
 8001124:	2100      	movs	r1, #0
 8001126:	f006 f9a7 	bl	8007478 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800112a:	003b      	movs	r3, r7
 800112c:	0018      	movs	r0, r3
 800112e:	231c      	movs	r3, #28
 8001130:	001a      	movs	r2, r3
 8001132:	2100      	movs	r1, #0
 8001134:	f006 f9a0 	bl	8007478 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001138:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <MX_TIM2_Init+0xb8>)
 800113a:	2280      	movs	r2, #128	@ 0x80
 800113c:	05d2      	lsls	r2, r2, #23
 800113e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8001140:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <MX_TIM2_Init+0xb8>)
 8001142:	4a23      	ldr	r2, [pc, #140]	@ (80011d0 <MX_TIM2_Init+0xbc>)
 8001144:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <MX_TIM2_Init+0xb8>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800114c:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <MX_TIM2_Init+0xb8>)
 800114e:	2263      	movs	r2, #99	@ 0x63
 8001150:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001152:	4b1e      	ldr	r3, [pc, #120]	@ (80011cc <MX_TIM2_Init+0xb8>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001158:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <MX_TIM2_Init+0xb8>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <MX_TIM2_Init+0xb8>)
 8001160:	0018      	movs	r0, r3
 8001162:	f005 fa67 	bl	8006634 <HAL_TIM_PWM_Init>
 8001166:	1e03      	subs	r3, r0, #0
 8001168:	d001      	beq.n	800116e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800116a:	f000 feda 	bl	8001f22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	211c      	movs	r1, #28
 8001170:	187b      	adds	r3, r7, r1
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117c:	187a      	adds	r2, r7, r1
 800117e:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <MX_TIM2_Init+0xb8>)
 8001180:	0011      	movs	r1, r2
 8001182:	0018      	movs	r0, r3
 8001184:	f006 f8f8 	bl	8007378 <HAL_TIMEx_MasterConfigSynchronization>
 8001188:	1e03      	subs	r3, r0, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800118c:	f000 fec9 	bl	8001f22 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001190:	003b      	movs	r3, r7
 8001192:	2260      	movs	r2, #96	@ 0x60
 8001194:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001196:	003b      	movs	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119c:	003b      	movs	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a2:	003b      	movs	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011a8:	0039      	movs	r1, r7
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <MX_TIM2_Init+0xb8>)
 80011ac:	2208      	movs	r2, #8
 80011ae:	0018      	movs	r0, r3
 80011b0:	f005 fc7e 	bl	8006ab0 <HAL_TIM_PWM_ConfigChannel>
 80011b4:	1e03      	subs	r3, r0, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80011b8:	f000 feb3 	bl	8001f22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011bc:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <MX_TIM2_Init+0xb8>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f001 fb78 	bl	80028b4 <HAL_TIM_MspPostInit>

}
 80011c4:	46c0      	nop			@ (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b00a      	add	sp, #40	@ 0x28
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000304 	.word	0x20000304
 80011d0:	0000031f 	.word	0x0000031f

080011d4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <MX_TIM14_Init+0x40>)
 80011da:	4a0f      	ldr	r2, [pc, #60]	@ (8001218 <MX_TIM14_Init+0x44>)
 80011dc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <MX_TIM14_Init+0x40>)
 80011e0:	22f4      	movs	r2, #244	@ 0xf4
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <MX_TIM14_Init+0x40>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80011ec:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <MX_TIM14_Init+0x40>)
 80011ee:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <MX_TIM14_Init+0x48>)
 80011f0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <MX_TIM14_Init+0x40>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <MX_TIM14_Init+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80011fe:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <MX_TIM14_Init+0x40>)
 8001200:	0018      	movs	r0, r3
 8001202:	f005 f8cb 	bl	800639c <HAL_TIM_Base_Init>
 8001206:	1e03      	subs	r3, r0, #0
 8001208:	d001      	beq.n	800120e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800120a:	f000 fe8a 	bl	8001f22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000350 	.word	0x20000350
 8001218:	40002000 	.word	0x40002000
 800121c:	0000ffff 	.word	0x0000ffff

08001220 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <MX_TIM16_Init+0x44>)
 8001226:	4a10      	ldr	r2, [pc, #64]	@ (8001268 <MX_TIM16_Init+0x48>)
 8001228:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 58595;
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_TIM16_Init+0x44>)
 800122c:	4a0f      	ldr	r2, [pc, #60]	@ (800126c <MX_TIM16_Init+0x4c>)
 800122e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <MX_TIM16_Init+0x44>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001236:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <MX_TIM16_Init+0x44>)
 8001238:	4a0d      	ldr	r2, [pc, #52]	@ (8001270 <MX_TIM16_Init+0x50>)
 800123a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MX_TIM16_Init+0x44>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 8001242:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <MX_TIM16_Init+0x44>)
 8001244:	220a      	movs	r2, #10
 8001246:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <MX_TIM16_Init+0x44>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800124e:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <MX_TIM16_Init+0x44>)
 8001250:	0018      	movs	r0, r3
 8001252:	f005 f8a3 	bl	800639c <HAL_TIM_Base_Init>
 8001256:	1e03      	subs	r3, r0, #0
 8001258:	d001      	beq.n	800125e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800125a:	f000 fe62 	bl	8001f22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	2000039c 	.word	0x2000039c
 8001268:	40014400 	.word	0x40014400
 800126c:	0000e4e3 	.word	0x0000e4e3
 8001270:	0000ffff 	.word	0x0000ffff

08001274 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <MX_DMA_Init+0x48>)
 800127c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800127e:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <MX_DMA_Init+0x48>)
 8001280:	2101      	movs	r1, #1
 8001282:	430a      	orrs	r2, r1
 8001284:	639a      	str	r2, [r3, #56]	@ 0x38
 8001286:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <MX_DMA_Init+0x48>)
 8001288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800128a:	2201      	movs	r2, #1
 800128c:	4013      	ands	r3, r2
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2009      	movs	r0, #9
 8001298:	f001 fd22 	bl	8002ce0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800129c:	2009      	movs	r0, #9
 800129e:	f001 fd34 	bl	8002d0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	200a      	movs	r0, #10
 80012a8:	f001 fd1a 	bl	8002ce0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80012ac:	200a      	movs	r0, #10
 80012ae:	f001 fd2c 	bl	8002d0a <HAL_NVIC_EnableIRQ>

}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	40021000 	.word	0x40021000

080012c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b08b      	sub	sp, #44	@ 0x2c
 80012c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	2414      	movs	r4, #20
 80012c8:	193b      	adds	r3, r7, r4
 80012ca:	0018      	movs	r0, r3
 80012cc:	2314      	movs	r3, #20
 80012ce:	001a      	movs	r2, r3
 80012d0:	2100      	movs	r1, #0
 80012d2:	f006 f8d1 	bl	8007478 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	4b7d      	ldr	r3, [pc, #500]	@ (80014cc <MX_GPIO_Init+0x20c>)
 80012d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012da:	4b7c      	ldr	r3, [pc, #496]	@ (80014cc <MX_GPIO_Init+0x20c>)
 80012dc:	2104      	movs	r1, #4
 80012de:	430a      	orrs	r2, r1
 80012e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012e2:	4b7a      	ldr	r3, [pc, #488]	@ (80014cc <MX_GPIO_Init+0x20c>)
 80012e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e6:	2204      	movs	r2, #4
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ee:	4b77      	ldr	r3, [pc, #476]	@ (80014cc <MX_GPIO_Init+0x20c>)
 80012f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012f2:	4b76      	ldr	r3, [pc, #472]	@ (80014cc <MX_GPIO_Init+0x20c>)
 80012f4:	2120      	movs	r1, #32
 80012f6:	430a      	orrs	r2, r1
 80012f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80012fa:	4b74      	ldr	r3, [pc, #464]	@ (80014cc <MX_GPIO_Init+0x20c>)
 80012fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012fe:	2220      	movs	r2, #32
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b71      	ldr	r3, [pc, #452]	@ (80014cc <MX_GPIO_Init+0x20c>)
 8001308:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800130a:	4b70      	ldr	r3, [pc, #448]	@ (80014cc <MX_GPIO_Init+0x20c>)
 800130c:	2101      	movs	r1, #1
 800130e:	430a      	orrs	r2, r1
 8001310:	635a      	str	r2, [r3, #52]	@ 0x34
 8001312:	4b6e      	ldr	r3, [pc, #440]	@ (80014cc <MX_GPIO_Init+0x20c>)
 8001314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001316:	2201      	movs	r2, #1
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b6b      	ldr	r3, [pc, #428]	@ (80014cc <MX_GPIO_Init+0x20c>)
 8001320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001322:	4b6a      	ldr	r3, [pc, #424]	@ (80014cc <MX_GPIO_Init+0x20c>)
 8001324:	2102      	movs	r1, #2
 8001326:	430a      	orrs	r2, r1
 8001328:	635a      	str	r2, [r3, #52]	@ 0x34
 800132a:	4b68      	ldr	r3, [pc, #416]	@ (80014cc <MX_GPIO_Init+0x20c>)
 800132c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800132e:	2202      	movs	r2, #2
 8001330:	4013      	ands	r3, r2
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001336:	4b65      	ldr	r3, [pc, #404]	@ (80014cc <MX_GPIO_Init+0x20c>)
 8001338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800133a:	4b64      	ldr	r3, [pc, #400]	@ (80014cc <MX_GPIO_Init+0x20c>)
 800133c:	2108      	movs	r1, #8
 800133e:	430a      	orrs	r2, r1
 8001340:	635a      	str	r2, [r3, #52]	@ 0x34
 8001342:	4b62      	ldr	r3, [pc, #392]	@ (80014cc <MX_GPIO_Init+0x20c>)
 8001344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001346:	2208      	movs	r2, #8
 8001348:	4013      	ands	r3, r2
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_MCLR_Pin, GPIO_PIN_SET);
 800134e:	238e      	movs	r3, #142	@ 0x8e
 8001350:	0119      	lsls	r1, r3, #4
 8001352:	23a0      	movs	r3, #160	@ 0xa0
 8001354:	05db      	lsls	r3, r3, #23
 8001356:	2201      	movs	r2, #1
 8001358:	0018      	movs	r0, r3
 800135a:	f002 f800 	bl	800335e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_ENABLE_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 800135e:	495c      	ldr	r1, [pc, #368]	@ (80014d0 <MX_GPIO_Init+0x210>)
 8001360:	4b5c      	ldr	r3, [pc, #368]	@ (80014d4 <MX_GPIO_Init+0x214>)
 8001362:	2200      	movs	r2, #0
 8001364:	0018      	movs	r0, r3
 8001366:	f001 fffa 	bl	800335e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin, GPIO_PIN_RESET);
 800136a:	23c0      	movs	r3, #192	@ 0xc0
 800136c:	00d9      	lsls	r1, r3, #3
 800136e:	23a0      	movs	r3, #160	@ 0xa0
 8001370:	05db      	lsls	r3, r3, #23
 8001372:	2200      	movs	r2, #0
 8001374:	0018      	movs	r0, r3
 8001376:	f001 fff2 	bl	800335e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 800137a:	4b57      	ldr	r3, [pc, #348]	@ (80014d8 <MX_GPIO_Init+0x218>)
 800137c:	2200      	movs	r2, #0
 800137e:	2180      	movs	r1, #128	@ 0x80
 8001380:	0018      	movs	r0, r3
 8001382:	f001 ffec 	bl	800335e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAPTOUCH_RESET_GPIO_Port, CAPTOUCH_RESET_Pin, GPIO_PIN_SET);
 8001386:	2380      	movs	r3, #128	@ 0x80
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4852      	ldr	r0, [pc, #328]	@ (80014d4 <MX_GPIO_Init+0x214>)
 800138c:	2201      	movs	r2, #1
 800138e:	0019      	movs	r1, r3
 8001390:	f001 ffe5 	bl	800335e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001394:	193b      	adds	r3, r7, r4
 8001396:	2204      	movs	r2, #4
 8001398:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139a:	193b      	adds	r3, r7, r4
 800139c:	2203      	movs	r2, #3
 800139e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	193b      	adds	r3, r7, r4
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	193a      	adds	r2, r7, r4
 80013a8:	23a0      	movs	r3, #160	@ 0xa0
 80013aa:	05db      	lsls	r3, r3, #23
 80013ac:	0011      	movs	r1, r2
 80013ae:	0018      	movs	r0, r3
 80013b0:	f001 fe54 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nHOLD_Pin SHIFT_DATA_IN_Pin
                           SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_DATA_IN_Pin
 80013b4:	0021      	movs	r1, r4
 80013b6:	187b      	adds	r3, r7, r1
 80013b8:	22ee      	movs	r2, #238	@ 0xee
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	601a      	str	r2, [r3, #0]
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	000c      	movs	r4, r1
 80013c0:	193b      	adds	r3, r7, r4
 80013c2:	2201      	movs	r2, #1
 80013c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	193b      	adds	r3, r7, r4
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	193b      	adds	r3, r7, r4
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	193a      	adds	r2, r7, r4
 80013d4:	23a0      	movs	r3, #160	@ 0xa0
 80013d6:	05db      	lsls	r3, r3, #23
 80013d8:	0011      	movs	r1, r2
 80013da:	0018      	movs	r0, r3
 80013dc:	f001 fe3e 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_ENABLE_Pin DEBUG_LED_Pin CAPTOUCH_RESET_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin;
 80013e0:	193b      	adds	r3, r7, r4
 80013e2:	4a3e      	ldr	r2, [pc, #248]	@ (80014dc <MX_GPIO_Init+0x21c>)
 80013e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	193b      	adds	r3, r7, r4
 80013e8:	2201      	movs	r2, #1
 80013ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	193b      	adds	r3, r7, r4
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	193b      	adds	r3, r7, r4
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f8:	193b      	adds	r3, r7, r4
 80013fa:	4a36      	ldr	r2, [pc, #216]	@ (80014d4 <MX_GPIO_Init+0x214>)
 80013fc:	0019      	movs	r1, r3
 80013fe:	0010      	movs	r0, r2
 8001400:	f001 fe2c 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8001404:	193b      	adds	r3, r7, r4
 8001406:	2280      	movs	r2, #128	@ 0x80
 8001408:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	193b      	adds	r3, r7, r4
 800140c:	2201      	movs	r2, #1
 800140e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	193b      	adds	r3, r7, r4
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	193b      	adds	r3, r7, r4
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 800141c:	193b      	adds	r3, r7, r4
 800141e:	4a2e      	ldr	r2, [pc, #184]	@ (80014d8 <MX_GPIO_Init+0x218>)
 8001420:	0019      	movs	r1, r3
 8001422:	0010      	movs	r0, r2
 8001424:	f001 fe1a 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_SET_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = ALARM_SET_BUTTON_EXTI_Pin;
 8001428:	193b      	adds	r3, r7, r4
 800142a:	2280      	movs	r2, #128	@ 0x80
 800142c:	0212      	lsls	r2, r2, #8
 800142e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001430:	193b      	adds	r3, r7, r4
 8001432:	2284      	movs	r2, #132	@ 0x84
 8001434:	0392      	lsls	r2, r2, #14
 8001436:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001438:	193b      	adds	r3, r7, r4
 800143a:	2201      	movs	r2, #1
 800143c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALARM_SET_BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 800143e:	193a      	adds	r2, r7, r4
 8001440:	23a0      	movs	r3, #160	@ 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	0011      	movs	r1, r2
 8001446:	0018      	movs	r0, r3
 8001448:	f001 fe08 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_EXTI_Pin MINUTE_SET_BUTTON_EXTI_Pin ALARM_EN_BUTTON_EXTI_Pin DISPLAY_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_EXTI_Pin|MINUTE_SET_BUTTON_EXTI_Pin|ALARM_EN_BUTTON_EXTI_Pin|DISPLAY_BUTTON_EXTI_Pin;
 800144c:	0021      	movs	r1, r4
 800144e:	187b      	adds	r3, r7, r1
 8001450:	220f      	movs	r2, #15
 8001452:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001454:	187b      	adds	r3, r7, r1
 8001456:	2284      	movs	r2, #132	@ 0x84
 8001458:	0392      	lsls	r2, r2, #14
 800145a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145c:	187b      	adds	r3, r7, r1
 800145e:	2201      	movs	r2, #1
 8001460:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001462:	000c      	movs	r4, r1
 8001464:	187b      	adds	r3, r7, r1
 8001466:	4a1e      	ldr	r2, [pc, #120]	@ (80014e0 <MX_GPIO_Init+0x220>)
 8001468:	0019      	movs	r1, r3
 800146a:	0010      	movs	r0, r2
 800146c:	f001 fdf6 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : TIME_SWITCH_EXTI_Pin */
  GPIO_InitStruct.Pin = TIME_SWITCH_EXTI_Pin;
 8001470:	0021      	movs	r1, r4
 8001472:	187b      	adds	r3, r7, r1
 8001474:	2210      	movs	r2, #16
 8001476:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001478:	187b      	adds	r3, r7, r1
 800147a:	22c4      	movs	r2, #196	@ 0xc4
 800147c:	0392      	lsls	r2, r2, #14
 800147e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001480:	187b      	adds	r3, r7, r1
 8001482:	2201      	movs	r2, #1
 8001484:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TIME_SWITCH_EXTI_GPIO_Port, &GPIO_InitStruct);
 8001486:	187b      	adds	r3, r7, r1
 8001488:	4a12      	ldr	r2, [pc, #72]	@ (80014d4 <MX_GPIO_Init+0x214>)
 800148a:	0019      	movs	r1, r3
 800148c:	0010      	movs	r0, r2
 800148e:	f001 fde5 	bl	800305c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2005      	movs	r0, #5
 8001498:	f001 fc22 	bl	8002ce0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800149c:	2005      	movs	r0, #5
 800149e:	f001 fc34 	bl	8002d0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2101      	movs	r1, #1
 80014a6:	2006      	movs	r0, #6
 80014a8:	f001 fc1a 	bl	8002ce0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80014ac:	2006      	movs	r0, #6
 80014ae:	f001 fc2c 	bl	8002d0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2101      	movs	r1, #1
 80014b6:	2007      	movs	r0, #7
 80014b8:	f001 fc12 	bl	8002ce0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80014bc:	2007      	movs	r0, #7
 80014be:	f001 fc24 	bl	8002d0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b00b      	add	sp, #44	@ 0x2c
 80014c8:	bd90      	pop	{r4, r7, pc}
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	40021000 	.word	0x40021000
 80014d0:	00001002 	.word	0x00001002
 80014d4:	50000400 	.word	0x50000400
 80014d8:	50000800 	.word	0x50000800
 80014dc:	00001102 	.word	0x00001102
 80014e0:	50000c00 	.word	0x50000c00

080014e4 <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80014ea:	2317      	movs	r3, #23
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 80014f2:	4a14      	ldr	r2, [pc, #80]	@ (8001544 <updateAndDisplayTime+0x60>)
 80014f4:	4914      	ldr	r1, [pc, #80]	@ (8001548 <updateAndDisplayTime+0x64>)
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <updateAndDisplayTime+0x68>)
 80014f8:	0018      	movs	r0, r3
 80014fa:	f7ff fad5 	bl	8000aa8 <getRTCTime>

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 80014fe:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <updateAndDisplayTime+0x6c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10e      	bne.n	8001524 <updateAndDisplayTime+0x40>

		RTC_TimeTypeDef currTimeMil = conv2Mil(&currTime);
 8001506:	003b      	movs	r3, r7
 8001508:	4a0f      	ldr	r2, [pc, #60]	@ (8001548 <updateAndDisplayTime+0x64>)
 800150a:	0011      	movs	r1, r2
 800150c:	0018      	movs	r0, r3
 800150e:	f000 fcc9 	bl	8001ea4 <conv2Mil>

		sevSeg_updateDigits(&currTimeMil, userAlarmToggle);
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <updateAndDisplayTime+0x70>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	001a      	movs	r2, r3
 8001518:	003b      	movs	r3, r7
 800151a:	0011      	movs	r1, r2
 800151c:	0018      	movs	r0, r3
 800151e:	f000 fe27 	bl	8002170 <sevSeg_updateDigits>
 8001522:	e007      	b.n	8001534 <updateAndDisplayTime+0x50>

	}
	else {
		sevSeg_updateDigits(&currTime, userAlarmToggle);
 8001524:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <updateAndDisplayTime+0x70>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	001a      	movs	r2, r3
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <updateAndDisplayTime+0x64>)
 800152c:	0011      	movs	r1, r2
 800152e:	0018      	movs	r0, r3
 8001530:	f000 fe1e 	bl	8002170 <sevSeg_updateDigits>
	}

	return halRet;
 8001534:	2317      	movs	r3, #23
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	781b      	ldrb	r3, [r3, #0]

}
 800153a:	0018      	movs	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	b006      	add	sp, #24
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	200000b0 	.word	0x200000b0
 8001548:	2000009c 	.word	0x2000009c
 800154c:	200001bc 	.word	0x200001bc
 8001550:	200000cc 	.word	0x200000cc
 8001554:	20000099 	.word	0x20000099

08001558 <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800155e:	2317      	movs	r3, #23
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 8001566:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <updateAndDisplayAlarm+0x54>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10e      	bne.n	800158c <updateAndDisplayAlarm+0x34>

		RTC_TimeTypeDef userAlarmTimeMil = conv2Mil(&userAlarmTime);
 800156e:	003b      	movs	r3, r7
 8001570:	4a0f      	ldr	r2, [pc, #60]	@ (80015b0 <updateAndDisplayAlarm+0x58>)
 8001572:	0011      	movs	r1, r2
 8001574:	0018      	movs	r0, r3
 8001576:	f000 fc95 	bl	8001ea4 <conv2Mil>

		sevSeg_updateDigits(&userAlarmTimeMil, userAlarmToggle);
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <updateAndDisplayAlarm+0x5c>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	001a      	movs	r2, r3
 8001580:	003b      	movs	r3, r7
 8001582:	0011      	movs	r1, r2
 8001584:	0018      	movs	r0, r3
 8001586:	f000 fdf3 	bl	8002170 <sevSeg_updateDigits>
 800158a:	e007      	b.n	800159c <updateAndDisplayAlarm+0x44>

	}
	else {
		sevSeg_updateDigits(&userAlarmTime, userAlarmToggle);
 800158c:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <updateAndDisplayAlarm+0x5c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	001a      	movs	r2, r3
 8001592:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <updateAndDisplayAlarm+0x58>)
 8001594:	0011      	movs	r1, r2
 8001596:	0018      	movs	r0, r3
 8001598:	f000 fdea 	bl	8002170 <sevSeg_updateDigits>
	}



	return halRet;
 800159c:	2317      	movs	r3, #23
 800159e:	18fb      	adds	r3, r7, r3
 80015a0:	781b      	ldrb	r3, [r3, #0]

}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b006      	add	sp, #24
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			@ (mov r8, r8)
 80015ac:	200000cc 	.word	0x200000cc
 80015b0:	200000b4 	.word	0x200000b4
 80015b4:	20000099 	.word	0x20000099

080015b8 <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b08d      	sub	sp, #52	@ 0x34
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 80015c0:	2408      	movs	r4, #8
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	0018      	movs	r0, r3
 80015c6:	2328      	movs	r3, #40	@ 0x28
 80015c8:	001a      	movs	r2, r3
 80015ca:	2100      	movs	r1, #0
 80015cc:	f005 ff54 	bl	8007478 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	005a      	lsls	r2, r3, #1
 80015d4:	1939      	adds	r1, r7, r4
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	2300      	movs	r3, #0
 80015da:	f004 fb47 	bl	8005c6c <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 80015de:	193b      	adds	r3, r7, r4
 80015e0:	785b      	ldrb	r3, [r3, #1]
 80015e2:	2b3a      	cmp	r3, #58	@ 0x3a
 80015e4:	d903      	bls.n	80015ee <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 80015e6:	193b      	adds	r3, r7, r4
 80015e8:	2200      	movs	r2, #0
 80015ea:	705a      	strb	r2, [r3, #1]
 80015ec:	e006      	b.n	80015fc <HAL_RTC_AlarmAEventCallback+0x44>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 80015ee:	2108      	movs	r1, #8
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	785b      	ldrb	r3, [r3, #1]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80015fc:	46c0      	nop			@ (mov r8, r8)
 80015fe:	2308      	movs	r3, #8
 8001600:	18f9      	adds	r1, r7, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	0018      	movs	r0, r3
 8001608:	f004 f9f0 	bl	80059ec <HAL_RTC_SetAlarm_IT>
 800160c:	1e03      	subs	r3, r0, #0
 800160e:	d1f6      	bne.n	80015fe <HAL_RTC_AlarmAEventCallback+0x46>

	  updateAndDisplayTime();
 8001610:	f7ff ff68 	bl	80014e4 <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 8001614:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <HAL_RTC_AlarmAEventCallback+0x94>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d013      	beq.n	8001644 <HAL_RTC_AlarmAEventCallback+0x8c>
 800161c:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <HAL_RTC_AlarmAEventCallback+0x98>)
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <HAL_RTC_AlarmAEventCallback+0x9c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d10d      	bne.n	8001644 <HAL_RTC_AlarmAEventCallback+0x8c>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 8001628:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <HAL_RTC_AlarmAEventCallback+0x98>)
 800162a:	785a      	ldrb	r2, [r3, #1]
 800162c:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <HAL_RTC_AlarmAEventCallback+0x9c>)
 800162e:	785b      	ldrb	r3, [r3, #1]
 8001630:	429a      	cmp	r2, r3
 8001632:	d107      	bne.n	8001644 <HAL_RTC_AlarmAEventCallback+0x8c>
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_RTC_AlarmAEventCallback+0x98>)
 8001636:	78da      	ldrb	r2, [r3, #3]
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_RTC_AlarmAEventCallback+0x9c>)
 800163a:	78db      	ldrb	r3, [r3, #3]
 800163c:	429a      	cmp	r2, r3
 800163e:	d101      	bne.n	8001644 <HAL_RTC_AlarmAEventCallback+0x8c>
		  userAlarmBeep();
 8001640:	f000 f80a 	bl	8001658 <userAlarmBeep>
	  }


}
 8001644:	46c0      	nop			@ (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b00d      	add	sp, #52	@ 0x34
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	20000099 	.word	0x20000099
 8001650:	200000b4 	.word	0x200000b4
 8001654:	2000009c 	.word	0x2000009c

08001658 <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 800165e:	4b52      	ldr	r3, [pc, #328]	@ (80017a8 <userAlarmBeep+0x150>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d02d      	beq.n	80016c2 <userAlarmBeep+0x6a>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 8001666:	4b51      	ldr	r3, [pc, #324]	@ (80017ac <userAlarmBeep+0x154>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	0018      	movs	r0, r3
 800166c:	f004 ffb4 	bl	80065d8 <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 8001670:	4b4e      	ldr	r3, [pc, #312]	@ (80017ac <userAlarmBeep+0x154>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001678:	4b4c      	ldr	r3, [pc, #304]	@ (80017ac <userAlarmBeep+0x154>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	0c12      	lsrs	r2, r2, #16
 8001680:	0412      	lsls	r2, r2, #16
 8001682:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 8001684:	4b49      	ldr	r3, [pc, #292]	@ (80017ac <userAlarmBeep+0x154>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	4b47      	ldr	r3, [pc, #284]	@ (80017ac <userAlarmBeep+0x154>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4947      	ldr	r1, [pc, #284]	@ (80017b0 <userAlarmBeep+0x158>)
 8001694:	400a      	ands	r2, r1
 8001696:	611a      	str	r2, [r3, #16]

			// Re-write RCR with 10
			timerSnooze->Instance->RCR &= 0xFF00;
 8001698:	4b44      	ldr	r3, [pc, #272]	@ (80017ac <userAlarmBeep+0x154>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016a0:	4b42      	ldr	r3, [pc, #264]	@ (80017ac <userAlarmBeep+0x154>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	22ff      	movs	r2, #255	@ 0xff
 80016a8:	0212      	lsls	r2, r2, #8
 80016aa:	400a      	ands	r2, r1
 80016ac:	631a      	str	r2, [r3, #48]	@ 0x30
			timerSnooze->Instance->RCR |= timerSnooze_RCR;
 80016ae:	4b3f      	ldr	r3, [pc, #252]	@ (80017ac <userAlarmBeep+0x154>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016b6:	2164      	movs	r1, #100	@ 0x64
 80016b8:	4b3c      	ldr	r3, [pc, #240]	@ (80017ac <userAlarmBeep+0x154>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	631a      	str	r2, [r3, #48]	@ 0x30

		}

	HAL_TIM_Base_Stop(timerDelay);
 80016c2:	4b3c      	ldr	r3, [pc, #240]	@ (80017b4 <userAlarmBeep+0x15c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	0018      	movs	r0, r3
 80016c8:	f004 ff0c 	bl	80064e4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 80016cc:	4b39      	ldr	r3, [pc, #228]	@ (80017b4 <userAlarmBeep+0x15c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0018      	movs	r0, r3
 80016d2:	f004 febb 	bl	800644c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80016d6:	4b37      	ldr	r3, [pc, #220]	@ (80017b4 <userAlarmBeep+0x15c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 80016e0:	1cfb      	adds	r3, r7, #3
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]

	// Begins streaming audio to user
	startAudioStream();
 80016e6:	f000 fc12 	bl	8001f0e <startAudioStream>

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 80016ea:	f7ff fefb 	bl	80014e4 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 80016ee:	4b31      	ldr	r3, [pc, #196]	@ (80017b4 <userAlarmBeep+0x15c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	4a2f      	ldr	r2, [pc, #188]	@ (80017b8 <userAlarmBeep+0x160>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d91a      	bls.n	8001736 <userAlarmBeep+0xde>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 8001700:	1cfb      	adds	r3, r7, #3
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4a2d      	ldr	r2, [pc, #180]	@ (80017bc <userAlarmBeep+0x164>)
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	0018      	movs	r0, r3
 800170a:	f000 fde5 	bl	80022d8 <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 800170e:	4b29      	ldr	r3, [pc, #164]	@ (80017b4 <userAlarmBeep+0x15c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001716:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001718:	1cfb      	adds	r3, r7, #3
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	1e5a      	subs	r2, r3, #1
 800171e:	4193      	sbcs	r3, r2
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2201      	movs	r2, #1
 8001724:	4053      	eors	r3, r2
 8001726:	b2db      	uxtb	r3, r3
 8001728:	001a      	movs	r2, r3
 800172a:	1cfb      	adds	r3, r7, #3
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	781a      	ldrb	r2, [r3, #0]
 8001730:	2101      	movs	r1, #1
 8001732:	400a      	ands	r2, r1
 8001734:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 8001736:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <userAlarmBeep+0x168>)
 8001738:	0018      	movs	r0, r3
 800173a:	f7fe ff1b 	bl	8000574 <capTouch_readChannels>

	} while(capTouch.keyStat == 0x00 &&
 800173e:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <userAlarmBeep+0x168>)
 8001740:	7c1b      	ldrb	r3, [r3, #16]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d108      	bne.n	8001758 <userAlarmBeep+0x100>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 8001746:	4b1f      	ldr	r3, [pc, #124]	@ (80017c4 <userAlarmBeep+0x16c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2204      	movs	r2, #4
 800174c:	0011      	movs	r1, r2
 800174e:	0018      	movs	r0, r3
 8001750:	f001 fde8 	bl	8003324 <HAL_GPIO_ReadPin>
 8001754:	1e03      	subs	r3, r0, #0
	} while(capTouch.keyStat == 0x00 &&
 8001756:	d1c8      	bne.n	80016ea <userAlarmBeep+0x92>

	/*
	 * Stop blinking, turn off sound, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8001758:	4b16      	ldr	r3, [pc, #88]	@ (80017b4 <userAlarmBeep+0x15c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0018      	movs	r0, r3
 800175e:	f004 fec1 	bl	80064e4 <HAL_TIM_Base_Stop>
	stopAudioStream();
 8001762:	f000 fbd9 	bl	8001f18 <stopAudioStream>
	updateAndDisplayTime();				// Update to current time and display
 8001766:	f7ff febd 	bl	80014e4 <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Set to 50% duty cycle
 800176a:	2332      	movs	r3, #50	@ 0x32
 800176c:	0018      	movs	r0, r3
 800176e:	f000 fdb3 	bl	80022d8 <sevSeg_setIntensity>
	displayToggle = 2;								// Set to 2 for future display button ISRs
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <userAlarmBeep+0x170>)
 8001774:	2202      	movs	r2, #2
 8001776:	701a      	strb	r2, [r3, #0]


	// If this is the first snooze,
	if(!secondSnooze) {
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <userAlarmBeep+0x150>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2201      	movs	r2, #1
 800177e:	4053      	eors	r3, r2
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d008      	beq.n	8001798 <userAlarmBeep+0x140>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <userAlarmBeep+0x154>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	0018      	movs	r0, r3
 800178c:	f004 fed0 	bl	8006530 <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 8001790:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <userAlarmBeep+0x150>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
		 * in the top conditional, the secondSnooze is always true;
		 */
		secondSnooze = false;

	}
}
 8001796:	e002      	b.n	800179e <userAlarmBeep+0x146>
		secondSnooze = false;
 8001798:	4b03      	ldr	r3, [pc, #12]	@ (80017a8 <userAlarmBeep+0x150>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
}
 800179e:	46c0      	nop			@ (mov r8, r8)
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b002      	add	sp, #8
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	200003e9 	.word	0x200003e9
 80017ac:	20000054 	.word	0x20000054
 80017b0:	0000fffc 	.word	0x0000fffc
 80017b4:	20000050 	.word	0x20000050
 80017b8:	00007ffe 	.word	0x00007ffe
 80017bc:	08007520 	.word	0x08007520
 80017c0:	200003ec 	.word	0x200003ec
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000098 	.word	0x20000098

080017cc <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	0002      	movs	r2, r0
 80017d4:	1dbb      	adds	r3, r7, #6
 80017d6:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 80017d8:	2208      	movs	r2, #8
 80017da:	1dbb      	adds	r3, r7, #6
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	4293      	cmp	r3, r2
 80017e0:	d106      	bne.n	80017f0 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 80017e2:	230f      	movs	r3, #15
 80017e4:	18fc      	adds	r4, r7, r3
 80017e6:	f000 f86f 	bl	80018c8 <displayButtonISR>
 80017ea:	0003      	movs	r3, r0
 80017ec:	7023      	strb	r3, [r4, #0]

	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 80017ee:	e03d      	b.n	800186c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 80017f0:	2204      	movs	r2, #4
 80017f2:	1dbb      	adds	r3, r7, #6
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d106      	bne.n	8001808 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 80017fa:	230f      	movs	r3, #15
 80017fc:	18fc      	adds	r4, r7, r3
 80017fe:	f000 f88b 	bl	8001918 <alarmEnableISR>
 8001802:	0003      	movs	r3, r0
 8001804:	7023      	strb	r3, [r4, #0]
}
 8001806:	e031      	b.n	800186c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8001808:	2380      	movs	r3, #128	@ 0x80
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	1dba      	adds	r2, r7, #6
 800180e:	8812      	ldrh	r2, [r2, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d106      	bne.n	8001822 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 8001814:	230f      	movs	r3, #15
 8001816:	18fc      	adds	r4, r7, r3
 8001818:	f000 f8a8 	bl	800196c <alarmSetISR>
 800181c:	0003      	movs	r3, r0
 800181e:	7023      	strb	r3, [r4, #0]
}
 8001820:	e024      	b.n	800186c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == hourSetButtonPin) {
 8001822:	2201      	movs	r2, #1
 8001824:	1dbb      	adds	r3, r7, #6
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	4293      	cmp	r3, r2
 800182a:	d106      	bne.n	800183a <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 800182c:	230f      	movs	r3, #15
 800182e:	18fc      	adds	r4, r7, r3
 8001830:	f000 f95c 	bl	8001aec <hourSetISR>
 8001834:	0003      	movs	r3, r0
 8001836:	7023      	strb	r3, [r4, #0]
}
 8001838:	e018      	b.n	800186c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == minuteSetButtonPin) {
 800183a:	2202      	movs	r2, #2
 800183c:	1dbb      	adds	r3, r7, #6
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	4293      	cmp	r3, r2
 8001842:	d106      	bne.n	8001852 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8001844:	230f      	movs	r3, #15
 8001846:	18fc      	adds	r4, r7, r3
 8001848:	f000 f97c 	bl	8001b44 <minuteSetISR>
 800184c:	0003      	movs	r3, r0
 800184e:	7023      	strb	r3, [r4, #0]
}
 8001850:	e00c      	b.n	800186c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == timeFormatSwitchPin) {
 8001852:	2210      	movs	r2, #16
 8001854:	1dbb      	adds	r3, r7, #6
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	4293      	cmp	r3, r2
 800185a:	d106      	bne.n	800186a <HAL_GPIO_EXTI_Falling_Callback+0x9e>
		halRet = timeFormatSwitchISR();
 800185c:	230f      	movs	r3, #15
 800185e:	18fc      	adds	r4, r7, r3
 8001860:	f000 f9c2 	bl	8001be8 <timeFormatSwitchISR>
 8001864:	0003      	movs	r3, r0
 8001866:	7023      	strb	r3, [r4, #0]
}
 8001868:	e000      	b.n	800186c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
		__NOP();
 800186a:	46c0      	nop			@ (mov r8, r8)
}
 800186c:	46c0      	nop			@ (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	b005      	add	sp, #20
 8001872:	bd90      	pop	{r4, r7, pc}

08001874 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	0002      	movs	r2, r0
 800187c:	1dbb      	adds	r3, r7, #6
 800187e:	801a      	strh	r2, [r3, #0]

	if(GPIO_Pin == timeFormatSwitchPin) {
 8001880:	2210      	movs	r2, #16
 8001882:	1dbb      	adds	r3, r7, #6
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_GPIO_EXTI_Rising_Callback+0x1a>

		timeFormatSwitchISR();
 800188a:	f000 f9ad 	bl	8001be8 <timeFormatSwitchISR>

	}

}
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b002      	add	sp, #8
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

	if((htim == timerSnooze) && (secondSnooze == true)) {
 80018a0:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d105      	bne.n	80018b6 <HAL_TIM_PeriodElapsedCallback+0x1e>
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_TIM_PeriodElapsedCallback+0x1e>

		userAlarmBeep();
 80018b2:	f7ff fed1 	bl	8001658 <userAlarmBeep>

	}

}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b002      	add	sp, #8
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	20000054 	.word	0x20000054
 80018c4:	200003e9 	.word	0x200003e9

080018c8 <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80018ce:	1dfb      	adds	r3, r7, #7
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 80018d4:	f7ff fe06 	bl	80014e4 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 80018d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <displayButtonISR+0x48>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	001a      	movs	r2, r3
 80018de:	4b0d      	ldr	r3, [pc, #52]	@ (8001914 <displayButtonISR+0x4c>)
 80018e0:	5c9b      	ldrb	r3, [r3, r2]
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 fcf8 	bl	80022d8 <sevSeg_setIntensity>

	if(displayToggle >= 1) {			// Increment display toggle or reset back down to 0;
 80018e8:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <displayButtonISR+0x48>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <displayButtonISR+0x30>
		displayToggle = 0;
 80018f0:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <displayButtonISR+0x48>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	e005      	b.n	8001904 <displayButtonISR+0x3c>
	} else {
		displayToggle++;
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <displayButtonISR+0x48>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	3301      	adds	r3, #1
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <displayButtonISR+0x48>)
 8001902:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8001904:	1dfb      	adds	r3, r7, #7
 8001906:	781b      	ldrb	r3, [r3, #0]

}
 8001908:	0018      	movs	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	b002      	add	sp, #8
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000098 	.word	0x20000098
 8001914:	08007520 	.word	0x08007520

08001918 <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0



	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8001924:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <alarmEnableISR+0x4c>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	4053      	eors	r3, r2
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <alarmEnableISR+0x22>

		userAlarmToggle = true;								// Toggle internal flag to true
 8001932:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <alarmEnableISR+0x4c>)
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	e008      	b.n	800194c <alarmEnableISR+0x34>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <alarmEnableISR+0x4c>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <alarmEnableISR+0x32>

		userAlarmToggle = false;							// Toggle internal flag to false
 8001942:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <alarmEnableISR+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	e000      	b.n	800194c <alarmEnableISR+0x34>
	}
	else {
		__NOP();							//Code should never reach here.
 800194a:	46c0      	nop			@ (mov r8, r8)
	}

	updateAndDisplayTime();				// Update display with correct decimal point
 800194c:	f7ff fdca 	bl	80014e4 <updateAndDisplayTime>

	// Reset snooze time
	secondSnooze = false;
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <alarmEnableISR+0x50>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]

	return halRet;
 8001956:	1dfb      	adds	r3, r7, #7
 8001958:	781b      	ldrb	r3, [r3, #0]

}
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	b002      	add	sp, #8
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			@ (mov r8, r8)
 8001964:	20000099 	.word	0x20000099
 8001968:	200003e9 	.word	0x200003e9

0800196c <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 8001972:	1c7b      	adds	r3, r7, #1
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 8001978:	1dfb      	adds	r3, r7, #7
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	e01a      	b.n	80019b6 <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 8001980:	4b55      	ldr	r3, [pc, #340]	@ (8001ad8 <alarmSetISR+0x16c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	0018      	movs	r0, r3
 8001986:	f004 fdad 	bl	80064e4 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 800198a:	4b53      	ldr	r3, [pc, #332]	@ (8001ad8 <alarmSetISR+0x16c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001994:	4b50      	ldr	r3, [pc, #320]	@ (8001ad8 <alarmSetISR+0x16c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	0018      	movs	r0, r3
 800199a:	f004 fd57 	bl	800644c <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 800199e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad8 <alarmSetISR+0x16c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a6:	4a4d      	ldr	r2, [pc, #308]	@ (8001adc <alarmSetISR+0x170>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d9f8      	bls.n	800199e <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 80019ac:	1dfb      	adds	r3, r7, #7
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	1dfb      	adds	r3, r7, #7
 80019b2:	3201      	adds	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	1dfb      	adds	r3, r7, #7
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d9e0      	bls.n	8001980 <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 80019be:	4b48      	ldr	r3, [pc, #288]	@ (8001ae0 <alarmSetISR+0x174>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2280      	movs	r2, #128	@ 0x80
 80019c4:	0212      	lsls	r2, r2, #8
 80019c6:	0011      	movs	r1, r2
 80019c8:	0018      	movs	r0, r3
 80019ca:	f001 fcab 	bl	8003324 <HAL_GPIO_ReadPin>
 80019ce:	1e03      	subs	r3, r0, #0
 80019d0:	d11f      	bne.n	8001a12 <alarmSetISR+0xa6>
		alarmSetMode = true;
 80019d2:	4b44      	ldr	r3, [pc, #272]	@ (8001ae4 <alarmSetISR+0x178>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 80019d8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad8 <alarmSetISR+0x16c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	0018      	movs	r0, r3
 80019de:	f004 fd81 	bl	80064e4 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 80019e2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad8 <alarmSetISR+0x16c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2200      	movs	r2, #0
 80019ea:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 80019ec:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad8 <alarmSetISR+0x16c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0018      	movs	r0, r3
 80019f2:	f004 fd2b 	bl	800644c <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 80019f6:	4b38      	ldr	r3, [pc, #224]	@ (8001ad8 <alarmSetISR+0x16c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 8001a02:	1cfb      	adds	r3, r7, #3
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 8001a08:	4b36      	ldr	r3, [pc, #216]	@ (8001ae4 <alarmSetISR+0x178>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d059      	beq.n	8001ac4 <alarmSetISR+0x158>
 8001a10:	e002      	b.n	8001a18 <alarmSetISR+0xac>
		return halRet;
 8001a12:	1c7b      	adds	r3, r7, #1
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	e05a      	b.n	8001ace <alarmSetISR+0x162>

		bool displayBlink = false;
 8001a18:	1cbb      	adds	r3, r7, #2
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 8001a1e:	4b30      	ldr	r3, [pc, #192]	@ (8001ae0 <alarmSetISR+0x174>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2280      	movs	r2, #128	@ 0x80
 8001a24:	0212      	lsls	r2, r2, #8
 8001a26:	0011      	movs	r1, r2
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f001 fc7b 	bl	8003324 <HAL_GPIO_ReadPin>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d102      	bne.n	8001a3a <alarmSetISR+0xce>
				alarmSetButtonReset = true;
 8001a34:	1cfb      	adds	r3, r7, #3
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 8001a3a:	f7ff fd8d 	bl	8001558 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8001a3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <alarmSetISR+0x16c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	1ad2      	subs	r2, r2, r3
 8001a4c:	2380      	movs	r3, #128	@ 0x80
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d31b      	bcc.n	8001a8c <alarmSetISR+0x120>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8001a54:	1cbb      	adds	r3, r7, #2
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4a23      	ldr	r2, [pc, #140]	@ (8001ae8 <alarmSetISR+0x17c>)
 8001a5a:	5cd3      	ldrb	r3, [r2, r3]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f000 fc3b 	bl	80022d8 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8001a62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <alarmSetISR+0x16c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 8001a6e:	1cbb      	adds	r3, r7, #2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	1e5a      	subs	r2, r3, #1
 8001a74:	4193      	sbcs	r3, r2
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4053      	eors	r3, r2
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	001a      	movs	r2, r3
 8001a80:	1cbb      	adds	r3, r7, #2
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	2101      	movs	r1, #1
 8001a88:	400a      	ands	r2, r1
 8001a8a:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 8001a8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <alarmSetISR+0x174>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2280      	movs	r2, #128	@ 0x80
 8001a92:	0212      	lsls	r2, r2, #8
 8001a94:	0011      	movs	r1, r2
 8001a96:	0018      	movs	r0, r3
 8001a98:	f001 fc44 	bl	8003324 <HAL_GPIO_ReadPin>
 8001a9c:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 8001a9e:	d1be      	bne.n	8001a1e <alarmSetISR+0xb2>
 8001aa0:	1cfb      	adds	r3, r7, #3
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4053      	eors	r3, r2
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1b7      	bne.n	8001a1e <alarmSetISR+0xb2>

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 8001aae:	2332      	movs	r3, #50	@ 0x32
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f000 fc11 	bl	80022d8 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 8001ab6:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <alarmSetISR+0x16c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	0018      	movs	r0, r3
 8001abc:	f004 fd12 	bl	80064e4 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001ac0:	f7ff fd10 	bl	80014e4 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001ac4:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <alarmSetISR+0x178>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8001aca:	1c7b      	adds	r3, r7, #1
 8001acc:	781b      	ldrb	r3, [r3, #0]

}
 8001ace:	0018      	movs	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b002      	add	sp, #8
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	46c0      	nop			@ (mov r8, r8)
 8001ad8:	20000050 	.word	0x20000050
 8001adc:	0000fffe 	.word	0x0000fffe
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	200003e8 	.word	0x200003e8
 8001ae8:	08007520 	.word	0x08007520

08001aec <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 8001af2:	1dfb      	adds	r3, r7, #7
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001af8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <hourSetISR+0x48>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <hourSetISR+0x1a>

		alarmHourInc();
 8001b00:	f000 f89a 	bl	8001c38 <alarmHourInc>
 8001b04:	e00f      	b.n	8001b26 <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 8001b06:	f000 f8c7 	bl	8001c98 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001b0a:	490b      	ldr	r1, [pc, #44]	@ (8001b38 <hourSetISR+0x4c>)
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <hourSetISR+0x50>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	0018      	movs	r0, r3
 8001b12:	f003 fe19 	bl	8005748 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001b16:	f7ff fce5 	bl	80014e4 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001b1a:	4a09      	ldr	r2, [pc, #36]	@ (8001b40 <hourSetISR+0x54>)
 8001b1c:	4906      	ldr	r1, [pc, #24]	@ (8001b38 <hourSetISR+0x4c>)
 8001b1e:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <hourSetISR+0x50>)
 8001b20:	0018      	movs	r0, r3
 8001b22:	f7fe ffc1 	bl	8000aa8 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8001b26:	1dfb      	adds	r3, r7, #7
 8001b28:	781b      	ldrb	r3, [r3, #0]

}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b002      	add	sp, #8
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	46c0      	nop			@ (mov r8, r8)
 8001b34:	200003e8 	.word	0x200003e8
 8001b38:	2000009c 	.word	0x2000009c
 8001b3c:	200001bc 	.word	0x200001bc
 8001b40:	200000b0 	.word	0x200000b0

08001b44 <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08c      	sub	sp, #48	@ 0x30
 8001b48:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 8001b4a:	232f      	movs	r3, #47	@ 0x2f
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001b52:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <minuteSetISR+0x94>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <minuteSetISR+0x1c>

		alarmMinuteInc();
 8001b5a:	f000 f8dd 	bl	8001d18 <alarmMinuteInc>
 8001b5e:	e034      	b.n	8001bca <minuteSetISR+0x86>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8001b60:	f000 f8f8 	bl	8001d54 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001b64:	491d      	ldr	r1, [pc, #116]	@ (8001bdc <minuteSetISR+0x98>)
 8001b66:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <minuteSetISR+0x9c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f003 fdec 	bl	8005748 <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	0018      	movs	r0, r3
 8001b74:	2328      	movs	r3, #40	@ 0x28
 8001b76:	001a      	movs	r2, r3
 8001b78:	2100      	movs	r1, #0
 8001b7a:	f005 fc7d 	bl	8007478 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001b7e:	2380      	movs	r3, #128	@ 0x80
 8001b80:	005a      	lsls	r2, r3, #1
 8001b82:	1d39      	adds	r1, r7, #4
 8001b84:	4816      	ldr	r0, [pc, #88]	@ (8001be0 <minuteSetISR+0x9c>)
 8001b86:	2300      	movs	r3, #0
 8001b88:	f004 f870 	bl	8005c6c <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	785b      	ldrb	r3, [r3, #1]
 8001b90:	2b3a      	cmp	r3, #58	@ 0x3a
 8001b92:	d903      	bls.n	8001b9c <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	2200      	movs	r2, #0
 8001b98:	705a      	strb	r2, [r3, #1]
 8001b9a:	e005      	b.n	8001ba8 <minuteSetISR+0x64>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	785b      	ldrb	r3, [r3, #1]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	1d39      	adds	r1, r7, #4
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <minuteSetISR+0x9c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f003 ff1b 	bl	80059ec <HAL_RTC_SetAlarm_IT>
 8001bb6:	1e03      	subs	r3, r0, #0
 8001bb8:	d1f7      	bne.n	8001baa <minuteSetISR+0x66>

		updateAndDisplayTime();
 8001bba:	f7ff fc93 	bl	80014e4 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001bbe:	4a09      	ldr	r2, [pc, #36]	@ (8001be4 <minuteSetISR+0xa0>)
 8001bc0:	4906      	ldr	r1, [pc, #24]	@ (8001bdc <minuteSetISR+0x98>)
 8001bc2:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <minuteSetISR+0x9c>)
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7fe ff6f 	bl	8000aa8 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8001bca:	232f      	movs	r3, #47	@ 0x2f
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	781b      	ldrb	r3, [r3, #0]
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b00c      	add	sp, #48	@ 0x30
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200003e8 	.word	0x200003e8
 8001bdc:	2000009c 	.word	0x2000009c
 8001be0:	200001bc 	.word	0x200001bc
 8001be4:	200000b0 	.word	0x200000b0

08001be8 <timeFormatSwitchISR>:

/*
 * Switch hour format (12 or 24 hr)
 */
HAL_StatusTypeDef timeFormatSwitchISR(void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001bee:	1dfb      	adds	r3, r7, #7
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]

	// Determine which time format we will be using
	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <timeFormatSwitchISR+0x44>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	0011      	movs	r1, r2
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f001 fb91 	bl	8003324 <HAL_GPIO_ReadPin>
 8001c02:	0003      	movs	r3, r0
 8001c04:	001a      	movs	r2, r3
 8001c06:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <timeFormatSwitchISR+0x48>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d103      	bne.n	8001c16 <timeFormatSwitchISR+0x2e>
	  userTimeFormat = RTC_HOURFORMAT_12;
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <timeFormatSwitchISR+0x4c>)
 8001c10:	2240      	movs	r2, #64	@ 0x40
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e002      	b.n	8001c1c <timeFormatSwitchISR+0x34>
	}
	else {
	  userTimeFormat = RTC_HOURFORMAT_24;
 8001c16:	4b07      	ldr	r3, [pc, #28]	@ (8001c34 <timeFormatSwitchISR+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
	}

	updateAndDisplayTime();
 8001c1c:	f7ff fc62 	bl	80014e4 <updateAndDisplayTime>

	return halRet;
 8001c20:	1dfb      	adds	r3, r7, #7
 8001c22:	781b      	ldrb	r3, [r3, #0]

}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	20000040 	.word	0x20000040
 8001c34:	200000cc 	.word	0x200000cc

08001c38 <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001c3c:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <alarmHourInc+0x5c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b0b      	cmp	r3, #11
 8001c42:	d903      	bls.n	8001c4c <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001c44:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <alarmHourInc+0x5c>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
 8001c4a:	e01e      	b.n	8001c8a <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8001c4c:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <alarmHourInc+0x5c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b0b      	cmp	r3, #11
 8001c52:	d10e      	bne.n	8001c72 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001c54:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <alarmHourInc+0x5c>)
 8001c56:	78db      	ldrb	r3, [r3, #3]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d103      	bne.n	8001c64 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <alarmHourInc+0x5c>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	70da      	strb	r2, [r3, #3]
 8001c62:	e002      	b.n	8001c6a <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <alarmHourInc+0x5c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <alarmHourInc+0x5c>)
 8001c6c:	220c      	movs	r2, #12
 8001c6e:	701a      	strb	r2, [r3, #0]
 8001c70:	e00b      	b.n	8001c8a <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 8001c72:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <alarmHourInc+0x5c>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b0a      	cmp	r3, #10
 8001c78:	d806      	bhi.n	8001c88 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001c7a:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <alarmHourInc+0x5c>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <alarmHourInc+0x5c>)
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	e000      	b.n	8001c8a <alarmHourInc+0x52>
	}
	else {
		__NOP();
 8001c88:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001c8a:	f000 f8e1 	bl	8001e50 <updateRTCBackupReg>

}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	200000b4 	.word	0x200000b4

08001c98 <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001d08 <currHourInc+0x70>)
 8001c9e:	491b      	ldr	r1, [pc, #108]	@ (8001d0c <currHourInc+0x74>)
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <currHourInc+0x78>)
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f7fe ff00 	bl	8000aa8 <getRTCTime>

	if(currTime.Hours >= 12) {
 8001ca8:	4b18      	ldr	r3, [pc, #96]	@ (8001d0c <currHourInc+0x74>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b0b      	cmp	r3, #11
 8001cae:	d903      	bls.n	8001cb8 <currHourInc+0x20>
		currTime.Hours = 1;
 8001cb0:	4b16      	ldr	r3, [pc, #88]	@ (8001d0c <currHourInc+0x74>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	e01e      	b.n	8001cf6 <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8001cb8:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <currHourInc+0x74>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b0b      	cmp	r3, #11
 8001cbe:	d10e      	bne.n	8001cde <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001cc0:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <currHourInc+0x74>)
 8001cc2:	78db      	ldrb	r3, [r3, #3]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d103      	bne.n	8001cd0 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001cc8:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <currHourInc+0x74>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	70da      	strb	r2, [r3, #3]
 8001cce:	e002      	b.n	8001cd6 <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <currHourInc+0x74>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <currHourInc+0x74>)
 8001cd8:	220c      	movs	r2, #12
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	e00b      	b.n	8001cf6 <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 8001cde:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <currHourInc+0x7c>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b0a      	cmp	r3, #10
 8001ce4:	d806      	bhi.n	8001cf4 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <currHourInc+0x74>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <currHourInc+0x74>)
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	e000      	b.n	8001cf6 <currHourInc+0x5e>
	}
	else {
		__NOP();
 8001cf4:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001cf6:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <currHourInc+0x74>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	@ (8001d0c <currHourInc+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]

}
 8001d02:	46c0      	nop			@ (mov r8, r8)
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200000b0 	.word	0x200000b0
 8001d0c:	2000009c 	.word	0x2000009c
 8001d10:	200001bc 	.word	0x200001bc
 8001d14:	200000b4 	.word	0x200000b4

08001d18 <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <alarmMinuteInc+0x38>)
 8001d1e:	785b      	ldrb	r3, [r3, #1]
 8001d20:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d22:	d903      	bls.n	8001d2c <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 8001d24:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <alarmMinuteInc+0x38>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	705a      	strb	r2, [r3, #1]
 8001d2a:	e00b      	b.n	8001d44 <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 8001d2c:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <alarmMinuteInc+0x38>)
 8001d2e:	785b      	ldrb	r3, [r3, #1]
 8001d30:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d32:	d806      	bhi.n	8001d42 <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <alarmMinuteInc+0x38>)
 8001d36:	785b      	ldrb	r3, [r3, #1]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	4b04      	ldr	r3, [pc, #16]	@ (8001d50 <alarmMinuteInc+0x38>)
 8001d3e:	705a      	strb	r2, [r3, #1]
 8001d40:	e000      	b.n	8001d44 <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 8001d42:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001d44:	f000 f884 	bl	8001e50 <updateRTCBackupReg>

}
 8001d48:	46c0      	nop			@ (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	200000b4 	.word	0x200000b4

08001d54 <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001d58:	4a11      	ldr	r2, [pc, #68]	@ (8001da0 <currMinuteInc+0x4c>)
 8001d5a:	4912      	ldr	r1, [pc, #72]	@ (8001da4 <currMinuteInc+0x50>)
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <currMinuteInc+0x54>)
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f7fe fea2 	bl	8000aa8 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8001d64:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <currMinuteInc+0x50>)
 8001d66:	785b      	ldrb	r3, [r3, #1]
 8001d68:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d6a:	d903      	bls.n	8001d74 <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001da4 <currMinuteInc+0x50>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	705a      	strb	r2, [r3, #1]
 8001d72:	e00b      	b.n	8001d8c <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8001d74:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <currMinuteInc+0x50>)
 8001d76:	785b      	ldrb	r3, [r3, #1]
 8001d78:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d7a:	d806      	bhi.n	8001d8a <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <currMinuteInc+0x50>)
 8001d7e:	785b      	ldrb	r3, [r3, #1]
 8001d80:	3301      	adds	r3, #1
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <currMinuteInc+0x50>)
 8001d86:	705a      	strb	r2, [r3, #1]
 8001d88:	e000      	b.n	8001d8c <currMinuteInc+0x38>
	}
	else {
		__NOP();
 8001d8a:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001d8c:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <currMinuteInc+0x50>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001d92:	4b04      	ldr	r3, [pc, #16]	@ (8001da4 <currMinuteInc+0x50>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]

}
 8001d98:	46c0      	nop			@ (mov r8, r8)
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	200000b0 	.word	0x200000b0
 8001da4:	2000009c 	.word	0x2000009c
 8001da8:	200001bc 	.word	0x200001bc

08001dac <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <dispFault+0x1c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2280      	movs	r2, #128	@ 0x80
 8001db6:	0151      	lsls	r1, r2, #5
 8001db8:	2201      	movs	r2, #1
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f001 facf 	bl	800335e <HAL_GPIO_WritePin>
}
 8001dc0:	46c0      	nop			@ (mov r8, r8)
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	20000028 	.word	0x20000028

08001dcc <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e44 <dispFailure+0x78>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f004 fb84 	bl	80064e4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001ddc:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <dispFailure+0x78>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f004 fb33 	bl	800644c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001de6:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <dispFailure+0x78>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dee:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001df0:	1cfb      	adds	r3, r7, #3
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001df6:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <dispFailure+0x78>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	4a11      	ldr	r2, [pc, #68]	@ (8001e48 <dispFailure+0x7c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d9f6      	bls.n	8001df6 <dispFailure+0x2a>

			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8001e08:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <dispFailure+0x80>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2280      	movs	r2, #128	@ 0x80
 8001e0e:	0152      	lsls	r2, r2, #5
 8001e10:	0011      	movs	r1, r2
 8001e12:	0018      	movs	r0, r3
 8001e14:	f001 fac0 	bl	8003398 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001e18:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <dispFailure+0x78>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e20:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001e22:	1cfb      	adds	r3, r7, #3
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	1e5a      	subs	r2, r3, #1
 8001e28:	4193      	sbcs	r3, r2
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4053      	eors	r3, r2
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	001a      	movs	r2, r3
 8001e34:	1cfb      	adds	r3, r7, #3
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001e40:	e7d9      	b.n	8001df6 <dispFailure+0x2a>
 8001e42:	46c0      	nop			@ (mov r8, r8)
 8001e44:	20000050 	.word	0x20000050
 8001e48:	00003ffe 	.word	0x00003ffe
 8001e4c:	20000028 	.word	0x20000028

08001e50 <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8001e54:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <updateRTCBackupReg+0x40>)
 8001e56:	6819      	ldr	r1, [r3, #0]
 8001e58:	4b0e      	ldr	r3, [pc, #56]	@ (8001e94 <updateRTCBackupReg+0x44>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	001a      	movs	r2, r3
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e98 <updateRTCBackupReg+0x48>)
 8001e60:	0018      	movs	r0, r3
 8001e62:	f004 f9ab 	bl	80061bc <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8001e66:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <updateRTCBackupReg+0x4c>)
 8001e68:	6819      	ldr	r1, [r3, #0]
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <updateRTCBackupReg+0x44>)
 8001e6c:	785b      	ldrb	r3, [r3, #1]
 8001e6e:	001a      	movs	r2, r3
 8001e70:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <updateRTCBackupReg+0x48>)
 8001e72:	0018      	movs	r0, r3
 8001e74:	f004 f9a2 	bl	80061bc <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8001e78:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <updateRTCBackupReg+0x50>)
 8001e7a:	6819      	ldr	r1, [r3, #0]
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <updateRTCBackupReg+0x44>)
 8001e7e:	78db      	ldrb	r3, [r3, #3]
 8001e80:	001a      	movs	r2, r3
 8001e82:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <updateRTCBackupReg+0x48>)
 8001e84:	0018      	movs	r0, r3
 8001e86:	f004 f999 	bl	80061bc <HAL_RTCEx_BKUPWrite>

}
 8001e8a:	46c0      	nop			@ (mov r8, r8)
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200000c8 	.word	0x200000c8
 8001e94:	200000b4 	.word	0x200000b4
 8001e98:	200001bc 	.word	0x200001bc
 8001e9c:	20000034 	.word	0x20000034
 8001ea0:	20000038 	.word	0x20000038

08001ea4 <conv2Mil>:

/*
 * Converts the time in an AM/PM RTC time to 24-hour time
 * Returns this time in an RTC Time Def object
 */
RTC_TimeTypeDef conv2Mil(RTC_TimeTypeDef *oldTime) {
 8001ea4:	b5b0      	push	{r4, r5, r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]

	RTC_TimeTypeDef convertedTime = *oldTime;
 8001eae:	250c      	movs	r5, #12
 8001eb0:	197b      	adds	r3, r7, r5
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001eb6:	c313      	stmia	r3!, {r0, r1, r4}
 8001eb8:	ca03      	ldmia	r2!, {r0, r1}
 8001eba:	c303      	stmia	r3!, {r0, r1}

	// If we are in PM, increment hours by 12 (but not if it is 12 p.m.)
	if(oldTime->TimeFormat == RTC_HOURFORMAT12_PM && oldTime->Hours != 12) {
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	78db      	ldrb	r3, [r3, #3]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d10a      	bne.n	8001eda <conv2Mil+0x36>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b0c      	cmp	r3, #12
 8001eca:	d006      	beq.n	8001eda <conv2Mil+0x36>
		convertedTime.Hours += 12;
 8001ecc:	197b      	adds	r3, r7, r5
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	330c      	adds	r3, #12
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	197b      	adds	r3, r7, r5
 8001ed6:	701a      	strb	r2, [r3, #0]
 8001ed8:	e00b      	b.n	8001ef2 <conv2Mil+0x4e>
	}
	// If we are in AM and the hours are 12, set hours to 0.
	else if(oldTime->TimeFormat == RTC_HOURFORMAT12_AM && oldTime->Hours == 12) {
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	78db      	ldrb	r3, [r3, #3]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d107      	bne.n	8001ef2 <conv2Mil+0x4e>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d103      	bne.n	8001ef2 <conv2Mil+0x4e>
		convertedTime.Hours = 0;
 8001eea:	230c      	movs	r3, #12
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
	else { // No change

	}

	// Make the update and display time function think that it is AM always
	convertedTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001ef2:	210c      	movs	r1, #12
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	70da      	strb	r2, [r3, #3]

	return convertedTime;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	187a      	adds	r2, r7, r1
 8001efe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f00:	c313      	stmia	r3!, {r0, r1, r4}
 8001f02:	ca03      	ldmia	r2!, {r0, r1}
 8001f04:	c303      	stmia	r3!, {r0, r1}

}
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b008      	add	sp, #32
 8001f0c:	bdb0      	pop	{r4, r5, r7, pc}

08001f0e <startAudioStream>:

/*
 * Begins DMA streams to pull data from memory, process data, and push to i2s amplifier.
 */
void startAudioStream(void) {
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	af00      	add	r7, sp, #0

	// Enable Amp


}
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <stopAudioStream>:

/*
 * Halts double-buffered DMA streams, terminating audio output
 */
void stopAudioStream(void) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0

	// Disable Amp

}
 8001f1c:	46c0      	nop			@ (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f26:	b672      	cpsid	i
}
 8001f28:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	e7fd      	b.n	8001f2a <Error_Handler+0x8>
	...

08001f30 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	0005      	movs	r5, r0
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0010      	movs	r0, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	1dbb      	adds	r3, r7, #6
 8001f40:	1c2a      	adds	r2, r5, #0
 8001f42:	801a      	strh	r2, [r3, #0]
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	1c22      	adds	r2, r4, #0
 8001f48:	801a      	strh	r2, [r3, #0]
 8001f4a:	1cbb      	adds	r3, r7, #2
 8001f4c:	1c02      	adds	r2, r0, #0
 8001f4e:	801a      	strh	r2, [r3, #0]
 8001f50:	003b      	movs	r3, r7
 8001f52:	1c0a      	adds	r2, r1, #0
 8001f54:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001f56:	4b7c      	ldr	r3, [pc, #496]	@ (8002148 <sevSeg_Init+0x218>)
 8001f58:	1dba      	adds	r2, r7, #6
 8001f5a:	8812      	ldrh	r2, [r2, #0]
 8001f5c:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001f5e:	4b7b      	ldr	r3, [pc, #492]	@ (800214c <sevSeg_Init+0x21c>)
 8001f60:	1d3a      	adds	r2, r7, #4
 8001f62:	8812      	ldrh	r2, [r2, #0]
 8001f64:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001f66:	4b7a      	ldr	r3, [pc, #488]	@ (8002150 <sevSeg_Init+0x220>)
 8001f68:	1cba      	adds	r2, r7, #2
 8001f6a:	8812      	ldrh	r2, [r2, #0]
 8001f6c:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001f6e:	4b79      	ldr	r3, [pc, #484]	@ (8002154 <sevSeg_Init+0x224>)
 8001f70:	003a      	movs	r2, r7
 8001f72:	8812      	ldrh	r2, [r2, #0]
 8001f74:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001f76:	4a78      	ldr	r2, [pc, #480]	@ (8002158 <sevSeg_Init+0x228>)
 8001f78:	2330      	movs	r3, #48	@ 0x30
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8001f80:	4a76      	ldr	r2, [pc, #472]	@ (800215c <sevSeg_Init+0x22c>)
 8001f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f84:	0010      	movs	r0, r2
 8001f86:	0019      	movs	r1, r3
 8001f88:	234c      	movs	r3, #76	@ 0x4c
 8001f8a:	001a      	movs	r2, r3
 8001f8c:	f005 faa0 	bl	80074d0 <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8001f90:	4b73      	ldr	r3, [pc, #460]	@ (8002160 <sevSeg_Init+0x230>)
 8001f92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f94:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	e00b      	b.n	8001fb4 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fa2:	18d3      	adds	r3, r2, r3
 8001fa4:	6819      	ldr	r1, [r3, #0]
 8001fa6:	4b6f      	ldr	r3, [pc, #444]	@ (8002164 <sevSeg_Init+0x234>)
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	ddf0      	ble.n	8001f9c <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001fba:	4b6a      	ldr	r3, [pc, #424]	@ (8002164 <sevSeg_Init+0x234>)
 8001fbc:	6918      	ldr	r0, [r3, #16]
 8001fbe:	4b66      	ldr	r3, [pc, #408]	@ (8002158 <sevSeg_Init+0x228>)
 8001fc0:	8819      	ldrh	r1, [r3, #0]
 8001fc2:	4b69      	ldr	r3, [pc, #420]	@ (8002168 <sevSeg_Init+0x238>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	001a      	movs	r2, r3
 8001fc8:	f001 f9c9 	bl	800335e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001fcc:	4b65      	ldr	r3, [pc, #404]	@ (8002164 <sevSeg_Init+0x234>)
 8001fce:	6918      	ldr	r0, [r3, #16]
 8001fd0:	4b61      	ldr	r3, [pc, #388]	@ (8002158 <sevSeg_Init+0x228>)
 8001fd2:	8819      	ldrh	r1, [r3, #0]
 8001fd4:	4b64      	ldr	r3, [pc, #400]	@ (8002168 <sevSeg_Init+0x238>)
 8001fd6:	785b      	ldrb	r3, [r3, #1]
 8001fd8:	001a      	movs	r2, r3
 8001fda:	f001 f9c0 	bl	800335e <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001fde:	4b61      	ldr	r3, [pc, #388]	@ (8002164 <sevSeg_Init+0x234>)
 8001fe0:	6898      	ldr	r0, [r3, #8]
 8001fe2:	4b5b      	ldr	r3, [pc, #364]	@ (8002150 <sevSeg_Init+0x220>)
 8001fe4:	8819      	ldrh	r1, [r3, #0]
 8001fe6:	4b60      	ldr	r3, [pc, #384]	@ (8002168 <sevSeg_Init+0x238>)
 8001fe8:	785b      	ldrb	r3, [r3, #1]
 8001fea:	001a      	movs	r2, r3
 8001fec:	f001 f9b7 	bl	800335e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001ff0:	4b5c      	ldr	r3, [pc, #368]	@ (8002164 <sevSeg_Init+0x234>)
 8001ff2:	6898      	ldr	r0, [r3, #8]
 8001ff4:	4b56      	ldr	r3, [pc, #344]	@ (8002150 <sevSeg_Init+0x220>)
 8001ff6:	8819      	ldrh	r1, [r3, #0]
 8001ff8:	4b5b      	ldr	r3, [pc, #364]	@ (8002168 <sevSeg_Init+0x238>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	001a      	movs	r2, r3
 8001ffe:	f001 f9ae 	bl	800335e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8002002:	4b58      	ldr	r3, [pc, #352]	@ (8002164 <sevSeg_Init+0x234>)
 8002004:	68d8      	ldr	r0, [r3, #12]
 8002006:	4b53      	ldr	r3, [pc, #332]	@ (8002154 <sevSeg_Init+0x224>)
 8002008:	8819      	ldrh	r1, [r3, #0]
 800200a:	4b57      	ldr	r3, [pc, #348]	@ (8002168 <sevSeg_Init+0x238>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	001a      	movs	r2, r3
 8002010:	f001 f9a5 	bl	800335e <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8002014:	2032      	movs	r0, #50	@ 0x32
 8002016:	f000 f95f 	bl	80022d8 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 800201a:	2308      	movs	r3, #8
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	4a53      	ldr	r2, [pc, #332]	@ (800216c <sevSeg_Init+0x23c>)
 8002020:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	e038      	b.n	800209a <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8002028:	231b      	movs	r3, #27
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2208      	movs	r2, #8
 800202e:	18b9      	adds	r1, r7, r2
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	188a      	adds	r2, r1, r2
 8002034:	7812      	ldrb	r2, [r2, #0]
 8002036:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	e027      	b.n	800208e <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 800203e:	4b49      	ldr	r3, [pc, #292]	@ (8002164 <sevSeg_Init+0x234>)
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	4b41      	ldr	r3, [pc, #260]	@ (8002148 <sevSeg_Init+0x218>)
 8002044:	8819      	ldrh	r1, [r3, #0]
 8002046:	241b      	movs	r4, #27
 8002048:	193b      	adds	r3, r7, r4
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2201      	movs	r2, #1
 800204e:	4013      	ands	r3, r2
 8002050:	4a45      	ldr	r2, [pc, #276]	@ (8002168 <sevSeg_Init+0x238>)
 8002052:	5cd3      	ldrb	r3, [r2, r3]
 8002054:	001a      	movs	r2, r3
 8002056:	f001 f982 	bl	800335e <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 800205a:	4b42      	ldr	r3, [pc, #264]	@ (8002164 <sevSeg_Init+0x234>)
 800205c:	6858      	ldr	r0, [r3, #4]
 800205e:	4b3b      	ldr	r3, [pc, #236]	@ (800214c <sevSeg_Init+0x21c>)
 8002060:	8819      	ldrh	r1, [r3, #0]
 8002062:	4b41      	ldr	r3, [pc, #260]	@ (8002168 <sevSeg_Init+0x238>)
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	001a      	movs	r2, r3
 8002068:	f001 f979 	bl	800335e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 800206c:	4b3d      	ldr	r3, [pc, #244]	@ (8002164 <sevSeg_Init+0x234>)
 800206e:	6858      	ldr	r0, [r3, #4]
 8002070:	4b36      	ldr	r3, [pc, #216]	@ (800214c <sevSeg_Init+0x21c>)
 8002072:	8819      	ldrh	r1, [r3, #0]
 8002074:	4b3c      	ldr	r3, [pc, #240]	@ (8002168 <sevSeg_Init+0x238>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	001a      	movs	r2, r3
 800207a:	f001 f970 	bl	800335e <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 800207e:	193b      	adds	r3, r7, r4
 8002080:	193a      	adds	r2, r7, r4
 8002082:	7812      	ldrb	r2, [r2, #0]
 8002084:	0852      	lsrs	r2, r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	3301      	adds	r3, #1
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b07      	cmp	r3, #7
 8002092:	ddd4      	ble.n	800203e <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3301      	adds	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b03      	cmp	r3, #3
 800209e:	ddc3      	ble.n	8002028 <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80020a0:	4b30      	ldr	r3, [pc, #192]	@ (8002164 <sevSeg_Init+0x234>)
 80020a2:	6898      	ldr	r0, [r3, #8]
 80020a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002150 <sevSeg_Init+0x220>)
 80020a6:	8819      	ldrh	r1, [r3, #0]
 80020a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002168 <sevSeg_Init+0x238>)
 80020aa:	785b      	ldrb	r3, [r3, #1]
 80020ac:	001a      	movs	r2, r3
 80020ae:	f001 f956 	bl	800335e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80020b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002164 <sevSeg_Init+0x234>)
 80020b4:	6898      	ldr	r0, [r3, #8]
 80020b6:	4b26      	ldr	r3, [pc, #152]	@ (8002150 <sevSeg_Init+0x220>)
 80020b8:	8819      	ldrh	r1, [r3, #0]
 80020ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002168 <sevSeg_Init+0x238>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	001a      	movs	r2, r3
 80020c0:	f001 f94d 	bl	800335e <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 80020c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c6:	0018      	movs	r0, r3
 80020c8:	f004 fa0c 	bl	80064e4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 80020cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020ce:	0018      	movs	r0, r3
 80020d0:	f004 f9bc 	bl	800644c <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 80020d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 80020dc:	46c0      	nop			@ (mov r8, r8)
 80020de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1ad2      	subs	r2, r2, r3
 80020e8:	2380      	movs	r3, #128	@ 0x80
 80020ea:	01db      	lsls	r3, r3, #7
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d3f6      	bcc.n	80020de <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 80020f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020f2:	0018      	movs	r0, r3
 80020f4:	f004 f9f6 	bl	80064e4 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 80020f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <sevSeg_Init+0x234>)
 80020fa:	6918      	ldr	r0, [r3, #16]
 80020fc:	4b16      	ldr	r3, [pc, #88]	@ (8002158 <sevSeg_Init+0x228>)
 80020fe:	8819      	ldrh	r1, [r3, #0]
 8002100:	4b19      	ldr	r3, [pc, #100]	@ (8002168 <sevSeg_Init+0x238>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	001a      	movs	r2, r3
 8002106:	f001 f92a 	bl	800335e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 800210a:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <sevSeg_Init+0x234>)
 800210c:	6918      	ldr	r0, [r3, #16]
 800210e:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <sevSeg_Init+0x228>)
 8002110:	8819      	ldrh	r1, [r3, #0]
 8002112:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <sevSeg_Init+0x238>)
 8002114:	785b      	ldrb	r3, [r3, #1]
 8002116:	001a      	movs	r2, r3
 8002118:	f001 f921 	bl	800335e <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <sevSeg_Init+0x234>)
 800211e:	6898      	ldr	r0, [r3, #8]
 8002120:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <sevSeg_Init+0x220>)
 8002122:	8819      	ldrh	r1, [r3, #0]
 8002124:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <sevSeg_Init+0x238>)
 8002126:	785b      	ldrb	r3, [r3, #1]
 8002128:	001a      	movs	r2, r3
 800212a:	f001 f918 	bl	800335e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800212e:	4b0d      	ldr	r3, [pc, #52]	@ (8002164 <sevSeg_Init+0x234>)
 8002130:	6898      	ldr	r0, [r3, #8]
 8002132:	4b07      	ldr	r3, [pc, #28]	@ (8002150 <sevSeg_Init+0x220>)
 8002134:	8819      	ldrh	r1, [r3, #0]
 8002136:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <sevSeg_Init+0x238>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	001a      	movs	r2, r3
 800213c:	f001 f90f 	bl	800335e <HAL_GPIO_WritePin>

}
 8002140:	46c0      	nop			@ (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b008      	add	sp, #32
 8002146:	bdb0      	pop	{r4, r5, r7, pc}
 8002148:	20000410 	.word	0x20000410
 800214c:	20000412 	.word	0x20000412
 8002150:	20000414 	.word	0x20000414
 8002154:	20000416 	.word	0x20000416
 8002158:	20000418 	.word	0x20000418
 800215c:	2000041c 	.word	0x2000041c
 8002160:	20000468 	.word	0x20000468
 8002164:	20000058 	.word	0x20000058
 8002168:	2000006c 	.word	0x2000006c
 800216c:	471d3700 	.word	0x471d3700

08002170 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime, uint8_t userAlarmEnable) {
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	000a      	movs	r2, r1
 800217a:	1cfb      	adds	r3, r7, #3
 800217c:	701a      	strb	r2, [r3, #0]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	210a      	movs	r1, #10
 8002184:	0018      	movs	r0, r3
 8002186:	f7fd ffbd 	bl	8000104 <__udivsi3>
 800218a:	0003      	movs	r3, r0
 800218c:	b2da      	uxtb	r2, r3
 800218e:	2408      	movs	r4, #8
 8002190:	193b      	adds	r3, r7, r4
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	210a      	movs	r1, #10
 800219a:	0018      	movs	r0, r3
 800219c:	f7fe f838 	bl	8000210 <__aeabi_uidivmod>
 80021a0:	000b      	movs	r3, r1
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	193b      	adds	r3, r7, r4
 80021a6:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80021ac:	210a      	movs	r1, #10
 80021ae:	0018      	movs	r0, r3
 80021b0:	f7fd ffa8 	bl	8000104 <__udivsi3>
 80021b4:	0003      	movs	r3, r0
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	193b      	adds	r3, r7, r4
 80021ba:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80021c0:	210a      	movs	r1, #10
 80021c2:	0018      	movs	r0, r3
 80021c4:	f7fe f824 	bl	8000210 <__aeabi_uidivmod>
 80021c8:	000b      	movs	r3, r1
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	193b      	adds	r3, r7, r4
 80021ce:	70da      	strb	r2, [r3, #3]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 3; i >= 0; i--) {
 80021d0:	2303      	movs	r3, #3
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	e05b      	b.n	800228e <sevSeg_updateDigits+0x11e>

		sendByte = dispDigits[sendTime[i]];
 80021d6:	2308      	movs	r3, #8
 80021d8:	18fa      	adds	r2, r7, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	18d3      	adds	r3, r2, r3
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	0019      	movs	r1, r3
 80021e2:	2017      	movs	r0, #23
 80021e4:	183b      	adds	r3, r7, r0
 80021e6:	4a36      	ldr	r2, [pc, #216]	@ (80022c0 <sevSeg_updateDigits+0x150>)
 80021e8:	5c52      	ldrb	r2, [r2, r1]
 80021ea:	701a      	strb	r2, [r3, #0]

		// If tenth's place of hour and zero, disable this segment
		if( (i == 0) && (sendByte == dispDigits[0])) {
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d107      	bne.n	8002202 <sevSeg_updateDigits+0x92>
 80021f2:	2242      	movs	r2, #66	@ 0x42
 80021f4:	183b      	adds	r3, r7, r0
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d102      	bne.n	8002202 <sevSeg_updateDigits+0x92>
			sendByte = 0xFF;
 80021fc:	183b      	adds	r3, r7, r0
 80021fe:	22ff      	movs	r2, #255	@ 0xff
 8002200:	701a      	strb	r2, [r3, #0]
		}

		// If one's place of hour, set decimal point based on AM/PM.
		// OR
		// If one's place of minute, set decimal place based on user alarm enabled
		if( ((i == 1) && (updateTime->TimeFormat == RTC_HOURFORMAT12_PM)) ||
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d103      	bne.n	8002210 <sevSeg_updateDigits+0xa0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	78db      	ldrb	r3, [r3, #3]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d006      	beq.n	800221e <sevSeg_updateDigits+0xae>
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	2b03      	cmp	r3, #3
 8002214:	d10a      	bne.n	800222c <sevSeg_updateDigits+0xbc>
			((i == 3) && userAlarmEnable)	) {
 8002216:	1cfb      	adds	r3, r7, #3
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d006      	beq.n	800222c <sevSeg_updateDigits+0xbc>
			sendByte = (sendByte & 0b11111101);
 800221e:	2217      	movs	r2, #23
 8002220:	18bb      	adds	r3, r7, r2
 8002222:	18ba      	adds	r2, r7, r2
 8002224:	7812      	ldrb	r2, [r2, #0]
 8002226:	2102      	movs	r1, #2
 8002228:	438a      	bics	r2, r1
 800222a:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e027      	b.n	8002282 <sevSeg_updateDigits+0x112>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[(sendByte & 1)]);
 8002232:	4b24      	ldr	r3, [pc, #144]	@ (80022c4 <sevSeg_updateDigits+0x154>)
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	4b24      	ldr	r3, [pc, #144]	@ (80022c8 <sevSeg_updateDigits+0x158>)
 8002238:	8819      	ldrh	r1, [r3, #0]
 800223a:	2417      	movs	r4, #23
 800223c:	193b      	adds	r3, r7, r4
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2201      	movs	r2, #1
 8002242:	4013      	ands	r3, r2
 8002244:	4a21      	ldr	r2, [pc, #132]	@ (80022cc <sevSeg_updateDigits+0x15c>)
 8002246:	5cd3      	ldrb	r3, [r2, r3]
 8002248:	001a      	movs	r2, r3
 800224a:	f001 f888 	bl	800335e <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 800224e:	4b1d      	ldr	r3, [pc, #116]	@ (80022c4 <sevSeg_updateDigits+0x154>)
 8002250:	6858      	ldr	r0, [r3, #4]
 8002252:	4b1f      	ldr	r3, [pc, #124]	@ (80022d0 <sevSeg_updateDigits+0x160>)
 8002254:	8819      	ldrh	r1, [r3, #0]
 8002256:	4b1d      	ldr	r3, [pc, #116]	@ (80022cc <sevSeg_updateDigits+0x15c>)
 8002258:	785b      	ldrb	r3, [r3, #1]
 800225a:	001a      	movs	r2, r3
 800225c:	f001 f87f 	bl	800335e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8002260:	4b18      	ldr	r3, [pc, #96]	@ (80022c4 <sevSeg_updateDigits+0x154>)
 8002262:	6858      	ldr	r0, [r3, #4]
 8002264:	4b1a      	ldr	r3, [pc, #104]	@ (80022d0 <sevSeg_updateDigits+0x160>)
 8002266:	8819      	ldrh	r1, [r3, #0]
 8002268:	4b18      	ldr	r3, [pc, #96]	@ (80022cc <sevSeg_updateDigits+0x15c>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	001a      	movs	r2, r3
 800226e:	f001 f876 	bl	800335e <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8002272:	193b      	adds	r3, r7, r4
 8002274:	193a      	adds	r2, r7, r4
 8002276:	7812      	ldrb	r2, [r2, #0]
 8002278:	0852      	lsrs	r2, r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3301      	adds	r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b07      	cmp	r3, #7
 8002286:	ddd4      	ble.n	8002232 <sevSeg_updateDigits+0xc2>
	for(int i = 3; i >= 0; i--) {
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	3b01      	subs	r3, #1
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	daa0      	bge.n	80021d6 <sevSeg_updateDigits+0x66>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002294:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <sevSeg_updateDigits+0x154>)
 8002296:	6898      	ldr	r0, [r3, #8]
 8002298:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <sevSeg_updateDigits+0x164>)
 800229a:	8819      	ldrh	r1, [r3, #0]
 800229c:	4b0b      	ldr	r3, [pc, #44]	@ (80022cc <sevSeg_updateDigits+0x15c>)
 800229e:	785b      	ldrb	r3, [r3, #1]
 80022a0:	001a      	movs	r2, r3
 80022a2:	f001 f85c 	bl	800335e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80022a6:	4b07      	ldr	r3, [pc, #28]	@ (80022c4 <sevSeg_updateDigits+0x154>)
 80022a8:	6898      	ldr	r0, [r3, #8]
 80022aa:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <sevSeg_updateDigits+0x164>)
 80022ac:	8819      	ldrh	r1, [r3, #0]
 80022ae:	4b07      	ldr	r3, [pc, #28]	@ (80022cc <sevSeg_updateDigits+0x15c>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	001a      	movs	r2, r3
 80022b4:	f001 f853 	bl	800335e <HAL_GPIO_WritePin>

	return;
 80022b8:	46c0      	nop			@ (mov r8, r8)

}
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b007      	add	sp, #28
 80022be:	bd90      	pop	{r4, r7, pc}
 80022c0:	08007524 	.word	0x08007524
 80022c4:	20000058 	.word	0x20000058
 80022c8:	20000410 	.word	0x20000410
 80022cc:	2000006c 	.word	0x2000006c
 80022d0:	20000412 	.word	0x20000412
 80022d4:	20000414 	.word	0x20000414

080022d8 <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	0002      	movs	r2, r0
 80022e0:	1dbb      	adds	r3, r7, #6
 80022e2:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 80022e4:	4b20      	ldr	r3, [pc, #128]	@ (8002368 <sevSeg_setIntensity+0x90>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d105      	bne.n	80022f8 <sevSeg_setIntensity+0x20>
 80022ec:	4b1f      	ldr	r3, [pc, #124]	@ (800236c <sevSeg_setIntensity+0x94>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	1dba      	adds	r2, r7, #6
 80022f2:	8812      	ldrh	r2, [r2, #0]
 80022f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80022f6:	e02c      	b.n	8002352 <sevSeg_setIntensity+0x7a>
 80022f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002368 <sevSeg_setIntensity+0x90>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d105      	bne.n	800230c <sevSeg_setIntensity+0x34>
 8002300:	4b1a      	ldr	r3, [pc, #104]	@ (800236c <sevSeg_setIntensity+0x94>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	1dbb      	adds	r3, r7, #6
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	6393      	str	r3, [r2, #56]	@ 0x38
 800230a:	e022      	b.n	8002352 <sevSeg_setIntensity+0x7a>
 800230c:	4b16      	ldr	r3, [pc, #88]	@ (8002368 <sevSeg_setIntensity+0x90>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b08      	cmp	r3, #8
 8002312:	d105      	bne.n	8002320 <sevSeg_setIntensity+0x48>
 8002314:	4b15      	ldr	r3, [pc, #84]	@ (800236c <sevSeg_setIntensity+0x94>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	1dbb      	adds	r3, r7, #6
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800231e:	e018      	b.n	8002352 <sevSeg_setIntensity+0x7a>
 8002320:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <sevSeg_setIntensity+0x90>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b0c      	cmp	r3, #12
 8002326:	d105      	bne.n	8002334 <sevSeg_setIntensity+0x5c>
 8002328:	4b10      	ldr	r3, [pc, #64]	@ (800236c <sevSeg_setIntensity+0x94>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	1dbb      	adds	r3, r7, #6
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	6413      	str	r3, [r2, #64]	@ 0x40
 8002332:	e00e      	b.n	8002352 <sevSeg_setIntensity+0x7a>
 8002334:	4b0c      	ldr	r3, [pc, #48]	@ (8002368 <sevSeg_setIntensity+0x90>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b10      	cmp	r3, #16
 800233a:	d105      	bne.n	8002348 <sevSeg_setIntensity+0x70>
 800233c:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <sevSeg_setIntensity+0x94>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	1dbb      	adds	r3, r7, #6
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	6593      	str	r3, [r2, #88]	@ 0x58
 8002346:	e004      	b.n	8002352 <sevSeg_setIntensity+0x7a>
 8002348:	4b08      	ldr	r3, [pc, #32]	@ (800236c <sevSeg_setIntensity+0x94>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	1dbb      	adds	r3, r7, #6
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 8002352:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <sevSeg_setIntensity+0x90>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4b05      	ldr	r3, [pc, #20]	@ (800236c <sevSeg_setIntensity+0x94>)
 8002358:	0011      	movs	r1, r2
 800235a:	0018      	movs	r0, r3
 800235c:	f004 f9c2 	bl	80066e4 <HAL_TIM_PWM_Start>

}
 8002360:	46c0      	nop			@ (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b002      	add	sp, #8
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000468 	.word	0x20000468
 800236c:	2000041c 	.word	0x2000041c

08002370 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002376:	4b13      	ldr	r3, [pc, #76]	@ (80023c4 <HAL_MspInit+0x54>)
 8002378:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800237a:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <HAL_MspInit+0x54>)
 800237c:	2101      	movs	r1, #1
 800237e:	430a      	orrs	r2, r1
 8002380:	641a      	str	r2, [r3, #64]	@ 0x40
 8002382:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <HAL_MspInit+0x54>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	2201      	movs	r2, #1
 8002388:	4013      	ands	r3, r2
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <HAL_MspInit+0x54>)
 8002390:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002392:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <HAL_MspInit+0x54>)
 8002394:	2180      	movs	r1, #128	@ 0x80
 8002396:	0549      	lsls	r1, r1, #21
 8002398:	430a      	orrs	r2, r1
 800239a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800239c:	4b09      	ldr	r3, [pc, #36]	@ (80023c4 <HAL_MspInit+0x54>)
 800239e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023a0:	2380      	movs	r3, #128	@ 0x80
 80023a2:	055b      	lsls	r3, r3, #21
 80023a4:	4013      	ands	r3, r2
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	2004      	movs	r0, #4
 80023b0:	f000 fc96 	bl	8002ce0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80023b4:	2004      	movs	r0, #4
 80023b6:	f000 fca8 	bl	8002d0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b002      	add	sp, #8
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	40021000 	.word	0x40021000

080023c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b095      	sub	sp, #84	@ 0x54
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	233c      	movs	r3, #60	@ 0x3c
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	0018      	movs	r0, r3
 80023d6:	2314      	movs	r3, #20
 80023d8:	001a      	movs	r2, r3
 80023da:	2100      	movs	r1, #0
 80023dc:	f005 f84c 	bl	8007478 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023e0:	2414      	movs	r4, #20
 80023e2:	193b      	adds	r3, r7, r4
 80023e4:	0018      	movs	r0, r3
 80023e6:	2328      	movs	r3, #40	@ 0x28
 80023e8:	001a      	movs	r2, r3
 80023ea:	2100      	movs	r1, #0
 80023ec:	f005 f844 	bl	8007478 <memset>
  if(hi2c->Instance==I2C1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a22      	ldr	r2, [pc, #136]	@ (8002480 <HAL_I2C_MspInit+0xb8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d13d      	bne.n	8002476 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80023fa:	193b      	adds	r3, r7, r4
 80023fc:	2220      	movs	r2, #32
 80023fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002400:	193b      	adds	r3, r7, r4
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002406:	193b      	adds	r3, r7, r4
 8002408:	0018      	movs	r0, r3
 800240a:	f002 fc71 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 800240e:	1e03      	subs	r3, r0, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002412:	f7ff fd86 	bl	8001f22 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002416:	4b1b      	ldr	r3, [pc, #108]	@ (8002484 <HAL_I2C_MspInit+0xbc>)
 8002418:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800241a:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <HAL_I2C_MspInit+0xbc>)
 800241c:	2102      	movs	r1, #2
 800241e:	430a      	orrs	r2, r1
 8002420:	635a      	str	r2, [r3, #52]	@ 0x34
 8002422:	4b18      	ldr	r3, [pc, #96]	@ (8002484 <HAL_I2C_MspInit+0xbc>)
 8002424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002426:	2202      	movs	r2, #2
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800242e:	213c      	movs	r1, #60	@ 0x3c
 8002430:	187b      	adds	r3, r7, r1
 8002432:	22c0      	movs	r2, #192	@ 0xc0
 8002434:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002436:	187b      	adds	r3, r7, r1
 8002438:	2212      	movs	r2, #18
 800243a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	187b      	adds	r3, r7, r1
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	187b      	adds	r3, r7, r1
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002448:	187b      	adds	r3, r7, r1
 800244a:	2206      	movs	r2, #6
 800244c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244e:	187b      	adds	r3, r7, r1
 8002450:	4a0d      	ldr	r2, [pc, #52]	@ (8002488 <HAL_I2C_MspInit+0xc0>)
 8002452:	0019      	movs	r1, r3
 8002454:	0010      	movs	r0, r2
 8002456:	f000 fe01 	bl	800305c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800245a:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <HAL_I2C_MspInit+0xbc>)
 800245c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800245e:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <HAL_I2C_MspInit+0xbc>)
 8002460:	2180      	movs	r1, #128	@ 0x80
 8002462:	0389      	lsls	r1, r1, #14
 8002464:	430a      	orrs	r2, r1
 8002466:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_I2C_MspInit+0xbc>)
 800246a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	039b      	lsls	r3, r3, #14
 8002470:	4013      	ands	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	46bd      	mov	sp, r7
 800247a:	b015      	add	sp, #84	@ 0x54
 800247c:	bd90      	pop	{r4, r7, pc}
 800247e:	46c0      	nop			@ (mov r8, r8)
 8002480:	40005400 	.word	0x40005400
 8002484:	40021000 	.word	0x40021000
 8002488:	50000400 	.word	0x50000400

0800248c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b095      	sub	sp, #84	@ 0x54
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	233c      	movs	r3, #60	@ 0x3c
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	0018      	movs	r0, r3
 800249a:	2314      	movs	r3, #20
 800249c:	001a      	movs	r2, r3
 800249e:	2100      	movs	r1, #0
 80024a0:	f004 ffea 	bl	8007478 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024a4:	2414      	movs	r4, #20
 80024a6:	193b      	adds	r3, r7, r4
 80024a8:	0018      	movs	r0, r3
 80024aa:	2328      	movs	r3, #40	@ 0x28
 80024ac:	001a      	movs	r2, r3
 80024ae:	2100      	movs	r1, #0
 80024b0:	f004 ffe2 	bl	8007478 <memset>
  if(hi2s->Instance==SPI1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a4a      	ldr	r2, [pc, #296]	@ (80025e4 <HAL_I2S_MspInit+0x158>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d000      	beq.n	80024c0 <HAL_I2S_MspInit+0x34>
 80024be:	e08d      	b.n	80025dc <HAL_I2S_MspInit+0x150>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80024c0:	193b      	adds	r3, r7, r4
 80024c2:	2280      	movs	r2, #128	@ 0x80
 80024c4:	0112      	lsls	r2, r2, #4
 80024c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80024c8:	193b      	adds	r3, r7, r4
 80024ca:	2200      	movs	r2, #0
 80024cc:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ce:	193b      	adds	r3, r7, r4
 80024d0:	0018      	movs	r0, r3
 80024d2:	f002 fc0d 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 80024d6:	1e03      	subs	r3, r0, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80024da:	f7ff fd22 	bl	8001f22 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024de:	4b42      	ldr	r3, [pc, #264]	@ (80025e8 <HAL_I2S_MspInit+0x15c>)
 80024e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024e2:	4b41      	ldr	r3, [pc, #260]	@ (80025e8 <HAL_I2S_MspInit+0x15c>)
 80024e4:	2180      	movs	r1, #128	@ 0x80
 80024e6:	0149      	lsls	r1, r1, #5
 80024e8:	430a      	orrs	r2, r1
 80024ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80024ec:	4b3e      	ldr	r3, [pc, #248]	@ (80025e8 <HAL_I2S_MspInit+0x15c>)
 80024ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024f0:	2380      	movs	r3, #128	@ 0x80
 80024f2:	015b      	lsls	r3, r3, #5
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	4b3b      	ldr	r3, [pc, #236]	@ (80025e8 <HAL_I2S_MspInit+0x15c>)
 80024fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024fe:	4b3a      	ldr	r3, [pc, #232]	@ (80025e8 <HAL_I2S_MspInit+0x15c>)
 8002500:	2101      	movs	r1, #1
 8002502:	430a      	orrs	r2, r1
 8002504:	635a      	str	r2, [r3, #52]	@ 0x34
 8002506:	4b38      	ldr	r3, [pc, #224]	@ (80025e8 <HAL_I2S_MspInit+0x15c>)
 8002508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250a:	2201      	movs	r2, #1
 800250c:	4013      	ands	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002512:	4b35      	ldr	r3, [pc, #212]	@ (80025e8 <HAL_I2S_MspInit+0x15c>)
 8002514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002516:	4b34      	ldr	r3, [pc, #208]	@ (80025e8 <HAL_I2S_MspInit+0x15c>)
 8002518:	2102      	movs	r1, #2
 800251a:	430a      	orrs	r2, r1
 800251c:	635a      	str	r2, [r3, #52]	@ 0x34
 800251e:	4b32      	ldr	r3, [pc, #200]	@ (80025e8 <HAL_I2S_MspInit+0x15c>)
 8002520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002522:	2202      	movs	r2, #2
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PB0     ------> I2S1_WS
    PA12 [PA10]     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 800252a:	243c      	movs	r4, #60	@ 0x3c
 800252c:	193b      	adds	r3, r7, r4
 800252e:	4a2f      	ldr	r2, [pc, #188]	@ (80025ec <HAL_I2S_MspInit+0x160>)
 8002530:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	193b      	adds	r3, r7, r4
 8002534:	2202      	movs	r2, #2
 8002536:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	193b      	adds	r3, r7, r4
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	193b      	adds	r3, r7, r4
 8002540:	2200      	movs	r2, #0
 8002542:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002544:	193b      	adds	r3, r7, r4
 8002546:	2200      	movs	r2, #0
 8002548:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254a:	193a      	adds	r2, r7, r4
 800254c:	23a0      	movs	r3, #160	@ 0xa0
 800254e:	05db      	lsls	r3, r3, #23
 8002550:	0011      	movs	r1, r2
 8002552:	0018      	movs	r0, r3
 8002554:	f000 fd82 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002558:	0021      	movs	r1, r4
 800255a:	187b      	adds	r3, r7, r1
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	187b      	adds	r3, r7, r1
 8002562:	2202      	movs	r2, #2
 8002564:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	187b      	adds	r3, r7, r1
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	187b      	adds	r3, r7, r1
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2200      	movs	r2, #0
 8002576:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002578:	187b      	adds	r3, r7, r1
 800257a:	4a1d      	ldr	r2, [pc, #116]	@ (80025f0 <HAL_I2S_MspInit+0x164>)
 800257c:	0019      	movs	r1, r3
 800257e:	0010      	movs	r0, r2
 8002580:	f000 fd6c 	bl	800305c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002584:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <HAL_I2S_MspInit+0x168>)
 8002586:	4a1c      	ldr	r2, [pc, #112]	@ (80025f8 <HAL_I2S_MspInit+0x16c>)
 8002588:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800258a:	4b1a      	ldr	r3, [pc, #104]	@ (80025f4 <HAL_I2S_MspInit+0x168>)
 800258c:	2211      	movs	r2, #17
 800258e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002590:	4b18      	ldr	r3, [pc, #96]	@ (80025f4 <HAL_I2S_MspInit+0x168>)
 8002592:	2210      	movs	r2, #16
 8002594:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002596:	4b17      	ldr	r3, [pc, #92]	@ (80025f4 <HAL_I2S_MspInit+0x168>)
 8002598:	2200      	movs	r2, #0
 800259a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800259c:	4b15      	ldr	r3, [pc, #84]	@ (80025f4 <HAL_I2S_MspInit+0x168>)
 800259e:	2280      	movs	r2, #128	@ 0x80
 80025a0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025a2:	4b14      	ldr	r3, [pc, #80]	@ (80025f4 <HAL_I2S_MspInit+0x168>)
 80025a4:	2280      	movs	r2, #128	@ 0x80
 80025a6:	0052      	lsls	r2, r2, #1
 80025a8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025aa:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <HAL_I2S_MspInit+0x168>)
 80025ac:	2280      	movs	r2, #128	@ 0x80
 80025ae:	00d2      	lsls	r2, r2, #3
 80025b0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80025b2:	4b10      	ldr	r3, [pc, #64]	@ (80025f4 <HAL_I2S_MspInit+0x168>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80025b8:	4b0e      	ldr	r3, [pc, #56]	@ (80025f4 <HAL_I2S_MspInit+0x168>)
 80025ba:	22c0      	movs	r2, #192	@ 0xc0
 80025bc:	0192      	lsls	r2, r2, #6
 80025be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80025c0:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <HAL_I2S_MspInit+0x168>)
 80025c2:	0018      	movs	r0, r3
 80025c4:	f000 fbbe 	bl	8002d44 <HAL_DMA_Init>
 80025c8:	1e03      	subs	r3, r0, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_I2S_MspInit+0x144>
    {
      Error_Handler();
 80025cc:	f7ff fca9 	bl	8001f22 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a08      	ldr	r2, [pc, #32]	@ (80025f4 <HAL_I2S_MspInit+0x168>)
 80025d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80025d6:	4b07      	ldr	r3, [pc, #28]	@ (80025f4 <HAL_I2S_MspInit+0x168>)
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025dc:	46c0      	nop			@ (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	b015      	add	sp, #84	@ 0x54
 80025e2:	bd90      	pop	{r4, r7, pc}
 80025e4:	40013000 	.word	0x40013000
 80025e8:	40021000 	.word	0x40021000
 80025ec:	00001002 	.word	0x00001002
 80025f0:	50000400 	.word	0x50000400
 80025f4:	20000160 	.word	0x20000160
 80025f8:	40020030 	.word	0x40020030

080025fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b08f      	sub	sp, #60	@ 0x3c
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002604:	2410      	movs	r4, #16
 8002606:	193b      	adds	r3, r7, r4
 8002608:	0018      	movs	r0, r3
 800260a:	2328      	movs	r3, #40	@ 0x28
 800260c:	001a      	movs	r2, r3
 800260e:	2100      	movs	r1, #0
 8002610:	f004 ff32 	bl	8007478 <memset>
  if(hrtc->Instance==RTC)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a19      	ldr	r2, [pc, #100]	@ (8002680 <HAL_RTC_MspInit+0x84>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d12c      	bne.n	8002678 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800261e:	193b      	adds	r3, r7, r4
 8002620:	2280      	movs	r2, #128	@ 0x80
 8002622:	0292      	lsls	r2, r2, #10
 8002624:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002626:	193b      	adds	r3, r7, r4
 8002628:	2280      	movs	r2, #128	@ 0x80
 800262a:	0052      	lsls	r2, r2, #1
 800262c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800262e:	193b      	adds	r3, r7, r4
 8002630:	0018      	movs	r0, r3
 8002632:	f002 fb5d 	bl	8004cf0 <HAL_RCCEx_PeriphCLKConfig>
 8002636:	1e03      	subs	r3, r0, #0
 8002638:	d001      	beq.n	800263e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800263a:	f7ff fc72 	bl	8001f22 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800263e:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <HAL_RTC_MspInit+0x88>)
 8002640:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002642:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <HAL_RTC_MspInit+0x88>)
 8002644:	2180      	movs	r1, #128	@ 0x80
 8002646:	0209      	lsls	r1, r1, #8
 8002648:	430a      	orrs	r2, r1
 800264a:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800264c:	4b0d      	ldr	r3, [pc, #52]	@ (8002684 <HAL_RTC_MspInit+0x88>)
 800264e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002650:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <HAL_RTC_MspInit+0x88>)
 8002652:	2180      	movs	r1, #128	@ 0x80
 8002654:	00c9      	lsls	r1, r1, #3
 8002656:	430a      	orrs	r2, r1
 8002658:	63da      	str	r2, [r3, #60]	@ 0x3c
 800265a:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <HAL_RTC_MspInit+0x88>)
 800265c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800265e:	2380      	movs	r3, #128	@ 0x80
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4013      	ands	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8002668:	2200      	movs	r2, #0
 800266a:	2100      	movs	r1, #0
 800266c:	2002      	movs	r0, #2
 800266e:	f000 fb37 	bl	8002ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8002672:	2002      	movs	r0, #2
 8002674:	f000 fb49 	bl	8002d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002678:	46c0      	nop			@ (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b00f      	add	sp, #60	@ 0x3c
 800267e:	bd90      	pop	{r4, r7, pc}
 8002680:	40002800 	.word	0x40002800
 8002684:	40021000 	.word	0x40021000

08002688 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b08b      	sub	sp, #44	@ 0x2c
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	2414      	movs	r4, #20
 8002692:	193b      	adds	r3, r7, r4
 8002694:	0018      	movs	r0, r3
 8002696:	2314      	movs	r3, #20
 8002698:	001a      	movs	r2, r3
 800269a:	2100      	movs	r1, #0
 800269c:	f004 feec 	bl	8007478 <memset>
  if(hspi->Instance==SPI2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a50      	ldr	r2, [pc, #320]	@ (80027e8 <HAL_SPI_MspInit+0x160>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d000      	beq.n	80026ac <HAL_SPI_MspInit+0x24>
 80026aa:	e098      	b.n	80027de <HAL_SPI_MspInit+0x156>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026ac:	4b4f      	ldr	r3, [pc, #316]	@ (80027ec <HAL_SPI_MspInit+0x164>)
 80026ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026b0:	4b4e      	ldr	r3, [pc, #312]	@ (80027ec <HAL_SPI_MspInit+0x164>)
 80026b2:	2180      	movs	r1, #128	@ 0x80
 80026b4:	01c9      	lsls	r1, r1, #7
 80026b6:	430a      	orrs	r2, r1
 80026b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026ba:	4b4c      	ldr	r3, [pc, #304]	@ (80027ec <HAL_SPI_MspInit+0x164>)
 80026bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026be:	2380      	movs	r3, #128	@ 0x80
 80026c0:	01db      	lsls	r3, r3, #7
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c8:	4b48      	ldr	r3, [pc, #288]	@ (80027ec <HAL_SPI_MspInit+0x164>)
 80026ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026cc:	4b47      	ldr	r3, [pc, #284]	@ (80027ec <HAL_SPI_MspInit+0x164>)
 80026ce:	2101      	movs	r1, #1
 80026d0:	430a      	orrs	r2, r1
 80026d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80026d4:	4b45      	ldr	r3, [pc, #276]	@ (80027ec <HAL_SPI_MspInit+0x164>)
 80026d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026d8:	2201      	movs	r2, #1
 80026da:	4013      	ands	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80026e0:	193b      	adds	r3, r7, r4
 80026e2:	2209      	movs	r2, #9
 80026e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	193b      	adds	r3, r7, r4
 80026e8:	2202      	movs	r2, #2
 80026ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	193b      	adds	r3, r7, r4
 80026f4:	2200      	movs	r2, #0
 80026f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80026f8:	193b      	adds	r3, r7, r4
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fe:	193a      	adds	r2, r7, r4
 8002700:	23a0      	movs	r3, #160	@ 0xa0
 8002702:	05db      	lsls	r3, r3, #23
 8002704:	0011      	movs	r1, r2
 8002706:	0018      	movs	r0, r3
 8002708:	f000 fca8 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800270c:	0021      	movs	r1, r4
 800270e:	187b      	adds	r3, r7, r1
 8002710:	2210      	movs	r2, #16
 8002712:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	187b      	adds	r3, r7, r1
 8002716:	2202      	movs	r2, #2
 8002718:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	187b      	adds	r3, r7, r1
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	187b      	adds	r3, r7, r1
 8002722:	2200      	movs	r2, #0
 8002724:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002726:	187b      	adds	r3, r7, r1
 8002728:	2201      	movs	r2, #1
 800272a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272c:	187a      	adds	r2, r7, r1
 800272e:	23a0      	movs	r3, #160	@ 0xa0
 8002730:	05db      	lsls	r3, r3, #23
 8002732:	0011      	movs	r1, r2
 8002734:	0018      	movs	r0, r3
 8002736:	f000 fc91 	bl	800305c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel1;
 800273a:	4b2d      	ldr	r3, [pc, #180]	@ (80027f0 <HAL_SPI_MspInit+0x168>)
 800273c:	4a2d      	ldr	r2, [pc, #180]	@ (80027f4 <HAL_SPI_MspInit+0x16c>)
 800273e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002740:	4b2b      	ldr	r3, [pc, #172]	@ (80027f0 <HAL_SPI_MspInit+0x168>)
 8002742:	2212      	movs	r2, #18
 8002744:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002746:	4b2a      	ldr	r3, [pc, #168]	@ (80027f0 <HAL_SPI_MspInit+0x168>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800274c:	4b28      	ldr	r3, [pc, #160]	@ (80027f0 <HAL_SPI_MspInit+0x168>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002752:	4b27      	ldr	r3, [pc, #156]	@ (80027f0 <HAL_SPI_MspInit+0x168>)
 8002754:	2280      	movs	r2, #128	@ 0x80
 8002756:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002758:	4b25      	ldr	r3, [pc, #148]	@ (80027f0 <HAL_SPI_MspInit+0x168>)
 800275a:	2200      	movs	r2, #0
 800275c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800275e:	4b24      	ldr	r3, [pc, #144]	@ (80027f0 <HAL_SPI_MspInit+0x168>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002764:	4b22      	ldr	r3, [pc, #136]	@ (80027f0 <HAL_SPI_MspInit+0x168>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800276a:	4b21      	ldr	r3, [pc, #132]	@ (80027f0 <HAL_SPI_MspInit+0x168>)
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002770:	4b1f      	ldr	r3, [pc, #124]	@ (80027f0 <HAL_SPI_MspInit+0x168>)
 8002772:	0018      	movs	r0, r3
 8002774:	f000 fae6 	bl	8002d44 <HAL_DMA_Init>
 8002778:	1e03      	subs	r3, r0, #0
 800277a:	d001      	beq.n	8002780 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 800277c:	f7ff fbd1 	bl	8001f22 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a1b      	ldr	r2, [pc, #108]	@ (80027f0 <HAL_SPI_MspInit+0x168>)
 8002784:	659a      	str	r2, [r3, #88]	@ 0x58
 8002786:	4b1a      	ldr	r3, [pc, #104]	@ (80027f0 <HAL_SPI_MspInit+0x168>)
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel2;
 800278c:	4b1a      	ldr	r3, [pc, #104]	@ (80027f8 <HAL_SPI_MspInit+0x170>)
 800278e:	4a1b      	ldr	r2, [pc, #108]	@ (80027fc <HAL_SPI_MspInit+0x174>)
 8002790:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002792:	4b19      	ldr	r3, [pc, #100]	@ (80027f8 <HAL_SPI_MspInit+0x170>)
 8002794:	2213      	movs	r2, #19
 8002796:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002798:	4b17      	ldr	r3, [pc, #92]	@ (80027f8 <HAL_SPI_MspInit+0x170>)
 800279a:	2210      	movs	r2, #16
 800279c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800279e:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <HAL_SPI_MspInit+0x170>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027a4:	4b14      	ldr	r3, [pc, #80]	@ (80027f8 <HAL_SPI_MspInit+0x170>)
 80027a6:	2280      	movs	r2, #128	@ 0x80
 80027a8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027aa:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <HAL_SPI_MspInit+0x170>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027b0:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <HAL_SPI_MspInit+0x170>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80027b6:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <HAL_SPI_MspInit+0x170>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027bc:	4b0e      	ldr	r3, [pc, #56]	@ (80027f8 <HAL_SPI_MspInit+0x170>)
 80027be:	2200      	movs	r2, #0
 80027c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80027c2:	4b0d      	ldr	r3, [pc, #52]	@ (80027f8 <HAL_SPI_MspInit+0x170>)
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 fabd 	bl	8002d44 <HAL_DMA_Init>
 80027ca:	1e03      	subs	r3, r0, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 80027ce:	f7ff fba8 	bl	8001f22 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a08      	ldr	r2, [pc, #32]	@ (80027f8 <HAL_SPI_MspInit+0x170>)
 80027d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80027d8:	4b07      	ldr	r3, [pc, #28]	@ (80027f8 <HAL_SPI_MspInit+0x170>)
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b00b      	add	sp, #44	@ 0x2c
 80027e4:	bd90      	pop	{r4, r7, pc}
 80027e6:	46c0      	nop			@ (mov r8, r8)
 80027e8:	40003800 	.word	0x40003800
 80027ec:	40021000 	.word	0x40021000
 80027f0:	2000024c 	.word	0x2000024c
 80027f4:	40020008 	.word	0x40020008
 80027f8:	200002a8 	.word	0x200002a8
 80027fc:	4002001c 	.word	0x4002001c

08002800 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	2380      	movs	r3, #128	@ 0x80
 800280e:	05db      	lsls	r3, r3, #23
 8002810:	429a      	cmp	r2, r3
 8002812:	d10b      	bne.n	800282c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002814:	4b07      	ldr	r3, [pc, #28]	@ (8002834 <HAL_TIM_PWM_MspInit+0x34>)
 8002816:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002818:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <HAL_TIM_PWM_MspInit+0x34>)
 800281a:	2101      	movs	r1, #1
 800281c:	430a      	orrs	r2, r1
 800281e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002820:	4b04      	ldr	r3, [pc, #16]	@ (8002834 <HAL_TIM_PWM_MspInit+0x34>)
 8002822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002824:	2201      	movs	r2, #1
 8002826:	4013      	ands	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800282c:	46c0      	nop			@ (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b004      	add	sp, #16
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000

08002838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a18      	ldr	r2, [pc, #96]	@ (80028a8 <HAL_TIM_Base_MspInit+0x70>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d10e      	bne.n	8002868 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800284a:	4b18      	ldr	r3, [pc, #96]	@ (80028ac <HAL_TIM_Base_MspInit+0x74>)
 800284c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800284e:	4b17      	ldr	r3, [pc, #92]	@ (80028ac <HAL_TIM_Base_MspInit+0x74>)
 8002850:	2180      	movs	r1, #128	@ 0x80
 8002852:	0209      	lsls	r1, r1, #8
 8002854:	430a      	orrs	r2, r1
 8002856:	641a      	str	r2, [r3, #64]	@ 0x40
 8002858:	4b14      	ldr	r3, [pc, #80]	@ (80028ac <HAL_TIM_Base_MspInit+0x74>)
 800285a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	4013      	ands	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002866:	e01a      	b.n	800289e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a10      	ldr	r2, [pc, #64]	@ (80028b0 <HAL_TIM_Base_MspInit+0x78>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d115      	bne.n	800289e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002872:	4b0e      	ldr	r3, [pc, #56]	@ (80028ac <HAL_TIM_Base_MspInit+0x74>)
 8002874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002876:	4b0d      	ldr	r3, [pc, #52]	@ (80028ac <HAL_TIM_Base_MspInit+0x74>)
 8002878:	2180      	movs	r1, #128	@ 0x80
 800287a:	0289      	lsls	r1, r1, #10
 800287c:	430a      	orrs	r2, r1
 800287e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002880:	4b0a      	ldr	r3, [pc, #40]	@ (80028ac <HAL_TIM_Base_MspInit+0x74>)
 8002882:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002884:	2380      	movs	r3, #128	@ 0x80
 8002886:	029b      	lsls	r3, r3, #10
 8002888:	4013      	ands	r3, r2
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2100      	movs	r1, #0
 8002892:	2015      	movs	r0, #21
 8002894:	f000 fa24 	bl	8002ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002898:	2015      	movs	r0, #21
 800289a:	f000 fa36 	bl	8002d0a <HAL_NVIC_EnableIRQ>
}
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b004      	add	sp, #16
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	40002000 	.word	0x40002000
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40014400 	.word	0x40014400

080028b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b089      	sub	sp, #36	@ 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	240c      	movs	r4, #12
 80028be:	193b      	adds	r3, r7, r4
 80028c0:	0018      	movs	r0, r3
 80028c2:	2314      	movs	r3, #20
 80028c4:	001a      	movs	r2, r3
 80028c6:	2100      	movs	r1, #0
 80028c8:	f004 fdd6 	bl	8007478 <memset>
  if(htim->Instance==TIM2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2380      	movs	r3, #128	@ 0x80
 80028d2:	05db      	lsls	r3, r3, #23
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d121      	bne.n	800291c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d8:	4b12      	ldr	r3, [pc, #72]	@ (8002924 <HAL_TIM_MspPostInit+0x70>)
 80028da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028dc:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <HAL_TIM_MspPostInit+0x70>)
 80028de:	2104      	movs	r1, #4
 80028e0:	430a      	orrs	r2, r1
 80028e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80028e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <HAL_TIM_MspPostInit+0x70>)
 80028e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e8:	2204      	movs	r2, #4
 80028ea:	4013      	ands	r3, r2
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_SHIFT_nOE_Pin;
 80028f0:	0021      	movs	r1, r4
 80028f2:	187b      	adds	r3, r7, r1
 80028f4:	2240      	movs	r2, #64	@ 0x40
 80028f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	2202      	movs	r2, #2
 80028fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	187b      	adds	r3, r7, r1
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800290a:	187b      	adds	r3, r7, r1
 800290c:	2202      	movs	r2, #2
 800290e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_SHIFT_nOE_GPIO_Port, &GPIO_InitStruct);
 8002910:	187b      	adds	r3, r7, r1
 8002912:	4a05      	ldr	r2, [pc, #20]	@ (8002928 <HAL_TIM_MspPostInit+0x74>)
 8002914:	0019      	movs	r1, r3
 8002916:	0010      	movs	r0, r2
 8002918:	f000 fba0 	bl	800305c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800291c:	46c0      	nop			@ (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b009      	add	sp, #36	@ 0x24
 8002922:	bd90      	pop	{r4, r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	50000800 	.word	0x50000800

0800292c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002930:	46c0      	nop			@ (mov r8, r8)
 8002932:	e7fd      	b.n	8002930 <NMI_Handler+0x4>

08002934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002938:	46c0      	nop			@ (mov r8, r8)
 800293a:	e7fd      	b.n	8002938 <HardFault_Handler+0x4>

0800293c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002940:	46c0      	nop			@ (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002954:	f000 f8fc 	bl	8002b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002958:	46c0      	nop			@ (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002964:	4b03      	ldr	r3, [pc, #12]	@ (8002974 <RTC_TAMP_IRQHandler+0x14>)
 8002966:	0018      	movs	r0, r3
 8002968:	f003 fa46 	bl	8005df8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800296c:	46c0      	nop			@ (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			@ (mov r8, r8)
 8002974:	200001bc 	.word	0x200001bc

08002978 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800297c:	46c0      	nop			@ (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_EXTI_Pin);
 8002986:	2001      	movs	r0, #1
 8002988:	f000 fd22 	bl	80033d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_EXTI_Pin);
 800298c:	2002      	movs	r0, #2
 800298e:	f000 fd1f 	bl	80033d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002992:	46c0      	nop			@ (mov r8, r8)
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_EXTI_Pin);
 800299c:	2004      	movs	r0, #4
 800299e:	f000 fd17 	bl	80033d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_EXTI_Pin);
 80029a2:	2008      	movs	r0, #8
 80029a4:	f000 fd14 	bl	80033d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80029a8:	46c0      	nop			@ (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_SWITCH_EXTI_Pin);
 80029b2:	2010      	movs	r0, #16
 80029b4:	f000 fd0c 	bl	80033d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_EXTI_Pin);
 80029b8:	2380      	movs	r3, #128	@ 0x80
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	0018      	movs	r0, r3
 80029be:	f000 fd07 	bl	80033d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80029cc:	4b03      	ldr	r3, [pc, #12]	@ (80029dc <DMA1_Channel1_IRQHandler+0x14>)
 80029ce:	0018      	movs	r0, r3
 80029d0:	f000 fa42 	bl	8002e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029d4:	46c0      	nop			@ (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	46c0      	nop			@ (mov r8, r8)
 80029dc:	2000024c 	.word	0x2000024c

080029e0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80029e4:	4b05      	ldr	r3, [pc, #20]	@ (80029fc <DMA1_Channel2_3_IRQHandler+0x1c>)
 80029e6:	0018      	movs	r0, r3
 80029e8:	f000 fa36 	bl	8002e58 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80029ec:	4b04      	ldr	r3, [pc, #16]	@ (8002a00 <DMA1_Channel2_3_IRQHandler+0x20>)
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 fa32 	bl	8002e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80029f4:	46c0      	nop			@ (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			@ (mov r8, r8)
 80029fc:	200002a8 	.word	0x200002a8
 8002a00:	20000160 	.word	0x20000160

08002a04 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002a08:	4b03      	ldr	r3, [pc, #12]	@ (8002a18 <TIM16_IRQHandler+0x14>)
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f003 ff48 	bl	80068a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002a10:	46c0      	nop			@ (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	46c0      	nop			@ (mov r8, r8)
 8002a18:	2000039c 	.word	0x2000039c

08002a1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a20:	46c0      	nop			@ (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a28:	480d      	ldr	r0, [pc, #52]	@ (8002a60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a2c:	f7ff fff6 	bl	8002a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a30:	480c      	ldr	r0, [pc, #48]	@ (8002a64 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a32:	490d      	ldr	r1, [pc, #52]	@ (8002a68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a34:	4a0d      	ldr	r2, [pc, #52]	@ (8002a6c <LoopForever+0xe>)
  movs r3, #0
 8002a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a38:	e002      	b.n	8002a40 <LoopCopyDataInit>

08002a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a3e:	3304      	adds	r3, #4

08002a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a44:	d3f9      	bcc.n	8002a3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a46:	4a0a      	ldr	r2, [pc, #40]	@ (8002a70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a48:	4c0a      	ldr	r4, [pc, #40]	@ (8002a74 <LoopForever+0x16>)
  movs r3, #0
 8002a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a4c:	e001      	b.n	8002a52 <LoopFillZerobss>

08002a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a50:	3204      	adds	r2, #4

08002a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a54:	d3fb      	bcc.n	8002a4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a56:	f004 fd17 	bl	8007488 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002a5a:	f7fe f83b 	bl	8000ad4 <main>

08002a5e <LoopForever>:

LoopForever:
  b LoopForever
 8002a5e:	e7fe      	b.n	8002a5e <LoopForever>
  ldr   r0, =_estack
 8002a60:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a68:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002a6c:	080075ec 	.word	0x080075ec
  ldr r2, =_sbss
 8002a70:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002a74:	20000470 	.word	0x20000470

08002a78 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a78:	e7fe      	b.n	8002a78 <ADC1_IRQHandler>
	...

08002a7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a82:	1dfb      	adds	r3, r7, #7
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a88:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab8 <HAL_Init+0x3c>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <HAL_Init+0x3c>)
 8002a8e:	2180      	movs	r1, #128	@ 0x80
 8002a90:	0049      	lsls	r1, r1, #1
 8002a92:	430a      	orrs	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a96:	2003      	movs	r0, #3
 8002a98:	f000 f810 	bl	8002abc <HAL_InitTick>
 8002a9c:	1e03      	subs	r3, r0, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002aa0:	1dfb      	adds	r3, r7, #7
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e001      	b.n	8002aac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002aa8:	f7ff fc62 	bl	8002370 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002aac:	1dfb      	adds	r3, r7, #7
 8002aae:	781b      	ldrb	r3, [r3, #0]
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40022000 	.word	0x40022000

08002abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ac4:	230f      	movs	r3, #15
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002acc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b44 <HAL_InitTick+0x88>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d02b      	beq.n	8002b2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b48 <HAL_InitTick+0x8c>)
 8002ad6:	681c      	ldr	r4, [r3, #0]
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b44 <HAL_InitTick+0x88>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	0019      	movs	r1, r3
 8002ade:	23fa      	movs	r3, #250	@ 0xfa
 8002ae0:	0098      	lsls	r0, r3, #2
 8002ae2:	f7fd fb0f 	bl	8000104 <__udivsi3>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	0019      	movs	r1, r3
 8002aea:	0020      	movs	r0, r4
 8002aec:	f7fd fb0a 	bl	8000104 <__udivsi3>
 8002af0:	0003      	movs	r3, r0
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 f919 	bl	8002d2a <HAL_SYSTICK_Config>
 8002af8:	1e03      	subs	r3, r0, #0
 8002afa:	d112      	bne.n	8002b22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d80a      	bhi.n	8002b18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	2301      	movs	r3, #1
 8002b06:	425b      	negs	r3, r3
 8002b08:	2200      	movs	r2, #0
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 f8e8 	bl	8002ce0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b10:	4b0e      	ldr	r3, [pc, #56]	@ (8002b4c <HAL_InitTick+0x90>)
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e00d      	b.n	8002b34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002b18:	230f      	movs	r3, #15
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	e008      	b.n	8002b34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b22:	230f      	movs	r3, #15
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
 8002b2a:	e003      	b.n	8002b34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b2c:	230f      	movs	r3, #15
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002b34:	230f      	movs	r3, #15
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	781b      	ldrb	r3, [r3, #0]
}
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b005      	add	sp, #20
 8002b40:	bd90      	pop	{r4, r7, pc}
 8002b42:	46c0      	nop			@ (mov r8, r8)
 8002b44:	20000078 	.word	0x20000078
 8002b48:	20000070 	.word	0x20000070
 8002b4c:	20000074 	.word	0x20000074

08002b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b54:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <HAL_IncTick+0x1c>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	001a      	movs	r2, r3
 8002b5a:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <HAL_IncTick+0x20>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	18d2      	adds	r2, r2, r3
 8002b60:	4b03      	ldr	r3, [pc, #12]	@ (8002b70 <HAL_IncTick+0x20>)
 8002b62:	601a      	str	r2, [r3, #0]
}
 8002b64:	46c0      	nop			@ (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	20000078 	.word	0x20000078
 8002b70:	2000046c 	.word	0x2000046c

08002b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  return uwTick;
 8002b78:	4b02      	ldr	r3, [pc, #8]	@ (8002b84 <HAL_GetTick+0x10>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	46c0      	nop			@ (mov r8, r8)
 8002b84:	2000046c 	.word	0x2000046c

08002b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	0002      	movs	r2, r0
 8002b90:	1dfb      	adds	r3, r7, #7
 8002b92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b94:	1dfb      	adds	r3, r7, #7
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b9a:	d809      	bhi.n	8002bb0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9c:	1dfb      	adds	r3, r7, #7
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	001a      	movs	r2, r3
 8002ba2:	231f      	movs	r3, #31
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	4b04      	ldr	r3, [pc, #16]	@ (8002bb8 <__NVIC_EnableIRQ+0x30>)
 8002ba8:	2101      	movs	r1, #1
 8002baa:	4091      	lsls	r1, r2
 8002bac:	000a      	movs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002bb0:	46c0      	nop			@ (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b002      	add	sp, #8
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	e000e100 	.word	0xe000e100

08002bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	6039      	str	r1, [r7, #0]
 8002bc6:	1dfb      	adds	r3, r7, #7
 8002bc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bca:	1dfb      	adds	r3, r7, #7
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bd0:	d828      	bhi.n	8002c24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8002c90 <__NVIC_SetPriority+0xd4>)
 8002bd4:	1dfb      	adds	r3, r7, #7
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	b25b      	sxtb	r3, r3
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	33c0      	adds	r3, #192	@ 0xc0
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	589b      	ldr	r3, [r3, r2]
 8002be2:	1dfa      	adds	r2, r7, #7
 8002be4:	7812      	ldrb	r2, [r2, #0]
 8002be6:	0011      	movs	r1, r2
 8002be8:	2203      	movs	r2, #3
 8002bea:	400a      	ands	r2, r1
 8002bec:	00d2      	lsls	r2, r2, #3
 8002bee:	21ff      	movs	r1, #255	@ 0xff
 8002bf0:	4091      	lsls	r1, r2
 8002bf2:	000a      	movs	r2, r1
 8002bf4:	43d2      	mvns	r2, r2
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	019b      	lsls	r3, r3, #6
 8002bfe:	22ff      	movs	r2, #255	@ 0xff
 8002c00:	401a      	ands	r2, r3
 8002c02:	1dfb      	adds	r3, r7, #7
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	0018      	movs	r0, r3
 8002c08:	2303      	movs	r3, #3
 8002c0a:	4003      	ands	r3, r0
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c10:	481f      	ldr	r0, [pc, #124]	@ (8002c90 <__NVIC_SetPriority+0xd4>)
 8002c12:	1dfb      	adds	r3, r7, #7
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	b25b      	sxtb	r3, r3
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	33c0      	adds	r3, #192	@ 0xc0
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c22:	e031      	b.n	8002c88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c24:	4a1b      	ldr	r2, [pc, #108]	@ (8002c94 <__NVIC_SetPriority+0xd8>)
 8002c26:	1dfb      	adds	r3, r7, #7
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	230f      	movs	r3, #15
 8002c2e:	400b      	ands	r3, r1
 8002c30:	3b08      	subs	r3, #8
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	3306      	adds	r3, #6
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	18d3      	adds	r3, r2, r3
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	1dfa      	adds	r2, r7, #7
 8002c40:	7812      	ldrb	r2, [r2, #0]
 8002c42:	0011      	movs	r1, r2
 8002c44:	2203      	movs	r2, #3
 8002c46:	400a      	ands	r2, r1
 8002c48:	00d2      	lsls	r2, r2, #3
 8002c4a:	21ff      	movs	r1, #255	@ 0xff
 8002c4c:	4091      	lsls	r1, r2
 8002c4e:	000a      	movs	r2, r1
 8002c50:	43d2      	mvns	r2, r2
 8002c52:	401a      	ands	r2, r3
 8002c54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	019b      	lsls	r3, r3, #6
 8002c5a:	22ff      	movs	r2, #255	@ 0xff
 8002c5c:	401a      	ands	r2, r3
 8002c5e:	1dfb      	adds	r3, r7, #7
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	0018      	movs	r0, r3
 8002c64:	2303      	movs	r3, #3
 8002c66:	4003      	ands	r3, r0
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c6c:	4809      	ldr	r0, [pc, #36]	@ (8002c94 <__NVIC_SetPriority+0xd8>)
 8002c6e:	1dfb      	adds	r3, r7, #7
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	001c      	movs	r4, r3
 8002c74:	230f      	movs	r3, #15
 8002c76:	4023      	ands	r3, r4
 8002c78:	3b08      	subs	r3, #8
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	3306      	adds	r3, #6
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	18c3      	adds	r3, r0, r3
 8002c84:	3304      	adds	r3, #4
 8002c86:	601a      	str	r2, [r3, #0]
}
 8002c88:	46c0      	nop			@ (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b003      	add	sp, #12
 8002c8e:	bd90      	pop	{r4, r7, pc}
 8002c90:	e000e100 	.word	0xe000e100
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	1e5a      	subs	r2, r3, #1
 8002ca4:	2380      	movs	r3, #128	@ 0x80
 8002ca6:	045b      	lsls	r3, r3, #17
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d301      	bcc.n	8002cb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cac:	2301      	movs	r3, #1
 8002cae:	e010      	b.n	8002cd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cdc <SysTick_Config+0x44>)
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	3a01      	subs	r2, #1
 8002cb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cb8:	2301      	movs	r3, #1
 8002cba:	425b      	negs	r3, r3
 8002cbc:	2103      	movs	r1, #3
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f7ff ff7c 	bl	8002bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc4:	4b05      	ldr	r3, [pc, #20]	@ (8002cdc <SysTick_Config+0x44>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cca:	4b04      	ldr	r3, [pc, #16]	@ (8002cdc <SysTick_Config+0x44>)
 8002ccc:	2207      	movs	r2, #7
 8002cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b002      	add	sp, #8
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			@ (mov r8, r8)
 8002cdc:	e000e010 	.word	0xe000e010

08002ce0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	210f      	movs	r1, #15
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	1c02      	adds	r2, r0, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b25b      	sxtb	r3, r3
 8002cfa:	0011      	movs	r1, r2
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f7ff ff5d 	bl	8002bbc <__NVIC_SetPriority>
}
 8002d02:	46c0      	nop			@ (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b004      	add	sp, #16
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	0002      	movs	r2, r0
 8002d12:	1dfb      	adds	r3, r7, #7
 8002d14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d16:	1dfb      	adds	r3, r7, #7
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f7ff ff33 	bl	8002b88 <__NVIC_EnableIRQ>
}
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b002      	add	sp, #8
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f7ff ffaf 	bl	8002c98 <SysTick_Config>
 8002d3a:	0003      	movs	r3, r0
}
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b002      	add	sp, #8
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e077      	b.n	8002e46 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a3d      	ldr	r2, [pc, #244]	@ (8002e50 <HAL_DMA_Init+0x10c>)
 8002d5c:	4694      	mov	ip, r2
 8002d5e:	4463      	add	r3, ip
 8002d60:	2114      	movs	r1, #20
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7fd f9ce 	bl	8000104 <__udivsi3>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	009a      	lsls	r2, r3, #2
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2225      	movs	r2, #37	@ 0x25
 8002d74:	2102      	movs	r1, #2
 8002d76:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4934      	ldr	r1, [pc, #208]	@ (8002e54 <HAL_DMA_Init+0x110>)
 8002d84:	400a      	ands	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6819      	ldr	r1, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f000 f8fb 	bl	8002fbc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	2380      	movs	r3, #128	@ 0x80
 8002dcc:	01db      	lsls	r3, r3, #7
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d102      	bne.n	8002dd8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de0:	213f      	movs	r1, #63	@ 0x3f
 8002de2:	400a      	ands	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002dee:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d011      	beq.n	8002e1c <HAL_DMA_Init+0xd8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d80d      	bhi.n	8002e1c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	0018      	movs	r0, r3
 8002e04:	f000 f906 	bl	8003014 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	e008      	b.n	8002e2e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2225      	movs	r2, #37	@ 0x25
 8002e38:	2101      	movs	r1, #1
 8002e3a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2224      	movs	r2, #36	@ 0x24
 8002e40:	2100      	movs	r1, #0
 8002e42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	0018      	movs	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b002      	add	sp, #8
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	bffdfff8 	.word	0xbffdfff8
 8002e54:	ffff800f 	.word	0xffff800f

08002e58 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002e60:	4b55      	ldr	r3, [pc, #340]	@ (8002fb8 <HAL_DMA_IRQHandler+0x160>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	221c      	movs	r2, #28
 8002e74:	4013      	ands	r3, r2
 8002e76:	2204      	movs	r2, #4
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	0013      	movs	r3, r2
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d027      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x7a>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2204      	movs	r2, #4
 8002e86:	4013      	ands	r3, r2
 8002e88:	d023      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2220      	movs	r2, #32
 8002e92:	4013      	ands	r3, r2
 8002e94:	d107      	bne.n	8002ea6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2104      	movs	r1, #4
 8002ea2:	438a      	bics	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002ea6:	4b44      	ldr	r3, [pc, #272]	@ (8002fb8 <HAL_DMA_IRQHandler+0x160>)
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	221c      	movs	r2, #28
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	4b40      	ldr	r3, [pc, #256]	@ (8002fb8 <HAL_DMA_IRQHandler+0x160>)
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d100      	bne.n	8002ec6 <HAL_DMA_IRQHandler+0x6e>
 8002ec4:	e073      	b.n	8002fae <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	0010      	movs	r0, r2
 8002ece:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002ed0:	e06d      	b.n	8002fae <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	221c      	movs	r2, #28
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2202      	movs	r2, #2
 8002edc:	409a      	lsls	r2, r3
 8002ede:	0013      	movs	r3, r2
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d02e      	beq.n	8002f44 <HAL_DMA_IRQHandler+0xec>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4013      	ands	r3, r2
 8002eec:	d02a      	beq.n	8002f44 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d10b      	bne.n	8002f12 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	210a      	movs	r1, #10
 8002f06:	438a      	bics	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2225      	movs	r2, #37	@ 0x25
 8002f0e:	2101      	movs	r1, #1
 8002f10:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002f12:	4b29      	ldr	r3, [pc, #164]	@ (8002fb8 <HAL_DMA_IRQHandler+0x160>)
 8002f14:	6859      	ldr	r1, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	221c      	movs	r2, #28
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2202      	movs	r2, #2
 8002f20:	409a      	lsls	r2, r3
 8002f22:	4b25      	ldr	r3, [pc, #148]	@ (8002fb8 <HAL_DMA_IRQHandler+0x160>)
 8002f24:	430a      	orrs	r2, r1
 8002f26:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	@ 0x24
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d03a      	beq.n	8002fae <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	0010      	movs	r0, r2
 8002f40:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002f42:	e034      	b.n	8002fae <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	221c      	movs	r2, #28
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2208      	movs	r2, #8
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	0013      	movs	r3, r2
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4013      	ands	r3, r2
 8002f56:	d02b      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x158>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2208      	movs	r2, #8
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d027      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	210e      	movs	r1, #14
 8002f6c:	438a      	bics	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002f70:	4b11      	ldr	r3, [pc, #68]	@ (8002fb8 <HAL_DMA_IRQHandler+0x160>)
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f78:	221c      	movs	r2, #28
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb8 <HAL_DMA_IRQHandler+0x160>)
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2225      	movs	r2, #37	@ 0x25
 8002f90:	2101      	movs	r1, #1
 8002f92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2224      	movs	r2, #36	@ 0x24
 8002f98:	2100      	movs	r1, #0
 8002f9a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	0010      	movs	r0, r2
 8002fac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fae:	46c0      	nop			@ (mov r8, r8)
 8002fb0:	46c0      	nop			@ (mov r8, r8)
}
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b004      	add	sp, #16
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40020000 	.word	0x40020000

08002fbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc8:	089b      	lsrs	r3, r3, #2
 8002fca:	4a10      	ldr	r2, [pc, #64]	@ (800300c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002fcc:	4694      	mov	ip, r2
 8002fce:	4463      	add	r3, ip
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	001a      	movs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	001a      	movs	r2, r3
 8002fde:	23ff      	movs	r3, #255	@ 0xff
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	3b08      	subs	r3, #8
 8002fe4:	2114      	movs	r1, #20
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7fd f88c 	bl	8000104 <__udivsi3>
 8002fec:	0003      	movs	r3, r0
 8002fee:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a07      	ldr	r2, [pc, #28]	@ (8003010 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002ff4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	221f      	movs	r2, #31
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	409a      	lsls	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003004:	46c0      	nop			@ (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b004      	add	sp, #16
 800300a:	bd80      	pop	{r7, pc}
 800300c:	10008200 	.word	0x10008200
 8003010:	40020880 	.word	0x40020880

08003014 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	223f      	movs	r2, #63	@ 0x3f
 8003022:	4013      	ands	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4a0a      	ldr	r2, [pc, #40]	@ (8003054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800302a:	4694      	mov	ip, r2
 800302c:	4463      	add	r3, ip
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	001a      	movs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a07      	ldr	r2, [pc, #28]	@ (8003058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800303a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3b01      	subs	r3, #1
 8003040:	2203      	movs	r2, #3
 8003042:	4013      	ands	r3, r2
 8003044:	2201      	movs	r2, #1
 8003046:	409a      	lsls	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800304c:	46c0      	nop			@ (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b004      	add	sp, #16
 8003052:	bd80      	pop	{r7, pc}
 8003054:	1000823f 	.word	0x1000823f
 8003058:	40020940 	.word	0x40020940

0800305c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800306a:	e147      	b.n	80032fc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2101      	movs	r1, #1
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4091      	lsls	r1, r2
 8003076:	000a      	movs	r2, r1
 8003078:	4013      	ands	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d100      	bne.n	8003084 <HAL_GPIO_Init+0x28>
 8003082:	e138      	b.n	80032f6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2203      	movs	r2, #3
 800308a:	4013      	ands	r3, r2
 800308c:	2b01      	cmp	r3, #1
 800308e:	d005      	beq.n	800309c <HAL_GPIO_Init+0x40>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2203      	movs	r2, #3
 8003096:	4013      	ands	r3, r2
 8003098:	2b02      	cmp	r3, #2
 800309a:	d130      	bne.n	80030fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	409a      	lsls	r2, r3
 80030aa:	0013      	movs	r3, r2
 80030ac:	43da      	mvns	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	409a      	lsls	r2, r3
 80030be:	0013      	movs	r3, r2
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030d2:	2201      	movs	r2, #1
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	409a      	lsls	r2, r3
 80030d8:	0013      	movs	r3, r2
 80030da:	43da      	mvns	r2, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	2201      	movs	r2, #1
 80030ea:	401a      	ands	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	409a      	lsls	r2, r3
 80030f0:	0013      	movs	r3, r2
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2203      	movs	r2, #3
 8003104:	4013      	ands	r3, r2
 8003106:	2b03      	cmp	r3, #3
 8003108:	d017      	beq.n	800313a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	2203      	movs	r2, #3
 8003116:	409a      	lsls	r2, r3
 8003118:	0013      	movs	r3, r2
 800311a:	43da      	mvns	r2, r3
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	409a      	lsls	r2, r3
 800312c:	0013      	movs	r3, r2
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2203      	movs	r2, #3
 8003140:	4013      	ands	r3, r2
 8003142:	2b02      	cmp	r3, #2
 8003144:	d123      	bne.n	800318e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	08da      	lsrs	r2, r3, #3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3208      	adds	r2, #8
 800314e:	0092      	lsls	r2, r2, #2
 8003150:	58d3      	ldr	r3, [r2, r3]
 8003152:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2207      	movs	r2, #7
 8003158:	4013      	ands	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	220f      	movs	r2, #15
 800315e:	409a      	lsls	r2, r3
 8003160:	0013      	movs	r3, r2
 8003162:	43da      	mvns	r2, r3
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2107      	movs	r1, #7
 8003172:	400b      	ands	r3, r1
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	409a      	lsls	r2, r3
 8003178:	0013      	movs	r3, r2
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	08da      	lsrs	r2, r3, #3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3208      	adds	r2, #8
 8003188:	0092      	lsls	r2, r2, #2
 800318a:	6939      	ldr	r1, [r7, #16]
 800318c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	2203      	movs	r2, #3
 800319a:	409a      	lsls	r2, r3
 800319c:	0013      	movs	r3, r2
 800319e:	43da      	mvns	r2, r3
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2203      	movs	r2, #3
 80031ac:	401a      	ands	r2, r3
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	409a      	lsls	r2, r3
 80031b4:	0013      	movs	r3, r2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	23c0      	movs	r3, #192	@ 0xc0
 80031c8:	029b      	lsls	r3, r3, #10
 80031ca:	4013      	ands	r3, r2
 80031cc:	d100      	bne.n	80031d0 <HAL_GPIO_Init+0x174>
 80031ce:	e092      	b.n	80032f6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80031d0:	4a50      	ldr	r2, [pc, #320]	@ (8003314 <HAL_GPIO_Init+0x2b8>)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	089b      	lsrs	r3, r3, #2
 80031d6:	3318      	adds	r3, #24
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	589b      	ldr	r3, [r3, r2]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2203      	movs	r2, #3
 80031e2:	4013      	ands	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	220f      	movs	r2, #15
 80031e8:	409a      	lsls	r2, r3
 80031ea:	0013      	movs	r3, r2
 80031ec:	43da      	mvns	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4013      	ands	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	23a0      	movs	r3, #160	@ 0xa0
 80031f8:	05db      	lsls	r3, r3, #23
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d013      	beq.n	8003226 <HAL_GPIO_Init+0x1ca>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a45      	ldr	r2, [pc, #276]	@ (8003318 <HAL_GPIO_Init+0x2bc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00d      	beq.n	8003222 <HAL_GPIO_Init+0x1c6>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a44      	ldr	r2, [pc, #272]	@ (800331c <HAL_GPIO_Init+0x2c0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <HAL_GPIO_Init+0x1c2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a43      	ldr	r2, [pc, #268]	@ (8003320 <HAL_GPIO_Init+0x2c4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_GPIO_Init+0x1be>
 8003216:	2303      	movs	r3, #3
 8003218:	e006      	b.n	8003228 <HAL_GPIO_Init+0x1cc>
 800321a:	2305      	movs	r3, #5
 800321c:	e004      	b.n	8003228 <HAL_GPIO_Init+0x1cc>
 800321e:	2302      	movs	r3, #2
 8003220:	e002      	b.n	8003228 <HAL_GPIO_Init+0x1cc>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <HAL_GPIO_Init+0x1cc>
 8003226:	2300      	movs	r3, #0
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	2103      	movs	r1, #3
 800322c:	400a      	ands	r2, r1
 800322e:	00d2      	lsls	r2, r2, #3
 8003230:	4093      	lsls	r3, r2
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003238:	4936      	ldr	r1, [pc, #216]	@ (8003314 <HAL_GPIO_Init+0x2b8>)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	3318      	adds	r3, #24
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003246:	4b33      	ldr	r3, [pc, #204]	@ (8003314 <HAL_GPIO_Init+0x2b8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	43da      	mvns	r2, r3
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	2380      	movs	r3, #128	@ 0x80
 800325c:	035b      	lsls	r3, r3, #13
 800325e:	4013      	ands	r3, r2
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800326a:	4b2a      	ldr	r3, [pc, #168]	@ (8003314 <HAL_GPIO_Init+0x2b8>)
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003270:	4b28      	ldr	r3, [pc, #160]	@ (8003314 <HAL_GPIO_Init+0x2b8>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	43da      	mvns	r2, r3
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	2380      	movs	r3, #128	@ 0x80
 8003286:	039b      	lsls	r3, r3, #14
 8003288:	4013      	ands	r3, r2
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003294:	4b1f      	ldr	r3, [pc, #124]	@ (8003314 <HAL_GPIO_Init+0x2b8>)
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800329a:	4a1e      	ldr	r2, [pc, #120]	@ (8003314 <HAL_GPIO_Init+0x2b8>)
 800329c:	2384      	movs	r3, #132	@ 0x84
 800329e:	58d3      	ldr	r3, [r2, r3]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	43da      	mvns	r2, r3
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	2380      	movs	r3, #128	@ 0x80
 80032b2:	029b      	lsls	r3, r3, #10
 80032b4:	4013      	ands	r3, r2
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032c0:	4914      	ldr	r1, [pc, #80]	@ (8003314 <HAL_GPIO_Init+0x2b8>)
 80032c2:	2284      	movs	r2, #132	@ 0x84
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80032c8:	4a12      	ldr	r2, [pc, #72]	@ (8003314 <HAL_GPIO_Init+0x2b8>)
 80032ca:	2380      	movs	r3, #128	@ 0x80
 80032cc:	58d3      	ldr	r3, [r2, r3]
 80032ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	43da      	mvns	r2, r3
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	2380      	movs	r3, #128	@ 0x80
 80032e0:	025b      	lsls	r3, r3, #9
 80032e2:	4013      	ands	r3, r2
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ee:	4909      	ldr	r1, [pc, #36]	@ (8003314 <HAL_GPIO_Init+0x2b8>)
 80032f0:	2280      	movs	r2, #128	@ 0x80
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	3301      	adds	r3, #1
 80032fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	40da      	lsrs	r2, r3
 8003304:	1e13      	subs	r3, r2, #0
 8003306:	d000      	beq.n	800330a <HAL_GPIO_Init+0x2ae>
 8003308:	e6b0      	b.n	800306c <HAL_GPIO_Init+0x10>
  }
}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	46c0      	nop			@ (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	b006      	add	sp, #24
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40021800 	.word	0x40021800
 8003318:	50000400 	.word	0x50000400
 800331c:	50000800 	.word	0x50000800
 8003320:	50000c00 	.word	0x50000c00

08003324 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	000a      	movs	r2, r1
 800332e:	1cbb      	adds	r3, r7, #2
 8003330:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	1cba      	adds	r2, r7, #2
 8003338:	8812      	ldrh	r2, [r2, #0]
 800333a:	4013      	ands	r3, r2
 800333c:	d004      	beq.n	8003348 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800333e:	230f      	movs	r3, #15
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	2201      	movs	r2, #1
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e003      	b.n	8003350 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003348:	230f      	movs	r3, #15
 800334a:	18fb      	adds	r3, r7, r3
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003350:	230f      	movs	r3, #15
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	781b      	ldrb	r3, [r3, #0]
}
 8003356:	0018      	movs	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	b004      	add	sp, #16
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	0008      	movs	r0, r1
 8003368:	0011      	movs	r1, r2
 800336a:	1cbb      	adds	r3, r7, #2
 800336c:	1c02      	adds	r2, r0, #0
 800336e:	801a      	strh	r2, [r3, #0]
 8003370:	1c7b      	adds	r3, r7, #1
 8003372:	1c0a      	adds	r2, r1, #0
 8003374:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003376:	1c7b      	adds	r3, r7, #1
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800337e:	1cbb      	adds	r3, r7, #2
 8003380:	881a      	ldrh	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003386:	e003      	b.n	8003390 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003388:	1cbb      	adds	r3, r7, #2
 800338a:	881a      	ldrh	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003390:	46c0      	nop			@ (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	b002      	add	sp, #8
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	000a      	movs	r2, r1
 80033a2:	1cbb      	adds	r3, r7, #2
 80033a4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033ac:	1cbb      	adds	r3, r7, #2
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4013      	ands	r3, r2
 80033b4:	041a      	lsls	r2, r3, #16
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	1cb9      	adds	r1, r7, #2
 80033bc:	8809      	ldrh	r1, [r1, #0]
 80033be:	400b      	ands	r3, r1
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	619a      	str	r2, [r3, #24]
}
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b004      	add	sp, #16
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	0002      	movs	r2, r0
 80033d8:	1dbb      	adds	r3, r7, #6
 80033da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80033dc:	4b10      	ldr	r3, [pc, #64]	@ (8003420 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	1dba      	adds	r2, r7, #6
 80033e2:	8812      	ldrh	r2, [r2, #0]
 80033e4:	4013      	ands	r3, r2
 80033e6:	d008      	beq.n	80033fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80033e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003420 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033ea:	1dba      	adds	r2, r7, #6
 80033ec:	8812      	ldrh	r2, [r2, #0]
 80033ee:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80033f0:	1dbb      	adds	r3, r7, #6
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7fe fa3d 	bl	8001874 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80033fa:	4b09      	ldr	r3, [pc, #36]	@ (8003420 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	1dba      	adds	r2, r7, #6
 8003400:	8812      	ldrh	r2, [r2, #0]
 8003402:	4013      	ands	r3, r2
 8003404:	d008      	beq.n	8003418 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003406:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003408:	1dba      	adds	r2, r7, #6
 800340a:	8812      	ldrh	r2, [r2, #0]
 800340c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800340e:	1dbb      	adds	r3, r7, #6
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	0018      	movs	r0, r3
 8003414:	f7fe f9da 	bl	80017cc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003418:	46c0      	nop			@ (mov r8, r8)
 800341a:	46bd      	mov	sp, r7
 800341c:	b002      	add	sp, #8
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021800 	.word	0x40021800

08003424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e08f      	b.n	8003556 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2241      	movs	r2, #65	@ 0x41
 800343a:	5c9b      	ldrb	r3, [r3, r2]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d107      	bne.n	8003452 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2240      	movs	r2, #64	@ 0x40
 8003446:	2100      	movs	r1, #0
 8003448:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	0018      	movs	r0, r3
 800344e:	f7fe ffbb 	bl	80023c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2241      	movs	r2, #65	@ 0x41
 8003456:	2124      	movs	r1, #36	@ 0x24
 8003458:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2101      	movs	r1, #1
 8003466:	438a      	bics	r2, r1
 8003468:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	493b      	ldr	r1, [pc, #236]	@ (8003560 <HAL_I2C_Init+0x13c>)
 8003474:	400a      	ands	r2, r1
 8003476:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4938      	ldr	r1, [pc, #224]	@ (8003564 <HAL_I2C_Init+0x140>)
 8003484:	400a      	ands	r2, r1
 8003486:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d108      	bne.n	80034a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2180      	movs	r1, #128	@ 0x80
 800349a:	0209      	lsls	r1, r1, #8
 800349c:	430a      	orrs	r2, r1
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	e007      	b.n	80034b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2184      	movs	r1, #132	@ 0x84
 80034ac:	0209      	lsls	r1, r1, #8
 80034ae:	430a      	orrs	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d109      	bne.n	80034ce <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2180      	movs	r1, #128	@ 0x80
 80034c6:	0109      	lsls	r1, r1, #4
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	e007      	b.n	80034de <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4923      	ldr	r1, [pc, #140]	@ (8003568 <HAL_I2C_Init+0x144>)
 80034da:	400a      	ands	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4920      	ldr	r1, [pc, #128]	@ (800356c <HAL_I2C_Init+0x148>)
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	491a      	ldr	r1, [pc, #104]	@ (8003564 <HAL_I2C_Init+0x140>)
 80034fa:	400a      	ands	r2, r1
 80034fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	431a      	orrs	r2, r3
 8003508:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69d9      	ldr	r1, [r3, #28]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1a      	ldr	r2, [r3, #32]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2101      	movs	r1, #1
 8003534:	430a      	orrs	r2, r1
 8003536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2241      	movs	r2, #65	@ 0x41
 8003542:	2120      	movs	r1, #32
 8003544:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2242      	movs	r2, #66	@ 0x42
 8003550:	2100      	movs	r1, #0
 8003552:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	0018      	movs	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	b002      	add	sp, #8
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	f0ffffff 	.word	0xf0ffffff
 8003564:	ffff7fff 	.word	0xffff7fff
 8003568:	fffff7ff 	.word	0xfffff7ff
 800356c:	02008000 	.word	0x02008000

08003570 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003570:	b590      	push	{r4, r7, lr}
 8003572:	b089      	sub	sp, #36	@ 0x24
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	0008      	movs	r0, r1
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	0019      	movs	r1, r3
 800357e:	230a      	movs	r3, #10
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	1c02      	adds	r2, r0, #0
 8003584:	801a      	strh	r2, [r3, #0]
 8003586:	2308      	movs	r3, #8
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	1c0a      	adds	r2, r1, #0
 800358c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2241      	movs	r2, #65	@ 0x41
 8003592:	5c9b      	ldrb	r3, [r3, r2]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b20      	cmp	r3, #32
 8003598:	d000      	beq.n	800359c <HAL_I2C_Master_Transmit+0x2c>
 800359a:	e10a      	b.n	80037b2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2240      	movs	r2, #64	@ 0x40
 80035a0:	5c9b      	ldrb	r3, [r3, r2]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_I2C_Master_Transmit+0x3a>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e104      	b.n	80037b4 <HAL_I2C_Master_Transmit+0x244>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2240      	movs	r2, #64	@ 0x40
 80035ae:	2101      	movs	r1, #1
 80035b0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035b2:	f7ff fadf 	bl	8002b74 <HAL_GetTick>
 80035b6:	0003      	movs	r3, r0
 80035b8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035ba:	2380      	movs	r3, #128	@ 0x80
 80035bc:	0219      	lsls	r1, r3, #8
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	2319      	movs	r3, #25
 80035c6:	2201      	movs	r2, #1
 80035c8:	f000 fa26 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 80035cc:	1e03      	subs	r3, r0, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0ef      	b.n	80037b4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2241      	movs	r2, #65	@ 0x41
 80035d8:	2121      	movs	r1, #33	@ 0x21
 80035da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2242      	movs	r2, #66	@ 0x42
 80035e0:	2110      	movs	r1, #16
 80035e2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2208      	movs	r2, #8
 80035f4:	18ba      	adds	r2, r7, r2
 80035f6:	8812      	ldrh	r2, [r2, #0]
 80035f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	2bff      	cmp	r3, #255	@ 0xff
 8003608:	d906      	bls.n	8003618 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	22ff      	movs	r2, #255	@ 0xff
 800360e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003610:	2380      	movs	r3, #128	@ 0x80
 8003612:	045b      	lsls	r3, r3, #17
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e007      	b.n	8003628 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003622:	2380      	movs	r3, #128	@ 0x80
 8003624:	049b      	lsls	r3, r3, #18
 8003626:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362c:	2b00      	cmp	r3, #0
 800362e:	d027      	beq.n	8003680 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	781a      	ldrb	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003664:	b2db      	uxtb	r3, r3
 8003666:	3301      	adds	r3, #1
 8003668:	b2da      	uxtb	r2, r3
 800366a:	697c      	ldr	r4, [r7, #20]
 800366c:	230a      	movs	r3, #10
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	8819      	ldrh	r1, [r3, #0]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	4b51      	ldr	r3, [pc, #324]	@ (80037bc <HAL_I2C_Master_Transmit+0x24c>)
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	0023      	movs	r3, r4
 800367a:	f000 fc45 	bl	8003f08 <I2C_TransferConfig>
 800367e:	e06f      	b.n	8003760 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003684:	b2da      	uxtb	r2, r3
 8003686:	697c      	ldr	r4, [r7, #20]
 8003688:	230a      	movs	r3, #10
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	8819      	ldrh	r1, [r3, #0]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	4b4a      	ldr	r3, [pc, #296]	@ (80037bc <HAL_I2C_Master_Transmit+0x24c>)
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	0023      	movs	r3, r4
 8003696:	f000 fc37 	bl	8003f08 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800369a:	e061      	b.n	8003760 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	0018      	movs	r0, r3
 80036a4:	f000 fa10 	bl	8003ac8 <I2C_WaitOnTXISFlagUntilTimeout>
 80036a8:	1e03      	subs	r3, r0, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e081      	b.n	80037b4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d03a      	beq.n	8003760 <HAL_I2C_Master_Transmit+0x1f0>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d136      	bne.n	8003760 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	0013      	movs	r3, r2
 80036fc:	2200      	movs	r2, #0
 80036fe:	2180      	movs	r1, #128	@ 0x80
 8003700:	f000 f98a 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003704:	1e03      	subs	r3, r0, #0
 8003706:	d001      	beq.n	800370c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e053      	b.n	80037b4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	2bff      	cmp	r3, #255	@ 0xff
 8003714:	d911      	bls.n	800373a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	22ff      	movs	r2, #255	@ 0xff
 800371a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003720:	b2da      	uxtb	r2, r3
 8003722:	2380      	movs	r3, #128	@ 0x80
 8003724:	045c      	lsls	r4, r3, #17
 8003726:	230a      	movs	r3, #10
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	8819      	ldrh	r1, [r3, #0]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	2300      	movs	r3, #0
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	0023      	movs	r3, r4
 8003734:	f000 fbe8 	bl	8003f08 <I2C_TransferConfig>
 8003738:	e012      	b.n	8003760 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003748:	b2da      	uxtb	r2, r3
 800374a:	2380      	movs	r3, #128	@ 0x80
 800374c:	049c      	lsls	r4, r3, #18
 800374e:	230a      	movs	r3, #10
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	8819      	ldrh	r1, [r3, #0]
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	2300      	movs	r3, #0
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	0023      	movs	r3, r4
 800375c:	f000 fbd4 	bl	8003f08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d198      	bne.n	800369c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	0018      	movs	r0, r3
 8003772:	f000 f9ef 	bl	8003b54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003776:	1e03      	subs	r3, r0, #0
 8003778:	d001      	beq.n	800377e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e01a      	b.n	80037b4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2220      	movs	r2, #32
 8003784:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	490b      	ldr	r1, [pc, #44]	@ (80037c0 <HAL_I2C_Master_Transmit+0x250>)
 8003792:	400a      	ands	r2, r1
 8003794:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2241      	movs	r2, #65	@ 0x41
 800379a:	2120      	movs	r1, #32
 800379c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2242      	movs	r2, #66	@ 0x42
 80037a2:	2100      	movs	r1, #0
 80037a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2240      	movs	r2, #64	@ 0x40
 80037aa:	2100      	movs	r1, #0
 80037ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e000      	b.n	80037b4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80037b2:	2302      	movs	r3, #2
  }
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b007      	add	sp, #28
 80037ba:	bd90      	pop	{r4, r7, pc}
 80037bc:	80002000 	.word	0x80002000
 80037c0:	fe00e800 	.word	0xfe00e800

080037c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b089      	sub	sp, #36	@ 0x24
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	0008      	movs	r0, r1
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	0019      	movs	r1, r3
 80037d2:	230a      	movs	r3, #10
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	1c02      	adds	r2, r0, #0
 80037d8:	801a      	strh	r2, [r3, #0]
 80037da:	2308      	movs	r3, #8
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	1c0a      	adds	r2, r1, #0
 80037e0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2241      	movs	r2, #65	@ 0x41
 80037e6:	5c9b      	ldrb	r3, [r3, r2]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d000      	beq.n	80037f0 <HAL_I2C_Master_Receive+0x2c>
 80037ee:	e0e8      	b.n	80039c2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2240      	movs	r2, #64	@ 0x40
 80037f4:	5c9b      	ldrb	r3, [r3, r2]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_I2C_Master_Receive+0x3a>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e0e2      	b.n	80039c4 <HAL_I2C_Master_Receive+0x200>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2240      	movs	r2, #64	@ 0x40
 8003802:	2101      	movs	r1, #1
 8003804:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003806:	f7ff f9b5 	bl	8002b74 <HAL_GetTick>
 800380a:	0003      	movs	r3, r0
 800380c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800380e:	2380      	movs	r3, #128	@ 0x80
 8003810:	0219      	lsls	r1, r3, #8
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	2319      	movs	r3, #25
 800381a:	2201      	movs	r2, #1
 800381c:	f000 f8fc 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003820:	1e03      	subs	r3, r0, #0
 8003822:	d001      	beq.n	8003828 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0cd      	b.n	80039c4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2241      	movs	r2, #65	@ 0x41
 800382c:	2122      	movs	r1, #34	@ 0x22
 800382e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2242      	movs	r2, #66	@ 0x42
 8003834:	2110      	movs	r1, #16
 8003836:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2208      	movs	r2, #8
 8003848:	18ba      	adds	r2, r7, r2
 800384a:	8812      	ldrh	r2, [r2, #0]
 800384c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	2bff      	cmp	r3, #255	@ 0xff
 800385c:	d911      	bls.n	8003882 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	22ff      	movs	r2, #255	@ 0xff
 8003862:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003868:	b2da      	uxtb	r2, r3
 800386a:	2380      	movs	r3, #128	@ 0x80
 800386c:	045c      	lsls	r4, r3, #17
 800386e:	230a      	movs	r3, #10
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	8819      	ldrh	r1, [r3, #0]
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	4b55      	ldr	r3, [pc, #340]	@ (80039cc <HAL_I2C_Master_Receive+0x208>)
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	0023      	movs	r3, r4
 800387c:	f000 fb44 	bl	8003f08 <I2C_TransferConfig>
 8003880:	e076      	b.n	8003970 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003890:	b2da      	uxtb	r2, r3
 8003892:	2380      	movs	r3, #128	@ 0x80
 8003894:	049c      	lsls	r4, r3, #18
 8003896:	230a      	movs	r3, #10
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	8819      	ldrh	r1, [r3, #0]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	4b4b      	ldr	r3, [pc, #300]	@ (80039cc <HAL_I2C_Master_Receive+0x208>)
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	0023      	movs	r3, r4
 80038a4:	f000 fb30 	bl	8003f08 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80038a8:	e062      	b.n	8003970 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f000 f993 	bl	8003bdc <I2C_WaitOnRXNEFlagUntilTimeout>
 80038b6:	1e03      	subs	r3, r0, #0
 80038b8:	d001      	beq.n	80038be <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e082      	b.n	80039c4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d03a      	beq.n	8003970 <HAL_I2C_Master_Receive+0x1ac>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d136      	bne.n	8003970 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	0013      	movs	r3, r2
 800390c:	2200      	movs	r2, #0
 800390e:	2180      	movs	r1, #128	@ 0x80
 8003910:	f000 f882 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003914:	1e03      	subs	r3, r0, #0
 8003916:	d001      	beq.n	800391c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e053      	b.n	80039c4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	2bff      	cmp	r3, #255	@ 0xff
 8003924:	d911      	bls.n	800394a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	22ff      	movs	r2, #255	@ 0xff
 800392a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003930:	b2da      	uxtb	r2, r3
 8003932:	2380      	movs	r3, #128	@ 0x80
 8003934:	045c      	lsls	r4, r3, #17
 8003936:	230a      	movs	r3, #10
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	8819      	ldrh	r1, [r3, #0]
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	2300      	movs	r3, #0
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	0023      	movs	r3, r4
 8003944:	f000 fae0 	bl	8003f08 <I2C_TransferConfig>
 8003948:	e012      	b.n	8003970 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003958:	b2da      	uxtb	r2, r3
 800395a:	2380      	movs	r3, #128	@ 0x80
 800395c:	049c      	lsls	r4, r3, #18
 800395e:	230a      	movs	r3, #10
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	8819      	ldrh	r1, [r3, #0]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	2300      	movs	r3, #0
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	0023      	movs	r3, r4
 800396c:	f000 facc 	bl	8003f08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d197      	bne.n	80038aa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	0018      	movs	r0, r3
 8003982:	f000 f8e7 	bl	8003b54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003986:	1e03      	subs	r3, r0, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e01a      	b.n	80039c4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2220      	movs	r2, #32
 8003994:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	490b      	ldr	r1, [pc, #44]	@ (80039d0 <HAL_I2C_Master_Receive+0x20c>)
 80039a2:	400a      	ands	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2241      	movs	r2, #65	@ 0x41
 80039aa:	2120      	movs	r1, #32
 80039ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2242      	movs	r2, #66	@ 0x42
 80039b2:	2100      	movs	r1, #0
 80039b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2240      	movs	r2, #64	@ 0x40
 80039ba:	2100      	movs	r1, #0
 80039bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e000      	b.n	80039c4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
  }
}
 80039c4:	0018      	movs	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b007      	add	sp, #28
 80039ca:	bd90      	pop	{r4, r7, pc}
 80039cc:	80002400 	.word	0x80002400
 80039d0:	fe00e800 	.word	0xfe00e800

080039d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2202      	movs	r2, #2
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d103      	bne.n	80039f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2200      	movs	r2, #0
 80039f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2201      	movs	r2, #1
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d007      	beq.n	8003a10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	619a      	str	r2, [r3, #24]
  }
}
 8003a10:	46c0      	nop			@ (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b002      	add	sp, #8
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	1dfb      	adds	r3, r7, #7
 8003a26:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a28:	e03a      	b.n	8003aa0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	6839      	ldr	r1, [r7, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	0018      	movs	r0, r3
 8003a32:	f000 f971 	bl	8003d18 <I2C_IsErrorOccurred>
 8003a36:	1e03      	subs	r3, r0, #0
 8003a38:	d001      	beq.n	8003a3e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e040      	b.n	8003ac0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	3301      	adds	r3, #1
 8003a42:	d02d      	beq.n	8003aa0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a44:	f7ff f896 	bl	8002b74 <HAL_GetTick>
 8003a48:	0002      	movs	r2, r0
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d302      	bcc.n	8003a5a <I2C_WaitOnFlagUntilTimeout+0x42>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d122      	bne.n	8003aa0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	4013      	ands	r3, r2
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	425a      	negs	r2, r3
 8003a6a:	4153      	adcs	r3, r2
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	001a      	movs	r2, r3
 8003a70:	1dfb      	adds	r3, r7, #7
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d113      	bne.n	8003aa0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2241      	movs	r2, #65	@ 0x41
 8003a88:	2120      	movs	r1, #32
 8003a8a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2242      	movs	r2, #66	@ 0x42
 8003a90:	2100      	movs	r1, #0
 8003a92:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2240      	movs	r2, #64	@ 0x40
 8003a98:	2100      	movs	r1, #0
 8003a9a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e00f      	b.n	8003ac0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	425a      	negs	r2, r3
 8003ab0:	4153      	adcs	r3, r2
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	001a      	movs	r2, r3
 8003ab6:	1dfb      	adds	r3, r7, #7
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d0b5      	beq.n	8003a2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b004      	add	sp, #16
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ad4:	e032      	b.n	8003b3c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f000 f91b 	bl	8003d18 <I2C_IsErrorOccurred>
 8003ae2:	1e03      	subs	r3, r0, #0
 8003ae4:	d001      	beq.n	8003aea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e030      	b.n	8003b4c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3301      	adds	r3, #1
 8003aee:	d025      	beq.n	8003b3c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af0:	f7ff f840 	bl	8002b74 <HAL_GetTick>
 8003af4:	0002      	movs	r2, r0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d302      	bcc.n	8003b06 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d11a      	bne.n	8003b3c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d013      	beq.n	8003b3c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b18:	2220      	movs	r2, #32
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2241      	movs	r2, #65	@ 0x41
 8003b24:	2120      	movs	r1, #32
 8003b26:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2242      	movs	r2, #66	@ 0x42
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2240      	movs	r2, #64	@ 0x40
 8003b34:	2100      	movs	r1, #0
 8003b36:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e007      	b.n	8003b4c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2202      	movs	r2, #2
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d1c5      	bne.n	8003ad6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b004      	add	sp, #16
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b60:	e02f      	b.n	8003bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f000 f8d5 	bl	8003d18 <I2C_IsErrorOccurred>
 8003b6e:	1e03      	subs	r3, r0, #0
 8003b70:	d001      	beq.n	8003b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e02d      	b.n	8003bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b76:	f7fe fffd 	bl	8002b74 <HAL_GetTick>
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d302      	bcc.n	8003b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d11a      	bne.n	8003bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2220      	movs	r2, #32
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d013      	beq.n	8003bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2241      	movs	r2, #65	@ 0x41
 8003baa:	2120      	movs	r1, #32
 8003bac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2242      	movs	r2, #66	@ 0x42
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2240      	movs	r2, #64	@ 0x40
 8003bba:	2100      	movs	r1, #0
 8003bbc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e007      	b.n	8003bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	d1c8      	bne.n	8003b62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b004      	add	sp, #16
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be8:	2317      	movs	r3, #23
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003bf0:	e07b      	b.n	8003cea <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f000 f88d 	bl	8003d18 <I2C_IsErrorOccurred>
 8003bfe:	1e03      	subs	r3, r0, #0
 8003c00:	d003      	beq.n	8003c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003c02:	2317      	movs	r3, #23
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	2201      	movs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2220      	movs	r2, #32
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d140      	bne.n	8003c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003c18:	2117      	movs	r1, #23
 8003c1a:	187b      	adds	r3, r7, r1
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d13b      	bne.n	8003c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2204      	movs	r2, #4
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d106      	bne.n	8003c3e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003c38:	187b      	adds	r3, r7, r1
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2210      	movs	r2, #16
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b10      	cmp	r3, #16
 8003c4a:	d123      	bne.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2210      	movs	r2, #16
 8003c52:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2204      	movs	r2, #4
 8003c58:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4929      	ldr	r1, [pc, #164]	@ (8003d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003c6e:	400a      	ands	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2241      	movs	r2, #65	@ 0x41
 8003c76:	2120      	movs	r1, #32
 8003c78:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2242      	movs	r2, #66	@ 0x42
 8003c7e:	2100      	movs	r1, #0
 8003c80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2240      	movs	r2, #64	@ 0x40
 8003c86:	2100      	movs	r1, #0
 8003c88:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003c8a:	2317      	movs	r3, #23
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	e002      	b.n	8003c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003c9a:	f7fe ff6b 	bl	8002b74 <HAL_GetTick>
 8003c9e:	0002      	movs	r2, r0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d302      	bcc.n	8003cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d11c      	bne.n	8003cea <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003cb0:	2017      	movs	r0, #23
 8003cb2:	183b      	adds	r3, r7, r0
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d117      	bne.n	8003cea <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d010      	beq.n	8003cea <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ccc:	2220      	movs	r2, #32
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2241      	movs	r2, #65	@ 0x41
 8003cd8:	2120      	movs	r1, #32
 8003cda:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2240      	movs	r2, #64	@ 0x40
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003ce4:	183b      	adds	r3, r7, r0
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d005      	beq.n	8003d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003cf8:	2317      	movs	r3, #23
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d100      	bne.n	8003d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003d02:	e776      	b.n	8003bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003d04:	2317      	movs	r3, #23
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	781b      	ldrb	r3, [r3, #0]
}
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b006      	add	sp, #24
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	fe00e800 	.word	0xfe00e800

08003d18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	@ 0x28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d24:	2327      	movs	r3, #39	@ 0x27
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	2200      	movs	r2, #0
 8003d2a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2210      	movs	r2, #16
 8003d40:	4013      	ands	r3, r2
 8003d42:	d100      	bne.n	8003d46 <I2C_IsErrorOccurred+0x2e>
 8003d44:	e079      	b.n	8003e3a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2210      	movs	r2, #16
 8003d4c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d4e:	e057      	b.n	8003e00 <I2C_IsErrorOccurred+0xe8>
 8003d50:	2227      	movs	r2, #39	@ 0x27
 8003d52:	18bb      	adds	r3, r7, r2
 8003d54:	18ba      	adds	r2, r7, r2
 8003d56:	7812      	ldrb	r2, [r2, #0]
 8003d58:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	d04f      	beq.n	8003e00 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d60:	f7fe ff08 	bl	8002b74 <HAL_GetTick>
 8003d64:	0002      	movs	r2, r0
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d302      	bcc.n	8003d76 <I2C_IsErrorOccurred+0x5e>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d144      	bne.n	8003e00 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	2380      	movs	r3, #128	@ 0x80
 8003d7e:	01db      	lsls	r3, r3, #7
 8003d80:	4013      	ands	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d84:	2013      	movs	r0, #19
 8003d86:	183b      	adds	r3, r7, r0
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	2142      	movs	r1, #66	@ 0x42
 8003d8c:	5c52      	ldrb	r2, [r2, r1]
 8003d8e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	2380      	movs	r3, #128	@ 0x80
 8003d98:	021b      	lsls	r3, r3, #8
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	2380      	movs	r3, #128	@ 0x80
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d126      	bne.n	8003df2 <I2C_IsErrorOccurred+0xda>
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	2380      	movs	r3, #128	@ 0x80
 8003da8:	01db      	lsls	r3, r3, #7
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d021      	beq.n	8003df2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003dae:	183b      	adds	r3, r7, r0
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b20      	cmp	r3, #32
 8003db4:	d01d      	beq.n	8003df2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2180      	movs	r1, #128	@ 0x80
 8003dc2:	01c9      	lsls	r1, r1, #7
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003dc8:	f7fe fed4 	bl	8002b74 <HAL_GetTick>
 8003dcc:	0003      	movs	r3, r0
 8003dce:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dd0:	e00f      	b.n	8003df2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003dd2:	f7fe fecf 	bl	8002b74 <HAL_GetTick>
 8003dd6:	0002      	movs	r2, r0
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b19      	cmp	r3, #25
 8003dde:	d908      	bls.n	8003df2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	2220      	movs	r2, #32
 8003de4:	4313      	orrs	r3, r2
 8003de6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003de8:	2327      	movs	r3, #39	@ 0x27
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]

              break;
 8003df0:	e006      	b.n	8003e00 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d1e8      	bne.n	8003dd2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2220      	movs	r2, #32
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d004      	beq.n	8003e18 <I2C_IsErrorOccurred+0x100>
 8003e0e:	2327      	movs	r3, #39	@ 0x27
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d09b      	beq.n	8003d50 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e18:	2327      	movs	r3, #39	@ 0x27
 8003e1a:	18fb      	adds	r3, r7, r3
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d103      	bne.n	8003e2a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2220      	movs	r2, #32
 8003e28:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e32:	2327      	movs	r3, #39	@ 0x27
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	2201      	movs	r2, #1
 8003e38:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	2380      	movs	r3, #128	@ 0x80
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	4013      	ands	r3, r2
 8003e4a:	d00c      	beq.n	8003e66 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	4313      	orrs	r3, r2
 8003e52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2280      	movs	r2, #128	@ 0x80
 8003e5a:	0052      	lsls	r2, r2, #1
 8003e5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e5e:	2327      	movs	r3, #39	@ 0x27
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	2201      	movs	r2, #1
 8003e64:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	2380      	movs	r3, #128	@ 0x80
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d00c      	beq.n	8003e8a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	2208      	movs	r2, #8
 8003e74:	4313      	orrs	r3, r2
 8003e76:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2280      	movs	r2, #128	@ 0x80
 8003e7e:	00d2      	lsls	r2, r2, #3
 8003e80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e82:	2327      	movs	r3, #39	@ 0x27
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	2201      	movs	r2, #1
 8003e88:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	2380      	movs	r3, #128	@ 0x80
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4013      	ands	r3, r2
 8003e92:	d00c      	beq.n	8003eae <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	2202      	movs	r2, #2
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2280      	movs	r2, #128	@ 0x80
 8003ea2:	0092      	lsls	r2, r2, #2
 8003ea4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ea6:	2327      	movs	r3, #39	@ 0x27
 8003ea8:	18fb      	adds	r3, r7, r3
 8003eaa:	2201      	movs	r2, #1
 8003eac:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003eae:	2327      	movs	r3, #39	@ 0x27
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01d      	beq.n	8003ef4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f7ff fd8a 	bl	80039d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	490e      	ldr	r1, [pc, #56]	@ (8003f04 <I2C_IsErrorOccurred+0x1ec>)
 8003ecc:	400a      	ands	r2, r1
 8003ece:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2241      	movs	r2, #65	@ 0x41
 8003ee0:	2120      	movs	r1, #32
 8003ee2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2242      	movs	r2, #66	@ 0x42
 8003ee8:	2100      	movs	r1, #0
 8003eea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2240      	movs	r2, #64	@ 0x40
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003ef4:	2327      	movs	r3, #39	@ 0x27
 8003ef6:	18fb      	adds	r3, r7, r3
 8003ef8:	781b      	ldrb	r3, [r3, #0]
}
 8003efa:	0018      	movs	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	b00a      	add	sp, #40	@ 0x28
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	46c0      	nop			@ (mov r8, r8)
 8003f04:	fe00e800 	.word	0xfe00e800

08003f08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	0008      	movs	r0, r1
 8003f12:	0011      	movs	r1, r2
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	240a      	movs	r4, #10
 8003f18:	193b      	adds	r3, r7, r4
 8003f1a:	1c02      	adds	r2, r0, #0
 8003f1c:	801a      	strh	r2, [r3, #0]
 8003f1e:	2009      	movs	r0, #9
 8003f20:	183b      	adds	r3, r7, r0
 8003f22:	1c0a      	adds	r2, r1, #0
 8003f24:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f26:	193b      	adds	r3, r7, r4
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	059b      	lsls	r3, r3, #22
 8003f2c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f2e:	183b      	adds	r3, r7, r0
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	0419      	lsls	r1, r3, #16
 8003f34:	23ff      	movs	r3, #255	@ 0xff
 8003f36:	041b      	lsls	r3, r3, #16
 8003f38:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f3a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f42:	4313      	orrs	r3, r2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f52:	0d51      	lsrs	r1, r2, #21
 8003f54:	2280      	movs	r2, #128	@ 0x80
 8003f56:	00d2      	lsls	r2, r2, #3
 8003f58:	400a      	ands	r2, r1
 8003f5a:	4907      	ldr	r1, [pc, #28]	@ (8003f78 <I2C_TransferConfig+0x70>)
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	43d2      	mvns	r2, r2
 8003f60:	401a      	ands	r2, r3
 8003f62:	0011      	movs	r1, r2
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f6e:	46c0      	nop			@ (mov r8, r8)
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b007      	add	sp, #28
 8003f74:	bd90      	pop	{r4, r7, pc}
 8003f76:	46c0      	nop			@ (mov r8, r8)
 8003f78:	03ff63ff 	.word	0x03ff63ff

08003f7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2241      	movs	r2, #65	@ 0x41
 8003f8a:	5c9b      	ldrb	r3, [r3, r2]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d138      	bne.n	8004004 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2240      	movs	r2, #64	@ 0x40
 8003f96:	5c9b      	ldrb	r3, [r3, r2]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e032      	b.n	8004006 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2240      	movs	r2, #64	@ 0x40
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2241      	movs	r2, #65	@ 0x41
 8003fac:	2124      	movs	r1, #36	@ 0x24
 8003fae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2101      	movs	r1, #1
 8003fbc:	438a      	bics	r2, r1
 8003fbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4911      	ldr	r1, [pc, #68]	@ (8004010 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003fcc:	400a      	ands	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6819      	ldr	r1, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2101      	movs	r1, #1
 8003fec:	430a      	orrs	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2241      	movs	r2, #65	@ 0x41
 8003ff4:	2120      	movs	r1, #32
 8003ff6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2240      	movs	r2, #64	@ 0x40
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	e000      	b.n	8004006 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004004:	2302      	movs	r3, #2
  }
}
 8004006:	0018      	movs	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	b002      	add	sp, #8
 800400c:	bd80      	pop	{r7, pc}
 800400e:	46c0      	nop			@ (mov r8, r8)
 8004010:	ffffefff 	.word	0xffffefff

08004014 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2241      	movs	r2, #65	@ 0x41
 8004022:	5c9b      	ldrb	r3, [r3, r2]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b20      	cmp	r3, #32
 8004028:	d139      	bne.n	800409e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2240      	movs	r2, #64	@ 0x40
 800402e:	5c9b      	ldrb	r3, [r3, r2]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004034:	2302      	movs	r3, #2
 8004036:	e033      	b.n	80040a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2240      	movs	r2, #64	@ 0x40
 800403c:	2101      	movs	r1, #1
 800403e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2241      	movs	r2, #65	@ 0x41
 8004044:	2124      	movs	r1, #36	@ 0x24
 8004046:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2101      	movs	r1, #1
 8004054:	438a      	bics	r2, r1
 8004056:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a11      	ldr	r2, [pc, #68]	@ (80040a8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004064:	4013      	ands	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2101      	movs	r1, #1
 8004086:	430a      	orrs	r2, r1
 8004088:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2241      	movs	r2, #65	@ 0x41
 800408e:	2120      	movs	r1, #32
 8004090:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2240      	movs	r2, #64	@ 0x40
 8004096:	2100      	movs	r1, #0
 8004098:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	e000      	b.n	80040a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800409e:	2302      	movs	r3, #2
  }
}
 80040a0:	0018      	movs	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b004      	add	sp, #16
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	fffff0ff 	.word	0xfffff0ff

080040ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e0e5      	b.n	800428a <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2235      	movs	r2, #53	@ 0x35
 80040c2:	5c9b      	ldrb	r3, [r3, r2]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d107      	bne.n	80040da <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2234      	movs	r2, #52	@ 0x34
 80040ce:	2100      	movs	r1, #0
 80040d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7fe f9d9 	bl	800248c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2235      	movs	r2, #53	@ 0x35
 80040de:	2102      	movs	r1, #2
 80040e0:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4969      	ldr	r1, [pc, #420]	@ (8004294 <HAL_I2S_Init+0x1e8>)
 80040ee:	400a      	ands	r2, r1
 80040f0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2202      	movs	r2, #2
 80040f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d100      	bne.n	8004104 <HAL_I2S_Init+0x58>
 8004102:	e076      	b.n	80041f2 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d102      	bne.n	8004112 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800410c:	2310      	movs	r3, #16
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e001      	b.n	8004116 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004112:	2320      	movs	r3, #32
 8004114:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b20      	cmp	r3, #32
 800411c:	d802      	bhi.n	8004124 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004124:	2380      	movs	r3, #128	@ 0x80
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	0018      	movs	r0, r3
 800412a:	f000 ff5b 	bl	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq>
 800412e:	0003      	movs	r3, r0
 8004130:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	2380      	movs	r3, #128	@ 0x80
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	429a      	cmp	r2, r3
 800413c:	d131      	bne.n	80041a2 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d016      	beq.n	8004174 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	0019      	movs	r1, r3
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f7fb ffd9 	bl	8000104 <__udivsi3>
 8004152:	0003      	movs	r3, r0
 8004154:	001a      	movs	r2, r3
 8004156:	0013      	movs	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	189b      	adds	r3, r3, r2
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	001a      	movs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	0019      	movs	r1, r3
 8004166:	0010      	movs	r0, r2
 8004168:	f7fb ffcc 	bl	8000104 <__udivsi3>
 800416c:	0003      	movs	r3, r0
 800416e:	3305      	adds	r3, #5
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	e02a      	b.n	80041ca <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	0019      	movs	r1, r3
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f7fb ffc2 	bl	8000104 <__udivsi3>
 8004180:	0003      	movs	r3, r0
 8004182:	001a      	movs	r2, r3
 8004184:	0013      	movs	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	189b      	adds	r3, r3, r2
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	001a      	movs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	0019      	movs	r1, r3
 8004194:	0010      	movs	r0, r2
 8004196:	f7fb ffb5 	bl	8000104 <__udivsi3>
 800419a:	0003      	movs	r3, r0
 800419c:	3305      	adds	r3, #5
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	e013      	b.n	80041ca <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041a2:	6979      	ldr	r1, [r7, #20]
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7fb ffad 	bl	8000104 <__udivsi3>
 80041aa:	0003      	movs	r3, r0
 80041ac:	001a      	movs	r2, r3
 80041ae:	0013      	movs	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	189b      	adds	r3, r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	001a      	movs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	0019      	movs	r1, r3
 80041be:	0010      	movs	r0, r2
 80041c0:	f7fb ffa0 	bl	8000104 <__udivsi3>
 80041c4:	0003      	movs	r3, r0
 80041c6:	3305      	adds	r3, #5
 80041c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	210a      	movs	r1, #10
 80041ce:	0018      	movs	r0, r3
 80041d0:	f7fb ff98 	bl	8000104 <__udivsi3>
 80041d4:	0003      	movs	r3, r0
 80041d6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2201      	movs	r2, #1
 80041dc:	4013      	ands	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	e003      	b.n	80041fa <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80041f2:	2302      	movs	r3, #2
 80041f4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d902      	bls.n	8004206 <HAL_I2S_Init+0x15a>
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	2bff      	cmp	r3, #255	@ 0xff
 8004204:	d907      	bls.n	8004216 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420a:	2210      	movs	r2, #16
 800420c:	431a      	orrs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e039      	b.n	800428a <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	431a      	orrs	r2, r3
 800421e:	0011      	movs	r1, r2
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	430a      	orrs	r2, r1
 8004228:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	4a18      	ldr	r2, [pc, #96]	@ (8004294 <HAL_I2S_Init+0x1e8>)
 8004232:	401a      	ands	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6859      	ldr	r1, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4319      	orrs	r1, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	4319      	orrs	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	430b      	orrs	r3, r1
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2180      	movs	r1, #128	@ 0x80
 8004252:	0109      	lsls	r1, r1, #4
 8004254:	430a      	orrs	r2, r1
 8004256:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b30      	cmp	r3, #48	@ 0x30
 800425e:	d003      	beq.n	8004268 <HAL_I2S_Init+0x1bc>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2bb0      	cmp	r3, #176	@ 0xb0
 8004266:	d108      	bne.n	800427a <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2180      	movs	r1, #128	@ 0x80
 8004274:	0149      	lsls	r1, r1, #5
 8004276:	430a      	orrs	r2, r1
 8004278:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2235      	movs	r2, #53	@ 0x35
 8004284:	2101      	movs	r1, #1
 8004286:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	0018      	movs	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	b008      	add	sp, #32
 8004290:	bd80      	pop	{r7, pc}
 8004292:	46c0      	nop			@ (mov r8, r8)
 8004294:	fffff040 	.word	0xfffff040

08004298 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800429c:	4b04      	ldr	r3, [pc, #16]	@ (80042b0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b03      	ldr	r3, [pc, #12]	@ (80042b0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80042a2:	2180      	movs	r1, #128	@ 0x80
 80042a4:	0049      	lsls	r1, r1, #1
 80042a6:	430a      	orrs	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
}
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40007000 	.word	0x40007000

080042b4 <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b8:	4b04      	ldr	r3, [pc, #16]	@ (80042cc <HAL_PWR_DisableBkUpAccess+0x18>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b03      	ldr	r3, [pc, #12]	@ (80042cc <HAL_PWR_DisableBkUpAccess+0x18>)
 80042be:	4904      	ldr	r1, [pc, #16]	@ (80042d0 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80042c0:	400a      	ands	r2, r1
 80042c2:	601a      	str	r2, [r3, #0]
}
 80042c4:	46c0      	nop			@ (mov r8, r8)
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	46c0      	nop			@ (mov r8, r8)
 80042cc:	40007000 	.word	0x40007000
 80042d0:	fffffeff 	.word	0xfffffeff

080042d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80042dc:	4b19      	ldr	r3, [pc, #100]	@ (8004344 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a19      	ldr	r2, [pc, #100]	@ (8004348 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	0019      	movs	r1, r3
 80042e6:	4b17      	ldr	r3, [pc, #92]	@ (8004344 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	2380      	movs	r3, #128	@ 0x80
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d11f      	bne.n	8004338 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80042f8:	4b14      	ldr	r3, [pc, #80]	@ (800434c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	0013      	movs	r3, r2
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	189b      	adds	r3, r3, r2
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4912      	ldr	r1, [pc, #72]	@ (8004350 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004306:	0018      	movs	r0, r3
 8004308:	f7fb fefc 	bl	8000104 <__udivsi3>
 800430c:	0003      	movs	r3, r0
 800430e:	3301      	adds	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004312:	e008      	b.n	8004326 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3b01      	subs	r3, #1
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	e001      	b.n	8004326 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e009      	b.n	800433a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004326:	4b07      	ldr	r3, [pc, #28]	@ (8004344 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004328:	695a      	ldr	r2, [r3, #20]
 800432a:	2380      	movs	r3, #128	@ 0x80
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	401a      	ands	r2, r3
 8004330:	2380      	movs	r3, #128	@ 0x80
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	429a      	cmp	r2, r3
 8004336:	d0ed      	beq.n	8004314 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	0018      	movs	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	b004      	add	sp, #16
 8004340:	bd80      	pop	{r7, pc}
 8004342:	46c0      	nop			@ (mov r8, r8)
 8004344:	40007000 	.word	0x40007000
 8004348:	fffff9ff 	.word	0xfffff9ff
 800434c:	20000070 	.word	0x20000070
 8004350:	000f4240 	.word	0x000f4240

08004354 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004358:	4b03      	ldr	r3, [pc, #12]	@ (8004368 <LL_RCC_GetAPB1Prescaler+0x14>)
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	23e0      	movs	r3, #224	@ 0xe0
 800435e:	01db      	lsls	r3, r3, #7
 8004360:	4013      	ands	r3, r2
}
 8004362:	0018      	movs	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40021000 	.word	0x40021000

0800436c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e2fe      	b.n	800497c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2201      	movs	r2, #1
 8004384:	4013      	ands	r3, r2
 8004386:	d100      	bne.n	800438a <HAL_RCC_OscConfig+0x1e>
 8004388:	e07c      	b.n	8004484 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800438a:	4bc3      	ldr	r3, [pc, #780]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2238      	movs	r2, #56	@ 0x38
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004394:	4bc0      	ldr	r3, [pc, #768]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2203      	movs	r2, #3
 800439a:	4013      	ands	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d102      	bne.n	80043aa <HAL_RCC_OscConfig+0x3e>
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d002      	beq.n	80043b0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d10b      	bne.n	80043c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	4bb9      	ldr	r3, [pc, #740]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	2380      	movs	r3, #128	@ 0x80
 80043b6:	029b      	lsls	r3, r3, #10
 80043b8:	4013      	ands	r3, r2
 80043ba:	d062      	beq.n	8004482 <HAL_RCC_OscConfig+0x116>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d15e      	bne.n	8004482 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e2d9      	b.n	800497c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	2380      	movs	r3, #128	@ 0x80
 80043ce:	025b      	lsls	r3, r3, #9
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d107      	bne.n	80043e4 <HAL_RCC_OscConfig+0x78>
 80043d4:	4bb0      	ldr	r3, [pc, #704]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4baf      	ldr	r3, [pc, #700]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 80043da:	2180      	movs	r1, #128	@ 0x80
 80043dc:	0249      	lsls	r1, r1, #9
 80043de:	430a      	orrs	r2, r1
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	e020      	b.n	8004426 <HAL_RCC_OscConfig+0xba>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	23a0      	movs	r3, #160	@ 0xa0
 80043ea:	02db      	lsls	r3, r3, #11
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d10e      	bne.n	800440e <HAL_RCC_OscConfig+0xa2>
 80043f0:	4ba9      	ldr	r3, [pc, #676]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	4ba8      	ldr	r3, [pc, #672]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 80043f6:	2180      	movs	r1, #128	@ 0x80
 80043f8:	02c9      	lsls	r1, r1, #11
 80043fa:	430a      	orrs	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	4ba6      	ldr	r3, [pc, #664]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4ba5      	ldr	r3, [pc, #660]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004404:	2180      	movs	r1, #128	@ 0x80
 8004406:	0249      	lsls	r1, r1, #9
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	e00b      	b.n	8004426 <HAL_RCC_OscConfig+0xba>
 800440e:	4ba2      	ldr	r3, [pc, #648]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4ba1      	ldr	r3, [pc, #644]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004414:	49a1      	ldr	r1, [pc, #644]	@ (800469c <HAL_RCC_OscConfig+0x330>)
 8004416:	400a      	ands	r2, r1
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	4b9f      	ldr	r3, [pc, #636]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	4b9e      	ldr	r3, [pc, #632]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004420:	499f      	ldr	r1, [pc, #636]	@ (80046a0 <HAL_RCC_OscConfig+0x334>)
 8004422:	400a      	ands	r2, r1
 8004424:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d014      	beq.n	8004458 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442e:	f7fe fba1 	bl	8002b74 <HAL_GetTick>
 8004432:	0003      	movs	r3, r0
 8004434:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004438:	f7fe fb9c 	bl	8002b74 <HAL_GetTick>
 800443c:	0002      	movs	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	@ 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e298      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800444a:	4b93      	ldr	r3, [pc, #588]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	2380      	movs	r3, #128	@ 0x80
 8004450:	029b      	lsls	r3, r3, #10
 8004452:	4013      	ands	r3, r2
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0xcc>
 8004456:	e015      	b.n	8004484 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fe fb8c 	bl	8002b74 <HAL_GetTick>
 800445c:	0003      	movs	r3, r0
 800445e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004462:	f7fe fb87 	bl	8002b74 <HAL_GetTick>
 8004466:	0002      	movs	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b64      	cmp	r3, #100	@ 0x64
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e283      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004474:	4b88      	ldr	r3, [pc, #544]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	2380      	movs	r3, #128	@ 0x80
 800447a:	029b      	lsls	r3, r3, #10
 800447c:	4013      	ands	r3, r2
 800447e:	d1f0      	bne.n	8004462 <HAL_RCC_OscConfig+0xf6>
 8004480:	e000      	b.n	8004484 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004482:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2202      	movs	r2, #2
 800448a:	4013      	ands	r3, r2
 800448c:	d100      	bne.n	8004490 <HAL_RCC_OscConfig+0x124>
 800448e:	e099      	b.n	80045c4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004490:	4b81      	ldr	r3, [pc, #516]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2238      	movs	r2, #56	@ 0x38
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800449a:	4b7f      	ldr	r3, [pc, #508]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2203      	movs	r2, #3
 80044a0:	4013      	ands	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d102      	bne.n	80044b0 <HAL_RCC_OscConfig+0x144>
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d002      	beq.n	80044b6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d135      	bne.n	8004522 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044b6:	4b78      	ldr	r3, [pc, #480]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	2380      	movs	r3, #128	@ 0x80
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4013      	ands	r3, r2
 80044c0:	d005      	beq.n	80044ce <HAL_RCC_OscConfig+0x162>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e256      	b.n	800497c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ce:	4b72      	ldr	r3, [pc, #456]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	4a74      	ldr	r2, [pc, #464]	@ (80046a4 <HAL_RCC_OscConfig+0x338>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	0019      	movs	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	021a      	lsls	r2, r3, #8
 80044de:	4b6e      	ldr	r3, [pc, #440]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 80044e0:	430a      	orrs	r2, r1
 80044e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d112      	bne.n	8004510 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80044ea:	4b6b      	ldr	r3, [pc, #428]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a6e      	ldr	r2, [pc, #440]	@ (80046a8 <HAL_RCC_OscConfig+0x33c>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	0019      	movs	r1, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	4b67      	ldr	r3, [pc, #412]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 80044fa:	430a      	orrs	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80044fe:	4b66      	ldr	r3, [pc, #408]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	0adb      	lsrs	r3, r3, #11
 8004504:	2207      	movs	r2, #7
 8004506:	4013      	ands	r3, r2
 8004508:	4a68      	ldr	r2, [pc, #416]	@ (80046ac <HAL_RCC_OscConfig+0x340>)
 800450a:	40da      	lsrs	r2, r3
 800450c:	4b68      	ldr	r3, [pc, #416]	@ (80046b0 <HAL_RCC_OscConfig+0x344>)
 800450e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004510:	4b68      	ldr	r3, [pc, #416]	@ (80046b4 <HAL_RCC_OscConfig+0x348>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	0018      	movs	r0, r3
 8004516:	f7fe fad1 	bl	8002abc <HAL_InitTick>
 800451a:	1e03      	subs	r3, r0, #0
 800451c:	d051      	beq.n	80045c2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e22c      	b.n	800497c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d030      	beq.n	800458c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800452a:	4b5b      	ldr	r3, [pc, #364]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a5e      	ldr	r2, [pc, #376]	@ (80046a8 <HAL_RCC_OscConfig+0x33c>)
 8004530:	4013      	ands	r3, r2
 8004532:	0019      	movs	r1, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	4b57      	ldr	r3, [pc, #348]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 800453a:	430a      	orrs	r2, r1
 800453c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800453e:	4b56      	ldr	r3, [pc, #344]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b55      	ldr	r3, [pc, #340]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004544:	2180      	movs	r1, #128	@ 0x80
 8004546:	0049      	lsls	r1, r1, #1
 8004548:	430a      	orrs	r2, r1
 800454a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fe fb12 	bl	8002b74 <HAL_GetTick>
 8004550:	0003      	movs	r3, r0
 8004552:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004556:	f7fe fb0d 	bl	8002b74 <HAL_GetTick>
 800455a:	0002      	movs	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e209      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004568:	4b4b      	ldr	r3, [pc, #300]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	2380      	movs	r3, #128	@ 0x80
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4013      	ands	r3, r2
 8004572:	d0f0      	beq.n	8004556 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004574:	4b48      	ldr	r3, [pc, #288]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	4a4a      	ldr	r2, [pc, #296]	@ (80046a4 <HAL_RCC_OscConfig+0x338>)
 800457a:	4013      	ands	r3, r2
 800457c:	0019      	movs	r1, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	021a      	lsls	r2, r3, #8
 8004584:	4b44      	ldr	r3, [pc, #272]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	e01b      	b.n	80045c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800458c:	4b42      	ldr	r3, [pc, #264]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4b41      	ldr	r3, [pc, #260]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004592:	4949      	ldr	r1, [pc, #292]	@ (80046b8 <HAL_RCC_OscConfig+0x34c>)
 8004594:	400a      	ands	r2, r1
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fe faec 	bl	8002b74 <HAL_GetTick>
 800459c:	0003      	movs	r3, r0
 800459e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a2:	f7fe fae7 	bl	8002b74 <HAL_GetTick>
 80045a6:	0002      	movs	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e1e3      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045b4:	4b38      	ldr	r3, [pc, #224]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	2380      	movs	r3, #128	@ 0x80
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4013      	ands	r3, r2
 80045be:	d1f0      	bne.n	80045a2 <HAL_RCC_OscConfig+0x236>
 80045c0:	e000      	b.n	80045c4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045c2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2208      	movs	r2, #8
 80045ca:	4013      	ands	r3, r2
 80045cc:	d047      	beq.n	800465e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80045ce:	4b32      	ldr	r3, [pc, #200]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2238      	movs	r2, #56	@ 0x38
 80045d4:	4013      	ands	r3, r2
 80045d6:	2b18      	cmp	r3, #24
 80045d8:	d10a      	bne.n	80045f0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80045da:	4b2f      	ldr	r3, [pc, #188]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 80045dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045de:	2202      	movs	r2, #2
 80045e0:	4013      	ands	r3, r2
 80045e2:	d03c      	beq.n	800465e <HAL_RCC_OscConfig+0x2f2>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d138      	bne.n	800465e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e1c5      	b.n	800497c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d019      	beq.n	800462c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80045f8:	4b27      	ldr	r3, [pc, #156]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 80045fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80045fc:	4b26      	ldr	r3, [pc, #152]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 80045fe:	2101      	movs	r1, #1
 8004600:	430a      	orrs	r2, r1
 8004602:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7fe fab6 	bl	8002b74 <HAL_GetTick>
 8004608:	0003      	movs	r3, r0
 800460a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800460e:	f7fe fab1 	bl	8002b74 <HAL_GetTick>
 8004612:	0002      	movs	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e1ad      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004620:	4b1d      	ldr	r3, [pc, #116]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004624:	2202      	movs	r2, #2
 8004626:	4013      	ands	r3, r2
 8004628:	d0f1      	beq.n	800460e <HAL_RCC_OscConfig+0x2a2>
 800462a:	e018      	b.n	800465e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800462c:	4b1a      	ldr	r3, [pc, #104]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 800462e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004630:	4b19      	ldr	r3, [pc, #100]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004632:	2101      	movs	r1, #1
 8004634:	438a      	bics	r2, r1
 8004636:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fe fa9c 	bl	8002b74 <HAL_GetTick>
 800463c:	0003      	movs	r3, r0
 800463e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004642:	f7fe fa97 	bl	8002b74 <HAL_GetTick>
 8004646:	0002      	movs	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e193      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004654:	4b10      	ldr	r3, [pc, #64]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004658:	2202      	movs	r2, #2
 800465a:	4013      	ands	r3, r2
 800465c:	d1f1      	bne.n	8004642 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2204      	movs	r2, #4
 8004664:	4013      	ands	r3, r2
 8004666:	d100      	bne.n	800466a <HAL_RCC_OscConfig+0x2fe>
 8004668:	e0c6      	b.n	80047f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800466a:	231f      	movs	r3, #31
 800466c:	18fb      	adds	r3, r7, r3
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004672:	4b09      	ldr	r3, [pc, #36]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2238      	movs	r2, #56	@ 0x38
 8004678:	4013      	ands	r3, r2
 800467a:	2b20      	cmp	r3, #32
 800467c:	d11e      	bne.n	80046bc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800467e:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <HAL_RCC_OscConfig+0x32c>)
 8004680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004682:	2202      	movs	r2, #2
 8004684:	4013      	ands	r3, r2
 8004686:	d100      	bne.n	800468a <HAL_RCC_OscConfig+0x31e>
 8004688:	e0b6      	b.n	80047f8 <HAL_RCC_OscConfig+0x48c>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d000      	beq.n	8004694 <HAL_RCC_OscConfig+0x328>
 8004692:	e0b1      	b.n	80047f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e171      	b.n	800497c <HAL_RCC_OscConfig+0x610>
 8004698:	40021000 	.word	0x40021000
 800469c:	fffeffff 	.word	0xfffeffff
 80046a0:	fffbffff 	.word	0xfffbffff
 80046a4:	ffff80ff 	.word	0xffff80ff
 80046a8:	ffffc7ff 	.word	0xffffc7ff
 80046ac:	00f42400 	.word	0x00f42400
 80046b0:	20000070 	.word	0x20000070
 80046b4:	20000074 	.word	0x20000074
 80046b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046bc:	4bb1      	ldr	r3, [pc, #708]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80046be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046c0:	2380      	movs	r3, #128	@ 0x80
 80046c2:	055b      	lsls	r3, r3, #21
 80046c4:	4013      	ands	r3, r2
 80046c6:	d101      	bne.n	80046cc <HAL_RCC_OscConfig+0x360>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_RCC_OscConfig+0x362>
 80046cc:	2300      	movs	r3, #0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d011      	beq.n	80046f6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80046d2:	4bac      	ldr	r3, [pc, #688]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80046d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046d6:	4bab      	ldr	r3, [pc, #684]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80046d8:	2180      	movs	r1, #128	@ 0x80
 80046da:	0549      	lsls	r1, r1, #21
 80046dc:	430a      	orrs	r2, r1
 80046de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80046e0:	4ba8      	ldr	r3, [pc, #672]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80046e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046e4:	2380      	movs	r3, #128	@ 0x80
 80046e6:	055b      	lsls	r3, r3, #21
 80046e8:	4013      	ands	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80046ee:	231f      	movs	r3, #31
 80046f0:	18fb      	adds	r3, r7, r3
 80046f2:	2201      	movs	r2, #1
 80046f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f6:	4ba4      	ldr	r3, [pc, #656]	@ (8004988 <HAL_RCC_OscConfig+0x61c>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	2380      	movs	r3, #128	@ 0x80
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	4013      	ands	r3, r2
 8004700:	d11a      	bne.n	8004738 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004702:	4ba1      	ldr	r3, [pc, #644]	@ (8004988 <HAL_RCC_OscConfig+0x61c>)
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	4ba0      	ldr	r3, [pc, #640]	@ (8004988 <HAL_RCC_OscConfig+0x61c>)
 8004708:	2180      	movs	r1, #128	@ 0x80
 800470a:	0049      	lsls	r1, r1, #1
 800470c:	430a      	orrs	r2, r1
 800470e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004710:	f7fe fa30 	bl	8002b74 <HAL_GetTick>
 8004714:	0003      	movs	r3, r0
 8004716:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471a:	f7fe fa2b 	bl	8002b74 <HAL_GetTick>
 800471e:	0002      	movs	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e127      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800472c:	4b96      	ldr	r3, [pc, #600]	@ (8004988 <HAL_RCC_OscConfig+0x61c>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	2380      	movs	r3, #128	@ 0x80
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	4013      	ands	r3, r2
 8004736:	d0f0      	beq.n	800471a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d106      	bne.n	800474e <HAL_RCC_OscConfig+0x3e2>
 8004740:	4b90      	ldr	r3, [pc, #576]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004742:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004744:	4b8f      	ldr	r3, [pc, #572]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004746:	2101      	movs	r1, #1
 8004748:	430a      	orrs	r2, r1
 800474a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800474c:	e01c      	b.n	8004788 <HAL_RCC_OscConfig+0x41c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b05      	cmp	r3, #5
 8004754:	d10c      	bne.n	8004770 <HAL_RCC_OscConfig+0x404>
 8004756:	4b8b      	ldr	r3, [pc, #556]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004758:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800475a:	4b8a      	ldr	r3, [pc, #552]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 800475c:	2104      	movs	r1, #4
 800475e:	430a      	orrs	r2, r1
 8004760:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004762:	4b88      	ldr	r3, [pc, #544]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004764:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004766:	4b87      	ldr	r3, [pc, #540]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004768:	2101      	movs	r1, #1
 800476a:	430a      	orrs	r2, r1
 800476c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800476e:	e00b      	b.n	8004788 <HAL_RCC_OscConfig+0x41c>
 8004770:	4b84      	ldr	r3, [pc, #528]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004772:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004774:	4b83      	ldr	r3, [pc, #524]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004776:	2101      	movs	r1, #1
 8004778:	438a      	bics	r2, r1
 800477a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800477c:	4b81      	ldr	r3, [pc, #516]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 800477e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004780:	4b80      	ldr	r3, [pc, #512]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004782:	2104      	movs	r1, #4
 8004784:	438a      	bics	r2, r1
 8004786:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d014      	beq.n	80047ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004790:	f7fe f9f0 	bl	8002b74 <HAL_GetTick>
 8004794:	0003      	movs	r3, r0
 8004796:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004798:	e009      	b.n	80047ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479a:	f7fe f9eb 	bl	8002b74 <HAL_GetTick>
 800479e:	0002      	movs	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	4a79      	ldr	r2, [pc, #484]	@ (800498c <HAL_RCC_OscConfig+0x620>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e0e6      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ae:	4b75      	ldr	r3, [pc, #468]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80047b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b2:	2202      	movs	r2, #2
 80047b4:	4013      	ands	r3, r2
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x42e>
 80047b8:	e013      	b.n	80047e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ba:	f7fe f9db 	bl	8002b74 <HAL_GetTick>
 80047be:	0003      	movs	r3, r0
 80047c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047c2:	e009      	b.n	80047d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c4:	f7fe f9d6 	bl	8002b74 <HAL_GetTick>
 80047c8:	0002      	movs	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	4a6f      	ldr	r2, [pc, #444]	@ (800498c <HAL_RCC_OscConfig+0x620>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e0d1      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80047da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047dc:	2202      	movs	r2, #2
 80047de:	4013      	ands	r3, r2
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80047e2:	231f      	movs	r3, #31
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d105      	bne.n	80047f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80047ec:	4b65      	ldr	r3, [pc, #404]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80047ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047f0:	4b64      	ldr	r3, [pc, #400]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80047f2:	4967      	ldr	r1, [pc, #412]	@ (8004990 <HAL_RCC_OscConfig+0x624>)
 80047f4:	400a      	ands	r2, r1
 80047f6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d100      	bne.n	8004802 <HAL_RCC_OscConfig+0x496>
 8004800:	e0bb      	b.n	800497a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004802:	4b60      	ldr	r3, [pc, #384]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2238      	movs	r2, #56	@ 0x38
 8004808:	4013      	ands	r3, r2
 800480a:	2b10      	cmp	r3, #16
 800480c:	d100      	bne.n	8004810 <HAL_RCC_OscConfig+0x4a4>
 800480e:	e07b      	b.n	8004908 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d156      	bne.n	80048c6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004818:	4b5a      	ldr	r3, [pc, #360]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b59      	ldr	r3, [pc, #356]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 800481e:	495d      	ldr	r1, [pc, #372]	@ (8004994 <HAL_RCC_OscConfig+0x628>)
 8004820:	400a      	ands	r2, r1
 8004822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fe f9a6 	bl	8002b74 <HAL_GetTick>
 8004828:	0003      	movs	r3, r0
 800482a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482e:	f7fe f9a1 	bl	8002b74 <HAL_GetTick>
 8004832:	0002      	movs	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e09d      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004840:	4b50      	ldr	r3, [pc, #320]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	2380      	movs	r3, #128	@ 0x80
 8004846:	049b      	lsls	r3, r3, #18
 8004848:	4013      	ands	r3, r2
 800484a:	d1f0      	bne.n	800482e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800484c:	4b4d      	ldr	r3, [pc, #308]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a51      	ldr	r2, [pc, #324]	@ (8004998 <HAL_RCC_OscConfig+0x62c>)
 8004852:	4013      	ands	r3, r2
 8004854:	0019      	movs	r1, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1a      	ldr	r2, [r3, #32]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004878:	431a      	orrs	r2, r3
 800487a:	4b42      	ldr	r3, [pc, #264]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 800487c:	430a      	orrs	r2, r1
 800487e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004880:	4b40      	ldr	r3, [pc, #256]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4b3f      	ldr	r3, [pc, #252]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004886:	2180      	movs	r1, #128	@ 0x80
 8004888:	0449      	lsls	r1, r1, #17
 800488a:	430a      	orrs	r2, r1
 800488c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800488e:	4b3d      	ldr	r3, [pc, #244]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	4b3c      	ldr	r3, [pc, #240]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004894:	2180      	movs	r1, #128	@ 0x80
 8004896:	0549      	lsls	r1, r1, #21
 8004898:	430a      	orrs	r2, r1
 800489a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489c:	f7fe f96a 	bl	8002b74 <HAL_GetTick>
 80048a0:	0003      	movs	r3, r0
 80048a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a6:	f7fe f965 	bl	8002b74 <HAL_GetTick>
 80048aa:	0002      	movs	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e061      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b8:	4b32      	ldr	r3, [pc, #200]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	2380      	movs	r3, #128	@ 0x80
 80048be:	049b      	lsls	r3, r3, #18
 80048c0:	4013      	ands	r3, r2
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x53a>
 80048c4:	e059      	b.n	800497a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80048cc:	4931      	ldr	r1, [pc, #196]	@ (8004994 <HAL_RCC_OscConfig+0x628>)
 80048ce:	400a      	ands	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d2:	f7fe f94f 	bl	8002b74 <HAL_GetTick>
 80048d6:	0003      	movs	r3, r0
 80048d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fe f94a 	bl	8002b74 <HAL_GetTick>
 80048e0:	0002      	movs	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e046      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ee:	4b25      	ldr	r3, [pc, #148]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	2380      	movs	r3, #128	@ 0x80
 80048f4:	049b      	lsls	r3, r3, #18
 80048f6:	4013      	ands	r3, r2
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80048fa:	4b22      	ldr	r3, [pc, #136]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	4b21      	ldr	r3, [pc, #132]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004900:	4926      	ldr	r1, [pc, #152]	@ (800499c <HAL_RCC_OscConfig+0x630>)
 8004902:	400a      	ands	r2, r1
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	e038      	b.n	800497a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e033      	b.n	800497c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004914:	4b1b      	ldr	r3, [pc, #108]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2203      	movs	r2, #3
 800491e:	401a      	ands	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	429a      	cmp	r2, r3
 8004926:	d126      	bne.n	8004976 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2270      	movs	r2, #112	@ 0x70
 800492c:	401a      	ands	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004932:	429a      	cmp	r2, r3
 8004934:	d11f      	bne.n	8004976 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	23fe      	movs	r3, #254	@ 0xfe
 800493a:	01db      	lsls	r3, r3, #7
 800493c:	401a      	ands	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004942:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d116      	bne.n	8004976 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	23f8      	movs	r3, #248	@ 0xf8
 800494c:	039b      	lsls	r3, r3, #14
 800494e:	401a      	ands	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004954:	429a      	cmp	r2, r3
 8004956:	d10e      	bne.n	8004976 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	23e0      	movs	r3, #224	@ 0xe0
 800495c:	051b      	lsls	r3, r3, #20
 800495e:	401a      	ands	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004964:	429a      	cmp	r2, r3
 8004966:	d106      	bne.n	8004976 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	0f5b      	lsrs	r3, r3, #29
 800496c:	075a      	lsls	r2, r3, #29
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d001      	beq.n	800497a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	0018      	movs	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	b008      	add	sp, #32
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40021000 	.word	0x40021000
 8004988:	40007000 	.word	0x40007000
 800498c:	00001388 	.word	0x00001388
 8004990:	efffffff 	.word	0xefffffff
 8004994:	feffffff 	.word	0xfeffffff
 8004998:	11c1808c 	.word	0x11c1808c
 800499c:	eefefffc 	.word	0xeefefffc

080049a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0e9      	b.n	8004b88 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049b4:	4b76      	ldr	r3, [pc, #472]	@ (8004b90 <HAL_RCC_ClockConfig+0x1f0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2207      	movs	r2, #7
 80049ba:	4013      	ands	r3, r2
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d91e      	bls.n	8004a00 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c2:	4b73      	ldr	r3, [pc, #460]	@ (8004b90 <HAL_RCC_ClockConfig+0x1f0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2207      	movs	r2, #7
 80049c8:	4393      	bics	r3, r2
 80049ca:	0019      	movs	r1, r3
 80049cc:	4b70      	ldr	r3, [pc, #448]	@ (8004b90 <HAL_RCC_ClockConfig+0x1f0>)
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049d4:	f7fe f8ce 	bl	8002b74 <HAL_GetTick>
 80049d8:	0003      	movs	r3, r0
 80049da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049dc:	e009      	b.n	80049f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049de:	f7fe f8c9 	bl	8002b74 <HAL_GetTick>
 80049e2:	0002      	movs	r2, r0
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	4a6a      	ldr	r2, [pc, #424]	@ (8004b94 <HAL_RCC_ClockConfig+0x1f4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e0ca      	b.n	8004b88 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049f2:	4b67      	ldr	r3, [pc, #412]	@ (8004b90 <HAL_RCC_ClockConfig+0x1f0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2207      	movs	r2, #7
 80049f8:	4013      	ands	r3, r2
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d1ee      	bne.n	80049de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2202      	movs	r2, #2
 8004a06:	4013      	ands	r3, r2
 8004a08:	d015      	beq.n	8004a36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2204      	movs	r2, #4
 8004a10:	4013      	ands	r3, r2
 8004a12:	d006      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004a14:	4b60      	ldr	r3, [pc, #384]	@ (8004b98 <HAL_RCC_ClockConfig+0x1f8>)
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	4b5f      	ldr	r3, [pc, #380]	@ (8004b98 <HAL_RCC_ClockConfig+0x1f8>)
 8004a1a:	21e0      	movs	r1, #224	@ 0xe0
 8004a1c:	01c9      	lsls	r1, r1, #7
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a22:	4b5d      	ldr	r3, [pc, #372]	@ (8004b98 <HAL_RCC_ClockConfig+0x1f8>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	4a5d      	ldr	r2, [pc, #372]	@ (8004b9c <HAL_RCC_ClockConfig+0x1fc>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	0019      	movs	r1, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	4b59      	ldr	r3, [pc, #356]	@ (8004b98 <HAL_RCC_ClockConfig+0x1f8>)
 8004a32:	430a      	orrs	r2, r1
 8004a34:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d057      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d107      	bne.n	8004a58 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a48:	4b53      	ldr	r3, [pc, #332]	@ (8004b98 <HAL_RCC_ClockConfig+0x1f8>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	2380      	movs	r3, #128	@ 0x80
 8004a4e:	029b      	lsls	r3, r3, #10
 8004a50:	4013      	ands	r3, r2
 8004a52:	d12b      	bne.n	8004aac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e097      	b.n	8004b88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d107      	bne.n	8004a70 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a60:	4b4d      	ldr	r3, [pc, #308]	@ (8004b98 <HAL_RCC_ClockConfig+0x1f8>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	2380      	movs	r3, #128	@ 0x80
 8004a66:	049b      	lsls	r3, r3, #18
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d11f      	bne.n	8004aac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e08b      	b.n	8004b88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d107      	bne.n	8004a88 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a78:	4b47      	ldr	r3, [pc, #284]	@ (8004b98 <HAL_RCC_ClockConfig+0x1f8>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	2380      	movs	r3, #128	@ 0x80
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4013      	ands	r3, r2
 8004a82:	d113      	bne.n	8004aac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e07f      	b.n	8004b88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d106      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a90:	4b41      	ldr	r3, [pc, #260]	@ (8004b98 <HAL_RCC_ClockConfig+0x1f8>)
 8004a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a94:	2202      	movs	r2, #2
 8004a96:	4013      	ands	r3, r2
 8004a98:	d108      	bne.n	8004aac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e074      	b.n	8004b88 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b98 <HAL_RCC_ClockConfig+0x1f8>)
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d101      	bne.n	8004aac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e06d      	b.n	8004b88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004aac:	4b3a      	ldr	r3, [pc, #232]	@ (8004b98 <HAL_RCC_ClockConfig+0x1f8>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2207      	movs	r2, #7
 8004ab2:	4393      	bics	r3, r2
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	4b37      	ldr	r3, [pc, #220]	@ (8004b98 <HAL_RCC_ClockConfig+0x1f8>)
 8004abc:	430a      	orrs	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac0:	f7fe f858 	bl	8002b74 <HAL_GetTick>
 8004ac4:	0003      	movs	r3, r0
 8004ac6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac8:	e009      	b.n	8004ade <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aca:	f7fe f853 	bl	8002b74 <HAL_GetTick>
 8004ace:	0002      	movs	r2, r0
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	4a2f      	ldr	r2, [pc, #188]	@ (8004b94 <HAL_RCC_ClockConfig+0x1f4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e054      	b.n	8004b88 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ade:	4b2e      	ldr	r3, [pc, #184]	@ (8004b98 <HAL_RCC_ClockConfig+0x1f8>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2238      	movs	r2, #56	@ 0x38
 8004ae4:	401a      	ands	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d1ec      	bne.n	8004aca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004af0:	4b27      	ldr	r3, [pc, #156]	@ (8004b90 <HAL_RCC_ClockConfig+0x1f0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2207      	movs	r2, #7
 8004af6:	4013      	ands	r3, r2
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d21e      	bcs.n	8004b3c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afe:	4b24      	ldr	r3, [pc, #144]	@ (8004b90 <HAL_RCC_ClockConfig+0x1f0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2207      	movs	r2, #7
 8004b04:	4393      	bics	r3, r2
 8004b06:	0019      	movs	r1, r3
 8004b08:	4b21      	ldr	r3, [pc, #132]	@ (8004b90 <HAL_RCC_ClockConfig+0x1f0>)
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b10:	f7fe f830 	bl	8002b74 <HAL_GetTick>
 8004b14:	0003      	movs	r3, r0
 8004b16:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b18:	e009      	b.n	8004b2e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b1a:	f7fe f82b 	bl	8002b74 <HAL_GetTick>
 8004b1e:	0002      	movs	r2, r0
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	4a1b      	ldr	r2, [pc, #108]	@ (8004b94 <HAL_RCC_ClockConfig+0x1f4>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e02c      	b.n	8004b88 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b2e:	4b18      	ldr	r3, [pc, #96]	@ (8004b90 <HAL_RCC_ClockConfig+0x1f0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2207      	movs	r2, #7
 8004b34:	4013      	ands	r3, r2
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d1ee      	bne.n	8004b1a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2204      	movs	r2, #4
 8004b42:	4013      	ands	r3, r2
 8004b44:	d009      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004b46:	4b14      	ldr	r3, [pc, #80]	@ (8004b98 <HAL_RCC_ClockConfig+0x1f8>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	4a15      	ldr	r2, [pc, #84]	@ (8004ba0 <HAL_RCC_ClockConfig+0x200>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	4b10      	ldr	r3, [pc, #64]	@ (8004b98 <HAL_RCC_ClockConfig+0x1f8>)
 8004b56:	430a      	orrs	r2, r1
 8004b58:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004b5a:	f000 f829 	bl	8004bb0 <HAL_RCC_GetSysClockFreq>
 8004b5e:	0001      	movs	r1, r0
 8004b60:	4b0d      	ldr	r3, [pc, #52]	@ (8004b98 <HAL_RCC_ClockConfig+0x1f8>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	0a1b      	lsrs	r3, r3, #8
 8004b66:	220f      	movs	r2, #15
 8004b68:	401a      	ands	r2, r3
 8004b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba4 <HAL_RCC_ClockConfig+0x204>)
 8004b6c:	0092      	lsls	r2, r2, #2
 8004b6e:	58d3      	ldr	r3, [r2, r3]
 8004b70:	221f      	movs	r2, #31
 8004b72:	4013      	ands	r3, r2
 8004b74:	000a      	movs	r2, r1
 8004b76:	40da      	lsrs	r2, r3
 8004b78:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba8 <HAL_RCC_ClockConfig+0x208>)
 8004b7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004bac <HAL_RCC_ClockConfig+0x20c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	0018      	movs	r0, r3
 8004b82:	f7fd ff9b 	bl	8002abc <HAL_InitTick>
 8004b86:	0003      	movs	r3, r0
}
 8004b88:	0018      	movs	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b004      	add	sp, #16
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40022000 	.word	0x40022000
 8004b94:	00001388 	.word	0x00001388
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	fffff0ff 	.word	0xfffff0ff
 8004ba0:	ffff8fff 	.word	0xffff8fff
 8004ba4:	08007530 	.word	0x08007530
 8004ba8:	20000070 	.word	0x20000070
 8004bac:	20000074 	.word	0x20000074

08004bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2238      	movs	r2, #56	@ 0x38
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d10f      	bne.n	8004be0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004bc0:	4b39      	ldr	r3, [pc, #228]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	0adb      	lsrs	r3, r3, #11
 8004bc6:	2207      	movs	r2, #7
 8004bc8:	4013      	ands	r3, r2
 8004bca:	2201      	movs	r2, #1
 8004bcc:	409a      	lsls	r2, r3
 8004bce:	0013      	movs	r3, r2
 8004bd0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004bd2:	6839      	ldr	r1, [r7, #0]
 8004bd4:	4835      	ldr	r0, [pc, #212]	@ (8004cac <HAL_RCC_GetSysClockFreq+0xfc>)
 8004bd6:	f7fb fa95 	bl	8000104 <__udivsi3>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	e05d      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004be0:	4b31      	ldr	r3, [pc, #196]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2238      	movs	r2, #56	@ 0x38
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d102      	bne.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bec:	4b2f      	ldr	r3, [pc, #188]	@ (8004cac <HAL_RCC_GetSysClockFreq+0xfc>)
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	e054      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2238      	movs	r2, #56	@ 0x38
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b10      	cmp	r3, #16
 8004bfc:	d138      	bne.n	8004c70 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2203      	movs	r2, #3
 8004c04:	4013      	ands	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c08:	4b27      	ldr	r3, [pc, #156]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	091b      	lsrs	r3, r3, #4
 8004c0e:	2207      	movs	r2, #7
 8004c10:	4013      	ands	r3, r2
 8004c12:	3301      	adds	r3, #1
 8004c14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d10d      	bne.n	8004c38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	4823      	ldr	r0, [pc, #140]	@ (8004cac <HAL_RCC_GetSysClockFreq+0xfc>)
 8004c20:	f7fb fa70 	bl	8000104 <__udivsi3>
 8004c24:	0003      	movs	r3, r0
 8004c26:	0019      	movs	r1, r3
 8004c28:	4b1f      	ldr	r3, [pc, #124]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	0a1b      	lsrs	r3, r3, #8
 8004c2e:	227f      	movs	r2, #127	@ 0x7f
 8004c30:	4013      	ands	r3, r2
 8004c32:	434b      	muls	r3, r1
 8004c34:	617b      	str	r3, [r7, #20]
        break;
 8004c36:	e00d      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	481c      	ldr	r0, [pc, #112]	@ (8004cac <HAL_RCC_GetSysClockFreq+0xfc>)
 8004c3c:	f7fb fa62 	bl	8000104 <__udivsi3>
 8004c40:	0003      	movs	r3, r0
 8004c42:	0019      	movs	r1, r3
 8004c44:	4b18      	ldr	r3, [pc, #96]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	0a1b      	lsrs	r3, r3, #8
 8004c4a:	227f      	movs	r2, #127	@ 0x7f
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	434b      	muls	r3, r1
 8004c50:	617b      	str	r3, [r7, #20]
        break;
 8004c52:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004c54:	4b14      	ldr	r3, [pc, #80]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	0f5b      	lsrs	r3, r3, #29
 8004c5a:	2207      	movs	r2, #7
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	3301      	adds	r3, #1
 8004c60:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	6978      	ldr	r0, [r7, #20]
 8004c66:	f7fb fa4d 	bl	8000104 <__udivsi3>
 8004c6a:	0003      	movs	r3, r0
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	e015      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004c70:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2238      	movs	r2, #56	@ 0x38
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d103      	bne.n	8004c84 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004c7c:	2380      	movs	r3, #128	@ 0x80
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	e00b      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c84:	4b08      	ldr	r3, [pc, #32]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2238      	movs	r2, #56	@ 0x38
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b18      	cmp	r3, #24
 8004c8e:	d103      	bne.n	8004c98 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004c90:	23fa      	movs	r3, #250	@ 0xfa
 8004c92:	01db      	lsls	r3, r3, #7
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	e001      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c9c:	693b      	ldr	r3, [r7, #16]
}
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b006      	add	sp, #24
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	46c0      	nop			@ (mov r8, r8)
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	00f42400 	.word	0x00f42400

08004cb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cb4:	4b02      	ldr	r3, [pc, #8]	@ (8004cc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
}
 8004cb8:	0018      	movs	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	46c0      	nop			@ (mov r8, r8)
 8004cc0:	20000070 	.word	0x20000070

08004cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc4:	b5b0      	push	{r4, r5, r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004cc8:	f7ff fff2 	bl	8004cb0 <HAL_RCC_GetHCLKFreq>
 8004ccc:	0004      	movs	r4, r0
 8004cce:	f7ff fb41 	bl	8004354 <LL_RCC_GetAPB1Prescaler>
 8004cd2:	0003      	movs	r3, r0
 8004cd4:	0b1a      	lsrs	r2, r3, #12
 8004cd6:	4b05      	ldr	r3, [pc, #20]	@ (8004cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cd8:	0092      	lsls	r2, r2, #2
 8004cda:	58d3      	ldr	r3, [r2, r3]
 8004cdc:	221f      	movs	r2, #31
 8004cde:	4013      	ands	r3, r2
 8004ce0:	40dc      	lsrs	r4, r3
 8004ce2:	0023      	movs	r3, r4
}
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8004cea:	46c0      	nop			@ (mov r8, r8)
 8004cec:	08007570 	.word	0x08007570

08004cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004cf8:	2313      	movs	r3, #19
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d00:	2312      	movs	r3, #18
 8004d02:	18fb      	adds	r3, r7, r3
 8004d04:	2200      	movs	r2, #0
 8004d06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	2380      	movs	r3, #128	@ 0x80
 8004d0e:	029b      	lsls	r3, r3, #10
 8004d10:	4013      	ands	r3, r2
 8004d12:	d100      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004d14:	e0a3      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d16:	2011      	movs	r0, #17
 8004d18:	183b      	adds	r3, r7, r0
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d1e:	4ba5      	ldr	r3, [pc, #660]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d22:	2380      	movs	r3, #128	@ 0x80
 8004d24:	055b      	lsls	r3, r3, #21
 8004d26:	4013      	ands	r3, r2
 8004d28:	d110      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2a:	4ba2      	ldr	r3, [pc, #648]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d2e:	4ba1      	ldr	r3, [pc, #644]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d30:	2180      	movs	r1, #128	@ 0x80
 8004d32:	0549      	lsls	r1, r1, #21
 8004d34:	430a      	orrs	r2, r1
 8004d36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004d38:	4b9e      	ldr	r3, [pc, #632]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d3c:	2380      	movs	r3, #128	@ 0x80
 8004d3e:	055b      	lsls	r3, r3, #21
 8004d40:	4013      	ands	r3, r2
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d46:	183b      	adds	r3, r7, r0
 8004d48:	2201      	movs	r2, #1
 8004d4a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d4c:	4b9a      	ldr	r3, [pc, #616]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	4b99      	ldr	r3, [pc, #612]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004d52:	2180      	movs	r1, #128	@ 0x80
 8004d54:	0049      	lsls	r1, r1, #1
 8004d56:	430a      	orrs	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d5a:	f7fd ff0b 	bl	8002b74 <HAL_GetTick>
 8004d5e:	0003      	movs	r3, r0
 8004d60:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d62:	e00b      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d64:	f7fd ff06 	bl	8002b74 <HAL_GetTick>
 8004d68:	0002      	movs	r2, r0
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d904      	bls.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004d72:	2313      	movs	r3, #19
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	2203      	movs	r2, #3
 8004d78:	701a      	strb	r2, [r3, #0]
        break;
 8004d7a:	e005      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d7c:	4b8e      	ldr	r3, [pc, #568]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	2380      	movs	r3, #128	@ 0x80
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	4013      	ands	r3, r2
 8004d86:	d0ed      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004d88:	2313      	movs	r3, #19
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d154      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d92:	4b88      	ldr	r3, [pc, #544]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d96:	23c0      	movs	r3, #192	@ 0xc0
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d019      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d014      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004dae:	4b81      	ldr	r3, [pc, #516]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db2:	4a82      	ldr	r2, [pc, #520]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004db8:	4b7e      	ldr	r3, [pc, #504]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dbc:	4b7d      	ldr	r3, [pc, #500]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dbe:	2180      	movs	r1, #128	@ 0x80
 8004dc0:	0249      	lsls	r1, r1, #9
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dc6:	4b7b      	ldr	r3, [pc, #492]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dc8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dca:	4b7a      	ldr	r3, [pc, #488]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dcc:	497c      	ldr	r1, [pc, #496]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004dce:	400a      	ands	r2, r1
 8004dd0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dd2:	4b78      	ldr	r3, [pc, #480]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d016      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fd fec8 	bl	8002b74 <HAL_GetTick>
 8004de4:	0003      	movs	r3, r0
 8004de6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de8:	e00c      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dea:	f7fd fec3 	bl	8002b74 <HAL_GetTick>
 8004dee:	0002      	movs	r2, r0
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	4a73      	ldr	r2, [pc, #460]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d904      	bls.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004dfa:	2313      	movs	r3, #19
 8004dfc:	18fb      	adds	r3, r7, r3
 8004dfe:	2203      	movs	r2, #3
 8004e00:	701a      	strb	r2, [r3, #0]
            break;
 8004e02:	e004      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e04:	4b6b      	ldr	r3, [pc, #428]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e08:	2202      	movs	r2, #2
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d0ed      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004e0e:	2313      	movs	r3, #19
 8004e10:	18fb      	adds	r3, r7, r3
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10a      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e18:	4b66      	ldr	r3, [pc, #408]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e1c:	4a67      	ldr	r2, [pc, #412]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	0019      	movs	r1, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e26:	4b63      	ldr	r3, [pc, #396]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e2c:	e00c      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e2e:	2312      	movs	r3, #18
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	2213      	movs	r2, #19
 8004e34:	18ba      	adds	r2, r7, r2
 8004e36:	7812      	ldrb	r2, [r2, #0]
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	e005      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3c:	2312      	movs	r3, #18
 8004e3e:	18fb      	adds	r3, r7, r3
 8004e40:	2213      	movs	r2, #19
 8004e42:	18ba      	adds	r2, r7, r2
 8004e44:	7812      	ldrb	r2, [r2, #0]
 8004e46:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e48:	2311      	movs	r3, #17
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d105      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e52:	4b58      	ldr	r3, [pc, #352]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e56:	4b57      	ldr	r3, [pc, #348]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e58:	495b      	ldr	r1, [pc, #364]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004e5a:	400a      	ands	r2, r1
 8004e5c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2201      	movs	r2, #1
 8004e64:	4013      	ands	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e68:	4b52      	ldr	r3, [pc, #328]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	4393      	bics	r3, r2
 8004e70:	0019      	movs	r1, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	4b4f      	ldr	r3, [pc, #316]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2210      	movs	r2, #16
 8004e82:	4013      	ands	r3, r2
 8004e84:	d009      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e86:	4b4b      	ldr	r3, [pc, #300]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8a:	4a50      	ldr	r2, [pc, #320]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	4b47      	ldr	r3, [pc, #284]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e96:	430a      	orrs	r2, r1
 8004e98:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	2380      	movs	r3, #128	@ 0x80
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d009      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ea6:	4b43      	ldr	r3, [pc, #268]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eaa:	4a49      	ldr	r2, [pc, #292]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	0019      	movs	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695a      	ldr	r2, [r3, #20]
 8004eb4:	4b3f      	ldr	r3, [pc, #252]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	2380      	movs	r3, #128	@ 0x80
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eca:	4a42      	ldr	r2, [pc, #264]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	0019      	movs	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699a      	ldr	r2, [r3, #24]
 8004ed4:	4b37      	ldr	r3, [pc, #220]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d009      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ee4:	4b33      	ldr	r3, [pc, #204]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee8:	4a3b      	ldr	r2, [pc, #236]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	0019      	movs	r1, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	4b30      	ldr	r3, [pc, #192]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	2380      	movs	r3, #128	@ 0x80
 8004efe:	01db      	lsls	r3, r3, #7
 8004f00:	4013      	ands	r3, r2
 8004f02:	d015      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f04:	4b2b      	ldr	r3, [pc, #172]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	0899      	lsrs	r1, r3, #2
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69da      	ldr	r2, [r3, #28]
 8004f10:	4b28      	ldr	r3, [pc, #160]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f12:	430a      	orrs	r2, r1
 8004f14:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69da      	ldr	r2, [r3, #28]
 8004f1a:	2380      	movs	r3, #128	@ 0x80
 8004f1c:	05db      	lsls	r3, r3, #23
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d106      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f22:	4b24      	ldr	r3, [pc, #144]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	4b23      	ldr	r3, [pc, #140]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f28:	2180      	movs	r1, #128	@ 0x80
 8004f2a:	0249      	lsls	r1, r1, #9
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	2380      	movs	r3, #128	@ 0x80
 8004f36:	039b      	lsls	r3, r3, #14
 8004f38:	4013      	ands	r3, r2
 8004f3a:	d016      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f40:	4a26      	ldr	r2, [pc, #152]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	0019      	movs	r1, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1a      	ldr	r2, [r3, #32]
 8004f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1a      	ldr	r2, [r3, #32]
 8004f54:	2380      	movs	r3, #128	@ 0x80
 8004f56:	03db      	lsls	r3, r3, #15
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d106      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f5c:	4b15      	ldr	r3, [pc, #84]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	4b14      	ldr	r3, [pc, #80]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f62:	2180      	movs	r1, #128	@ 0x80
 8004f64:	0449      	lsls	r1, r1, #17
 8004f66:	430a      	orrs	r2, r1
 8004f68:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	2380      	movs	r3, #128	@ 0x80
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	4013      	ands	r3, r2
 8004f74:	d016      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004f76:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f7a:	4a19      	ldr	r2, [pc, #100]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	0019      	movs	r1, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f86:	430a      	orrs	r2, r1
 8004f88:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	2380      	movs	r3, #128	@ 0x80
 8004f90:	01db      	lsls	r3, r3, #7
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d106      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f96:	4b07      	ldr	r3, [pc, #28]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	4b06      	ldr	r3, [pc, #24]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f9c:	2180      	movs	r1, #128	@ 0x80
 8004f9e:	0249      	lsls	r1, r1, #9
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004fa4:	2312      	movs	r3, #18
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	781b      	ldrb	r3, [r3, #0]
}
 8004faa:	0018      	movs	r0, r3
 8004fac:	46bd      	mov	sp, r7
 8004fae:	b006      	add	sp, #24
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	46c0      	nop			@ (mov r8, r8)
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40007000 	.word	0x40007000
 8004fbc:	fffffcff 	.word	0xfffffcff
 8004fc0:	fffeffff 	.word	0xfffeffff
 8004fc4:	00001388 	.word	0x00001388
 8004fc8:	efffffff 	.word	0xefffffff
 8004fcc:	fffff3ff 	.word	0xfffff3ff
 8004fd0:	fff3ffff 	.word	0xfff3ffff
 8004fd4:	ffcfffff 	.word	0xffcfffff
 8004fd8:	ffffcfff 	.word	0xffffcfff
 8004fdc:	ffbfffff 	.word	0xffbfffff
 8004fe0:	ffff3fff 	.word	0xffff3fff

08004fe4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	2380      	movs	r3, #128	@ 0x80
 8004ff4:	029b      	lsls	r3, r3, #10
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d136      	bne.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004ffa:	4bcd      	ldr	r3, [pc, #820]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004ffc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ffe:	23c0      	movs	r3, #192	@ 0xc0
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4013      	ands	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005006:	4bca      	ldr	r3, [pc, #808]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800500a:	2202      	movs	r2, #2
 800500c:	4013      	ands	r3, r2
 800500e:	2b02      	cmp	r3, #2
 8005010:	d108      	bne.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	2380      	movs	r3, #128	@ 0x80
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	429a      	cmp	r2, r3
 800501a:	d103      	bne.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 800501c:	2380      	movs	r3, #128	@ 0x80
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	e26b      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005024:	4bc2      	ldr	r3, [pc, #776]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005028:	2202      	movs	r2, #2
 800502a:	4013      	ands	r3, r2
 800502c:	2b02      	cmp	r3, #2
 800502e:	d108      	bne.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	2380      	movs	r3, #128	@ 0x80
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	429a      	cmp	r2, r3
 8005038:	d103      	bne.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 800503a:	23fa      	movs	r3, #250	@ 0xfa
 800503c:	01db      	lsls	r3, r3, #7
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	e25c      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005042:	4bbb      	ldr	r3, [pc, #748]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	2380      	movs	r3, #128	@ 0x80
 8005048:	029b      	lsls	r3, r3, #10
 800504a:	401a      	ands	r2, r3
 800504c:	2380      	movs	r3, #128	@ 0x80
 800504e:	029b      	lsls	r3, r3, #10
 8005050:	429a      	cmp	r2, r3
 8005052:	d000      	beq.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8005054:	e252      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	23c0      	movs	r3, #192	@ 0xc0
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	429a      	cmp	r2, r3
 800505e:	d000      	beq.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8005060:	e24c      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 8005062:	4bb4      	ldr	r3, [pc, #720]	@ (8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	e249      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8005068:	4bb1      	ldr	r3, [pc, #708]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	2203      	movs	r2, #3
 800506e:	4013      	ands	r3, r2
 8005070:	2b02      	cmp	r3, #2
 8005072:	d102      	bne.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8005074:	4bb0      	ldr	r3, [pc, #704]	@ (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	e00a      	b.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 800507a:	4bad      	ldr	r3, [pc, #692]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	2203      	movs	r2, #3
 8005080:	4013      	ands	r3, r2
 8005082:	2b03      	cmp	r3, #3
 8005084:	d102      	bne.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8005086:	4bac      	ldr	r3, [pc, #688]	@ (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	e001      	b.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005090:	4ba7      	ldr	r3, [pc, #668]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	091b      	lsrs	r3, r3, #4
 8005096:	2207      	movs	r2, #7
 8005098:	4013      	ands	r3, r2
 800509a:	3301      	adds	r3, #1
 800509c:	0019      	movs	r1, r3
 800509e:	6938      	ldr	r0, [r7, #16]
 80050a0:	f7fb f830 	bl	8000104 <__udivsi3>
 80050a4:	0003      	movs	r3, r0
 80050a6:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	2380      	movs	r3, #128	@ 0x80
 80050ac:	039b      	lsls	r3, r3, #14
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d100      	bne.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 80050b2:	e1e3      	b.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	2380      	movs	r3, #128	@ 0x80
 80050b8:	039b      	lsls	r3, r3, #14
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d900      	bls.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80050be:	e20c      	b.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	2380      	movs	r3, #128	@ 0x80
 80050c4:	01db      	lsls	r3, r3, #7
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d100      	bne.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80050ca:	e0a5      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	2380      	movs	r3, #128	@ 0x80
 80050d0:	01db      	lsls	r3, r3, #7
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d900      	bls.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80050d6:	e200      	b.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	2380      	movs	r3, #128	@ 0x80
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	429a      	cmp	r2, r3
 80050e0:	d100      	bne.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80050e2:	e0fc      	b.n	80052de <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	2380      	movs	r3, #128	@ 0x80
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d900      	bls.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80050ee:	e1f4      	b.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	2380      	movs	r3, #128	@ 0x80
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d100      	bne.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 80050fa:	e181      	b.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	2380      	movs	r3, #128	@ 0x80
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	429a      	cmp	r2, r3
 8005104:	d900      	bls.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005106:	e1e8      	b.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	2380      	movs	r3, #128	@ 0x80
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	429a      	cmp	r2, r3
 8005110:	d100      	bne.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8005112:	e135      	b.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	2380      	movs	r3, #128	@ 0x80
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	429a      	cmp	r2, r3
 800511c:	d900      	bls.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800511e:	e1dc      	b.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b20      	cmp	r3, #32
 8005124:	d100      	bne.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8005126:	e0af      	b.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b20      	cmp	r3, #32
 800512c:	d900      	bls.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800512e:	e1d4      	b.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d003      	beq.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b10      	cmp	r3, #16
 800513a:	d033      	beq.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 800513c:	e1cd      	b.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800513e:	4b7c      	ldr	r3, [pc, #496]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005142:	2203      	movs	r2, #3
 8005144:	4013      	ands	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d104      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 800514e:	f7ff fdb9 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 8005152:	0003      	movs	r3, r0
 8005154:	617b      	str	r3, [r7, #20]
        break;
 8005156:	e1c2      	b.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d104      	bne.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 800515e:	f7ff fd27 	bl	8004bb0 <HAL_RCC_GetSysClockFreq>
 8005162:	0003      	movs	r3, r0
 8005164:	617b      	str	r3, [r7, #20]
        break;
 8005166:	e1ba      	b.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005168:	4b71      	ldr	r3, [pc, #452]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	2380      	movs	r3, #128	@ 0x80
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	401a      	ands	r2, r3
 8005172:	2380      	movs	r3, #128	@ 0x80
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	429a      	cmp	r2, r3
 8005178:	d105      	bne.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d102      	bne.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 8005180:	4b6d      	ldr	r3, [pc, #436]	@ (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005182:	617b      	str	r3, [r7, #20]
        break;
 8005184:	e1ab      	b.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005186:	4b6a      	ldr	r3, [pc, #424]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800518a:	2202      	movs	r2, #2
 800518c:	4013      	ands	r3, r2
 800518e:	2b02      	cmp	r3, #2
 8005190:	d000      	beq.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8005192:	e1a4      	b.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b03      	cmp	r3, #3
 8005198:	d000      	beq.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 800519a:	e1a0      	b.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 800519c:	2380      	movs	r3, #128	@ 0x80
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	617b      	str	r3, [r7, #20]
        break;
 80051a2:	e19c      	b.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80051a4:	4b62      	ldr	r3, [pc, #392]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80051a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051a8:	23c0      	movs	r3, #192	@ 0xc0
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	4013      	ands	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80051b6:	f7ff fd85 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 80051ba:	0003      	movs	r3, r0
 80051bc:	617b      	str	r3, [r7, #20]
        break;
 80051be:	e190      	b.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	2380      	movs	r3, #128	@ 0x80
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d104      	bne.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80051ca:	f7ff fcf1 	bl	8004bb0 <HAL_RCC_GetSysClockFreq>
 80051ce:	0003      	movs	r3, r0
 80051d0:	617b      	str	r3, [r7, #20]
        break;
 80051d2:	e186      	b.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80051d4:	4b56      	ldr	r3, [pc, #344]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	2380      	movs	r3, #128	@ 0x80
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	401a      	ands	r2, r3
 80051de:	2380      	movs	r3, #128	@ 0x80
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d107      	bne.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	2380      	movs	r3, #128	@ 0x80
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d102      	bne.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 80051f0:	4b51      	ldr	r3, [pc, #324]	@ (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80051f2:	617b      	str	r3, [r7, #20]
        break;
 80051f4:	e175      	b.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80051f6:	4b4e      	ldr	r3, [pc, #312]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80051f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051fa:	2202      	movs	r2, #2
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d000      	beq.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 8005202:	e16e      	b.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	23c0      	movs	r3, #192	@ 0xc0
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	429a      	cmp	r2, r3
 800520c:	d000      	beq.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800520e:	e168      	b.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 8005210:	2380      	movs	r3, #128	@ 0x80
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	617b      	str	r3, [r7, #20]
        break;
 8005216:	e164      	b.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005218:	4b45      	ldr	r3, [pc, #276]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800521a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521c:	0f9b      	lsrs	r3, r3, #30
 800521e:	079b      	lsls	r3, r3, #30
 8005220:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d104      	bne.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005228:	f7ff fcc2 	bl	8004bb0 <HAL_RCC_GetSysClockFreq>
 800522c:	0003      	movs	r3, r0
 800522e:	617b      	str	r3, [r7, #20]
        break;
 8005230:	e159      	b.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	2380      	movs	r3, #128	@ 0x80
 8005236:	061b      	lsls	r3, r3, #24
 8005238:	429a      	cmp	r2, r3
 800523a:	d102      	bne.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 800523c:	4b3e      	ldr	r3, [pc, #248]	@ (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800523e:	617b      	str	r3, [r7, #20]
        break;
 8005240:	e151      	b.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	2380      	movs	r3, #128	@ 0x80
 8005246:	05db      	lsls	r3, r3, #23
 8005248:	429a      	cmp	r2, r3
 800524a:	d000      	beq.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800524c:	e14b      	b.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800524e:	4b38      	ldr	r3, [pc, #224]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	2380      	movs	r3, #128	@ 0x80
 8005254:	025b      	lsls	r3, r3, #9
 8005256:	4013      	ands	r3, r2
 8005258:	d100      	bne.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 800525a:	e144      	b.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800525c:	4b34      	ldr	r3, [pc, #208]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	0a1b      	lsrs	r3, r3, #8
 8005262:	227f      	movs	r2, #127	@ 0x7f
 8005264:	4013      	ands	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	435a      	muls	r2, r3
 800526e:	4b30      	ldr	r3, [pc, #192]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	0c5b      	lsrs	r3, r3, #17
 8005274:	211f      	movs	r1, #31
 8005276:	400b      	ands	r3, r1
 8005278:	3301      	adds	r3, #1
 800527a:	0019      	movs	r1, r3
 800527c:	0010      	movs	r0, r2
 800527e:	f7fa ff41 	bl	8000104 <__udivsi3>
 8005282:	0003      	movs	r3, r0
 8005284:	617b      	str	r3, [r7, #20]
        break;
 8005286:	e12e      	b.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005288:	4b29      	ldr	r3, [pc, #164]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800528a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800528c:	23c0      	movs	r3, #192	@ 0xc0
 800528e:	019b      	lsls	r3, r3, #6
 8005290:	4013      	ands	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d104      	bne.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 800529a:	f7ff fd13 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 800529e:	0003      	movs	r3, r0
 80052a0:	617b      	str	r3, [r7, #20]
        break;
 80052a2:	e122      	b.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	2380      	movs	r3, #128	@ 0x80
 80052a8:	015b      	lsls	r3, r3, #5
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d104      	bne.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 80052ae:	f7ff fc7f 	bl	8004bb0 <HAL_RCC_GetSysClockFreq>
 80052b2:	0003      	movs	r3, r0
 80052b4:	617b      	str	r3, [r7, #20]
        break;
 80052b6:	e118      	b.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80052b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	2380      	movs	r3, #128	@ 0x80
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	401a      	ands	r2, r3
 80052c2:	2380      	movs	r3, #128	@ 0x80
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d000      	beq.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80052ca:	e10e      	b.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	2380      	movs	r3, #128	@ 0x80
 80052d0:	019b      	lsls	r3, r3, #6
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d000      	beq.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80052d6:	e108      	b.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 80052d8:	4b17      	ldr	r3, [pc, #92]	@ (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80052da:	617b      	str	r3, [r7, #20]
        break;
 80052dc:	e105      	b.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 80052de:	4b14      	ldr	r3, [pc, #80]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80052e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052e2:	23c0      	movs	r3, #192	@ 0xc0
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	4013      	ands	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	2380      	movs	r3, #128	@ 0x80
 80052ee:	01db      	lsls	r3, r3, #7
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d123      	bne.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80052f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	2380      	movs	r3, #128	@ 0x80
 80052fa:	025b      	lsls	r3, r3, #9
 80052fc:	4013      	ands	r3, r2
 80052fe:	d100      	bne.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005300:	e0f5      	b.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005302:	4b0b      	ldr	r3, [pc, #44]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	227f      	movs	r2, #127	@ 0x7f
 800530a:	4013      	ands	r3, r2
 800530c:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	435a      	muls	r2, r3
 8005314:	4b06      	ldr	r3, [pc, #24]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	0c5b      	lsrs	r3, r3, #17
 800531a:	211f      	movs	r1, #31
 800531c:	400b      	ands	r3, r1
 800531e:	3301      	adds	r3, #1
 8005320:	0019      	movs	r1, r3
 8005322:	0010      	movs	r0, r2
 8005324:	f7fa feee 	bl	8000104 <__udivsi3>
 8005328:	0003      	movs	r3, r0
 800532a:	617b      	str	r3, [r7, #20]
        break;
 800532c:	e0df      	b.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800532e:	46c0      	nop			@ (mov r8, r8)
 8005330:	40021000 	.word	0x40021000
 8005334:	0007a120 	.word	0x0007a120
 8005338:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d104      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 8005342:	f7ff fc35 	bl	8004bb0 <HAL_RCC_GetSysClockFreq>
 8005346:	0003      	movs	r3, r0
 8005348:	617b      	str	r3, [r7, #20]
        break;
 800534a:	e0d0      	b.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 800534c:	4b6e      	ldr	r3, [pc, #440]	@ (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	2380      	movs	r3, #128	@ 0x80
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	401a      	ands	r2, r3
 8005356:	2380      	movs	r3, #128	@ 0x80
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	429a      	cmp	r2, r3
 800535c:	d107      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	2380      	movs	r3, #128	@ 0x80
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	429a      	cmp	r2, r3
 8005366:	d102      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 8005368:	4b68      	ldr	r3, [pc, #416]	@ (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800536a:	617b      	str	r3, [r7, #20]
        break;
 800536c:	e0bf      	b.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	23c0      	movs	r3, #192	@ 0xc0
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	429a      	cmp	r2, r3
 8005376:	d000      	beq.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005378:	e0b9      	b.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 800537a:	4b65      	ldr	r3, [pc, #404]	@ (8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800537c:	617b      	str	r3, [r7, #20]
        break;
 800537e:	e0b6      	b.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005380:	4b61      	ldr	r3, [pc, #388]	@ (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005382:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005384:	23c0      	movs	r3, #192	@ 0xc0
 8005386:	031b      	lsls	r3, r3, #12
 8005388:	4013      	ands	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005392:	f7ff fc97 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 8005396:	0003      	movs	r3, r0
 8005398:	617b      	str	r3, [r7, #20]
        break;
 800539a:	e0aa      	b.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800539c:	4b5a      	ldr	r3, [pc, #360]	@ (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800539e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053a0:	2202      	movs	r2, #2
 80053a2:	4013      	ands	r3, r2
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d108      	bne.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	2380      	movs	r3, #128	@ 0x80
 80053ac:	02db      	lsls	r3, r3, #11
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d103      	bne.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 80053b2:	23fa      	movs	r3, #250	@ 0xfa
 80053b4:	01db      	lsls	r3, r3, #7
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	e021      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80053ba:	4b53      	ldr	r3, [pc, #332]	@ (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	2380      	movs	r3, #128	@ 0x80
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	401a      	ands	r2, r3
 80053c4:	2380      	movs	r3, #128	@ 0x80
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d107      	bne.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	2380      	movs	r3, #128	@ 0x80
 80053d0:	031b      	lsls	r3, r3, #12
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d102      	bne.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 80053d6:	4b4d      	ldr	r3, [pc, #308]	@ (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	e010      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80053dc:	4b4a      	ldr	r3, [pc, #296]	@ (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80053de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e0:	2202      	movs	r2, #2
 80053e2:	4013      	ands	r3, r2
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d000      	beq.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 80053e8:	e083      	b.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	23c0      	movs	r3, #192	@ 0xc0
 80053ee:	031b      	lsls	r3, r3, #12
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d000      	beq.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 80053f4:	e07d      	b.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 80053f6:	2380      	movs	r3, #128	@ 0x80
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	617b      	str	r3, [r7, #20]
        break;
 80053fc:	e079      	b.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80053fe:	e078      	b.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005400:	4b41      	ldr	r3, [pc, #260]	@ (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005402:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005404:	23c0      	movs	r3, #192	@ 0xc0
 8005406:	039b      	lsls	r3, r3, #14
 8005408:	4013      	ands	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d104      	bne.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005412:	f7ff fc57 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 8005416:	0003      	movs	r3, r0
 8005418:	617b      	str	r3, [r7, #20]
        break;
 800541a:	e06c      	b.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800541c:	4b3a      	ldr	r3, [pc, #232]	@ (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800541e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005420:	2202      	movs	r2, #2
 8005422:	4013      	ands	r3, r2
 8005424:	2b02      	cmp	r3, #2
 8005426:	d108      	bne.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	2380      	movs	r3, #128	@ 0x80
 800542c:	035b      	lsls	r3, r3, #13
 800542e:	429a      	cmp	r2, r3
 8005430:	d103      	bne.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 8005432:	23fa      	movs	r3, #250	@ 0xfa
 8005434:	01db      	lsls	r3, r3, #7
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	e01f      	b.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800543a:	4b33      	ldr	r3, [pc, #204]	@ (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	2380      	movs	r3, #128	@ 0x80
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	401a      	ands	r2, r3
 8005444:	2380      	movs	r3, #128	@ 0x80
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	429a      	cmp	r2, r3
 800544a:	d107      	bne.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	2380      	movs	r3, #128	@ 0x80
 8005450:	039b      	lsls	r3, r3, #14
 8005452:	429a      	cmp	r2, r3
 8005454:	d102      	bne.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 8005456:	4b2d      	ldr	r3, [pc, #180]	@ (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	e00e      	b.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800545c:	4b2a      	ldr	r3, [pc, #168]	@ (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800545e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005460:	2202      	movs	r2, #2
 8005462:	4013      	ands	r3, r2
 8005464:	2b02      	cmp	r3, #2
 8005466:	d146      	bne.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	23c0      	movs	r3, #192	@ 0xc0
 800546c:	039b      	lsls	r3, r3, #14
 800546e:	429a      	cmp	r2, r3
 8005470:	d141      	bne.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 8005472:	2380      	movs	r3, #128	@ 0x80
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	617b      	str	r3, [r7, #20]
        break;
 8005478:	e03d      	b.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 800547a:	e03c      	b.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 800547c:	4b22      	ldr	r3, [pc, #136]	@ (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800547e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005480:	2380      	movs	r3, #128	@ 0x80
 8005482:	03db      	lsls	r3, r3, #15
 8005484:	4013      	ands	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	2380      	movs	r3, #128	@ 0x80
 800548c:	03db      	lsls	r3, r3, #15
 800548e:	429a      	cmp	r2, r3
 8005490:	d11b      	bne.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8005492:	4b1d      	ldr	r3, [pc, #116]	@ (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	2380      	movs	r3, #128	@ 0x80
 8005498:	045b      	lsls	r3, r3, #17
 800549a:	4013      	ands	r3, r2
 800549c:	d02d      	beq.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800549e:	4b1a      	ldr	r3, [pc, #104]	@ (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	0a1b      	lsrs	r3, r3, #8
 80054a4:	227f      	movs	r2, #127	@ 0x7f
 80054a6:	4013      	ands	r3, r2
 80054a8:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	435a      	muls	r2, r3
 80054b0:	4b15      	ldr	r3, [pc, #84]	@ (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	0e5b      	lsrs	r3, r3, #25
 80054b6:	2107      	movs	r1, #7
 80054b8:	400b      	ands	r3, r1
 80054ba:	3301      	adds	r3, #1
 80054bc:	0019      	movs	r1, r3
 80054be:	0010      	movs	r0, r2
 80054c0:	f7fa fe20 	bl	8000104 <__udivsi3>
 80054c4:	0003      	movs	r3, r0
 80054c6:	617b      	str	r3, [r7, #20]
        break;
 80054c8:	e017      	b.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d114      	bne.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 80054d0:	f7ff fbf8 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 80054d4:	0003      	movs	r3, r0
 80054d6:	617b      	str	r3, [r7, #20]
        break;
 80054d8:	e00f      	b.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 80054da:	46c0      	nop			@ (mov r8, r8)
 80054dc:	e00e      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80054de:	46c0      	nop			@ (mov r8, r8)
 80054e0:	e00c      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80054e2:	46c0      	nop			@ (mov r8, r8)
 80054e4:	e00a      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80054e6:	46c0      	nop			@ (mov r8, r8)
 80054e8:	e008      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80054ea:	46c0      	nop			@ (mov r8, r8)
 80054ec:	e006      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	e004      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80054f2:	46c0      	nop			@ (mov r8, r8)
 80054f4:	e002      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80054f6:	46c0      	nop			@ (mov r8, r8)
 80054f8:	e000      	b.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 80054fa:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 80054fc:	697b      	ldr	r3, [r7, #20]
}
 80054fe:	0018      	movs	r0, r3
 8005500:	46bd      	mov	sp, r7
 8005502:	b006      	add	sp, #24
 8005504:	bd80      	pop	{r7, pc}
 8005506:	46c0      	nop			@ (mov r8, r8)
 8005508:	40021000 	.word	0x40021000
 800550c:	00f42400 	.word	0x00f42400
 8005510:	00bb8000 	.word	0x00bb8000

08005514 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8005514:	b590      	push	{r4, r7, lr}
 8005516:	b08b      	sub	sp, #44	@ 0x2c
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 800551c:	2427      	movs	r4, #39	@ 0x27
 800551e:	193b      	adds	r3, r7, r4
 8005520:	2200      	movs	r2, #0
 8005522:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 8005524:	2326      	movs	r3, #38	@ 0x26
 8005526:	18fb      	adds	r3, r7, r3
 8005528:	2200      	movs	r2, #0
 800552a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 800552c:	4b31      	ldr	r3, [pc, #196]	@ (80055f4 <HAL_RCCEx_EnableLSCO+0xe0>)
 800552e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005530:	4b30      	ldr	r3, [pc, #192]	@ (80055f4 <HAL_RCCEx_EnableLSCO+0xe0>)
 8005532:	2101      	movs	r1, #1
 8005534:	430a      	orrs	r2, r1
 8005536:	635a      	str	r2, [r3, #52]	@ 0x34
 8005538:	4b2e      	ldr	r3, [pc, #184]	@ (80055f4 <HAL_RCCEx_EnableLSCO+0xe0>)
 800553a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800553c:	2201      	movs	r2, #1
 800553e:	4013      	ands	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8005544:	2110      	movs	r1, #16
 8005546:	187b      	adds	r3, r7, r1
 8005548:	2204      	movs	r2, #4
 800554a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800554c:	187b      	adds	r3, r7, r1
 800554e:	2203      	movs	r2, #3
 8005550:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005552:	187b      	adds	r3, r7, r1
 8005554:	2203      	movs	r2, #3
 8005556:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005558:	187b      	adds	r3, r7, r1
 800555a:	2200      	movs	r2, #0
 800555c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 800555e:	187a      	adds	r2, r7, r1
 8005560:	23a0      	movs	r3, #160	@ 0xa0
 8005562:	05db      	lsls	r3, r3, #23
 8005564:	0011      	movs	r1, r2
 8005566:	0018      	movs	r0, r3
 8005568:	f7fd fd78 	bl	800305c <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800556c:	4b21      	ldr	r3, [pc, #132]	@ (80055f4 <HAL_RCCEx_EnableLSCO+0xe0>)
 800556e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005570:	2380      	movs	r3, #128	@ 0x80
 8005572:	055b      	lsls	r3, r3, #21
 8005574:	4013      	ands	r3, r2
 8005576:	d110      	bne.n	800559a <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005578:	4b1e      	ldr	r3, [pc, #120]	@ (80055f4 <HAL_RCCEx_EnableLSCO+0xe0>)
 800557a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800557c:	4b1d      	ldr	r3, [pc, #116]	@ (80055f4 <HAL_RCCEx_EnableLSCO+0xe0>)
 800557e:	2180      	movs	r1, #128	@ 0x80
 8005580:	0549      	lsls	r1, r1, #21
 8005582:	430a      	orrs	r2, r1
 8005584:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005586:	4b1b      	ldr	r3, [pc, #108]	@ (80055f4 <HAL_RCCEx_EnableLSCO+0xe0>)
 8005588:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800558a:	2380      	movs	r3, #128	@ 0x80
 800558c:	055b      	lsls	r3, r3, #21
 800558e:	4013      	ands	r3, r2
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8005594:	193b      	adds	r3, r7, r4
 8005596:	2201      	movs	r2, #1
 8005598:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800559a:	4b17      	ldr	r3, [pc, #92]	@ (80055f8 <HAL_RCCEx_EnableLSCO+0xe4>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	2380      	movs	r3, #128	@ 0x80
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	4013      	ands	r3, r2
 80055a4:	d105      	bne.n	80055b2 <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 80055a6:	f7fe fe77 	bl	8004298 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 80055aa:	2326      	movs	r3, #38	@ 0x26
 80055ac:	18fb      	adds	r3, r7, r3
 80055ae:	2201      	movs	r2, #1
 80055b0:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 80055b2:	4b10      	ldr	r3, [pc, #64]	@ (80055f4 <HAL_RCCEx_EnableLSCO+0xe0>)
 80055b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b6:	4a11      	ldr	r2, [pc, #68]	@ (80055fc <HAL_RCCEx_EnableLSCO+0xe8>)
 80055b8:	401a      	ands	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	431a      	orrs	r2, r3
 80055be:	4b0d      	ldr	r3, [pc, #52]	@ (80055f4 <HAL_RCCEx_EnableLSCO+0xe0>)
 80055c0:	2180      	movs	r1, #128	@ 0x80
 80055c2:	0449      	lsls	r1, r1, #17
 80055c4:	430a      	orrs	r2, r1
 80055c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 80055c8:	2326      	movs	r3, #38	@ 0x26
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 80055d2:	f7fe fe6f 	bl	80042b4 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 80055d6:	2327      	movs	r3, #39	@ 0x27
 80055d8:	18fb      	adds	r3, r7, r3
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d105      	bne.n	80055ec <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 80055e0:	4b04      	ldr	r3, [pc, #16]	@ (80055f4 <HAL_RCCEx_EnableLSCO+0xe0>)
 80055e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055e4:	4b03      	ldr	r3, [pc, #12]	@ (80055f4 <HAL_RCCEx_EnableLSCO+0xe0>)
 80055e6:	4906      	ldr	r1, [pc, #24]	@ (8005600 <HAL_RCCEx_EnableLSCO+0xec>)
 80055e8:	400a      	ands	r2, r1
 80055ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80055ec:	46c0      	nop			@ (mov r8, r8)
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b00b      	add	sp, #44	@ 0x2c
 80055f2:	bd90      	pop	{r4, r7, pc}
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40007000 	.word	0x40007000
 80055fc:	fcffffff 	.word	0xfcffffff
 8005600:	efffffff 	.word	0xefffffff

08005604 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005604:	b5b0      	push	{r4, r5, r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800560c:	230f      	movs	r3, #15
 800560e:	18fb      	adds	r3, r7, r3
 8005610:	2201      	movs	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d100      	bne.n	800561c <HAL_RTC_Init+0x18>
 800561a:	e08c      	b.n	8005736 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2229      	movs	r2, #41	@ 0x29
 8005620:	5c9b      	ldrb	r3, [r3, r2]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10b      	bne.n	8005640 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2228      	movs	r2, #40	@ 0x28
 800562c:	2100      	movs	r1, #0
 800562e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2288      	movs	r2, #136	@ 0x88
 8005634:	0212      	lsls	r2, r2, #8
 8005636:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	0018      	movs	r0, r3
 800563c:	f7fc ffde 	bl	80025fc <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2229      	movs	r2, #41	@ 0x29
 8005644:	2102      	movs	r1, #2
 8005646:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2210      	movs	r2, #16
 8005650:	4013      	ands	r3, r2
 8005652:	2b10      	cmp	r3, #16
 8005654:	d062      	beq.n	800571c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	22ca      	movs	r2, #202	@ 0xca
 800565c:	625a      	str	r2, [r3, #36]	@ 0x24
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2253      	movs	r2, #83	@ 0x53
 8005664:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005666:	250f      	movs	r5, #15
 8005668:	197c      	adds	r4, r7, r5
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	0018      	movs	r0, r3
 800566e:	f000 fc27 	bl	8005ec0 <RTC_EnterInitMode>
 8005672:	0003      	movs	r3, r0
 8005674:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8005676:	0028      	movs	r0, r5
 8005678:	183b      	adds	r3, r7, r0
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d12c      	bne.n	80056da <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	492e      	ldr	r1, [pc, #184]	@ (8005744 <HAL_RTC_Init+0x140>)
 800568c:	400a      	ands	r2, r1
 800568e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6999      	ldr	r1, [r3, #24]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	431a      	orrs	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6912      	ldr	r2, [r2, #16]
 80056b6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6919      	ldr	r1, [r3, #16]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	041a      	lsls	r2, r3, #16
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80056cc:	183c      	adds	r4, r7, r0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	0018      	movs	r0, r3
 80056d2:	f000 fc37 	bl	8005f44 <RTC_ExitInitMode>
 80056d6:	0003      	movs	r3, r0
 80056d8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80056da:	230f      	movs	r3, #15
 80056dc:	18fb      	adds	r3, r7, r3
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d116      	bne.n	8005712 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699a      	ldr	r2, [r3, #24]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	00d2      	lsls	r2, r2, #3
 80056f0:	08d2      	lsrs	r2, r2, #3
 80056f2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6999      	ldr	r1, [r3, #24]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	22ff      	movs	r2, #255	@ 0xff
 8005718:	625a      	str	r2, [r3, #36]	@ 0x24
 800571a:	e003      	b.n	8005724 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800571c:	230f      	movs	r3, #15
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005724:	230f      	movs	r3, #15
 8005726:	18fb      	adds	r3, r7, r3
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d103      	bne.n	8005736 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2229      	movs	r2, #41	@ 0x29
 8005732:	2101      	movs	r1, #1
 8005734:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005736:	230f      	movs	r3, #15
 8005738:	18fb      	adds	r3, r7, r3
 800573a:	781b      	ldrb	r3, [r3, #0]
}
 800573c:	0018      	movs	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	b004      	add	sp, #16
 8005742:	bdb0      	pop	{r4, r5, r7, pc}
 8005744:	fb8fffbf 	.word	0xfb8fffbf

08005748 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005748:	b5b0      	push	{r4, r5, r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2228      	movs	r2, #40	@ 0x28
 8005758:	5c9b      	ldrb	r3, [r3, r2]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_RTC_SetTime+0x1a>
 800575e:	2302      	movs	r3, #2
 8005760:	e092      	b.n	8005888 <HAL_RTC_SetTime+0x140>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2228      	movs	r2, #40	@ 0x28
 8005766:	2101      	movs	r1, #1
 8005768:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2229      	movs	r2, #41	@ 0x29
 800576e:	2102      	movs	r1, #2
 8005770:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	22ca      	movs	r2, #202	@ 0xca
 8005778:	625a      	str	r2, [r3, #36]	@ 0x24
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2253      	movs	r2, #83	@ 0x53
 8005780:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005782:	2513      	movs	r5, #19
 8005784:	197c      	adds	r4, r7, r5
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	0018      	movs	r0, r3
 800578a:	f000 fb99 	bl	8005ec0 <RTC_EnterInitMode>
 800578e:	0003      	movs	r3, r0
 8005790:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005792:	197b      	adds	r3, r7, r5
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d162      	bne.n	8005860 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d125      	bne.n	80057ec <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	2240      	movs	r2, #64	@ 0x40
 80057a8:	4013      	ands	r3, r2
 80057aa:	d102      	bne.n	80057b2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2200      	movs	r2, #0
 80057b0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	0018      	movs	r0, r3
 80057b8:	f000 fc08 	bl	8005fcc <RTC_ByteToBcd2>
 80057bc:	0003      	movs	r3, r0
 80057be:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	785b      	ldrb	r3, [r3, #1]
 80057c4:	0018      	movs	r0, r3
 80057c6:	f000 fc01 	bl	8005fcc <RTC_ByteToBcd2>
 80057ca:	0003      	movs	r3, r0
 80057cc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057ce:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	789b      	ldrb	r3, [r3, #2]
 80057d4:	0018      	movs	r0, r3
 80057d6:	f000 fbf9 	bl	8005fcc <RTC_ByteToBcd2>
 80057da:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80057dc:	0022      	movs	r2, r4
 80057de:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	78db      	ldrb	r3, [r3, #3]
 80057e4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	e017      	b.n	800581c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	2240      	movs	r2, #64	@ 0x40
 80057f4:	4013      	ands	r3, r2
 80057f6:	d102      	bne.n	80057fe <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2200      	movs	r2, #0
 80057fc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800580a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005810:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	78db      	ldrb	r3, [r3, #3]
 8005816:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	491b      	ldr	r1, [pc, #108]	@ (8005890 <HAL_RTC_SetTime+0x148>)
 8005824:	400a      	ands	r2, r1
 8005826:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4918      	ldr	r1, [pc, #96]	@ (8005894 <HAL_RTC_SetTime+0x14c>)
 8005834:	400a      	ands	r2, r1
 8005836:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6999      	ldr	r1, [r3, #24]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	431a      	orrs	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005850:	2313      	movs	r3, #19
 8005852:	18fc      	adds	r4, r7, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	0018      	movs	r0, r3
 8005858:	f000 fb74 	bl	8005f44 <RTC_ExitInitMode>
 800585c:	0003      	movs	r3, r0
 800585e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	22ff      	movs	r2, #255	@ 0xff
 8005866:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8005868:	2313      	movs	r3, #19
 800586a:	18fb      	adds	r3, r7, r3
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2229      	movs	r2, #41	@ 0x29
 8005876:	2101      	movs	r1, #1
 8005878:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2228      	movs	r2, #40	@ 0x28
 800587e:	2100      	movs	r1, #0
 8005880:	5499      	strb	r1, [r3, r2]

  return status;
 8005882:	2313      	movs	r3, #19
 8005884:	18fb      	adds	r3, r7, r3
 8005886:	781b      	ldrb	r3, [r3, #0]
}
 8005888:	0018      	movs	r0, r3
 800588a:	46bd      	mov	sp, r7
 800588c:	b006      	add	sp, #24
 800588e:	bdb0      	pop	{r4, r5, r7, pc}
 8005890:	007f7f7f 	.word	0x007f7f7f
 8005894:	fffbffff 	.word	0xfffbffff

08005898 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	045b      	lsls	r3, r3, #17
 80058b6:	0c5a      	lsrs	r2, r3, #17
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a22      	ldr	r2, [pc, #136]	@ (800594c <HAL_RTC_GetTime+0xb4>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	0c1b      	lsrs	r3, r3, #16
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	223f      	movs	r2, #63	@ 0x3f
 80058d0:	4013      	ands	r3, r2
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	0a1b      	lsrs	r3, r3, #8
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	227f      	movs	r2, #127	@ 0x7f
 80058e0:	4013      	ands	r3, r2
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	227f      	movs	r2, #127	@ 0x7f
 80058ee:	4013      	ands	r3, r2
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	0d9b      	lsrs	r3, r3, #22
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2201      	movs	r2, #1
 80058fe:	4013      	ands	r3, r2
 8005900:	b2da      	uxtb	r2, r3
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d11a      	bne.n	8005942 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	0018      	movs	r0, r3
 8005912:	f000 fb83 	bl	800601c <RTC_Bcd2ToByte>
 8005916:	0003      	movs	r3, r0
 8005918:	001a      	movs	r2, r3
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	785b      	ldrb	r3, [r3, #1]
 8005922:	0018      	movs	r0, r3
 8005924:	f000 fb7a 	bl	800601c <RTC_Bcd2ToByte>
 8005928:	0003      	movs	r3, r0
 800592a:	001a      	movs	r2, r3
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	789b      	ldrb	r3, [r3, #2]
 8005934:	0018      	movs	r0, r3
 8005936:	f000 fb71 	bl	800601c <RTC_Bcd2ToByte>
 800593a:	0003      	movs	r3, r0
 800593c:	001a      	movs	r2, r3
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	0018      	movs	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	b006      	add	sp, #24
 800594a:	bd80      	pop	{r7, pc}
 800594c:	007f7f7f 	.word	0x007f7f7f

08005950 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4a21      	ldr	r2, [pc, #132]	@ (80059e8 <HAL_RTC_GetDate+0x98>)
 8005964:	4013      	ands	r3, r2
 8005966:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	0c1b      	lsrs	r3, r3, #16
 800596c:	b2da      	uxtb	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	0a1b      	lsrs	r3, r3, #8
 8005976:	b2db      	uxtb	r3, r3
 8005978:	221f      	movs	r2, #31
 800597a:	4013      	ands	r3, r2
 800597c:	b2da      	uxtb	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	223f      	movs	r2, #63	@ 0x3f
 8005988:	4013      	ands	r3, r2
 800598a:	b2da      	uxtb	r2, r3
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	0b5b      	lsrs	r3, r3, #13
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2207      	movs	r2, #7
 8005998:	4013      	ands	r3, r2
 800599a:	b2da      	uxtb	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d11a      	bne.n	80059dc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	78db      	ldrb	r3, [r3, #3]
 80059aa:	0018      	movs	r0, r3
 80059ac:	f000 fb36 	bl	800601c <RTC_Bcd2ToByte>
 80059b0:	0003      	movs	r3, r0
 80059b2:	001a      	movs	r2, r3
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	0018      	movs	r0, r3
 80059be:	f000 fb2d 	bl	800601c <RTC_Bcd2ToByte>
 80059c2:	0003      	movs	r3, r0
 80059c4:	001a      	movs	r2, r3
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	789b      	ldrb	r3, [r3, #2]
 80059ce:	0018      	movs	r0, r3
 80059d0:	f000 fb24 	bl	800601c <RTC_Bcd2ToByte>
 80059d4:	0003      	movs	r3, r0
 80059d6:	001a      	movs	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	0018      	movs	r0, r3
 80059e0:	46bd      	mov	sp, r7
 80059e2:	b006      	add	sp, #24
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	46c0      	nop			@ (mov r8, r8)
 80059e8:	00ffff3f 	.word	0x00ffff3f

080059ec <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80059ec:	b590      	push	{r4, r7, lr}
 80059ee:	b089      	sub	sp, #36	@ 0x24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2228      	movs	r2, #40	@ 0x28
 80059fc:	5c9b      	ldrb	r3, [r3, r2]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_RTC_SetAlarm_IT+0x1a>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e127      	b.n	8005c56 <HAL_RTC_SetAlarm_IT+0x26a>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2228      	movs	r2, #40	@ 0x28
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2229      	movs	r2, #41	@ 0x29
 8005a12:	2102      	movs	r1, #2
 8005a14:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d136      	bne.n	8005a8a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	2240      	movs	r2, #64	@ 0x40
 8005a24:	4013      	ands	r3, r2
 8005a26:	d102      	bne.n	8005a2e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	0018      	movs	r0, r3
 8005a34:	f000 faca 	bl	8005fcc <RTC_ByteToBcd2>
 8005a38:	0003      	movs	r3, r0
 8005a3a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	0018      	movs	r0, r3
 8005a42:	f000 fac3 	bl	8005fcc <RTC_ByteToBcd2>
 8005a46:	0003      	movs	r3, r0
 8005a48:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a4a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	789b      	ldrb	r3, [r3, #2]
 8005a50:	0018      	movs	r0, r3
 8005a52:	f000 fabb 	bl	8005fcc <RTC_ByteToBcd2>
 8005a56:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a58:	0022      	movs	r2, r4
 8005a5a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	78db      	ldrb	r3, [r3, #3]
 8005a60:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005a62:	431a      	orrs	r2, r3
 8005a64:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	5c9b      	ldrb	r3, [r3, r2]
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f000 faad 	bl	8005fcc <RTC_ByteToBcd2>
 8005a72:	0003      	movs	r3, r0
 8005a74:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a76:	0022      	movs	r2, r4
 8005a78:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a7e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a84:	4313      	orrs	r3, r2
 8005a86:	61fb      	str	r3, [r7, #28]
 8005a88:	e022      	b.n	8005ad0 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	2240      	movs	r2, #64	@ 0x40
 8005a92:	4013      	ands	r3, r2
 8005a94:	d102      	bne.n	8005a9c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005aa8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005aae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	78db      	ldrb	r3, [r3, #3]
 8005ab4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005ab6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2120      	movs	r1, #32
 8005abc:	5c5b      	ldrb	r3, [r3, r1]
 8005abe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005ac0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005ac6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005acc:	4313      	orrs	r3, r2
 8005ace:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	22ca      	movs	r2, #202	@ 0xca
 8005ae2:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2253      	movs	r2, #83	@ 0x53
 8005aea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005af0:	2380      	movs	r3, #128	@ 0x80
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d14c      	bne.n	8005b92 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699a      	ldr	r2, [r3, #24]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4957      	ldr	r1, [pc, #348]	@ (8005c60 <HAL_RTC_SetAlarm_IT+0x274>)
 8005b04:	400a      	ands	r2, r1
 8005b06:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2101      	movs	r1, #1
 8005b14:	430a      	orrs	r2, r1
 8005b16:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8005b18:	f7fd f82c 	bl	8002b74 <HAL_GetTick>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005b20:	e016      	b.n	8005b50 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b22:	f7fd f827 	bl	8002b74 <HAL_GetTick>
 8005b26:	0002      	movs	r2, r0
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	1ad2      	subs	r2, r2, r3
 8005b2c:	23fa      	movs	r3, #250	@ 0xfa
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d90d      	bls.n	8005b50 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	22ff      	movs	r2, #255	@ 0xff
 8005b3a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2229      	movs	r2, #41	@ 0x29
 8005b40:	2103      	movs	r1, #3
 8005b42:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2228      	movs	r2, #40	@ 0x28
 8005b48:	2100      	movs	r1, #0
 8005b4a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e082      	b.n	8005c56 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	4013      	ands	r3, r2
 8005b5a:	d0e2      	beq.n	8005b22 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2180      	movs	r1, #128	@ 0x80
 8005b78:	0049      	lsls	r1, r1, #1
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699a      	ldr	r2, [r3, #24]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2180      	movs	r1, #128	@ 0x80
 8005b8a:	0149      	lsls	r1, r1, #5
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	619a      	str	r2, [r3, #24]
 8005b90:	e04b      	b.n	8005c2a <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	699a      	ldr	r2, [r3, #24]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4931      	ldr	r1, [pc, #196]	@ (8005c64 <HAL_RTC_SetAlarm_IT+0x278>)
 8005b9e:	400a      	ands	r2, r1
 8005ba0:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2102      	movs	r1, #2
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8005bb2:	f7fc ffdf 	bl	8002b74 <HAL_GetTick>
 8005bb6:	0003      	movs	r3, r0
 8005bb8:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005bba:	e016      	b.n	8005bea <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005bbc:	f7fc ffda 	bl	8002b74 <HAL_GetTick>
 8005bc0:	0002      	movs	r2, r0
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	1ad2      	subs	r2, r2, r3
 8005bc6:	23fa      	movs	r3, #250	@ 0xfa
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d90d      	bls.n	8005bea <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	22ff      	movs	r2, #255	@ 0xff
 8005bd4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2229      	movs	r2, #41	@ 0x29
 8005bda:	2103      	movs	r1, #3
 8005bdc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2228      	movs	r2, #40	@ 0x28
 8005be2:	2100      	movs	r1, #0
 8005be4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e035      	b.n	8005c56 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d0e2      	beq.n	8005bbc <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	699a      	ldr	r2, [r3, #24]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2180      	movs	r1, #128	@ 0x80
 8005c12:	0089      	lsls	r1, r1, #2
 8005c14:	430a      	orrs	r2, r1
 8005c16:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2180      	movs	r1, #128	@ 0x80
 8005c24:	0189      	lsls	r1, r1, #6
 8005c26:	430a      	orrs	r2, r1
 8005c28:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005c2a:	4a0f      	ldr	r2, [pc, #60]	@ (8005c68 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005c2c:	2380      	movs	r3, #128	@ 0x80
 8005c2e:	58d3      	ldr	r3, [r2, r3]
 8005c30:	490d      	ldr	r1, [pc, #52]	@ (8005c68 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005c32:	2280      	movs	r2, #128	@ 0x80
 8005c34:	0312      	lsls	r2, r2, #12
 8005c36:	4313      	orrs	r3, r2
 8005c38:	2280      	movs	r2, #128	@ 0x80
 8005c3a:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	22ff      	movs	r2, #255	@ 0xff
 8005c42:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2229      	movs	r2, #41	@ 0x29
 8005c48:	2101      	movs	r1, #1
 8005c4a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2228      	movs	r2, #40	@ 0x28
 8005c50:	2100      	movs	r1, #0
 8005c52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	0018      	movs	r0, r3
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	b009      	add	sp, #36	@ 0x24
 8005c5c:	bd90      	pop	{r4, r7, pc}
 8005c5e:	46c0      	nop			@ (mov r8, r8)
 8005c60:	fffffeff 	.word	0xfffffeff
 8005c64:	fffffdff 	.word	0xfffffdff
 8005c68:	40021800 	.word	0x40021800

08005c6c <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	2380      	movs	r3, #128	@ 0x80
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d144      	bne.n	8005d0e <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2280      	movs	r2, #128	@ 0x80
 8005c88:	0052      	lsls	r2, r2, #1
 8005c8a:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c92:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c9a:	045b      	lsls	r3, r3, #17
 8005c9c:	0c5b      	lsrs	r3, r3, #17
 8005c9e:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	0c1b      	lsrs	r3, r3, #16
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	223f      	movs	r2, #63	@ 0x3f
 8005ca8:	4013      	ands	r3, r2
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	0a1b      	lsrs	r3, r3, #8
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	227f      	movs	r2, #127	@ 0x7f
 8005cb8:	4013      	ands	r3, r2
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	227f      	movs	r2, #127	@ 0x7f
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	0d9b      	lsrs	r3, r3, #22
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	0e1b      	lsrs	r3, r3, #24
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	223f      	movs	r2, #63	@ 0x3f
 8005cec:	4013      	ands	r3, r2
 8005cee:	b2d9      	uxtb	r1, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	2380      	movs	r3, #128	@ 0x80
 8005cfa:	05db      	lsls	r3, r3, #23
 8005cfc:	401a      	ands	r2, r3
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	4a3b      	ldr	r2, [pc, #236]	@ (8005df4 <HAL_RTC_GetAlarm+0x188>)
 8005d06:	401a      	ands	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	615a      	str	r2, [r3, #20]
 8005d0c:	e043      	b.n	8005d96 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2280      	movs	r2, #128	@ 0x80
 8005d12:	0092      	lsls	r2, r2, #2
 8005d14:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d1c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d24:	045b      	lsls	r3, r3, #17
 8005d26:	0c5b      	lsrs	r3, r3, #17
 8005d28:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	0c1b      	lsrs	r3, r3, #16
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	223f      	movs	r2, #63	@ 0x3f
 8005d32:	4013      	ands	r3, r2
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	0a1b      	lsrs	r3, r3, #8
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	227f      	movs	r2, #127	@ 0x7f
 8005d42:	4013      	ands	r3, r2
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	227f      	movs	r2, #127	@ 0x7f
 8005d50:	4013      	ands	r3, r2
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	0d9b      	lsrs	r3, r3, #22
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2201      	movs	r2, #1
 8005d60:	4013      	ands	r3, r2
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	0e1b      	lsrs	r3, r3, #24
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	223f      	movs	r2, #63	@ 0x3f
 8005d76:	4013      	ands	r3, r2
 8005d78:	b2d9      	uxtb	r1, r3
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	2380      	movs	r3, #128	@ 0x80
 8005d84:	05db      	lsls	r3, r3, #23
 8005d86:	401a      	ands	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	4a19      	ldr	r2, [pc, #100]	@ (8005df4 <HAL_RTC_GetAlarm+0x188>)
 8005d90:	401a      	ands	r2, r3
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d125      	bne.n	8005de8 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	0018      	movs	r0, r3
 8005da2:	f000 f93b 	bl	800601c <RTC_Bcd2ToByte>
 8005da6:	0003      	movs	r3, r0
 8005da8:	001a      	movs	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	785b      	ldrb	r3, [r3, #1]
 8005db2:	0018      	movs	r0, r3
 8005db4:	f000 f932 	bl	800601c <RTC_Bcd2ToByte>
 8005db8:	0003      	movs	r3, r0
 8005dba:	001a      	movs	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	789b      	ldrb	r3, [r3, #2]
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f000 f929 	bl	800601c <RTC_Bcd2ToByte>
 8005dca:	0003      	movs	r3, r0
 8005dcc:	001a      	movs	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	5c9b      	ldrb	r3, [r3, r2]
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f000 f91f 	bl	800601c <RTC_Bcd2ToByte>
 8005dde:	0003      	movs	r3, r0
 8005de0:	0019      	movs	r1, r3
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2220      	movs	r2, #32
 8005de6:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	0018      	movs	r0, r3
 8005dec:	46bd      	mov	sp, r7
 8005dee:	b006      	add	sp, #24
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	46c0      	nop			@ (mov r8, r8)
 8005df4:	80808080 	.word	0x80808080

08005df8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	2380      	movs	r3, #128	@ 0x80
 8005e08:	015b      	lsls	r3, r3, #5
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d011      	beq.n	8005e32 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e14:	2201      	movs	r2, #1
 8005e16:	4013      	ands	r3, r2
 8005e18:	d00b      	beq.n	8005e32 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2101      	movs	r1, #1
 8005e26:	430a      	orrs	r2, r1
 8005e28:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f7fb fbc3 	bl	80015b8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699a      	ldr	r2, [r3, #24]
 8005e38:	2380      	movs	r3, #128	@ 0x80
 8005e3a:	019b      	lsls	r3, r3, #6
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d011      	beq.n	8005e64 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e46:	2202      	movs	r2, #2
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d00b      	beq.n	8005e64 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2102      	movs	r1, #2
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	0018      	movs	r0, r3
 8005e60:	f000 f9a4 	bl	80061ac <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2229      	movs	r2, #41	@ 0x29
 8005e68:	2101      	movs	r1, #1
 8005e6a:	5499      	strb	r1, [r3, r2]
}
 8005e6c:	46c0      	nop			@ (mov r8, r8)
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	b002      	add	sp, #8
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a0e      	ldr	r2, [pc, #56]	@ (8005ebc <HAL_RTC_WaitForSynchro+0x48>)
 8005e82:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005e84:	f7fc fe76 	bl	8002b74 <HAL_GetTick>
 8005e88:	0003      	movs	r3, r0
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005e8c:	e00a      	b.n	8005ea4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e8e:	f7fc fe71 	bl	8002b74 <HAL_GetTick>
 8005e92:	0002      	movs	r2, r0
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	1ad2      	subs	r2, r2, r3
 8005e98:	23fa      	movs	r3, #250	@ 0xfa
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e006      	b.n	8005eb2 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	4013      	ands	r3, r2
 8005eae:	d0ee      	beq.n	8005e8e <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	b004      	add	sp, #16
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	46c0      	nop			@ (mov r8, r8)
 8005ebc:	0001005f 	.word	0x0001005f

08005ec0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005ec8:	230f      	movs	r3, #15
 8005eca:	18fb      	adds	r3, r7, r3
 8005ecc:	2200      	movs	r2, #0
 8005ece:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	2240      	movs	r2, #64	@ 0x40
 8005ed8:	4013      	ands	r3, r2
 8005eda:	d12c      	bne.n	8005f36 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2180      	movs	r1, #128	@ 0x80
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005eec:	f7fc fe42 	bl	8002b74 <HAL_GetTick>
 8005ef0:	0003      	movs	r3, r0
 8005ef2:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ef4:	e014      	b.n	8005f20 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005ef6:	f7fc fe3d 	bl	8002b74 <HAL_GetTick>
 8005efa:	0002      	movs	r2, r0
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	1ad2      	subs	r2, r2, r3
 8005f00:	200f      	movs	r0, #15
 8005f02:	183b      	adds	r3, r7, r0
 8005f04:	1839      	adds	r1, r7, r0
 8005f06:	7809      	ldrb	r1, [r1, #0]
 8005f08:	7019      	strb	r1, [r3, #0]
 8005f0a:	23fa      	movs	r3, #250	@ 0xfa
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d906      	bls.n	8005f20 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005f12:	183b      	adds	r3, r7, r0
 8005f14:	2203      	movs	r2, #3
 8005f16:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2229      	movs	r2, #41	@ 0x29
 8005f1c:	2103      	movs	r1, #3
 8005f1e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	2240      	movs	r2, #64	@ 0x40
 8005f28:	4013      	ands	r3, r2
 8005f2a:	d104      	bne.n	8005f36 <RTC_EnterInitMode+0x76>
 8005f2c:	230f      	movs	r3, #15
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d1df      	bne.n	8005ef6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005f36:	230f      	movs	r3, #15
 8005f38:	18fb      	adds	r3, r7, r3
 8005f3a:	781b      	ldrb	r3, [r3, #0]
}
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	b004      	add	sp, #16
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f4c:	240f      	movs	r4, #15
 8005f4e:	193b      	adds	r3, r7, r4
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005f54:	4b1c      	ldr	r3, [pc, #112]	@ (8005fc8 <RTC_ExitInitMode+0x84>)
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	4b1b      	ldr	r3, [pc, #108]	@ (8005fc8 <RTC_ExitInitMode+0x84>)
 8005f5a:	2180      	movs	r1, #128	@ 0x80
 8005f5c:	438a      	bics	r2, r1
 8005f5e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005f60:	4b19      	ldr	r3, [pc, #100]	@ (8005fc8 <RTC_ExitInitMode+0x84>)
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	2220      	movs	r2, #32
 8005f66:	4013      	ands	r3, r2
 8005f68:	d10d      	bne.n	8005f86 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	f7ff ff81 	bl	8005e74 <HAL_RTC_WaitForSynchro>
 8005f72:	1e03      	subs	r3, r0, #0
 8005f74:	d021      	beq.n	8005fba <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2229      	movs	r2, #41	@ 0x29
 8005f7a:	2103      	movs	r1, #3
 8005f7c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005f7e:	193b      	adds	r3, r7, r4
 8005f80:	2203      	movs	r2, #3
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	e019      	b.n	8005fba <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f86:	4b10      	ldr	r3, [pc, #64]	@ (8005fc8 <RTC_ExitInitMode+0x84>)
 8005f88:	699a      	ldr	r2, [r3, #24]
 8005f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8005fc8 <RTC_ExitInitMode+0x84>)
 8005f8c:	2120      	movs	r1, #32
 8005f8e:	438a      	bics	r2, r1
 8005f90:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	0018      	movs	r0, r3
 8005f96:	f7ff ff6d 	bl	8005e74 <HAL_RTC_WaitForSynchro>
 8005f9a:	1e03      	subs	r3, r0, #0
 8005f9c:	d007      	beq.n	8005fae <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2229      	movs	r2, #41	@ 0x29
 8005fa2:	2103      	movs	r1, #3
 8005fa4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005fa6:	230f      	movs	r3, #15
 8005fa8:	18fb      	adds	r3, r7, r3
 8005faa:	2203      	movs	r2, #3
 8005fac:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005fae:	4b06      	ldr	r3, [pc, #24]	@ (8005fc8 <RTC_ExitInitMode+0x84>)
 8005fb0:	699a      	ldr	r2, [r3, #24]
 8005fb2:	4b05      	ldr	r3, [pc, #20]	@ (8005fc8 <RTC_ExitInitMode+0x84>)
 8005fb4:	2120      	movs	r1, #32
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005fba:	230f      	movs	r3, #15
 8005fbc:	18fb      	adds	r3, r7, r3
 8005fbe:	781b      	ldrb	r3, [r3, #0]
}
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	b005      	add	sp, #20
 8005fc6:	bd90      	pop	{r4, r7, pc}
 8005fc8:	40002800 	.word	0x40002800

08005fcc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	0002      	movs	r2, r0
 8005fd4:	1dfb      	adds	r3, r7, #7
 8005fd6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005fdc:	230b      	movs	r3, #11
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	1dfa      	adds	r2, r7, #7
 8005fe2:	7812      	ldrb	r2, [r2, #0]
 8005fe4:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005fe6:	e008      	b.n	8005ffa <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3301      	adds	r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005fee:	220b      	movs	r2, #11
 8005ff0:	18bb      	adds	r3, r7, r2
 8005ff2:	18ba      	adds	r2, r7, r2
 8005ff4:	7812      	ldrb	r2, [r2, #0]
 8005ff6:	3a0a      	subs	r2, #10
 8005ff8:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005ffa:	210b      	movs	r1, #11
 8005ffc:	187b      	adds	r3, r7, r1
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b09      	cmp	r3, #9
 8006002:	d8f1      	bhi.n	8005fe8 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	b2da      	uxtb	r2, r3
 800600c:	187b      	adds	r3, r7, r1
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	4313      	orrs	r3, r2
 8006012:	b2db      	uxtb	r3, r3
}
 8006014:	0018      	movs	r0, r3
 8006016:	46bd      	mov	sp, r7
 8006018:	b004      	add	sp, #16
 800601a:	bd80      	pop	{r7, pc}

0800601c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	0002      	movs	r2, r0
 8006024:	1dfb      	adds	r3, r7, #7
 8006026:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006028:	1dfb      	adds	r3, r7, #7
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	091b      	lsrs	r3, r3, #4
 800602e:	b2db      	uxtb	r3, r3
 8006030:	001a      	movs	r2, r3
 8006032:	0013      	movs	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	189b      	adds	r3, r3, r2
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	b2da      	uxtb	r2, r3
 8006040:	1dfb      	adds	r3, r7, #7
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	210f      	movs	r1, #15
 8006046:	400b      	ands	r3, r1
 8006048:	b2db      	uxtb	r3, r3
 800604a:	18d3      	adds	r3, r2, r3
 800604c:	b2db      	uxtb	r3, r3
}
 800604e:	0018      	movs	r0, r3
 8006050:	46bd      	mov	sp, r7
 8006052:	b004      	add	sp, #16
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
 8006062:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2228      	movs	r2, #40	@ 0x28
 8006068:	5c9b      	ldrb	r3, [r3, r2]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d101      	bne.n	8006072 <HAL_RTCEx_SetSmoothCalib+0x1c>
 800606e:	2302      	movs	r3, #2
 8006070:	e04f      	b.n	8006112 <HAL_RTCEx_SetSmoothCalib+0xbc>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2228      	movs	r2, #40	@ 0x28
 8006076:	2101      	movs	r1, #1
 8006078:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2229      	movs	r2, #41	@ 0x29
 800607e:	2102      	movs	r1, #2
 8006080:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	22ca      	movs	r2, #202	@ 0xca
 8006088:	625a      	str	r2, [r3, #36]	@ 0x24
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2253      	movs	r2, #83	@ 0x53
 8006090:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	2380      	movs	r3, #128	@ 0x80
 800609a:	025b      	lsls	r3, r3, #9
 800609c:	4013      	ands	r3, r2
 800609e:	d022      	beq.n	80060e6 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 80060a0:	f7fc fd68 	bl	8002b74 <HAL_GetTick>
 80060a4:	0003      	movs	r3, r0
 80060a6:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80060a8:	e016      	b.n	80060d8 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80060aa:	f7fc fd63 	bl	8002b74 <HAL_GetTick>
 80060ae:	0002      	movs	r2, r0
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	1ad2      	subs	r2, r2, r3
 80060b4:	23fa      	movs	r3, #250	@ 0xfa
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d90d      	bls.n	80060d8 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	22ff      	movs	r2, #255	@ 0xff
 80060c2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2229      	movs	r2, #41	@ 0x29
 80060c8:	2103      	movs	r1, #3
 80060ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2228      	movs	r2, #40	@ 0x28
 80060d0:	2100      	movs	r1, #0
 80060d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e01c      	b.n	8006112 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	2380      	movs	r3, #128	@ 0x80
 80060e0:	025b      	lsls	r3, r3, #9
 80060e2:	4013      	ands	r3, r2
 80060e4:	d1e1      	bne.n	80060aa <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	0011      	movs	r1, r2
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	22ff      	movs	r2, #255	@ 0xff
 80060fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2229      	movs	r2, #41	@ 0x29
 8006104:	2101      	movs	r1, #1
 8006106:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2228      	movs	r2, #40	@ 0x28
 800610c:	2100      	movs	r1, #0
 800610e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	0018      	movs	r0, r3
 8006114:	46bd      	mov	sp, r7
 8006116:	b006      	add	sp, #24
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2228      	movs	r2, #40	@ 0x28
 800612a:	5c9b      	ldrb	r3, [r3, r2]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8006130:	2302      	movs	r3, #2
 8006132:	e035      	b.n	80061a0 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2228      	movs	r2, #40	@ 0x28
 8006138:	2101      	movs	r1, #1
 800613a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2229      	movs	r2, #41	@ 0x29
 8006140:	2102      	movs	r1, #2
 8006142:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	22ca      	movs	r2, #202	@ 0xca
 800614a:	625a      	str	r2, [r3, #36]	@ 0x24
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2253      	movs	r2, #83	@ 0x53
 8006152:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4912      	ldr	r1, [pc, #72]	@ (80061a8 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8006160:	400a      	ands	r2, r1
 8006162:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6999      	ldr	r1, [r3, #24]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2180      	movs	r1, #128	@ 0x80
 8006180:	0409      	lsls	r1, r1, #16
 8006182:	430a      	orrs	r2, r1
 8006184:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	22ff      	movs	r2, #255	@ 0xff
 800618c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2229      	movs	r2, #41	@ 0x29
 8006192:	2101      	movs	r1, #1
 8006194:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2228      	movs	r2, #40	@ 0x28
 800619a:	2100      	movs	r1, #0
 800619c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	0018      	movs	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b002      	add	sp, #8
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	fff7ffff 	.word	0xfff7ffff

080061ac <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80061b4:	46c0      	nop			@ (mov r8, r8)
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b002      	add	sp, #8
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	001a      	movs	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	18d3      	adds	r3, r2, r3
 80061d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	3301      	adds	r3, #1
 80061da:	33ff      	adds	r3, #255	@ 0xff
 80061dc:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	18d3      	adds	r3, r2, r3
 80061e6:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	601a      	str	r2, [r3, #0]
}
 80061ee:	46c0      	nop			@ (mov r8, r8)
 80061f0:	46bd      	mov	sp, r7
 80061f2:	b006      	add	sp, #24
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	001a      	movs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	18d3      	adds	r3, r2, r3
 800620c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3301      	adds	r3, #1
 8006212:	33ff      	adds	r3, #255	@ 0xff
 8006214:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	18d3      	adds	r3, r2, r3
 800621e:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	681b      	ldr	r3, [r3, #0]
}
 8006224:	0018      	movs	r0, r3
 8006226:	46bd      	mov	sp, r7
 8006228:	b004      	add	sp, #16
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e0a8      	b.n	8006390 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006242:	2b00      	cmp	r3, #0
 8006244:	d109      	bne.n	800625a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	2382      	movs	r3, #130	@ 0x82
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	429a      	cmp	r2, r3
 8006250:	d009      	beq.n	8006266 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	61da      	str	r2, [r3, #28]
 8006258:	e005      	b.n	8006266 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	225d      	movs	r2, #93	@ 0x5d
 8006270:	5c9b      	ldrb	r3, [r3, r2]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d107      	bne.n	8006288 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	225c      	movs	r2, #92	@ 0x5c
 800627c:	2100      	movs	r1, #0
 800627e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	0018      	movs	r0, r3
 8006284:	f7fc fa00 	bl	8002688 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	225d      	movs	r2, #93	@ 0x5d
 800628c:	2102      	movs	r1, #2
 800628e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2140      	movs	r1, #64	@ 0x40
 800629c:	438a      	bics	r2, r1
 800629e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	23e0      	movs	r3, #224	@ 0xe0
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d902      	bls.n	80062b2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062ac:	2300      	movs	r3, #0
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	e002      	b.n	80062b8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062b2:	2380      	movs	r3, #128	@ 0x80
 80062b4:	015b      	lsls	r3, r3, #5
 80062b6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	23f0      	movs	r3, #240	@ 0xf0
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d008      	beq.n	80062d6 <HAL_SPI_Init+0xaa>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	23e0      	movs	r3, #224	@ 0xe0
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d002      	beq.n	80062d6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	2382      	movs	r3, #130	@ 0x82
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	401a      	ands	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6899      	ldr	r1, [r3, #8]
 80062e4:	2384      	movs	r3, #132	@ 0x84
 80062e6:	021b      	lsls	r3, r3, #8
 80062e8:	400b      	ands	r3, r1
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	2102      	movs	r1, #2
 80062f2:	400b      	ands	r3, r1
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	2101      	movs	r1, #1
 80062fc:	400b      	ands	r3, r1
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6999      	ldr	r1, [r3, #24]
 8006304:	2380      	movs	r3, #128	@ 0x80
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	400b      	ands	r3, r1
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	2138      	movs	r1, #56	@ 0x38
 8006312:	400b      	ands	r3, r1
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	2180      	movs	r1, #128	@ 0x80
 800631c:	400b      	ands	r3, r1
 800631e:	431a      	orrs	r2, r3
 8006320:	0011      	movs	r1, r2
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006326:	2380      	movs	r3, #128	@ 0x80
 8006328:	019b      	lsls	r3, r3, #6
 800632a:	401a      	ands	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	0c1b      	lsrs	r3, r3, #16
 800633a:	2204      	movs	r2, #4
 800633c:	401a      	ands	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006342:	2110      	movs	r1, #16
 8006344:	400b      	ands	r3, r1
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800634c:	2108      	movs	r1, #8
 800634e:	400b      	ands	r3, r1
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68d9      	ldr	r1, [r3, #12]
 8006356:	23f0      	movs	r3, #240	@ 0xf0
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	400b      	ands	r3, r1
 800635c:	431a      	orrs	r2, r3
 800635e:	0011      	movs	r1, r2
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	2380      	movs	r3, #128	@ 0x80
 8006364:	015b      	lsls	r3, r3, #5
 8006366:	401a      	ands	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69da      	ldr	r2, [r3, #28]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4907      	ldr	r1, [pc, #28]	@ (8006398 <HAL_SPI_Init+0x16c>)
 800637c:	400a      	ands	r2, r1
 800637e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	225d      	movs	r2, #93	@ 0x5d
 800638a:	2101      	movs	r1, #1
 800638c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	0018      	movs	r0, r3
 8006392:	46bd      	mov	sp, r7
 8006394:	b004      	add	sp, #16
 8006396:	bd80      	pop	{r7, pc}
 8006398:	fffff7ff 	.word	0xfffff7ff

0800639c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e04a      	b.n	8006444 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	223d      	movs	r2, #61	@ 0x3d
 80063b2:	5c9b      	ldrb	r3, [r3, r2]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d107      	bne.n	80063ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	223c      	movs	r2, #60	@ 0x3c
 80063be:	2100      	movs	r1, #0
 80063c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	0018      	movs	r0, r3
 80063c6:	f7fc fa37 	bl	8002838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	223d      	movs	r2, #61	@ 0x3d
 80063ce:	2102      	movs	r1, #2
 80063d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3304      	adds	r3, #4
 80063da:	0019      	movs	r1, r3
 80063dc:	0010      	movs	r0, r2
 80063de:	f000 fc87 	bl	8006cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2248      	movs	r2, #72	@ 0x48
 80063e6:	2101      	movs	r1, #1
 80063e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	223e      	movs	r2, #62	@ 0x3e
 80063ee:	2101      	movs	r1, #1
 80063f0:	5499      	strb	r1, [r3, r2]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	223f      	movs	r2, #63	@ 0x3f
 80063f6:	2101      	movs	r1, #1
 80063f8:	5499      	strb	r1, [r3, r2]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2240      	movs	r2, #64	@ 0x40
 80063fe:	2101      	movs	r1, #1
 8006400:	5499      	strb	r1, [r3, r2]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2241      	movs	r2, #65	@ 0x41
 8006406:	2101      	movs	r1, #1
 8006408:	5499      	strb	r1, [r3, r2]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2242      	movs	r2, #66	@ 0x42
 800640e:	2101      	movs	r1, #1
 8006410:	5499      	strb	r1, [r3, r2]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2243      	movs	r2, #67	@ 0x43
 8006416:	2101      	movs	r1, #1
 8006418:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2244      	movs	r2, #68	@ 0x44
 800641e:	2101      	movs	r1, #1
 8006420:	5499      	strb	r1, [r3, r2]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2245      	movs	r2, #69	@ 0x45
 8006426:	2101      	movs	r1, #1
 8006428:	5499      	strb	r1, [r3, r2]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2246      	movs	r2, #70	@ 0x46
 800642e:	2101      	movs	r1, #1
 8006430:	5499      	strb	r1, [r3, r2]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2247      	movs	r2, #71	@ 0x47
 8006436:	2101      	movs	r1, #1
 8006438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	223d      	movs	r2, #61	@ 0x3d
 800643e:	2101      	movs	r1, #1
 8006440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	0018      	movs	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	b002      	add	sp, #8
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	223d      	movs	r2, #61	@ 0x3d
 8006458:	5c9b      	ldrb	r3, [r3, r2]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b01      	cmp	r3, #1
 800645e:	d001      	beq.n	8006464 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e035      	b.n	80064d0 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	223d      	movs	r2, #61	@ 0x3d
 8006468:	2102      	movs	r1, #2
 800646a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a19      	ldr	r2, [pc, #100]	@ (80064d8 <HAL_TIM_Base_Start+0x8c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00a      	beq.n	800648c <HAL_TIM_Base_Start+0x40>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	2380      	movs	r3, #128	@ 0x80
 800647c:	05db      	lsls	r3, r3, #23
 800647e:	429a      	cmp	r2, r3
 8006480:	d004      	beq.n	800648c <HAL_TIM_Base_Start+0x40>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a15      	ldr	r2, [pc, #84]	@ (80064dc <HAL_TIM_Base_Start+0x90>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d116      	bne.n	80064ba <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	4a13      	ldr	r2, [pc, #76]	@ (80064e0 <HAL_TIM_Base_Start+0x94>)
 8006494:	4013      	ands	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b06      	cmp	r3, #6
 800649c:	d016      	beq.n	80064cc <HAL_TIM_Base_Start+0x80>
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	2380      	movs	r3, #128	@ 0x80
 80064a2:	025b      	lsls	r3, r3, #9
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d011      	beq.n	80064cc <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2101      	movs	r1, #1
 80064b4:	430a      	orrs	r2, r1
 80064b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064b8:	e008      	b.n	80064cc <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2101      	movs	r1, #1
 80064c6:	430a      	orrs	r2, r1
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	e000      	b.n	80064ce <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	0018      	movs	r0, r3
 80064d2:	46bd      	mov	sp, r7
 80064d4:	b004      	add	sp, #16
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40012c00 	.word	0x40012c00
 80064dc:	40000400 	.word	0x40000400
 80064e0:	00010007 	.word	0x00010007

080064e4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	4a0d      	ldr	r2, [pc, #52]	@ (8006528 <HAL_TIM_Base_Stop+0x44>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	d10d      	bne.n	8006514 <HAL_TIM_Base_Stop+0x30>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	4a0b      	ldr	r2, [pc, #44]	@ (800652c <HAL_TIM_Base_Stop+0x48>)
 8006500:	4013      	ands	r3, r2
 8006502:	d107      	bne.n	8006514 <HAL_TIM_Base_Stop+0x30>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2101      	movs	r1, #1
 8006510:	438a      	bics	r2, r1
 8006512:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	223d      	movs	r2, #61	@ 0x3d
 8006518:	2101      	movs	r1, #1
 800651a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	0018      	movs	r0, r3
 8006520:	46bd      	mov	sp, r7
 8006522:	b002      	add	sp, #8
 8006524:	bd80      	pop	{r7, pc}
 8006526:	46c0      	nop			@ (mov r8, r8)
 8006528:	00001111 	.word	0x00001111
 800652c:	00000444 	.word	0x00000444

08006530 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	223d      	movs	r2, #61	@ 0x3d
 800653c:	5c9b      	ldrb	r3, [r3, r2]
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b01      	cmp	r3, #1
 8006542:	d001      	beq.n	8006548 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e03d      	b.n	80065c4 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	223d      	movs	r2, #61	@ 0x3d
 800654c:	2102      	movs	r1, #2
 800654e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2101      	movs	r1, #1
 800655c:	430a      	orrs	r2, r1
 800655e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a19      	ldr	r2, [pc, #100]	@ (80065cc <HAL_TIM_Base_Start_IT+0x9c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d00a      	beq.n	8006580 <HAL_TIM_Base_Start_IT+0x50>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	2380      	movs	r3, #128	@ 0x80
 8006570:	05db      	lsls	r3, r3, #23
 8006572:	429a      	cmp	r2, r3
 8006574:	d004      	beq.n	8006580 <HAL_TIM_Base_Start_IT+0x50>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a15      	ldr	r2, [pc, #84]	@ (80065d0 <HAL_TIM_Base_Start_IT+0xa0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d116      	bne.n	80065ae <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	4a13      	ldr	r2, [pc, #76]	@ (80065d4 <HAL_TIM_Base_Start_IT+0xa4>)
 8006588:	4013      	ands	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2b06      	cmp	r3, #6
 8006590:	d016      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x90>
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	2380      	movs	r3, #128	@ 0x80
 8006596:	025b      	lsls	r3, r3, #9
 8006598:	429a      	cmp	r2, r3
 800659a:	d011      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2101      	movs	r1, #1
 80065a8:	430a      	orrs	r2, r1
 80065aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ac:	e008      	b.n	80065c0 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2101      	movs	r1, #1
 80065ba:	430a      	orrs	r2, r1
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	e000      	b.n	80065c2 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	0018      	movs	r0, r3
 80065c6:	46bd      	mov	sp, r7
 80065c8:	b004      	add	sp, #16
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40000400 	.word	0x40000400
 80065d4:	00010007 	.word	0x00010007

080065d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2101      	movs	r1, #1
 80065ec:	438a      	bics	r2, r1
 80065ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	4a0d      	ldr	r2, [pc, #52]	@ (800662c <HAL_TIM_Base_Stop_IT+0x54>)
 80065f8:	4013      	ands	r3, r2
 80065fa:	d10d      	bne.n	8006618 <HAL_TIM_Base_Stop_IT+0x40>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	4a0b      	ldr	r2, [pc, #44]	@ (8006630 <HAL_TIM_Base_Stop_IT+0x58>)
 8006604:	4013      	ands	r3, r2
 8006606:	d107      	bne.n	8006618 <HAL_TIM_Base_Stop_IT+0x40>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2101      	movs	r1, #1
 8006614:	438a      	bics	r2, r1
 8006616:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	223d      	movs	r2, #61	@ 0x3d
 800661c:	2101      	movs	r1, #1
 800661e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	0018      	movs	r0, r3
 8006624:	46bd      	mov	sp, r7
 8006626:	b002      	add	sp, #8
 8006628:	bd80      	pop	{r7, pc}
 800662a:	46c0      	nop			@ (mov r8, r8)
 800662c:	00001111 	.word	0x00001111
 8006630:	00000444 	.word	0x00000444

08006634 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e04a      	b.n	80066dc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	223d      	movs	r2, #61	@ 0x3d
 800664a:	5c9b      	ldrb	r3, [r3, r2]
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d107      	bne.n	8006662 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	223c      	movs	r2, #60	@ 0x3c
 8006656:	2100      	movs	r1, #0
 8006658:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	0018      	movs	r0, r3
 800665e:	f7fc f8cf 	bl	8002800 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	223d      	movs	r2, #61	@ 0x3d
 8006666:	2102      	movs	r1, #2
 8006668:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3304      	adds	r3, #4
 8006672:	0019      	movs	r1, r3
 8006674:	0010      	movs	r0, r2
 8006676:	f000 fb3b 	bl	8006cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2248      	movs	r2, #72	@ 0x48
 800667e:	2101      	movs	r1, #1
 8006680:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	223e      	movs	r2, #62	@ 0x3e
 8006686:	2101      	movs	r1, #1
 8006688:	5499      	strb	r1, [r3, r2]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	223f      	movs	r2, #63	@ 0x3f
 800668e:	2101      	movs	r1, #1
 8006690:	5499      	strb	r1, [r3, r2]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2240      	movs	r2, #64	@ 0x40
 8006696:	2101      	movs	r1, #1
 8006698:	5499      	strb	r1, [r3, r2]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2241      	movs	r2, #65	@ 0x41
 800669e:	2101      	movs	r1, #1
 80066a0:	5499      	strb	r1, [r3, r2]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2242      	movs	r2, #66	@ 0x42
 80066a6:	2101      	movs	r1, #1
 80066a8:	5499      	strb	r1, [r3, r2]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2243      	movs	r2, #67	@ 0x43
 80066ae:	2101      	movs	r1, #1
 80066b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2244      	movs	r2, #68	@ 0x44
 80066b6:	2101      	movs	r1, #1
 80066b8:	5499      	strb	r1, [r3, r2]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2245      	movs	r2, #69	@ 0x45
 80066be:	2101      	movs	r1, #1
 80066c0:	5499      	strb	r1, [r3, r2]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2246      	movs	r2, #70	@ 0x46
 80066c6:	2101      	movs	r1, #1
 80066c8:	5499      	strb	r1, [r3, r2]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2247      	movs	r2, #71	@ 0x47
 80066ce:	2101      	movs	r1, #1
 80066d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	223d      	movs	r2, #61	@ 0x3d
 80066d6:	2101      	movs	r1, #1
 80066d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	0018      	movs	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	b002      	add	sp, #8
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d108      	bne.n	8006706 <HAL_TIM_PWM_Start+0x22>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	223e      	movs	r2, #62	@ 0x3e
 80066f8:	5c9b      	ldrb	r3, [r3, r2]
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	1e5a      	subs	r2, r3, #1
 8006700:	4193      	sbcs	r3, r2
 8006702:	b2db      	uxtb	r3, r3
 8006704:	e037      	b.n	8006776 <HAL_TIM_PWM_Start+0x92>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b04      	cmp	r3, #4
 800670a:	d108      	bne.n	800671e <HAL_TIM_PWM_Start+0x3a>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	223f      	movs	r2, #63	@ 0x3f
 8006710:	5c9b      	ldrb	r3, [r3, r2]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	3b01      	subs	r3, #1
 8006716:	1e5a      	subs	r2, r3, #1
 8006718:	4193      	sbcs	r3, r2
 800671a:	b2db      	uxtb	r3, r3
 800671c:	e02b      	b.n	8006776 <HAL_TIM_PWM_Start+0x92>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b08      	cmp	r3, #8
 8006722:	d108      	bne.n	8006736 <HAL_TIM_PWM_Start+0x52>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2240      	movs	r2, #64	@ 0x40
 8006728:	5c9b      	ldrb	r3, [r3, r2]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	1e5a      	subs	r2, r3, #1
 8006730:	4193      	sbcs	r3, r2
 8006732:	b2db      	uxtb	r3, r3
 8006734:	e01f      	b.n	8006776 <HAL_TIM_PWM_Start+0x92>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b0c      	cmp	r3, #12
 800673a:	d108      	bne.n	800674e <HAL_TIM_PWM_Start+0x6a>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2241      	movs	r2, #65	@ 0x41
 8006740:	5c9b      	ldrb	r3, [r3, r2]
 8006742:	b2db      	uxtb	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	1e5a      	subs	r2, r3, #1
 8006748:	4193      	sbcs	r3, r2
 800674a:	b2db      	uxtb	r3, r3
 800674c:	e013      	b.n	8006776 <HAL_TIM_PWM_Start+0x92>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b10      	cmp	r3, #16
 8006752:	d108      	bne.n	8006766 <HAL_TIM_PWM_Start+0x82>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2242      	movs	r2, #66	@ 0x42
 8006758:	5c9b      	ldrb	r3, [r3, r2]
 800675a:	b2db      	uxtb	r3, r3
 800675c:	3b01      	subs	r3, #1
 800675e:	1e5a      	subs	r2, r3, #1
 8006760:	4193      	sbcs	r3, r2
 8006762:	b2db      	uxtb	r3, r3
 8006764:	e007      	b.n	8006776 <HAL_TIM_PWM_Start+0x92>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2243      	movs	r2, #67	@ 0x43
 800676a:	5c9b      	ldrb	r3, [r3, r2]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	3b01      	subs	r3, #1
 8006770:	1e5a      	subs	r2, r3, #1
 8006772:	4193      	sbcs	r3, r2
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e081      	b.n	8006882 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d104      	bne.n	800678e <HAL_TIM_PWM_Start+0xaa>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	223e      	movs	r2, #62	@ 0x3e
 8006788:	2102      	movs	r1, #2
 800678a:	5499      	strb	r1, [r3, r2]
 800678c:	e023      	b.n	80067d6 <HAL_TIM_PWM_Start+0xf2>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b04      	cmp	r3, #4
 8006792:	d104      	bne.n	800679e <HAL_TIM_PWM_Start+0xba>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	223f      	movs	r2, #63	@ 0x3f
 8006798:	2102      	movs	r1, #2
 800679a:	5499      	strb	r1, [r3, r2]
 800679c:	e01b      	b.n	80067d6 <HAL_TIM_PWM_Start+0xf2>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d104      	bne.n	80067ae <HAL_TIM_PWM_Start+0xca>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2240      	movs	r2, #64	@ 0x40
 80067a8:	2102      	movs	r1, #2
 80067aa:	5499      	strb	r1, [r3, r2]
 80067ac:	e013      	b.n	80067d6 <HAL_TIM_PWM_Start+0xf2>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b0c      	cmp	r3, #12
 80067b2:	d104      	bne.n	80067be <HAL_TIM_PWM_Start+0xda>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2241      	movs	r2, #65	@ 0x41
 80067b8:	2102      	movs	r1, #2
 80067ba:	5499      	strb	r1, [r3, r2]
 80067bc:	e00b      	b.n	80067d6 <HAL_TIM_PWM_Start+0xf2>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b10      	cmp	r3, #16
 80067c2:	d104      	bne.n	80067ce <HAL_TIM_PWM_Start+0xea>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2242      	movs	r2, #66	@ 0x42
 80067c8:	2102      	movs	r1, #2
 80067ca:	5499      	strb	r1, [r3, r2]
 80067cc:	e003      	b.n	80067d6 <HAL_TIM_PWM_Start+0xf2>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2243      	movs	r2, #67	@ 0x43
 80067d2:	2102      	movs	r1, #2
 80067d4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	2201      	movs	r2, #1
 80067de:	0018      	movs	r0, r3
 80067e0:	f000 fda6 	bl	8007330 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a28      	ldr	r2, [pc, #160]	@ (800688c <HAL_TIM_PWM_Start+0x1a8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d009      	beq.n	8006802 <HAL_TIM_PWM_Start+0x11e>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a27      	ldr	r2, [pc, #156]	@ (8006890 <HAL_TIM_PWM_Start+0x1ac>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d004      	beq.n	8006802 <HAL_TIM_PWM_Start+0x11e>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a25      	ldr	r2, [pc, #148]	@ (8006894 <HAL_TIM_PWM_Start+0x1b0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d101      	bne.n	8006806 <HAL_TIM_PWM_Start+0x122>
 8006802:	2301      	movs	r3, #1
 8006804:	e000      	b.n	8006808 <HAL_TIM_PWM_Start+0x124>
 8006806:	2300      	movs	r3, #0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d008      	beq.n	800681e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2180      	movs	r1, #128	@ 0x80
 8006818:	0209      	lsls	r1, r1, #8
 800681a:	430a      	orrs	r2, r1
 800681c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a1a      	ldr	r2, [pc, #104]	@ (800688c <HAL_TIM_PWM_Start+0x1a8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00a      	beq.n	800683e <HAL_TIM_PWM_Start+0x15a>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	2380      	movs	r3, #128	@ 0x80
 800682e:	05db      	lsls	r3, r3, #23
 8006830:	429a      	cmp	r2, r3
 8006832:	d004      	beq.n	800683e <HAL_TIM_PWM_Start+0x15a>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a17      	ldr	r2, [pc, #92]	@ (8006898 <HAL_TIM_PWM_Start+0x1b4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d116      	bne.n	800686c <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	4a15      	ldr	r2, [pc, #84]	@ (800689c <HAL_TIM_PWM_Start+0x1b8>)
 8006846:	4013      	ands	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b06      	cmp	r3, #6
 800684e:	d016      	beq.n	800687e <HAL_TIM_PWM_Start+0x19a>
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	2380      	movs	r3, #128	@ 0x80
 8006854:	025b      	lsls	r3, r3, #9
 8006856:	429a      	cmp	r2, r3
 8006858:	d011      	beq.n	800687e <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2101      	movs	r1, #1
 8006866:	430a      	orrs	r2, r1
 8006868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800686a:	e008      	b.n	800687e <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2101      	movs	r1, #1
 8006878:	430a      	orrs	r2, r1
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	e000      	b.n	8006880 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800687e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	0018      	movs	r0, r3
 8006884:	46bd      	mov	sp, r7
 8006886:	b004      	add	sp, #16
 8006888:	bd80      	pop	{r7, pc}
 800688a:	46c0      	nop			@ (mov r8, r8)
 800688c:	40012c00 	.word	0x40012c00
 8006890:	40014400 	.word	0x40014400
 8006894:	40014800 	.word	0x40014800
 8006898:	40000400 	.word	0x40000400
 800689c:	00010007 	.word	0x00010007

080068a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2202      	movs	r2, #2
 80068bc:	4013      	ands	r3, r2
 80068be:	d021      	beq.n	8006904 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2202      	movs	r2, #2
 80068c4:	4013      	ands	r3, r2
 80068c6:	d01d      	beq.n	8006904 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2203      	movs	r2, #3
 80068ce:	4252      	negs	r2, r2
 80068d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	2203      	movs	r2, #3
 80068e0:	4013      	ands	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	0018      	movs	r0, r3
 80068e8:	f000 f9ea 	bl	8006cc0 <HAL_TIM_IC_CaptureCallback>
 80068ec:	e007      	b.n	80068fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	0018      	movs	r0, r3
 80068f2:	f000 f9dd 	bl	8006cb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	0018      	movs	r0, r3
 80068fa:	f000 f9e9 	bl	8006cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2204      	movs	r2, #4
 8006908:	4013      	ands	r3, r2
 800690a:	d022      	beq.n	8006952 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2204      	movs	r2, #4
 8006910:	4013      	ands	r3, r2
 8006912:	d01e      	beq.n	8006952 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2205      	movs	r2, #5
 800691a:	4252      	negs	r2, r2
 800691c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2202      	movs	r2, #2
 8006922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699a      	ldr	r2, [r3, #24]
 800692a:	23c0      	movs	r3, #192	@ 0xc0
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4013      	ands	r3, r2
 8006930:	d004      	beq.n	800693c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	0018      	movs	r0, r3
 8006936:	f000 f9c3 	bl	8006cc0 <HAL_TIM_IC_CaptureCallback>
 800693a:	e007      	b.n	800694c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	0018      	movs	r0, r3
 8006940:	f000 f9b6 	bl	8006cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	0018      	movs	r0, r3
 8006948:	f000 f9c2 	bl	8006cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2208      	movs	r2, #8
 8006956:	4013      	ands	r3, r2
 8006958:	d021      	beq.n	800699e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2208      	movs	r2, #8
 800695e:	4013      	ands	r3, r2
 8006960:	d01d      	beq.n	800699e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2209      	movs	r2, #9
 8006968:	4252      	negs	r2, r2
 800696a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2204      	movs	r2, #4
 8006970:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	2203      	movs	r2, #3
 800697a:	4013      	ands	r3, r2
 800697c:	d004      	beq.n	8006988 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	0018      	movs	r0, r3
 8006982:	f000 f99d 	bl	8006cc0 <HAL_TIM_IC_CaptureCallback>
 8006986:	e007      	b.n	8006998 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	0018      	movs	r0, r3
 800698c:	f000 f990 	bl	8006cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	0018      	movs	r0, r3
 8006994:	f000 f99c 	bl	8006cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2210      	movs	r2, #16
 80069a2:	4013      	ands	r3, r2
 80069a4:	d022      	beq.n	80069ec <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2210      	movs	r2, #16
 80069aa:	4013      	ands	r3, r2
 80069ac:	d01e      	beq.n	80069ec <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2211      	movs	r2, #17
 80069b4:	4252      	negs	r2, r2
 80069b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2208      	movs	r2, #8
 80069bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69da      	ldr	r2, [r3, #28]
 80069c4:	23c0      	movs	r3, #192	@ 0xc0
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4013      	ands	r3, r2
 80069ca:	d004      	beq.n	80069d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	0018      	movs	r0, r3
 80069d0:	f000 f976 	bl	8006cc0 <HAL_TIM_IC_CaptureCallback>
 80069d4:	e007      	b.n	80069e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	0018      	movs	r0, r3
 80069da:	f000 f969 	bl	8006cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	0018      	movs	r0, r3
 80069e2:	f000 f975 	bl	8006cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2201      	movs	r2, #1
 80069f0:	4013      	ands	r3, r2
 80069f2:	d00c      	beq.n	8006a0e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2201      	movs	r2, #1
 80069f8:	4013      	ands	r3, r2
 80069fa:	d008      	beq.n	8006a0e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2202      	movs	r2, #2
 8006a02:	4252      	negs	r2, r2
 8006a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f7fa ff45 	bl	8001898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2280      	movs	r2, #128	@ 0x80
 8006a12:	4013      	ands	r3, r2
 8006a14:	d104      	bne.n	8006a20 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	2380      	movs	r3, #128	@ 0x80
 8006a1a:	019b      	lsls	r3, r3, #6
 8006a1c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a1e:	d00b      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2280      	movs	r2, #128	@ 0x80
 8006a24:	4013      	ands	r3, r2
 8006a26:	d007      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa8 <HAL_TIM_IRQHandler+0x208>)
 8006a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	0018      	movs	r0, r3
 8006a34:	f000 fd10 	bl	8007458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	2380      	movs	r3, #128	@ 0x80
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	4013      	ands	r3, r2
 8006a40:	d00b      	beq.n	8006a5a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2280      	movs	r2, #128	@ 0x80
 8006a46:	4013      	ands	r3, r2
 8006a48:	d007      	beq.n	8006a5a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a17      	ldr	r2, [pc, #92]	@ (8006aac <HAL_TIM_IRQHandler+0x20c>)
 8006a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	0018      	movs	r0, r3
 8006a56:	f000 fd07 	bl	8007468 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2240      	movs	r2, #64	@ 0x40
 8006a5e:	4013      	ands	r3, r2
 8006a60:	d00c      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2240      	movs	r2, #64	@ 0x40
 8006a66:	4013      	ands	r3, r2
 8006a68:	d008      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2241      	movs	r2, #65	@ 0x41
 8006a70:	4252      	negs	r2, r2
 8006a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	0018      	movs	r0, r3
 8006a78:	f000 f932 	bl	8006ce0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	4013      	ands	r3, r2
 8006a82:	d00c      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2220      	movs	r2, #32
 8006a88:	4013      	ands	r3, r2
 8006a8a:	d008      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2221      	movs	r2, #33	@ 0x21
 8006a92:	4252      	negs	r2, r2
 8006a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f000 fcd5 	bl	8007448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a9e:	46c0      	nop			@ (mov r8, r8)
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	b004      	add	sp, #16
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	46c0      	nop			@ (mov r8, r8)
 8006aa8:	ffffdf7f 	.word	0xffffdf7f
 8006aac:	fffffeff 	.word	0xfffffeff

08006ab0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006abc:	2317      	movs	r3, #23
 8006abe:	18fb      	adds	r3, r7, r3
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	223c      	movs	r2, #60	@ 0x3c
 8006ac8:	5c9b      	ldrb	r3, [r3, r2]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e0e5      	b.n	8006c9e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	223c      	movs	r2, #60	@ 0x3c
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b14      	cmp	r3, #20
 8006ade:	d900      	bls.n	8006ae2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006ae0:	e0d1      	b.n	8006c86 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	009a      	lsls	r2, r3, #2
 8006ae6:	4b70      	ldr	r3, [pc, #448]	@ (8006ca8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006ae8:	18d3      	adds	r3, r2, r3
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	0011      	movs	r1, r2
 8006af6:	0018      	movs	r0, r3
 8006af8:	f000 f97e 	bl	8006df8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2108      	movs	r1, #8
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2104      	movs	r1, #4
 8006b18:	438a      	bics	r2, r1
 8006b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6999      	ldr	r1, [r3, #24]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	691a      	ldr	r2, [r3, #16]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	619a      	str	r2, [r3, #24]
      break;
 8006b2e:	e0af      	b.n	8006c90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	0011      	movs	r1, r2
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f000 f9dd 	bl	8006ef8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	699a      	ldr	r2, [r3, #24]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2180      	movs	r1, #128	@ 0x80
 8006b4a:	0109      	lsls	r1, r1, #4
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699a      	ldr	r2, [r3, #24]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4954      	ldr	r1, [pc, #336]	@ (8006cac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006b5c:	400a      	ands	r2, r1
 8006b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6999      	ldr	r1, [r3, #24]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	021a      	lsls	r2, r3, #8
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	619a      	str	r2, [r3, #24]
      break;
 8006b74:	e08c      	b.n	8006c90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	0011      	movs	r1, r2
 8006b7e:	0018      	movs	r0, r3
 8006b80:	f000 fa38 	bl	8006ff4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	69da      	ldr	r2, [r3, #28]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2108      	movs	r1, #8
 8006b90:	430a      	orrs	r2, r1
 8006b92:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	69da      	ldr	r2, [r3, #28]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2104      	movs	r1, #4
 8006ba0:	438a      	bics	r2, r1
 8006ba2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	69d9      	ldr	r1, [r3, #28]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	691a      	ldr	r2, [r3, #16]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	61da      	str	r2, [r3, #28]
      break;
 8006bb6:	e06b      	b.n	8006c90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	0011      	movs	r1, r2
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f000 fa99 	bl	80070f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69da      	ldr	r2, [r3, #28]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2180      	movs	r1, #128	@ 0x80
 8006bd2:	0109      	lsls	r1, r1, #4
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69da      	ldr	r2, [r3, #28]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4932      	ldr	r1, [pc, #200]	@ (8006cac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006be4:	400a      	ands	r2, r1
 8006be6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69d9      	ldr	r1, [r3, #28]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	021a      	lsls	r2, r3, #8
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	61da      	str	r2, [r3, #28]
      break;
 8006bfc:	e048      	b.n	8006c90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	0011      	movs	r1, r2
 8006c06:	0018      	movs	r0, r3
 8006c08:	f000 fada 	bl	80071c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2108      	movs	r1, #8
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2104      	movs	r1, #4
 8006c28:	438a      	bics	r2, r1
 8006c2a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	691a      	ldr	r2, [r3, #16]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006c3e:	e027      	b.n	8006c90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	0011      	movs	r1, r2
 8006c48:	0018      	movs	r0, r3
 8006c4a:	f000 fb13 	bl	8007274 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2180      	movs	r1, #128	@ 0x80
 8006c5a:	0109      	lsls	r1, r1, #4
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4910      	ldr	r1, [pc, #64]	@ (8006cac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006c6c:	400a      	ands	r2, r1
 8006c6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	021a      	lsls	r2, r3, #8
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006c84:	e004      	b.n	8006c90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8006c86:	2317      	movs	r3, #23
 8006c88:	18fb      	adds	r3, r7, r3
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	701a      	strb	r2, [r3, #0]
      break;
 8006c8e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	223c      	movs	r2, #60	@ 0x3c
 8006c94:	2100      	movs	r1, #0
 8006c96:	5499      	strb	r1, [r3, r2]

  return status;
 8006c98:	2317      	movs	r3, #23
 8006c9a:	18fb      	adds	r3, r7, r3
 8006c9c:	781b      	ldrb	r3, [r3, #0]
}
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	b006      	add	sp, #24
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	46c0      	nop			@ (mov r8, r8)
 8006ca8:	08007590 	.word	0x08007590
 8006cac:	fffffbff 	.word	0xfffffbff

08006cb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cb8:	46c0      	nop			@ (mov r8, r8)
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	b002      	add	sp, #8
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cc8:	46c0      	nop			@ (mov r8, r8)
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	b002      	add	sp, #8
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cd8:	46c0      	nop			@ (mov r8, r8)
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	b002      	add	sp, #8
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ce8:	46c0      	nop			@ (mov r8, r8)
 8006cea:	46bd      	mov	sp, r7
 8006cec:	b002      	add	sp, #8
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a37      	ldr	r2, [pc, #220]	@ (8006de0 <TIM_Base_SetConfig+0xf0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d008      	beq.n	8006d1a <TIM_Base_SetConfig+0x2a>
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	2380      	movs	r3, #128	@ 0x80
 8006d0c:	05db      	lsls	r3, r3, #23
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d003      	beq.n	8006d1a <TIM_Base_SetConfig+0x2a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a33      	ldr	r2, [pc, #204]	@ (8006de4 <TIM_Base_SetConfig+0xf4>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d108      	bne.n	8006d2c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2270      	movs	r2, #112	@ 0x70
 8006d1e:	4393      	bics	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8006de0 <TIM_Base_SetConfig+0xf0>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d014      	beq.n	8006d5e <TIM_Base_SetConfig+0x6e>
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	2380      	movs	r3, #128	@ 0x80
 8006d38:	05db      	lsls	r3, r3, #23
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d00f      	beq.n	8006d5e <TIM_Base_SetConfig+0x6e>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a28      	ldr	r2, [pc, #160]	@ (8006de4 <TIM_Base_SetConfig+0xf4>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d00b      	beq.n	8006d5e <TIM_Base_SetConfig+0x6e>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a27      	ldr	r2, [pc, #156]	@ (8006de8 <TIM_Base_SetConfig+0xf8>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d007      	beq.n	8006d5e <TIM_Base_SetConfig+0x6e>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a26      	ldr	r2, [pc, #152]	@ (8006dec <TIM_Base_SetConfig+0xfc>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d003      	beq.n	8006d5e <TIM_Base_SetConfig+0x6e>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a25      	ldr	r2, [pc, #148]	@ (8006df0 <TIM_Base_SetConfig+0x100>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d108      	bne.n	8006d70 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	4a24      	ldr	r2, [pc, #144]	@ (8006df4 <TIM_Base_SetConfig+0x104>)
 8006d62:	4013      	ands	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2280      	movs	r2, #128	@ 0x80
 8006d74:	4393      	bics	r3, r2
 8006d76:	001a      	movs	r2, r3
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a11      	ldr	r2, [pc, #68]	@ (8006de0 <TIM_Base_SetConfig+0xf0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d007      	beq.n	8006dae <TIM_Base_SetConfig+0xbe>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a12      	ldr	r2, [pc, #72]	@ (8006dec <TIM_Base_SetConfig+0xfc>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d003      	beq.n	8006dae <TIM_Base_SetConfig+0xbe>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a11      	ldr	r2, [pc, #68]	@ (8006df0 <TIM_Base_SetConfig+0x100>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d103      	bne.n	8006db6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	691a      	ldr	r2, [r3, #16]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d106      	bne.n	8006dd6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	4393      	bics	r3, r2
 8006dd0:	001a      	movs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	611a      	str	r2, [r3, #16]
  }
}
 8006dd6:	46c0      	nop			@ (mov r8, r8)
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	b004      	add	sp, #16
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	46c0      	nop			@ (mov r8, r8)
 8006de0:	40012c00 	.word	0x40012c00
 8006de4:	40000400 	.word	0x40000400
 8006de8:	40002000 	.word	0x40002000
 8006dec:	40014400 	.word	0x40014400
 8006df0:	40014800 	.word	0x40014800
 8006df4:	fffffcff 	.word	0xfffffcff

08006df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	4393      	bics	r3, r2
 8006e10:	001a      	movs	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	4a2e      	ldr	r2, [pc, #184]	@ (8006ee0 <TIM_OC1_SetConfig+0xe8>)
 8006e26:	4013      	ands	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2203      	movs	r2, #3
 8006e2e:	4393      	bics	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	4393      	bics	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a24      	ldr	r2, [pc, #144]	@ (8006ee4 <TIM_OC1_SetConfig+0xec>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d007      	beq.n	8006e66 <TIM_OC1_SetConfig+0x6e>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a23      	ldr	r2, [pc, #140]	@ (8006ee8 <TIM_OC1_SetConfig+0xf0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d003      	beq.n	8006e66 <TIM_OC1_SetConfig+0x6e>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a22      	ldr	r2, [pc, #136]	@ (8006eec <TIM_OC1_SetConfig+0xf4>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d10c      	bne.n	8006e80 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2208      	movs	r2, #8
 8006e6a:	4393      	bics	r3, r2
 8006e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	4393      	bics	r3, r2
 8006e7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a18      	ldr	r2, [pc, #96]	@ (8006ee4 <TIM_OC1_SetConfig+0xec>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d007      	beq.n	8006e98 <TIM_OC1_SetConfig+0xa0>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a17      	ldr	r2, [pc, #92]	@ (8006ee8 <TIM_OC1_SetConfig+0xf0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d003      	beq.n	8006e98 <TIM_OC1_SetConfig+0xa0>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a16      	ldr	r2, [pc, #88]	@ (8006eec <TIM_OC1_SetConfig+0xf4>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d111      	bne.n	8006ebc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	4a15      	ldr	r2, [pc, #84]	@ (8006ef0 <TIM_OC1_SetConfig+0xf8>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	4a14      	ldr	r2, [pc, #80]	@ (8006ef4 <TIM_OC1_SetConfig+0xfc>)
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	46c0      	nop			@ (mov r8, r8)
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	b006      	add	sp, #24
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	46c0      	nop			@ (mov r8, r8)
 8006ee0:	fffeff8f 	.word	0xfffeff8f
 8006ee4:	40012c00 	.word	0x40012c00
 8006ee8:	40014400 	.word	0x40014400
 8006eec:	40014800 	.word	0x40014800
 8006ef0:	fffffeff 	.word	0xfffffeff
 8006ef4:	fffffdff 	.word	0xfffffdff

08006ef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	2210      	movs	r2, #16
 8006f0e:	4393      	bics	r3, r2
 8006f10:	001a      	movs	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4a2c      	ldr	r2, [pc, #176]	@ (8006fd8 <TIM_OC2_SetConfig+0xe0>)
 8006f26:	4013      	ands	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4a2b      	ldr	r2, [pc, #172]	@ (8006fdc <TIM_OC2_SetConfig+0xe4>)
 8006f2e:	4013      	ands	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	021b      	lsls	r3, r3, #8
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2220      	movs	r2, #32
 8006f42:	4393      	bics	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a22      	ldr	r2, [pc, #136]	@ (8006fe0 <TIM_OC2_SetConfig+0xe8>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d10d      	bne.n	8006f76 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2280      	movs	r2, #128	@ 0x80
 8006f5e:	4393      	bics	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	011b      	lsls	r3, r3, #4
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2240      	movs	r2, #64	@ 0x40
 8006f72:	4393      	bics	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a19      	ldr	r2, [pc, #100]	@ (8006fe0 <TIM_OC2_SetConfig+0xe8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d007      	beq.n	8006f8e <TIM_OC2_SetConfig+0x96>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a18      	ldr	r2, [pc, #96]	@ (8006fe4 <TIM_OC2_SetConfig+0xec>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d003      	beq.n	8006f8e <TIM_OC2_SetConfig+0x96>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a17      	ldr	r2, [pc, #92]	@ (8006fe8 <TIM_OC2_SetConfig+0xf0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d113      	bne.n	8006fb6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	4a16      	ldr	r2, [pc, #88]	@ (8006fec <TIM_OC2_SetConfig+0xf4>)
 8006f92:	4013      	ands	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	4a15      	ldr	r2, [pc, #84]	@ (8006ff0 <TIM_OC2_SetConfig+0xf8>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	621a      	str	r2, [r3, #32]
}
 8006fd0:	46c0      	nop			@ (mov r8, r8)
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	b006      	add	sp, #24
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	feff8fff 	.word	0xfeff8fff
 8006fdc:	fffffcff 	.word	0xfffffcff
 8006fe0:	40012c00 	.word	0x40012c00
 8006fe4:	40014400 	.word	0x40014400
 8006fe8:	40014800 	.word	0x40014800
 8006fec:	fffffbff 	.word	0xfffffbff
 8006ff0:	fffff7ff 	.word	0xfffff7ff

08006ff4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	4a31      	ldr	r2, [pc, #196]	@ (80070d0 <TIM_OC3_SetConfig+0xdc>)
 800700a:	401a      	ands	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4a2d      	ldr	r2, [pc, #180]	@ (80070d4 <TIM_OC3_SetConfig+0xe0>)
 8007020:	4013      	ands	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2203      	movs	r2, #3
 8007028:	4393      	bics	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	4a27      	ldr	r2, [pc, #156]	@ (80070d8 <TIM_OC3_SetConfig+0xe4>)
 800703a:	4013      	ands	r3, r2
 800703c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a23      	ldr	r2, [pc, #140]	@ (80070dc <TIM_OC3_SetConfig+0xe8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d10d      	bne.n	800706e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	4a22      	ldr	r2, [pc, #136]	@ (80070e0 <TIM_OC3_SetConfig+0xec>)
 8007056:	4013      	ands	r3, r2
 8007058:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	021b      	lsls	r3, r3, #8
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	4313      	orrs	r3, r2
 8007064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	4a1e      	ldr	r2, [pc, #120]	@ (80070e4 <TIM_OC3_SetConfig+0xf0>)
 800706a:	4013      	ands	r3, r2
 800706c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a1a      	ldr	r2, [pc, #104]	@ (80070dc <TIM_OC3_SetConfig+0xe8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d007      	beq.n	8007086 <TIM_OC3_SetConfig+0x92>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a1b      	ldr	r2, [pc, #108]	@ (80070e8 <TIM_OC3_SetConfig+0xf4>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d003      	beq.n	8007086 <TIM_OC3_SetConfig+0x92>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a1a      	ldr	r2, [pc, #104]	@ (80070ec <TIM_OC3_SetConfig+0xf8>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d113      	bne.n	80070ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	4a19      	ldr	r2, [pc, #100]	@ (80070f0 <TIM_OC3_SetConfig+0xfc>)
 800708a:	4013      	ands	r3, r2
 800708c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	4a18      	ldr	r2, [pc, #96]	@ (80070f4 <TIM_OC3_SetConfig+0x100>)
 8007092:	4013      	ands	r3, r2
 8007094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	011b      	lsls	r3, r3, #4
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	4313      	orrs	r3, r2
 80070a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	621a      	str	r2, [r3, #32]
}
 80070c8:	46c0      	nop			@ (mov r8, r8)
 80070ca:	46bd      	mov	sp, r7
 80070cc:	b006      	add	sp, #24
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	fffffeff 	.word	0xfffffeff
 80070d4:	fffeff8f 	.word	0xfffeff8f
 80070d8:	fffffdff 	.word	0xfffffdff
 80070dc:	40012c00 	.word	0x40012c00
 80070e0:	fffff7ff 	.word	0xfffff7ff
 80070e4:	fffffbff 	.word	0xfffffbff
 80070e8:	40014400 	.word	0x40014400
 80070ec:	40014800 	.word	0x40014800
 80070f0:	ffffefff 	.word	0xffffefff
 80070f4:	ffffdfff 	.word	0xffffdfff

080070f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	4a24      	ldr	r2, [pc, #144]	@ (80071a0 <TIM_OC4_SetConfig+0xa8>)
 800710e:	401a      	ands	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4a20      	ldr	r2, [pc, #128]	@ (80071a4 <TIM_OC4_SetConfig+0xac>)
 8007124:	4013      	ands	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4a1f      	ldr	r2, [pc, #124]	@ (80071a8 <TIM_OC4_SetConfig+0xb0>)
 800712c:	4013      	ands	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	021b      	lsls	r3, r3, #8
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	4a1b      	ldr	r2, [pc, #108]	@ (80071ac <TIM_OC4_SetConfig+0xb4>)
 8007140:	4013      	ands	r3, r2
 8007142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	031b      	lsls	r3, r3, #12
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4313      	orrs	r3, r2
 800714e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a17      	ldr	r2, [pc, #92]	@ (80071b0 <TIM_OC4_SetConfig+0xb8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d007      	beq.n	8007168 <TIM_OC4_SetConfig+0x70>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a16      	ldr	r2, [pc, #88]	@ (80071b4 <TIM_OC4_SetConfig+0xbc>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d003      	beq.n	8007168 <TIM_OC4_SetConfig+0x70>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a15      	ldr	r2, [pc, #84]	@ (80071b8 <TIM_OC4_SetConfig+0xc0>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d109      	bne.n	800717c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	4a14      	ldr	r2, [pc, #80]	@ (80071bc <TIM_OC4_SetConfig+0xc4>)
 800716c:	4013      	ands	r3, r2
 800716e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	019b      	lsls	r3, r3, #6
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	4313      	orrs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	621a      	str	r2, [r3, #32]
}
 8007196:	46c0      	nop			@ (mov r8, r8)
 8007198:	46bd      	mov	sp, r7
 800719a:	b006      	add	sp, #24
 800719c:	bd80      	pop	{r7, pc}
 800719e:	46c0      	nop			@ (mov r8, r8)
 80071a0:	ffffefff 	.word	0xffffefff
 80071a4:	feff8fff 	.word	0xfeff8fff
 80071a8:	fffffcff 	.word	0xfffffcff
 80071ac:	ffffdfff 	.word	0xffffdfff
 80071b0:	40012c00 	.word	0x40012c00
 80071b4:	40014400 	.word	0x40014400
 80071b8:	40014800 	.word	0x40014800
 80071bc:	ffffbfff 	.word	0xffffbfff

080071c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	4a21      	ldr	r2, [pc, #132]	@ (800725c <TIM_OC5_SetConfig+0x9c>)
 80071d6:	401a      	ands	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4a1d      	ldr	r2, [pc, #116]	@ (8007260 <TIM_OC5_SetConfig+0xa0>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	4a19      	ldr	r2, [pc, #100]	@ (8007264 <TIM_OC5_SetConfig+0xa4>)
 80071fe:	4013      	ands	r3, r2
 8007200:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	041b      	lsls	r3, r3, #16
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	4313      	orrs	r3, r2
 800720c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a15      	ldr	r2, [pc, #84]	@ (8007268 <TIM_OC5_SetConfig+0xa8>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d007      	beq.n	8007226 <TIM_OC5_SetConfig+0x66>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a14      	ldr	r2, [pc, #80]	@ (800726c <TIM_OC5_SetConfig+0xac>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d003      	beq.n	8007226 <TIM_OC5_SetConfig+0x66>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a13      	ldr	r2, [pc, #76]	@ (8007270 <TIM_OC5_SetConfig+0xb0>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d109      	bne.n	800723a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	4a0c      	ldr	r2, [pc, #48]	@ (800725c <TIM_OC5_SetConfig+0x9c>)
 800722a:	4013      	ands	r3, r2
 800722c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	021b      	lsls	r3, r3, #8
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	621a      	str	r2, [r3, #32]
}
 8007254:	46c0      	nop			@ (mov r8, r8)
 8007256:	46bd      	mov	sp, r7
 8007258:	b006      	add	sp, #24
 800725a:	bd80      	pop	{r7, pc}
 800725c:	fffeffff 	.word	0xfffeffff
 8007260:	fffeff8f 	.word	0xfffeff8f
 8007264:	fffdffff 	.word	0xfffdffff
 8007268:	40012c00 	.word	0x40012c00
 800726c:	40014400 	.word	0x40014400
 8007270:	40014800 	.word	0x40014800

08007274 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	4a22      	ldr	r2, [pc, #136]	@ (8007314 <TIM_OC6_SetConfig+0xa0>)
 800728a:	401a      	ands	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800729a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4a1e      	ldr	r2, [pc, #120]	@ (8007318 <TIM_OC6_SetConfig+0xa4>)
 80072a0:	4013      	ands	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	4a1a      	ldr	r2, [pc, #104]	@ (800731c <TIM_OC6_SetConfig+0xa8>)
 80072b4:	4013      	ands	r3, r2
 80072b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	051b      	lsls	r3, r3, #20
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a16      	ldr	r2, [pc, #88]	@ (8007320 <TIM_OC6_SetConfig+0xac>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d007      	beq.n	80072dc <TIM_OC6_SetConfig+0x68>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a15      	ldr	r2, [pc, #84]	@ (8007324 <TIM_OC6_SetConfig+0xb0>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d003      	beq.n	80072dc <TIM_OC6_SetConfig+0x68>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a14      	ldr	r2, [pc, #80]	@ (8007328 <TIM_OC6_SetConfig+0xb4>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d109      	bne.n	80072f0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	4a13      	ldr	r2, [pc, #76]	@ (800732c <TIM_OC6_SetConfig+0xb8>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	029b      	lsls	r3, r3, #10
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	621a      	str	r2, [r3, #32]
}
 800730a:	46c0      	nop			@ (mov r8, r8)
 800730c:	46bd      	mov	sp, r7
 800730e:	b006      	add	sp, #24
 8007310:	bd80      	pop	{r7, pc}
 8007312:	46c0      	nop			@ (mov r8, r8)
 8007314:	ffefffff 	.word	0xffefffff
 8007318:	feff8fff 	.word	0xfeff8fff
 800731c:	ffdfffff 	.word	0xffdfffff
 8007320:	40012c00 	.word	0x40012c00
 8007324:	40014400 	.word	0x40014400
 8007328:	40014800 	.word	0x40014800
 800732c:	fffbffff 	.word	0xfffbffff

08007330 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	221f      	movs	r2, #31
 8007340:	4013      	ands	r3, r2
 8007342:	2201      	movs	r2, #1
 8007344:	409a      	lsls	r2, r3
 8007346:	0013      	movs	r3, r2
 8007348:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	43d2      	mvns	r2, r2
 8007352:	401a      	ands	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a1a      	ldr	r2, [r3, #32]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	211f      	movs	r1, #31
 8007360:	400b      	ands	r3, r1
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	4099      	lsls	r1, r3
 8007366:	000b      	movs	r3, r1
 8007368:	431a      	orrs	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	46c0      	nop			@ (mov r8, r8)
 8007370:	46bd      	mov	sp, r7
 8007372:	b006      	add	sp, #24
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	223c      	movs	r2, #60	@ 0x3c
 8007386:	5c9b      	ldrb	r3, [r3, r2]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d101      	bne.n	8007390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800738c:	2302      	movs	r3, #2
 800738e:	e050      	b.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	223c      	movs	r2, #60	@ 0x3c
 8007394:	2101      	movs	r1, #1
 8007396:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	223d      	movs	r2, #61	@ 0x3d
 800739c:	2102      	movs	r1, #2
 800739e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a21      	ldr	r2, [pc, #132]	@ (800743c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d108      	bne.n	80073cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4a20      	ldr	r2, [pc, #128]	@ (8007440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80073be:	4013      	ands	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2270      	movs	r2, #112	@ 0x70
 80073d0:	4393      	bics	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a14      	ldr	r2, [pc, #80]	@ (800743c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00a      	beq.n	8007406 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	2380      	movs	r3, #128	@ 0x80
 80073f6:	05db      	lsls	r3, r3, #23
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d004      	beq.n	8007406 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a10      	ldr	r2, [pc, #64]	@ (8007444 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d10c      	bne.n	8007420 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2280      	movs	r2, #128	@ 0x80
 800740a:	4393      	bics	r3, r2
 800740c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	4313      	orrs	r3, r2
 8007416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	223d      	movs	r2, #61	@ 0x3d
 8007424:	2101      	movs	r1, #1
 8007426:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	223c      	movs	r2, #60	@ 0x3c
 800742c:	2100      	movs	r1, #0
 800742e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	0018      	movs	r0, r3
 8007434:	46bd      	mov	sp, r7
 8007436:	b004      	add	sp, #16
 8007438:	bd80      	pop	{r7, pc}
 800743a:	46c0      	nop			@ (mov r8, r8)
 800743c:	40012c00 	.word	0x40012c00
 8007440:	ff0fffff 	.word	0xff0fffff
 8007444:	40000400 	.word	0x40000400

08007448 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007450:	46c0      	nop			@ (mov r8, r8)
 8007452:	46bd      	mov	sp, r7
 8007454:	b002      	add	sp, #8
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007460:	46c0      	nop			@ (mov r8, r8)
 8007462:	46bd      	mov	sp, r7
 8007464:	b002      	add	sp, #8
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007470:	46c0      	nop			@ (mov r8, r8)
 8007472:	46bd      	mov	sp, r7
 8007474:	b002      	add	sp, #8
 8007476:	bd80      	pop	{r7, pc}

08007478 <memset>:
 8007478:	0003      	movs	r3, r0
 800747a:	1882      	adds	r2, r0, r2
 800747c:	4293      	cmp	r3, r2
 800747e:	d100      	bne.n	8007482 <memset+0xa>
 8007480:	4770      	bx	lr
 8007482:	7019      	strb	r1, [r3, #0]
 8007484:	3301      	adds	r3, #1
 8007486:	e7f9      	b.n	800747c <memset+0x4>

08007488 <__libc_init_array>:
 8007488:	b570      	push	{r4, r5, r6, lr}
 800748a:	2600      	movs	r6, #0
 800748c:	4c0c      	ldr	r4, [pc, #48]	@ (80074c0 <__libc_init_array+0x38>)
 800748e:	4d0d      	ldr	r5, [pc, #52]	@ (80074c4 <__libc_init_array+0x3c>)
 8007490:	1b64      	subs	r4, r4, r5
 8007492:	10a4      	asrs	r4, r4, #2
 8007494:	42a6      	cmp	r6, r4
 8007496:	d109      	bne.n	80074ac <__libc_init_array+0x24>
 8007498:	2600      	movs	r6, #0
 800749a:	f000 f823 	bl	80074e4 <_init>
 800749e:	4c0a      	ldr	r4, [pc, #40]	@ (80074c8 <__libc_init_array+0x40>)
 80074a0:	4d0a      	ldr	r5, [pc, #40]	@ (80074cc <__libc_init_array+0x44>)
 80074a2:	1b64      	subs	r4, r4, r5
 80074a4:	10a4      	asrs	r4, r4, #2
 80074a6:	42a6      	cmp	r6, r4
 80074a8:	d105      	bne.n	80074b6 <__libc_init_array+0x2e>
 80074aa:	bd70      	pop	{r4, r5, r6, pc}
 80074ac:	00b3      	lsls	r3, r6, #2
 80074ae:	58eb      	ldr	r3, [r5, r3]
 80074b0:	4798      	blx	r3
 80074b2:	3601      	adds	r6, #1
 80074b4:	e7ee      	b.n	8007494 <__libc_init_array+0xc>
 80074b6:	00b3      	lsls	r3, r6, #2
 80074b8:	58eb      	ldr	r3, [r5, r3]
 80074ba:	4798      	blx	r3
 80074bc:	3601      	adds	r6, #1
 80074be:	e7f2      	b.n	80074a6 <__libc_init_array+0x1e>
 80074c0:	080075e4 	.word	0x080075e4
 80074c4:	080075e4 	.word	0x080075e4
 80074c8:	080075e8 	.word	0x080075e8
 80074cc:	080075e4 	.word	0x080075e4

080074d0 <memcpy>:
 80074d0:	2300      	movs	r3, #0
 80074d2:	b510      	push	{r4, lr}
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d100      	bne.n	80074da <memcpy+0xa>
 80074d8:	bd10      	pop	{r4, pc}
 80074da:	5ccc      	ldrb	r4, [r1, r3]
 80074dc:	54c4      	strb	r4, [r0, r3]
 80074de:	3301      	adds	r3, #1
 80074e0:	e7f8      	b.n	80074d4 <memcpy+0x4>
	...

080074e4 <_init>:
 80074e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e6:	46c0      	nop			@ (mov r8, r8)
 80074e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ea:	bc08      	pop	{r3}
 80074ec:	469e      	mov	lr, r3
 80074ee:	4770      	bx	lr

080074f0 <_fini>:
 80074f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f2:	46c0      	nop			@ (mov r8, r8)
 80074f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074f6:	bc08      	pop	{r3}
 80074f8:	469e      	mov	lr, r3
 80074fa:	4770      	bx	lr
