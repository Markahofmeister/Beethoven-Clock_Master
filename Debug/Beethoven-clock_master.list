
Beethoven-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08007480  08007480  00008480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007568  08007568  00009074  2**0
                  CONTENTS
  4 .ARM          00000000  08007568  08007568  00009074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007568  08007568  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007568  08007568  00008568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800756c  0800756c  0000856c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007570  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000074  080075e4  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  080075e4  00009458  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167c5  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b7  00000000  00000000  0001f861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  00022b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000112b  00000000  00000000  00024118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fc6  00000000  00000000  00025243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aea4  00000000  00000000  0003e209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c3a7  00000000  00000000  000590ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5454  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005014  00000000  00000000  000f5498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000fa4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007468 	.word	0x08007468

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08007468 	.word	0x08007468

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-low hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2200      	movs	r2, #0
 800025a:	0019      	movs	r1, r3
 800025c:	f003 f841 	bl	80032e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2201      	movs	r2, #1
 800026c:	0019      	movs	r1, r3
 800026e:	f003 f838 	bl	80032e2 <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f006 f8f6 	bl	8006468 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f006 f8a5 	bl	80063d0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f003 f84b 	bl	80034f4 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f003 f95f 	bl	8003748 <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	08007480 	.word	0x08007480

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f003 f80d 	bl	80034f4 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f002 ffe7 	bl	80034f4 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f003 f8fb 	bl	8003748 <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	08007484 	.word	0x08007484

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f002 ffa3 	bl	80034f4 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f003 f8b7 	bl	8003748 <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	08007488 	.word	0x08007488

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f002 ff53 	bl	80034f4 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f003 f867 	bl	8003748 <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	0800748c 	.word	0x0800748c
 8000700:	08007494 	.word	0x08007494

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f002 fed1 	bl	80034f4 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f002 ffe5 	bl	8003748 <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f002 fe72 	bl	80034f4 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f002 fe51 	bl	80034f4 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f002 ff65 	bl	8003748 <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	0800748c 	.word	0x0800748c
 8000894:	08007494 	.word	0x08007494

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f002 fdf7 	bl	80034f4 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f002 fdd5 	bl	80034f4 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f002 fef2 	bl	8003748 <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	0800749c 	.word	0x0800749c
 8000978:	0800748c 	.word	0x0800748c

0800097c <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b09a      	sub	sp, #104	@ 0x68
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000988:	2567      	movs	r5, #103	@ 0x67
 800098a:	197b      	adds	r3, r7, r5
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 8000990:	243c      	movs	r4, #60	@ 0x3c
 8000992:	193b      	adds	r3, r7, r4
 8000994:	0018      	movs	r0, r3
 8000996:	2328      	movs	r3, #40	@ 0x28
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f006 fd2e 	bl	80073fc <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	0021      	movs	r1, r4
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	789a      	ldrb	r2, [r3, #2]
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	78da      	ldrb	r2, [r3, #3]
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	78da      	ldrb	r2, [r3, #3]
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009d6:	0008      	movs	r0, r1
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009de:	183b      	adds	r3, r7, r0
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80009e4:	183b      	adds	r3, r7, r0
 80009e6:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <initRTCInternalAlarm+0xd0>)
 80009e8:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009ea:	183b      	adds	r3, r7, r0
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009f0:	183b      	adds	r3, r7, r0
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 80009f6:	183b      	adds	r3, r7, r0
 80009f8:	2220      	movs	r2, #32
 80009fa:	2101      	movs	r1, #1
 80009fc:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 80009fe:	0001      	movs	r1, r0
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8000a08:	197c      	adds	r4, r7, r5
 8000a0a:	1879      	adds	r1, r7, r1
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f004 ffad 	bl	8005970 <HAL_RTC_SetAlarm_IT>
 8000a16:	0003      	movs	r3, r0
 8000a18:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000a1a:	197b      	adds	r3, r7, r5
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <initRTCInternalAlarm+0xac>
		return halRet;
 8000a22:	197b      	adds	r3, r7, r5
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	e00d      	b.n	8000a44 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8000a28:	2567      	movs	r5, #103	@ 0x67
 8000a2a:	197c      	adds	r4, r7, r5
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	005a      	lsls	r2, r3, #1
 8000a30:	2314      	movs	r3, #20
 8000a32:	18f9      	adds	r1, r7, r3
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	2300      	movs	r3, #0
 8000a38:	f005 f8da 	bl	8005bf0 <HAL_RTC_GetAlarm>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	7023      	strb	r3, [r4, #0]
	return halRet;
 8000a40:	197b      	adds	r3, r7, r5
 8000a42:	781b      	ldrb	r3, [r3, #0]

}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b01a      	add	sp, #104	@ 0x68
 8000a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a4c:	80800080 	.word	0x80800080

08000a50 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2200      	movs	r2, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f004 feda 	bl	800581c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f004 ff30 	bl	80058d4 <HAL_RTC_GetDate>

}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b004      	add	sp, #16
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	b08d      	sub	sp, #52	@ 0x34
 8000a80:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f001 ffbd 	bl	8002a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f97b 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 fbe9 	bl	8001260 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a8e:	f000 fbc1 	bl	8001214 <MX_DMA_Init>
  MX_RTC_Init();
 8000a92:	f000 fa4b 	bl	8000f2c <MX_RTC_Init>
  MX_I2C1_Init();
 8000a96:	f000 f9df 	bl	8000e58 <MX_I2C1_Init>
  MX_I2S1_Init();
 8000a9a:	f000 fa1d 	bl	8000ed8 <MX_I2S1_Init>
  MX_SPI2_Init();
 8000a9e:	f000 facb 	bl	8001038 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000aa2:	f000 fb07 	bl	80010b4 <MX_TIM2_Init>
  MX_TIM14_Init();
 8000aa6:	f000 fb65 	bl	8001174 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000aaa:	f000 fb89 	bl	80011c0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	  // HAL Status handle for error-checking
	  HAL_StatusTypeDef halRet = HAL_OK;
 8000aae:	2317      	movs	r3, #23
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]

	  // Determine which time format we will be using
	  	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 8000ab6:	4b9b      	ldr	r3, [pc, #620]	@ (8000d24 <main+0x2a8>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2210      	movs	r2, #16
 8000abc:	0011      	movs	r1, r2
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f002 fbf2 	bl	80032a8 <HAL_GPIO_ReadPin>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <main+0x2ac>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d103      	bne.n	8000ad8 <main+0x5c>
	  	  userTimeFormat = RTC_HOURFORMAT_12;
 8000ad0:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <main+0x2b0>)
 8000ad2:	2240      	movs	r2, #64	@ 0x40
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	e002      	b.n	8000ade <main+0x62>
	  	}
	  	else {
	  	  userTimeFormat = RTC_HOURFORMAT_24;
 8000ad8:	4b94      	ldr	r3, [pc, #592]	@ (8000d2c <main+0x2b0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
	  	}

  	  // Set Smooth Calibration Value
	  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8000ade:	4b94      	ldr	r3, [pc, #592]	@ (8000d30 <main+0x2b4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2517      	movs	r5, #23
 8000ae4:	197c      	adds	r4, r7, r5
 8000ae6:	2280      	movs	r2, #128	@ 0x80
 8000ae8:	01d1      	lsls	r1, r2, #7
 8000aea:	4892      	ldr	r0, [pc, #584]	@ (8000d34 <main+0x2b8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	f005 fa74 	bl	8005fda <HAL_RTCEx_SetSmoothCalib>
 8000af2:	0003      	movs	r3, r0
 8000af4:	7023      	strb	r3, [r4, #0]
									RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
	  if(halRet != HAL_OK) {
 8000af6:	197b      	adds	r3, r7, r5
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <main+0x86>
		  // Failure to talk to RTC is a hard failure
		  dispFailure();
 8000afe:	f001 f931 	bl	8001d64 <dispFailure>
	  }

	  // Init the internal RTC alarm time to track the current time
	  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8000b02:	2517      	movs	r5, #23
 8000b04:	197c      	adds	r4, r7, r5
 8000b06:	4a8c      	ldr	r2, [pc, #560]	@ (8000d38 <main+0x2bc>)
 8000b08:	498c      	ldr	r1, [pc, #560]	@ (8000d3c <main+0x2c0>)
 8000b0a:	4b8a      	ldr	r3, [pc, #552]	@ (8000d34 <main+0x2b8>)
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff ff35 	bl	800097c <initRTCInternalAlarm>
 8000b12:	0003      	movs	r3, r0
 8000b14:	7023      	strb	r3, [r4, #0]
	  if(halRet != HAL_OK) {
 8000b16:	197b      	adds	r3, r7, r5
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <main+0xa6>
		  // Failure to initialize RTC alarm is a hard failure
		  dispFailure();
 8000b1e:	f001 f921 	bl	8001d64 <dispFailure>
		}

	  // Initialize all GPIOs to be used with 7 segment display
		sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000b22:	2380      	movs	r3, #128	@ 0x80
 8000b24:	009c      	lsls	r4, r3, #2
 8000b26:	2380      	movs	r3, #128	@ 0x80
 8000b28:	00dd      	lsls	r5, r3, #3
 8000b2a:	2680      	movs	r6, #128	@ 0x80
 8000b2c:	2340      	movs	r3, #64	@ 0x40
 8000b2e:	469c      	mov	ip, r3
 8000b30:	2380      	movs	r3, #128	@ 0x80
 8000b32:	011a      	lsls	r2, r3, #4
 8000b34:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <main+0x2c4>)
 8000b36:	6819      	ldr	r1, [r3, #0]
 8000b38:	4b82      	ldr	r3, [pc, #520]	@ (8000d44 <main+0x2c8>)
 8000b3a:	6818      	ldr	r0, [r3, #0]
 8000b3c:	4b82      	ldr	r3, [pc, #520]	@ (8000d48 <main+0x2cc>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	9304      	str	r3, [sp, #16]
 8000b42:	9003      	str	r0, [sp, #12]
 8000b44:	9102      	str	r1, [sp, #8]
 8000b46:	4b81      	ldr	r3, [pc, #516]	@ (8000d4c <main+0x2d0>)
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	9200      	str	r2, [sp, #0]
 8000b4c:	4663      	mov	r3, ip
 8000b4e:	0032      	movs	r2, r6
 8000b50:	0029      	movs	r1, r5
 8000b52:	0020      	movs	r0, r4
 8000b54:	f001 f9ae 	bl	8001eb4 <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


		halRet = updateAndDisplayTime();
 8000b58:	2517      	movs	r5, #23
 8000b5a:	197c      	adds	r4, r7, r5
 8000b5c:	f000 fc92 	bl	8001484 <updateAndDisplayTime>
 8000b60:	0003      	movs	r3, r0
 8000b62:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000b64:	197b      	adds	r3, r7, r5
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <main+0xf4>
		  // Failure to display current time is a hard failure
		  dispFailure();
 8000b6c:	f001 f8fa 	bl	8001d64 <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

		// Used to separate return initializations into critical and non-critical errors.
		uint8_t initRet = 0;
 8000b70:	2116      	movs	r1, #22
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]

		initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000b78:	4b71      	ldr	r3, [pc, #452]	@ (8000d40 <main+0x2c4>)
 8000b7a:	681d      	ldr	r5, [r3, #0]
 8000b7c:	2380      	movs	r3, #128	@ 0x80
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4a73      	ldr	r2, [pc, #460]	@ (8000d50 <main+0x2d4>)
 8000b82:	7812      	ldrb	r2, [r2, #0]
 8000b84:	187c      	adds	r4, r7, r1
 8000b86:	4e73      	ldr	r6, [pc, #460]	@ (8000d54 <main+0x2d8>)
 8000b88:	4973      	ldr	r1, [pc, #460]	@ (8000d58 <main+0x2dc>)
 8000b8a:	4874      	ldr	r0, [pc, #464]	@ (8000d5c <main+0x2e0>)
 8000b8c:	9201      	str	r2, [sp, #4]
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	0033      	movs	r3, r6
 8000b92:	002a      	movs	r2, r5
 8000b94:	f7ff fb42 	bl	800021c <capTouch_Init>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	7023      	strb	r3, [r4, #0]
								&capTouchResetPort, capTouchResetPin, capTouchChannels);
		if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8000b9c:	2116      	movs	r1, #22
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d007      	beq.n	8000bb6 <main+0x13a>
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d003      	beq.n	8000bb6 <main+0x13a>
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d102      	bne.n	8000bbc <main+0x140>
			/* Critical Errors:
			 * 1 = Failure to read correct device ID
			 * 2 = Failure to read Keys
			 * 3 = Failure to enable keys
			 */
			dispFailure();
 8000bb6:	f001 f8d5 	bl	8001d64 <dispFailure>
 8000bba:	e00d      	b.n	8000bd8 <main+0x15c>
		}
		else if (initRet == 2) {
 8000bbc:	2316      	movs	r3, #22
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d102      	bne.n	8000bcc <main+0x150>
			/*
			 * Non-critical Errors:
			 * 2 = Failure to Recalibrate
			 */
			dispFault();
 8000bc6:	f001 f8bd 	bl	8001d44 <dispFault>
 8000bca:	e005      	b.n	8000bd8 <main+0x15c>
		}
		else if(initRet == 0) {
 8000bcc:	2316      	movs	r3, #22
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <main+0x15c>
			// initRet = 0 = all is well
			__NOP();
 8000bd6:	46c0      	nop			@ (mov r8, r8)
		}

		// Set averaging factor
		uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000bd8:	4b61      	ldr	r3, [pc, #388]	@ (8000d60 <main+0x2e4>)
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	210c      	movs	r1, #12
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	4b5f      	ldr	r3, [pc, #380]	@ (8000d60 <main+0x2e4>)
 8000be4:	781a      	ldrb	r2, [r3, #0]
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	705a      	strb	r2, [r3, #1]
 8000bea:	4b5d      	ldr	r3, [pc, #372]	@ (8000d60 <main+0x2e4>)
 8000bec:	781a      	ldrb	r2, [r3, #0]
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	709a      	strb	r2, [r3, #2]
 8000bf2:	4b5b      	ldr	r3, [pc, #364]	@ (8000d60 <main+0x2e4>)
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	70da      	strb	r2, [r3, #3]
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	711a      	strb	r2, [r3, #4]
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	715a      	strb	r2, [r3, #5]
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2200      	movs	r2, #0
 8000c0a:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000c0c:	2517      	movs	r5, #23
 8000c0e:	197c      	adds	r4, r7, r5
 8000c10:	187a      	adds	r2, r7, r1
 8000c12:	4b52      	ldr	r3, [pc, #328]	@ (8000d5c <main+0x2e0>)
 8000c14:	0011      	movs	r1, r2
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff fd74 	bl	8000704 <capTouch_SetAveragingFactor>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8000c20:	197b      	adds	r3, r7, r5
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <main+0x1b0>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 8000c28:	f001 f88c 	bl	8001d44 <dispFault>
		}

		// Set detection integration factors
		uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000c2c:	4b4d      	ldr	r3, [pc, #308]	@ (8000d64 <main+0x2e8>)
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	4b4b      	ldr	r3, [pc, #300]	@ (8000d64 <main+0x2e8>)
 8000c36:	781a      	ldrb	r2, [r3, #0]
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	705a      	strb	r2, [r3, #1]
 8000c3c:	4b49      	ldr	r3, [pc, #292]	@ (8000d64 <main+0x2e8>)
 8000c3e:	781a      	ldrb	r2, [r3, #0]
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	709a      	strb	r2, [r3, #2]
 8000c44:	4b47      	ldr	r3, [pc, #284]	@ (8000d64 <main+0x2e8>)
 8000c46:	781a      	ldrb	r2, [r3, #0]
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	70da      	strb	r2, [r3, #3]
 8000c4c:	4b45      	ldr	r3, [pc, #276]	@ (8000d64 <main+0x2e8>)
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	711a      	strb	r2, [r3, #4]
 8000c54:	4b43      	ldr	r3, [pc, #268]	@ (8000d64 <main+0x2e8>)
 8000c56:	781a      	ldrb	r2, [r3, #0]
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	715a      	strb	r2, [r3, #5]
 8000c5c:	4b41      	ldr	r3, [pc, #260]	@ (8000d64 <main+0x2e8>)
 8000c5e:	781a      	ldrb	r2, [r3, #0]
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000c64:	2517      	movs	r5, #23
 8000c66:	197c      	adds	r4, r7, r5
 8000c68:	1d3a      	adds	r2, r7, #4
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d5c <main+0x2e0>)
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f7ff fe12 	bl	8000898 <capTouch_SetDetectionIntegrator>
 8000c74:	0003      	movs	r3, r0
 8000c76:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000c78:	197b      	adds	r3, r7, r5
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <main+0x208>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 8000c80:	f001 f860 	bl	8001d44 <dispFault>
		}

		userAlarmToggle = false;			//Default to off
 8000c84:	4b38      	ldr	r3, [pc, #224]	@ (8000d68 <main+0x2ec>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

		if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8000c8a:	4b38      	ldr	r3, [pc, #224]	@ (8000d6c <main+0x2f0>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b29      	ldr	r3, [pc, #164]	@ (8000d34 <main+0x2b8>)
 8000c90:	0011      	movs	r1, r2
 8000c92:	0018      	movs	r0, r3
 8000c94:	f005 fa71 	bl	800617a <HAL_RTCEx_BKUPRead>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d11c      	bne.n	8000cda <main+0x25e>

			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8000ca0:	4b33      	ldr	r3, [pc, #204]	@ (8000d70 <main+0x2f4>)
 8000ca2:	6819      	ldr	r1, [r3, #0]
 8000ca4:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <main+0x2b8>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f005 fa49 	bl	8006140 <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8000cae:	4b31      	ldr	r3, [pc, #196]	@ (8000d74 <main+0x2f8>)
 8000cb0:	6819      	ldr	r1, [r3, #0]
 8000cb2:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <main+0x2b8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f005 fa42 	bl	8006140 <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8000cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8000d78 <main+0x2fc>)
 8000cbe:	6819      	ldr	r1, [r3, #0]
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <main+0x2b8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f005 fa3b 	bl	8006140 <HAL_RTCEx_BKUPWrite>

			// Write backup register with a non-zero value to signify that it has been initialized before
			HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8000cca:	4b28      	ldr	r3, [pc, #160]	@ (8000d6c <main+0x2f0>)
 8000ccc:	6819      	ldr	r1, [r3, #0]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	425a      	negs	r2, r3
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <main+0x2b8>)
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f005 fa33 	bl	8006140 <HAL_RTCEx_BKUPWrite>

		}

		userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8000cda:	4b25      	ldr	r3, [pc, #148]	@ (8000d70 <main+0x2f4>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <main+0x2b8>)
 8000ce0:	0011      	movs	r1, r2
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f005 fa49 	bl	800617a <HAL_RTCEx_BKUPRead>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	4b23      	ldr	r3, [pc, #140]	@ (8000d7c <main+0x300>)
 8000cee:	701a      	strb	r2, [r3, #0]
		userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8000cf0:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <main+0x2f8>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <main+0x2b8>)
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f005 fa3e 	bl	800617a <HAL_RTCEx_BKUPRead>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <main+0x300>)
 8000d04:	705a      	strb	r2, [r3, #1]
		userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8000d06:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <main+0x2fc>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <main+0x2b8>)
 8000d0c:	0011      	movs	r1, r2
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f005 fa33 	bl	800617a <HAL_RTCEx_BKUPRead>
 8000d14:	0003      	movs	r3, r0
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <main+0x300>)
 8000d1a:	70da      	strb	r2, [r3, #3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

		__NOP();
 8000d1c:	46c0      	nop			@ (mov r8, r8)

  while (1)
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	e7fd      	b.n	8000d1e <main+0x2a2>
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000040 	.word	0x20000040
 8000d2c:	200000c4 	.word	0x200000c4
 8000d30:	2000002c 	.word	0x2000002c
 8000d34:	200001b4 	.word	0x200001b4
 8000d38:	200000a8 	.word	0x200000a8
 8000d3c:	20000094 	.word	0x20000094
 8000d40:	20000048 	.word	0x20000048
 8000d44:	20000044 	.word	0x20000044
 8000d48:	20000030 	.word	0x20000030
 8000d4c:	20000014 	.word	0x20000014
 8000d50:	20000010 	.word	0x20000010
 8000d54:	2000000c 	.word	0x2000000c
 8000d58:	200000c8 	.word	0x200000c8
 8000d5c:	200003e4 	.word	0x200003e4
 8000d60:	20000011 	.word	0x20000011
 8000d64:	20000012 	.word	0x20000012
 8000d68:	20000091 	.word	0x20000091
 8000d6c:	2000003c 	.word	0x2000003c
 8000d70:	200000c0 	.word	0x200000c0
 8000d74:	20000034 	.word	0x20000034
 8000d78:	20000038 	.word	0x20000038
 8000d7c:	200000ac 	.word	0x200000ac

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b093      	sub	sp, #76	@ 0x4c
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	2410      	movs	r4, #16
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	2338      	movs	r3, #56	@ 0x38
 8000d8e:	001a      	movs	r2, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	f006 fb33 	bl	80073fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d96:	003b      	movs	r3, r7
 8000d98:	0018      	movs	r0, r3
 8000d9a:	2310      	movs	r3, #16
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f006 fb2c 	bl	80073fc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da4:	2380      	movs	r3, #128	@ 0x80
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f003 fa55 	bl	8004258 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dae:	f003 fa35 	bl	800421c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000db2:	4b28      	ldr	r3, [pc, #160]	@ (8000e54 <SystemClock_Config+0xd4>)
 8000db4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000db6:	4b27      	ldr	r3, [pc, #156]	@ (8000e54 <SystemClock_Config+0xd4>)
 8000db8:	2118      	movs	r1, #24
 8000dba:	438a      	bics	r2, r1
 8000dbc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	220d      	movs	r2, #13
 8000dc2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	2280      	movs	r2, #128	@ 0x80
 8000dc8:	0252      	lsls	r2, r2, #9
 8000dca:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000dcc:	0021      	movs	r1, r4
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2202      	movs	r2, #2
 8000dde:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2203      	movs	r2, #3
 8000de4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2200      	movs	r2, #0
 8000dea:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2208      	movs	r2, #8
 8000df0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	22c0      	movs	r2, #192	@ 0xc0
 8000df6:	02d2      	lsls	r2, r2, #11
 8000df8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2280      	movs	r2, #128	@ 0x80
 8000dfe:	0492      	lsls	r2, r2, #18
 8000e00:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2280      	movs	r2, #128	@ 0x80
 8000e06:	0592      	lsls	r2, r2, #22
 8000e08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f003 fa6f 	bl	80042f0 <HAL_RCC_OscConfig>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e16:	f001 f846 	bl	8001ea6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e20:	003b      	movs	r3, r7
 8000e22:	2202      	movs	r2, #2
 8000e24:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e26:	003b      	movs	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e32:	003b      	movs	r3, r7
 8000e34:	2102      	movs	r1, #2
 8000e36:	0018      	movs	r0, r3
 8000e38:	f003 fd74 	bl	8004924 <HAL_RCC_ClockConfig>
 8000e3c:	1e03      	subs	r3, r0, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e40:	f001 f831 	bl	8001ea6 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 8000e44:	2000      	movs	r0, #0
 8000e46:	f004 fb27 	bl	8005498 <HAL_RCCEx_EnableLSCO>
}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b013      	add	sp, #76	@ 0x4c
 8000e50:	bd90      	pop	{r4, r7, pc}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	40021000 	.word	0x40021000

08000e58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ecc <MX_I2C1_Init+0x74>)
 8000e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed0 <MX_I2C1_Init+0x78>)
 8000e60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <MX_I2C1_Init+0x74>)
 8000e64:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed4 <MX_I2C1_Init+0x7c>)
 8000e66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e68:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <MX_I2C1_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <MX_I2C1_Init+0x74>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e74:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <MX_I2C1_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <MX_I2C1_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e80:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <MX_I2C1_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <MX_I2C1_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <MX_I2C1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <MX_I2C1_Init+0x74>)
 8000e94:	0018      	movs	r0, r3
 8000e96:	f002 fa87 	bl	80033a8 <HAL_I2C_Init>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e9e:	f001 f802 	bl	8001ea6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <MX_I2C1_Init+0x74>)
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f003 f82a 	bl	8003f00 <HAL_I2CEx_ConfigAnalogFilter>
 8000eac:	1e03      	subs	r3, r0, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000eb0:	f000 fff9 	bl	8001ea6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <MX_I2C1_Init+0x74>)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f003 f86d 	bl	8003f98 <HAL_I2CEx_ConfigDigitalFilter>
 8000ebe:	1e03      	subs	r3, r0, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ec2:	f000 fff0 	bl	8001ea6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200000c8 	.word	0x200000c8
 8000ed0:	40005400 	.word	0x40005400
 8000ed4:	00602173 	.word	0x00602173

08000ed8 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000edc:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <MX_I2S1_Init+0x48>)
 8000ede:	4a11      	ldr	r2, [pc, #68]	@ (8000f24 <MX_I2S1_Init+0x4c>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <MX_I2S1_Init+0x48>)
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000eea:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <MX_I2S1_Init+0x48>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <MX_I2S1_Init+0x48>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <MX_I2S1_Init+0x48>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <MX_I2S1_Init+0x48>)
 8000efe:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <MX_I2S1_Init+0x50>)
 8000f00:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <MX_I2S1_Init+0x48>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <MX_I2S1_Init+0x48>)
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f003 f890 	bl	8004030 <HAL_I2S_Init>
 8000f10:	1e03      	subs	r3, r0, #0
 8000f12:	d001      	beq.n	8000f18 <MX_I2S1_Init+0x40>
  {
    Error_Handler();
 8000f14:	f000 ffc7 	bl	8001ea6 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	2000011c 	.word	0x2000011c
 8000f24:	40013000 	.word	0x40013000
 8000f28:	0000ac44 	.word	0x0000ac44

08000f2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b090      	sub	sp, #64	@ 0x40
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f32:	232c      	movs	r3, #44	@ 0x2c
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	0018      	movs	r0, r3
 8000f38:	2314      	movs	r3, #20
 8000f3a:	001a      	movs	r2, r3
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	f006 fa5d 	bl	80073fc <memset>
  RTC_DateTypeDef sDate = {0};
 8000f42:	2328      	movs	r3, #40	@ 0x28
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000f4a:	003b      	movs	r3, r7
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	2328      	movs	r3, #40	@ 0x28
 8000f50:	001a      	movs	r2, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	f006 fa52 	bl	80073fc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f58:	4b33      	ldr	r3, [pc, #204]	@ (8001028 <MX_RTC_Init+0xfc>)
 8000f5a:	4a34      	ldr	r2, [pc, #208]	@ (800102c <MX_RTC_Init+0x100>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000f5e:	4b32      	ldr	r3, [pc, #200]	@ (8001028 <MX_RTC_Init+0xfc>)
 8000f60:	2240      	movs	r2, #64	@ 0x40
 8000f62:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000f64:	4b30      	ldr	r3, [pc, #192]	@ (8001028 <MX_RTC_Init+0xfc>)
 8000f66:	227f      	movs	r2, #127	@ 0x7f
 8000f68:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001028 <MX_RTC_Init+0xfc>)
 8000f6c:	22ff      	movs	r2, #255	@ 0xff
 8000f6e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f70:	4b2d      	ldr	r3, [pc, #180]	@ (8001028 <MX_RTC_Init+0xfc>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f76:	4b2c      	ldr	r3, [pc, #176]	@ (8001028 <MX_RTC_Init+0xfc>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001028 <MX_RTC_Init+0xfc>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f82:	4b29      	ldr	r3, [pc, #164]	@ (8001028 <MX_RTC_Init+0xfc>)
 8000f84:	2280      	movs	r2, #128	@ 0x80
 8000f86:	05d2      	lsls	r2, r2, #23
 8000f88:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000f8a:	4b27      	ldr	r3, [pc, #156]	@ (8001028 <MX_RTC_Init+0xfc>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f90:	4b25      	ldr	r3, [pc, #148]	@ (8001028 <MX_RTC_Init+0xfc>)
 8000f92:	0018      	movs	r0, r3
 8000f94:	f004 faf8 	bl	8005588 <HAL_RTC_Init>
 8000f98:	1e03      	subs	r3, r0, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000f9c:	f000 ff83 	bl	8001ea6 <Error_Handler>
//    Error_Handler();
//  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000fa0:	003b      	movs	r3, r7
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000fa6:	003b      	movs	r3, r7
 8000fa8:	2201      	movs	r2, #1
 8000faa:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000fac:	003b      	movs	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000fb8:	003b      	movs	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fbe:	003b      	movs	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fc4:	003b      	movs	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000fca:	003b      	movs	r3, r7
 8000fcc:	4a18      	ldr	r2, [pc, #96]	@ (8001030 <MX_RTC_Init+0x104>)
 8000fce:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000fd0:	003b      	movs	r3, r7
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000fd6:	003b      	movs	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000fdc:	003b      	movs	r3, r7
 8000fde:	2220      	movs	r2, #32
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000fe4:	003b      	movs	r3, r7
 8000fe6:	2280      	movs	r2, #128	@ 0x80
 8000fe8:	0052      	lsls	r2, r2, #1
 8000fea:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000fec:	0039      	movs	r1, r7
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_RTC_Init+0xfc>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f004 fcbc 	bl	8005970 <HAL_RTC_SetAlarm_IT>
 8000ff8:	1e03      	subs	r3, r0, #0
 8000ffa:	d001      	beq.n	8001000 <MX_RTC_Init+0xd4>
  {
    Error_Handler();
 8000ffc:	f000 ff53 	bl	8001ea6 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_RTC_Init+0xfc>)
 8001002:	2100      	movs	r1, #0
 8001004:	0018      	movs	r0, r3
 8001006:	f005 f84b 	bl	80060a0 <HAL_RTCEx_SetCalibrationOutPut>
 800100a:	1e03      	subs	r3, r0, #0
 800100c:	d001      	beq.n	8001012 <MX_RTC_Init+0xe6>
  {
    Error_Handler();
 800100e:	f000 ff4a 	bl	8001ea6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 8001012:	4908      	ldr	r1, [pc, #32]	@ (8001034 <MX_RTC_Init+0x108>)
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <MX_RTC_Init+0xfc>)
 8001016:	2200      	movs	r2, #0
 8001018:	0018      	movs	r0, r3
 800101a:	f004 fbff 	bl	800581c <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b010      	add	sp, #64	@ 0x40
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	200001b4 	.word	0x200001b4
 800102c:	40002800 	.word	0x40002800
 8001030:	80800080 	.word	0x80800080
 8001034:	20000094 	.word	0x20000094

08001038 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800103c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <MX_SPI2_Init+0x74>)
 800103e:	4a1c      	ldr	r2, [pc, #112]	@ (80010b0 <MX_SPI2_Init+0x78>)
 8001040:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001042:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_SPI2_Init+0x74>)
 8001044:	2282      	movs	r2, #130	@ 0x82
 8001046:	0052      	lsls	r2, r2, #1
 8001048:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800104a:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <MX_SPI2_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001050:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <MX_SPI2_Init+0x74>)
 8001052:	22e0      	movs	r2, #224	@ 0xe0
 8001054:	00d2      	lsls	r2, r2, #3
 8001056:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <MX_SPI2_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <MX_SPI2_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_SPI2_Init+0x74>)
 8001066:	2280      	movs	r2, #128	@ 0x80
 8001068:	0092      	lsls	r2, r2, #2
 800106a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_SPI2_Init+0x74>)
 800106e:	2210      	movs	r2, #16
 8001070:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_SPI2_Init+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_SPI2_Init+0x74>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <MX_SPI2_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_SPI2_Init+0x74>)
 8001086:	2207      	movs	r2, #7
 8001088:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <MX_SPI2_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_SPI2_Init+0x74>)
 8001092:	2208      	movs	r2, #8
 8001094:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001096:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <MX_SPI2_Init+0x74>)
 8001098:	0018      	movs	r0, r3
 800109a:	f005 f889 	bl	80061b0 <HAL_SPI_Init>
 800109e:	1e03      	subs	r3, r0, #0
 80010a0:	d001      	beq.n	80010a6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80010a2:	f000 ff00 	bl	8001ea6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200001e0 	.word	0x200001e0
 80010b0:	40003800 	.word	0x40003800

080010b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ba:	231c      	movs	r3, #28
 80010bc:	18fb      	adds	r3, r7, r3
 80010be:	0018      	movs	r0, r3
 80010c0:	230c      	movs	r3, #12
 80010c2:	001a      	movs	r2, r3
 80010c4:	2100      	movs	r1, #0
 80010c6:	f006 f999 	bl	80073fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ca:	003b      	movs	r3, r7
 80010cc:	0018      	movs	r0, r3
 80010ce:	231c      	movs	r3, #28
 80010d0:	001a      	movs	r2, r3
 80010d2:	2100      	movs	r1, #0
 80010d4:	f006 f992 	bl	80073fc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d8:	4b24      	ldr	r3, [pc, #144]	@ (800116c <MX_TIM2_Init+0xb8>)
 80010da:	2280      	movs	r2, #128	@ 0x80
 80010dc:	05d2      	lsls	r2, r2, #23
 80010de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 80010e0:	4b22      	ldr	r3, [pc, #136]	@ (800116c <MX_TIM2_Init+0xb8>)
 80010e2:	4a23      	ldr	r2, [pc, #140]	@ (8001170 <MX_TIM2_Init+0xbc>)
 80010e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b21      	ldr	r3, [pc, #132]	@ (800116c <MX_TIM2_Init+0xb8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	@ (800116c <MX_TIM2_Init+0xb8>)
 80010ee:	2263      	movs	r2, #99	@ 0x63
 80010f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f2:	4b1e      	ldr	r3, [pc, #120]	@ (800116c <MX_TIM2_Init+0xb8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <MX_TIM2_Init+0xb8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010fe:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <MX_TIM2_Init+0xb8>)
 8001100:	0018      	movs	r0, r3
 8001102:	f005 fa59 	bl	80065b8 <HAL_TIM_PWM_Init>
 8001106:	1e03      	subs	r3, r0, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800110a:	f000 fecc 	bl	8001ea6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	211c      	movs	r1, #28
 8001110:	187b      	adds	r3, r7, r1
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001116:	187b      	adds	r3, r7, r1
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800111c:	187a      	adds	r2, r7, r1
 800111e:	4b13      	ldr	r3, [pc, #76]	@ (800116c <MX_TIM2_Init+0xb8>)
 8001120:	0011      	movs	r1, r2
 8001122:	0018      	movs	r0, r3
 8001124:	f006 f8ea 	bl	80072fc <HAL_TIMEx_MasterConfigSynchronization>
 8001128:	1e03      	subs	r3, r0, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800112c:	f000 febb 	bl	8001ea6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001130:	003b      	movs	r3, r7
 8001132:	2260      	movs	r2, #96	@ 0x60
 8001134:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001136:	003b      	movs	r3, r7
 8001138:	2200      	movs	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800113c:	003b      	movs	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001142:	003b      	movs	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001148:	0039      	movs	r1, r7
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <MX_TIM2_Init+0xb8>)
 800114c:	2208      	movs	r2, #8
 800114e:	0018      	movs	r0, r3
 8001150:	f005 fc70 	bl	8006a34 <HAL_TIM_PWM_ConfigChannel>
 8001154:	1e03      	subs	r3, r0, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001158:	f000 fea5 	bl	8001ea6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800115c:	4b03      	ldr	r3, [pc, #12]	@ (800116c <MX_TIM2_Init+0xb8>)
 800115e:	0018      	movs	r0, r3
 8001160:	f001 fb6a 	bl	8002838 <HAL_TIM_MspPostInit>

}
 8001164:	46c0      	nop			@ (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b00a      	add	sp, #40	@ 0x28
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200002fc 	.word	0x200002fc
 8001170:	0000031f 	.word	0x0000031f

08001174 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_TIM14_Init+0x40>)
 800117a:	4a0f      	ldr	r2, [pc, #60]	@ (80011b8 <MX_TIM14_Init+0x44>)
 800117c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 800117e:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <MX_TIM14_Init+0x40>)
 8001180:	22f4      	movs	r2, #244	@ 0xf4
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <MX_TIM14_Init+0x40>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_TIM14_Init+0x40>)
 800118e:	4a0b      	ldr	r2, [pc, #44]	@ (80011bc <MX_TIM14_Init+0x48>)
 8001190:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <MX_TIM14_Init+0x40>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_TIM14_Init+0x40>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800119e:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <MX_TIM14_Init+0x40>)
 80011a0:	0018      	movs	r0, r3
 80011a2:	f005 f8bd 	bl	8006320 <HAL_TIM_Base_Init>
 80011a6:	1e03      	subs	r3, r0, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80011aa:	f000 fe7c 	bl	8001ea6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000348 	.word	0x20000348
 80011b8:	40002000 	.word	0x40002000
 80011bc:	0000ffff 	.word	0x0000ffff

080011c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <MX_TIM16_Init+0x44>)
 80011c6:	4a10      	ldr	r2, [pc, #64]	@ (8001208 <MX_TIM16_Init+0x48>)
 80011c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 58595;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <MX_TIM16_Init+0x44>)
 80011cc:	4a0f      	ldr	r2, [pc, #60]	@ (800120c <MX_TIM16_Init+0x4c>)
 80011ce:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <MX_TIM16_Init+0x44>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <MX_TIM16_Init+0x44>)
 80011d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001210 <MX_TIM16_Init+0x50>)
 80011da:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011dc:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <MX_TIM16_Init+0x44>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 80011e2:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <MX_TIM16_Init+0x44>)
 80011e4:	220a      	movs	r2, #10
 80011e6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <MX_TIM16_Init+0x44>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011ee:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <MX_TIM16_Init+0x44>)
 80011f0:	0018      	movs	r0, r3
 80011f2:	f005 f895 	bl	8006320 <HAL_TIM_Base_Init>
 80011f6:	1e03      	subs	r3, r0, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80011fa:	f000 fe54 	bl	8001ea6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000394 	.word	0x20000394
 8001208:	40014400 	.word	0x40014400
 800120c:	0000e4e3 	.word	0x0000e4e3
 8001210:	0000ffff 	.word	0x0000ffff

08001214 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <MX_DMA_Init+0x48>)
 800121c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_DMA_Init+0x48>)
 8001220:	2101      	movs	r1, #1
 8001222:	430a      	orrs	r2, r1
 8001224:	639a      	str	r2, [r3, #56]	@ 0x38
 8001226:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <MX_DMA_Init+0x48>)
 8001228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800122a:	2201      	movs	r2, #1
 800122c:	4013      	ands	r3, r2
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2009      	movs	r0, #9
 8001238:	f001 fd14 	bl	8002c64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800123c:	2009      	movs	r0, #9
 800123e:	f001 fd26 	bl	8002c8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	200a      	movs	r0, #10
 8001248:	f001 fd0c 	bl	8002c64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800124c:	200a      	movs	r0, #10
 800124e:	f001 fd1e 	bl	8002c8e <HAL_NVIC_EnableIRQ>

}
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b002      	add	sp, #8
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	40021000 	.word	0x40021000

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b08b      	sub	sp, #44	@ 0x2c
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	2414      	movs	r4, #20
 8001268:	193b      	adds	r3, r7, r4
 800126a:	0018      	movs	r0, r3
 800126c:	2314      	movs	r3, #20
 800126e:	001a      	movs	r2, r3
 8001270:	2100      	movs	r1, #0
 8001272:	f006 f8c3 	bl	80073fc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	4b7d      	ldr	r3, [pc, #500]	@ (800146c <MX_GPIO_Init+0x20c>)
 8001278:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800127a:	4b7c      	ldr	r3, [pc, #496]	@ (800146c <MX_GPIO_Init+0x20c>)
 800127c:	2104      	movs	r1, #4
 800127e:	430a      	orrs	r2, r1
 8001280:	635a      	str	r2, [r3, #52]	@ 0x34
 8001282:	4b7a      	ldr	r3, [pc, #488]	@ (800146c <MX_GPIO_Init+0x20c>)
 8001284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001286:	2204      	movs	r2, #4
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800128e:	4b77      	ldr	r3, [pc, #476]	@ (800146c <MX_GPIO_Init+0x20c>)
 8001290:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001292:	4b76      	ldr	r3, [pc, #472]	@ (800146c <MX_GPIO_Init+0x20c>)
 8001294:	2120      	movs	r1, #32
 8001296:	430a      	orrs	r2, r1
 8001298:	635a      	str	r2, [r3, #52]	@ 0x34
 800129a:	4b74      	ldr	r3, [pc, #464]	@ (800146c <MX_GPIO_Init+0x20c>)
 800129c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129e:	2220      	movs	r2, #32
 80012a0:	4013      	ands	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	4b71      	ldr	r3, [pc, #452]	@ (800146c <MX_GPIO_Init+0x20c>)
 80012a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012aa:	4b70      	ldr	r3, [pc, #448]	@ (800146c <MX_GPIO_Init+0x20c>)
 80012ac:	2101      	movs	r1, #1
 80012ae:	430a      	orrs	r2, r1
 80012b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012b2:	4b6e      	ldr	r3, [pc, #440]	@ (800146c <MX_GPIO_Init+0x20c>)
 80012b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b6:	2201      	movs	r2, #1
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b6b      	ldr	r3, [pc, #428]	@ (800146c <MX_GPIO_Init+0x20c>)
 80012c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012c2:	4b6a      	ldr	r3, [pc, #424]	@ (800146c <MX_GPIO_Init+0x20c>)
 80012c4:	2102      	movs	r1, #2
 80012c6:	430a      	orrs	r2, r1
 80012c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ca:	4b68      	ldr	r3, [pc, #416]	@ (800146c <MX_GPIO_Init+0x20c>)
 80012cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ce:	2202      	movs	r2, #2
 80012d0:	4013      	ands	r3, r2
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d6:	4b65      	ldr	r3, [pc, #404]	@ (800146c <MX_GPIO_Init+0x20c>)
 80012d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012da:	4b64      	ldr	r3, [pc, #400]	@ (800146c <MX_GPIO_Init+0x20c>)
 80012dc:	2108      	movs	r1, #8
 80012de:	430a      	orrs	r2, r1
 80012e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012e2:	4b62      	ldr	r3, [pc, #392]	@ (800146c <MX_GPIO_Init+0x20c>)
 80012e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e6:	2208      	movs	r2, #8
 80012e8:	4013      	ands	r3, r2
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_MCLR_Pin, GPIO_PIN_SET);
 80012ee:	238e      	movs	r3, #142	@ 0x8e
 80012f0:	0119      	lsls	r1, r3, #4
 80012f2:	23a0      	movs	r3, #160	@ 0xa0
 80012f4:	05db      	lsls	r3, r3, #23
 80012f6:	2201      	movs	r2, #1
 80012f8:	0018      	movs	r0, r3
 80012fa:	f001 fff2 	bl	80032e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_ENABLE_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 80012fe:	495c      	ldr	r1, [pc, #368]	@ (8001470 <MX_GPIO_Init+0x210>)
 8001300:	4b5c      	ldr	r3, [pc, #368]	@ (8001474 <MX_GPIO_Init+0x214>)
 8001302:	2200      	movs	r2, #0
 8001304:	0018      	movs	r0, r3
 8001306:	f001 ffec 	bl	80032e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin, GPIO_PIN_RESET);
 800130a:	23c0      	movs	r3, #192	@ 0xc0
 800130c:	00d9      	lsls	r1, r3, #3
 800130e:	23a0      	movs	r3, #160	@ 0xa0
 8001310:	05db      	lsls	r3, r3, #23
 8001312:	2200      	movs	r2, #0
 8001314:	0018      	movs	r0, r3
 8001316:	f001 ffe4 	bl	80032e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 800131a:	4b57      	ldr	r3, [pc, #348]	@ (8001478 <MX_GPIO_Init+0x218>)
 800131c:	2200      	movs	r2, #0
 800131e:	2180      	movs	r1, #128	@ 0x80
 8001320:	0018      	movs	r0, r3
 8001322:	f001 ffde 	bl	80032e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAPTOUCH_RESET_GPIO_Port, CAPTOUCH_RESET_Pin, GPIO_PIN_SET);
 8001326:	2380      	movs	r3, #128	@ 0x80
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4852      	ldr	r0, [pc, #328]	@ (8001474 <MX_GPIO_Init+0x214>)
 800132c:	2201      	movs	r2, #1
 800132e:	0019      	movs	r1, r3
 8001330:	f001 ffd7 	bl	80032e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001334:	193b      	adds	r3, r7, r4
 8001336:	2204      	movs	r2, #4
 8001338:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	193b      	adds	r3, r7, r4
 800133c:	2203      	movs	r2, #3
 800133e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	193b      	adds	r3, r7, r4
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	193a      	adds	r2, r7, r4
 8001348:	23a0      	movs	r3, #160	@ 0xa0
 800134a:	05db      	lsls	r3, r3, #23
 800134c:	0011      	movs	r1, r2
 800134e:	0018      	movs	r0, r3
 8001350:	f001 fe46 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nHOLD_Pin SHIFT_DATA_IN_Pin
                           SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_DATA_IN_Pin
 8001354:	0021      	movs	r1, r4
 8001356:	187b      	adds	r3, r7, r1
 8001358:	22ee      	movs	r2, #238	@ 0xee
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	601a      	str	r2, [r3, #0]
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	000c      	movs	r4, r1
 8001360:	193b      	adds	r3, r7, r4
 8001362:	2201      	movs	r2, #1
 8001364:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	193b      	adds	r3, r7, r4
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	193b      	adds	r3, r7, r4
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	193a      	adds	r2, r7, r4
 8001374:	23a0      	movs	r3, #160	@ 0xa0
 8001376:	05db      	lsls	r3, r3, #23
 8001378:	0011      	movs	r1, r2
 800137a:	0018      	movs	r0, r3
 800137c:	f001 fe30 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_ENABLE_Pin DEBUG_LED_Pin CAPTOUCH_RESET_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin;
 8001380:	193b      	adds	r3, r7, r4
 8001382:	4a3e      	ldr	r2, [pc, #248]	@ (800147c <MX_GPIO_Init+0x21c>)
 8001384:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	193b      	adds	r3, r7, r4
 8001388:	2201      	movs	r2, #1
 800138a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	193b      	adds	r3, r7, r4
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	193b      	adds	r3, r7, r4
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	193b      	adds	r3, r7, r4
 800139a:	4a36      	ldr	r2, [pc, #216]	@ (8001474 <MX_GPIO_Init+0x214>)
 800139c:	0019      	movs	r1, r3
 800139e:	0010      	movs	r0, r2
 80013a0:	f001 fe1e 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 80013a4:	193b      	adds	r3, r7, r4
 80013a6:	2280      	movs	r2, #128	@ 0x80
 80013a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	193b      	adds	r3, r7, r4
 80013ac:	2201      	movs	r2, #1
 80013ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	193b      	adds	r3, r7, r4
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	193b      	adds	r3, r7, r4
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 80013bc:	193b      	adds	r3, r7, r4
 80013be:	4a2e      	ldr	r2, [pc, #184]	@ (8001478 <MX_GPIO_Init+0x218>)
 80013c0:	0019      	movs	r1, r3
 80013c2:	0010      	movs	r0, r2
 80013c4:	f001 fe0c 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_SET_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = ALARM_SET_BUTTON_EXTI_Pin;
 80013c8:	193b      	adds	r3, r7, r4
 80013ca:	2280      	movs	r2, #128	@ 0x80
 80013cc:	0212      	lsls	r2, r2, #8
 80013ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013d0:	193b      	adds	r3, r7, r4
 80013d2:	2284      	movs	r2, #132	@ 0x84
 80013d4:	0392      	lsls	r2, r2, #14
 80013d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d8:	193b      	adds	r3, r7, r4
 80013da:	2201      	movs	r2, #1
 80013dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALARM_SET_BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 80013de:	193a      	adds	r2, r7, r4
 80013e0:	23a0      	movs	r3, #160	@ 0xa0
 80013e2:	05db      	lsls	r3, r3, #23
 80013e4:	0011      	movs	r1, r2
 80013e6:	0018      	movs	r0, r3
 80013e8:	f001 fdfa 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_EXTI_Pin MINUTE_SET_BUTTON_EXTI_Pin ALARM_EN_BUTTON_EXTI_Pin DISPLAY_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_EXTI_Pin|MINUTE_SET_BUTTON_EXTI_Pin|ALARM_EN_BUTTON_EXTI_Pin|DISPLAY_BUTTON_EXTI_Pin;
 80013ec:	0021      	movs	r1, r4
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	220f      	movs	r2, #15
 80013f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	2284      	movs	r2, #132	@ 0x84
 80013f8:	0392      	lsls	r2, r2, #14
 80013fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	2201      	movs	r2, #1
 8001400:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001402:	000c      	movs	r4, r1
 8001404:	187b      	adds	r3, r7, r1
 8001406:	4a1e      	ldr	r2, [pc, #120]	@ (8001480 <MX_GPIO_Init+0x220>)
 8001408:	0019      	movs	r1, r3
 800140a:	0010      	movs	r0, r2
 800140c:	f001 fde8 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIME_SWITCH_EXTI_Pin */
  GPIO_InitStruct.Pin = TIME_SWITCH_EXTI_Pin;
 8001410:	0021      	movs	r1, r4
 8001412:	187b      	adds	r3, r7, r1
 8001414:	2210      	movs	r2, #16
 8001416:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001418:	187b      	adds	r3, r7, r1
 800141a:	22c4      	movs	r2, #196	@ 0xc4
 800141c:	0392      	lsls	r2, r2, #14
 800141e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001420:	187b      	adds	r3, r7, r1
 8001422:	2201      	movs	r2, #1
 8001424:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TIME_SWITCH_EXTI_GPIO_Port, &GPIO_InitStruct);
 8001426:	187b      	adds	r3, r7, r1
 8001428:	4a12      	ldr	r2, [pc, #72]	@ (8001474 <MX_GPIO_Init+0x214>)
 800142a:	0019      	movs	r1, r3
 800142c:	0010      	movs	r0, r2
 800142e:	f001 fdd7 	bl	8002fe0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2005      	movs	r0, #5
 8001438:	f001 fc14 	bl	8002c64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800143c:	2005      	movs	r0, #5
 800143e:	f001 fc26 	bl	8002c8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2101      	movs	r1, #1
 8001446:	2006      	movs	r0, #6
 8001448:	f001 fc0c 	bl	8002c64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800144c:	2006      	movs	r0, #6
 800144e:	f001 fc1e 	bl	8002c8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2101      	movs	r1, #1
 8001456:	2007      	movs	r0, #7
 8001458:	f001 fc04 	bl	8002c64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800145c:	2007      	movs	r0, #7
 800145e:	f001 fc16 	bl	8002c8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001462:	46c0      	nop			@ (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b00b      	add	sp, #44	@ 0x2c
 8001468:	bd90      	pop	{r4, r7, pc}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	40021000 	.word	0x40021000
 8001470:	00001002 	.word	0x00001002
 8001474:	50000400 	.word	0x50000400
 8001478:	50000800 	.word	0x50000800
 800147c:	00001102 	.word	0x00001102
 8001480:	50000c00 	.word	0x50000c00

08001484 <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800148a:	2317      	movs	r3, #23
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8001492:	4a14      	ldr	r2, [pc, #80]	@ (80014e4 <updateAndDisplayTime+0x60>)
 8001494:	4914      	ldr	r1, [pc, #80]	@ (80014e8 <updateAndDisplayTime+0x64>)
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <updateAndDisplayTime+0x68>)
 8001498:	0018      	movs	r0, r3
 800149a:	f7ff fad9 	bl	8000a50 <getRTCTime>

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 800149e:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <updateAndDisplayTime+0x6c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10e      	bne.n	80014c4 <updateAndDisplayTime+0x40>

		RTC_TimeTypeDef currTimeMil = conv2Mil(&currTime);
 80014a6:	003b      	movs	r3, r7
 80014a8:	4a0f      	ldr	r2, [pc, #60]	@ (80014e8 <updateAndDisplayTime+0x64>)
 80014aa:	0011      	movs	r1, r2
 80014ac:	0018      	movs	r0, r3
 80014ae:	f000 fcc5 	bl	8001e3c <conv2Mil>

		sevSeg_updateDigits(&currTimeMil, userAlarmToggle);
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <updateAndDisplayTime+0x70>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	001a      	movs	r2, r3
 80014b8:	003b      	movs	r3, r7
 80014ba:	0011      	movs	r1, r2
 80014bc:	0018      	movs	r0, r3
 80014be:	f000 fe19 	bl	80020f4 <sevSeg_updateDigits>
 80014c2:	e007      	b.n	80014d4 <updateAndDisplayTime+0x50>

	}
	else {
		sevSeg_updateDigits(&currTime, userAlarmToggle);
 80014c4:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <updateAndDisplayTime+0x70>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	001a      	movs	r2, r3
 80014ca:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <updateAndDisplayTime+0x64>)
 80014cc:	0011      	movs	r1, r2
 80014ce:	0018      	movs	r0, r3
 80014d0:	f000 fe10 	bl	80020f4 <sevSeg_updateDigits>
	}

	return halRet;
 80014d4:	2317      	movs	r3, #23
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	781b      	ldrb	r3, [r3, #0]

}
 80014da:	0018      	movs	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	b006      	add	sp, #24
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	200000a8 	.word	0x200000a8
 80014e8:	20000094 	.word	0x20000094
 80014ec:	200001b4 	.word	0x200001b4
 80014f0:	200000c4 	.word	0x200000c4
 80014f4:	20000091 	.word	0x20000091

080014f8 <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 80014fe:	2317      	movs	r3, #23
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <updateAndDisplayAlarm+0x54>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10e      	bne.n	800152c <updateAndDisplayAlarm+0x34>

		RTC_TimeTypeDef userAlarmTimeMil = conv2Mil(&userAlarmTime);
 800150e:	003b      	movs	r3, r7
 8001510:	4a0f      	ldr	r2, [pc, #60]	@ (8001550 <updateAndDisplayAlarm+0x58>)
 8001512:	0011      	movs	r1, r2
 8001514:	0018      	movs	r0, r3
 8001516:	f000 fc91 	bl	8001e3c <conv2Mil>

		sevSeg_updateDigits(&userAlarmTimeMil, userAlarmToggle);
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <updateAndDisplayAlarm+0x5c>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	001a      	movs	r2, r3
 8001520:	003b      	movs	r3, r7
 8001522:	0011      	movs	r1, r2
 8001524:	0018      	movs	r0, r3
 8001526:	f000 fde5 	bl	80020f4 <sevSeg_updateDigits>
 800152a:	e007      	b.n	800153c <updateAndDisplayAlarm+0x44>

	}
	else {
		sevSeg_updateDigits(&userAlarmTime, userAlarmToggle);
 800152c:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <updateAndDisplayAlarm+0x5c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	001a      	movs	r2, r3
 8001532:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <updateAndDisplayAlarm+0x58>)
 8001534:	0011      	movs	r1, r2
 8001536:	0018      	movs	r0, r3
 8001538:	f000 fddc 	bl	80020f4 <sevSeg_updateDigits>
	}



	return halRet;
 800153c:	2317      	movs	r3, #23
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	781b      	ldrb	r3, [r3, #0]

}
 8001542:	0018      	movs	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	b006      	add	sp, #24
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	200000c4 	.word	0x200000c4
 8001550:	200000ac 	.word	0x200000ac
 8001554:	20000091 	.word	0x20000091

08001558 <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b08d      	sub	sp, #52	@ 0x34
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 8001560:	2408      	movs	r4, #8
 8001562:	193b      	adds	r3, r7, r4
 8001564:	0018      	movs	r0, r3
 8001566:	2328      	movs	r3, #40	@ 0x28
 8001568:	001a      	movs	r2, r3
 800156a:	2100      	movs	r1, #0
 800156c:	f005 ff46 	bl	80073fc <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001570:	2380      	movs	r3, #128	@ 0x80
 8001572:	005a      	lsls	r2, r3, #1
 8001574:	1939      	adds	r1, r7, r4
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	2300      	movs	r3, #0
 800157a:	f004 fb39 	bl	8005bf0 <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 800157e:	193b      	adds	r3, r7, r4
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	2b3a      	cmp	r3, #58	@ 0x3a
 8001584:	d903      	bls.n	800158e <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 8001586:	193b      	adds	r3, r7, r4
 8001588:	2200      	movs	r2, #0
 800158a:	705a      	strb	r2, [r3, #1]
 800158c:	e006      	b.n	800159c <HAL_RTC_AlarmAEventCallback+0x44>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 800158e:	2108      	movs	r1, #8
 8001590:	187b      	adds	r3, r7, r1
 8001592:	785b      	ldrb	r3, [r3, #1]
 8001594:	3301      	adds	r3, #1
 8001596:	b2da      	uxtb	r2, r3
 8001598:	187b      	adds	r3, r7, r1
 800159a:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 800159c:	46c0      	nop			@ (mov r8, r8)
 800159e:	2308      	movs	r3, #8
 80015a0:	18f9      	adds	r1, r7, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	0018      	movs	r0, r3
 80015a8:	f004 f9e2 	bl	8005970 <HAL_RTC_SetAlarm_IT>
 80015ac:	1e03      	subs	r3, r0, #0
 80015ae:	d1f6      	bne.n	800159e <HAL_RTC_AlarmAEventCallback+0x46>

	  updateAndDisplayTime();
 80015b0:	f7ff ff68 	bl	8001484 <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 80015b4:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <HAL_RTC_AlarmAEventCallback+0x94>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d013      	beq.n	80015e4 <HAL_RTC_AlarmAEventCallback+0x8c>
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <HAL_RTC_AlarmAEventCallback+0x98>)
 80015be:	781a      	ldrb	r2, [r3, #0]
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d10d      	bne.n	80015e4 <HAL_RTC_AlarmAEventCallback+0x8c>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 80015c8:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <HAL_RTC_AlarmAEventCallback+0x98>)
 80015ca:	785a      	ldrb	r2, [r3, #1]
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80015ce:	785b      	ldrb	r3, [r3, #1]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d107      	bne.n	80015e4 <HAL_RTC_AlarmAEventCallback+0x8c>
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <HAL_RTC_AlarmAEventCallback+0x98>)
 80015d6:	78da      	ldrb	r2, [r3, #3]
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_RTC_AlarmAEventCallback+0x9c>)
 80015da:	78db      	ldrb	r3, [r3, #3]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d101      	bne.n	80015e4 <HAL_RTC_AlarmAEventCallback+0x8c>
		  userAlarmBeep();
 80015e0:	f000 f80a 	bl	80015f8 <userAlarmBeep>
	  }


}
 80015e4:	46c0      	nop			@ (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b00d      	add	sp, #52	@ 0x34
 80015ea:	bd90      	pop	{r4, r7, pc}
 80015ec:	20000091 	.word	0x20000091
 80015f0:	200000ac 	.word	0x200000ac
 80015f4:	20000094 	.word	0x20000094

080015f8 <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 80015fe:	4b50      	ldr	r3, [pc, #320]	@ (8001740 <userAlarmBeep+0x148>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d02d      	beq.n	8001662 <userAlarmBeep+0x6a>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 8001606:	4b4f      	ldr	r3, [pc, #316]	@ (8001744 <userAlarmBeep+0x14c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	0018      	movs	r0, r3
 800160c:	f004 ffa6 	bl	800655c <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 8001610:	4b4c      	ldr	r3, [pc, #304]	@ (8001744 <userAlarmBeep+0x14c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001618:	4b4a      	ldr	r3, [pc, #296]	@ (8001744 <userAlarmBeep+0x14c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	0c12      	lsrs	r2, r2, #16
 8001620:	0412      	lsls	r2, r2, #16
 8001622:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 8001624:	4b47      	ldr	r3, [pc, #284]	@ (8001744 <userAlarmBeep+0x14c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	4b45      	ldr	r3, [pc, #276]	@ (8001744 <userAlarmBeep+0x14c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4945      	ldr	r1, [pc, #276]	@ (8001748 <userAlarmBeep+0x150>)
 8001634:	400a      	ands	r2, r1
 8001636:	611a      	str	r2, [r3, #16]

			// Re-write RCR with 10
			timerSnooze->Instance->RCR &= 0xFF00;
 8001638:	4b42      	ldr	r3, [pc, #264]	@ (8001744 <userAlarmBeep+0x14c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001640:	4b40      	ldr	r3, [pc, #256]	@ (8001744 <userAlarmBeep+0x14c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	22ff      	movs	r2, #255	@ 0xff
 8001648:	0212      	lsls	r2, r2, #8
 800164a:	400a      	ands	r2, r1
 800164c:	631a      	str	r2, [r3, #48]	@ 0x30
			timerSnooze->Instance->RCR |= timerSnooze_RCR;
 800164e:	4b3d      	ldr	r3, [pc, #244]	@ (8001744 <userAlarmBeep+0x14c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001656:	2164      	movs	r1, #100	@ 0x64
 8001658:	4b3a      	ldr	r3, [pc, #232]	@ (8001744 <userAlarmBeep+0x14c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	631a      	str	r2, [r3, #48]	@ 0x30

		}

	HAL_TIM_Base_Stop(timerDelay);
 8001662:	4b3a      	ldr	r3, [pc, #232]	@ (800174c <userAlarmBeep+0x154>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	0018      	movs	r0, r3
 8001668:	f004 fefe 	bl	8006468 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 800166c:	4b37      	ldr	r3, [pc, #220]	@ (800174c <userAlarmBeep+0x154>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0018      	movs	r0, r3
 8001672:	f004 fead 	bl	80063d0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001676:	4b35      	ldr	r3, [pc, #212]	@ (800174c <userAlarmBeep+0x154>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001680:	1cfb      	adds	r3, r7, #3
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]

	// TODO: Start audio DMA streams

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8001686:	f7ff fefd 	bl	8001484 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 800168a:	4b30      	ldr	r3, [pc, #192]	@ (800174c <userAlarmBeep+0x154>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	4a2e      	ldr	r2, [pc, #184]	@ (8001750 <userAlarmBeep+0x158>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d91a      	bls.n	80016d2 <userAlarmBeep+0xda>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 800169c:	1cfb      	adds	r3, r7, #3
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001754 <userAlarmBeep+0x15c>)
 80016a2:	5cd3      	ldrb	r3, [r2, r3]
 80016a4:	0018      	movs	r0, r3
 80016a6:	f000 fdd9 	bl	800225c <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 80016aa:	4b28      	ldr	r3, [pc, #160]	@ (800174c <userAlarmBeep+0x154>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b2:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 80016b4:	1cfb      	adds	r3, r7, #3
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	1e5a      	subs	r2, r3, #1
 80016ba:	4193      	sbcs	r3, r2
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2201      	movs	r2, #1
 80016c0:	4053      	eors	r3, r2
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	001a      	movs	r2, r3
 80016c6:	1cfb      	adds	r3, r7, #3
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	781a      	ldrb	r2, [r3, #0]
 80016cc:	2101      	movs	r1, #1
 80016ce:	400a      	ands	r2, r1
 80016d0:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 80016d2:	4b21      	ldr	r3, [pc, #132]	@ (8001758 <userAlarmBeep+0x160>)
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7fe ff4d 	bl	8000574 <capTouch_readChannels>

	} while(capTouch.keyStat == 0x00 &&
 80016da:	4b1f      	ldr	r3, [pc, #124]	@ (8001758 <userAlarmBeep+0x160>)
 80016dc:	7c1b      	ldrb	r3, [r3, #16]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d108      	bne.n	80016f4 <userAlarmBeep+0xfc>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 80016e2:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <userAlarmBeep+0x164>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2204      	movs	r2, #4
 80016e8:	0011      	movs	r1, r2
 80016ea:	0018      	movs	r0, r3
 80016ec:	f001 fddc 	bl	80032a8 <HAL_GPIO_ReadPin>
 80016f0:	1e03      	subs	r3, r0, #0
	} while(capTouch.keyStat == 0x00 &&
 80016f2:	d1c8      	bne.n	8001686 <userAlarmBeep+0x8e>

	/*
	 * Stop blinking, turn off buzzer, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 80016f4:	4b15      	ldr	r3, [pc, #84]	@ (800174c <userAlarmBeep+0x154>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	0018      	movs	r0, r3
 80016fa:	f004 feb5 	bl	8006468 <HAL_TIM_Base_Stop>

	updateAndDisplayTime();				// Update to current time and display
 80016fe:	f7ff fec1 	bl	8001484 <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Set to 50% duty cycle
 8001702:	2332      	movs	r3, #50	@ 0x32
 8001704:	0018      	movs	r0, r3
 8001706:	f000 fda9 	bl	800225c <sevSeg_setIntensity>
	displayToggle = 2;								// Set to 2 for future display button ISRs
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <userAlarmBeep+0x168>)
 800170c:	2202      	movs	r2, #2
 800170e:	701a      	strb	r2, [r3, #0]


	// If this is the first snooze,
	if(!secondSnooze) {
 8001710:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <userAlarmBeep+0x148>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2201      	movs	r2, #1
 8001716:	4053      	eors	r3, r2
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <userAlarmBeep+0x138>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <userAlarmBeep+0x14c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	0018      	movs	r0, r3
 8001724:	f004 fec6 	bl	80064b4 <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <userAlarmBeep+0x148>)
 800172a:	2201      	movs	r2, #1
 800172c:	701a      	strb	r2, [r3, #0]
		 * in the top conditional, the secondSnooze is always true;
		 */
		secondSnooze = false;

	}
}
 800172e:	e002      	b.n	8001736 <userAlarmBeep+0x13e>
		secondSnooze = false;
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <userAlarmBeep+0x148>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
}
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b002      	add	sp, #8
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	200003e1 	.word	0x200003e1
 8001744:	2000004c 	.word	0x2000004c
 8001748:	0000fffc 	.word	0x0000fffc
 800174c:	20000048 	.word	0x20000048
 8001750:	00007ffe 	.word	0x00007ffe
 8001754:	080074a4 	.word	0x080074a4
 8001758:	200003e4 	.word	0x200003e4
 800175c:	20000000 	.word	0x20000000
 8001760:	20000090 	.word	0x20000090

08001764 <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	0002      	movs	r2, r0
 800176c:	1dbb      	adds	r3, r7, #6
 800176e:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8001770:	2208      	movs	r2, #8
 8001772:	1dbb      	adds	r3, r7, #6
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	4293      	cmp	r3, r2
 8001778:	d106      	bne.n	8001788 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 800177a:	230f      	movs	r3, #15
 800177c:	18fc      	adds	r4, r7, r3
 800177e:	f000 f86f 	bl	8001860 <displayButtonISR>
 8001782:	0003      	movs	r3, r0
 8001784:	7023      	strb	r3, [r4, #0]

	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8001786:	e03d      	b.n	8001804 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8001788:	2204      	movs	r2, #4
 800178a:	1dbb      	adds	r3, r7, #6
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	4293      	cmp	r3, r2
 8001790:	d106      	bne.n	80017a0 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 8001792:	230f      	movs	r3, #15
 8001794:	18fc      	adds	r4, r7, r3
 8001796:	f000 f88b 	bl	80018b0 <alarmEnableISR>
 800179a:	0003      	movs	r3, r0
 800179c:	7023      	strb	r3, [r4, #0]
}
 800179e:	e031      	b.n	8001804 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmSetButtonPin) {
 80017a0:	2380      	movs	r3, #128	@ 0x80
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	1dba      	adds	r2, r7, #6
 80017a6:	8812      	ldrh	r2, [r2, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d106      	bne.n	80017ba <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 80017ac:	230f      	movs	r3, #15
 80017ae:	18fc      	adds	r4, r7, r3
 80017b0:	f000 f8a8 	bl	8001904 <alarmSetISR>
 80017b4:	0003      	movs	r3, r0
 80017b6:	7023      	strb	r3, [r4, #0]
}
 80017b8:	e024      	b.n	8001804 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == hourSetButtonPin) {
 80017ba:	2201      	movs	r2, #1
 80017bc:	1dbb      	adds	r3, r7, #6
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d106      	bne.n	80017d2 <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 80017c4:	230f      	movs	r3, #15
 80017c6:	18fc      	adds	r4, r7, r3
 80017c8:	f000 f95c 	bl	8001a84 <hourSetISR>
 80017cc:	0003      	movs	r3, r0
 80017ce:	7023      	strb	r3, [r4, #0]
}
 80017d0:	e018      	b.n	8001804 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == minuteSetButtonPin) {
 80017d2:	2202      	movs	r2, #2
 80017d4:	1dbb      	adds	r3, r7, #6
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	4293      	cmp	r3, r2
 80017da:	d106      	bne.n	80017ea <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 80017dc:	230f      	movs	r3, #15
 80017de:	18fc      	adds	r4, r7, r3
 80017e0:	f000 f97c 	bl	8001adc <minuteSetISR>
 80017e4:	0003      	movs	r3, r0
 80017e6:	7023      	strb	r3, [r4, #0]
}
 80017e8:	e00c      	b.n	8001804 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == timeFormatSwitchPin) {
 80017ea:	2210      	movs	r2, #16
 80017ec:	1dbb      	adds	r3, r7, #6
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d106      	bne.n	8001802 <HAL_GPIO_EXTI_Falling_Callback+0x9e>
		halRet = timeFormatSwitchISR();
 80017f4:	230f      	movs	r3, #15
 80017f6:	18fc      	adds	r4, r7, r3
 80017f8:	f000 f9c2 	bl	8001b80 <timeFormatSwitchISR>
 80017fc:	0003      	movs	r3, r0
 80017fe:	7023      	strb	r3, [r4, #0]
}
 8001800:	e000      	b.n	8001804 <HAL_GPIO_EXTI_Falling_Callback+0xa0>
		__NOP();
 8001802:	46c0      	nop			@ (mov r8, r8)
}
 8001804:	46c0      	nop			@ (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b005      	add	sp, #20
 800180a:	bd90      	pop	{r4, r7, pc}

0800180c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	0002      	movs	r2, r0
 8001814:	1dbb      	adds	r3, r7, #6
 8001816:	801a      	strh	r2, [r3, #0]

	if(GPIO_Pin == timeFormatSwitchPin) {
 8001818:	2210      	movs	r2, #16
 800181a:	1dbb      	adds	r3, r7, #6
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	4293      	cmp	r3, r2
 8001820:	d101      	bne.n	8001826 <HAL_GPIO_EXTI_Rising_Callback+0x1a>

		timeFormatSwitchISR();
 8001822:	f000 f9ad 	bl	8001b80 <timeFormatSwitchISR>

	}

}
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	46bd      	mov	sp, r7
 800182a:	b002      	add	sp, #8
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

	if((htim == timerSnooze) && (secondSnooze == true)) {
 8001838:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	d105      	bne.n	800184e <HAL_TIM_PeriodElapsedCallback+0x1e>
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_TIM_PeriodElapsedCallback+0x1e>

		userAlarmBeep();
 800184a:	f7ff fed5 	bl	80015f8 <userAlarmBeep>

	}

}
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	46bd      	mov	sp, r7
 8001852:	b002      	add	sp, #8
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	2000004c 	.word	0x2000004c
 800185c:	200003e1 	.word	0x200003e1

08001860 <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 800186c:	f7ff fe0a 	bl	8001484 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8001870:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <displayButtonISR+0x48>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	001a      	movs	r2, r3
 8001876:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <displayButtonISR+0x4c>)
 8001878:	5c9b      	ldrb	r3, [r3, r2]
 800187a:	0018      	movs	r0, r3
 800187c:	f000 fcee 	bl	800225c <sevSeg_setIntensity>

	if(displayToggle >= 1) {			// Increment display toggle or reset back down to 0;
 8001880:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <displayButtonISR+0x48>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <displayButtonISR+0x30>
		displayToggle = 0;
 8001888:	4b07      	ldr	r3, [pc, #28]	@ (80018a8 <displayButtonISR+0x48>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
 800188e:	e005      	b.n	800189c <displayButtonISR+0x3c>
	} else {
		displayToggle++;
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <displayButtonISR+0x48>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b03      	ldr	r3, [pc, #12]	@ (80018a8 <displayButtonISR+0x48>)
 800189a:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 800189c:	1dfb      	adds	r3, r7, #7
 800189e:	781b      	ldrb	r3, [r3, #0]

}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b002      	add	sp, #8
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000090 	.word	0x20000090
 80018ac:	080074a4 	.word	0x080074a4

080018b0 <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0



	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 80018bc:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <alarmEnableISR+0x4c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2201      	movs	r2, #1
 80018c2:	4053      	eors	r3, r2
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <alarmEnableISR+0x22>

		userAlarmToggle = true;								// Toggle internal flag to true
 80018ca:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <alarmEnableISR+0x4c>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e008      	b.n	80018e4 <alarmEnableISR+0x34>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <alarmEnableISR+0x4c>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <alarmEnableISR+0x32>

		userAlarmToggle = false;							// Toggle internal flag to false
 80018da:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <alarmEnableISR+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	e000      	b.n	80018e4 <alarmEnableISR+0x34>
	}
	else {
		__NOP();							//Code should never reach here.
 80018e2:	46c0      	nop			@ (mov r8, r8)
	}

	updateAndDisplayTime();				// Update display with correct decimal point
 80018e4:	f7ff fdce 	bl	8001484 <updateAndDisplayTime>

	// Reset snooze time
	secondSnooze = false;
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <alarmEnableISR+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]

	return halRet;
 80018ee:	1dfb      	adds	r3, r7, #7
 80018f0:	781b      	ldrb	r3, [r3, #0]

}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b002      	add	sp, #8
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	46c0      	nop			@ (mov r8, r8)
 80018fc:	20000091 	.word	0x20000091
 8001900:	200003e1 	.word	0x200003e1

08001904 <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 800190a:	1c7b      	adds	r3, r7, #1
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 8001910:	1dfb      	adds	r3, r7, #7
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
 8001916:	e01a      	b.n	800194e <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 8001918:	4b55      	ldr	r3, [pc, #340]	@ (8001a70 <alarmSetISR+0x16c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0018      	movs	r0, r3
 800191e:	f004 fda3 	bl	8006468 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 8001922:	4b53      	ldr	r3, [pc, #332]	@ (8001a70 <alarmSetISR+0x16c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 800192c:	4b50      	ldr	r3, [pc, #320]	@ (8001a70 <alarmSetISR+0x16c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	0018      	movs	r0, r3
 8001932:	f004 fd4d 	bl	80063d0 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 8001936:	4b4e      	ldr	r3, [pc, #312]	@ (8001a70 <alarmSetISR+0x16c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	4a4d      	ldr	r2, [pc, #308]	@ (8001a74 <alarmSetISR+0x170>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d9f8      	bls.n	8001936 <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 8001944:	1dfb      	adds	r3, r7, #7
 8001946:	781a      	ldrb	r2, [r3, #0]
 8001948:	1dfb      	adds	r3, r7, #7
 800194a:	3201      	adds	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	1dfb      	adds	r3, r7, #7
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d9e0      	bls.n	8001918 <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 8001956:	4b48      	ldr	r3, [pc, #288]	@ (8001a78 <alarmSetISR+0x174>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2280      	movs	r2, #128	@ 0x80
 800195c:	0212      	lsls	r2, r2, #8
 800195e:	0011      	movs	r1, r2
 8001960:	0018      	movs	r0, r3
 8001962:	f001 fca1 	bl	80032a8 <HAL_GPIO_ReadPin>
 8001966:	1e03      	subs	r3, r0, #0
 8001968:	d11f      	bne.n	80019aa <alarmSetISR+0xa6>
		alarmSetMode = true;
 800196a:	4b44      	ldr	r3, [pc, #272]	@ (8001a7c <alarmSetISR+0x178>)
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 8001970:	4b3f      	ldr	r3, [pc, #252]	@ (8001a70 <alarmSetISR+0x16c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0018      	movs	r0, r3
 8001976:	f004 fd77 	bl	8006468 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 800197a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a70 <alarmSetISR+0x16c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001984:	4b3a      	ldr	r3, [pc, #232]	@ (8001a70 <alarmSetISR+0x16c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	0018      	movs	r0, r3
 800198a:	f004 fd21 	bl	80063d0 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 800198e:	4b38      	ldr	r3, [pc, #224]	@ (8001a70 <alarmSetISR+0x16c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 800199a:	1cfb      	adds	r3, r7, #3
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 80019a0:	4b36      	ldr	r3, [pc, #216]	@ (8001a7c <alarmSetISR+0x178>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d059      	beq.n	8001a5c <alarmSetISR+0x158>
 80019a8:	e002      	b.n	80019b0 <alarmSetISR+0xac>
		return halRet;
 80019aa:	1c7b      	adds	r3, r7, #1
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	e05a      	b.n	8001a66 <alarmSetISR+0x162>

		bool displayBlink = false;
 80019b0:	1cbb      	adds	r3, r7, #2
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 80019b6:	4b30      	ldr	r3, [pc, #192]	@ (8001a78 <alarmSetISR+0x174>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2280      	movs	r2, #128	@ 0x80
 80019bc:	0212      	lsls	r2, r2, #8
 80019be:	0011      	movs	r1, r2
 80019c0:	0018      	movs	r0, r3
 80019c2:	f001 fc71 	bl	80032a8 <HAL_GPIO_ReadPin>
 80019c6:	0003      	movs	r3, r0
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d102      	bne.n	80019d2 <alarmSetISR+0xce>
				alarmSetButtonReset = true;
 80019cc:	1cfb      	adds	r3, r7, #3
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 80019d2:	f7ff fd91 	bl	80014f8 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 80019d6:	4b26      	ldr	r3, [pc, #152]	@ (8001a70 <alarmSetISR+0x16c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	1ad2      	subs	r2, r2, r3
 80019e4:	2380      	movs	r3, #128	@ 0x80
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d31b      	bcc.n	8001a24 <alarmSetISR+0x120>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 80019ec:	1cbb      	adds	r3, r7, #2
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4a23      	ldr	r2, [pc, #140]	@ (8001a80 <alarmSetISR+0x17c>)
 80019f2:	5cd3      	ldrb	r3, [r2, r3]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f000 fc31 	bl	800225c <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 80019fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <alarmSetISR+0x16c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 8001a06:	1cbb      	adds	r3, r7, #2
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	1e5a      	subs	r2, r3, #1
 8001a0c:	4193      	sbcs	r3, r2
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2201      	movs	r2, #1
 8001a12:	4053      	eors	r3, r2
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	001a      	movs	r2, r3
 8001a18:	1cbb      	adds	r3, r7, #2
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	400a      	ands	r2, r1
 8001a22:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 8001a24:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <alarmSetISR+0x174>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2280      	movs	r2, #128	@ 0x80
 8001a2a:	0212      	lsls	r2, r2, #8
 8001a2c:	0011      	movs	r1, r2
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f001 fc3a 	bl	80032a8 <HAL_GPIO_ReadPin>
 8001a34:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 8001a36:	d1be      	bne.n	80019b6 <alarmSetISR+0xb2>
 8001a38:	1cfb      	adds	r3, r7, #3
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4053      	eors	r3, r2
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1b7      	bne.n	80019b6 <alarmSetISR+0xb2>

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 8001a46:	2332      	movs	r3, #50	@ 0x32
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f000 fc07 	bl	800225c <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 8001a4e:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <alarmSetISR+0x16c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0018      	movs	r0, r3
 8001a54:	f004 fd08 	bl	8006468 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001a58:	f7ff fd14 	bl	8001484 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001a5c:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <alarmSetISR+0x178>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8001a62:	1c7b      	adds	r3, r7, #1
 8001a64:	781b      	ldrb	r3, [r3, #0]

}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b002      	add	sp, #8
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	20000048 	.word	0x20000048
 8001a74:	0000fffe 	.word	0x0000fffe
 8001a78:	20000004 	.word	0x20000004
 8001a7c:	200003e0 	.word	0x200003e0
 8001a80:	080074a4 	.word	0x080074a4

08001a84 <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001a90:	4b0e      	ldr	r3, [pc, #56]	@ (8001acc <hourSetISR+0x48>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <hourSetISR+0x1a>

		alarmHourInc();
 8001a98:	f000 f89a 	bl	8001bd0 <alarmHourInc>
 8001a9c:	e00f      	b.n	8001abe <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 8001a9e:	f000 f8c7 	bl	8001c30 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001aa2:	490b      	ldr	r1, [pc, #44]	@ (8001ad0 <hourSetISR+0x4c>)
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <hourSetISR+0x50>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f003 fe0f 	bl	80056cc <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001aae:	f7ff fce9 	bl	8001484 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001ab2:	4a09      	ldr	r2, [pc, #36]	@ (8001ad8 <hourSetISR+0x54>)
 8001ab4:	4906      	ldr	r1, [pc, #24]	@ (8001ad0 <hourSetISR+0x4c>)
 8001ab6:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <hourSetISR+0x50>)
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f7fe ffc9 	bl	8000a50 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8001abe:	1dfb      	adds	r3, r7, #7
 8001ac0:	781b      	ldrb	r3, [r3, #0]

}
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b002      	add	sp, #8
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	200003e0 	.word	0x200003e0
 8001ad0:	20000094 	.word	0x20000094
 8001ad4:	200001b4 	.word	0x200001b4
 8001ad8:	200000a8 	.word	0x200000a8

08001adc <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	@ 0x30
 8001ae0:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 8001ae2:	232f      	movs	r3, #47	@ 0x2f
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001aea:	4b21      	ldr	r3, [pc, #132]	@ (8001b70 <minuteSetISR+0x94>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <minuteSetISR+0x1c>

		alarmMinuteInc();
 8001af2:	f000 f8dd 	bl	8001cb0 <alarmMinuteInc>
 8001af6:	e034      	b.n	8001b62 <minuteSetISR+0x86>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8001af8:	f000 f8f8 	bl	8001cec <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001afc:	491d      	ldr	r1, [pc, #116]	@ (8001b74 <minuteSetISR+0x98>)
 8001afe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b78 <minuteSetISR+0x9c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	0018      	movs	r0, r3
 8001b04:	f003 fde2 	bl	80056cc <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	2328      	movs	r3, #40	@ 0x28
 8001b0e:	001a      	movs	r2, r3
 8001b10:	2100      	movs	r1, #0
 8001b12:	f005 fc73 	bl	80073fc <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001b16:	2380      	movs	r3, #128	@ 0x80
 8001b18:	005a      	lsls	r2, r3, #1
 8001b1a:	1d39      	adds	r1, r7, #4
 8001b1c:	4816      	ldr	r0, [pc, #88]	@ (8001b78 <minuteSetISR+0x9c>)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f004 f866 	bl	8005bf0 <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	785b      	ldrb	r3, [r3, #1]
 8001b28:	2b3a      	cmp	r3, #58	@ 0x3a
 8001b2a:	d903      	bls.n	8001b34 <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	2200      	movs	r2, #0
 8001b30:	705a      	strb	r2, [r3, #1]
 8001b32:	e005      	b.n	8001b40 <minuteSetISR+0x64>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	785b      	ldrb	r3, [r3, #1]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8001b40:	46c0      	nop			@ (mov r8, r8)
 8001b42:	1d39      	adds	r1, r7, #4
 8001b44:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <minuteSetISR+0x9c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f003 ff11 	bl	8005970 <HAL_RTC_SetAlarm_IT>
 8001b4e:	1e03      	subs	r3, r0, #0
 8001b50:	d1f7      	bne.n	8001b42 <minuteSetISR+0x66>

		updateAndDisplayTime();
 8001b52:	f7ff fc97 	bl	8001484 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001b56:	4a09      	ldr	r2, [pc, #36]	@ (8001b7c <minuteSetISR+0xa0>)
 8001b58:	4906      	ldr	r1, [pc, #24]	@ (8001b74 <minuteSetISR+0x98>)
 8001b5a:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <minuteSetISR+0x9c>)
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f7fe ff77 	bl	8000a50 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8001b62:	232f      	movs	r3, #47	@ 0x2f
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	781b      	ldrb	r3, [r3, #0]
}
 8001b68:	0018      	movs	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b00c      	add	sp, #48	@ 0x30
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200003e0 	.word	0x200003e0
 8001b74:	20000094 	.word	0x20000094
 8001b78:	200001b4 	.word	0x200001b4
 8001b7c:	200000a8 	.word	0x200000a8

08001b80 <timeFormatSwitchISR>:

/*
 * Switch hour format (12 or 24 hr)
 */
HAL_StatusTypeDef timeFormatSwitchISR(void) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001b86:	1dfb      	adds	r3, r7, #7
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]

	// Determine which time format we will be using
	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <timeFormatSwitchISR+0x44>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2210      	movs	r2, #16
 8001b92:	0011      	movs	r1, r2
 8001b94:	0018      	movs	r0, r3
 8001b96:	f001 fb87 	bl	80032a8 <HAL_GPIO_ReadPin>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	001a      	movs	r2, r3
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <timeFormatSwitchISR+0x48>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d103      	bne.n	8001bae <timeFormatSwitchISR+0x2e>
	  userTimeFormat = RTC_HOURFORMAT_12;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <timeFormatSwitchISR+0x4c>)
 8001ba8:	2240      	movs	r2, #64	@ 0x40
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	e002      	b.n	8001bb4 <timeFormatSwitchISR+0x34>
	}
	else {
	  userTimeFormat = RTC_HOURFORMAT_24;
 8001bae:	4b07      	ldr	r3, [pc, #28]	@ (8001bcc <timeFormatSwitchISR+0x4c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
	}

	updateAndDisplayTime();
 8001bb4:	f7ff fc66 	bl	8001484 <updateAndDisplayTime>

	return halRet;
 8001bb8:	1dfb      	adds	r3, r7, #7
 8001bba:	781b      	ldrb	r3, [r3, #0]

}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b002      	add	sp, #8
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	20000040 	.word	0x20000040
 8001bcc:	200000c4 	.word	0x200000c4

08001bd0 <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001bd4:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <alarmHourInc+0x5c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b0b      	cmp	r3, #11
 8001bda:	d903      	bls.n	8001be4 <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001bdc:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <alarmHourInc+0x5c>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	e01e      	b.n	8001c22 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8001be4:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <alarmHourInc+0x5c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b0b      	cmp	r3, #11
 8001bea:	d10e      	bne.n	8001c0a <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001bec:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <alarmHourInc+0x5c>)
 8001bee:	78db      	ldrb	r3, [r3, #3]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d103      	bne.n	8001bfc <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <alarmHourInc+0x5c>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	70da      	strb	r2, [r3, #3]
 8001bfa:	e002      	b.n	8001c02 <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <alarmHourInc+0x5c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <alarmHourInc+0x5c>)
 8001c04:	220c      	movs	r2, #12
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	e00b      	b.n	8001c22 <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 8001c0a:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <alarmHourInc+0x5c>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b0a      	cmp	r3, #10
 8001c10:	d806      	bhi.n	8001c20 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001c12:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <alarmHourInc+0x5c>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b04      	ldr	r3, [pc, #16]	@ (8001c2c <alarmHourInc+0x5c>)
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	e000      	b.n	8001c22 <alarmHourInc+0x52>
	}
	else {
		__NOP();
 8001c20:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001c22:	f000 f8e1 	bl	8001de8 <updateRTCBackupReg>

}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	200000ac 	.word	0x200000ac

08001c30 <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001c34:	4a1a      	ldr	r2, [pc, #104]	@ (8001ca0 <currHourInc+0x70>)
 8001c36:	491b      	ldr	r1, [pc, #108]	@ (8001ca4 <currHourInc+0x74>)
 8001c38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <currHourInc+0x78>)
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f7fe ff08 	bl	8000a50 <getRTCTime>

	if(currTime.Hours >= 12) {
 8001c40:	4b18      	ldr	r3, [pc, #96]	@ (8001ca4 <currHourInc+0x74>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b0b      	cmp	r3, #11
 8001c46:	d903      	bls.n	8001c50 <currHourInc+0x20>
		currTime.Hours = 1;
 8001c48:	4b16      	ldr	r3, [pc, #88]	@ (8001ca4 <currHourInc+0x74>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	e01e      	b.n	8001c8e <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8001c50:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <currHourInc+0x74>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b0b      	cmp	r3, #11
 8001c56:	d10e      	bne.n	8001c76 <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001c58:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <currHourInc+0x74>)
 8001c5a:	78db      	ldrb	r3, [r3, #3]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d103      	bne.n	8001c68 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001c60:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <currHourInc+0x74>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	70da      	strb	r2, [r3, #3]
 8001c66:	e002      	b.n	8001c6e <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001c68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <currHourInc+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <currHourInc+0x74>)
 8001c70:	220c      	movs	r2, #12
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	e00b      	b.n	8001c8e <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 8001c76:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <currHourInc+0x7c>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b0a      	cmp	r3, #10
 8001c7c:	d806      	bhi.n	8001c8c <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <currHourInc+0x74>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <currHourInc+0x74>)
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	e000      	b.n	8001c8e <currHourInc+0x5e>
	}
	else {
		__NOP();
 8001c8c:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001c8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <currHourInc+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001c94:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <currHourInc+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]

}
 8001c9a:	46c0      	nop			@ (mov r8, r8)
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200000a8 	.word	0x200000a8
 8001ca4:	20000094 	.word	0x20000094
 8001ca8:	200001b4 	.word	0x200001b4
 8001cac:	200000ac 	.word	0x200000ac

08001cb0 <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <alarmMinuteInc+0x38>)
 8001cb6:	785b      	ldrb	r3, [r3, #1]
 8001cb8:	2b3a      	cmp	r3, #58	@ 0x3a
 8001cba:	d903      	bls.n	8001cc4 <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <alarmMinuteInc+0x38>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	705a      	strb	r2, [r3, #1]
 8001cc2:	e00b      	b.n	8001cdc <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 8001cc4:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <alarmMinuteInc+0x38>)
 8001cc6:	785b      	ldrb	r3, [r3, #1]
 8001cc8:	2b3a      	cmp	r3, #58	@ 0x3a
 8001cca:	d806      	bhi.n	8001cda <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <alarmMinuteInc+0x38>)
 8001cce:	785b      	ldrb	r3, [r3, #1]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <alarmMinuteInc+0x38>)
 8001cd6:	705a      	strb	r2, [r3, #1]
 8001cd8:	e000      	b.n	8001cdc <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 8001cda:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001cdc:	f000 f884 	bl	8001de8 <updateRTCBackupReg>

}
 8001ce0:	46c0      	nop			@ (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	200000ac 	.word	0x200000ac

08001cec <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001cf0:	4a11      	ldr	r2, [pc, #68]	@ (8001d38 <currMinuteInc+0x4c>)
 8001cf2:	4912      	ldr	r1, [pc, #72]	@ (8001d3c <currMinuteInc+0x50>)
 8001cf4:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <currMinuteInc+0x54>)
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7fe feaa 	bl	8000a50 <getRTCTime>

	if(currTime.Minutes >= 59) {
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <currMinuteInc+0x50>)
 8001cfe:	785b      	ldrb	r3, [r3, #1]
 8001d00:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d02:	d903      	bls.n	8001d0c <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 8001d04:	4b0d      	ldr	r3, [pc, #52]	@ (8001d3c <currMinuteInc+0x50>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	705a      	strb	r2, [r3, #1]
 8001d0a:	e00b      	b.n	8001d24 <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <currMinuteInc+0x50>)
 8001d0e:	785b      	ldrb	r3, [r3, #1]
 8001d10:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d12:	d806      	bhi.n	8001d22 <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 8001d14:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <currMinuteInc+0x50>)
 8001d16:	785b      	ldrb	r3, [r3, #1]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	4b07      	ldr	r3, [pc, #28]	@ (8001d3c <currMinuteInc+0x50>)
 8001d1e:	705a      	strb	r2, [r3, #1]
 8001d20:	e000      	b.n	8001d24 <currMinuteInc+0x38>
	}
	else {
		__NOP();
 8001d22:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8001d24:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <currMinuteInc+0x50>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 8001d2a:	4b04      	ldr	r3, [pc, #16]	@ (8001d3c <currMinuteInc+0x50>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]

}
 8001d30:	46c0      	nop			@ (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			@ (mov r8, r8)
 8001d38:	200000a8 	.word	0x200000a8
 8001d3c:	20000094 	.word	0x20000094
 8001d40:	200001b4 	.word	0x200001b4

08001d44 <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <dispFault+0x1c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2280      	movs	r2, #128	@ 0x80
 8001d4e:	0151      	lsls	r1, r2, #5
 8001d50:	2201      	movs	r2, #1
 8001d52:	0018      	movs	r0, r3
 8001d54:	f001 fac5 	bl	80032e2 <HAL_GPIO_WritePin>
}
 8001d58:	46c0      	nop			@ (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	20000028 	.word	0x20000028

08001d64 <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ddc <dispFailure+0x78>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f004 fb7a 	bl	8006468 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001d74:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <dispFailure+0x78>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f004 fb29 	bl	80063d0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001d7e:	4b17      	ldr	r3, [pc, #92]	@ (8001ddc <dispFailure+0x78>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001d88:	1cfb      	adds	r3, r7, #3
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001d8e:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <dispFailure+0x78>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	4a11      	ldr	r2, [pc, #68]	@ (8001de0 <dispFailure+0x7c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d9f6      	bls.n	8001d8e <dispFailure+0x2a>

			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8001da0:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <dispFailure+0x80>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2280      	movs	r2, #128	@ 0x80
 8001da6:	0152      	lsls	r2, r2, #5
 8001da8:	0011      	movs	r1, r2
 8001daa:	0018      	movs	r0, r3
 8001dac:	f001 fab6 	bl	800331c <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001db0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <dispFailure+0x78>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db8:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001dba:	1cfb      	adds	r3, r7, #3
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	1e5a      	subs	r2, r3, #1
 8001dc0:	4193      	sbcs	r3, r2
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4053      	eors	r3, r2
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	001a      	movs	r2, r3
 8001dcc:	1cfb      	adds	r3, r7, #3
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	781a      	ldrb	r2, [r3, #0]
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8001dd8:	e7d9      	b.n	8001d8e <dispFailure+0x2a>
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	20000048 	.word	0x20000048
 8001de0:	00003ffe 	.word	0x00003ffe
 8001de4:	20000028 	.word	0x20000028

08001de8 <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8001dec:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <updateRTCBackupReg+0x40>)
 8001dee:	6819      	ldr	r1, [r3, #0]
 8001df0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <updateRTCBackupReg+0x44>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	001a      	movs	r2, r3
 8001df6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <updateRTCBackupReg+0x48>)
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f004 f9a1 	bl	8006140 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <updateRTCBackupReg+0x4c>)
 8001e00:	6819      	ldr	r1, [r3, #0]
 8001e02:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <updateRTCBackupReg+0x44>)
 8001e04:	785b      	ldrb	r3, [r3, #1]
 8001e06:	001a      	movs	r2, r3
 8001e08:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <updateRTCBackupReg+0x48>)
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f004 f998 	bl	8006140 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 8001e10:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <updateRTCBackupReg+0x50>)
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <updateRTCBackupReg+0x44>)
 8001e16:	78db      	ldrb	r3, [r3, #3]
 8001e18:	001a      	movs	r2, r3
 8001e1a:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <updateRTCBackupReg+0x48>)
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f004 f98f 	bl	8006140 <HAL_RTCEx_BKUPWrite>

}
 8001e22:	46c0      	nop			@ (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	200000c0 	.word	0x200000c0
 8001e2c:	200000ac 	.word	0x200000ac
 8001e30:	200001b4 	.word	0x200001b4
 8001e34:	20000034 	.word	0x20000034
 8001e38:	20000038 	.word	0x20000038

08001e3c <conv2Mil>:

RTC_TimeTypeDef conv2Mil(RTC_TimeTypeDef *oldTime) {
 8001e3c:	b5b0      	push	{r4, r5, r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]

	RTC_TimeTypeDef convertedTime = *oldTime;
 8001e46:	250c      	movs	r5, #12
 8001e48:	197b      	adds	r3, r7, r5
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e4e:	c313      	stmia	r3!, {r0, r1, r4}
 8001e50:	ca03      	ldmia	r2!, {r0, r1}
 8001e52:	c303      	stmia	r3!, {r0, r1}

	// If we are in PM, increment hours by 12 (but not if it is 12 p.m.)
	if(oldTime->TimeFormat == RTC_HOURFORMAT12_PM && oldTime->Hours != 12) {
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	78db      	ldrb	r3, [r3, #3]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10a      	bne.n	8001e72 <conv2Mil+0x36>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b0c      	cmp	r3, #12
 8001e62:	d006      	beq.n	8001e72 <conv2Mil+0x36>
		convertedTime.Hours += 12;
 8001e64:	197b      	adds	r3, r7, r5
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	330c      	adds	r3, #12
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	197b      	adds	r3, r7, r5
 8001e6e:	701a      	strb	r2, [r3, #0]
 8001e70:	e00b      	b.n	8001e8a <conv2Mil+0x4e>
	}
	// If we are in AM and the hours are 12, set hours to 0.
	else if(oldTime->TimeFormat == RTC_HOURFORMAT12_AM && oldTime->Hours == 12) {
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	78db      	ldrb	r3, [r3, #3]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d107      	bne.n	8001e8a <conv2Mil+0x4e>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	d103      	bne.n	8001e8a <conv2Mil+0x4e>
		convertedTime.Hours = 0;
 8001e82:	230c      	movs	r3, #12
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
	else { // No change

	}

	// Make the update and display time function think that it is AM always
	convertedTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001e8a:	210c      	movs	r1, #12
 8001e8c:	187b      	adds	r3, r7, r1
 8001e8e:	2200      	movs	r2, #0
 8001e90:	70da      	strb	r2, [r3, #3]

	return convertedTime;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	187a      	adds	r2, r7, r1
 8001e96:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e98:	c313      	stmia	r3!, {r0, r1, r4}
 8001e9a:	ca03      	ldmia	r2!, {r0, r1}
 8001e9c:	c303      	stmia	r3!, {r0, r1}

}
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b008      	add	sp, #32
 8001ea4:	bdb0      	pop	{r4, r5, r7, pc}

08001ea6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eaa:	b672      	cpsid	i
}
 8001eac:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eae:	46c0      	nop			@ (mov r8, r8)
 8001eb0:	e7fd      	b.n	8001eae <Error_Handler+0x8>
	...

08001eb4 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8001eb4:	b5b0      	push	{r4, r5, r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	0005      	movs	r5, r0
 8001ebc:	000c      	movs	r4, r1
 8001ebe:	0010      	movs	r0, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	1dbb      	adds	r3, r7, #6
 8001ec4:	1c2a      	adds	r2, r5, #0
 8001ec6:	801a      	strh	r2, [r3, #0]
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	1c22      	adds	r2, r4, #0
 8001ecc:	801a      	strh	r2, [r3, #0]
 8001ece:	1cbb      	adds	r3, r7, #2
 8001ed0:	1c02      	adds	r2, r0, #0
 8001ed2:	801a      	strh	r2, [r3, #0]
 8001ed4:	003b      	movs	r3, r7
 8001ed6:	1c0a      	adds	r2, r1, #0
 8001ed8:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 8001eda:	4b7c      	ldr	r3, [pc, #496]	@ (80020cc <sevSeg_Init+0x218>)
 8001edc:	1dba      	adds	r2, r7, #6
 8001ede:	8812      	ldrh	r2, [r2, #0]
 8001ee0:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 8001ee2:	4b7b      	ldr	r3, [pc, #492]	@ (80020d0 <sevSeg_Init+0x21c>)
 8001ee4:	1d3a      	adds	r2, r7, #4
 8001ee6:	8812      	ldrh	r2, [r2, #0]
 8001ee8:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 8001eea:	4b7a      	ldr	r3, [pc, #488]	@ (80020d4 <sevSeg_Init+0x220>)
 8001eec:	1cba      	adds	r2, r7, #2
 8001eee:	8812      	ldrh	r2, [r2, #0]
 8001ef0:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 8001ef2:	4b79      	ldr	r3, [pc, #484]	@ (80020d8 <sevSeg_Init+0x224>)
 8001ef4:	003a      	movs	r2, r7
 8001ef6:	8812      	ldrh	r2, [r2, #0]
 8001ef8:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 8001efa:	4a78      	ldr	r2, [pc, #480]	@ (80020dc <sevSeg_Init+0x228>)
 8001efc:	2330      	movs	r3, #48	@ 0x30
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 8001f04:	4a76      	ldr	r2, [pc, #472]	@ (80020e0 <sevSeg_Init+0x22c>)
 8001f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f08:	0010      	movs	r0, r2
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	234c      	movs	r3, #76	@ 0x4c
 8001f0e:	001a      	movs	r2, r3
 8001f10:	f005 faa0 	bl	8007454 <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 8001f14:	4b73      	ldr	r3, [pc, #460]	@ (80020e4 <sevSeg_Init+0x230>)
 8001f16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f18:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	e00b      	b.n	8001f38 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f26:	18d3      	adds	r3, r2, r3
 8001f28:	6819      	ldr	r1, [r3, #0]
 8001f2a:	4b6f      	ldr	r3, [pc, #444]	@ (80020e8 <sevSeg_Init+0x234>)
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	0092      	lsls	r2, r2, #2
 8001f30:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3301      	adds	r3, #1
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	ddf0      	ble.n	8001f20 <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8001f3e:	4b6a      	ldr	r3, [pc, #424]	@ (80020e8 <sevSeg_Init+0x234>)
 8001f40:	6918      	ldr	r0, [r3, #16]
 8001f42:	4b66      	ldr	r3, [pc, #408]	@ (80020dc <sevSeg_Init+0x228>)
 8001f44:	8819      	ldrh	r1, [r3, #0]
 8001f46:	4b69      	ldr	r3, [pc, #420]	@ (80020ec <sevSeg_Init+0x238>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	001a      	movs	r2, r3
 8001f4c:	f001 f9c9 	bl	80032e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 8001f50:	4b65      	ldr	r3, [pc, #404]	@ (80020e8 <sevSeg_Init+0x234>)
 8001f52:	6918      	ldr	r0, [r3, #16]
 8001f54:	4b61      	ldr	r3, [pc, #388]	@ (80020dc <sevSeg_Init+0x228>)
 8001f56:	8819      	ldrh	r1, [r3, #0]
 8001f58:	4b64      	ldr	r3, [pc, #400]	@ (80020ec <sevSeg_Init+0x238>)
 8001f5a:	785b      	ldrb	r3, [r3, #1]
 8001f5c:	001a      	movs	r2, r3
 8001f5e:	f001 f9c0 	bl	80032e2 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8001f62:	4b61      	ldr	r3, [pc, #388]	@ (80020e8 <sevSeg_Init+0x234>)
 8001f64:	6898      	ldr	r0, [r3, #8]
 8001f66:	4b5b      	ldr	r3, [pc, #364]	@ (80020d4 <sevSeg_Init+0x220>)
 8001f68:	8819      	ldrh	r1, [r3, #0]
 8001f6a:	4b60      	ldr	r3, [pc, #384]	@ (80020ec <sevSeg_Init+0x238>)
 8001f6c:	785b      	ldrb	r3, [r3, #1]
 8001f6e:	001a      	movs	r2, r3
 8001f70:	f001 f9b7 	bl	80032e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8001f74:	4b5c      	ldr	r3, [pc, #368]	@ (80020e8 <sevSeg_Init+0x234>)
 8001f76:	6898      	ldr	r0, [r3, #8]
 8001f78:	4b56      	ldr	r3, [pc, #344]	@ (80020d4 <sevSeg_Init+0x220>)
 8001f7a:	8819      	ldrh	r1, [r3, #0]
 8001f7c:	4b5b      	ldr	r3, [pc, #364]	@ (80020ec <sevSeg_Init+0x238>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	001a      	movs	r2, r3
 8001f82:	f001 f9ae 	bl	80032e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8001f86:	4b58      	ldr	r3, [pc, #352]	@ (80020e8 <sevSeg_Init+0x234>)
 8001f88:	68d8      	ldr	r0, [r3, #12]
 8001f8a:	4b53      	ldr	r3, [pc, #332]	@ (80020d8 <sevSeg_Init+0x224>)
 8001f8c:	8819      	ldrh	r1, [r3, #0]
 8001f8e:	4b57      	ldr	r3, [pc, #348]	@ (80020ec <sevSeg_Init+0x238>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	001a      	movs	r2, r3
 8001f94:	f001 f9a5 	bl	80032e2 <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8001f98:	2032      	movs	r0, #50	@ 0x32
 8001f9a:	f000 f95f 	bl	800225c <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 8001f9e:	2308      	movs	r3, #8
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	4a53      	ldr	r2, [pc, #332]	@ (80020f0 <sevSeg_Init+0x23c>)
 8001fa4:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	e038      	b.n	800201e <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8001fac:	231b      	movs	r3, #27
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	18b9      	adds	r1, r7, r2
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	188a      	adds	r2, r1, r2
 8001fb8:	7812      	ldrb	r2, [r2, #0]
 8001fba:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	e027      	b.n	8002012 <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 8001fc2:	4b49      	ldr	r3, [pc, #292]	@ (80020e8 <sevSeg_Init+0x234>)
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	4b41      	ldr	r3, [pc, #260]	@ (80020cc <sevSeg_Init+0x218>)
 8001fc8:	8819      	ldrh	r1, [r3, #0]
 8001fca:	241b      	movs	r4, #27
 8001fcc:	193b      	adds	r3, r7, r4
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	4a45      	ldr	r2, [pc, #276]	@ (80020ec <sevSeg_Init+0x238>)
 8001fd6:	5cd3      	ldrb	r3, [r2, r3]
 8001fd8:	001a      	movs	r2, r3
 8001fda:	f001 f982 	bl	80032e2 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 8001fde:	4b42      	ldr	r3, [pc, #264]	@ (80020e8 <sevSeg_Init+0x234>)
 8001fe0:	6858      	ldr	r0, [r3, #4]
 8001fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80020d0 <sevSeg_Init+0x21c>)
 8001fe4:	8819      	ldrh	r1, [r3, #0]
 8001fe6:	4b41      	ldr	r3, [pc, #260]	@ (80020ec <sevSeg_Init+0x238>)
 8001fe8:	785b      	ldrb	r3, [r3, #1]
 8001fea:	001a      	movs	r2, r3
 8001fec:	f001 f979 	bl	80032e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 8001ff0:	4b3d      	ldr	r3, [pc, #244]	@ (80020e8 <sevSeg_Init+0x234>)
 8001ff2:	6858      	ldr	r0, [r3, #4]
 8001ff4:	4b36      	ldr	r3, [pc, #216]	@ (80020d0 <sevSeg_Init+0x21c>)
 8001ff6:	8819      	ldrh	r1, [r3, #0]
 8001ff8:	4b3c      	ldr	r3, [pc, #240]	@ (80020ec <sevSeg_Init+0x238>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	001a      	movs	r2, r3
 8001ffe:	f001 f970 	bl	80032e2 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 8002002:	193b      	adds	r3, r7, r4
 8002004:	193a      	adds	r2, r7, r4
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	0852      	lsrs	r2, r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	3301      	adds	r3, #1
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b07      	cmp	r3, #7
 8002016:	ddd4      	ble.n	8001fc2 <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	3301      	adds	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b03      	cmp	r3, #3
 8002022:	ddc3      	ble.n	8001fac <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002024:	4b30      	ldr	r3, [pc, #192]	@ (80020e8 <sevSeg_Init+0x234>)
 8002026:	6898      	ldr	r0, [r3, #8]
 8002028:	4b2a      	ldr	r3, [pc, #168]	@ (80020d4 <sevSeg_Init+0x220>)
 800202a:	8819      	ldrh	r1, [r3, #0]
 800202c:	4b2f      	ldr	r3, [pc, #188]	@ (80020ec <sevSeg_Init+0x238>)
 800202e:	785b      	ldrb	r3, [r3, #1]
 8002030:	001a      	movs	r2, r3
 8002032:	f001 f956 	bl	80032e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002036:	4b2c      	ldr	r3, [pc, #176]	@ (80020e8 <sevSeg_Init+0x234>)
 8002038:	6898      	ldr	r0, [r3, #8]
 800203a:	4b26      	ldr	r3, [pc, #152]	@ (80020d4 <sevSeg_Init+0x220>)
 800203c:	8819      	ldrh	r1, [r3, #0]
 800203e:	4b2b      	ldr	r3, [pc, #172]	@ (80020ec <sevSeg_Init+0x238>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	001a      	movs	r2, r3
 8002044:	f001 f94d 	bl	80032e2 <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8002048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800204a:	0018      	movs	r0, r3
 800204c:	f004 fa0c 	bl	8006468 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 8002050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002052:	0018      	movs	r0, r3
 8002054:	f004 f9bc 	bl	80063d0 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8002058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 8002060:	46c0      	nop			@ (mov r8, r8)
 8002062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad2      	subs	r2, r2, r3
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	01db      	lsls	r3, r3, #7
 8002070:	429a      	cmp	r2, r3
 8002072:	d3f6      	bcc.n	8002062 <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8002074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002076:	0018      	movs	r0, r3
 8002078:	f004 f9f6 	bl	8006468 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 800207c:	4b1a      	ldr	r3, [pc, #104]	@ (80020e8 <sevSeg_Init+0x234>)
 800207e:	6918      	ldr	r0, [r3, #16]
 8002080:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <sevSeg_Init+0x228>)
 8002082:	8819      	ldrh	r1, [r3, #0]
 8002084:	4b19      	ldr	r3, [pc, #100]	@ (80020ec <sevSeg_Init+0x238>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	001a      	movs	r2, r3
 800208a:	f001 f92a 	bl	80032e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 800208e:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <sevSeg_Init+0x234>)
 8002090:	6918      	ldr	r0, [r3, #16]
 8002092:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <sevSeg_Init+0x228>)
 8002094:	8819      	ldrh	r1, [r3, #0]
 8002096:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <sevSeg_Init+0x238>)
 8002098:	785b      	ldrb	r3, [r3, #1]
 800209a:	001a      	movs	r2, r3
 800209c:	f001 f921 	bl	80032e2 <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80020a0:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <sevSeg_Init+0x234>)
 80020a2:	6898      	ldr	r0, [r3, #8]
 80020a4:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <sevSeg_Init+0x220>)
 80020a6:	8819      	ldrh	r1, [r3, #0]
 80020a8:	4b10      	ldr	r3, [pc, #64]	@ (80020ec <sevSeg_Init+0x238>)
 80020aa:	785b      	ldrb	r3, [r3, #1]
 80020ac:	001a      	movs	r2, r3
 80020ae:	f001 f918 	bl	80032e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80020b2:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <sevSeg_Init+0x234>)
 80020b4:	6898      	ldr	r0, [r3, #8]
 80020b6:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <sevSeg_Init+0x220>)
 80020b8:	8819      	ldrh	r1, [r3, #0]
 80020ba:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <sevSeg_Init+0x238>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	001a      	movs	r2, r3
 80020c0:	f001 f90f 	bl	80032e2 <HAL_GPIO_WritePin>

}
 80020c4:	46c0      	nop			@ (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b008      	add	sp, #32
 80020ca:	bdb0      	pop	{r4, r5, r7, pc}
 80020cc:	200003f8 	.word	0x200003f8
 80020d0:	200003fa 	.word	0x200003fa
 80020d4:	200003fc 	.word	0x200003fc
 80020d8:	200003fe 	.word	0x200003fe
 80020dc:	20000400 	.word	0x20000400
 80020e0:	20000404 	.word	0x20000404
 80020e4:	20000450 	.word	0x20000450
 80020e8:	20000050 	.word	0x20000050
 80020ec:	20000064 	.word	0x20000064
 80020f0:	471d3700 	.word	0x471d3700

080020f4 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime, uint8_t userAlarmEnable) {
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	000a      	movs	r2, r1
 80020fe:	1cfb      	adds	r3, r7, #3
 8002100:	701a      	strb	r2, [r3, #0]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	210a      	movs	r1, #10
 8002108:	0018      	movs	r0, r3
 800210a:	f7fd fffb 	bl	8000104 <__udivsi3>
 800210e:	0003      	movs	r3, r0
 8002110:	b2da      	uxtb	r2, r3
 8002112:	2408      	movs	r4, #8
 8002114:	193b      	adds	r3, r7, r4
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	210a      	movs	r1, #10
 800211e:	0018      	movs	r0, r3
 8002120:	f7fe f876 	bl	8000210 <__aeabi_uidivmod>
 8002124:	000b      	movs	r3, r1
 8002126:	b2da      	uxtb	r2, r3
 8002128:	193b      	adds	r3, r7, r4
 800212a:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002130:	210a      	movs	r1, #10
 8002132:	0018      	movs	r0, r3
 8002134:	f7fd ffe6 	bl	8000104 <__udivsi3>
 8002138:	0003      	movs	r3, r0
 800213a:	b2da      	uxtb	r2, r3
 800213c:	193b      	adds	r3, r7, r4
 800213e:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002144:	210a      	movs	r1, #10
 8002146:	0018      	movs	r0, r3
 8002148:	f7fe f862 	bl	8000210 <__aeabi_uidivmod>
 800214c:	000b      	movs	r3, r1
 800214e:	b2da      	uxtb	r2, r3
 8002150:	193b      	adds	r3, r7, r4
 8002152:	70da      	strb	r2, [r3, #3]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 3; i >= 0; i--) {
 8002154:	2303      	movs	r3, #3
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	e05b      	b.n	8002212 <sevSeg_updateDigits+0x11e>

		sendByte = dispDigits[sendTime[i]];
 800215a:	2308      	movs	r3, #8
 800215c:	18fa      	adds	r2, r7, r3
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	18d3      	adds	r3, r2, r3
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	0019      	movs	r1, r3
 8002166:	2017      	movs	r0, #23
 8002168:	183b      	adds	r3, r7, r0
 800216a:	4a36      	ldr	r2, [pc, #216]	@ (8002244 <sevSeg_updateDigits+0x150>)
 800216c:	5c52      	ldrb	r2, [r2, r1]
 800216e:	701a      	strb	r2, [r3, #0]

		// If tenth's place of hour and zero, disable this segment
		if( (i == 0) && (sendByte == dispDigits[0])) {
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d107      	bne.n	8002186 <sevSeg_updateDigits+0x92>
 8002176:	2242      	movs	r2, #66	@ 0x42
 8002178:	183b      	adds	r3, r7, r0
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4293      	cmp	r3, r2
 800217e:	d102      	bne.n	8002186 <sevSeg_updateDigits+0x92>
			sendByte = 0xFF;
 8002180:	183b      	adds	r3, r7, r0
 8002182:	22ff      	movs	r2, #255	@ 0xff
 8002184:	701a      	strb	r2, [r3, #0]
		}

		// If one's place of hour, set decimal point based on AM/PM.
		// OR
		// If one's place of minute, set decimal place based on user alarm enabled
		if( ((i == 1) && (updateTime->TimeFormat == RTC_HOURFORMAT12_PM)) ||
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d103      	bne.n	8002194 <sevSeg_updateDigits+0xa0>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	78db      	ldrb	r3, [r3, #3]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d006      	beq.n	80021a2 <sevSeg_updateDigits+0xae>
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d10a      	bne.n	80021b0 <sevSeg_updateDigits+0xbc>
			((i == 3) && userAlarmEnable)	) {
 800219a:	1cfb      	adds	r3, r7, #3
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <sevSeg_updateDigits+0xbc>
			sendByte = (sendByte & 0b11111101);
 80021a2:	2217      	movs	r2, #23
 80021a4:	18bb      	adds	r3, r7, r2
 80021a6:	18ba      	adds	r2, r7, r2
 80021a8:	7812      	ldrb	r2, [r2, #0]
 80021aa:	2102      	movs	r1, #2
 80021ac:	438a      	bics	r2, r1
 80021ae:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	e027      	b.n	8002206 <sevSeg_updateDigits+0x112>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[(sendByte & 1)]);
 80021b6:	4b24      	ldr	r3, [pc, #144]	@ (8002248 <sevSeg_updateDigits+0x154>)
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	4b24      	ldr	r3, [pc, #144]	@ (800224c <sevSeg_updateDigits+0x158>)
 80021bc:	8819      	ldrh	r1, [r3, #0]
 80021be:	2417      	movs	r4, #23
 80021c0:	193b      	adds	r3, r7, r4
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2201      	movs	r2, #1
 80021c6:	4013      	ands	r3, r2
 80021c8:	4a21      	ldr	r2, [pc, #132]	@ (8002250 <sevSeg_updateDigits+0x15c>)
 80021ca:	5cd3      	ldrb	r3, [r2, r3]
 80021cc:	001a      	movs	r2, r3
 80021ce:	f001 f888 	bl	80032e2 <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 80021d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002248 <sevSeg_updateDigits+0x154>)
 80021d4:	6858      	ldr	r0, [r3, #4]
 80021d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002254 <sevSeg_updateDigits+0x160>)
 80021d8:	8819      	ldrh	r1, [r3, #0]
 80021da:	4b1d      	ldr	r3, [pc, #116]	@ (8002250 <sevSeg_updateDigits+0x15c>)
 80021dc:	785b      	ldrb	r3, [r3, #1]
 80021de:	001a      	movs	r2, r3
 80021e0:	f001 f87f 	bl	80032e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 80021e4:	4b18      	ldr	r3, [pc, #96]	@ (8002248 <sevSeg_updateDigits+0x154>)
 80021e6:	6858      	ldr	r0, [r3, #4]
 80021e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002254 <sevSeg_updateDigits+0x160>)
 80021ea:	8819      	ldrh	r1, [r3, #0]
 80021ec:	4b18      	ldr	r3, [pc, #96]	@ (8002250 <sevSeg_updateDigits+0x15c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	001a      	movs	r2, r3
 80021f2:	f001 f876 	bl	80032e2 <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 80021f6:	193b      	adds	r3, r7, r4
 80021f8:	193a      	adds	r2, r7, r4
 80021fa:	7812      	ldrb	r2, [r2, #0]
 80021fc:	0852      	lsrs	r2, r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3301      	adds	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b07      	cmp	r3, #7
 800220a:	ddd4      	ble.n	80021b6 <sevSeg_updateDigits+0xc2>
	for(int i = 3; i >= 0; i--) {
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	3b01      	subs	r3, #1
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	daa0      	bge.n	800215a <sevSeg_updateDigits+0x66>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 8002218:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <sevSeg_updateDigits+0x154>)
 800221a:	6898      	ldr	r0, [r3, #8]
 800221c:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <sevSeg_updateDigits+0x164>)
 800221e:	8819      	ldrh	r1, [r3, #0]
 8002220:	4b0b      	ldr	r3, [pc, #44]	@ (8002250 <sevSeg_updateDigits+0x15c>)
 8002222:	785b      	ldrb	r3, [r3, #1]
 8002224:	001a      	movs	r2, r3
 8002226:	f001 f85c 	bl	80032e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800222a:	4b07      	ldr	r3, [pc, #28]	@ (8002248 <sevSeg_updateDigits+0x154>)
 800222c:	6898      	ldr	r0, [r3, #8]
 800222e:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <sevSeg_updateDigits+0x164>)
 8002230:	8819      	ldrh	r1, [r3, #0]
 8002232:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <sevSeg_updateDigits+0x15c>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	001a      	movs	r2, r3
 8002238:	f001 f853 	bl	80032e2 <HAL_GPIO_WritePin>

	return;
 800223c:	46c0      	nop			@ (mov r8, r8)

}
 800223e:	46bd      	mov	sp, r7
 8002240:	b007      	add	sp, #28
 8002242:	bd90      	pop	{r4, r7, pc}
 8002244:	080074a8 	.word	0x080074a8
 8002248:	20000050 	.word	0x20000050
 800224c:	200003f8 	.word	0x200003f8
 8002250:	20000064 	.word	0x20000064
 8002254:	200003fa 	.word	0x200003fa
 8002258:	200003fc 	.word	0x200003fc

0800225c <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	0002      	movs	r2, r0
 8002264:	1dbb      	adds	r3, r7, #6
 8002266:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8002268:	4b20      	ldr	r3, [pc, #128]	@ (80022ec <sevSeg_setIntensity+0x90>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <sevSeg_setIntensity+0x20>
 8002270:	4b1f      	ldr	r3, [pc, #124]	@ (80022f0 <sevSeg_setIntensity+0x94>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	1dba      	adds	r2, r7, #6
 8002276:	8812      	ldrh	r2, [r2, #0]
 8002278:	635a      	str	r2, [r3, #52]	@ 0x34
 800227a:	e02c      	b.n	80022d6 <sevSeg_setIntensity+0x7a>
 800227c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ec <sevSeg_setIntensity+0x90>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b04      	cmp	r3, #4
 8002282:	d105      	bne.n	8002290 <sevSeg_setIntensity+0x34>
 8002284:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <sevSeg_setIntensity+0x94>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	1dbb      	adds	r3, r7, #6
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	6393      	str	r3, [r2, #56]	@ 0x38
 800228e:	e022      	b.n	80022d6 <sevSeg_setIntensity+0x7a>
 8002290:	4b16      	ldr	r3, [pc, #88]	@ (80022ec <sevSeg_setIntensity+0x90>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d105      	bne.n	80022a4 <sevSeg_setIntensity+0x48>
 8002298:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <sevSeg_setIntensity+0x94>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	1dbb      	adds	r3, r7, #6
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80022a2:	e018      	b.n	80022d6 <sevSeg_setIntensity+0x7a>
 80022a4:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <sevSeg_setIntensity+0x90>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b0c      	cmp	r3, #12
 80022aa:	d105      	bne.n	80022b8 <sevSeg_setIntensity+0x5c>
 80022ac:	4b10      	ldr	r3, [pc, #64]	@ (80022f0 <sevSeg_setIntensity+0x94>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	1dbb      	adds	r3, r7, #6
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b6:	e00e      	b.n	80022d6 <sevSeg_setIntensity+0x7a>
 80022b8:	4b0c      	ldr	r3, [pc, #48]	@ (80022ec <sevSeg_setIntensity+0x90>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b10      	cmp	r3, #16
 80022be:	d105      	bne.n	80022cc <sevSeg_setIntensity+0x70>
 80022c0:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <sevSeg_setIntensity+0x94>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	1dbb      	adds	r3, r7, #6
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80022ca:	e004      	b.n	80022d6 <sevSeg_setIntensity+0x7a>
 80022cc:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <sevSeg_setIntensity+0x94>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	1dbb      	adds	r3, r7, #6
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 80022d6:	4b05      	ldr	r3, [pc, #20]	@ (80022ec <sevSeg_setIntensity+0x90>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4b05      	ldr	r3, [pc, #20]	@ (80022f0 <sevSeg_setIntensity+0x94>)
 80022dc:	0011      	movs	r1, r2
 80022de:	0018      	movs	r0, r3
 80022e0:	f004 f9c2 	bl	8006668 <HAL_TIM_PWM_Start>

}
 80022e4:	46c0      	nop			@ (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b002      	add	sp, #8
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000450 	.word	0x20000450
 80022f0:	20000404 	.word	0x20000404

080022f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fa:	4b13      	ldr	r3, [pc, #76]	@ (8002348 <HAL_MspInit+0x54>)
 80022fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022fe:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <HAL_MspInit+0x54>)
 8002300:	2101      	movs	r1, #1
 8002302:	430a      	orrs	r2, r1
 8002304:	641a      	str	r2, [r3, #64]	@ 0x40
 8002306:	4b10      	ldr	r3, [pc, #64]	@ (8002348 <HAL_MspInit+0x54>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	2201      	movs	r2, #1
 800230c:	4013      	ands	r3, r2
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002312:	4b0d      	ldr	r3, [pc, #52]	@ (8002348 <HAL_MspInit+0x54>)
 8002314:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002316:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <HAL_MspInit+0x54>)
 8002318:	2180      	movs	r1, #128	@ 0x80
 800231a:	0549      	lsls	r1, r1, #21
 800231c:	430a      	orrs	r2, r1
 800231e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002320:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <HAL_MspInit+0x54>)
 8002322:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002324:	2380      	movs	r3, #128	@ 0x80
 8002326:	055b      	lsls	r3, r3, #21
 8002328:	4013      	ands	r3, r2
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	2004      	movs	r0, #4
 8002334:	f000 fc96 	bl	8002c64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002338:	2004      	movs	r0, #4
 800233a:	f000 fca8 	bl	8002c8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800233e:	46c0      	nop			@ (mov r8, r8)
 8002340:	46bd      	mov	sp, r7
 8002342:	b002      	add	sp, #8
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			@ (mov r8, r8)
 8002348:	40021000 	.word	0x40021000

0800234c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b095      	sub	sp, #84	@ 0x54
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	233c      	movs	r3, #60	@ 0x3c
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	0018      	movs	r0, r3
 800235a:	2314      	movs	r3, #20
 800235c:	001a      	movs	r2, r3
 800235e:	2100      	movs	r1, #0
 8002360:	f005 f84c 	bl	80073fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002364:	2414      	movs	r4, #20
 8002366:	193b      	adds	r3, r7, r4
 8002368:	0018      	movs	r0, r3
 800236a:	2328      	movs	r3, #40	@ 0x28
 800236c:	001a      	movs	r2, r3
 800236e:	2100      	movs	r1, #0
 8002370:	f005 f844 	bl	80073fc <memset>
  if(hi2c->Instance==I2C1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a22      	ldr	r2, [pc, #136]	@ (8002404 <HAL_I2C_MspInit+0xb8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d13d      	bne.n	80023fa <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800237e:	193b      	adds	r3, r7, r4
 8002380:	2220      	movs	r2, #32
 8002382:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002384:	193b      	adds	r3, r7, r4
 8002386:	2200      	movs	r2, #0
 8002388:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800238a:	193b      	adds	r3, r7, r4
 800238c:	0018      	movs	r0, r3
 800238e:	f002 fc71 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 8002392:	1e03      	subs	r3, r0, #0
 8002394:	d001      	beq.n	800239a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002396:	f7ff fd86 	bl	8001ea6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239a:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <HAL_I2C_MspInit+0xbc>)
 800239c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800239e:	4b1a      	ldr	r3, [pc, #104]	@ (8002408 <HAL_I2C_MspInit+0xbc>)
 80023a0:	2102      	movs	r1, #2
 80023a2:	430a      	orrs	r2, r1
 80023a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80023a6:	4b18      	ldr	r3, [pc, #96]	@ (8002408 <HAL_I2C_MspInit+0xbc>)
 80023a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023aa:	2202      	movs	r2, #2
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023b2:	213c      	movs	r1, #60	@ 0x3c
 80023b4:	187b      	adds	r3, r7, r1
 80023b6:	22c0      	movs	r2, #192	@ 0xc0
 80023b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ba:	187b      	adds	r3, r7, r1
 80023bc:	2212      	movs	r2, #18
 80023be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	187b      	adds	r3, r7, r1
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c6:	187b      	adds	r3, r7, r1
 80023c8:	2200      	movs	r2, #0
 80023ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80023cc:	187b      	adds	r3, r7, r1
 80023ce:	2206      	movs	r2, #6
 80023d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	4a0d      	ldr	r2, [pc, #52]	@ (800240c <HAL_I2C_MspInit+0xc0>)
 80023d6:	0019      	movs	r1, r3
 80023d8:	0010      	movs	r0, r2
 80023da:	f000 fe01 	bl	8002fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023de:	4b0a      	ldr	r3, [pc, #40]	@ (8002408 <HAL_I2C_MspInit+0xbc>)
 80023e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023e2:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <HAL_I2C_MspInit+0xbc>)
 80023e4:	2180      	movs	r1, #128	@ 0x80
 80023e6:	0389      	lsls	r1, r1, #14
 80023e8:	430a      	orrs	r2, r1
 80023ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023ec:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_I2C_MspInit+0xbc>)
 80023ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023f0:	2380      	movs	r3, #128	@ 0x80
 80023f2:	039b      	lsls	r3, r3, #14
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b015      	add	sp, #84	@ 0x54
 8002400:	bd90      	pop	{r4, r7, pc}
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	40005400 	.word	0x40005400
 8002408:	40021000 	.word	0x40021000
 800240c:	50000400 	.word	0x50000400

08002410 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b095      	sub	sp, #84	@ 0x54
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	233c      	movs	r3, #60	@ 0x3c
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	0018      	movs	r0, r3
 800241e:	2314      	movs	r3, #20
 8002420:	001a      	movs	r2, r3
 8002422:	2100      	movs	r1, #0
 8002424:	f004 ffea 	bl	80073fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002428:	2414      	movs	r4, #20
 800242a:	193b      	adds	r3, r7, r4
 800242c:	0018      	movs	r0, r3
 800242e:	2328      	movs	r3, #40	@ 0x28
 8002430:	001a      	movs	r2, r3
 8002432:	2100      	movs	r1, #0
 8002434:	f004 ffe2 	bl	80073fc <memset>
  if(hi2s->Instance==SPI1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a4a      	ldr	r2, [pc, #296]	@ (8002568 <HAL_I2S_MspInit+0x158>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d000      	beq.n	8002444 <HAL_I2S_MspInit+0x34>
 8002442:	e08d      	b.n	8002560 <HAL_I2S_MspInit+0x150>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8002444:	193b      	adds	r3, r7, r4
 8002446:	2280      	movs	r2, #128	@ 0x80
 8002448:	0112      	lsls	r2, r2, #4
 800244a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 800244c:	193b      	adds	r3, r7, r4
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002452:	193b      	adds	r3, r7, r4
 8002454:	0018      	movs	r0, r3
 8002456:	f002 fc0d 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 800245a:	1e03      	subs	r3, r0, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800245e:	f7ff fd22 	bl	8001ea6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002462:	4b42      	ldr	r3, [pc, #264]	@ (800256c <HAL_I2S_MspInit+0x15c>)
 8002464:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002466:	4b41      	ldr	r3, [pc, #260]	@ (800256c <HAL_I2S_MspInit+0x15c>)
 8002468:	2180      	movs	r1, #128	@ 0x80
 800246a:	0149      	lsls	r1, r1, #5
 800246c:	430a      	orrs	r2, r1
 800246e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002470:	4b3e      	ldr	r3, [pc, #248]	@ (800256c <HAL_I2S_MspInit+0x15c>)
 8002472:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002474:	2380      	movs	r3, #128	@ 0x80
 8002476:	015b      	lsls	r3, r3, #5
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	4b3b      	ldr	r3, [pc, #236]	@ (800256c <HAL_I2S_MspInit+0x15c>)
 8002480:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002482:	4b3a      	ldr	r3, [pc, #232]	@ (800256c <HAL_I2S_MspInit+0x15c>)
 8002484:	2101      	movs	r1, #1
 8002486:	430a      	orrs	r2, r1
 8002488:	635a      	str	r2, [r3, #52]	@ 0x34
 800248a:	4b38      	ldr	r3, [pc, #224]	@ (800256c <HAL_I2S_MspInit+0x15c>)
 800248c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248e:	2201      	movs	r2, #1
 8002490:	4013      	ands	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002496:	4b35      	ldr	r3, [pc, #212]	@ (800256c <HAL_I2S_MspInit+0x15c>)
 8002498:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800249a:	4b34      	ldr	r3, [pc, #208]	@ (800256c <HAL_I2S_MspInit+0x15c>)
 800249c:	2102      	movs	r1, #2
 800249e:	430a      	orrs	r2, r1
 80024a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80024a2:	4b32      	ldr	r3, [pc, #200]	@ (800256c <HAL_I2S_MspInit+0x15c>)
 80024a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a6:	2202      	movs	r2, #2
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PB0     ------> I2S1_WS
    PA12 [PA10]     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 80024ae:	243c      	movs	r4, #60	@ 0x3c
 80024b0:	193b      	adds	r3, r7, r4
 80024b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002570 <HAL_I2S_MspInit+0x160>)
 80024b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b6:	193b      	adds	r3, r7, r4
 80024b8:	2202      	movs	r2, #2
 80024ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	193b      	adds	r3, r7, r4
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	193b      	adds	r3, r7, r4
 80024c4:	2200      	movs	r2, #0
 80024c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80024c8:	193b      	adds	r3, r7, r4
 80024ca:	2200      	movs	r2, #0
 80024cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ce:	193a      	adds	r2, r7, r4
 80024d0:	23a0      	movs	r3, #160	@ 0xa0
 80024d2:	05db      	lsls	r3, r3, #23
 80024d4:	0011      	movs	r1, r2
 80024d6:	0018      	movs	r0, r3
 80024d8:	f000 fd82 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024dc:	0021      	movs	r1, r4
 80024de:	187b      	adds	r3, r7, r1
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	2202      	movs	r2, #2
 80024e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002574 <HAL_I2S_MspInit+0x164>)
 8002500:	0019      	movs	r1, r3
 8002502:	0010      	movs	r0, r2
 8002504:	f000 fd6c 	bl	8002fe0 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002508:	4b1b      	ldr	r3, [pc, #108]	@ (8002578 <HAL_I2S_MspInit+0x168>)
 800250a:	4a1c      	ldr	r2, [pc, #112]	@ (800257c <HAL_I2S_MspInit+0x16c>)
 800250c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800250e:	4b1a      	ldr	r3, [pc, #104]	@ (8002578 <HAL_I2S_MspInit+0x168>)
 8002510:	2211      	movs	r2, #17
 8002512:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002514:	4b18      	ldr	r3, [pc, #96]	@ (8002578 <HAL_I2S_MspInit+0x168>)
 8002516:	2210      	movs	r2, #16
 8002518:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800251a:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <HAL_I2S_MspInit+0x168>)
 800251c:	2200      	movs	r2, #0
 800251e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002520:	4b15      	ldr	r3, [pc, #84]	@ (8002578 <HAL_I2S_MspInit+0x168>)
 8002522:	2280      	movs	r2, #128	@ 0x80
 8002524:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002526:	4b14      	ldr	r3, [pc, #80]	@ (8002578 <HAL_I2S_MspInit+0x168>)
 8002528:	2280      	movs	r2, #128	@ 0x80
 800252a:	0052      	lsls	r2, r2, #1
 800252c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800252e:	4b12      	ldr	r3, [pc, #72]	@ (8002578 <HAL_I2S_MspInit+0x168>)
 8002530:	2280      	movs	r2, #128	@ 0x80
 8002532:	00d2      	lsls	r2, r2, #3
 8002534:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002536:	4b10      	ldr	r3, [pc, #64]	@ (8002578 <HAL_I2S_MspInit+0x168>)
 8002538:	2200      	movs	r2, #0
 800253a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800253c:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <HAL_I2S_MspInit+0x168>)
 800253e:	22c0      	movs	r2, #192	@ 0xc0
 8002540:	0192      	lsls	r2, r2, #6
 8002542:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002544:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <HAL_I2S_MspInit+0x168>)
 8002546:	0018      	movs	r0, r3
 8002548:	f000 fbbe 	bl	8002cc8 <HAL_DMA_Init>
 800254c:	1e03      	subs	r3, r0, #0
 800254e:	d001      	beq.n	8002554 <HAL_I2S_MspInit+0x144>
    {
      Error_Handler();
 8002550:	f7ff fca9 	bl	8001ea6 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a08      	ldr	r2, [pc, #32]	@ (8002578 <HAL_I2S_MspInit+0x168>)
 8002558:	62da      	str	r2, [r3, #44]	@ 0x2c
 800255a:	4b07      	ldr	r3, [pc, #28]	@ (8002578 <HAL_I2S_MspInit+0x168>)
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002560:	46c0      	nop			@ (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b015      	add	sp, #84	@ 0x54
 8002566:	bd90      	pop	{r4, r7, pc}
 8002568:	40013000 	.word	0x40013000
 800256c:	40021000 	.word	0x40021000
 8002570:	00001002 	.word	0x00001002
 8002574:	50000400 	.word	0x50000400
 8002578:	20000158 	.word	0x20000158
 800257c:	40020030 	.word	0x40020030

08002580 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b08f      	sub	sp, #60	@ 0x3c
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002588:	2410      	movs	r4, #16
 800258a:	193b      	adds	r3, r7, r4
 800258c:	0018      	movs	r0, r3
 800258e:	2328      	movs	r3, #40	@ 0x28
 8002590:	001a      	movs	r2, r3
 8002592:	2100      	movs	r1, #0
 8002594:	f004 ff32 	bl	80073fc <memset>
  if(hrtc->Instance==RTC)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a19      	ldr	r2, [pc, #100]	@ (8002604 <HAL_RTC_MspInit+0x84>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d12c      	bne.n	80025fc <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025a2:	193b      	adds	r3, r7, r4
 80025a4:	2280      	movs	r2, #128	@ 0x80
 80025a6:	0292      	lsls	r2, r2, #10
 80025a8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80025aa:	193b      	adds	r3, r7, r4
 80025ac:	2280      	movs	r2, #128	@ 0x80
 80025ae:	0052      	lsls	r2, r2, #1
 80025b0:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025b2:	193b      	adds	r3, r7, r4
 80025b4:	0018      	movs	r0, r3
 80025b6:	f002 fb5d 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 80025ba:	1e03      	subs	r3, r0, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80025be:	f7ff fc72 	bl	8001ea6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025c2:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <HAL_RTC_MspInit+0x88>)
 80025c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025c6:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <HAL_RTC_MspInit+0x88>)
 80025c8:	2180      	movs	r1, #128	@ 0x80
 80025ca:	0209      	lsls	r1, r1, #8
 80025cc:	430a      	orrs	r2, r1
 80025ce:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80025d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <HAL_RTC_MspInit+0x88>)
 80025d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <HAL_RTC_MspInit+0x88>)
 80025d6:	2180      	movs	r1, #128	@ 0x80
 80025d8:	00c9      	lsls	r1, r1, #3
 80025da:	430a      	orrs	r2, r1
 80025dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025de:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <HAL_RTC_MspInit+0x88>)
 80025e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025e2:	2380      	movs	r3, #128	@ 0x80
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4013      	ands	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80025ec:	2200      	movs	r2, #0
 80025ee:	2100      	movs	r1, #0
 80025f0:	2002      	movs	r0, #2
 80025f2:	f000 fb37 	bl	8002c64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80025f6:	2002      	movs	r0, #2
 80025f8:	f000 fb49 	bl	8002c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025fc:	46c0      	nop			@ (mov r8, r8)
 80025fe:	46bd      	mov	sp, r7
 8002600:	b00f      	add	sp, #60	@ 0x3c
 8002602:	bd90      	pop	{r4, r7, pc}
 8002604:	40002800 	.word	0x40002800
 8002608:	40021000 	.word	0x40021000

0800260c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b08b      	sub	sp, #44	@ 0x2c
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	2414      	movs	r4, #20
 8002616:	193b      	adds	r3, r7, r4
 8002618:	0018      	movs	r0, r3
 800261a:	2314      	movs	r3, #20
 800261c:	001a      	movs	r2, r3
 800261e:	2100      	movs	r1, #0
 8002620:	f004 feec 	bl	80073fc <memset>
  if(hspi->Instance==SPI2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a50      	ldr	r2, [pc, #320]	@ (800276c <HAL_SPI_MspInit+0x160>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d000      	beq.n	8002630 <HAL_SPI_MspInit+0x24>
 800262e:	e098      	b.n	8002762 <HAL_SPI_MspInit+0x156>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002630:	4b4f      	ldr	r3, [pc, #316]	@ (8002770 <HAL_SPI_MspInit+0x164>)
 8002632:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002634:	4b4e      	ldr	r3, [pc, #312]	@ (8002770 <HAL_SPI_MspInit+0x164>)
 8002636:	2180      	movs	r1, #128	@ 0x80
 8002638:	01c9      	lsls	r1, r1, #7
 800263a:	430a      	orrs	r2, r1
 800263c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800263e:	4b4c      	ldr	r3, [pc, #304]	@ (8002770 <HAL_SPI_MspInit+0x164>)
 8002640:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	01db      	lsls	r3, r3, #7
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264c:	4b48      	ldr	r3, [pc, #288]	@ (8002770 <HAL_SPI_MspInit+0x164>)
 800264e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002650:	4b47      	ldr	r3, [pc, #284]	@ (8002770 <HAL_SPI_MspInit+0x164>)
 8002652:	2101      	movs	r1, #1
 8002654:	430a      	orrs	r2, r1
 8002656:	635a      	str	r2, [r3, #52]	@ 0x34
 8002658:	4b45      	ldr	r3, [pc, #276]	@ (8002770 <HAL_SPI_MspInit+0x164>)
 800265a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265c:	2201      	movs	r2, #1
 800265e:	4013      	ands	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002664:	193b      	adds	r3, r7, r4
 8002666:	2209      	movs	r2, #9
 8002668:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	193b      	adds	r3, r7, r4
 800266c:	2202      	movs	r2, #2
 800266e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	193b      	adds	r3, r7, r4
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002676:	193b      	adds	r3, r7, r4
 8002678:	2200      	movs	r2, #0
 800267a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800267c:	193b      	adds	r3, r7, r4
 800267e:	2200      	movs	r2, #0
 8002680:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002682:	193a      	adds	r2, r7, r4
 8002684:	23a0      	movs	r3, #160	@ 0xa0
 8002686:	05db      	lsls	r3, r3, #23
 8002688:	0011      	movs	r1, r2
 800268a:	0018      	movs	r0, r3
 800268c:	f000 fca8 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002690:	0021      	movs	r1, r4
 8002692:	187b      	adds	r3, r7, r1
 8002694:	2210      	movs	r2, #16
 8002696:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	187b      	adds	r3, r7, r1
 800269a:	2202      	movs	r2, #2
 800269c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	187b      	adds	r3, r7, r1
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a4:	187b      	adds	r3, r7, r1
 80026a6:	2200      	movs	r2, #0
 80026a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80026aa:	187b      	adds	r3, r7, r1
 80026ac:	2201      	movs	r2, #1
 80026ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	187a      	adds	r2, r7, r1
 80026b2:	23a0      	movs	r3, #160	@ 0xa0
 80026b4:	05db      	lsls	r3, r3, #23
 80026b6:	0011      	movs	r1, r2
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 fc91 	bl	8002fe0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel1;
 80026be:	4b2d      	ldr	r3, [pc, #180]	@ (8002774 <HAL_SPI_MspInit+0x168>)
 80026c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002778 <HAL_SPI_MspInit+0x16c>)
 80026c2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80026c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002774 <HAL_SPI_MspInit+0x168>)
 80026c6:	2212      	movs	r2, #18
 80026c8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002774 <HAL_SPI_MspInit+0x168>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d0:	4b28      	ldr	r3, [pc, #160]	@ (8002774 <HAL_SPI_MspInit+0x168>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026d6:	4b27      	ldr	r3, [pc, #156]	@ (8002774 <HAL_SPI_MspInit+0x168>)
 80026d8:	2280      	movs	r2, #128	@ 0x80
 80026da:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026dc:	4b25      	ldr	r3, [pc, #148]	@ (8002774 <HAL_SPI_MspInit+0x168>)
 80026de:	2200      	movs	r2, #0
 80026e0:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026e2:	4b24      	ldr	r3, [pc, #144]	@ (8002774 <HAL_SPI_MspInit+0x168>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80026e8:	4b22      	ldr	r3, [pc, #136]	@ (8002774 <HAL_SPI_MspInit+0x168>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026ee:	4b21      	ldr	r3, [pc, #132]	@ (8002774 <HAL_SPI_MspInit+0x168>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80026f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002774 <HAL_SPI_MspInit+0x168>)
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 fae6 	bl	8002cc8 <HAL_DMA_Init>
 80026fc:	1e03      	subs	r3, r0, #0
 80026fe:	d001      	beq.n	8002704 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8002700:	f7ff fbd1 	bl	8001ea6 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a1b      	ldr	r2, [pc, #108]	@ (8002774 <HAL_SPI_MspInit+0x168>)
 8002708:	659a      	str	r2, [r3, #88]	@ 0x58
 800270a:	4b1a      	ldr	r3, [pc, #104]	@ (8002774 <HAL_SPI_MspInit+0x168>)
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel2;
 8002710:	4b1a      	ldr	r3, [pc, #104]	@ (800277c <HAL_SPI_MspInit+0x170>)
 8002712:	4a1b      	ldr	r2, [pc, #108]	@ (8002780 <HAL_SPI_MspInit+0x174>)
 8002714:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002716:	4b19      	ldr	r3, [pc, #100]	@ (800277c <HAL_SPI_MspInit+0x170>)
 8002718:	2213      	movs	r2, #19
 800271a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800271c:	4b17      	ldr	r3, [pc, #92]	@ (800277c <HAL_SPI_MspInit+0x170>)
 800271e:	2210      	movs	r2, #16
 8002720:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002722:	4b16      	ldr	r3, [pc, #88]	@ (800277c <HAL_SPI_MspInit+0x170>)
 8002724:	2200      	movs	r2, #0
 8002726:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002728:	4b14      	ldr	r3, [pc, #80]	@ (800277c <HAL_SPI_MspInit+0x170>)
 800272a:	2280      	movs	r2, #128	@ 0x80
 800272c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800272e:	4b13      	ldr	r3, [pc, #76]	@ (800277c <HAL_SPI_MspInit+0x170>)
 8002730:	2200      	movs	r2, #0
 8002732:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002734:	4b11      	ldr	r3, [pc, #68]	@ (800277c <HAL_SPI_MspInit+0x170>)
 8002736:	2200      	movs	r2, #0
 8002738:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800273a:	4b10      	ldr	r3, [pc, #64]	@ (800277c <HAL_SPI_MspInit+0x170>)
 800273c:	2200      	movs	r2, #0
 800273e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002740:	4b0e      	ldr	r3, [pc, #56]	@ (800277c <HAL_SPI_MspInit+0x170>)
 8002742:	2200      	movs	r2, #0
 8002744:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002746:	4b0d      	ldr	r3, [pc, #52]	@ (800277c <HAL_SPI_MspInit+0x170>)
 8002748:	0018      	movs	r0, r3
 800274a:	f000 fabd 	bl	8002cc8 <HAL_DMA_Init>
 800274e:	1e03      	subs	r3, r0, #0
 8002750:	d001      	beq.n	8002756 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8002752:	f7ff fba8 	bl	8001ea6 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a08      	ldr	r2, [pc, #32]	@ (800277c <HAL_SPI_MspInit+0x170>)
 800275a:	655a      	str	r2, [r3, #84]	@ 0x54
 800275c:	4b07      	ldr	r3, [pc, #28]	@ (800277c <HAL_SPI_MspInit+0x170>)
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002762:	46c0      	nop			@ (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	b00b      	add	sp, #44	@ 0x2c
 8002768:	bd90      	pop	{r4, r7, pc}
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	40003800 	.word	0x40003800
 8002770:	40021000 	.word	0x40021000
 8002774:	20000244 	.word	0x20000244
 8002778:	40020008 	.word	0x40020008
 800277c:	200002a0 	.word	0x200002a0
 8002780:	4002001c 	.word	0x4002001c

08002784 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2380      	movs	r3, #128	@ 0x80
 8002792:	05db      	lsls	r3, r3, #23
 8002794:	429a      	cmp	r2, r3
 8002796:	d10b      	bne.n	80027b0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002798:	4b07      	ldr	r3, [pc, #28]	@ (80027b8 <HAL_TIM_PWM_MspInit+0x34>)
 800279a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800279c:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_TIM_PWM_MspInit+0x34>)
 800279e:	2101      	movs	r1, #1
 80027a0:	430a      	orrs	r2, r1
 80027a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027a4:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <HAL_TIM_PWM_MspInit+0x34>)
 80027a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a8:	2201      	movs	r2, #1
 80027aa:	4013      	ands	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027b0:	46c0      	nop			@ (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b004      	add	sp, #16
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000

080027bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a18      	ldr	r2, [pc, #96]	@ (800282c <HAL_TIM_Base_MspInit+0x70>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d10e      	bne.n	80027ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027ce:	4b18      	ldr	r3, [pc, #96]	@ (8002830 <HAL_TIM_Base_MspInit+0x74>)
 80027d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027d2:	4b17      	ldr	r3, [pc, #92]	@ (8002830 <HAL_TIM_Base_MspInit+0x74>)
 80027d4:	2180      	movs	r1, #128	@ 0x80
 80027d6:	0209      	lsls	r1, r1, #8
 80027d8:	430a      	orrs	r2, r1
 80027da:	641a      	str	r2, [r3, #64]	@ 0x40
 80027dc:	4b14      	ldr	r3, [pc, #80]	@ (8002830 <HAL_TIM_Base_MspInit+0x74>)
 80027de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027e0:	2380      	movs	r3, #128	@ 0x80
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	4013      	ands	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80027ea:	e01a      	b.n	8002822 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a10      	ldr	r2, [pc, #64]	@ (8002834 <HAL_TIM_Base_MspInit+0x78>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d115      	bne.n	8002822 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80027f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <HAL_TIM_Base_MspInit+0x74>)
 80027f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <HAL_TIM_Base_MspInit+0x74>)
 80027fc:	2180      	movs	r1, #128	@ 0x80
 80027fe:	0289      	lsls	r1, r1, #10
 8002800:	430a      	orrs	r2, r1
 8002802:	641a      	str	r2, [r3, #64]	@ 0x40
 8002804:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <HAL_TIM_Base_MspInit+0x74>)
 8002806:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002808:	2380      	movs	r3, #128	@ 0x80
 800280a:	029b      	lsls	r3, r3, #10
 800280c:	4013      	ands	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2100      	movs	r1, #0
 8002816:	2015      	movs	r0, #21
 8002818:	f000 fa24 	bl	8002c64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800281c:	2015      	movs	r0, #21
 800281e:	f000 fa36 	bl	8002c8e <HAL_NVIC_EnableIRQ>
}
 8002822:	46c0      	nop			@ (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	b004      	add	sp, #16
 8002828:	bd80      	pop	{r7, pc}
 800282a:	46c0      	nop			@ (mov r8, r8)
 800282c:	40002000 	.word	0x40002000
 8002830:	40021000 	.word	0x40021000
 8002834:	40014400 	.word	0x40014400

08002838 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b089      	sub	sp, #36	@ 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	240c      	movs	r4, #12
 8002842:	193b      	adds	r3, r7, r4
 8002844:	0018      	movs	r0, r3
 8002846:	2314      	movs	r3, #20
 8002848:	001a      	movs	r2, r3
 800284a:	2100      	movs	r1, #0
 800284c:	f004 fdd6 	bl	80073fc <memset>
  if(htim->Instance==TIM2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	2380      	movs	r3, #128	@ 0x80
 8002856:	05db      	lsls	r3, r3, #23
 8002858:	429a      	cmp	r2, r3
 800285a:	d121      	bne.n	80028a0 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800285c:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <HAL_TIM_MspPostInit+0x70>)
 800285e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002860:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <HAL_TIM_MspPostInit+0x70>)
 8002862:	2104      	movs	r1, #4
 8002864:	430a      	orrs	r2, r1
 8002866:	635a      	str	r2, [r3, #52]	@ 0x34
 8002868:	4b0f      	ldr	r3, [pc, #60]	@ (80028a8 <HAL_TIM_MspPostInit+0x70>)
 800286a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286c:	2204      	movs	r2, #4
 800286e:	4013      	ands	r3, r2
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_SHIFT_nOE_Pin;
 8002874:	0021      	movs	r1, r4
 8002876:	187b      	adds	r3, r7, r1
 8002878:	2240      	movs	r2, #64	@ 0x40
 800287a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	187b      	adds	r3, r7, r1
 800287e:	2202      	movs	r2, #2
 8002880:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	187b      	adds	r3, r7, r1
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	187b      	adds	r3, r7, r1
 800288a:	2200      	movs	r2, #0
 800288c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800288e:	187b      	adds	r3, r7, r1
 8002890:	2202      	movs	r2, #2
 8002892:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_SHIFT_nOE_GPIO_Port, &GPIO_InitStruct);
 8002894:	187b      	adds	r3, r7, r1
 8002896:	4a05      	ldr	r2, [pc, #20]	@ (80028ac <HAL_TIM_MspPostInit+0x74>)
 8002898:	0019      	movs	r1, r3
 800289a:	0010      	movs	r0, r2
 800289c:	f000 fba0 	bl	8002fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80028a0:	46c0      	nop			@ (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b009      	add	sp, #36	@ 0x24
 80028a6:	bd90      	pop	{r4, r7, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	50000800 	.word	0x50000800

080028b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028b4:	46c0      	nop			@ (mov r8, r8)
 80028b6:	e7fd      	b.n	80028b4 <NMI_Handler+0x4>

080028b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028bc:	46c0      	nop			@ (mov r8, r8)
 80028be:	e7fd      	b.n	80028bc <HardFault_Handler+0x4>

080028c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80028c4:	46c0      	nop			@ (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028d8:	f000 f8fc 	bl	8002ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028dc:	46c0      	nop			@ (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80028e8:	4b03      	ldr	r3, [pc, #12]	@ (80028f8 <RTC_TAMP_IRQHandler+0x14>)
 80028ea:	0018      	movs	r0, r3
 80028ec:	f003 fa46 	bl	8005d7c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80028f0:	46c0      	nop			@ (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			@ (mov r8, r8)
 80028f8:	200001b4 	.word	0x200001b4

080028fc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002900:	46c0      	nop			@ (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_EXTI_Pin);
 800290a:	2001      	movs	r0, #1
 800290c:	f000 fd22 	bl	8003354 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_EXTI_Pin);
 8002910:	2002      	movs	r0, #2
 8002912:	f000 fd1f 	bl	8003354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002916:	46c0      	nop			@ (mov r8, r8)
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_EXTI_Pin);
 8002920:	2004      	movs	r0, #4
 8002922:	f000 fd17 	bl	8003354 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_EXTI_Pin);
 8002926:	2008      	movs	r0, #8
 8002928:	f000 fd14 	bl	8003354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800292c:	46c0      	nop			@ (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_SWITCH_EXTI_Pin);
 8002936:	2010      	movs	r0, #16
 8002938:	f000 fd0c 	bl	8003354 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_EXTI_Pin);
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	0018      	movs	r0, r3
 8002942:	f000 fd07 	bl	8003354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002946:	46c0      	nop			@ (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002950:	4b03      	ldr	r3, [pc, #12]	@ (8002960 <DMA1_Channel1_IRQHandler+0x14>)
 8002952:	0018      	movs	r0, r3
 8002954:	f000 fa42 	bl	8002ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002958:	46c0      	nop			@ (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			@ (mov r8, r8)
 8002960:	20000244 	.word	0x20000244

08002964 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002968:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800296a:	0018      	movs	r0, r3
 800296c:	f000 fa36 	bl	8002ddc <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002970:	4b04      	ldr	r3, [pc, #16]	@ (8002984 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002972:	0018      	movs	r0, r3
 8002974:	f000 fa32 	bl	8002ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002978:	46c0      	nop			@ (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	200002a0 	.word	0x200002a0
 8002984:	20000158 	.word	0x20000158

08002988 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800298c:	4b03      	ldr	r3, [pc, #12]	@ (800299c <TIM16_IRQHandler+0x14>)
 800298e:	0018      	movs	r0, r3
 8002990:	f003 ff48 	bl	8006824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002994:	46c0      	nop			@ (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	20000394 	.word	0x20000394

080029a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029a4:	46c0      	nop			@ (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029ac:	480d      	ldr	r0, [pc, #52]	@ (80029e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029b0:	f7ff fff6 	bl	80029a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029b4:	480c      	ldr	r0, [pc, #48]	@ (80029e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80029b6:	490d      	ldr	r1, [pc, #52]	@ (80029ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80029b8:	4a0d      	ldr	r2, [pc, #52]	@ (80029f0 <LoopForever+0xe>)
  movs r3, #0
 80029ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029bc:	e002      	b.n	80029c4 <LoopCopyDataInit>

080029be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029c2:	3304      	adds	r3, #4

080029c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029c8:	d3f9      	bcc.n	80029be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ca:	4a0a      	ldr	r2, [pc, #40]	@ (80029f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029cc:	4c0a      	ldr	r4, [pc, #40]	@ (80029f8 <LoopForever+0x16>)
  movs r3, #0
 80029ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d0:	e001      	b.n	80029d6 <LoopFillZerobss>

080029d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d4:	3204      	adds	r2, #4

080029d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029d8:	d3fb      	bcc.n	80029d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029da:	f004 fd17 	bl	800740c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80029de:	f7fe f84d 	bl	8000a7c <main>

080029e2 <LoopForever>:

LoopForever:
  b LoopForever
 80029e2:	e7fe      	b.n	80029e2 <LoopForever>
  ldr   r0, =_estack
 80029e4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80029e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80029f0:	08007570 	.word	0x08007570
  ldr r2, =_sbss
 80029f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80029f8:	20000458 	.word	0x20000458

080029fc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029fc:	e7fe      	b.n	80029fc <ADC1_IRQHandler>
	...

08002a00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a06:	1dfb      	adds	r3, r7, #7
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a3c <HAL_Init+0x3c>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <HAL_Init+0x3c>)
 8002a12:	2180      	movs	r1, #128	@ 0x80
 8002a14:	0049      	lsls	r1, r1, #1
 8002a16:	430a      	orrs	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a1a:	2003      	movs	r0, #3
 8002a1c:	f000 f810 	bl	8002a40 <HAL_InitTick>
 8002a20:	1e03      	subs	r3, r0, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002a24:	1dfb      	adds	r3, r7, #7
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e001      	b.n	8002a30 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002a2c:	f7ff fc62 	bl	80022f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a30:	1dfb      	adds	r3, r7, #7
 8002a32:	781b      	ldrb	r3, [r3, #0]
}
 8002a34:	0018      	movs	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40022000 	.word	0x40022000

08002a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a48:	230f      	movs	r3, #15
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002a50:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac8 <HAL_InitTick+0x88>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d02b      	beq.n	8002ab0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002a58:	4b1c      	ldr	r3, [pc, #112]	@ (8002acc <HAL_InitTick+0x8c>)
 8002a5a:	681c      	ldr	r4, [r3, #0]
 8002a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac8 <HAL_InitTick+0x88>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	0019      	movs	r1, r3
 8002a62:	23fa      	movs	r3, #250	@ 0xfa
 8002a64:	0098      	lsls	r0, r3, #2
 8002a66:	f7fd fb4d 	bl	8000104 <__udivsi3>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	0020      	movs	r0, r4
 8002a70:	f7fd fb48 	bl	8000104 <__udivsi3>
 8002a74:	0003      	movs	r3, r0
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 f919 	bl	8002cae <HAL_SYSTICK_Config>
 8002a7c:	1e03      	subs	r3, r0, #0
 8002a7e:	d112      	bne.n	8002aa6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d80a      	bhi.n	8002a9c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	2301      	movs	r3, #1
 8002a8a:	425b      	negs	r3, r3
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f000 f8e8 	bl	8002c64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <HAL_InitTick+0x90>)
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e00d      	b.n	8002ab8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002a9c:	230f      	movs	r3, #15
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	e008      	b.n	8002ab8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002aa6:	230f      	movs	r3, #15
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e003      	b.n	8002ab8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ab0:	230f      	movs	r3, #15
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002ab8:	230f      	movs	r3, #15
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	781b      	ldrb	r3, [r3, #0]
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b005      	add	sp, #20
 8002ac4:	bd90      	pop	{r4, r7, pc}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	20000070 	.word	0x20000070
 8002acc:	20000068 	.word	0x20000068
 8002ad0:	2000006c 	.word	0x2000006c

08002ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ad8:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <HAL_IncTick+0x1c>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	001a      	movs	r2, r3
 8002ade:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <HAL_IncTick+0x20>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	18d2      	adds	r2, r2, r3
 8002ae4:	4b03      	ldr	r3, [pc, #12]	@ (8002af4 <HAL_IncTick+0x20>)
 8002ae6:	601a      	str	r2, [r3, #0]
}
 8002ae8:	46c0      	nop			@ (mov r8, r8)
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	20000070 	.word	0x20000070
 8002af4:	20000454 	.word	0x20000454

08002af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  return uwTick;
 8002afc:	4b02      	ldr	r3, [pc, #8]	@ (8002b08 <HAL_GetTick+0x10>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	0018      	movs	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			@ (mov r8, r8)
 8002b08:	20000454 	.word	0x20000454

08002b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	0002      	movs	r2, r0
 8002b14:	1dfb      	adds	r3, r7, #7
 8002b16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b18:	1dfb      	adds	r3, r7, #7
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b1e:	d809      	bhi.n	8002b34 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b20:	1dfb      	adds	r3, r7, #7
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	001a      	movs	r2, r3
 8002b26:	231f      	movs	r3, #31
 8002b28:	401a      	ands	r2, r3
 8002b2a:	4b04      	ldr	r3, [pc, #16]	@ (8002b3c <__NVIC_EnableIRQ+0x30>)
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4091      	lsls	r1, r2
 8002b30:	000a      	movs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002b34:	46c0      	nop			@ (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	e000e100 	.word	0xe000e100

08002b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	0002      	movs	r2, r0
 8002b48:	6039      	str	r1, [r7, #0]
 8002b4a:	1dfb      	adds	r3, r7, #7
 8002b4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b4e:	1dfb      	adds	r3, r7, #7
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b54:	d828      	bhi.n	8002ba8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b56:	4a2f      	ldr	r2, [pc, #188]	@ (8002c14 <__NVIC_SetPriority+0xd4>)
 8002b58:	1dfb      	adds	r3, r7, #7
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	33c0      	adds	r3, #192	@ 0xc0
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	589b      	ldr	r3, [r3, r2]
 8002b66:	1dfa      	adds	r2, r7, #7
 8002b68:	7812      	ldrb	r2, [r2, #0]
 8002b6a:	0011      	movs	r1, r2
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	400a      	ands	r2, r1
 8002b70:	00d2      	lsls	r2, r2, #3
 8002b72:	21ff      	movs	r1, #255	@ 0xff
 8002b74:	4091      	lsls	r1, r2
 8002b76:	000a      	movs	r2, r1
 8002b78:	43d2      	mvns	r2, r2
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	019b      	lsls	r3, r3, #6
 8002b82:	22ff      	movs	r2, #255	@ 0xff
 8002b84:	401a      	ands	r2, r3
 8002b86:	1dfb      	adds	r3, r7, #7
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	4003      	ands	r3, r0
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b94:	481f      	ldr	r0, [pc, #124]	@ (8002c14 <__NVIC_SetPriority+0xd4>)
 8002b96:	1dfb      	adds	r3, r7, #7
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	33c0      	adds	r3, #192	@ 0xc0
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002ba6:	e031      	b.n	8002c0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c18 <__NVIC_SetPriority+0xd8>)
 8002baa:	1dfb      	adds	r3, r7, #7
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	0019      	movs	r1, r3
 8002bb0:	230f      	movs	r3, #15
 8002bb2:	400b      	ands	r3, r1
 8002bb4:	3b08      	subs	r3, #8
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	3306      	adds	r3, #6
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	18d3      	adds	r3, r2, r3
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	1dfa      	adds	r2, r7, #7
 8002bc4:	7812      	ldrb	r2, [r2, #0]
 8002bc6:	0011      	movs	r1, r2
 8002bc8:	2203      	movs	r2, #3
 8002bca:	400a      	ands	r2, r1
 8002bcc:	00d2      	lsls	r2, r2, #3
 8002bce:	21ff      	movs	r1, #255	@ 0xff
 8002bd0:	4091      	lsls	r1, r2
 8002bd2:	000a      	movs	r2, r1
 8002bd4:	43d2      	mvns	r2, r2
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	019b      	lsls	r3, r3, #6
 8002bde:	22ff      	movs	r2, #255	@ 0xff
 8002be0:	401a      	ands	r2, r3
 8002be2:	1dfb      	adds	r3, r7, #7
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	0018      	movs	r0, r3
 8002be8:	2303      	movs	r3, #3
 8002bea:	4003      	ands	r3, r0
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bf0:	4809      	ldr	r0, [pc, #36]	@ (8002c18 <__NVIC_SetPriority+0xd8>)
 8002bf2:	1dfb      	adds	r3, r7, #7
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	001c      	movs	r4, r3
 8002bf8:	230f      	movs	r3, #15
 8002bfa:	4023      	ands	r3, r4
 8002bfc:	3b08      	subs	r3, #8
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	430a      	orrs	r2, r1
 8002c02:	3306      	adds	r3, #6
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	18c3      	adds	r3, r0, r3
 8002c08:	3304      	adds	r3, #4
 8002c0a:	601a      	str	r2, [r3, #0]
}
 8002c0c:	46c0      	nop			@ (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b003      	add	sp, #12
 8002c12:	bd90      	pop	{r4, r7, pc}
 8002c14:	e000e100 	.word	0xe000e100
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	1e5a      	subs	r2, r3, #1
 8002c28:	2380      	movs	r3, #128	@ 0x80
 8002c2a:	045b      	lsls	r3, r3, #17
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d301      	bcc.n	8002c34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c30:	2301      	movs	r3, #1
 8002c32:	e010      	b.n	8002c56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c34:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <SysTick_Config+0x44>)
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	3a01      	subs	r2, #1
 8002c3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	425b      	negs	r3, r3
 8002c40:	2103      	movs	r1, #3
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7ff ff7c 	bl	8002b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c48:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <SysTick_Config+0x44>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4e:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <SysTick_Config+0x44>)
 8002c50:	2207      	movs	r2, #7
 8002c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b002      	add	sp, #8
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	46c0      	nop			@ (mov r8, r8)
 8002c60:	e000e010 	.word	0xe000e010

08002c64 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	210f      	movs	r1, #15
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	1c02      	adds	r2, r0, #0
 8002c74:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	187b      	adds	r3, r7, r1
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	0011      	movs	r1, r2
 8002c80:	0018      	movs	r0, r3
 8002c82:	f7ff ff5d 	bl	8002b40 <__NVIC_SetPriority>
}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b004      	add	sp, #16
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	0002      	movs	r2, r0
 8002c96:	1dfb      	adds	r3, r7, #7
 8002c98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c9a:	1dfb      	adds	r3, r7, #7
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	b25b      	sxtb	r3, r3
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7ff ff33 	bl	8002b0c <__NVIC_EnableIRQ>
}
 8002ca6:	46c0      	nop			@ (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b002      	add	sp, #8
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7ff ffaf 	bl	8002c1c <SysTick_Config>
 8002cbe:	0003      	movs	r3, r0
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b002      	add	sp, #8
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e077      	b.n	8002dca <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a3d      	ldr	r2, [pc, #244]	@ (8002dd4 <HAL_DMA_Init+0x10c>)
 8002ce0:	4694      	mov	ip, r2
 8002ce2:	4463      	add	r3, ip
 8002ce4:	2114      	movs	r1, #20
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f7fd fa0c 	bl	8000104 <__udivsi3>
 8002cec:	0003      	movs	r3, r0
 8002cee:	009a      	lsls	r2, r3, #2
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2225      	movs	r2, #37	@ 0x25
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4934      	ldr	r1, [pc, #208]	@ (8002dd8 <HAL_DMA_Init+0x110>)
 8002d08:	400a      	ands	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6819      	ldr	r1, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	0018      	movs	r0, r3
 8002d46:	f000 f8fb 	bl	8002f40 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	2380      	movs	r3, #128	@ 0x80
 8002d50:	01db      	lsls	r3, r3, #7
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d102      	bne.n	8002d5c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d64:	213f      	movs	r1, #63	@ 0x3f
 8002d66:	400a      	ands	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d72:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d011      	beq.n	8002da0 <HAL_DMA_Init+0xd8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d80d      	bhi.n	8002da0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	0018      	movs	r0, r3
 8002d88:	f000 f906 	bl	8002f98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	e008      	b.n	8002db2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2225      	movs	r2, #37	@ 0x25
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2224      	movs	r2, #36	@ 0x24
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b002      	add	sp, #8
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			@ (mov r8, r8)
 8002dd4:	bffdfff8 	.word	0xbffdfff8
 8002dd8:	ffff800f 	.word	0xffff800f

08002ddc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002de4:	4b55      	ldr	r3, [pc, #340]	@ (8002f3c <HAL_DMA_IRQHandler+0x160>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	221c      	movs	r2, #28
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	0013      	movs	r3, r2
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4013      	ands	r3, r2
 8002e04:	d027      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x7a>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2204      	movs	r2, #4
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d023      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2220      	movs	r2, #32
 8002e16:	4013      	ands	r3, r2
 8002e18:	d107      	bne.n	8002e2a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2104      	movs	r1, #4
 8002e26:	438a      	bics	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002e2a:	4b44      	ldr	r3, [pc, #272]	@ (8002f3c <HAL_DMA_IRQHandler+0x160>)
 8002e2c:	6859      	ldr	r1, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	221c      	movs	r2, #28
 8002e34:	4013      	ands	r3, r2
 8002e36:	2204      	movs	r2, #4
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	4b40      	ldr	r3, [pc, #256]	@ (8002f3c <HAL_DMA_IRQHandler+0x160>)
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d100      	bne.n	8002e4a <HAL_DMA_IRQHandler+0x6e>
 8002e48:	e073      	b.n	8002f32 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	0010      	movs	r0, r2
 8002e52:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002e54:	e06d      	b.n	8002f32 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	221c      	movs	r2, #28
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2202      	movs	r2, #2
 8002e60:	409a      	lsls	r2, r3
 8002e62:	0013      	movs	r3, r2
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4013      	ands	r3, r2
 8002e68:	d02e      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0xec>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d02a      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d10b      	bne.n	8002e96 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	210a      	movs	r1, #10
 8002e8a:	438a      	bics	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2225      	movs	r2, #37	@ 0x25
 8002e92:	2101      	movs	r1, #1
 8002e94:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002e96:	4b29      	ldr	r3, [pc, #164]	@ (8002f3c <HAL_DMA_IRQHandler+0x160>)
 8002e98:	6859      	ldr	r1, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	221c      	movs	r2, #28
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	4b25      	ldr	r3, [pc, #148]	@ (8002f3c <HAL_DMA_IRQHandler+0x160>)
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2224      	movs	r2, #36	@ 0x24
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d03a      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	0010      	movs	r0, r2
 8002ec4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002ec6:	e034      	b.n	8002f32 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	221c      	movs	r2, #28
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	0013      	movs	r3, r2
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d02b      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x158>
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2208      	movs	r2, #8
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d027      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	210e      	movs	r1, #14
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002ef4:	4b11      	ldr	r3, [pc, #68]	@ (8002f3c <HAL_DMA_IRQHandler+0x160>)
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efc:	221c      	movs	r2, #28
 8002efe:	4013      	ands	r3, r2
 8002f00:	2201      	movs	r2, #1
 8002f02:	409a      	lsls	r2, r3
 8002f04:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <HAL_DMA_IRQHandler+0x160>)
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2225      	movs	r2, #37	@ 0x25
 8002f14:	2101      	movs	r1, #1
 8002f16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2224      	movs	r2, #36	@ 0x24
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	0010      	movs	r0, r2
 8002f30:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	46c0      	nop			@ (mov r8, r8)
}
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b004      	add	sp, #16
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40020000 	.word	0x40020000

08002f40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	4a10      	ldr	r2, [pc, #64]	@ (8002f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002f50:	4694      	mov	ip, r2
 8002f52:	4463      	add	r3, ip
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	001a      	movs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	001a      	movs	r2, r3
 8002f62:	23ff      	movs	r3, #255	@ 0xff
 8002f64:	4013      	ands	r3, r2
 8002f66:	3b08      	subs	r3, #8
 8002f68:	2114      	movs	r1, #20
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7fd f8ca 	bl	8000104 <__udivsi3>
 8002f70:	0003      	movs	r3, r0
 8002f72:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a07      	ldr	r2, [pc, #28]	@ (8002f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002f78:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	221f      	movs	r2, #31
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2201      	movs	r2, #1
 8002f82:	409a      	lsls	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002f88:	46c0      	nop			@ (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b004      	add	sp, #16
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	10008200 	.word	0x10008200
 8002f94:	40020880 	.word	0x40020880

08002f98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	223f      	movs	r2, #63	@ 0x3f
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002fae:	4694      	mov	ip, r2
 8002fb0:	4463      	add	r3, ip
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	001a      	movs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a07      	ldr	r2, [pc, #28]	@ (8002fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002fbe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2201      	movs	r2, #1
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002fd0:	46c0      	nop			@ (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b004      	add	sp, #16
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	1000823f 	.word	0x1000823f
 8002fdc:	40020940 	.word	0x40020940

08002fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fee:	e147      	b.n	8003280 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4091      	lsls	r1, r2
 8002ffa:	000a      	movs	r2, r1
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d100      	bne.n	8003008 <HAL_GPIO_Init+0x28>
 8003006:	e138      	b.n	800327a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2203      	movs	r2, #3
 800300e:	4013      	ands	r3, r2
 8003010:	2b01      	cmp	r3, #1
 8003012:	d005      	beq.n	8003020 <HAL_GPIO_Init+0x40>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2203      	movs	r2, #3
 800301a:	4013      	ands	r3, r2
 800301c:	2b02      	cmp	r3, #2
 800301e:	d130      	bne.n	8003082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	409a      	lsls	r2, r3
 800302e:	0013      	movs	r3, r2
 8003030:	43da      	mvns	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	409a      	lsls	r2, r3
 8003042:	0013      	movs	r3, r2
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003056:	2201      	movs	r2, #1
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	409a      	lsls	r2, r3
 800305c:	0013      	movs	r3, r2
 800305e:	43da      	mvns	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	2201      	movs	r2, #1
 800306e:	401a      	ands	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	409a      	lsls	r2, r3
 8003074:	0013      	movs	r3, r2
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2203      	movs	r2, #3
 8003088:	4013      	ands	r3, r2
 800308a:	2b03      	cmp	r3, #3
 800308c:	d017      	beq.n	80030be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	2203      	movs	r2, #3
 800309a:	409a      	lsls	r2, r3
 800309c:	0013      	movs	r3, r2
 800309e:	43da      	mvns	r2, r3
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	409a      	lsls	r2, r3
 80030b0:	0013      	movs	r3, r2
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2203      	movs	r2, #3
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d123      	bne.n	8003112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	08da      	lsrs	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3208      	adds	r2, #8
 80030d2:	0092      	lsls	r2, r2, #2
 80030d4:	58d3      	ldr	r3, [r2, r3]
 80030d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2207      	movs	r2, #7
 80030dc:	4013      	ands	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	220f      	movs	r2, #15
 80030e2:	409a      	lsls	r2, r3
 80030e4:	0013      	movs	r3, r2
 80030e6:	43da      	mvns	r2, r3
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	691a      	ldr	r2, [r3, #16]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2107      	movs	r1, #7
 80030f6:	400b      	ands	r3, r1
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	409a      	lsls	r2, r3
 80030fc:	0013      	movs	r3, r2
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	08da      	lsrs	r2, r3, #3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3208      	adds	r2, #8
 800310c:	0092      	lsls	r2, r2, #2
 800310e:	6939      	ldr	r1, [r7, #16]
 8003110:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	2203      	movs	r2, #3
 800311e:	409a      	lsls	r2, r3
 8003120:	0013      	movs	r3, r2
 8003122:	43da      	mvns	r2, r3
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4013      	ands	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2203      	movs	r2, #3
 8003130:	401a      	ands	r2, r3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	409a      	lsls	r2, r3
 8003138:	0013      	movs	r3, r2
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	23c0      	movs	r3, #192	@ 0xc0
 800314c:	029b      	lsls	r3, r3, #10
 800314e:	4013      	ands	r3, r2
 8003150:	d100      	bne.n	8003154 <HAL_GPIO_Init+0x174>
 8003152:	e092      	b.n	800327a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003154:	4a50      	ldr	r2, [pc, #320]	@ (8003298 <HAL_GPIO_Init+0x2b8>)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	089b      	lsrs	r3, r3, #2
 800315a:	3318      	adds	r3, #24
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	589b      	ldr	r3, [r3, r2]
 8003160:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2203      	movs	r2, #3
 8003166:	4013      	ands	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	220f      	movs	r2, #15
 800316c:	409a      	lsls	r2, r3
 800316e:	0013      	movs	r3, r2
 8003170:	43da      	mvns	r2, r3
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	23a0      	movs	r3, #160	@ 0xa0
 800317c:	05db      	lsls	r3, r3, #23
 800317e:	429a      	cmp	r2, r3
 8003180:	d013      	beq.n	80031aa <HAL_GPIO_Init+0x1ca>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a45      	ldr	r2, [pc, #276]	@ (800329c <HAL_GPIO_Init+0x2bc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00d      	beq.n	80031a6 <HAL_GPIO_Init+0x1c6>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a44      	ldr	r2, [pc, #272]	@ (80032a0 <HAL_GPIO_Init+0x2c0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <HAL_GPIO_Init+0x1c2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a43      	ldr	r2, [pc, #268]	@ (80032a4 <HAL_GPIO_Init+0x2c4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d101      	bne.n	800319e <HAL_GPIO_Init+0x1be>
 800319a:	2303      	movs	r3, #3
 800319c:	e006      	b.n	80031ac <HAL_GPIO_Init+0x1cc>
 800319e:	2305      	movs	r3, #5
 80031a0:	e004      	b.n	80031ac <HAL_GPIO_Init+0x1cc>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e002      	b.n	80031ac <HAL_GPIO_Init+0x1cc>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_GPIO_Init+0x1cc>
 80031aa:	2300      	movs	r3, #0
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	2103      	movs	r1, #3
 80031b0:	400a      	ands	r2, r1
 80031b2:	00d2      	lsls	r2, r2, #3
 80031b4:	4093      	lsls	r3, r2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80031bc:	4936      	ldr	r1, [pc, #216]	@ (8003298 <HAL_GPIO_Init+0x2b8>)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	3318      	adds	r3, #24
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031ca:	4b33      	ldr	r3, [pc, #204]	@ (8003298 <HAL_GPIO_Init+0x2b8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	43da      	mvns	r2, r3
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	2380      	movs	r3, #128	@ 0x80
 80031e0:	035b      	lsls	r3, r3, #13
 80031e2:	4013      	ands	r3, r2
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003298 <HAL_GPIO_Init+0x2b8>)
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80031f4:	4b28      	ldr	r3, [pc, #160]	@ (8003298 <HAL_GPIO_Init+0x2b8>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	43da      	mvns	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	2380      	movs	r3, #128	@ 0x80
 800320a:	039b      	lsls	r3, r3, #14
 800320c:	4013      	ands	r3, r2
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003218:	4b1f      	ldr	r3, [pc, #124]	@ (8003298 <HAL_GPIO_Init+0x2b8>)
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800321e:	4a1e      	ldr	r2, [pc, #120]	@ (8003298 <HAL_GPIO_Init+0x2b8>)
 8003220:	2384      	movs	r3, #132	@ 0x84
 8003222:	58d3      	ldr	r3, [r2, r3]
 8003224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	43da      	mvns	r2, r3
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	2380      	movs	r3, #128	@ 0x80
 8003236:	029b      	lsls	r3, r3, #10
 8003238:	4013      	ands	r3, r2
 800323a:	d003      	beq.n	8003244 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003244:	4914      	ldr	r1, [pc, #80]	@ (8003298 <HAL_GPIO_Init+0x2b8>)
 8003246:	2284      	movs	r2, #132	@ 0x84
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800324c:	4a12      	ldr	r2, [pc, #72]	@ (8003298 <HAL_GPIO_Init+0x2b8>)
 800324e:	2380      	movs	r3, #128	@ 0x80
 8003250:	58d3      	ldr	r3, [r2, r3]
 8003252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	43da      	mvns	r2, r3
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	2380      	movs	r3, #128	@ 0x80
 8003264:	025b      	lsls	r3, r3, #9
 8003266:	4013      	ands	r3, r2
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003272:	4909      	ldr	r1, [pc, #36]	@ (8003298 <HAL_GPIO_Init+0x2b8>)
 8003274:	2280      	movs	r2, #128	@ 0x80
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	3301      	adds	r3, #1
 800327e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	40da      	lsrs	r2, r3
 8003288:	1e13      	subs	r3, r2, #0
 800328a:	d000      	beq.n	800328e <HAL_GPIO_Init+0x2ae>
 800328c:	e6b0      	b.n	8002ff0 <HAL_GPIO_Init+0x10>
  }
}
 800328e:	46c0      	nop			@ (mov r8, r8)
 8003290:	46c0      	nop			@ (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b006      	add	sp, #24
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40021800 	.word	0x40021800
 800329c:	50000400 	.word	0x50000400
 80032a0:	50000800 	.word	0x50000800
 80032a4:	50000c00 	.word	0x50000c00

080032a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	000a      	movs	r2, r1
 80032b2:	1cbb      	adds	r3, r7, #2
 80032b4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	1cba      	adds	r2, r7, #2
 80032bc:	8812      	ldrh	r2, [r2, #0]
 80032be:	4013      	ands	r3, r2
 80032c0:	d004      	beq.n	80032cc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80032c2:	230f      	movs	r3, #15
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	2201      	movs	r2, #1
 80032c8:	701a      	strb	r2, [r3, #0]
 80032ca:	e003      	b.n	80032d4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032cc:	230f      	movs	r3, #15
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80032d4:	230f      	movs	r3, #15
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	781b      	ldrb	r3, [r3, #0]
}
 80032da:	0018      	movs	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	b004      	add	sp, #16
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	0008      	movs	r0, r1
 80032ec:	0011      	movs	r1, r2
 80032ee:	1cbb      	adds	r3, r7, #2
 80032f0:	1c02      	adds	r2, r0, #0
 80032f2:	801a      	strh	r2, [r3, #0]
 80032f4:	1c7b      	adds	r3, r7, #1
 80032f6:	1c0a      	adds	r2, r1, #0
 80032f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032fa:	1c7b      	adds	r3, r7, #1
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d004      	beq.n	800330c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003302:	1cbb      	adds	r3, r7, #2
 8003304:	881a      	ldrh	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800330a:	e003      	b.n	8003314 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800330c:	1cbb      	adds	r3, r7, #2
 800330e:	881a      	ldrh	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003314:	46c0      	nop			@ (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b002      	add	sp, #8
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	000a      	movs	r2, r1
 8003326:	1cbb      	adds	r3, r7, #2
 8003328:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003330:	1cbb      	adds	r3, r7, #2
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4013      	ands	r3, r2
 8003338:	041a      	lsls	r2, r3, #16
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	43db      	mvns	r3, r3
 800333e:	1cb9      	adds	r1, r7, #2
 8003340:	8809      	ldrh	r1, [r1, #0]
 8003342:	400b      	ands	r3, r1
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	619a      	str	r2, [r3, #24]
}
 800334a:	46c0      	nop			@ (mov r8, r8)
 800334c:	46bd      	mov	sp, r7
 800334e:	b004      	add	sp, #16
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	0002      	movs	r2, r0
 800335c:	1dbb      	adds	r3, r7, #6
 800335e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003360:	4b10      	ldr	r3, [pc, #64]	@ (80033a4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	1dba      	adds	r2, r7, #6
 8003366:	8812      	ldrh	r2, [r2, #0]
 8003368:	4013      	ands	r3, r2
 800336a:	d008      	beq.n	800337e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800336c:	4b0d      	ldr	r3, [pc, #52]	@ (80033a4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800336e:	1dba      	adds	r2, r7, #6
 8003370:	8812      	ldrh	r2, [r2, #0]
 8003372:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003374:	1dbb      	adds	r3, r7, #6
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	0018      	movs	r0, r3
 800337a:	f7fe fa47 	bl	800180c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800337e:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	1dba      	adds	r2, r7, #6
 8003384:	8812      	ldrh	r2, [r2, #0]
 8003386:	4013      	ands	r3, r2
 8003388:	d008      	beq.n	800339c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800338a:	4b06      	ldr	r3, [pc, #24]	@ (80033a4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800338c:	1dba      	adds	r2, r7, #6
 800338e:	8812      	ldrh	r2, [r2, #0]
 8003390:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003392:	1dbb      	adds	r3, r7, #6
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	0018      	movs	r0, r3
 8003398:	f7fe f9e4 	bl	8001764 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800339c:	46c0      	nop			@ (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b002      	add	sp, #8
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40021800 	.word	0x40021800

080033a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e08f      	b.n	80034da <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2241      	movs	r2, #65	@ 0x41
 80033be:	5c9b      	ldrb	r3, [r3, r2]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d107      	bne.n	80033d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2240      	movs	r2, #64	@ 0x40
 80033ca:	2100      	movs	r1, #0
 80033cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	0018      	movs	r0, r3
 80033d2:	f7fe ffbb 	bl	800234c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2241      	movs	r2, #65	@ 0x41
 80033da:	2124      	movs	r1, #36	@ 0x24
 80033dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2101      	movs	r1, #1
 80033ea:	438a      	bics	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	493b      	ldr	r1, [pc, #236]	@ (80034e4 <HAL_I2C_Init+0x13c>)
 80033f8:	400a      	ands	r2, r1
 80033fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4938      	ldr	r1, [pc, #224]	@ (80034e8 <HAL_I2C_Init+0x140>)
 8003408:	400a      	ands	r2, r1
 800340a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d108      	bne.n	8003426 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2180      	movs	r1, #128	@ 0x80
 800341e:	0209      	lsls	r1, r1, #8
 8003420:	430a      	orrs	r2, r1
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	e007      	b.n	8003436 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2184      	movs	r1, #132	@ 0x84
 8003430:	0209      	lsls	r1, r1, #8
 8003432:	430a      	orrs	r2, r1
 8003434:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d109      	bne.n	8003452 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2180      	movs	r1, #128	@ 0x80
 800344a:	0109      	lsls	r1, r1, #4
 800344c:	430a      	orrs	r2, r1
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	e007      	b.n	8003462 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4923      	ldr	r1, [pc, #140]	@ (80034ec <HAL_I2C_Init+0x144>)
 800345e:	400a      	ands	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4920      	ldr	r1, [pc, #128]	@ (80034f0 <HAL_I2C_Init+0x148>)
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	491a      	ldr	r1, [pc, #104]	@ (80034e8 <HAL_I2C_Init+0x140>)
 800347e:	400a      	ands	r2, r1
 8003480:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	431a      	orrs	r2, r3
 800348c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69d9      	ldr	r1, [r3, #28]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1a      	ldr	r2, [r3, #32]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2101      	movs	r1, #1
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2241      	movs	r2, #65	@ 0x41
 80034c6:	2120      	movs	r1, #32
 80034c8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2242      	movs	r2, #66	@ 0x42
 80034d4:	2100      	movs	r1, #0
 80034d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	0018      	movs	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	b002      	add	sp, #8
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	46c0      	nop			@ (mov r8, r8)
 80034e4:	f0ffffff 	.word	0xf0ffffff
 80034e8:	ffff7fff 	.word	0xffff7fff
 80034ec:	fffff7ff 	.word	0xfffff7ff
 80034f0:	02008000 	.word	0x02008000

080034f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b089      	sub	sp, #36	@ 0x24
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	0008      	movs	r0, r1
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	0019      	movs	r1, r3
 8003502:	230a      	movs	r3, #10
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	1c02      	adds	r2, r0, #0
 8003508:	801a      	strh	r2, [r3, #0]
 800350a:	2308      	movs	r3, #8
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	1c0a      	adds	r2, r1, #0
 8003510:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2241      	movs	r2, #65	@ 0x41
 8003516:	5c9b      	ldrb	r3, [r3, r2]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b20      	cmp	r3, #32
 800351c:	d000      	beq.n	8003520 <HAL_I2C_Master_Transmit+0x2c>
 800351e:	e10a      	b.n	8003736 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2240      	movs	r2, #64	@ 0x40
 8003524:	5c9b      	ldrb	r3, [r3, r2]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_I2C_Master_Transmit+0x3a>
 800352a:	2302      	movs	r3, #2
 800352c:	e104      	b.n	8003738 <HAL_I2C_Master_Transmit+0x244>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2240      	movs	r2, #64	@ 0x40
 8003532:	2101      	movs	r1, #1
 8003534:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003536:	f7ff fadf 	bl	8002af8 <HAL_GetTick>
 800353a:	0003      	movs	r3, r0
 800353c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800353e:	2380      	movs	r3, #128	@ 0x80
 8003540:	0219      	lsls	r1, r3, #8
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	2319      	movs	r3, #25
 800354a:	2201      	movs	r2, #1
 800354c:	f000 fa26 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8003550:	1e03      	subs	r3, r0, #0
 8003552:	d001      	beq.n	8003558 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0ef      	b.n	8003738 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2241      	movs	r2, #65	@ 0x41
 800355c:	2121      	movs	r1, #33	@ 0x21
 800355e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2242      	movs	r2, #66	@ 0x42
 8003564:	2110      	movs	r1, #16
 8003566:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2208      	movs	r2, #8
 8003578:	18ba      	adds	r2, r7, r2
 800357a:	8812      	ldrh	r2, [r2, #0]
 800357c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	2bff      	cmp	r3, #255	@ 0xff
 800358c:	d906      	bls.n	800359c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	22ff      	movs	r2, #255	@ 0xff
 8003592:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003594:	2380      	movs	r3, #128	@ 0x80
 8003596:	045b      	lsls	r3, r3, #17
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	e007      	b.n	80035ac <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80035a6:	2380      	movs	r3, #128	@ 0x80
 80035a8:	049b      	lsls	r3, r3, #18
 80035aa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d027      	beq.n	8003604 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	697c      	ldr	r4, [r7, #20]
 80035f0:	230a      	movs	r3, #10
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	8819      	ldrh	r1, [r3, #0]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	4b51      	ldr	r3, [pc, #324]	@ (8003740 <HAL_I2C_Master_Transmit+0x24c>)
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	0023      	movs	r3, r4
 80035fe:	f000 fc45 	bl	8003e8c <I2C_TransferConfig>
 8003602:	e06f      	b.n	80036e4 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003608:	b2da      	uxtb	r2, r3
 800360a:	697c      	ldr	r4, [r7, #20]
 800360c:	230a      	movs	r3, #10
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	8819      	ldrh	r1, [r3, #0]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	4b4a      	ldr	r3, [pc, #296]	@ (8003740 <HAL_I2C_Master_Transmit+0x24c>)
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	0023      	movs	r3, r4
 800361a:	f000 fc37 	bl	8003e8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800361e:	e061      	b.n	80036e4 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	0018      	movs	r0, r3
 8003628:	f000 fa10 	bl	8003a4c <I2C_WaitOnTXISFlagUntilTimeout>
 800362c:	1e03      	subs	r3, r0, #0
 800362e:	d001      	beq.n	8003634 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e081      	b.n	8003738 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d03a      	beq.n	80036e4 <HAL_I2C_Master_Transmit+0x1f0>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003672:	2b00      	cmp	r3, #0
 8003674:	d136      	bne.n	80036e4 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	0013      	movs	r3, r2
 8003680:	2200      	movs	r2, #0
 8003682:	2180      	movs	r1, #128	@ 0x80
 8003684:	f000 f98a 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8003688:	1e03      	subs	r3, r0, #0
 800368a:	d001      	beq.n	8003690 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e053      	b.n	8003738 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	2bff      	cmp	r3, #255	@ 0xff
 8003698:	d911      	bls.n	80036be <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	22ff      	movs	r2, #255	@ 0xff
 800369e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	2380      	movs	r3, #128	@ 0x80
 80036a8:	045c      	lsls	r4, r3, #17
 80036aa:	230a      	movs	r3, #10
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	8819      	ldrh	r1, [r3, #0]
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	2300      	movs	r3, #0
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	0023      	movs	r3, r4
 80036b8:	f000 fbe8 	bl	8003e8c <I2C_TransferConfig>
 80036bc:	e012      	b.n	80036e4 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	2380      	movs	r3, #128	@ 0x80
 80036d0:	049c      	lsls	r4, r3, #18
 80036d2:	230a      	movs	r3, #10
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	8819      	ldrh	r1, [r3, #0]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	2300      	movs	r3, #0
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	0023      	movs	r3, r4
 80036e0:	f000 fbd4 	bl	8003e8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d198      	bne.n	8003620 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f000 f9ef 	bl	8003ad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036fa:	1e03      	subs	r3, r0, #0
 80036fc:	d001      	beq.n	8003702 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e01a      	b.n	8003738 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2220      	movs	r2, #32
 8003708:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	490b      	ldr	r1, [pc, #44]	@ (8003744 <HAL_I2C_Master_Transmit+0x250>)
 8003716:	400a      	ands	r2, r1
 8003718:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2241      	movs	r2, #65	@ 0x41
 800371e:	2120      	movs	r1, #32
 8003720:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2242      	movs	r2, #66	@ 0x42
 8003726:	2100      	movs	r1, #0
 8003728:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2240      	movs	r2, #64	@ 0x40
 800372e:	2100      	movs	r1, #0
 8003730:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	e000      	b.n	8003738 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003736:	2302      	movs	r3, #2
  }
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	b007      	add	sp, #28
 800373e:	bd90      	pop	{r4, r7, pc}
 8003740:	80002000 	.word	0x80002000
 8003744:	fe00e800 	.word	0xfe00e800

08003748 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b089      	sub	sp, #36	@ 0x24
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	0008      	movs	r0, r1
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	0019      	movs	r1, r3
 8003756:	230a      	movs	r3, #10
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	1c02      	adds	r2, r0, #0
 800375c:	801a      	strh	r2, [r3, #0]
 800375e:	2308      	movs	r3, #8
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	1c0a      	adds	r2, r1, #0
 8003764:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2241      	movs	r2, #65	@ 0x41
 800376a:	5c9b      	ldrb	r3, [r3, r2]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b20      	cmp	r3, #32
 8003770:	d000      	beq.n	8003774 <HAL_I2C_Master_Receive+0x2c>
 8003772:	e0e8      	b.n	8003946 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2240      	movs	r2, #64	@ 0x40
 8003778:	5c9b      	ldrb	r3, [r3, r2]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_I2C_Master_Receive+0x3a>
 800377e:	2302      	movs	r3, #2
 8003780:	e0e2      	b.n	8003948 <HAL_I2C_Master_Receive+0x200>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2240      	movs	r2, #64	@ 0x40
 8003786:	2101      	movs	r1, #1
 8003788:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800378a:	f7ff f9b5 	bl	8002af8 <HAL_GetTick>
 800378e:	0003      	movs	r3, r0
 8003790:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003792:	2380      	movs	r3, #128	@ 0x80
 8003794:	0219      	lsls	r1, r3, #8
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	2319      	movs	r3, #25
 800379e:	2201      	movs	r2, #1
 80037a0:	f000 f8fc 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 80037a4:	1e03      	subs	r3, r0, #0
 80037a6:	d001      	beq.n	80037ac <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0cd      	b.n	8003948 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2241      	movs	r2, #65	@ 0x41
 80037b0:	2122      	movs	r1, #34	@ 0x22
 80037b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2242      	movs	r2, #66	@ 0x42
 80037b8:	2110      	movs	r1, #16
 80037ba:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2208      	movs	r2, #8
 80037cc:	18ba      	adds	r2, r7, r2
 80037ce:	8812      	ldrh	r2, [r2, #0]
 80037d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2bff      	cmp	r3, #255	@ 0xff
 80037e0:	d911      	bls.n	8003806 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	22ff      	movs	r2, #255	@ 0xff
 80037e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	2380      	movs	r3, #128	@ 0x80
 80037f0:	045c      	lsls	r4, r3, #17
 80037f2:	230a      	movs	r3, #10
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	8819      	ldrh	r1, [r3, #0]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	4b55      	ldr	r3, [pc, #340]	@ (8003950 <HAL_I2C_Master_Receive+0x208>)
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	0023      	movs	r3, r4
 8003800:	f000 fb44 	bl	8003e8c <I2C_TransferConfig>
 8003804:	e076      	b.n	80038f4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003814:	b2da      	uxtb	r2, r3
 8003816:	2380      	movs	r3, #128	@ 0x80
 8003818:	049c      	lsls	r4, r3, #18
 800381a:	230a      	movs	r3, #10
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	8819      	ldrh	r1, [r3, #0]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	4b4b      	ldr	r3, [pc, #300]	@ (8003950 <HAL_I2C_Master_Receive+0x208>)
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	0023      	movs	r3, r4
 8003828:	f000 fb30 	bl	8003e8c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800382c:	e062      	b.n	80038f4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	0018      	movs	r0, r3
 8003836:	f000 f993 	bl	8003b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800383a:	1e03      	subs	r3, r0, #0
 800383c:	d001      	beq.n	8003842 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e082      	b.n	8003948 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d03a      	beq.n	80038f4 <HAL_I2C_Master_Receive+0x1ac>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003882:	2b00      	cmp	r3, #0
 8003884:	d136      	bne.n	80038f4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003886:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	0013      	movs	r3, r2
 8003890:	2200      	movs	r2, #0
 8003892:	2180      	movs	r1, #128	@ 0x80
 8003894:	f000 f882 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8003898:	1e03      	subs	r3, r0, #0
 800389a:	d001      	beq.n	80038a0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e053      	b.n	8003948 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2bff      	cmp	r3, #255	@ 0xff
 80038a8:	d911      	bls.n	80038ce <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	22ff      	movs	r2, #255	@ 0xff
 80038ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	2380      	movs	r3, #128	@ 0x80
 80038b8:	045c      	lsls	r4, r3, #17
 80038ba:	230a      	movs	r3, #10
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	8819      	ldrh	r1, [r3, #0]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	2300      	movs	r3, #0
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	0023      	movs	r3, r4
 80038c8:	f000 fae0 	bl	8003e8c <I2C_TransferConfig>
 80038cc:	e012      	b.n	80038f4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	2380      	movs	r3, #128	@ 0x80
 80038e0:	049c      	lsls	r4, r3, #18
 80038e2:	230a      	movs	r3, #10
 80038e4:	18fb      	adds	r3, r7, r3
 80038e6:	8819      	ldrh	r1, [r3, #0]
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	2300      	movs	r3, #0
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	0023      	movs	r3, r4
 80038f0:	f000 facc 	bl	8003e8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d197      	bne.n	800382e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	0018      	movs	r0, r3
 8003906:	f000 f8e7 	bl	8003ad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800390a:	1e03      	subs	r3, r0, #0
 800390c:	d001      	beq.n	8003912 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e01a      	b.n	8003948 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2220      	movs	r2, #32
 8003918:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	490b      	ldr	r1, [pc, #44]	@ (8003954 <HAL_I2C_Master_Receive+0x20c>)
 8003926:	400a      	ands	r2, r1
 8003928:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2241      	movs	r2, #65	@ 0x41
 800392e:	2120      	movs	r1, #32
 8003930:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2242      	movs	r2, #66	@ 0x42
 8003936:	2100      	movs	r1, #0
 8003938:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2240      	movs	r2, #64	@ 0x40
 800393e:	2100      	movs	r1, #0
 8003940:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e000      	b.n	8003948 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003946:	2302      	movs	r3, #2
  }
}
 8003948:	0018      	movs	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	b007      	add	sp, #28
 800394e:	bd90      	pop	{r4, r7, pc}
 8003950:	80002400 	.word	0x80002400
 8003954:	fe00e800 	.word	0xfe00e800

08003958 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2202      	movs	r2, #2
 8003968:	4013      	ands	r3, r2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d103      	bne.n	8003976 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2201      	movs	r2, #1
 800397e:	4013      	ands	r3, r2
 8003980:	2b01      	cmp	r3, #1
 8003982:	d007      	beq.n	8003994 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2101      	movs	r1, #1
 8003990:	430a      	orrs	r2, r1
 8003992:	619a      	str	r2, [r3, #24]
  }
}
 8003994:	46c0      	nop			@ (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b002      	add	sp, #8
 800399a:	bd80      	pop	{r7, pc}

0800399c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	1dfb      	adds	r3, r7, #7
 80039aa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ac:	e03a      	b.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	6839      	ldr	r1, [r7, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f000 f971 	bl	8003c9c <I2C_IsErrorOccurred>
 80039ba:	1e03      	subs	r3, r0, #0
 80039bc:	d001      	beq.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e040      	b.n	8003a44 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	3301      	adds	r3, #1
 80039c6:	d02d      	beq.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c8:	f7ff f896 	bl	8002af8 <HAL_GetTick>
 80039cc:	0002      	movs	r2, r0
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d302      	bcc.n	80039de <I2C_WaitOnFlagUntilTimeout+0x42>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d122      	bne.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	4013      	ands	r3, r2
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	425a      	negs	r2, r3
 80039ee:	4153      	adcs	r3, r2
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	001a      	movs	r2, r3
 80039f4:	1dfb      	adds	r3, r7, #7
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d113      	bne.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a00:	2220      	movs	r2, #32
 8003a02:	431a      	orrs	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2241      	movs	r2, #65	@ 0x41
 8003a0c:	2120      	movs	r1, #32
 8003a0e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2242      	movs	r2, #66	@ 0x42
 8003a14:	2100      	movs	r1, #0
 8003a16:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2240      	movs	r2, #64	@ 0x40
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e00f      	b.n	8003a44 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	425a      	negs	r2, r3
 8003a34:	4153      	adcs	r3, r2
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	001a      	movs	r2, r3
 8003a3a:	1dfb      	adds	r3, r7, #7
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d0b5      	beq.n	80039ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	0018      	movs	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b004      	add	sp, #16
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a58:	e032      	b.n	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	0018      	movs	r0, r3
 8003a62:	f000 f91b 	bl	8003c9c <I2C_IsErrorOccurred>
 8003a66:	1e03      	subs	r3, r0, #0
 8003a68:	d001      	beq.n	8003a6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e030      	b.n	8003ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	3301      	adds	r3, #1
 8003a72:	d025      	beq.n	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a74:	f7ff f840 	bl	8002af8 <HAL_GetTick>
 8003a78:	0002      	movs	r2, r0
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d302      	bcc.n	8003a8a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11a      	bne.n	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	2202      	movs	r2, #2
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d013      	beq.n	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2241      	movs	r2, #65	@ 0x41
 8003aa8:	2120      	movs	r1, #32
 8003aaa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2242      	movs	r2, #66	@ 0x42
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2240      	movs	r2, #64	@ 0x40
 8003ab8:	2100      	movs	r1, #0
 8003aba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e007      	b.n	8003ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d1c5      	bne.n	8003a5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b004      	add	sp, #16
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ae4:	e02f      	b.n	8003b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	0018      	movs	r0, r3
 8003aee:	f000 f8d5 	bl	8003c9c <I2C_IsErrorOccurred>
 8003af2:	1e03      	subs	r3, r0, #0
 8003af4:	d001      	beq.n	8003afa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e02d      	b.n	8003b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afa:	f7fe fffd 	bl	8002af8 <HAL_GetTick>
 8003afe:	0002      	movs	r2, r0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d302      	bcc.n	8003b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d11a      	bne.n	8003b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2220      	movs	r2, #32
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d013      	beq.n	8003b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b22:	2220      	movs	r2, #32
 8003b24:	431a      	orrs	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2241      	movs	r2, #65	@ 0x41
 8003b2e:	2120      	movs	r1, #32
 8003b30:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2242      	movs	r2, #66	@ 0x42
 8003b36:	2100      	movs	r1, #0
 8003b38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2240      	movs	r2, #64	@ 0x40
 8003b3e:	2100      	movs	r1, #0
 8003b40:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e007      	b.n	8003b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d1c8      	bne.n	8003ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	0018      	movs	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b004      	add	sp, #16
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6c:	2317      	movs	r3, #23
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003b74:	e07b      	b.n	8003c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f000 f88d 	bl	8003c9c <I2C_IsErrorOccurred>
 8003b82:	1e03      	subs	r3, r0, #0
 8003b84:	d003      	beq.n	8003b8e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003b86:	2317      	movs	r3, #23
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2220      	movs	r2, #32
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	d140      	bne.n	8003c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003b9c:	2117      	movs	r1, #23
 8003b9e:	187b      	adds	r3, r7, r1
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d13b      	bne.n	8003c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	2204      	movs	r2, #4
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d106      	bne.n	8003bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003bbc:	187b      	adds	r3, r7, r1
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2210      	movs	r2, #16
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d123      	bne.n	8003c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2204      	movs	r2, #4
 8003bdc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2220      	movs	r2, #32
 8003be4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4929      	ldr	r1, [pc, #164]	@ (8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003bf2:	400a      	ands	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2241      	movs	r2, #65	@ 0x41
 8003bfa:	2120      	movs	r1, #32
 8003bfc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2242      	movs	r2, #66	@ 0x42
 8003c02:	2100      	movs	r1, #0
 8003c04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2240      	movs	r2, #64	@ 0x40
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003c0e:	2317      	movs	r3, #23
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]
 8003c16:	e002      	b.n	8003c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003c1e:	f7fe ff6b 	bl	8002af8 <HAL_GetTick>
 8003c22:	0002      	movs	r2, r0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d302      	bcc.n	8003c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d11c      	bne.n	8003c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003c34:	2017      	movs	r0, #23
 8003c36:	183b      	adds	r3, r7, r0
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d117      	bne.n	8003c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2204      	movs	r2, #4
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d010      	beq.n	8003c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c50:	2220      	movs	r2, #32
 8003c52:	431a      	orrs	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2241      	movs	r2, #65	@ 0x41
 8003c5c:	2120      	movs	r1, #32
 8003c5e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2240      	movs	r2, #64	@ 0x40
 8003c64:	2100      	movs	r1, #0
 8003c66:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003c68:	183b      	adds	r3, r7, r0
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2204      	movs	r2, #4
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d005      	beq.n	8003c88 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003c7c:	2317      	movs	r3, #23
 8003c7e:	18fb      	adds	r3, r7, r3
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d100      	bne.n	8003c88 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003c86:	e776      	b.n	8003b76 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003c88:	2317      	movs	r3, #23
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	781b      	ldrb	r3, [r3, #0]
}
 8003c8e:	0018      	movs	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	b006      	add	sp, #24
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	fe00e800 	.word	0xfe00e800

08003c9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	@ 0x28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca8:	2327      	movs	r3, #39	@ 0x27
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2210      	movs	r2, #16
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d100      	bne.n	8003cca <I2C_IsErrorOccurred+0x2e>
 8003cc8:	e079      	b.n	8003dbe <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2210      	movs	r2, #16
 8003cd0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cd2:	e057      	b.n	8003d84 <I2C_IsErrorOccurred+0xe8>
 8003cd4:	2227      	movs	r2, #39	@ 0x27
 8003cd6:	18bb      	adds	r3, r7, r2
 8003cd8:	18ba      	adds	r2, r7, r2
 8003cda:	7812      	ldrb	r2, [r2, #0]
 8003cdc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	d04f      	beq.n	8003d84 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ce4:	f7fe ff08 	bl	8002af8 <HAL_GetTick>
 8003ce8:	0002      	movs	r2, r0
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <I2C_IsErrorOccurred+0x5e>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d144      	bne.n	8003d84 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	2380      	movs	r3, #128	@ 0x80
 8003d02:	01db      	lsls	r3, r3, #7
 8003d04:	4013      	ands	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d08:	2013      	movs	r0, #19
 8003d0a:	183b      	adds	r3, r7, r0
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	2142      	movs	r1, #66	@ 0x42
 8003d10:	5c52      	ldrb	r2, [r2, r1]
 8003d12:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	2380      	movs	r3, #128	@ 0x80
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	401a      	ands	r2, r3
 8003d20:	2380      	movs	r3, #128	@ 0x80
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d126      	bne.n	8003d76 <I2C_IsErrorOccurred+0xda>
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	2380      	movs	r3, #128	@ 0x80
 8003d2c:	01db      	lsls	r3, r3, #7
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d021      	beq.n	8003d76 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003d32:	183b      	adds	r3, r7, r0
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d01d      	beq.n	8003d76 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2180      	movs	r1, #128	@ 0x80
 8003d46:	01c9      	lsls	r1, r1, #7
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d4c:	f7fe fed4 	bl	8002af8 <HAL_GetTick>
 8003d50:	0003      	movs	r3, r0
 8003d52:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d54:	e00f      	b.n	8003d76 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d56:	f7fe fecf 	bl	8002af8 <HAL_GetTick>
 8003d5a:	0002      	movs	r2, r0
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b19      	cmp	r3, #25
 8003d62:	d908      	bls.n	8003d76 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	2220      	movs	r2, #32
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d6c:	2327      	movs	r3, #39	@ 0x27
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	2201      	movs	r2, #1
 8003d72:	701a      	strb	r2, [r3, #0]

              break;
 8003d74:	e006      	b.n	8003d84 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d1e8      	bne.n	8003d56 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d004      	beq.n	8003d9c <I2C_IsErrorOccurred+0x100>
 8003d92:	2327      	movs	r3, #39	@ 0x27
 8003d94:	18fb      	adds	r3, r7, r3
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d09b      	beq.n	8003cd4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d9c:	2327      	movs	r3, #39	@ 0x27
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2220      	movs	r2, #32
 8003dac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	2204      	movs	r2, #4
 8003db2:	4313      	orrs	r3, r2
 8003db4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003db6:	2327      	movs	r3, #39	@ 0x27
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	2201      	movs	r2, #1
 8003dbc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	2380      	movs	r3, #128	@ 0x80
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d00c      	beq.n	8003dea <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2280      	movs	r2, #128	@ 0x80
 8003dde:	0052      	lsls	r2, r2, #1
 8003de0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003de2:	2327      	movs	r3, #39	@ 0x27
 8003de4:	18fb      	adds	r3, r7, r3
 8003de6:	2201      	movs	r2, #1
 8003de8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	2380      	movs	r3, #128	@ 0x80
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4013      	ands	r3, r2
 8003df2:	d00c      	beq.n	8003e0e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	2208      	movs	r2, #8
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2280      	movs	r2, #128	@ 0x80
 8003e02:	00d2      	lsls	r2, r2, #3
 8003e04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e06:	2327      	movs	r3, #39	@ 0x27
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	2380      	movs	r3, #128	@ 0x80
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4013      	ands	r3, r2
 8003e16:	d00c      	beq.n	8003e32 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2280      	movs	r2, #128	@ 0x80
 8003e26:	0092      	lsls	r2, r2, #2
 8003e28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e2a:	2327      	movs	r3, #39	@ 0x27
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	2201      	movs	r2, #1
 8003e30:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003e32:	2327      	movs	r3, #39	@ 0x27
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01d      	beq.n	8003e78 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f7ff fd8a 	bl	8003958 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	490e      	ldr	r1, [pc, #56]	@ (8003e88 <I2C_IsErrorOccurred+0x1ec>)
 8003e50:	400a      	ands	r2, r1
 8003e52:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2241      	movs	r2, #65	@ 0x41
 8003e64:	2120      	movs	r1, #32
 8003e66:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2242      	movs	r2, #66	@ 0x42
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2240      	movs	r2, #64	@ 0x40
 8003e74:	2100      	movs	r1, #0
 8003e76:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003e78:	2327      	movs	r3, #39	@ 0x27
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	781b      	ldrb	r3, [r3, #0]
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b00a      	add	sp, #40	@ 0x28
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			@ (mov r8, r8)
 8003e88:	fe00e800 	.word	0xfe00e800

08003e8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e8c:	b590      	push	{r4, r7, lr}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	0008      	movs	r0, r1
 8003e96:	0011      	movs	r1, r2
 8003e98:	607b      	str	r3, [r7, #4]
 8003e9a:	240a      	movs	r4, #10
 8003e9c:	193b      	adds	r3, r7, r4
 8003e9e:	1c02      	adds	r2, r0, #0
 8003ea0:	801a      	strh	r2, [r3, #0]
 8003ea2:	2009      	movs	r0, #9
 8003ea4:	183b      	adds	r3, r7, r0
 8003ea6:	1c0a      	adds	r2, r1, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eaa:	193b      	adds	r3, r7, r4
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	059b      	lsls	r3, r3, #22
 8003eb0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003eb2:	183b      	adds	r3, r7, r0
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	0419      	lsls	r1, r3, #16
 8003eb8:	23ff      	movs	r3, #255	@ 0xff
 8003eba:	041b      	lsls	r3, r3, #16
 8003ebc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ebe:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ed6:	0d51      	lsrs	r1, r2, #21
 8003ed8:	2280      	movs	r2, #128	@ 0x80
 8003eda:	00d2      	lsls	r2, r2, #3
 8003edc:	400a      	ands	r2, r1
 8003ede:	4907      	ldr	r1, [pc, #28]	@ (8003efc <I2C_TransferConfig+0x70>)
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	43d2      	mvns	r2, r2
 8003ee4:	401a      	ands	r2, r3
 8003ee6:	0011      	movs	r1, r2
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b007      	add	sp, #28
 8003ef8:	bd90      	pop	{r4, r7, pc}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	03ff63ff 	.word	0x03ff63ff

08003f00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2241      	movs	r2, #65	@ 0x41
 8003f0e:	5c9b      	ldrb	r3, [r3, r2]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d138      	bne.n	8003f88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2240      	movs	r2, #64	@ 0x40
 8003f1a:	5c9b      	ldrb	r3, [r3, r2]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e032      	b.n	8003f8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2240      	movs	r2, #64	@ 0x40
 8003f28:	2101      	movs	r1, #1
 8003f2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2241      	movs	r2, #65	@ 0x41
 8003f30:	2124      	movs	r1, #36	@ 0x24
 8003f32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2101      	movs	r1, #1
 8003f40:	438a      	bics	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4911      	ldr	r1, [pc, #68]	@ (8003f94 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003f50:	400a      	ands	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6819      	ldr	r1, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2101      	movs	r1, #1
 8003f70:	430a      	orrs	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2241      	movs	r2, #65	@ 0x41
 8003f78:	2120      	movs	r1, #32
 8003f7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2240      	movs	r2, #64	@ 0x40
 8003f80:	2100      	movs	r1, #0
 8003f82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	e000      	b.n	8003f8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f88:	2302      	movs	r3, #2
  }
}
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b002      	add	sp, #8
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			@ (mov r8, r8)
 8003f94:	ffffefff 	.word	0xffffefff

08003f98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2241      	movs	r2, #65	@ 0x41
 8003fa6:	5c9b      	ldrb	r3, [r3, r2]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d139      	bne.n	8004022 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2240      	movs	r2, #64	@ 0x40
 8003fb2:	5c9b      	ldrb	r3, [r3, r2]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e033      	b.n	8004024 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2240      	movs	r2, #64	@ 0x40
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2241      	movs	r2, #65	@ 0x41
 8003fc8:	2124      	movs	r1, #36	@ 0x24
 8003fca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	438a      	bics	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a11      	ldr	r2, [pc, #68]	@ (800402c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2101      	movs	r1, #1
 800400a:	430a      	orrs	r2, r1
 800400c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2241      	movs	r2, #65	@ 0x41
 8004012:	2120      	movs	r1, #32
 8004014:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2240      	movs	r2, #64	@ 0x40
 800401a:	2100      	movs	r1, #0
 800401c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	e000      	b.n	8004024 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004022:	2302      	movs	r3, #2
  }
}
 8004024:	0018      	movs	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	b004      	add	sp, #16
 800402a:	bd80      	pop	{r7, pc}
 800402c:	fffff0ff 	.word	0xfffff0ff

08004030 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e0e5      	b.n	800420e <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2235      	movs	r2, #53	@ 0x35
 8004046:	5c9b      	ldrb	r3, [r3, r2]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d107      	bne.n	800405e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2234      	movs	r2, #52	@ 0x34
 8004052:	2100      	movs	r1, #0
 8004054:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0018      	movs	r0, r3
 800405a:	f7fe f9d9 	bl	8002410 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2235      	movs	r2, #53	@ 0x35
 8004062:	2102      	movs	r1, #2
 8004064:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4969      	ldr	r1, [pc, #420]	@ (8004218 <HAL_I2S_Init+0x1e8>)
 8004072:	400a      	ands	r2, r1
 8004074:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2202      	movs	r2, #2
 800407c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d100      	bne.n	8004088 <HAL_I2S_Init+0x58>
 8004086:	e076      	b.n	8004176 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d102      	bne.n	8004096 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004090:	2310      	movs	r3, #16
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	e001      	b.n	800409a <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004096:	2320      	movs	r3, #32
 8004098:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b20      	cmp	r3, #32
 80040a0:	d802      	bhi.n	80040a8 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 80040a8:	2380      	movs	r3, #128	@ 0x80
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	0018      	movs	r0, r3
 80040ae:	f000 ff5b 	bl	8004f68 <HAL_RCCEx_GetPeriphCLKFreq>
 80040b2:	0003      	movs	r3, r0
 80040b4:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	2380      	movs	r3, #128	@ 0x80
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	429a      	cmp	r2, r3
 80040c0:	d131      	bne.n	8004126 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	0019      	movs	r1, r3
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f7fc f817 	bl	8000104 <__udivsi3>
 80040d6:	0003      	movs	r3, r0
 80040d8:	001a      	movs	r2, r3
 80040da:	0013      	movs	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	189b      	adds	r3, r3, r2
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	001a      	movs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	0019      	movs	r1, r3
 80040ea:	0010      	movs	r0, r2
 80040ec:	f7fc f80a 	bl	8000104 <__udivsi3>
 80040f0:	0003      	movs	r3, r0
 80040f2:	3305      	adds	r3, #5
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	e02a      	b.n	800414e <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	0019      	movs	r1, r3
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f7fc f800 	bl	8000104 <__udivsi3>
 8004104:	0003      	movs	r3, r0
 8004106:	001a      	movs	r2, r3
 8004108:	0013      	movs	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	189b      	adds	r3, r3, r2
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	001a      	movs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	0019      	movs	r1, r3
 8004118:	0010      	movs	r0, r2
 800411a:	f7fb fff3 	bl	8000104 <__udivsi3>
 800411e:	0003      	movs	r3, r0
 8004120:	3305      	adds	r3, #5
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	e013      	b.n	800414e <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004126:	6979      	ldr	r1, [r7, #20]
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f7fb ffeb 	bl	8000104 <__udivsi3>
 800412e:	0003      	movs	r3, r0
 8004130:	001a      	movs	r2, r3
 8004132:	0013      	movs	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	189b      	adds	r3, r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	001a      	movs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	0019      	movs	r1, r3
 8004142:	0010      	movs	r0, r2
 8004144:	f7fb ffde 	bl	8000104 <__udivsi3>
 8004148:	0003      	movs	r3, r0
 800414a:	3305      	adds	r3, #5
 800414c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	210a      	movs	r1, #10
 8004152:	0018      	movs	r0, r3
 8004154:	f7fb ffd6 	bl	8000104 <__udivsi3>
 8004158:	0003      	movs	r3, r0
 800415a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	2201      	movs	r2, #1
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	61bb      	str	r3, [r7, #24]
 8004174:	e003      	b.n	800417e <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004176:	2302      	movs	r3, #2
 8004178:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d902      	bls.n	800418a <HAL_I2S_Init+0x15a>
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2bff      	cmp	r3, #255	@ 0xff
 8004188:	d907      	bls.n	800419a <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418e:	2210      	movs	r2, #16
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e039      	b.n	800420e <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	431a      	orrs	r2, r3
 80041a2:	0011      	movs	r1, r2
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	4a18      	ldr	r2, [pc, #96]	@ (8004218 <HAL_I2S_Init+0x1e8>)
 80041b6:	401a      	ands	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6859      	ldr	r1, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	4319      	orrs	r1, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	4319      	orrs	r1, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	430b      	orrs	r3, r1
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2180      	movs	r1, #128	@ 0x80
 80041d6:	0109      	lsls	r1, r1, #4
 80041d8:	430a      	orrs	r2, r1
 80041da:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b30      	cmp	r3, #48	@ 0x30
 80041e2:	d003      	beq.n	80041ec <HAL_I2S_Init+0x1bc>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2bb0      	cmp	r3, #176	@ 0xb0
 80041ea:	d108      	bne.n	80041fe <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69da      	ldr	r2, [r3, #28]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2180      	movs	r1, #128	@ 0x80
 80041f8:	0149      	lsls	r1, r1, #5
 80041fa:	430a      	orrs	r2, r1
 80041fc:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2235      	movs	r2, #53	@ 0x35
 8004208:	2101      	movs	r1, #1
 800420a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	0018      	movs	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	b008      	add	sp, #32
 8004214:	bd80      	pop	{r7, pc}
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	fffff040 	.word	0xfffff040

0800421c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004220:	4b04      	ldr	r3, [pc, #16]	@ (8004234 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4b03      	ldr	r3, [pc, #12]	@ (8004234 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004226:	2180      	movs	r1, #128	@ 0x80
 8004228:	0049      	lsls	r1, r1, #1
 800422a:	430a      	orrs	r2, r1
 800422c:	601a      	str	r2, [r3, #0]
}
 800422e:	46c0      	nop			@ (mov r8, r8)
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40007000 	.word	0x40007000

08004238 <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 800423c:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <HAL_PWR_DisableBkUpAccess+0x18>)
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4b03      	ldr	r3, [pc, #12]	@ (8004250 <HAL_PWR_DisableBkUpAccess+0x18>)
 8004242:	4904      	ldr	r1, [pc, #16]	@ (8004254 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8004244:	400a      	ands	r2, r1
 8004246:	601a      	str	r2, [r3, #0]
}
 8004248:	46c0      	nop			@ (mov r8, r8)
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	46c0      	nop			@ (mov r8, r8)
 8004250:	40007000 	.word	0x40007000
 8004254:	fffffeff 	.word	0xfffffeff

08004258 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004260:	4b19      	ldr	r3, [pc, #100]	@ (80042c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a19      	ldr	r2, [pc, #100]	@ (80042cc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004266:	4013      	ands	r3, r2
 8004268:	0019      	movs	r1, r3
 800426a:	4b17      	ldr	r3, [pc, #92]	@ (80042c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	430a      	orrs	r2, r1
 8004270:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	2380      	movs	r3, #128	@ 0x80
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	429a      	cmp	r2, r3
 800427a:	d11f      	bne.n	80042bc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800427c:	4b14      	ldr	r3, [pc, #80]	@ (80042d0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	0013      	movs	r3, r2
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	189b      	adds	r3, r3, r2
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4912      	ldr	r1, [pc, #72]	@ (80042d4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800428a:	0018      	movs	r0, r3
 800428c:	f7fb ff3a 	bl	8000104 <__udivsi3>
 8004290:	0003      	movs	r3, r0
 8004292:	3301      	adds	r3, #1
 8004294:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004296:	e008      	b.n	80042aa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	e001      	b.n	80042aa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e009      	b.n	80042be <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042aa:	4b07      	ldr	r3, [pc, #28]	@ (80042c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	2380      	movs	r3, #128	@ 0x80
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	401a      	ands	r2, r3
 80042b4:	2380      	movs	r3, #128	@ 0x80
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d0ed      	beq.n	8004298 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	0018      	movs	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b004      	add	sp, #16
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			@ (mov r8, r8)
 80042c8:	40007000 	.word	0x40007000
 80042cc:	fffff9ff 	.word	0xfffff9ff
 80042d0:	20000068 	.word	0x20000068
 80042d4:	000f4240 	.word	0x000f4240

080042d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80042dc:	4b03      	ldr	r3, [pc, #12]	@ (80042ec <LL_RCC_GetAPB1Prescaler+0x14>)
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	23e0      	movs	r3, #224	@ 0xe0
 80042e2:	01db      	lsls	r3, r3, #7
 80042e4:	4013      	ands	r3, r2
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40021000 	.word	0x40021000

080042f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e2fe      	b.n	8004900 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2201      	movs	r2, #1
 8004308:	4013      	ands	r3, r2
 800430a:	d100      	bne.n	800430e <HAL_RCC_OscConfig+0x1e>
 800430c:	e07c      	b.n	8004408 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800430e:	4bc3      	ldr	r3, [pc, #780]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	2238      	movs	r2, #56	@ 0x38
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004318:	4bc0      	ldr	r3, [pc, #768]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2203      	movs	r2, #3
 800431e:	4013      	ands	r3, r2
 8004320:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b10      	cmp	r3, #16
 8004326:	d102      	bne.n	800432e <HAL_RCC_OscConfig+0x3e>
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2b03      	cmp	r3, #3
 800432c:	d002      	beq.n	8004334 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b08      	cmp	r3, #8
 8004332:	d10b      	bne.n	800434c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004334:	4bb9      	ldr	r3, [pc, #740]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	2380      	movs	r3, #128	@ 0x80
 800433a:	029b      	lsls	r3, r3, #10
 800433c:	4013      	ands	r3, r2
 800433e:	d062      	beq.n	8004406 <HAL_RCC_OscConfig+0x116>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d15e      	bne.n	8004406 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e2d9      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	2380      	movs	r3, #128	@ 0x80
 8004352:	025b      	lsls	r3, r3, #9
 8004354:	429a      	cmp	r2, r3
 8004356:	d107      	bne.n	8004368 <HAL_RCC_OscConfig+0x78>
 8004358:	4bb0      	ldr	r3, [pc, #704]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4baf      	ldr	r3, [pc, #700]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 800435e:	2180      	movs	r1, #128	@ 0x80
 8004360:	0249      	lsls	r1, r1, #9
 8004362:	430a      	orrs	r2, r1
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	e020      	b.n	80043aa <HAL_RCC_OscConfig+0xba>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	23a0      	movs	r3, #160	@ 0xa0
 800436e:	02db      	lsls	r3, r3, #11
 8004370:	429a      	cmp	r2, r3
 8004372:	d10e      	bne.n	8004392 <HAL_RCC_OscConfig+0xa2>
 8004374:	4ba9      	ldr	r3, [pc, #676]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4ba8      	ldr	r3, [pc, #672]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 800437a:	2180      	movs	r1, #128	@ 0x80
 800437c:	02c9      	lsls	r1, r1, #11
 800437e:	430a      	orrs	r2, r1
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	4ba6      	ldr	r3, [pc, #664]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	4ba5      	ldr	r3, [pc, #660]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004388:	2180      	movs	r1, #128	@ 0x80
 800438a:	0249      	lsls	r1, r1, #9
 800438c:	430a      	orrs	r2, r1
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	e00b      	b.n	80043aa <HAL_RCC_OscConfig+0xba>
 8004392:	4ba2      	ldr	r3, [pc, #648]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	4ba1      	ldr	r3, [pc, #644]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004398:	49a1      	ldr	r1, [pc, #644]	@ (8004620 <HAL_RCC_OscConfig+0x330>)
 800439a:	400a      	ands	r2, r1
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	4b9f      	ldr	r3, [pc, #636]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b9e      	ldr	r3, [pc, #632]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 80043a4:	499f      	ldr	r1, [pc, #636]	@ (8004624 <HAL_RCC_OscConfig+0x334>)
 80043a6:	400a      	ands	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d014      	beq.n	80043dc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b2:	f7fe fba1 	bl	8002af8 <HAL_GetTick>
 80043b6:	0003      	movs	r3, r0
 80043b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043bc:	f7fe fb9c 	bl	8002af8 <HAL_GetTick>
 80043c0:	0002      	movs	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b64      	cmp	r3, #100	@ 0x64
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e298      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ce:	4b93      	ldr	r3, [pc, #588]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	2380      	movs	r3, #128	@ 0x80
 80043d4:	029b      	lsls	r3, r3, #10
 80043d6:	4013      	ands	r3, r2
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0xcc>
 80043da:	e015      	b.n	8004408 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fe fb8c 	bl	8002af8 <HAL_GetTick>
 80043e0:	0003      	movs	r3, r0
 80043e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e6:	f7fe fb87 	bl	8002af8 <HAL_GetTick>
 80043ea:	0002      	movs	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b64      	cmp	r3, #100	@ 0x64
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e283      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043f8:	4b88      	ldr	r3, [pc, #544]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	2380      	movs	r3, #128	@ 0x80
 80043fe:	029b      	lsls	r3, r3, #10
 8004400:	4013      	ands	r3, r2
 8004402:	d1f0      	bne.n	80043e6 <HAL_RCC_OscConfig+0xf6>
 8004404:	e000      	b.n	8004408 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004406:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2202      	movs	r2, #2
 800440e:	4013      	ands	r3, r2
 8004410:	d100      	bne.n	8004414 <HAL_RCC_OscConfig+0x124>
 8004412:	e099      	b.n	8004548 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004414:	4b81      	ldr	r3, [pc, #516]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2238      	movs	r2, #56	@ 0x38
 800441a:	4013      	ands	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800441e:	4b7f      	ldr	r3, [pc, #508]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2203      	movs	r2, #3
 8004424:	4013      	ands	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b10      	cmp	r3, #16
 800442c:	d102      	bne.n	8004434 <HAL_RCC_OscConfig+0x144>
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d002      	beq.n	800443a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d135      	bne.n	80044a6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800443a:	4b78      	ldr	r3, [pc, #480]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	2380      	movs	r3, #128	@ 0x80
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4013      	ands	r3, r2
 8004444:	d005      	beq.n	8004452 <HAL_RCC_OscConfig+0x162>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e256      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004452:	4b72      	ldr	r3, [pc, #456]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	4a74      	ldr	r2, [pc, #464]	@ (8004628 <HAL_RCC_OscConfig+0x338>)
 8004458:	4013      	ands	r3, r2
 800445a:	0019      	movs	r1, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	021a      	lsls	r2, r3, #8
 8004462:	4b6e      	ldr	r3, [pc, #440]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004464:	430a      	orrs	r2, r1
 8004466:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d112      	bne.n	8004494 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800446e:	4b6b      	ldr	r3, [pc, #428]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a6e      	ldr	r2, [pc, #440]	@ (800462c <HAL_RCC_OscConfig+0x33c>)
 8004474:	4013      	ands	r3, r2
 8004476:	0019      	movs	r1, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	4b67      	ldr	r3, [pc, #412]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 800447e:	430a      	orrs	r2, r1
 8004480:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004482:	4b66      	ldr	r3, [pc, #408]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	0adb      	lsrs	r3, r3, #11
 8004488:	2207      	movs	r2, #7
 800448a:	4013      	ands	r3, r2
 800448c:	4a68      	ldr	r2, [pc, #416]	@ (8004630 <HAL_RCC_OscConfig+0x340>)
 800448e:	40da      	lsrs	r2, r3
 8004490:	4b68      	ldr	r3, [pc, #416]	@ (8004634 <HAL_RCC_OscConfig+0x344>)
 8004492:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004494:	4b68      	ldr	r3, [pc, #416]	@ (8004638 <HAL_RCC_OscConfig+0x348>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	0018      	movs	r0, r3
 800449a:	f7fe fad1 	bl	8002a40 <HAL_InitTick>
 800449e:	1e03      	subs	r3, r0, #0
 80044a0:	d051      	beq.n	8004546 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e22c      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d030      	beq.n	8004510 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80044ae:	4b5b      	ldr	r3, [pc, #364]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a5e      	ldr	r2, [pc, #376]	@ (800462c <HAL_RCC_OscConfig+0x33c>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	0019      	movs	r1, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	4b57      	ldr	r3, [pc, #348]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 80044be:	430a      	orrs	r2, r1
 80044c0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80044c2:	4b56      	ldr	r3, [pc, #344]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4b55      	ldr	r3, [pc, #340]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 80044c8:	2180      	movs	r1, #128	@ 0x80
 80044ca:	0049      	lsls	r1, r1, #1
 80044cc:	430a      	orrs	r2, r1
 80044ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fe fb12 	bl	8002af8 <HAL_GetTick>
 80044d4:	0003      	movs	r3, r0
 80044d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044da:	f7fe fb0d 	bl	8002af8 <HAL_GetTick>
 80044de:	0002      	movs	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e209      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044ec:	4b4b      	ldr	r3, [pc, #300]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	2380      	movs	r3, #128	@ 0x80
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4013      	ands	r3, r2
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f8:	4b48      	ldr	r3, [pc, #288]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004628 <HAL_RCC_OscConfig+0x338>)
 80044fe:	4013      	ands	r3, r2
 8004500:	0019      	movs	r1, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	021a      	lsls	r2, r3, #8
 8004508:	4b44      	ldr	r3, [pc, #272]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	e01b      	b.n	8004548 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004510:	4b42      	ldr	r3, [pc, #264]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	4b41      	ldr	r3, [pc, #260]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004516:	4949      	ldr	r1, [pc, #292]	@ (800463c <HAL_RCC_OscConfig+0x34c>)
 8004518:	400a      	ands	r2, r1
 800451a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fe faec 	bl	8002af8 <HAL_GetTick>
 8004520:	0003      	movs	r3, r0
 8004522:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004526:	f7fe fae7 	bl	8002af8 <HAL_GetTick>
 800452a:	0002      	movs	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e1e3      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004538:	4b38      	ldr	r3, [pc, #224]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	2380      	movs	r3, #128	@ 0x80
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4013      	ands	r3, r2
 8004542:	d1f0      	bne.n	8004526 <HAL_RCC_OscConfig+0x236>
 8004544:	e000      	b.n	8004548 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004546:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2208      	movs	r2, #8
 800454e:	4013      	ands	r3, r2
 8004550:	d047      	beq.n	80045e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004552:	4b32      	ldr	r3, [pc, #200]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2238      	movs	r2, #56	@ 0x38
 8004558:	4013      	ands	r3, r2
 800455a:	2b18      	cmp	r3, #24
 800455c:	d10a      	bne.n	8004574 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800455e:	4b2f      	ldr	r3, [pc, #188]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004562:	2202      	movs	r2, #2
 8004564:	4013      	ands	r3, r2
 8004566:	d03c      	beq.n	80045e2 <HAL_RCC_OscConfig+0x2f2>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d138      	bne.n	80045e2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e1c5      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d019      	beq.n	80045b0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800457c:	4b27      	ldr	r3, [pc, #156]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 800457e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004580:	4b26      	ldr	r3, [pc, #152]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004582:	2101      	movs	r1, #1
 8004584:	430a      	orrs	r2, r1
 8004586:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fe fab6 	bl	8002af8 <HAL_GetTick>
 800458c:	0003      	movs	r3, r0
 800458e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004592:	f7fe fab1 	bl	8002af8 <HAL_GetTick>
 8004596:	0002      	movs	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e1ad      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045a4:	4b1d      	ldr	r3, [pc, #116]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 80045a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a8:	2202      	movs	r2, #2
 80045aa:	4013      	ands	r3, r2
 80045ac:	d0f1      	beq.n	8004592 <HAL_RCC_OscConfig+0x2a2>
 80045ae:	e018      	b.n	80045e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80045b0:	4b1a      	ldr	r3, [pc, #104]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 80045b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80045b4:	4b19      	ldr	r3, [pc, #100]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 80045b6:	2101      	movs	r1, #1
 80045b8:	438a      	bics	r2, r1
 80045ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fe fa9c 	bl	8002af8 <HAL_GetTick>
 80045c0:	0003      	movs	r3, r0
 80045c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045c6:	f7fe fa97 	bl	8002af8 <HAL_GetTick>
 80045ca:	0002      	movs	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e193      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045d8:	4b10      	ldr	r3, [pc, #64]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 80045da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045dc:	2202      	movs	r2, #2
 80045de:	4013      	ands	r3, r2
 80045e0:	d1f1      	bne.n	80045c6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2204      	movs	r2, #4
 80045e8:	4013      	ands	r3, r2
 80045ea:	d100      	bne.n	80045ee <HAL_RCC_OscConfig+0x2fe>
 80045ec:	e0c6      	b.n	800477c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ee:	231f      	movs	r3, #31
 80045f0:	18fb      	adds	r3, r7, r3
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80045f6:	4b09      	ldr	r3, [pc, #36]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2238      	movs	r2, #56	@ 0x38
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d11e      	bne.n	8004640 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004602:	4b06      	ldr	r3, [pc, #24]	@ (800461c <HAL_RCC_OscConfig+0x32c>)
 8004604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004606:	2202      	movs	r2, #2
 8004608:	4013      	ands	r3, r2
 800460a:	d100      	bne.n	800460e <HAL_RCC_OscConfig+0x31e>
 800460c:	e0b6      	b.n	800477c <HAL_RCC_OscConfig+0x48c>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d000      	beq.n	8004618 <HAL_RCC_OscConfig+0x328>
 8004616:	e0b1      	b.n	800477c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e171      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
 800461c:	40021000 	.word	0x40021000
 8004620:	fffeffff 	.word	0xfffeffff
 8004624:	fffbffff 	.word	0xfffbffff
 8004628:	ffff80ff 	.word	0xffff80ff
 800462c:	ffffc7ff 	.word	0xffffc7ff
 8004630:	00f42400 	.word	0x00f42400
 8004634:	20000068 	.word	0x20000068
 8004638:	2000006c 	.word	0x2000006c
 800463c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004640:	4bb1      	ldr	r3, [pc, #708]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004642:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004644:	2380      	movs	r3, #128	@ 0x80
 8004646:	055b      	lsls	r3, r3, #21
 8004648:	4013      	ands	r3, r2
 800464a:	d101      	bne.n	8004650 <HAL_RCC_OscConfig+0x360>
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <HAL_RCC_OscConfig+0x362>
 8004650:	2300      	movs	r3, #0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d011      	beq.n	800467a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004656:	4bac      	ldr	r3, [pc, #688]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004658:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800465a:	4bab      	ldr	r3, [pc, #684]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 800465c:	2180      	movs	r1, #128	@ 0x80
 800465e:	0549      	lsls	r1, r1, #21
 8004660:	430a      	orrs	r2, r1
 8004662:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004664:	4ba8      	ldr	r3, [pc, #672]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004666:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004668:	2380      	movs	r3, #128	@ 0x80
 800466a:	055b      	lsls	r3, r3, #21
 800466c:	4013      	ands	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004672:	231f      	movs	r3, #31
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	2201      	movs	r2, #1
 8004678:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800467a:	4ba4      	ldr	r3, [pc, #656]	@ (800490c <HAL_RCC_OscConfig+0x61c>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	2380      	movs	r3, #128	@ 0x80
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	4013      	ands	r3, r2
 8004684:	d11a      	bne.n	80046bc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004686:	4ba1      	ldr	r3, [pc, #644]	@ (800490c <HAL_RCC_OscConfig+0x61c>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4ba0      	ldr	r3, [pc, #640]	@ (800490c <HAL_RCC_OscConfig+0x61c>)
 800468c:	2180      	movs	r1, #128	@ 0x80
 800468e:	0049      	lsls	r1, r1, #1
 8004690:	430a      	orrs	r2, r1
 8004692:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004694:	f7fe fa30 	bl	8002af8 <HAL_GetTick>
 8004698:	0003      	movs	r3, r0
 800469a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469e:	f7fe fa2b 	bl	8002af8 <HAL_GetTick>
 80046a2:	0002      	movs	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e127      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046b0:	4b96      	ldr	r3, [pc, #600]	@ (800490c <HAL_RCC_OscConfig+0x61c>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	2380      	movs	r3, #128	@ 0x80
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	4013      	ands	r3, r2
 80046ba:	d0f0      	beq.n	800469e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d106      	bne.n	80046d2 <HAL_RCC_OscConfig+0x3e2>
 80046c4:	4b90      	ldr	r3, [pc, #576]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 80046c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046c8:	4b8f      	ldr	r3, [pc, #572]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 80046ca:	2101      	movs	r1, #1
 80046cc:	430a      	orrs	r2, r1
 80046ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046d0:	e01c      	b.n	800470c <HAL_RCC_OscConfig+0x41c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	d10c      	bne.n	80046f4 <HAL_RCC_OscConfig+0x404>
 80046da:	4b8b      	ldr	r3, [pc, #556]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 80046dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046de:	4b8a      	ldr	r3, [pc, #552]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 80046e0:	2104      	movs	r1, #4
 80046e2:	430a      	orrs	r2, r1
 80046e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046e6:	4b88      	ldr	r3, [pc, #544]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 80046e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046ea:	4b87      	ldr	r3, [pc, #540]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 80046ec:	2101      	movs	r1, #1
 80046ee:	430a      	orrs	r2, r1
 80046f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046f2:	e00b      	b.n	800470c <HAL_RCC_OscConfig+0x41c>
 80046f4:	4b84      	ldr	r3, [pc, #528]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 80046f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046f8:	4b83      	ldr	r3, [pc, #524]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 80046fa:	2101      	movs	r1, #1
 80046fc:	438a      	bics	r2, r1
 80046fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004700:	4b81      	ldr	r3, [pc, #516]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004702:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004704:	4b80      	ldr	r3, [pc, #512]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004706:	2104      	movs	r1, #4
 8004708:	438a      	bics	r2, r1
 800470a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d014      	beq.n	800473e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004714:	f7fe f9f0 	bl	8002af8 <HAL_GetTick>
 8004718:	0003      	movs	r3, r0
 800471a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800471c:	e009      	b.n	8004732 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471e:	f7fe f9eb 	bl	8002af8 <HAL_GetTick>
 8004722:	0002      	movs	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	4a79      	ldr	r2, [pc, #484]	@ (8004910 <HAL_RCC_OscConfig+0x620>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e0e6      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004732:	4b75      	ldr	r3, [pc, #468]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004736:	2202      	movs	r2, #2
 8004738:	4013      	ands	r3, r2
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x42e>
 800473c:	e013      	b.n	8004766 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473e:	f7fe f9db 	bl	8002af8 <HAL_GetTick>
 8004742:	0003      	movs	r3, r0
 8004744:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004746:	e009      	b.n	800475c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004748:	f7fe f9d6 	bl	8002af8 <HAL_GetTick>
 800474c:	0002      	movs	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	4a6f      	ldr	r2, [pc, #444]	@ (8004910 <HAL_RCC_OscConfig+0x620>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e0d1      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800475c:	4b6a      	ldr	r3, [pc, #424]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 800475e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004760:	2202      	movs	r2, #2
 8004762:	4013      	ands	r3, r2
 8004764:	d1f0      	bne.n	8004748 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004766:	231f      	movs	r3, #31
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d105      	bne.n	800477c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004770:	4b65      	ldr	r3, [pc, #404]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004772:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004774:	4b64      	ldr	r3, [pc, #400]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004776:	4967      	ldr	r1, [pc, #412]	@ (8004914 <HAL_RCC_OscConfig+0x624>)
 8004778:	400a      	ands	r2, r1
 800477a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d100      	bne.n	8004786 <HAL_RCC_OscConfig+0x496>
 8004784:	e0bb      	b.n	80048fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004786:	4b60      	ldr	r3, [pc, #384]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2238      	movs	r2, #56	@ 0x38
 800478c:	4013      	ands	r3, r2
 800478e:	2b10      	cmp	r3, #16
 8004790:	d100      	bne.n	8004794 <HAL_RCC_OscConfig+0x4a4>
 8004792:	e07b      	b.n	800488c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d156      	bne.n	800484a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479c:	4b5a      	ldr	r3, [pc, #360]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	4b59      	ldr	r3, [pc, #356]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 80047a2:	495d      	ldr	r1, [pc, #372]	@ (8004918 <HAL_RCC_OscConfig+0x628>)
 80047a4:	400a      	ands	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fe f9a6 	bl	8002af8 <HAL_GetTick>
 80047ac:	0003      	movs	r3, r0
 80047ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b2:	f7fe f9a1 	bl	8002af8 <HAL_GetTick>
 80047b6:	0002      	movs	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e09d      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047c4:	4b50      	ldr	r3, [pc, #320]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	2380      	movs	r3, #128	@ 0x80
 80047ca:	049b      	lsls	r3, r3, #18
 80047cc:	4013      	ands	r3, r2
 80047ce:	d1f0      	bne.n	80047b2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4a51      	ldr	r2, [pc, #324]	@ (800491c <HAL_RCC_OscConfig+0x62c>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	0019      	movs	r1, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1a      	ldr	r2, [r3, #32]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fc:	431a      	orrs	r2, r3
 80047fe:	4b42      	ldr	r3, [pc, #264]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004800:	430a      	orrs	r2, r1
 8004802:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004804:	4b40      	ldr	r3, [pc, #256]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	4b3f      	ldr	r3, [pc, #252]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 800480a:	2180      	movs	r1, #128	@ 0x80
 800480c:	0449      	lsls	r1, r1, #17
 800480e:	430a      	orrs	r2, r1
 8004810:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004812:	4b3d      	ldr	r3, [pc, #244]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	4b3c      	ldr	r3, [pc, #240]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004818:	2180      	movs	r1, #128	@ 0x80
 800481a:	0549      	lsls	r1, r1, #21
 800481c:	430a      	orrs	r2, r1
 800481e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004820:	f7fe f96a 	bl	8002af8 <HAL_GetTick>
 8004824:	0003      	movs	r3, r0
 8004826:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482a:	f7fe f965 	bl	8002af8 <HAL_GetTick>
 800482e:	0002      	movs	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e061      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800483c:	4b32      	ldr	r3, [pc, #200]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	2380      	movs	r3, #128	@ 0x80
 8004842:	049b      	lsls	r3, r3, #18
 8004844:	4013      	ands	r3, r2
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0x53a>
 8004848:	e059      	b.n	80048fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484a:	4b2f      	ldr	r3, [pc, #188]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b2e      	ldr	r3, [pc, #184]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004850:	4931      	ldr	r1, [pc, #196]	@ (8004918 <HAL_RCC_OscConfig+0x628>)
 8004852:	400a      	ands	r2, r1
 8004854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004856:	f7fe f94f 	bl	8002af8 <HAL_GetTick>
 800485a:	0003      	movs	r3, r0
 800485c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004860:	f7fe f94a 	bl	8002af8 <HAL_GetTick>
 8004864:	0002      	movs	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e046      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004872:	4b25      	ldr	r3, [pc, #148]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	2380      	movs	r3, #128	@ 0x80
 8004878:	049b      	lsls	r3, r3, #18
 800487a:	4013      	ands	r3, r2
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800487e:	4b22      	ldr	r3, [pc, #136]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	4b21      	ldr	r3, [pc, #132]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 8004884:	4926      	ldr	r1, [pc, #152]	@ (8004920 <HAL_RCC_OscConfig+0x630>)
 8004886:	400a      	ands	r2, r1
 8004888:	60da      	str	r2, [r3, #12]
 800488a:	e038      	b.n	80048fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e033      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004898:	4b1b      	ldr	r3, [pc, #108]	@ (8004908 <HAL_RCC_OscConfig+0x618>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2203      	movs	r2, #3
 80048a2:	401a      	ands	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d126      	bne.n	80048fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2270      	movs	r2, #112	@ 0x70
 80048b0:	401a      	ands	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d11f      	bne.n	80048fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	23fe      	movs	r3, #254	@ 0xfe
 80048be:	01db      	lsls	r3, r3, #7
 80048c0:	401a      	ands	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d116      	bne.n	80048fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	23f8      	movs	r3, #248	@ 0xf8
 80048d0:	039b      	lsls	r3, r3, #14
 80048d2:	401a      	ands	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d10e      	bne.n	80048fa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	23e0      	movs	r3, #224	@ 0xe0
 80048e0:	051b      	lsls	r3, r3, #20
 80048e2:	401a      	ands	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d106      	bne.n	80048fa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	0f5b      	lsrs	r3, r3, #29
 80048f0:	075a      	lsls	r2, r3, #29
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d001      	beq.n	80048fe <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	0018      	movs	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	b008      	add	sp, #32
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021000 	.word	0x40021000
 800490c:	40007000 	.word	0x40007000
 8004910:	00001388 	.word	0x00001388
 8004914:	efffffff 	.word	0xefffffff
 8004918:	feffffff 	.word	0xfeffffff
 800491c:	11c1808c 	.word	0x11c1808c
 8004920:	eefefffc 	.word	0xeefefffc

08004924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0e9      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004938:	4b76      	ldr	r3, [pc, #472]	@ (8004b14 <HAL_RCC_ClockConfig+0x1f0>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2207      	movs	r2, #7
 800493e:	4013      	ands	r3, r2
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d91e      	bls.n	8004984 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004946:	4b73      	ldr	r3, [pc, #460]	@ (8004b14 <HAL_RCC_ClockConfig+0x1f0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2207      	movs	r2, #7
 800494c:	4393      	bics	r3, r2
 800494e:	0019      	movs	r1, r3
 8004950:	4b70      	ldr	r3, [pc, #448]	@ (8004b14 <HAL_RCC_ClockConfig+0x1f0>)
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004958:	f7fe f8ce 	bl	8002af8 <HAL_GetTick>
 800495c:	0003      	movs	r3, r0
 800495e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004960:	e009      	b.n	8004976 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004962:	f7fe f8c9 	bl	8002af8 <HAL_GetTick>
 8004966:	0002      	movs	r2, r0
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	4a6a      	ldr	r2, [pc, #424]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e0ca      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004976:	4b67      	ldr	r3, [pc, #412]	@ (8004b14 <HAL_RCC_ClockConfig+0x1f0>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2207      	movs	r2, #7
 800497c:	4013      	ands	r3, r2
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d1ee      	bne.n	8004962 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2202      	movs	r2, #2
 800498a:	4013      	ands	r3, r2
 800498c:	d015      	beq.n	80049ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2204      	movs	r2, #4
 8004994:	4013      	ands	r3, r2
 8004996:	d006      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004998:	4b60      	ldr	r3, [pc, #384]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f8>)
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	4b5f      	ldr	r3, [pc, #380]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f8>)
 800499e:	21e0      	movs	r1, #224	@ 0xe0
 80049a0:	01c9      	lsls	r1, r1, #7
 80049a2:	430a      	orrs	r2, r1
 80049a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a6:	4b5d      	ldr	r3, [pc, #372]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f8>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	4a5d      	ldr	r2, [pc, #372]	@ (8004b20 <HAL_RCC_ClockConfig+0x1fc>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	0019      	movs	r1, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	4b59      	ldr	r3, [pc, #356]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f8>)
 80049b6:	430a      	orrs	r2, r1
 80049b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2201      	movs	r2, #1
 80049c0:	4013      	ands	r3, r2
 80049c2:	d057      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d107      	bne.n	80049dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049cc:	4b53      	ldr	r3, [pc, #332]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f8>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	2380      	movs	r3, #128	@ 0x80
 80049d2:	029b      	lsls	r3, r3, #10
 80049d4:	4013      	ands	r3, r2
 80049d6:	d12b      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e097      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d107      	bne.n	80049f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e4:	4b4d      	ldr	r3, [pc, #308]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f8>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	2380      	movs	r3, #128	@ 0x80
 80049ea:	049b      	lsls	r3, r3, #18
 80049ec:	4013      	ands	r3, r2
 80049ee:	d11f      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e08b      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d107      	bne.n	8004a0c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049fc:	4b47      	ldr	r3, [pc, #284]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f8>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	2380      	movs	r3, #128	@ 0x80
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4013      	ands	r3, r2
 8004a06:	d113      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e07f      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d106      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a14:	4b41      	ldr	r3, [pc, #260]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f8>)
 8004a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a18:	2202      	movs	r2, #2
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	d108      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e074      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a22:	4b3e      	ldr	r3, [pc, #248]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f8>)
 8004a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a26:	2202      	movs	r2, #2
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d101      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e06d      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a30:	4b3a      	ldr	r3, [pc, #232]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f8>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	2207      	movs	r2, #7
 8004a36:	4393      	bics	r3, r2
 8004a38:	0019      	movs	r1, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	4b37      	ldr	r3, [pc, #220]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f8>)
 8004a40:	430a      	orrs	r2, r1
 8004a42:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a44:	f7fe f858 	bl	8002af8 <HAL_GetTick>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4c:	e009      	b.n	8004a62 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4e:	f7fe f853 	bl	8002af8 <HAL_GetTick>
 8004a52:	0002      	movs	r2, r0
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	4a2f      	ldr	r2, [pc, #188]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e054      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	4b2e      	ldr	r3, [pc, #184]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f8>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2238      	movs	r2, #56	@ 0x38
 8004a68:	401a      	ands	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d1ec      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a74:	4b27      	ldr	r3, [pc, #156]	@ (8004b14 <HAL_RCC_ClockConfig+0x1f0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2207      	movs	r2, #7
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d21e      	bcs.n	8004ac0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a82:	4b24      	ldr	r3, [pc, #144]	@ (8004b14 <HAL_RCC_ClockConfig+0x1f0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2207      	movs	r2, #7
 8004a88:	4393      	bics	r3, r2
 8004a8a:	0019      	movs	r1, r3
 8004a8c:	4b21      	ldr	r3, [pc, #132]	@ (8004b14 <HAL_RCC_ClockConfig+0x1f0>)
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a94:	f7fe f830 	bl	8002af8 <HAL_GetTick>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a9c:	e009      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a9e:	f7fe f82b 	bl	8002af8 <HAL_GetTick>
 8004aa2:	0002      	movs	r2, r0
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e02c      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ab2:	4b18      	ldr	r3, [pc, #96]	@ (8004b14 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2207      	movs	r2, #7
 8004ab8:	4013      	ands	r3, r2
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d1ee      	bne.n	8004a9e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d009      	beq.n	8004ade <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004aca:	4b14      	ldr	r3, [pc, #80]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f8>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	4a15      	ldr	r2, [pc, #84]	@ (8004b24 <HAL_RCC_ClockConfig+0x200>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	4b10      	ldr	r3, [pc, #64]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f8>)
 8004ada:	430a      	orrs	r2, r1
 8004adc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004ade:	f000 f829 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 8004ae2:	0001      	movs	r1, r0
 8004ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f8>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	0a1b      	lsrs	r3, r3, #8
 8004aea:	220f      	movs	r2, #15
 8004aec:	401a      	ands	r2, r3
 8004aee:	4b0e      	ldr	r3, [pc, #56]	@ (8004b28 <HAL_RCC_ClockConfig+0x204>)
 8004af0:	0092      	lsls	r2, r2, #2
 8004af2:	58d3      	ldr	r3, [r2, r3]
 8004af4:	221f      	movs	r2, #31
 8004af6:	4013      	ands	r3, r2
 8004af8:	000a      	movs	r2, r1
 8004afa:	40da      	lsrs	r2, r3
 8004afc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b2c <HAL_RCC_ClockConfig+0x208>)
 8004afe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b00:	4b0b      	ldr	r3, [pc, #44]	@ (8004b30 <HAL_RCC_ClockConfig+0x20c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f7fd ff9b 	bl	8002a40 <HAL_InitTick>
 8004b0a:	0003      	movs	r3, r0
}
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b004      	add	sp, #16
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40022000 	.word	0x40022000
 8004b18:	00001388 	.word	0x00001388
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	fffff0ff 	.word	0xfffff0ff
 8004b24:	ffff8fff 	.word	0xffff8fff
 8004b28:	080074b4 	.word	0x080074b4
 8004b2c:	20000068 	.word	0x20000068
 8004b30:	2000006c 	.word	0x2000006c

08004b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	2238      	movs	r2, #56	@ 0x38
 8004b40:	4013      	ands	r3, r2
 8004b42:	d10f      	bne.n	8004b64 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004b44:	4b39      	ldr	r3, [pc, #228]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	0adb      	lsrs	r3, r3, #11
 8004b4a:	2207      	movs	r2, #7
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2201      	movs	r2, #1
 8004b50:	409a      	lsls	r2, r3
 8004b52:	0013      	movs	r3, r2
 8004b54:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004b56:	6839      	ldr	r1, [r7, #0]
 8004b58:	4835      	ldr	r0, [pc, #212]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b5a:	f7fb fad3 	bl	8000104 <__udivsi3>
 8004b5e:	0003      	movs	r3, r0
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	e05d      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b64:	4b31      	ldr	r3, [pc, #196]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2238      	movs	r2, #56	@ 0x38
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d102      	bne.n	8004b76 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b70:	4b2f      	ldr	r3, [pc, #188]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	e054      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b76:	4b2d      	ldr	r3, [pc, #180]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2238      	movs	r2, #56	@ 0x38
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b10      	cmp	r3, #16
 8004b80:	d138      	bne.n	8004bf4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004b82:	4b2a      	ldr	r3, [pc, #168]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	2203      	movs	r2, #3
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b8c:	4b27      	ldr	r3, [pc, #156]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	2207      	movs	r2, #7
 8004b94:	4013      	ands	r3, r2
 8004b96:	3301      	adds	r3, #1
 8004b98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d10d      	bne.n	8004bbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	4823      	ldr	r0, [pc, #140]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ba4:	f7fb faae 	bl	8000104 <__udivsi3>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	0019      	movs	r1, r3
 8004bac:	4b1f      	ldr	r3, [pc, #124]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	0a1b      	lsrs	r3, r3, #8
 8004bb2:	227f      	movs	r2, #127	@ 0x7f
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	434b      	muls	r3, r1
 8004bb8:	617b      	str	r3, [r7, #20]
        break;
 8004bba:	e00d      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004bbc:	68b9      	ldr	r1, [r7, #8]
 8004bbe:	481c      	ldr	r0, [pc, #112]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004bc0:	f7fb faa0 	bl	8000104 <__udivsi3>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	0019      	movs	r1, r3
 8004bc8:	4b18      	ldr	r3, [pc, #96]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	227f      	movs	r2, #127	@ 0x7f
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	434b      	muls	r3, r1
 8004bd4:	617b      	str	r3, [r7, #20]
        break;
 8004bd6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004bd8:	4b14      	ldr	r3, [pc, #80]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	0f5b      	lsrs	r3, r3, #29
 8004bde:	2207      	movs	r2, #7
 8004be0:	4013      	ands	r3, r2
 8004be2:	3301      	adds	r3, #1
 8004be4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	6978      	ldr	r0, [r7, #20]
 8004bea:	f7fb fa8b 	bl	8000104 <__udivsi3>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	e015      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2238      	movs	r2, #56	@ 0x38
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d103      	bne.n	8004c08 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004c00:	2380      	movs	r3, #128	@ 0x80
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	e00b      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c08:	4b08      	ldr	r3, [pc, #32]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2238      	movs	r2, #56	@ 0x38
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b18      	cmp	r3, #24
 8004c12:	d103      	bne.n	8004c1c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004c14:	23fa      	movs	r3, #250	@ 0xfa
 8004c16:	01db      	lsls	r3, r3, #7
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	e001      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c20:	693b      	ldr	r3, [r7, #16]
}
 8004c22:	0018      	movs	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b006      	add	sp, #24
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	46c0      	nop			@ (mov r8, r8)
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	00f42400 	.word	0x00f42400

08004c34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c38:	4b02      	ldr	r3, [pc, #8]	@ (8004c44 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
}
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	20000068 	.word	0x20000068

08004c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c48:	b5b0      	push	{r4, r5, r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004c4c:	f7ff fff2 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8004c50:	0004      	movs	r4, r0
 8004c52:	f7ff fb41 	bl	80042d8 <LL_RCC_GetAPB1Prescaler>
 8004c56:	0003      	movs	r3, r0
 8004c58:	0b1a      	lsrs	r2, r3, #12
 8004c5a:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c5c:	0092      	lsls	r2, r2, #2
 8004c5e:	58d3      	ldr	r3, [r2, r3]
 8004c60:	221f      	movs	r2, #31
 8004c62:	4013      	ands	r3, r2
 8004c64:	40dc      	lsrs	r4, r3
 8004c66:	0023      	movs	r3, r4
}
 8004c68:	0018      	movs	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c6e:	46c0      	nop			@ (mov r8, r8)
 8004c70:	080074f4 	.word	0x080074f4

08004c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004c7c:	2313      	movs	r3, #19
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c84:	2312      	movs	r3, #18
 8004c86:	18fb      	adds	r3, r7, r3
 8004c88:	2200      	movs	r2, #0
 8004c8a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	2380      	movs	r3, #128	@ 0x80
 8004c92:	029b      	lsls	r3, r3, #10
 8004c94:	4013      	ands	r3, r2
 8004c96:	d100      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004c98:	e0a3      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c9a:	2011      	movs	r0, #17
 8004c9c:	183b      	adds	r3, r7, r0
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ca2:	4ba5      	ldr	r3, [pc, #660]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ca4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ca6:	2380      	movs	r3, #128	@ 0x80
 8004ca8:	055b      	lsls	r3, r3, #21
 8004caa:	4013      	ands	r3, r2
 8004cac:	d110      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cae:	4ba2      	ldr	r3, [pc, #648]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cb2:	4ba1      	ldr	r3, [pc, #644]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cb4:	2180      	movs	r1, #128	@ 0x80
 8004cb6:	0549      	lsls	r1, r1, #21
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004cbc:	4b9e      	ldr	r3, [pc, #632]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cc0:	2380      	movs	r3, #128	@ 0x80
 8004cc2:	055b      	lsls	r3, r3, #21
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cca:	183b      	adds	r3, r7, r0
 8004ccc:	2201      	movs	r2, #1
 8004cce:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cd0:	4b9a      	ldr	r3, [pc, #616]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	4b99      	ldr	r3, [pc, #612]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004cd6:	2180      	movs	r1, #128	@ 0x80
 8004cd8:	0049      	lsls	r1, r1, #1
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cde:	f7fd ff0b 	bl	8002af8 <HAL_GetTick>
 8004ce2:	0003      	movs	r3, r0
 8004ce4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ce6:	e00b      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce8:	f7fd ff06 	bl	8002af8 <HAL_GetTick>
 8004cec:	0002      	movs	r2, r0
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d904      	bls.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004cf6:	2313      	movs	r3, #19
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	701a      	strb	r2, [r3, #0]
        break;
 8004cfe:	e005      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d00:	4b8e      	ldr	r3, [pc, #568]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	2380      	movs	r3, #128	@ 0x80
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	4013      	ands	r3, r2
 8004d0a:	d0ed      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004d0c:	2313      	movs	r3, #19
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d154      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d16:	4b88      	ldr	r3, [pc, #544]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d1a:	23c0      	movs	r3, #192	@ 0xc0
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4013      	ands	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d019      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d014      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d32:	4b81      	ldr	r3, [pc, #516]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d36:	4a82      	ldr	r2, [pc, #520]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d3c:	4b7e      	ldr	r3, [pc, #504]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d40:	4b7d      	ldr	r3, [pc, #500]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d42:	2180      	movs	r1, #128	@ 0x80
 8004d44:	0249      	lsls	r1, r1, #9
 8004d46:	430a      	orrs	r2, r1
 8004d48:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d50:	497c      	ldr	r1, [pc, #496]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004d52:	400a      	ands	r2, r1
 8004d54:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d56:	4b78      	ldr	r3, [pc, #480]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	4013      	ands	r3, r2
 8004d62:	d016      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fd fec8 	bl	8002af8 <HAL_GetTick>
 8004d68:	0003      	movs	r3, r0
 8004d6a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d6c:	e00c      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6e:	f7fd fec3 	bl	8002af8 <HAL_GetTick>
 8004d72:	0002      	movs	r2, r0
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	4a73      	ldr	r2, [pc, #460]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d904      	bls.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004d7e:	2313      	movs	r3, #19
 8004d80:	18fb      	adds	r3, r7, r3
 8004d82:	2203      	movs	r2, #3
 8004d84:	701a      	strb	r2, [r3, #0]
            break;
 8004d86:	e004      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d88:	4b6b      	ldr	r3, [pc, #428]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d0ed      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004d92:	2313      	movs	r3, #19
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10a      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d9c:	4b66      	ldr	r3, [pc, #408]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da0:	4a67      	ldr	r2, [pc, #412]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	0019      	movs	r1, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004daa:	4b63      	ldr	r3, [pc, #396]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dac:	430a      	orrs	r2, r1
 8004dae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004db0:	e00c      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004db2:	2312      	movs	r3, #18
 8004db4:	18fb      	adds	r3, r7, r3
 8004db6:	2213      	movs	r2, #19
 8004db8:	18ba      	adds	r2, r7, r2
 8004dba:	7812      	ldrb	r2, [r2, #0]
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	e005      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc0:	2312      	movs	r3, #18
 8004dc2:	18fb      	adds	r3, r7, r3
 8004dc4:	2213      	movs	r2, #19
 8004dc6:	18ba      	adds	r2, r7, r2
 8004dc8:	7812      	ldrb	r2, [r2, #0]
 8004dca:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dcc:	2311      	movs	r3, #17
 8004dce:	18fb      	adds	r3, r7, r3
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d105      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd6:	4b58      	ldr	r3, [pc, #352]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dda:	4b57      	ldr	r3, [pc, #348]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ddc:	495b      	ldr	r1, [pc, #364]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004dde:	400a      	ands	r2, r1
 8004de0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2201      	movs	r2, #1
 8004de8:	4013      	ands	r3, r2
 8004dea:	d009      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dec:	4b52      	ldr	r3, [pc, #328]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df0:	2203      	movs	r2, #3
 8004df2:	4393      	bics	r3, r2
 8004df4:	0019      	movs	r1, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2210      	movs	r2, #16
 8004e06:	4013      	ands	r3, r2
 8004e08:	d009      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0e:	4a50      	ldr	r2, [pc, #320]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	0019      	movs	r1, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	4b47      	ldr	r3, [pc, #284]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	2380      	movs	r3, #128	@ 0x80
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4013      	ands	r3, r2
 8004e28:	d009      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e2a:	4b43      	ldr	r3, [pc, #268]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e2e:	4a49      	ldr	r2, [pc, #292]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	0019      	movs	r1, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	695a      	ldr	r2, [r3, #20]
 8004e38:	4b3f      	ldr	r3, [pc, #252]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	2380      	movs	r3, #128	@ 0x80
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	4013      	ands	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e4e:	4a42      	ldr	r2, [pc, #264]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	0019      	movs	r1, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699a      	ldr	r2, [r3, #24]
 8004e58:	4b37      	ldr	r3, [pc, #220]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2220      	movs	r2, #32
 8004e64:	4013      	ands	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e68:	4b33      	ldr	r3, [pc, #204]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e6c:	4a3b      	ldr	r2, [pc, #236]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	0019      	movs	r1, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	4b30      	ldr	r3, [pc, #192]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	2380      	movs	r3, #128	@ 0x80
 8004e82:	01db      	lsls	r3, r3, #7
 8004e84:	4013      	ands	r3, r2
 8004e86:	d015      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e88:	4b2b      	ldr	r3, [pc, #172]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	0899      	lsrs	r1, r3, #2
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	4b28      	ldr	r3, [pc, #160]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e96:	430a      	orrs	r2, r1
 8004e98:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69da      	ldr	r2, [r3, #28]
 8004e9e:	2380      	movs	r3, #128	@ 0x80
 8004ea0:	05db      	lsls	r3, r3, #23
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d106      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ea6:	4b24      	ldr	r3, [pc, #144]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	4b23      	ldr	r3, [pc, #140]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004eac:	2180      	movs	r1, #128	@ 0x80
 8004eae:	0249      	lsls	r1, r1, #9
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	2380      	movs	r3, #128	@ 0x80
 8004eba:	039b      	lsls	r3, r3, #14
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d016      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec4:	4a26      	ldr	r2, [pc, #152]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	0019      	movs	r1, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1a      	ldr	r2, [r3, #32]
 8004ece:	4b1a      	ldr	r3, [pc, #104]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1a      	ldr	r2, [r3, #32]
 8004ed8:	2380      	movs	r3, #128	@ 0x80
 8004eda:	03db      	lsls	r3, r3, #15
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d106      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ee0:	4b15      	ldr	r3, [pc, #84]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	4b14      	ldr	r3, [pc, #80]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ee6:	2180      	movs	r1, #128	@ 0x80
 8004ee8:	0449      	lsls	r1, r1, #17
 8004eea:	430a      	orrs	r2, r1
 8004eec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	2380      	movs	r3, #128	@ 0x80
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d016      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004efa:	4b0f      	ldr	r3, [pc, #60]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004efe:	4a19      	ldr	r2, [pc, #100]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	0019      	movs	r1, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	4b0b      	ldr	r3, [pc, #44]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	2380      	movs	r3, #128	@ 0x80
 8004f14:	01db      	lsls	r3, r3, #7
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d106      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f1a:	4b07      	ldr	r3, [pc, #28]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	4b06      	ldr	r3, [pc, #24]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f20:	2180      	movs	r1, #128	@ 0x80
 8004f22:	0249      	lsls	r1, r1, #9
 8004f24:	430a      	orrs	r2, r1
 8004f26:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004f28:	2312      	movs	r3, #18
 8004f2a:	18fb      	adds	r3, r7, r3
 8004f2c:	781b      	ldrb	r3, [r3, #0]
}
 8004f2e:	0018      	movs	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b006      	add	sp, #24
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	46c0      	nop			@ (mov r8, r8)
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40007000 	.word	0x40007000
 8004f40:	fffffcff 	.word	0xfffffcff
 8004f44:	fffeffff 	.word	0xfffeffff
 8004f48:	00001388 	.word	0x00001388
 8004f4c:	efffffff 	.word	0xefffffff
 8004f50:	fffff3ff 	.word	0xfffff3ff
 8004f54:	fff3ffff 	.word	0xfff3ffff
 8004f58:	ffcfffff 	.word	0xffcfffff
 8004f5c:	ffffcfff 	.word	0xffffcfff
 8004f60:	ffbfffff 	.word	0xffbfffff
 8004f64:	ffff3fff 	.word	0xffff3fff

08004f68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	2380      	movs	r3, #128	@ 0x80
 8004f78:	029b      	lsls	r3, r3, #10
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d136      	bne.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004f7e:	4bcd      	ldr	r3, [pc, #820]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004f80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f82:	23c0      	movs	r3, #192	@ 0xc0
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4013      	ands	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004f8a:	4bca      	ldr	r3, [pc, #808]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f8e:	2202      	movs	r2, #2
 8004f90:	4013      	ands	r3, r2
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d108      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	2380      	movs	r3, #128	@ 0x80
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d103      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8004fa0:	2380      	movs	r3, #128	@ 0x80
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e26b      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004fa8:	4bc2      	ldr	r3, [pc, #776]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fac:	2202      	movs	r2, #2
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d108      	bne.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	2380      	movs	r3, #128	@ 0x80
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d103      	bne.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8004fbe:	23fa      	movs	r3, #250	@ 0xfa
 8004fc0:	01db      	lsls	r3, r3, #7
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e25c      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004fc6:	4bbb      	ldr	r3, [pc, #748]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	2380      	movs	r3, #128	@ 0x80
 8004fcc:	029b      	lsls	r3, r3, #10
 8004fce:	401a      	ands	r2, r3
 8004fd0:	2380      	movs	r3, #128	@ 0x80
 8004fd2:	029b      	lsls	r3, r3, #10
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d000      	beq.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8004fd8:	e252      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	23c0      	movs	r3, #192	@ 0xc0
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d000      	beq.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8004fe4:	e24c      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 8004fe6:	4bb4      	ldr	r3, [pc, #720]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	e249      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8004fec:	4bb1      	ldr	r3, [pc, #708]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2203      	movs	r2, #3
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d102      	bne.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8004ff8:	4bb0      	ldr	r3, [pc, #704]	@ (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	e00a      	b.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8004ffe:	4bad      	ldr	r3, [pc, #692]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	2203      	movs	r2, #3
 8005004:	4013      	ands	r3, r2
 8005006:	2b03      	cmp	r3, #3
 8005008:	d102      	bne.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 800500a:	4bac      	ldr	r3, [pc, #688]	@ (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	e001      	b.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005014:	4ba7      	ldr	r3, [pc, #668]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	091b      	lsrs	r3, r3, #4
 800501a:	2207      	movs	r2, #7
 800501c:	4013      	ands	r3, r2
 800501e:	3301      	adds	r3, #1
 8005020:	0019      	movs	r1, r3
 8005022:	6938      	ldr	r0, [r7, #16]
 8005024:	f7fb f86e 	bl	8000104 <__udivsi3>
 8005028:	0003      	movs	r3, r0
 800502a:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	2380      	movs	r3, #128	@ 0x80
 8005030:	039b      	lsls	r3, r3, #14
 8005032:	429a      	cmp	r2, r3
 8005034:	d100      	bne.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8005036:	e1e3      	b.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	2380      	movs	r3, #128	@ 0x80
 800503c:	039b      	lsls	r3, r3, #14
 800503e:	429a      	cmp	r2, r3
 8005040:	d900      	bls.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005042:	e20c      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	2380      	movs	r3, #128	@ 0x80
 8005048:	01db      	lsls	r3, r3, #7
 800504a:	429a      	cmp	r2, r3
 800504c:	d100      	bne.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800504e:	e0a5      	b.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	2380      	movs	r3, #128	@ 0x80
 8005054:	01db      	lsls	r3, r3, #7
 8005056:	429a      	cmp	r2, r3
 8005058:	d900      	bls.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800505a:	e200      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	2380      	movs	r3, #128	@ 0x80
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	429a      	cmp	r2, r3
 8005064:	d100      	bne.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005066:	e0fc      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	2380      	movs	r3, #128	@ 0x80
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	429a      	cmp	r2, r3
 8005070:	d900      	bls.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8005072:	e1f4      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	2380      	movs	r3, #128	@ 0x80
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	429a      	cmp	r2, r3
 800507c:	d100      	bne.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 800507e:	e181      	b.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	2380      	movs	r3, #128	@ 0x80
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	429a      	cmp	r2, r3
 8005088:	d900      	bls.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800508a:	e1e8      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	2380      	movs	r3, #128	@ 0x80
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	429a      	cmp	r2, r3
 8005094:	d100      	bne.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8005096:	e135      	b.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	2380      	movs	r3, #128	@ 0x80
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	429a      	cmp	r2, r3
 80050a0:	d900      	bls.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80050a2:	e1dc      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d100      	bne.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80050aa:	e0af      	b.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d900      	bls.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80050b2:	e1d4      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d003      	beq.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b10      	cmp	r3, #16
 80050be:	d033      	beq.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 80050c0:	e1cd      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80050c2:	4b7c      	ldr	r3, [pc, #496]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80050c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c6:	2203      	movs	r2, #3
 80050c8:	4013      	ands	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d104      	bne.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 80050d2:	f7ff fdb9 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 80050d6:	0003      	movs	r3, r0
 80050d8:	617b      	str	r3, [r7, #20]
        break;
 80050da:	e1c2      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d104      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 80050e2:	f7ff fd27 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 80050e6:	0003      	movs	r3, r0
 80050e8:	617b      	str	r3, [r7, #20]
        break;
 80050ea:	e1ba      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80050ec:	4b71      	ldr	r3, [pc, #452]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	2380      	movs	r3, #128	@ 0x80
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	401a      	ands	r2, r3
 80050f6:	2380      	movs	r3, #128	@ 0x80
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d105      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d102      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 8005104:	4b6d      	ldr	r3, [pc, #436]	@ (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005106:	617b      	str	r3, [r7, #20]
        break;
 8005108:	e1ab      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800510a:	4b6a      	ldr	r3, [pc, #424]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800510c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800510e:	2202      	movs	r2, #2
 8005110:	4013      	ands	r3, r2
 8005112:	2b02      	cmp	r3, #2
 8005114:	d000      	beq.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8005116:	e1a4      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b03      	cmp	r3, #3
 800511c:	d000      	beq.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 800511e:	e1a0      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 8005120:	2380      	movs	r3, #128	@ 0x80
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	617b      	str	r3, [r7, #20]
        break;
 8005126:	e19c      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005128:	4b62      	ldr	r3, [pc, #392]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800512a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800512c:	23c0      	movs	r3, #192	@ 0xc0
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	4013      	ands	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d104      	bne.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800513a:	f7ff fd85 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 800513e:	0003      	movs	r3, r0
 8005140:	617b      	str	r3, [r7, #20]
        break;
 8005142:	e190      	b.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	2380      	movs	r3, #128	@ 0x80
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	429a      	cmp	r2, r3
 800514c:	d104      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800514e:	f7ff fcf1 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 8005152:	0003      	movs	r3, r0
 8005154:	617b      	str	r3, [r7, #20]
        break;
 8005156:	e186      	b.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005158:	4b56      	ldr	r3, [pc, #344]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	2380      	movs	r3, #128	@ 0x80
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	401a      	ands	r2, r3
 8005162:	2380      	movs	r3, #128	@ 0x80
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	429a      	cmp	r2, r3
 8005168:	d107      	bne.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	2380      	movs	r3, #128	@ 0x80
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	429a      	cmp	r2, r3
 8005172:	d102      	bne.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 8005174:	4b51      	ldr	r3, [pc, #324]	@ (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005176:	617b      	str	r3, [r7, #20]
        break;
 8005178:	e175      	b.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800517a:	4b4e      	ldr	r3, [pc, #312]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800517c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517e:	2202      	movs	r2, #2
 8005180:	4013      	ands	r3, r2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d000      	beq.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 8005186:	e16e      	b.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	23c0      	movs	r3, #192	@ 0xc0
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	429a      	cmp	r2, r3
 8005190:	d000      	beq.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005192:	e168      	b.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 8005194:	2380      	movs	r3, #128	@ 0x80
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	617b      	str	r3, [r7, #20]
        break;
 800519a:	e164      	b.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800519c:	4b45      	ldr	r3, [pc, #276]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800519e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a0:	0f9b      	lsrs	r3, r3, #30
 80051a2:	079b      	lsls	r3, r3, #30
 80051a4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d104      	bne.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 80051ac:	f7ff fcc2 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 80051b0:	0003      	movs	r3, r0
 80051b2:	617b      	str	r3, [r7, #20]
        break;
 80051b4:	e159      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	2380      	movs	r3, #128	@ 0x80
 80051ba:	061b      	lsls	r3, r3, #24
 80051bc:	429a      	cmp	r2, r3
 80051be:	d102      	bne.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 80051c0:	4b3e      	ldr	r3, [pc, #248]	@ (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80051c2:	617b      	str	r3, [r7, #20]
        break;
 80051c4:	e151      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	2380      	movs	r3, #128	@ 0x80
 80051ca:	05db      	lsls	r3, r3, #23
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d000      	beq.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80051d0:	e14b      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80051d2:	4b38      	ldr	r3, [pc, #224]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	2380      	movs	r3, #128	@ 0x80
 80051d8:	025b      	lsls	r3, r3, #9
 80051da:	4013      	ands	r3, r2
 80051dc:	d100      	bne.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 80051de:	e144      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80051e0:	4b34      	ldr	r3, [pc, #208]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	0a1b      	lsrs	r3, r3, #8
 80051e6:	227f      	movs	r2, #127	@ 0x7f
 80051e8:	4013      	ands	r3, r2
 80051ea:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	435a      	muls	r2, r3
 80051f2:	4b30      	ldr	r3, [pc, #192]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	0c5b      	lsrs	r3, r3, #17
 80051f8:	211f      	movs	r1, #31
 80051fa:	400b      	ands	r3, r1
 80051fc:	3301      	adds	r3, #1
 80051fe:	0019      	movs	r1, r3
 8005200:	0010      	movs	r0, r2
 8005202:	f7fa ff7f 	bl	8000104 <__udivsi3>
 8005206:	0003      	movs	r3, r0
 8005208:	617b      	str	r3, [r7, #20]
        break;
 800520a:	e12e      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800520c:	4b29      	ldr	r3, [pc, #164]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800520e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005210:	23c0      	movs	r3, #192	@ 0xc0
 8005212:	019b      	lsls	r3, r3, #6
 8005214:	4013      	ands	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d104      	bne.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 800521e:	f7ff fd13 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 8005222:	0003      	movs	r3, r0
 8005224:	617b      	str	r3, [r7, #20]
        break;
 8005226:	e122      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	2380      	movs	r3, #128	@ 0x80
 800522c:	015b      	lsls	r3, r3, #5
 800522e:	429a      	cmp	r2, r3
 8005230:	d104      	bne.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005232:	f7ff fc7f 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 8005236:	0003      	movs	r3, r0
 8005238:	617b      	str	r3, [r7, #20]
        break;
 800523a:	e118      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800523c:	4b1d      	ldr	r3, [pc, #116]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	2380      	movs	r3, #128	@ 0x80
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	401a      	ands	r2, r3
 8005246:	2380      	movs	r3, #128	@ 0x80
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	429a      	cmp	r2, r3
 800524c:	d000      	beq.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800524e:	e10e      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	2380      	movs	r3, #128	@ 0x80
 8005254:	019b      	lsls	r3, r3, #6
 8005256:	429a      	cmp	r2, r3
 8005258:	d000      	beq.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800525a:	e108      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 800525c:	4b17      	ldr	r3, [pc, #92]	@ (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800525e:	617b      	str	r3, [r7, #20]
        break;
 8005260:	e105      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8005262:	4b14      	ldr	r3, [pc, #80]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005264:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005266:	23c0      	movs	r3, #192	@ 0xc0
 8005268:	021b      	lsls	r3, r3, #8
 800526a:	4013      	ands	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	2380      	movs	r3, #128	@ 0x80
 8005272:	01db      	lsls	r3, r3, #7
 8005274:	429a      	cmp	r2, r3
 8005276:	d123      	bne.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005278:	4b0e      	ldr	r3, [pc, #56]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	2380      	movs	r3, #128	@ 0x80
 800527e:	025b      	lsls	r3, r3, #9
 8005280:	4013      	ands	r3, r2
 8005282:	d100      	bne.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005284:	e0f5      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005286:	4b0b      	ldr	r3, [pc, #44]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	0a1b      	lsrs	r3, r3, #8
 800528c:	227f      	movs	r2, #127	@ 0x7f
 800528e:	4013      	ands	r3, r2
 8005290:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	435a      	muls	r2, r3
 8005298:	4b06      	ldr	r3, [pc, #24]	@ (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	0c5b      	lsrs	r3, r3, #17
 800529e:	211f      	movs	r1, #31
 80052a0:	400b      	ands	r3, r1
 80052a2:	3301      	adds	r3, #1
 80052a4:	0019      	movs	r1, r3
 80052a6:	0010      	movs	r0, r2
 80052a8:	f7fa ff2c 	bl	8000104 <__udivsi3>
 80052ac:	0003      	movs	r3, r0
 80052ae:	617b      	str	r3, [r7, #20]
        break;
 80052b0:	e0df      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80052b2:	46c0      	nop			@ (mov r8, r8)
 80052b4:	40021000 	.word	0x40021000
 80052b8:	0007a120 	.word	0x0007a120
 80052bc:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d104      	bne.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 80052c6:	f7ff fc35 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 80052ca:	0003      	movs	r3, r0
 80052cc:	617b      	str	r3, [r7, #20]
        break;
 80052ce:	e0d0      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 80052d0:	4b6e      	ldr	r3, [pc, #440]	@ (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	2380      	movs	r3, #128	@ 0x80
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	401a      	ands	r2, r3
 80052da:	2380      	movs	r3, #128	@ 0x80
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	429a      	cmp	r2, r3
 80052e0:	d107      	bne.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	2380      	movs	r3, #128	@ 0x80
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d102      	bne.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 80052ec:	4b68      	ldr	r3, [pc, #416]	@ (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80052ee:	617b      	str	r3, [r7, #20]
        break;
 80052f0:	e0bf      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	23c0      	movs	r3, #192	@ 0xc0
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d000      	beq.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80052fc:	e0b9      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 80052fe:	4b65      	ldr	r3, [pc, #404]	@ (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8005300:	617b      	str	r3, [r7, #20]
        break;
 8005302:	e0b6      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005304:	4b61      	ldr	r3, [pc, #388]	@ (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005306:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005308:	23c0      	movs	r3, #192	@ 0xc0
 800530a:	031b      	lsls	r3, r3, #12
 800530c:	4013      	ands	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d104      	bne.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005316:	f7ff fc97 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 800531a:	0003      	movs	r3, r0
 800531c:	617b      	str	r3, [r7, #20]
        break;
 800531e:	e0aa      	b.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005320:	4b5a      	ldr	r3, [pc, #360]	@ (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005324:	2202      	movs	r2, #2
 8005326:	4013      	ands	r3, r2
 8005328:	2b02      	cmp	r3, #2
 800532a:	d108      	bne.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	2380      	movs	r3, #128	@ 0x80
 8005330:	02db      	lsls	r3, r3, #11
 8005332:	429a      	cmp	r2, r3
 8005334:	d103      	bne.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 8005336:	23fa      	movs	r3, #250	@ 0xfa
 8005338:	01db      	lsls	r3, r3, #7
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	e021      	b.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800533e:	4b53      	ldr	r3, [pc, #332]	@ (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	2380      	movs	r3, #128	@ 0x80
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	401a      	ands	r2, r3
 8005348:	2380      	movs	r3, #128	@ 0x80
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	429a      	cmp	r2, r3
 800534e:	d107      	bne.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	2380      	movs	r3, #128	@ 0x80
 8005354:	031b      	lsls	r3, r3, #12
 8005356:	429a      	cmp	r2, r3
 8005358:	d102      	bne.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 800535a:	4b4d      	ldr	r3, [pc, #308]	@ (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	e010      	b.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005360:	4b4a      	ldr	r3, [pc, #296]	@ (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005364:	2202      	movs	r2, #2
 8005366:	4013      	ands	r3, r2
 8005368:	2b02      	cmp	r3, #2
 800536a:	d000      	beq.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 800536c:	e083      	b.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	23c0      	movs	r3, #192	@ 0xc0
 8005372:	031b      	lsls	r3, r3, #12
 8005374:	429a      	cmp	r2, r3
 8005376:	d000      	beq.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8005378:	e07d      	b.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 800537a:	2380      	movs	r3, #128	@ 0x80
 800537c:	021b      	lsls	r3, r3, #8
 800537e:	617b      	str	r3, [r7, #20]
        break;
 8005380:	e079      	b.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8005382:	e078      	b.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005384:	4b41      	ldr	r3, [pc, #260]	@ (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005386:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005388:	23c0      	movs	r3, #192	@ 0xc0
 800538a:	039b      	lsls	r3, r3, #14
 800538c:	4013      	ands	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d104      	bne.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005396:	f7ff fc57 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 800539a:	0003      	movs	r3, r0
 800539c:	617b      	str	r3, [r7, #20]
        break;
 800539e:	e06c      	b.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80053a0:	4b3a      	ldr	r3, [pc, #232]	@ (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80053a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053a4:	2202      	movs	r2, #2
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d108      	bne.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	2380      	movs	r3, #128	@ 0x80
 80053b0:	035b      	lsls	r3, r3, #13
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d103      	bne.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 80053b6:	23fa      	movs	r3, #250	@ 0xfa
 80053b8:	01db      	lsls	r3, r3, #7
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	e01f      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80053be:	4b33      	ldr	r3, [pc, #204]	@ (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	2380      	movs	r3, #128	@ 0x80
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	401a      	ands	r2, r3
 80053c8:	2380      	movs	r3, #128	@ 0x80
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d107      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	2380      	movs	r3, #128	@ 0x80
 80053d4:	039b      	lsls	r3, r3, #14
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d102      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 80053da:	4b2d      	ldr	r3, [pc, #180]	@ (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	e00e      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80053e0:	4b2a      	ldr	r3, [pc, #168]	@ (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80053e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e4:	2202      	movs	r2, #2
 80053e6:	4013      	ands	r3, r2
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d146      	bne.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	23c0      	movs	r3, #192	@ 0xc0
 80053f0:	039b      	lsls	r3, r3, #14
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d141      	bne.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 80053f6:	2380      	movs	r3, #128	@ 0x80
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	617b      	str	r3, [r7, #20]
        break;
 80053fc:	e03d      	b.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80053fe:	e03c      	b.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8005400:	4b22      	ldr	r3, [pc, #136]	@ (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005402:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005404:	2380      	movs	r3, #128	@ 0x80
 8005406:	03db      	lsls	r3, r3, #15
 8005408:	4013      	ands	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	2380      	movs	r3, #128	@ 0x80
 8005410:	03db      	lsls	r3, r3, #15
 8005412:	429a      	cmp	r2, r3
 8005414:	d11b      	bne.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8005416:	4b1d      	ldr	r3, [pc, #116]	@ (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	2380      	movs	r3, #128	@ 0x80
 800541c:	045b      	lsls	r3, r3, #17
 800541e:	4013      	ands	r3, r2
 8005420:	d02d      	beq.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005422:	4b1a      	ldr	r3, [pc, #104]	@ (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	0a1b      	lsrs	r3, r3, #8
 8005428:	227f      	movs	r2, #127	@ 0x7f
 800542a:	4013      	ands	r3, r2
 800542c:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	435a      	muls	r2, r3
 8005434:	4b15      	ldr	r3, [pc, #84]	@ (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	0e5b      	lsrs	r3, r3, #25
 800543a:	2107      	movs	r1, #7
 800543c:	400b      	ands	r3, r1
 800543e:	3301      	adds	r3, #1
 8005440:	0019      	movs	r1, r3
 8005442:	0010      	movs	r0, r2
 8005444:	f7fa fe5e 	bl	8000104 <__udivsi3>
 8005448:	0003      	movs	r3, r0
 800544a:	617b      	str	r3, [r7, #20]
        break;
 800544c:	e017      	b.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d114      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005454:	f7ff fbf8 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 8005458:	0003      	movs	r3, r0
 800545a:	617b      	str	r3, [r7, #20]
        break;
 800545c:	e00f      	b.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 800545e:	46c0      	nop			@ (mov r8, r8)
 8005460:	e00e      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8005462:	46c0      	nop			@ (mov r8, r8)
 8005464:	e00c      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8005466:	46c0      	nop			@ (mov r8, r8)
 8005468:	e00a      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	e008      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	e006      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8005472:	46c0      	nop			@ (mov r8, r8)
 8005474:	e004      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8005476:	46c0      	nop			@ (mov r8, r8)
 8005478:	e002      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800547a:	46c0      	nop			@ (mov r8, r8)
 800547c:	e000      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800547e:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 8005480:	697b      	ldr	r3, [r7, #20]
}
 8005482:	0018      	movs	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	b006      	add	sp, #24
 8005488:	bd80      	pop	{r7, pc}
 800548a:	46c0      	nop			@ (mov r8, r8)
 800548c:	40021000 	.word	0x40021000
 8005490:	00f42400 	.word	0x00f42400
 8005494:	00bb8000 	.word	0x00bb8000

08005498 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8005498:	b590      	push	{r4, r7, lr}
 800549a:	b08b      	sub	sp, #44	@ 0x2c
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 80054a0:	2427      	movs	r4, #39	@ 0x27
 80054a2:	193b      	adds	r3, r7, r4
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 80054a8:	2326      	movs	r3, #38	@ 0x26
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	2200      	movs	r2, #0
 80054ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 80054b0:	4b31      	ldr	r3, [pc, #196]	@ (8005578 <HAL_RCCEx_EnableLSCO+0xe0>)
 80054b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054b4:	4b30      	ldr	r3, [pc, #192]	@ (8005578 <HAL_RCCEx_EnableLSCO+0xe0>)
 80054b6:	2101      	movs	r1, #1
 80054b8:	430a      	orrs	r2, r1
 80054ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80054bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005578 <HAL_RCCEx_EnableLSCO+0xe0>)
 80054be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054c0:	2201      	movs	r2, #1
 80054c2:	4013      	ands	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 80054c8:	2110      	movs	r1, #16
 80054ca:	187b      	adds	r3, r7, r1
 80054cc:	2204      	movs	r2, #4
 80054ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054d0:	187b      	adds	r3, r7, r1
 80054d2:	2203      	movs	r2, #3
 80054d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054d6:	187b      	adds	r3, r7, r1
 80054d8:	2203      	movs	r2, #3
 80054da:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054dc:	187b      	adds	r3, r7, r1
 80054de:	2200      	movs	r2, #0
 80054e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 80054e2:	187a      	adds	r2, r7, r1
 80054e4:	23a0      	movs	r3, #160	@ 0xa0
 80054e6:	05db      	lsls	r3, r3, #23
 80054e8:	0011      	movs	r1, r2
 80054ea:	0018      	movs	r0, r3
 80054ec:	f7fd fd78 	bl	8002fe0 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054f0:	4b21      	ldr	r3, [pc, #132]	@ (8005578 <HAL_RCCEx_EnableLSCO+0xe0>)
 80054f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054f4:	2380      	movs	r3, #128	@ 0x80
 80054f6:	055b      	lsls	r3, r3, #21
 80054f8:	4013      	ands	r3, r2
 80054fa:	d110      	bne.n	800551e <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005578 <HAL_RCCEx_EnableLSCO+0xe0>)
 80054fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005500:	4b1d      	ldr	r3, [pc, #116]	@ (8005578 <HAL_RCCEx_EnableLSCO+0xe0>)
 8005502:	2180      	movs	r1, #128	@ 0x80
 8005504:	0549      	lsls	r1, r1, #21
 8005506:	430a      	orrs	r2, r1
 8005508:	63da      	str	r2, [r3, #60]	@ 0x3c
 800550a:	4b1b      	ldr	r3, [pc, #108]	@ (8005578 <HAL_RCCEx_EnableLSCO+0xe0>)
 800550c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800550e:	2380      	movs	r3, #128	@ 0x80
 8005510:	055b      	lsls	r3, r3, #21
 8005512:	4013      	ands	r3, r2
 8005514:	60bb      	str	r3, [r7, #8]
 8005516:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8005518:	193b      	adds	r3, r7, r4
 800551a:	2201      	movs	r2, #1
 800551c:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800551e:	4b17      	ldr	r3, [pc, #92]	@ (800557c <HAL_RCCEx_EnableLSCO+0xe4>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	2380      	movs	r3, #128	@ 0x80
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	4013      	ands	r3, r2
 8005528:	d105      	bne.n	8005536 <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 800552a:	f7fe fe77 	bl	800421c <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 800552e:	2326      	movs	r3, #38	@ 0x26
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	2201      	movs	r2, #1
 8005534:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8005536:	4b10      	ldr	r3, [pc, #64]	@ (8005578 <HAL_RCCEx_EnableLSCO+0xe0>)
 8005538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800553a:	4a11      	ldr	r2, [pc, #68]	@ (8005580 <HAL_RCCEx_EnableLSCO+0xe8>)
 800553c:	401a      	ands	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	431a      	orrs	r2, r3
 8005542:	4b0d      	ldr	r3, [pc, #52]	@ (8005578 <HAL_RCCEx_EnableLSCO+0xe0>)
 8005544:	2180      	movs	r1, #128	@ 0x80
 8005546:	0449      	lsls	r1, r1, #17
 8005548:	430a      	orrs	r2, r1
 800554a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 800554c:	2326      	movs	r3, #38	@ 0x26
 800554e:	18fb      	adds	r3, r7, r3
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 8005556:	f7fe fe6f 	bl	8004238 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 800555a:	2327      	movs	r3, #39	@ 0x27
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d105      	bne.n	8005570 <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8005564:	4b04      	ldr	r3, [pc, #16]	@ (8005578 <HAL_RCCEx_EnableLSCO+0xe0>)
 8005566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005568:	4b03      	ldr	r3, [pc, #12]	@ (8005578 <HAL_RCCEx_EnableLSCO+0xe0>)
 800556a:	4906      	ldr	r1, [pc, #24]	@ (8005584 <HAL_RCCEx_EnableLSCO+0xec>)
 800556c:	400a      	ands	r2, r1
 800556e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8005570:	46c0      	nop			@ (mov r8, r8)
 8005572:	46bd      	mov	sp, r7
 8005574:	b00b      	add	sp, #44	@ 0x2c
 8005576:	bd90      	pop	{r4, r7, pc}
 8005578:	40021000 	.word	0x40021000
 800557c:	40007000 	.word	0x40007000
 8005580:	fcffffff 	.word	0xfcffffff
 8005584:	efffffff 	.word	0xefffffff

08005588 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005588:	b5b0      	push	{r4, r5, r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005590:	230f      	movs	r3, #15
 8005592:	18fb      	adds	r3, r7, r3
 8005594:	2201      	movs	r2, #1
 8005596:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d100      	bne.n	80055a0 <HAL_RTC_Init+0x18>
 800559e:	e08c      	b.n	80056ba <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2229      	movs	r2, #41	@ 0x29
 80055a4:	5c9b      	ldrb	r3, [r3, r2]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10b      	bne.n	80055c4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2228      	movs	r2, #40	@ 0x28
 80055b0:	2100      	movs	r1, #0
 80055b2:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2288      	movs	r2, #136	@ 0x88
 80055b8:	0212      	lsls	r2, r2, #8
 80055ba:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	0018      	movs	r0, r3
 80055c0:	f7fc ffde 	bl	8002580 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2229      	movs	r2, #41	@ 0x29
 80055c8:	2102      	movs	r1, #2
 80055ca:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	2210      	movs	r2, #16
 80055d4:	4013      	ands	r3, r2
 80055d6:	2b10      	cmp	r3, #16
 80055d8:	d062      	beq.n	80056a0 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	22ca      	movs	r2, #202	@ 0xca
 80055e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2253      	movs	r2, #83	@ 0x53
 80055e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80055ea:	250f      	movs	r5, #15
 80055ec:	197c      	adds	r4, r7, r5
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	0018      	movs	r0, r3
 80055f2:	f000 fc27 	bl	8005e44 <RTC_EnterInitMode>
 80055f6:	0003      	movs	r3, r0
 80055f8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80055fa:	0028      	movs	r0, r5
 80055fc:	183b      	adds	r3, r7, r0
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d12c      	bne.n	800565e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	492e      	ldr	r1, [pc, #184]	@ (80056c8 <HAL_RTC_Init+0x140>)
 8005610:	400a      	ands	r2, r1
 8005612:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6999      	ldr	r1, [r3, #24]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6912      	ldr	r2, [r2, #16]
 800563a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6919      	ldr	r1, [r3, #16]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	041a      	lsls	r2, r3, #16
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005650:	183c      	adds	r4, r7, r0
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	0018      	movs	r0, r3
 8005656:	f000 fc37 	bl	8005ec8 <RTC_ExitInitMode>
 800565a:	0003      	movs	r3, r0
 800565c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800565e:	230f      	movs	r3, #15
 8005660:	18fb      	adds	r3, r7, r3
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d116      	bne.n	8005696 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	00d2      	lsls	r2, r2, #3
 8005674:	08d2      	lsrs	r2, r2, #3
 8005676:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6999      	ldr	r1, [r3, #24]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	22ff      	movs	r2, #255	@ 0xff
 800569c:	625a      	str	r2, [r3, #36]	@ 0x24
 800569e:	e003      	b.n	80056a8 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80056a0:	230f      	movs	r3, #15
 80056a2:	18fb      	adds	r3, r7, r3
 80056a4:	2200      	movs	r2, #0
 80056a6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80056a8:	230f      	movs	r3, #15
 80056aa:	18fb      	adds	r3, r7, r3
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d103      	bne.n	80056ba <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2229      	movs	r2, #41	@ 0x29
 80056b6:	2101      	movs	r1, #1
 80056b8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80056ba:	230f      	movs	r3, #15
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	781b      	ldrb	r3, [r3, #0]
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b004      	add	sp, #16
 80056c6:	bdb0      	pop	{r4, r5, r7, pc}
 80056c8:	fb8fffbf 	.word	0xfb8fffbf

080056cc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056cc:	b5b0      	push	{r4, r5, r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2228      	movs	r2, #40	@ 0x28
 80056dc:	5c9b      	ldrb	r3, [r3, r2]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_RTC_SetTime+0x1a>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e092      	b.n	800580c <HAL_RTC_SetTime+0x140>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2228      	movs	r2, #40	@ 0x28
 80056ea:	2101      	movs	r1, #1
 80056ec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2229      	movs	r2, #41	@ 0x29
 80056f2:	2102      	movs	r1, #2
 80056f4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	22ca      	movs	r2, #202	@ 0xca
 80056fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2253      	movs	r2, #83	@ 0x53
 8005704:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005706:	2513      	movs	r5, #19
 8005708:	197c      	adds	r4, r7, r5
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	0018      	movs	r0, r3
 800570e:	f000 fb99 	bl	8005e44 <RTC_EnterInitMode>
 8005712:	0003      	movs	r3, r0
 8005714:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005716:	197b      	adds	r3, r7, r5
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d162      	bne.n	80057e4 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d125      	bne.n	8005770 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2240      	movs	r2, #64	@ 0x40
 800572c:	4013      	ands	r3, r2
 800572e:	d102      	bne.n	8005736 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2200      	movs	r2, #0
 8005734:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	0018      	movs	r0, r3
 800573c:	f000 fc08 	bl	8005f50 <RTC_ByteToBcd2>
 8005740:	0003      	movs	r3, r0
 8005742:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	785b      	ldrb	r3, [r3, #1]
 8005748:	0018      	movs	r0, r3
 800574a:	f000 fc01 	bl	8005f50 <RTC_ByteToBcd2>
 800574e:	0003      	movs	r3, r0
 8005750:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005752:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	789b      	ldrb	r3, [r3, #2]
 8005758:	0018      	movs	r0, r3
 800575a:	f000 fbf9 	bl	8005f50 <RTC_ByteToBcd2>
 800575e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005760:	0022      	movs	r2, r4
 8005762:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	78db      	ldrb	r3, [r3, #3]
 8005768:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	e017      	b.n	80057a0 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	2240      	movs	r2, #64	@ 0x40
 8005778:	4013      	ands	r3, r2
 800577a:	d102      	bne.n	8005782 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2200      	movs	r2, #0
 8005780:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	785b      	ldrb	r3, [r3, #1]
 800578c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800578e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005794:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	78db      	ldrb	r3, [r3, #3]
 800579a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	491b      	ldr	r1, [pc, #108]	@ (8005814 <HAL_RTC_SetTime+0x148>)
 80057a8:	400a      	ands	r2, r1
 80057aa:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4918      	ldr	r1, [pc, #96]	@ (8005818 <HAL_RTC_SetTime+0x14c>)
 80057b8:	400a      	ands	r2, r1
 80057ba:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6999      	ldr	r1, [r3, #24]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057d4:	2313      	movs	r3, #19
 80057d6:	18fc      	adds	r4, r7, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	0018      	movs	r0, r3
 80057dc:	f000 fb74 	bl	8005ec8 <RTC_ExitInitMode>
 80057e0:	0003      	movs	r3, r0
 80057e2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	22ff      	movs	r2, #255	@ 0xff
 80057ea:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 80057ec:	2313      	movs	r3, #19
 80057ee:	18fb      	adds	r3, r7, r3
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2229      	movs	r2, #41	@ 0x29
 80057fa:	2101      	movs	r1, #1
 80057fc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2228      	movs	r2, #40	@ 0x28
 8005802:	2100      	movs	r1, #0
 8005804:	5499      	strb	r1, [r3, r2]

  return status;
 8005806:	2313      	movs	r3, #19
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	781b      	ldrb	r3, [r3, #0]
}
 800580c:	0018      	movs	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	b006      	add	sp, #24
 8005812:	bdb0      	pop	{r4, r5, r7, pc}
 8005814:	007f7f7f 	.word	0x007f7f7f
 8005818:	fffbffff 	.word	0xfffbffff

0800581c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	045b      	lsls	r3, r3, #17
 800583a:	0c5a      	lsrs	r2, r3, #17
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a22      	ldr	r2, [pc, #136]	@ (80058d0 <HAL_RTC_GetTime+0xb4>)
 8005848:	4013      	ands	r3, r2
 800584a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	0c1b      	lsrs	r3, r3, #16
 8005850:	b2db      	uxtb	r3, r3
 8005852:	223f      	movs	r2, #63	@ 0x3f
 8005854:	4013      	ands	r3, r2
 8005856:	b2da      	uxtb	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	0a1b      	lsrs	r3, r3, #8
 8005860:	b2db      	uxtb	r3, r3
 8005862:	227f      	movs	r2, #127	@ 0x7f
 8005864:	4013      	ands	r3, r2
 8005866:	b2da      	uxtb	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	227f      	movs	r2, #127	@ 0x7f
 8005872:	4013      	ands	r3, r2
 8005874:	b2da      	uxtb	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	0d9b      	lsrs	r3, r3, #22
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2201      	movs	r2, #1
 8005882:	4013      	ands	r3, r2
 8005884:	b2da      	uxtb	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d11a      	bne.n	80058c6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	0018      	movs	r0, r3
 8005896:	f000 fb83 	bl	8005fa0 <RTC_Bcd2ToByte>
 800589a:	0003      	movs	r3, r0
 800589c:	001a      	movs	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	0018      	movs	r0, r3
 80058a8:	f000 fb7a 	bl	8005fa0 <RTC_Bcd2ToByte>
 80058ac:	0003      	movs	r3, r0
 80058ae:	001a      	movs	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	789b      	ldrb	r3, [r3, #2]
 80058b8:	0018      	movs	r0, r3
 80058ba:	f000 fb71 	bl	8005fa0 <RTC_Bcd2ToByte>
 80058be:	0003      	movs	r3, r0
 80058c0:	001a      	movs	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	0018      	movs	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b006      	add	sp, #24
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	007f7f7f 	.word	0x007f7f7f

080058d4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	4a21      	ldr	r2, [pc, #132]	@ (800596c <HAL_RTC_GetDate+0x98>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	0c1b      	lsrs	r3, r3, #16
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	0a1b      	lsrs	r3, r3, #8
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	221f      	movs	r2, #31
 80058fe:	4013      	ands	r3, r2
 8005900:	b2da      	uxtb	r2, r3
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	223f      	movs	r2, #63	@ 0x3f
 800590c:	4013      	ands	r3, r2
 800590e:	b2da      	uxtb	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	0b5b      	lsrs	r3, r3, #13
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2207      	movs	r2, #7
 800591c:	4013      	ands	r3, r2
 800591e:	b2da      	uxtb	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d11a      	bne.n	8005960 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	78db      	ldrb	r3, [r3, #3]
 800592e:	0018      	movs	r0, r3
 8005930:	f000 fb36 	bl	8005fa0 <RTC_Bcd2ToByte>
 8005934:	0003      	movs	r3, r0
 8005936:	001a      	movs	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	785b      	ldrb	r3, [r3, #1]
 8005940:	0018      	movs	r0, r3
 8005942:	f000 fb2d 	bl	8005fa0 <RTC_Bcd2ToByte>
 8005946:	0003      	movs	r3, r0
 8005948:	001a      	movs	r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	789b      	ldrb	r3, [r3, #2]
 8005952:	0018      	movs	r0, r3
 8005954:	f000 fb24 	bl	8005fa0 <RTC_Bcd2ToByte>
 8005958:	0003      	movs	r3, r0
 800595a:	001a      	movs	r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	0018      	movs	r0, r3
 8005964:	46bd      	mov	sp, r7
 8005966:	b006      	add	sp, #24
 8005968:	bd80      	pop	{r7, pc}
 800596a:	46c0      	nop			@ (mov r8, r8)
 800596c:	00ffff3f 	.word	0x00ffff3f

08005970 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005970:	b590      	push	{r4, r7, lr}
 8005972:	b089      	sub	sp, #36	@ 0x24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2228      	movs	r2, #40	@ 0x28
 8005980:	5c9b      	ldrb	r3, [r3, r2]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <HAL_RTC_SetAlarm_IT+0x1a>
 8005986:	2302      	movs	r3, #2
 8005988:	e127      	b.n	8005bda <HAL_RTC_SetAlarm_IT+0x26a>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2228      	movs	r2, #40	@ 0x28
 800598e:	2101      	movs	r1, #1
 8005990:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2229      	movs	r2, #41	@ 0x29
 8005996:	2102      	movs	r1, #2
 8005998:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d136      	bne.n	8005a0e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	2240      	movs	r2, #64	@ 0x40
 80059a8:	4013      	ands	r3, r2
 80059aa:	d102      	bne.n	80059b2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2200      	movs	r2, #0
 80059b0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	0018      	movs	r0, r3
 80059b8:	f000 faca 	bl	8005f50 <RTC_ByteToBcd2>
 80059bc:	0003      	movs	r3, r0
 80059be:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f000 fac3 	bl	8005f50 <RTC_ByteToBcd2>
 80059ca:	0003      	movs	r3, r0
 80059cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80059ce:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	789b      	ldrb	r3, [r3, #2]
 80059d4:	0018      	movs	r0, r3
 80059d6:	f000 fabb 	bl	8005f50 <RTC_ByteToBcd2>
 80059da:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80059dc:	0022      	movs	r2, r4
 80059de:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	78db      	ldrb	r3, [r3, #3]
 80059e4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80059e6:	431a      	orrs	r2, r3
 80059e8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2220      	movs	r2, #32
 80059ee:	5c9b      	ldrb	r3, [r3, r2]
 80059f0:	0018      	movs	r0, r3
 80059f2:	f000 faad 	bl	8005f50 <RTC_ByteToBcd2>
 80059f6:	0003      	movs	r3, r0
 80059f8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80059fa:	0022      	movs	r2, r4
 80059fc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a02:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	e022      	b.n	8005a54 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	2240      	movs	r2, #64	@ 0x40
 8005a16:	4013      	ands	r3, r2
 8005a18:	d102      	bne.n	8005a20 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	785b      	ldrb	r3, [r3, #1]
 8005a2a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a2c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005a32:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	78db      	ldrb	r3, [r3, #3]
 8005a38:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005a3a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2120      	movs	r1, #32
 8005a40:	5c5b      	ldrb	r3, [r3, r1]
 8005a42:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005a44:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005a4a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005a50:	4313      	orrs	r3, r2
 8005a52:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	22ca      	movs	r2, #202	@ 0xca
 8005a66:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2253      	movs	r2, #83	@ 0x53
 8005a6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a74:	2380      	movs	r3, #128	@ 0x80
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d14c      	bne.n	8005b16 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4957      	ldr	r1, [pc, #348]	@ (8005be4 <HAL_RTC_SetAlarm_IT+0x274>)
 8005a88:	400a      	ands	r2, r1
 8005a8a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2101      	movs	r1, #1
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8005a9c:	f7fd f82c 	bl	8002af8 <HAL_GetTick>
 8005aa0:	0003      	movs	r3, r0
 8005aa2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005aa4:	e016      	b.n	8005ad4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005aa6:	f7fd f827 	bl	8002af8 <HAL_GetTick>
 8005aaa:	0002      	movs	r2, r0
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	1ad2      	subs	r2, r2, r3
 8005ab0:	23fa      	movs	r3, #250	@ 0xfa
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d90d      	bls.n	8005ad4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	22ff      	movs	r2, #255	@ 0xff
 8005abe:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2229      	movs	r2, #41	@ 0x29
 8005ac4:	2103      	movs	r1, #3
 8005ac6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2228      	movs	r2, #40	@ 0x28
 8005acc:	2100      	movs	r1, #0
 8005ace:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e082      	b.n	8005bda <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	2201      	movs	r2, #1
 8005adc:	4013      	ands	r3, r2
 8005ade:	d0e2      	beq.n	8005aa6 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2180      	movs	r1, #128	@ 0x80
 8005afc:	0049      	lsls	r1, r1, #1
 8005afe:	430a      	orrs	r2, r1
 8005b00:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2180      	movs	r1, #128	@ 0x80
 8005b0e:	0149      	lsls	r1, r1, #5
 8005b10:	430a      	orrs	r2, r1
 8005b12:	619a      	str	r2, [r3, #24]
 8005b14:	e04b      	b.n	8005bae <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699a      	ldr	r2, [r3, #24]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4931      	ldr	r1, [pc, #196]	@ (8005be8 <HAL_RTC_SetAlarm_IT+0x278>)
 8005b22:	400a      	ands	r2, r1
 8005b24:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2102      	movs	r1, #2
 8005b32:	430a      	orrs	r2, r1
 8005b34:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8005b36:	f7fc ffdf 	bl	8002af8 <HAL_GetTick>
 8005b3a:	0003      	movs	r3, r0
 8005b3c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005b3e:	e016      	b.n	8005b6e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b40:	f7fc ffda 	bl	8002af8 <HAL_GetTick>
 8005b44:	0002      	movs	r2, r0
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	1ad2      	subs	r2, r2, r3
 8005b4a:	23fa      	movs	r3, #250	@ 0xfa
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d90d      	bls.n	8005b6e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	22ff      	movs	r2, #255	@ 0xff
 8005b58:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2229      	movs	r2, #41	@ 0x29
 8005b5e:	2103      	movs	r1, #3
 8005b60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2228      	movs	r2, #40	@ 0x28
 8005b66:	2100      	movs	r1, #0
 8005b68:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e035      	b.n	8005bda <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	2202      	movs	r2, #2
 8005b76:	4013      	ands	r3, r2
 8005b78:	d0e2      	beq.n	8005b40 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69fa      	ldr	r2, [r7, #28]
 8005b80:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699a      	ldr	r2, [r3, #24]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2180      	movs	r1, #128	@ 0x80
 8005b96:	0089      	lsls	r1, r1, #2
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2180      	movs	r1, #128	@ 0x80
 8005ba8:	0189      	lsls	r1, r1, #6
 8005baa:	430a      	orrs	r2, r1
 8005bac:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005bae:	4a0f      	ldr	r2, [pc, #60]	@ (8005bec <HAL_RTC_SetAlarm_IT+0x27c>)
 8005bb0:	2380      	movs	r3, #128	@ 0x80
 8005bb2:	58d3      	ldr	r3, [r2, r3]
 8005bb4:	490d      	ldr	r1, [pc, #52]	@ (8005bec <HAL_RTC_SetAlarm_IT+0x27c>)
 8005bb6:	2280      	movs	r2, #128	@ 0x80
 8005bb8:	0312      	lsls	r2, r2, #12
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	2280      	movs	r2, #128	@ 0x80
 8005bbe:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	22ff      	movs	r2, #255	@ 0xff
 8005bc6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2229      	movs	r2, #41	@ 0x29
 8005bcc:	2101      	movs	r1, #1
 8005bce:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2228      	movs	r2, #40	@ 0x28
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	0018      	movs	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	b009      	add	sp, #36	@ 0x24
 8005be0:	bd90      	pop	{r4, r7, pc}
 8005be2:	46c0      	nop			@ (mov r8, r8)
 8005be4:	fffffeff 	.word	0xfffffeff
 8005be8:	fffffdff 	.word	0xfffffdff
 8005bec:	40021800 	.word	0x40021800

08005bf0 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	2380      	movs	r3, #128	@ 0x80
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d144      	bne.n	8005c92 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2280      	movs	r2, #128	@ 0x80
 8005c0c:	0052      	lsls	r2, r2, #1
 8005c0e:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c16:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1e:	045b      	lsls	r3, r3, #17
 8005c20:	0c5b      	lsrs	r3, r3, #17
 8005c22:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	0c1b      	lsrs	r3, r3, #16
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	223f      	movs	r2, #63	@ 0x3f
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	0a1b      	lsrs	r3, r3, #8
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	227f      	movs	r2, #127	@ 0x7f
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	227f      	movs	r2, #127	@ 0x7f
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	0d9b      	lsrs	r3, r3, #22
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2201      	movs	r2, #1
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	0e1b      	lsrs	r3, r3, #24
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	223f      	movs	r2, #63	@ 0x3f
 8005c70:	4013      	ands	r3, r2
 8005c72:	b2d9      	uxtb	r1, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2220      	movs	r2, #32
 8005c78:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	2380      	movs	r3, #128	@ 0x80
 8005c7e:	05db      	lsls	r3, r3, #23
 8005c80:	401a      	ands	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	4a3b      	ldr	r2, [pc, #236]	@ (8005d78 <HAL_RTC_GetAlarm+0x188>)
 8005c8a:	401a      	ands	r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	615a      	str	r2, [r3, #20]
 8005c90:	e043      	b.n	8005d1a <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2280      	movs	r2, #128	@ 0x80
 8005c96:	0092      	lsls	r2, r2, #2
 8005c98:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ca0:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca8:	045b      	lsls	r3, r3, #17
 8005caa:	0c5b      	lsrs	r3, r3, #17
 8005cac:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	0c1b      	lsrs	r3, r3, #16
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	223f      	movs	r2, #63	@ 0x3f
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	0a1b      	lsrs	r3, r3, #8
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	227f      	movs	r2, #127	@ 0x7f
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	227f      	movs	r2, #127	@ 0x7f
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	0d9b      	lsrs	r3, r3, #22
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	0e1b      	lsrs	r3, r3, #24
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	223f      	movs	r2, #63	@ 0x3f
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	b2d9      	uxtb	r1, r3
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2220      	movs	r2, #32
 8005d02:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	2380      	movs	r3, #128	@ 0x80
 8005d08:	05db      	lsls	r3, r3, #23
 8005d0a:	401a      	ands	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	4a19      	ldr	r2, [pc, #100]	@ (8005d78 <HAL_RTC_GetAlarm+0x188>)
 8005d14:	401a      	ands	r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d125      	bne.n	8005d6c <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	0018      	movs	r0, r3
 8005d26:	f000 f93b 	bl	8005fa0 <RTC_Bcd2ToByte>
 8005d2a:	0003      	movs	r3, r0
 8005d2c:	001a      	movs	r2, r3
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	0018      	movs	r0, r3
 8005d38:	f000 f932 	bl	8005fa0 <RTC_Bcd2ToByte>
 8005d3c:	0003      	movs	r3, r0
 8005d3e:	001a      	movs	r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	789b      	ldrb	r3, [r3, #2]
 8005d48:	0018      	movs	r0, r3
 8005d4a:	f000 f929 	bl	8005fa0 <RTC_Bcd2ToByte>
 8005d4e:	0003      	movs	r3, r0
 8005d50:	001a      	movs	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	5c9b      	ldrb	r3, [r3, r2]
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f000 f91f 	bl	8005fa0 <RTC_Bcd2ToByte>
 8005d62:	0003      	movs	r3, r0
 8005d64:	0019      	movs	r1, r3
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	0018      	movs	r0, r3
 8005d70:	46bd      	mov	sp, r7
 8005d72:	b006      	add	sp, #24
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	46c0      	nop			@ (mov r8, r8)
 8005d78:	80808080 	.word	0x80808080

08005d7c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	2380      	movs	r3, #128	@ 0x80
 8005d8c:	015b      	lsls	r3, r3, #5
 8005d8e:	4013      	ands	r3, r2
 8005d90:	d011      	beq.n	8005db6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d98:	2201      	movs	r2, #1
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	d00b      	beq.n	8005db6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2101      	movs	r1, #1
 8005daa:	430a      	orrs	r2, r1
 8005dac:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	0018      	movs	r0, r3
 8005db2:	f7fb fbd1 	bl	8001558 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	699a      	ldr	r2, [r3, #24]
 8005dbc:	2380      	movs	r3, #128	@ 0x80
 8005dbe:	019b      	lsls	r3, r3, #6
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	d011      	beq.n	8005de8 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dca:	2202      	movs	r2, #2
 8005dcc:	4013      	ands	r3, r2
 8005dce:	d00b      	beq.n	8005de8 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2102      	movs	r1, #2
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	0018      	movs	r0, r3
 8005de4:	f000 f9a4 	bl	8006130 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2229      	movs	r2, #41	@ 0x29
 8005dec:	2101      	movs	r1, #1
 8005dee:	5499      	strb	r1, [r3, r2]
}
 8005df0:	46c0      	nop			@ (mov r8, r8)
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b002      	add	sp, #8
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a0e      	ldr	r2, [pc, #56]	@ (8005e40 <HAL_RTC_WaitForSynchro+0x48>)
 8005e06:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005e08:	f7fc fe76 	bl	8002af8 <HAL_GetTick>
 8005e0c:	0003      	movs	r3, r0
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005e10:	e00a      	b.n	8005e28 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e12:	f7fc fe71 	bl	8002af8 <HAL_GetTick>
 8005e16:	0002      	movs	r2, r0
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	1ad2      	subs	r2, r2, r3
 8005e1c:	23fa      	movs	r3, #250	@ 0xfa
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d901      	bls.n	8005e28 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e006      	b.n	8005e36 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	4013      	ands	r3, r2
 8005e32:	d0ee      	beq.n	8005e12 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	0018      	movs	r0, r3
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	b004      	add	sp, #16
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	46c0      	nop			@ (mov r8, r8)
 8005e40:	0001005f 	.word	0x0001005f

08005e44 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005e4c:	230f      	movs	r3, #15
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	2200      	movs	r2, #0
 8005e52:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	2240      	movs	r2, #64	@ 0x40
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d12c      	bne.n	8005eba <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2180      	movs	r1, #128	@ 0x80
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e70:	f7fc fe42 	bl	8002af8 <HAL_GetTick>
 8005e74:	0003      	movs	r3, r0
 8005e76:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005e78:	e014      	b.n	8005ea4 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e7a:	f7fc fe3d 	bl	8002af8 <HAL_GetTick>
 8005e7e:	0002      	movs	r2, r0
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	1ad2      	subs	r2, r2, r3
 8005e84:	200f      	movs	r0, #15
 8005e86:	183b      	adds	r3, r7, r0
 8005e88:	1839      	adds	r1, r7, r0
 8005e8a:	7809      	ldrb	r1, [r1, #0]
 8005e8c:	7019      	strb	r1, [r3, #0]
 8005e8e:	23fa      	movs	r3, #250	@ 0xfa
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d906      	bls.n	8005ea4 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005e96:	183b      	adds	r3, r7, r0
 8005e98:	2203      	movs	r2, #3
 8005e9a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2229      	movs	r2, #41	@ 0x29
 8005ea0:	2103      	movs	r1, #3
 8005ea2:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	2240      	movs	r2, #64	@ 0x40
 8005eac:	4013      	ands	r3, r2
 8005eae:	d104      	bne.n	8005eba <RTC_EnterInitMode+0x76>
 8005eb0:	230f      	movs	r3, #15
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	d1df      	bne.n	8005e7a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005eba:	230f      	movs	r3, #15
 8005ebc:	18fb      	adds	r3, r7, r3
 8005ebe:	781b      	ldrb	r3, [r3, #0]
}
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	b004      	add	sp, #16
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ec8:	b590      	push	{r4, r7, lr}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed0:	240f      	movs	r4, #15
 8005ed2:	193b      	adds	r3, r7, r4
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8005f4c <RTC_ExitInitMode+0x84>)
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	4b1b      	ldr	r3, [pc, #108]	@ (8005f4c <RTC_ExitInitMode+0x84>)
 8005ede:	2180      	movs	r1, #128	@ 0x80
 8005ee0:	438a      	bics	r2, r1
 8005ee2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005ee4:	4b19      	ldr	r3, [pc, #100]	@ (8005f4c <RTC_ExitInitMode+0x84>)
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	4013      	ands	r3, r2
 8005eec:	d10d      	bne.n	8005f0a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f7ff ff81 	bl	8005df8 <HAL_RTC_WaitForSynchro>
 8005ef6:	1e03      	subs	r3, r0, #0
 8005ef8:	d021      	beq.n	8005f3e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2229      	movs	r2, #41	@ 0x29
 8005efe:	2103      	movs	r1, #3
 8005f00:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005f02:	193b      	adds	r3, r7, r4
 8005f04:	2203      	movs	r2, #3
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	e019      	b.n	8005f3e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f0a:	4b10      	ldr	r3, [pc, #64]	@ (8005f4c <RTC_ExitInitMode+0x84>)
 8005f0c:	699a      	ldr	r2, [r3, #24]
 8005f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005f4c <RTC_ExitInitMode+0x84>)
 8005f10:	2120      	movs	r1, #32
 8005f12:	438a      	bics	r2, r1
 8005f14:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f7ff ff6d 	bl	8005df8 <HAL_RTC_WaitForSynchro>
 8005f1e:	1e03      	subs	r3, r0, #0
 8005f20:	d007      	beq.n	8005f32 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2229      	movs	r2, #41	@ 0x29
 8005f26:	2103      	movs	r1, #3
 8005f28:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005f2a:	230f      	movs	r3, #15
 8005f2c:	18fb      	adds	r3, r7, r3
 8005f2e:	2203      	movs	r2, #3
 8005f30:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f32:	4b06      	ldr	r3, [pc, #24]	@ (8005f4c <RTC_ExitInitMode+0x84>)
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	4b05      	ldr	r3, [pc, #20]	@ (8005f4c <RTC_ExitInitMode+0x84>)
 8005f38:	2120      	movs	r1, #32
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005f3e:	230f      	movs	r3, #15
 8005f40:	18fb      	adds	r3, r7, r3
 8005f42:	781b      	ldrb	r3, [r3, #0]
}
 8005f44:	0018      	movs	r0, r3
 8005f46:	46bd      	mov	sp, r7
 8005f48:	b005      	add	sp, #20
 8005f4a:	bd90      	pop	{r4, r7, pc}
 8005f4c:	40002800 	.word	0x40002800

08005f50 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	0002      	movs	r2, r0
 8005f58:	1dfb      	adds	r3, r7, #7
 8005f5a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005f60:	230b      	movs	r3, #11
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	1dfa      	adds	r2, r7, #7
 8005f66:	7812      	ldrb	r2, [r2, #0]
 8005f68:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005f6a:	e008      	b.n	8005f7e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005f72:	220b      	movs	r2, #11
 8005f74:	18bb      	adds	r3, r7, r2
 8005f76:	18ba      	adds	r2, r7, r2
 8005f78:	7812      	ldrb	r2, [r2, #0]
 8005f7a:	3a0a      	subs	r2, #10
 8005f7c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005f7e:	210b      	movs	r1, #11
 8005f80:	187b      	adds	r3, r7, r1
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b09      	cmp	r3, #9
 8005f86:	d8f1      	bhi.n	8005f6c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	187b      	adds	r3, r7, r1
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	b2db      	uxtb	r3, r3
}
 8005f98:	0018      	movs	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	b004      	add	sp, #16
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	0002      	movs	r2, r0
 8005fa8:	1dfb      	adds	r3, r7, #7
 8005faa:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005fac:	1dfb      	adds	r3, r7, #7
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	091b      	lsrs	r3, r3, #4
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	001a      	movs	r2, r3
 8005fb6:	0013      	movs	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	189b      	adds	r3, r3, r2
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	1dfb      	adds	r3, r7, #7
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	210f      	movs	r1, #15
 8005fca:	400b      	ands	r3, r1
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	18d3      	adds	r3, r2, r3
 8005fd0:	b2db      	uxtb	r3, r3
}
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	b004      	add	sp, #16
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b086      	sub	sp, #24
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	607a      	str	r2, [r7, #4]
 8005fe6:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2228      	movs	r2, #40	@ 0x28
 8005fec:	5c9b      	ldrb	r3, [r3, r2]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_RTCEx_SetSmoothCalib+0x1c>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	e04f      	b.n	8006096 <HAL_RTCEx_SetSmoothCalib+0xbc>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2228      	movs	r2, #40	@ 0x28
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2229      	movs	r2, #41	@ 0x29
 8006002:	2102      	movs	r1, #2
 8006004:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	22ca      	movs	r2, #202	@ 0xca
 800600c:	625a      	str	r2, [r3, #36]	@ 0x24
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2253      	movs	r2, #83	@ 0x53
 8006014:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	2380      	movs	r3, #128	@ 0x80
 800601e:	025b      	lsls	r3, r3, #9
 8006020:	4013      	ands	r3, r2
 8006022:	d022      	beq.n	800606a <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8006024:	f7fc fd68 	bl	8002af8 <HAL_GetTick>
 8006028:	0003      	movs	r3, r0
 800602a:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 800602c:	e016      	b.n	800605c <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800602e:	f7fc fd63 	bl	8002af8 <HAL_GetTick>
 8006032:	0002      	movs	r2, r0
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	1ad2      	subs	r2, r2, r3
 8006038:	23fa      	movs	r3, #250	@ 0xfa
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	429a      	cmp	r2, r3
 800603e:	d90d      	bls.n	800605c <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	22ff      	movs	r2, #255	@ 0xff
 8006046:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2229      	movs	r2, #41	@ 0x29
 800604c:	2103      	movs	r1, #3
 800604e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2228      	movs	r2, #40	@ 0x28
 8006054:	2100      	movs	r1, #0
 8006056:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e01c      	b.n	8006096 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	2380      	movs	r3, #128	@ 0x80
 8006064:	025b      	lsls	r3, r3, #9
 8006066:	4013      	ands	r3, r2
 8006068:	d1e1      	bne.n	800602e <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	431a      	orrs	r2, r3
 8006070:	0011      	movs	r1, r2
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	22ff      	movs	r2, #255	@ 0xff
 8006082:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2229      	movs	r2, #41	@ 0x29
 8006088:	2101      	movs	r1, #1
 800608a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2228      	movs	r2, #40	@ 0x28
 8006090:	2100      	movs	r1, #0
 8006092:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	0018      	movs	r0, r3
 8006098:	46bd      	mov	sp, r7
 800609a:	b006      	add	sp, #24
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2228      	movs	r2, #40	@ 0x28
 80060ae:	5c9b      	ldrb	r3, [r3, r2]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e035      	b.n	8006124 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2228      	movs	r2, #40	@ 0x28
 80060bc:	2101      	movs	r1, #1
 80060be:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2229      	movs	r2, #41	@ 0x29
 80060c4:	2102      	movs	r1, #2
 80060c6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	22ca      	movs	r2, #202	@ 0xca
 80060ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2253      	movs	r2, #83	@ 0x53
 80060d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699a      	ldr	r2, [r3, #24]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4912      	ldr	r1, [pc, #72]	@ (800612c <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 80060e4:	400a      	ands	r2, r1
 80060e6:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6999      	ldr	r1, [r3, #24]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2180      	movs	r1, #128	@ 0x80
 8006104:	0409      	lsls	r1, r1, #16
 8006106:	430a      	orrs	r2, r1
 8006108:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	22ff      	movs	r2, #255	@ 0xff
 8006110:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2229      	movs	r2, #41	@ 0x29
 8006116:	2101      	movs	r1, #1
 8006118:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2228      	movs	r2, #40	@ 0x28
 800611e:	2100      	movs	r1, #0
 8006120:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	0018      	movs	r0, r3
 8006126:	46bd      	mov	sp, r7
 8006128:	b002      	add	sp, #8
 800612a:	bd80      	pop	{r7, pc}
 800612c:	fff7ffff 	.word	0xfff7ffff

08006130 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006138:	46c0      	nop			@ (mov r8, r8)
 800613a:	46bd      	mov	sp, r7
 800613c:	b002      	add	sp, #8
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	001a      	movs	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	18d3      	adds	r3, r2, r3
 8006158:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	3301      	adds	r3, #1
 800615e:	33ff      	adds	r3, #255	@ 0xff
 8006160:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	18d3      	adds	r3, r2, r3
 800616a:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	601a      	str	r2, [r3, #0]
}
 8006172:	46c0      	nop			@ (mov r8, r8)
 8006174:	46bd      	mov	sp, r7
 8006176:	b006      	add	sp, #24
 8006178:	bd80      	pop	{r7, pc}

0800617a <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	001a      	movs	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	18d3      	adds	r3, r2, r3
 8006190:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3301      	adds	r3, #1
 8006196:	33ff      	adds	r3, #255	@ 0xff
 8006198:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	18d3      	adds	r3, r2, r3
 80061a2:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	681b      	ldr	r3, [r3, #0]
}
 80061a8:	0018      	movs	r0, r3
 80061aa:	46bd      	mov	sp, r7
 80061ac:	b004      	add	sp, #16
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e0a8      	b.n	8006314 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	2382      	movs	r3, #130	@ 0x82
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d009      	beq.n	80061ea <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	61da      	str	r2, [r3, #28]
 80061dc:	e005      	b.n	80061ea <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	225d      	movs	r2, #93	@ 0x5d
 80061f4:	5c9b      	ldrb	r3, [r3, r2]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d107      	bne.n	800620c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	225c      	movs	r2, #92	@ 0x5c
 8006200:	2100      	movs	r1, #0
 8006202:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	0018      	movs	r0, r3
 8006208:	f7fc fa00 	bl	800260c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	225d      	movs	r2, #93	@ 0x5d
 8006210:	2102      	movs	r1, #2
 8006212:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2140      	movs	r1, #64	@ 0x40
 8006220:	438a      	bics	r2, r1
 8006222:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	23e0      	movs	r3, #224	@ 0xe0
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	429a      	cmp	r2, r3
 800622e:	d902      	bls.n	8006236 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	e002      	b.n	800623c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006236:	2380      	movs	r3, #128	@ 0x80
 8006238:	015b      	lsls	r3, r3, #5
 800623a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68da      	ldr	r2, [r3, #12]
 8006240:	23f0      	movs	r3, #240	@ 0xf0
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	429a      	cmp	r2, r3
 8006246:	d008      	beq.n	800625a <HAL_SPI_Init+0xaa>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	23e0      	movs	r3, #224	@ 0xe0
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	429a      	cmp	r2, r3
 8006252:	d002      	beq.n	800625a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	2382      	movs	r3, #130	@ 0x82
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	401a      	ands	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6899      	ldr	r1, [r3, #8]
 8006268:	2384      	movs	r3, #132	@ 0x84
 800626a:	021b      	lsls	r3, r3, #8
 800626c:	400b      	ands	r3, r1
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	2102      	movs	r1, #2
 8006276:	400b      	ands	r3, r1
 8006278:	431a      	orrs	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	2101      	movs	r1, #1
 8006280:	400b      	ands	r3, r1
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6999      	ldr	r1, [r3, #24]
 8006288:	2380      	movs	r3, #128	@ 0x80
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	400b      	ands	r3, r1
 800628e:	431a      	orrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	2138      	movs	r1, #56	@ 0x38
 8006296:	400b      	ands	r3, r1
 8006298:	431a      	orrs	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	2180      	movs	r1, #128	@ 0x80
 80062a0:	400b      	ands	r3, r1
 80062a2:	431a      	orrs	r2, r3
 80062a4:	0011      	movs	r1, r2
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062aa:	2380      	movs	r3, #128	@ 0x80
 80062ac:	019b      	lsls	r3, r3, #6
 80062ae:	401a      	ands	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	0c1b      	lsrs	r3, r3, #16
 80062be:	2204      	movs	r2, #4
 80062c0:	401a      	ands	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c6:	2110      	movs	r1, #16
 80062c8:	400b      	ands	r3, r1
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062d0:	2108      	movs	r1, #8
 80062d2:	400b      	ands	r3, r1
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68d9      	ldr	r1, [r3, #12]
 80062da:	23f0      	movs	r3, #240	@ 0xf0
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	400b      	ands	r3, r1
 80062e0:	431a      	orrs	r2, r3
 80062e2:	0011      	movs	r1, r2
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	2380      	movs	r3, #128	@ 0x80
 80062e8:	015b      	lsls	r3, r3, #5
 80062ea:	401a      	ands	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69da      	ldr	r2, [r3, #28]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4907      	ldr	r1, [pc, #28]	@ (800631c <HAL_SPI_Init+0x16c>)
 8006300:	400a      	ands	r2, r1
 8006302:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	225d      	movs	r2, #93	@ 0x5d
 800630e:	2101      	movs	r1, #1
 8006310:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	0018      	movs	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	b004      	add	sp, #16
 800631a:	bd80      	pop	{r7, pc}
 800631c:	fffff7ff 	.word	0xfffff7ff

08006320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e04a      	b.n	80063c8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	223d      	movs	r2, #61	@ 0x3d
 8006336:	5c9b      	ldrb	r3, [r3, r2]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d107      	bne.n	800634e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	223c      	movs	r2, #60	@ 0x3c
 8006342:	2100      	movs	r1, #0
 8006344:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	0018      	movs	r0, r3
 800634a:	f7fc fa37 	bl	80027bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	223d      	movs	r2, #61	@ 0x3d
 8006352:	2102      	movs	r1, #2
 8006354:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3304      	adds	r3, #4
 800635e:	0019      	movs	r1, r3
 8006360:	0010      	movs	r0, r2
 8006362:	f000 fc87 	bl	8006c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2248      	movs	r2, #72	@ 0x48
 800636a:	2101      	movs	r1, #1
 800636c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	223e      	movs	r2, #62	@ 0x3e
 8006372:	2101      	movs	r1, #1
 8006374:	5499      	strb	r1, [r3, r2]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	223f      	movs	r2, #63	@ 0x3f
 800637a:	2101      	movs	r1, #1
 800637c:	5499      	strb	r1, [r3, r2]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2240      	movs	r2, #64	@ 0x40
 8006382:	2101      	movs	r1, #1
 8006384:	5499      	strb	r1, [r3, r2]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2241      	movs	r2, #65	@ 0x41
 800638a:	2101      	movs	r1, #1
 800638c:	5499      	strb	r1, [r3, r2]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2242      	movs	r2, #66	@ 0x42
 8006392:	2101      	movs	r1, #1
 8006394:	5499      	strb	r1, [r3, r2]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2243      	movs	r2, #67	@ 0x43
 800639a:	2101      	movs	r1, #1
 800639c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2244      	movs	r2, #68	@ 0x44
 80063a2:	2101      	movs	r1, #1
 80063a4:	5499      	strb	r1, [r3, r2]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2245      	movs	r2, #69	@ 0x45
 80063aa:	2101      	movs	r1, #1
 80063ac:	5499      	strb	r1, [r3, r2]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2246      	movs	r2, #70	@ 0x46
 80063b2:	2101      	movs	r1, #1
 80063b4:	5499      	strb	r1, [r3, r2]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2247      	movs	r2, #71	@ 0x47
 80063ba:	2101      	movs	r1, #1
 80063bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	223d      	movs	r2, #61	@ 0x3d
 80063c2:	2101      	movs	r1, #1
 80063c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	0018      	movs	r0, r3
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b002      	add	sp, #8
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	223d      	movs	r2, #61	@ 0x3d
 80063dc:	5c9b      	ldrb	r3, [r3, r2]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d001      	beq.n	80063e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e035      	b.n	8006454 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	223d      	movs	r2, #61	@ 0x3d
 80063ec:	2102      	movs	r1, #2
 80063ee:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a19      	ldr	r2, [pc, #100]	@ (800645c <HAL_TIM_Base_Start+0x8c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00a      	beq.n	8006410 <HAL_TIM_Base_Start+0x40>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	2380      	movs	r3, #128	@ 0x80
 8006400:	05db      	lsls	r3, r3, #23
 8006402:	429a      	cmp	r2, r3
 8006404:	d004      	beq.n	8006410 <HAL_TIM_Base_Start+0x40>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a15      	ldr	r2, [pc, #84]	@ (8006460 <HAL_TIM_Base_Start+0x90>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d116      	bne.n	800643e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	4a13      	ldr	r2, [pc, #76]	@ (8006464 <HAL_TIM_Base_Start+0x94>)
 8006418:	4013      	ands	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2b06      	cmp	r3, #6
 8006420:	d016      	beq.n	8006450 <HAL_TIM_Base_Start+0x80>
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	2380      	movs	r3, #128	@ 0x80
 8006426:	025b      	lsls	r3, r3, #9
 8006428:	429a      	cmp	r2, r3
 800642a:	d011      	beq.n	8006450 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2101      	movs	r1, #1
 8006438:	430a      	orrs	r2, r1
 800643a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800643c:	e008      	b.n	8006450 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2101      	movs	r1, #1
 800644a:	430a      	orrs	r2, r1
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	e000      	b.n	8006452 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006450:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	0018      	movs	r0, r3
 8006456:	46bd      	mov	sp, r7
 8006458:	b004      	add	sp, #16
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40012c00 	.word	0x40012c00
 8006460:	40000400 	.word	0x40000400
 8006464:	00010007 	.word	0x00010007

08006468 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	4a0d      	ldr	r2, [pc, #52]	@ (80064ac <HAL_TIM_Base_Stop+0x44>)
 8006478:	4013      	ands	r3, r2
 800647a:	d10d      	bne.n	8006498 <HAL_TIM_Base_Stop+0x30>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	4a0b      	ldr	r2, [pc, #44]	@ (80064b0 <HAL_TIM_Base_Stop+0x48>)
 8006484:	4013      	ands	r3, r2
 8006486:	d107      	bne.n	8006498 <HAL_TIM_Base_Stop+0x30>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2101      	movs	r1, #1
 8006494:	438a      	bics	r2, r1
 8006496:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	223d      	movs	r2, #61	@ 0x3d
 800649c:	2101      	movs	r1, #1
 800649e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	0018      	movs	r0, r3
 80064a4:	46bd      	mov	sp, r7
 80064a6:	b002      	add	sp, #8
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	46c0      	nop			@ (mov r8, r8)
 80064ac:	00001111 	.word	0x00001111
 80064b0:	00000444 	.word	0x00000444

080064b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	223d      	movs	r2, #61	@ 0x3d
 80064c0:	5c9b      	ldrb	r3, [r3, r2]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d001      	beq.n	80064cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e03d      	b.n	8006548 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	223d      	movs	r2, #61	@ 0x3d
 80064d0:	2102      	movs	r1, #2
 80064d2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2101      	movs	r1, #1
 80064e0:	430a      	orrs	r2, r1
 80064e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a19      	ldr	r2, [pc, #100]	@ (8006550 <HAL_TIM_Base_Start_IT+0x9c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d00a      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x50>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	2380      	movs	r3, #128	@ 0x80
 80064f4:	05db      	lsls	r3, r3, #23
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d004      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x50>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a15      	ldr	r2, [pc, #84]	@ (8006554 <HAL_TIM_Base_Start_IT+0xa0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d116      	bne.n	8006532 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	4a13      	ldr	r2, [pc, #76]	@ (8006558 <HAL_TIM_Base_Start_IT+0xa4>)
 800650c:	4013      	ands	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b06      	cmp	r3, #6
 8006514:	d016      	beq.n	8006544 <HAL_TIM_Base_Start_IT+0x90>
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	2380      	movs	r3, #128	@ 0x80
 800651a:	025b      	lsls	r3, r3, #9
 800651c:	429a      	cmp	r2, r3
 800651e:	d011      	beq.n	8006544 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2101      	movs	r1, #1
 800652c:	430a      	orrs	r2, r1
 800652e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006530:	e008      	b.n	8006544 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2101      	movs	r1, #1
 800653e:	430a      	orrs	r2, r1
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	e000      	b.n	8006546 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006544:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	0018      	movs	r0, r3
 800654a:	46bd      	mov	sp, r7
 800654c:	b004      	add	sp, #16
 800654e:	bd80      	pop	{r7, pc}
 8006550:	40012c00 	.word	0x40012c00
 8006554:	40000400 	.word	0x40000400
 8006558:	00010007 	.word	0x00010007

0800655c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2101      	movs	r1, #1
 8006570:	438a      	bics	r2, r1
 8006572:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	4a0d      	ldr	r2, [pc, #52]	@ (80065b0 <HAL_TIM_Base_Stop_IT+0x54>)
 800657c:	4013      	ands	r3, r2
 800657e:	d10d      	bne.n	800659c <HAL_TIM_Base_Stop_IT+0x40>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	4a0b      	ldr	r2, [pc, #44]	@ (80065b4 <HAL_TIM_Base_Stop_IT+0x58>)
 8006588:	4013      	ands	r3, r2
 800658a:	d107      	bne.n	800659c <HAL_TIM_Base_Stop_IT+0x40>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2101      	movs	r1, #1
 8006598:	438a      	bics	r2, r1
 800659a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	223d      	movs	r2, #61	@ 0x3d
 80065a0:	2101      	movs	r1, #1
 80065a2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	0018      	movs	r0, r3
 80065a8:	46bd      	mov	sp, r7
 80065aa:	b002      	add	sp, #8
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	46c0      	nop			@ (mov r8, r8)
 80065b0:	00001111 	.word	0x00001111
 80065b4:	00000444 	.word	0x00000444

080065b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e04a      	b.n	8006660 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	223d      	movs	r2, #61	@ 0x3d
 80065ce:	5c9b      	ldrb	r3, [r3, r2]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d107      	bne.n	80065e6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	223c      	movs	r2, #60	@ 0x3c
 80065da:	2100      	movs	r1, #0
 80065dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	0018      	movs	r0, r3
 80065e2:	f7fc f8cf 	bl	8002784 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	223d      	movs	r2, #61	@ 0x3d
 80065ea:	2102      	movs	r1, #2
 80065ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3304      	adds	r3, #4
 80065f6:	0019      	movs	r1, r3
 80065f8:	0010      	movs	r0, r2
 80065fa:	f000 fb3b 	bl	8006c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2248      	movs	r2, #72	@ 0x48
 8006602:	2101      	movs	r1, #1
 8006604:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	223e      	movs	r2, #62	@ 0x3e
 800660a:	2101      	movs	r1, #1
 800660c:	5499      	strb	r1, [r3, r2]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	223f      	movs	r2, #63	@ 0x3f
 8006612:	2101      	movs	r1, #1
 8006614:	5499      	strb	r1, [r3, r2]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2240      	movs	r2, #64	@ 0x40
 800661a:	2101      	movs	r1, #1
 800661c:	5499      	strb	r1, [r3, r2]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2241      	movs	r2, #65	@ 0x41
 8006622:	2101      	movs	r1, #1
 8006624:	5499      	strb	r1, [r3, r2]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2242      	movs	r2, #66	@ 0x42
 800662a:	2101      	movs	r1, #1
 800662c:	5499      	strb	r1, [r3, r2]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2243      	movs	r2, #67	@ 0x43
 8006632:	2101      	movs	r1, #1
 8006634:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2244      	movs	r2, #68	@ 0x44
 800663a:	2101      	movs	r1, #1
 800663c:	5499      	strb	r1, [r3, r2]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2245      	movs	r2, #69	@ 0x45
 8006642:	2101      	movs	r1, #1
 8006644:	5499      	strb	r1, [r3, r2]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2246      	movs	r2, #70	@ 0x46
 800664a:	2101      	movs	r1, #1
 800664c:	5499      	strb	r1, [r3, r2]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2247      	movs	r2, #71	@ 0x47
 8006652:	2101      	movs	r1, #1
 8006654:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	223d      	movs	r2, #61	@ 0x3d
 800665a:	2101      	movs	r1, #1
 800665c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	0018      	movs	r0, r3
 8006662:	46bd      	mov	sp, r7
 8006664:	b002      	add	sp, #8
 8006666:	bd80      	pop	{r7, pc}

08006668 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d108      	bne.n	800668a <HAL_TIM_PWM_Start+0x22>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	223e      	movs	r2, #62	@ 0x3e
 800667c:	5c9b      	ldrb	r3, [r3, r2]
 800667e:	b2db      	uxtb	r3, r3
 8006680:	3b01      	subs	r3, #1
 8006682:	1e5a      	subs	r2, r3, #1
 8006684:	4193      	sbcs	r3, r2
 8006686:	b2db      	uxtb	r3, r3
 8006688:	e037      	b.n	80066fa <HAL_TIM_PWM_Start+0x92>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b04      	cmp	r3, #4
 800668e:	d108      	bne.n	80066a2 <HAL_TIM_PWM_Start+0x3a>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	223f      	movs	r2, #63	@ 0x3f
 8006694:	5c9b      	ldrb	r3, [r3, r2]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	3b01      	subs	r3, #1
 800669a:	1e5a      	subs	r2, r3, #1
 800669c:	4193      	sbcs	r3, r2
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	e02b      	b.n	80066fa <HAL_TIM_PWM_Start+0x92>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d108      	bne.n	80066ba <HAL_TIM_PWM_Start+0x52>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2240      	movs	r2, #64	@ 0x40
 80066ac:	5c9b      	ldrb	r3, [r3, r2]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	3b01      	subs	r3, #1
 80066b2:	1e5a      	subs	r2, r3, #1
 80066b4:	4193      	sbcs	r3, r2
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	e01f      	b.n	80066fa <HAL_TIM_PWM_Start+0x92>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b0c      	cmp	r3, #12
 80066be:	d108      	bne.n	80066d2 <HAL_TIM_PWM_Start+0x6a>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2241      	movs	r2, #65	@ 0x41
 80066c4:	5c9b      	ldrb	r3, [r3, r2]
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	1e5a      	subs	r2, r3, #1
 80066cc:	4193      	sbcs	r3, r2
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	e013      	b.n	80066fa <HAL_TIM_PWM_Start+0x92>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b10      	cmp	r3, #16
 80066d6:	d108      	bne.n	80066ea <HAL_TIM_PWM_Start+0x82>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2242      	movs	r2, #66	@ 0x42
 80066dc:	5c9b      	ldrb	r3, [r3, r2]
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	1e5a      	subs	r2, r3, #1
 80066e4:	4193      	sbcs	r3, r2
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	e007      	b.n	80066fa <HAL_TIM_PWM_Start+0x92>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2243      	movs	r2, #67	@ 0x43
 80066ee:	5c9b      	ldrb	r3, [r3, r2]
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	3b01      	subs	r3, #1
 80066f4:	1e5a      	subs	r2, r3, #1
 80066f6:	4193      	sbcs	r3, r2
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e081      	b.n	8006806 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d104      	bne.n	8006712 <HAL_TIM_PWM_Start+0xaa>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	223e      	movs	r2, #62	@ 0x3e
 800670c:	2102      	movs	r1, #2
 800670e:	5499      	strb	r1, [r3, r2]
 8006710:	e023      	b.n	800675a <HAL_TIM_PWM_Start+0xf2>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b04      	cmp	r3, #4
 8006716:	d104      	bne.n	8006722 <HAL_TIM_PWM_Start+0xba>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	223f      	movs	r2, #63	@ 0x3f
 800671c:	2102      	movs	r1, #2
 800671e:	5499      	strb	r1, [r3, r2]
 8006720:	e01b      	b.n	800675a <HAL_TIM_PWM_Start+0xf2>
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b08      	cmp	r3, #8
 8006726:	d104      	bne.n	8006732 <HAL_TIM_PWM_Start+0xca>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2240      	movs	r2, #64	@ 0x40
 800672c:	2102      	movs	r1, #2
 800672e:	5499      	strb	r1, [r3, r2]
 8006730:	e013      	b.n	800675a <HAL_TIM_PWM_Start+0xf2>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b0c      	cmp	r3, #12
 8006736:	d104      	bne.n	8006742 <HAL_TIM_PWM_Start+0xda>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2241      	movs	r2, #65	@ 0x41
 800673c:	2102      	movs	r1, #2
 800673e:	5499      	strb	r1, [r3, r2]
 8006740:	e00b      	b.n	800675a <HAL_TIM_PWM_Start+0xf2>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b10      	cmp	r3, #16
 8006746:	d104      	bne.n	8006752 <HAL_TIM_PWM_Start+0xea>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2242      	movs	r2, #66	@ 0x42
 800674c:	2102      	movs	r1, #2
 800674e:	5499      	strb	r1, [r3, r2]
 8006750:	e003      	b.n	800675a <HAL_TIM_PWM_Start+0xf2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2243      	movs	r2, #67	@ 0x43
 8006756:	2102      	movs	r1, #2
 8006758:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	2201      	movs	r2, #1
 8006762:	0018      	movs	r0, r3
 8006764:	f000 fda6 	bl	80072b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a28      	ldr	r2, [pc, #160]	@ (8006810 <HAL_TIM_PWM_Start+0x1a8>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d009      	beq.n	8006786 <HAL_TIM_PWM_Start+0x11e>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a27      	ldr	r2, [pc, #156]	@ (8006814 <HAL_TIM_PWM_Start+0x1ac>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d004      	beq.n	8006786 <HAL_TIM_PWM_Start+0x11e>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a25      	ldr	r2, [pc, #148]	@ (8006818 <HAL_TIM_PWM_Start+0x1b0>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d101      	bne.n	800678a <HAL_TIM_PWM_Start+0x122>
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <HAL_TIM_PWM_Start+0x124>
 800678a:	2300      	movs	r3, #0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d008      	beq.n	80067a2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2180      	movs	r1, #128	@ 0x80
 800679c:	0209      	lsls	r1, r1, #8
 800679e:	430a      	orrs	r2, r1
 80067a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006810 <HAL_TIM_PWM_Start+0x1a8>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00a      	beq.n	80067c2 <HAL_TIM_PWM_Start+0x15a>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	2380      	movs	r3, #128	@ 0x80
 80067b2:	05db      	lsls	r3, r3, #23
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d004      	beq.n	80067c2 <HAL_TIM_PWM_Start+0x15a>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a17      	ldr	r2, [pc, #92]	@ (800681c <HAL_TIM_PWM_Start+0x1b4>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d116      	bne.n	80067f0 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	4a15      	ldr	r2, [pc, #84]	@ (8006820 <HAL_TIM_PWM_Start+0x1b8>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b06      	cmp	r3, #6
 80067d2:	d016      	beq.n	8006802 <HAL_TIM_PWM_Start+0x19a>
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	2380      	movs	r3, #128	@ 0x80
 80067d8:	025b      	lsls	r3, r3, #9
 80067da:	429a      	cmp	r2, r3
 80067dc:	d011      	beq.n	8006802 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2101      	movs	r1, #1
 80067ea:	430a      	orrs	r2, r1
 80067ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ee:	e008      	b.n	8006802 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2101      	movs	r1, #1
 80067fc:	430a      	orrs	r2, r1
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	e000      	b.n	8006804 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006802:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	0018      	movs	r0, r3
 8006808:	46bd      	mov	sp, r7
 800680a:	b004      	add	sp, #16
 800680c:	bd80      	pop	{r7, pc}
 800680e:	46c0      	nop			@ (mov r8, r8)
 8006810:	40012c00 	.word	0x40012c00
 8006814:	40014400 	.word	0x40014400
 8006818:	40014800 	.word	0x40014800
 800681c:	40000400 	.word	0x40000400
 8006820:	00010007 	.word	0x00010007

08006824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2202      	movs	r2, #2
 8006840:	4013      	ands	r3, r2
 8006842:	d021      	beq.n	8006888 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2202      	movs	r2, #2
 8006848:	4013      	ands	r3, r2
 800684a:	d01d      	beq.n	8006888 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2203      	movs	r2, #3
 8006852:	4252      	negs	r2, r2
 8006854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	2203      	movs	r2, #3
 8006864:	4013      	ands	r3, r2
 8006866:	d004      	beq.n	8006872 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	0018      	movs	r0, r3
 800686c:	f000 f9ea 	bl	8006c44 <HAL_TIM_IC_CaptureCallback>
 8006870:	e007      	b.n	8006882 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	0018      	movs	r0, r3
 8006876:	f000 f9dd 	bl	8006c34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	0018      	movs	r0, r3
 800687e:	f000 f9e9 	bl	8006c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2204      	movs	r2, #4
 800688c:	4013      	ands	r3, r2
 800688e:	d022      	beq.n	80068d6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2204      	movs	r2, #4
 8006894:	4013      	ands	r3, r2
 8006896:	d01e      	beq.n	80068d6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2205      	movs	r2, #5
 800689e:	4252      	negs	r2, r2
 80068a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2202      	movs	r2, #2
 80068a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	23c0      	movs	r3, #192	@ 0xc0
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4013      	ands	r3, r2
 80068b4:	d004      	beq.n	80068c0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	0018      	movs	r0, r3
 80068ba:	f000 f9c3 	bl	8006c44 <HAL_TIM_IC_CaptureCallback>
 80068be:	e007      	b.n	80068d0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	0018      	movs	r0, r3
 80068c4:	f000 f9b6 	bl	8006c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	0018      	movs	r0, r3
 80068cc:	f000 f9c2 	bl	8006c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2208      	movs	r2, #8
 80068da:	4013      	ands	r3, r2
 80068dc:	d021      	beq.n	8006922 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2208      	movs	r2, #8
 80068e2:	4013      	ands	r3, r2
 80068e4:	d01d      	beq.n	8006922 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2209      	movs	r2, #9
 80068ec:	4252      	negs	r2, r2
 80068ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2204      	movs	r2, #4
 80068f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	2203      	movs	r2, #3
 80068fe:	4013      	ands	r3, r2
 8006900:	d004      	beq.n	800690c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	0018      	movs	r0, r3
 8006906:	f000 f99d 	bl	8006c44 <HAL_TIM_IC_CaptureCallback>
 800690a:	e007      	b.n	800691c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	0018      	movs	r0, r3
 8006910:	f000 f990 	bl	8006c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	0018      	movs	r0, r3
 8006918:	f000 f99c 	bl	8006c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2210      	movs	r2, #16
 8006926:	4013      	ands	r3, r2
 8006928:	d022      	beq.n	8006970 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2210      	movs	r2, #16
 800692e:	4013      	ands	r3, r2
 8006930:	d01e      	beq.n	8006970 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2211      	movs	r2, #17
 8006938:	4252      	negs	r2, r2
 800693a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2208      	movs	r2, #8
 8006940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69da      	ldr	r2, [r3, #28]
 8006948:	23c0      	movs	r3, #192	@ 0xc0
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4013      	ands	r3, r2
 800694e:	d004      	beq.n	800695a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	0018      	movs	r0, r3
 8006954:	f000 f976 	bl	8006c44 <HAL_TIM_IC_CaptureCallback>
 8006958:	e007      	b.n	800696a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	0018      	movs	r0, r3
 800695e:	f000 f969 	bl	8006c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	0018      	movs	r0, r3
 8006966:	f000 f975 	bl	8006c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2201      	movs	r2, #1
 8006974:	4013      	ands	r3, r2
 8006976:	d00c      	beq.n	8006992 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	4013      	ands	r3, r2
 800697e:	d008      	beq.n	8006992 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2202      	movs	r2, #2
 8006986:	4252      	negs	r2, r2
 8006988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	0018      	movs	r0, r3
 800698e:	f7fa ff4f 	bl	8001830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2280      	movs	r2, #128	@ 0x80
 8006996:	4013      	ands	r3, r2
 8006998:	d104      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	2380      	movs	r3, #128	@ 0x80
 800699e:	019b      	lsls	r3, r3, #6
 80069a0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069a2:	d00b      	beq.n	80069bc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2280      	movs	r2, #128	@ 0x80
 80069a8:	4013      	ands	r3, r2
 80069aa:	d007      	beq.n	80069bc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a1e      	ldr	r2, [pc, #120]	@ (8006a2c <HAL_TIM_IRQHandler+0x208>)
 80069b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	0018      	movs	r0, r3
 80069b8:	f000 fd10 	bl	80073dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	2380      	movs	r3, #128	@ 0x80
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	4013      	ands	r3, r2
 80069c4:	d00b      	beq.n	80069de <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2280      	movs	r2, #128	@ 0x80
 80069ca:	4013      	ands	r3, r2
 80069cc:	d007      	beq.n	80069de <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a17      	ldr	r2, [pc, #92]	@ (8006a30 <HAL_TIM_IRQHandler+0x20c>)
 80069d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	0018      	movs	r0, r3
 80069da:	f000 fd07 	bl	80073ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2240      	movs	r2, #64	@ 0x40
 80069e2:	4013      	ands	r3, r2
 80069e4:	d00c      	beq.n	8006a00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2240      	movs	r2, #64	@ 0x40
 80069ea:	4013      	ands	r3, r2
 80069ec:	d008      	beq.n	8006a00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2241      	movs	r2, #65	@ 0x41
 80069f4:	4252      	negs	r2, r2
 80069f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	0018      	movs	r0, r3
 80069fc:	f000 f932 	bl	8006c64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2220      	movs	r2, #32
 8006a04:	4013      	ands	r3, r2
 8006a06:	d00c      	beq.n	8006a22 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	d008      	beq.n	8006a22 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2221      	movs	r2, #33	@ 0x21
 8006a16:	4252      	negs	r2, r2
 8006a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f000 fcd5 	bl	80073cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a22:	46c0      	nop			@ (mov r8, r8)
 8006a24:	46bd      	mov	sp, r7
 8006a26:	b004      	add	sp, #16
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	46c0      	nop			@ (mov r8, r8)
 8006a2c:	ffffdf7f 	.word	0xffffdf7f
 8006a30:	fffffeff 	.word	0xfffffeff

08006a34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a40:	2317      	movs	r3, #23
 8006a42:	18fb      	adds	r3, r7, r3
 8006a44:	2200      	movs	r2, #0
 8006a46:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	223c      	movs	r2, #60	@ 0x3c
 8006a4c:	5c9b      	ldrb	r3, [r3, r2]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <HAL_TIM_PWM_ConfigChannel+0x22>
 8006a52:	2302      	movs	r3, #2
 8006a54:	e0e5      	b.n	8006c22 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	223c      	movs	r2, #60	@ 0x3c
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b14      	cmp	r3, #20
 8006a62:	d900      	bls.n	8006a66 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006a64:	e0d1      	b.n	8006c0a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	009a      	lsls	r2, r3, #2
 8006a6a:	4b70      	ldr	r3, [pc, #448]	@ (8006c2c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006a6c:	18d3      	adds	r3, r2, r3
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	0011      	movs	r1, r2
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f000 f97e 	bl	8006d7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2108      	movs	r1, #8
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2104      	movs	r1, #4
 8006a9c:	438a      	bics	r2, r1
 8006a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6999      	ldr	r1, [r3, #24]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	619a      	str	r2, [r3, #24]
      break;
 8006ab2:	e0af      	b.n	8006c14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	0011      	movs	r1, r2
 8006abc:	0018      	movs	r0, r3
 8006abe:	f000 f9dd 	bl	8006e7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	699a      	ldr	r2, [r3, #24]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2180      	movs	r1, #128	@ 0x80
 8006ace:	0109      	lsls	r1, r1, #4
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4954      	ldr	r1, [pc, #336]	@ (8006c30 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006ae0:	400a      	ands	r2, r1
 8006ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6999      	ldr	r1, [r3, #24]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	021a      	lsls	r2, r3, #8
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	619a      	str	r2, [r3, #24]
      break;
 8006af8:	e08c      	b.n	8006c14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	0011      	movs	r1, r2
 8006b02:	0018      	movs	r0, r3
 8006b04:	f000 fa38 	bl	8006f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	69da      	ldr	r2, [r3, #28]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2108      	movs	r1, #8
 8006b14:	430a      	orrs	r2, r1
 8006b16:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	69da      	ldr	r2, [r3, #28]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2104      	movs	r1, #4
 8006b24:	438a      	bics	r2, r1
 8006b26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69d9      	ldr	r1, [r3, #28]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	691a      	ldr	r2, [r3, #16]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	61da      	str	r2, [r3, #28]
      break;
 8006b3a:	e06b      	b.n	8006c14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	0011      	movs	r1, r2
 8006b44:	0018      	movs	r0, r3
 8006b46:	f000 fa99 	bl	800707c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2180      	movs	r1, #128	@ 0x80
 8006b56:	0109      	lsls	r1, r1, #4
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69da      	ldr	r2, [r3, #28]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4932      	ldr	r1, [pc, #200]	@ (8006c30 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006b68:	400a      	ands	r2, r1
 8006b6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	69d9      	ldr	r1, [r3, #28]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	021a      	lsls	r2, r3, #8
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	61da      	str	r2, [r3, #28]
      break;
 8006b80:	e048      	b.n	8006c14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	0011      	movs	r1, r2
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	f000 fada 	bl	8007144 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2108      	movs	r1, #8
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2104      	movs	r1, #4
 8006bac:	438a      	bics	r2, r1
 8006bae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	691a      	ldr	r2, [r3, #16]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006bc2:	e027      	b.n	8006c14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	0011      	movs	r1, r2
 8006bcc:	0018      	movs	r0, r3
 8006bce:	f000 fb13 	bl	80071f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2180      	movs	r1, #128	@ 0x80
 8006bde:	0109      	lsls	r1, r1, #4
 8006be0:	430a      	orrs	r2, r1
 8006be2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4910      	ldr	r1, [pc, #64]	@ (8006c30 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006bf0:	400a      	ands	r2, r1
 8006bf2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	021a      	lsls	r2, r3, #8
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006c08:	e004      	b.n	8006c14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8006c0a:	2317      	movs	r3, #23
 8006c0c:	18fb      	adds	r3, r7, r3
 8006c0e:	2201      	movs	r2, #1
 8006c10:	701a      	strb	r2, [r3, #0]
      break;
 8006c12:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	223c      	movs	r2, #60	@ 0x3c
 8006c18:	2100      	movs	r1, #0
 8006c1a:	5499      	strb	r1, [r3, r2]

  return status;
 8006c1c:	2317      	movs	r3, #23
 8006c1e:	18fb      	adds	r3, r7, r3
 8006c20:	781b      	ldrb	r3, [r3, #0]
}
 8006c22:	0018      	movs	r0, r3
 8006c24:	46bd      	mov	sp, r7
 8006c26:	b006      	add	sp, #24
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	46c0      	nop			@ (mov r8, r8)
 8006c2c:	08007514 	.word	0x08007514
 8006c30:	fffffbff 	.word	0xfffffbff

08006c34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c3c:	46c0      	nop			@ (mov r8, r8)
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	b002      	add	sp, #8
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c4c:	46c0      	nop			@ (mov r8, r8)
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	b002      	add	sp, #8
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c5c:	46c0      	nop			@ (mov r8, r8)
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	b002      	add	sp, #8
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c6c:	46c0      	nop			@ (mov r8, r8)
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	b002      	add	sp, #8
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a37      	ldr	r2, [pc, #220]	@ (8006d64 <TIM_Base_SetConfig+0xf0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d008      	beq.n	8006c9e <TIM_Base_SetConfig+0x2a>
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	2380      	movs	r3, #128	@ 0x80
 8006c90:	05db      	lsls	r3, r3, #23
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d003      	beq.n	8006c9e <TIM_Base_SetConfig+0x2a>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a33      	ldr	r2, [pc, #204]	@ (8006d68 <TIM_Base_SetConfig+0xf4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d108      	bne.n	8006cb0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2270      	movs	r2, #112	@ 0x70
 8006ca2:	4393      	bics	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a2c      	ldr	r2, [pc, #176]	@ (8006d64 <TIM_Base_SetConfig+0xf0>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d014      	beq.n	8006ce2 <TIM_Base_SetConfig+0x6e>
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	2380      	movs	r3, #128	@ 0x80
 8006cbc:	05db      	lsls	r3, r3, #23
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d00f      	beq.n	8006ce2 <TIM_Base_SetConfig+0x6e>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a28      	ldr	r2, [pc, #160]	@ (8006d68 <TIM_Base_SetConfig+0xf4>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00b      	beq.n	8006ce2 <TIM_Base_SetConfig+0x6e>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a27      	ldr	r2, [pc, #156]	@ (8006d6c <TIM_Base_SetConfig+0xf8>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d007      	beq.n	8006ce2 <TIM_Base_SetConfig+0x6e>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a26      	ldr	r2, [pc, #152]	@ (8006d70 <TIM_Base_SetConfig+0xfc>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d003      	beq.n	8006ce2 <TIM_Base_SetConfig+0x6e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a25      	ldr	r2, [pc, #148]	@ (8006d74 <TIM_Base_SetConfig+0x100>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d108      	bne.n	8006cf4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4a24      	ldr	r2, [pc, #144]	@ (8006d78 <TIM_Base_SetConfig+0x104>)
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2280      	movs	r2, #128	@ 0x80
 8006cf8:	4393      	bics	r3, r2
 8006cfa:	001a      	movs	r2, r3
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	689a      	ldr	r2, [r3, #8]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a11      	ldr	r2, [pc, #68]	@ (8006d64 <TIM_Base_SetConfig+0xf0>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d007      	beq.n	8006d32 <TIM_Base_SetConfig+0xbe>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a12      	ldr	r2, [pc, #72]	@ (8006d70 <TIM_Base_SetConfig+0xfc>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d003      	beq.n	8006d32 <TIM_Base_SetConfig+0xbe>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a11      	ldr	r2, [pc, #68]	@ (8006d74 <TIM_Base_SetConfig+0x100>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d103      	bne.n	8006d3a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	691a      	ldr	r2, [r3, #16]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2201      	movs	r2, #1
 8006d46:	4013      	ands	r3, r2
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d106      	bne.n	8006d5a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	2201      	movs	r2, #1
 8006d52:	4393      	bics	r3, r2
 8006d54:	001a      	movs	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	611a      	str	r2, [r3, #16]
  }
}
 8006d5a:	46c0      	nop			@ (mov r8, r8)
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	b004      	add	sp, #16
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	46c0      	nop			@ (mov r8, r8)
 8006d64:	40012c00 	.word	0x40012c00
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40002000 	.word	0x40002000
 8006d70:	40014400 	.word	0x40014400
 8006d74:	40014800 	.word	0x40014800
 8006d78:	fffffcff 	.word	0xfffffcff

08006d7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	2201      	movs	r2, #1
 8006d92:	4393      	bics	r3, r2
 8006d94:	001a      	movs	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4a2e      	ldr	r2, [pc, #184]	@ (8006e64 <TIM_OC1_SetConfig+0xe8>)
 8006daa:	4013      	ands	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2203      	movs	r2, #3
 8006db2:	4393      	bics	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	4393      	bics	r3, r2
 8006dc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a24      	ldr	r2, [pc, #144]	@ (8006e68 <TIM_OC1_SetConfig+0xec>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d007      	beq.n	8006dea <TIM_OC1_SetConfig+0x6e>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a23      	ldr	r2, [pc, #140]	@ (8006e6c <TIM_OC1_SetConfig+0xf0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d003      	beq.n	8006dea <TIM_OC1_SetConfig+0x6e>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a22      	ldr	r2, [pc, #136]	@ (8006e70 <TIM_OC1_SetConfig+0xf4>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d10c      	bne.n	8006e04 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2208      	movs	r2, #8
 8006dee:	4393      	bics	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2204      	movs	r2, #4
 8006e00:	4393      	bics	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a18      	ldr	r2, [pc, #96]	@ (8006e68 <TIM_OC1_SetConfig+0xec>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d007      	beq.n	8006e1c <TIM_OC1_SetConfig+0xa0>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a17      	ldr	r2, [pc, #92]	@ (8006e6c <TIM_OC1_SetConfig+0xf0>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d003      	beq.n	8006e1c <TIM_OC1_SetConfig+0xa0>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a16      	ldr	r2, [pc, #88]	@ (8006e70 <TIM_OC1_SetConfig+0xf4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d111      	bne.n	8006e40 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	4a15      	ldr	r2, [pc, #84]	@ (8006e74 <TIM_OC1_SetConfig+0xf8>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	4a14      	ldr	r2, [pc, #80]	@ (8006e78 <TIM_OC1_SetConfig+0xfc>)
 8006e28:	4013      	ands	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	621a      	str	r2, [r3, #32]
}
 8006e5a:	46c0      	nop			@ (mov r8, r8)
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b006      	add	sp, #24
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	46c0      	nop			@ (mov r8, r8)
 8006e64:	fffeff8f 	.word	0xfffeff8f
 8006e68:	40012c00 	.word	0x40012c00
 8006e6c:	40014400 	.word	0x40014400
 8006e70:	40014800 	.word	0x40014800
 8006e74:	fffffeff 	.word	0xfffffeff
 8006e78:	fffffdff 	.word	0xfffffdff

08006e7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	2210      	movs	r2, #16
 8006e92:	4393      	bics	r3, r2
 8006e94:	001a      	movs	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8006f5c <TIM_OC2_SetConfig+0xe0>)
 8006eaa:	4013      	ands	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8006f60 <TIM_OC2_SetConfig+0xe4>)
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	021b      	lsls	r3, r3, #8
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	4393      	bics	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	011b      	lsls	r3, r3, #4
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a22      	ldr	r2, [pc, #136]	@ (8006f64 <TIM_OC2_SetConfig+0xe8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d10d      	bne.n	8006efa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2280      	movs	r2, #128	@ 0x80
 8006ee2:	4393      	bics	r3, r2
 8006ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	011b      	lsls	r3, r3, #4
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2240      	movs	r2, #64	@ 0x40
 8006ef6:	4393      	bics	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a19      	ldr	r2, [pc, #100]	@ (8006f64 <TIM_OC2_SetConfig+0xe8>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d007      	beq.n	8006f12 <TIM_OC2_SetConfig+0x96>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a18      	ldr	r2, [pc, #96]	@ (8006f68 <TIM_OC2_SetConfig+0xec>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d003      	beq.n	8006f12 <TIM_OC2_SetConfig+0x96>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a17      	ldr	r2, [pc, #92]	@ (8006f6c <TIM_OC2_SetConfig+0xf0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d113      	bne.n	8006f3a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	4a16      	ldr	r2, [pc, #88]	@ (8006f70 <TIM_OC2_SetConfig+0xf4>)
 8006f16:	4013      	ands	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	4a15      	ldr	r2, [pc, #84]	@ (8006f74 <TIM_OC2_SetConfig+0xf8>)
 8006f1e:	4013      	ands	r3, r2
 8006f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	621a      	str	r2, [r3, #32]
}
 8006f54:	46c0      	nop			@ (mov r8, r8)
 8006f56:	46bd      	mov	sp, r7
 8006f58:	b006      	add	sp, #24
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	feff8fff 	.word	0xfeff8fff
 8006f60:	fffffcff 	.word	0xfffffcff
 8006f64:	40012c00 	.word	0x40012c00
 8006f68:	40014400 	.word	0x40014400
 8006f6c:	40014800 	.word	0x40014800
 8006f70:	fffffbff 	.word	0xfffffbff
 8006f74:	fffff7ff 	.word	0xfffff7ff

08006f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	4a31      	ldr	r2, [pc, #196]	@ (8007054 <TIM_OC3_SetConfig+0xdc>)
 8006f8e:	401a      	ands	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8007058 <TIM_OC3_SetConfig+0xe0>)
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2203      	movs	r2, #3
 8006fac:	4393      	bics	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	4a27      	ldr	r2, [pc, #156]	@ (800705c <TIM_OC3_SetConfig+0xe4>)
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	021b      	lsls	r3, r3, #8
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a23      	ldr	r2, [pc, #140]	@ (8007060 <TIM_OC3_SetConfig+0xe8>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d10d      	bne.n	8006ff2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	4a22      	ldr	r2, [pc, #136]	@ (8007064 <TIM_OC3_SetConfig+0xec>)
 8006fda:	4013      	ands	r3, r2
 8006fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	021b      	lsls	r3, r3, #8
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	4a1e      	ldr	r2, [pc, #120]	@ (8007068 <TIM_OC3_SetConfig+0xf0>)
 8006fee:	4013      	ands	r3, r2
 8006ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8007060 <TIM_OC3_SetConfig+0xe8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d007      	beq.n	800700a <TIM_OC3_SetConfig+0x92>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800706c <TIM_OC3_SetConfig+0xf4>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d003      	beq.n	800700a <TIM_OC3_SetConfig+0x92>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a1a      	ldr	r2, [pc, #104]	@ (8007070 <TIM_OC3_SetConfig+0xf8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d113      	bne.n	8007032 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	4a19      	ldr	r2, [pc, #100]	@ (8007074 <TIM_OC3_SetConfig+0xfc>)
 800700e:	4013      	ands	r3, r2
 8007010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	4a18      	ldr	r2, [pc, #96]	@ (8007078 <TIM_OC3_SetConfig+0x100>)
 8007016:	4013      	ands	r3, r2
 8007018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	011b      	lsls	r3, r3, #4
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4313      	orrs	r3, r2
 8007030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	621a      	str	r2, [r3, #32]
}
 800704c:	46c0      	nop			@ (mov r8, r8)
 800704e:	46bd      	mov	sp, r7
 8007050:	b006      	add	sp, #24
 8007052:	bd80      	pop	{r7, pc}
 8007054:	fffffeff 	.word	0xfffffeff
 8007058:	fffeff8f 	.word	0xfffeff8f
 800705c:	fffffdff 	.word	0xfffffdff
 8007060:	40012c00 	.word	0x40012c00
 8007064:	fffff7ff 	.word	0xfffff7ff
 8007068:	fffffbff 	.word	0xfffffbff
 800706c:	40014400 	.word	0x40014400
 8007070:	40014800 	.word	0x40014800
 8007074:	ffffefff 	.word	0xffffefff
 8007078:	ffffdfff 	.word	0xffffdfff

0800707c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	4a24      	ldr	r2, [pc, #144]	@ (8007124 <TIM_OC4_SetConfig+0xa8>)
 8007092:	401a      	ands	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4a20      	ldr	r2, [pc, #128]	@ (8007128 <TIM_OC4_SetConfig+0xac>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4a1f      	ldr	r2, [pc, #124]	@ (800712c <TIM_OC4_SetConfig+0xb0>)
 80070b0:	4013      	ands	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007130 <TIM_OC4_SetConfig+0xb4>)
 80070c4:	4013      	ands	r3, r2
 80070c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	031b      	lsls	r3, r3, #12
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a17      	ldr	r2, [pc, #92]	@ (8007134 <TIM_OC4_SetConfig+0xb8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d007      	beq.n	80070ec <TIM_OC4_SetConfig+0x70>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a16      	ldr	r2, [pc, #88]	@ (8007138 <TIM_OC4_SetConfig+0xbc>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d003      	beq.n	80070ec <TIM_OC4_SetConfig+0x70>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a15      	ldr	r2, [pc, #84]	@ (800713c <TIM_OC4_SetConfig+0xc0>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d109      	bne.n	8007100 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	4a14      	ldr	r2, [pc, #80]	@ (8007140 <TIM_OC4_SetConfig+0xc4>)
 80070f0:	4013      	ands	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	019b      	lsls	r3, r3, #6
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	621a      	str	r2, [r3, #32]
}
 800711a:	46c0      	nop			@ (mov r8, r8)
 800711c:	46bd      	mov	sp, r7
 800711e:	b006      	add	sp, #24
 8007120:	bd80      	pop	{r7, pc}
 8007122:	46c0      	nop			@ (mov r8, r8)
 8007124:	ffffefff 	.word	0xffffefff
 8007128:	feff8fff 	.word	0xfeff8fff
 800712c:	fffffcff 	.word	0xfffffcff
 8007130:	ffffdfff 	.word	0xffffdfff
 8007134:	40012c00 	.word	0x40012c00
 8007138:	40014400 	.word	0x40014400
 800713c:	40014800 	.word	0x40014800
 8007140:	ffffbfff 	.word	0xffffbfff

08007144 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	4a21      	ldr	r2, [pc, #132]	@ (80071e0 <TIM_OC5_SetConfig+0x9c>)
 800715a:	401a      	ands	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800716a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4a1d      	ldr	r2, [pc, #116]	@ (80071e4 <TIM_OC5_SetConfig+0xa0>)
 8007170:	4013      	ands	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	4a19      	ldr	r2, [pc, #100]	@ (80071e8 <TIM_OC5_SetConfig+0xa4>)
 8007182:	4013      	ands	r3, r2
 8007184:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	041b      	lsls	r3, r3, #16
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	4313      	orrs	r3, r2
 8007190:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a15      	ldr	r2, [pc, #84]	@ (80071ec <TIM_OC5_SetConfig+0xa8>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d007      	beq.n	80071aa <TIM_OC5_SetConfig+0x66>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a14      	ldr	r2, [pc, #80]	@ (80071f0 <TIM_OC5_SetConfig+0xac>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d003      	beq.n	80071aa <TIM_OC5_SetConfig+0x66>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a13      	ldr	r2, [pc, #76]	@ (80071f4 <TIM_OC5_SetConfig+0xb0>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d109      	bne.n	80071be <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	4a0c      	ldr	r2, [pc, #48]	@ (80071e0 <TIM_OC5_SetConfig+0x9c>)
 80071ae:	4013      	ands	r3, r2
 80071b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	021b      	lsls	r3, r3, #8
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	621a      	str	r2, [r3, #32]
}
 80071d8:	46c0      	nop			@ (mov r8, r8)
 80071da:	46bd      	mov	sp, r7
 80071dc:	b006      	add	sp, #24
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	fffeffff 	.word	0xfffeffff
 80071e4:	fffeff8f 	.word	0xfffeff8f
 80071e8:	fffdffff 	.word	0xfffdffff
 80071ec:	40012c00 	.word	0x40012c00
 80071f0:	40014400 	.word	0x40014400
 80071f4:	40014800 	.word	0x40014800

080071f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	4a22      	ldr	r2, [pc, #136]	@ (8007298 <TIM_OC6_SetConfig+0xa0>)
 800720e:	401a      	ands	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4a1e      	ldr	r2, [pc, #120]	@ (800729c <TIM_OC6_SetConfig+0xa4>)
 8007224:	4013      	ands	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	021b      	lsls	r3, r3, #8
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	4313      	orrs	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	4a1a      	ldr	r2, [pc, #104]	@ (80072a0 <TIM_OC6_SetConfig+0xa8>)
 8007238:	4013      	ands	r3, r2
 800723a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	051b      	lsls	r3, r3, #20
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	4313      	orrs	r3, r2
 8007246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a16      	ldr	r2, [pc, #88]	@ (80072a4 <TIM_OC6_SetConfig+0xac>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d007      	beq.n	8007260 <TIM_OC6_SetConfig+0x68>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a15      	ldr	r2, [pc, #84]	@ (80072a8 <TIM_OC6_SetConfig+0xb0>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d003      	beq.n	8007260 <TIM_OC6_SetConfig+0x68>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a14      	ldr	r2, [pc, #80]	@ (80072ac <TIM_OC6_SetConfig+0xb4>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d109      	bne.n	8007274 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	4a13      	ldr	r2, [pc, #76]	@ (80072b0 <TIM_OC6_SetConfig+0xb8>)
 8007264:	4013      	ands	r3, r2
 8007266:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	029b      	lsls	r3, r3, #10
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4313      	orrs	r3, r2
 8007272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	621a      	str	r2, [r3, #32]
}
 800728e:	46c0      	nop			@ (mov r8, r8)
 8007290:	46bd      	mov	sp, r7
 8007292:	b006      	add	sp, #24
 8007294:	bd80      	pop	{r7, pc}
 8007296:	46c0      	nop			@ (mov r8, r8)
 8007298:	ffefffff 	.word	0xffefffff
 800729c:	feff8fff 	.word	0xfeff8fff
 80072a0:	ffdfffff 	.word	0xffdfffff
 80072a4:	40012c00 	.word	0x40012c00
 80072a8:	40014400 	.word	0x40014400
 80072ac:	40014800 	.word	0x40014800
 80072b0:	fffbffff 	.word	0xfffbffff

080072b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	221f      	movs	r2, #31
 80072c4:	4013      	ands	r3, r2
 80072c6:	2201      	movs	r2, #1
 80072c8:	409a      	lsls	r2, r3
 80072ca:	0013      	movs	r3, r2
 80072cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	43d2      	mvns	r2, r2
 80072d6:	401a      	ands	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a1a      	ldr	r2, [r3, #32]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	211f      	movs	r1, #31
 80072e4:	400b      	ands	r3, r1
 80072e6:	6879      	ldr	r1, [r7, #4]
 80072e8:	4099      	lsls	r1, r3
 80072ea:	000b      	movs	r3, r1
 80072ec:	431a      	orrs	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	621a      	str	r2, [r3, #32]
}
 80072f2:	46c0      	nop			@ (mov r8, r8)
 80072f4:	46bd      	mov	sp, r7
 80072f6:	b006      	add	sp, #24
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	223c      	movs	r2, #60	@ 0x3c
 800730a:	5c9b      	ldrb	r3, [r3, r2]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d101      	bne.n	8007314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007310:	2302      	movs	r3, #2
 8007312:	e050      	b.n	80073b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	223c      	movs	r2, #60	@ 0x3c
 8007318:	2101      	movs	r1, #1
 800731a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	223d      	movs	r2, #61	@ 0x3d
 8007320:	2102      	movs	r1, #2
 8007322:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a21      	ldr	r2, [pc, #132]	@ (80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d108      	bne.n	8007350 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4a20      	ldr	r2, [pc, #128]	@ (80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007342:	4013      	ands	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2270      	movs	r2, #112	@ 0x70
 8007354:	4393      	bics	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a14      	ldr	r2, [pc, #80]	@ (80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00a      	beq.n	800738a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	2380      	movs	r3, #128	@ 0x80
 800737a:	05db      	lsls	r3, r3, #23
 800737c:	429a      	cmp	r2, r3
 800737e:	d004      	beq.n	800738a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a10      	ldr	r2, [pc, #64]	@ (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d10c      	bne.n	80073a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2280      	movs	r2, #128	@ 0x80
 800738e:	4393      	bics	r3, r2
 8007390:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	4313      	orrs	r3, r2
 800739a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	223d      	movs	r2, #61	@ 0x3d
 80073a8:	2101      	movs	r1, #1
 80073aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	223c      	movs	r2, #60	@ 0x3c
 80073b0:	2100      	movs	r1, #0
 80073b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	0018      	movs	r0, r3
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b004      	add	sp, #16
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	46c0      	nop			@ (mov r8, r8)
 80073c0:	40012c00 	.word	0x40012c00
 80073c4:	ff0fffff 	.word	0xff0fffff
 80073c8:	40000400 	.word	0x40000400

080073cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073d4:	46c0      	nop			@ (mov r8, r8)
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b002      	add	sp, #8
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073e4:	46c0      	nop			@ (mov r8, r8)
 80073e6:	46bd      	mov	sp, r7
 80073e8:	b002      	add	sp, #8
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073f4:	46c0      	nop			@ (mov r8, r8)
 80073f6:	46bd      	mov	sp, r7
 80073f8:	b002      	add	sp, #8
 80073fa:	bd80      	pop	{r7, pc}

080073fc <memset>:
 80073fc:	0003      	movs	r3, r0
 80073fe:	1882      	adds	r2, r0, r2
 8007400:	4293      	cmp	r3, r2
 8007402:	d100      	bne.n	8007406 <memset+0xa>
 8007404:	4770      	bx	lr
 8007406:	7019      	strb	r1, [r3, #0]
 8007408:	3301      	adds	r3, #1
 800740a:	e7f9      	b.n	8007400 <memset+0x4>

0800740c <__libc_init_array>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	2600      	movs	r6, #0
 8007410:	4c0c      	ldr	r4, [pc, #48]	@ (8007444 <__libc_init_array+0x38>)
 8007412:	4d0d      	ldr	r5, [pc, #52]	@ (8007448 <__libc_init_array+0x3c>)
 8007414:	1b64      	subs	r4, r4, r5
 8007416:	10a4      	asrs	r4, r4, #2
 8007418:	42a6      	cmp	r6, r4
 800741a:	d109      	bne.n	8007430 <__libc_init_array+0x24>
 800741c:	2600      	movs	r6, #0
 800741e:	f000 f823 	bl	8007468 <_init>
 8007422:	4c0a      	ldr	r4, [pc, #40]	@ (800744c <__libc_init_array+0x40>)
 8007424:	4d0a      	ldr	r5, [pc, #40]	@ (8007450 <__libc_init_array+0x44>)
 8007426:	1b64      	subs	r4, r4, r5
 8007428:	10a4      	asrs	r4, r4, #2
 800742a:	42a6      	cmp	r6, r4
 800742c:	d105      	bne.n	800743a <__libc_init_array+0x2e>
 800742e:	bd70      	pop	{r4, r5, r6, pc}
 8007430:	00b3      	lsls	r3, r6, #2
 8007432:	58eb      	ldr	r3, [r5, r3]
 8007434:	4798      	blx	r3
 8007436:	3601      	adds	r6, #1
 8007438:	e7ee      	b.n	8007418 <__libc_init_array+0xc>
 800743a:	00b3      	lsls	r3, r6, #2
 800743c:	58eb      	ldr	r3, [r5, r3]
 800743e:	4798      	blx	r3
 8007440:	3601      	adds	r6, #1
 8007442:	e7f2      	b.n	800742a <__libc_init_array+0x1e>
 8007444:	08007568 	.word	0x08007568
 8007448:	08007568 	.word	0x08007568
 800744c:	0800756c 	.word	0x0800756c
 8007450:	08007568 	.word	0x08007568

08007454 <memcpy>:
 8007454:	2300      	movs	r3, #0
 8007456:	b510      	push	{r4, lr}
 8007458:	429a      	cmp	r2, r3
 800745a:	d100      	bne.n	800745e <memcpy+0xa>
 800745c:	bd10      	pop	{r4, pc}
 800745e:	5ccc      	ldrb	r4, [r1, r3]
 8007460:	54c4      	strb	r4, [r0, r3]
 8007462:	3301      	adds	r3, #1
 8007464:	e7f8      	b.n	8007458 <memcpy+0x4>
	...

08007468 <_init>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	46c0      	nop			@ (mov r8, r8)
 800746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	469e      	mov	lr, r3
 8007472:	4770      	bx	lr

08007474 <_fini>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	46c0      	nop			@ (mov r8, r8)
 8007478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747a:	bc08      	pop	{r3}
 800747c:	469e      	mov	lr, r3
 800747e:	4770      	bx	lr
