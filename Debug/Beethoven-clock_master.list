
Beethoven-clock_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d3c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08007df8  08007df8  00008df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ee0  08007ee0  00009098  2**0
                  CONTENTS
  4 .ARM          00000000  08007ee0  08007ee0  00009098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ee0  08007ee0  00009098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ee0  08007ee0  00008ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ee4  08007ee4  00008ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08007ee8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  20000098  08007f80  00009098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08007f80  000094b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bb7  00000000  00000000  000090c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036bc  00000000  00000000  00020c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  00024338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000117f  00000000  00000000  000259b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194e7  00000000  00000000  00026b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0de  00000000  00000000  00040016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c54f  00000000  00000000  0005c0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8643  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005164  00000000  00000000  000f8688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000fd7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000098 	.word	0x20000098
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007de0 	.word	0x08007de0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000009c 	.word	0x2000009c
 8000100:	08007de0 	.word	0x08007de0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <capTouch_Init>:

#include "AT42QT1070.h"


uint8_t capTouch_Init(QT1070 *capTouch, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htimDelay,
					GPIO_TypeDef **capTouchResetPort, uint16_t capTouchResetPin, uint8_t keyEnFlags) {
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800022a:	231e      	movs	r3, #30
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]

	// Assign handlers and GPIO pins for specific instance
	capTouch->hi2c = hi2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

	capTouch->delayTimer = htimDelay;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]

	capTouch->resetPort = capTouchResetPort;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	609a      	str	r2, [r3, #8]
	capTouch->resetPin = capTouchResetPin;
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	2330      	movs	r3, #48	@ 0x30
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	8193      	strh	r3, [r2, #12]

	// Hardware reset device
	// Assumes active-low hardware configuration
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_RESET);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	899b      	ldrh	r3, [r3, #12]
 8000258:	2200      	movs	r2, #0
 800025a:	0019      	movs	r1, r3
 800025c:	f003 fa27 	bl	80036ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(*capTouch->resetPort, capTouch->resetPin, GPIO_PIN_SET);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	899b      	ldrh	r3, [r3, #12]
 800026a:	2201      	movs	r2, #1
 800026c:	0019      	movs	r1, r3
 800026e:	f003 fa1e 	bl	80036ae <HAL_GPIO_WritePin>

	/*
	 *  Delay for 500 ms using hardware timer
	 */
	HAL_TIM_Base_Stop(capTouch->delayTimer);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f006 fdb2 	bl	8006de0 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(capTouch->delayTimer);							// Begin timer counting
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	0018      	movs	r0, r3
 8000282:	f006 fd61 	bl	8006d48 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(capTouch->delayTimer);	// Get initial timer value to compare to
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	61bb      	str	r3, [r7, #24]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(capTouch->delayTimer) - timerVal <= (65535 / 2)){ }
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	2380      	movs	r3, #128	@ 0x80
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f5      	bcc.n	8000292 <capTouch_Init+0x76>

    // Determines the number of times to try each initialization step
	uint8_t numTries = 3;
 80002a6:	231f      	movs	r3, #31
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2203      	movs	r2, #3
 80002ac:	701a      	strb	r2, [r3, #0]

	// Verify device ID
		uint8_t deviceIDRet = 0x00;
 80002ae:	2317      	movs	r3, #23
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

		while(numTries != 0) {
 80002b6:	e014      	b.n	80002e2 <capTouch_Init+0xc6>
			halRet = capTouch_ReadDeviceID(capTouch, &deviceIDRet);
 80002b8:	251e      	movs	r5, #30
 80002ba:	197c      	adds	r4, r7, r5
 80002bc:	2317      	movs	r3, #23
 80002be:	18fa      	adds	r2, r7, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	0011      	movs	r1, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f8ad 	bl	8000424 <capTouch_ReadDeviceID>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80002ce:	197b      	adds	r3, r7, r5
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d00b      	beq.n	80002ee <capTouch_Init+0xd2>
				break;

			numTries--;
 80002d6:	211f      	movs	r1, #31
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	3a01      	subs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80002e2:	231f      	movs	r3, #31
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1e5      	bne.n	80002b8 <capTouch_Init+0x9c>
 80002ec:	e000      	b.n	80002f0 <capTouch_Init+0xd4>
				break;
 80002ee:	46c0      	nop			@ (mov r8, r8)
		}
		if(deviceIDRet != DEVICE_ID || numTries == 0) {
 80002f0:	2317      	movs	r3, #23
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80002f8:	d104      	bne.n	8000304 <capTouch_Init+0xe8>
 80002fa:	231f      	movs	r3, #31
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <capTouch_Init+0xec>
			return 1;
 8000304:	2301      	movs	r3, #1
 8000306:	e089      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->deviceID = deviceIDRet;
 8000308:	2317      	movs	r3, #23
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	781a      	ldrb	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	739a      	strb	r2, [r3, #14]

		numTries = 3;
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	2203      	movs	r2, #3
 8000318:	701a      	strb	r2, [r3, #0]

	// Force Device Recalibration
		while(numTries != 0) {
 800031a:	e019      	b.n	8000350 <capTouch_Init+0x134>
			halRet = capTouch_Recalibrate(capTouch);
 800031c:	231e      	movs	r3, #30
 800031e:	18fc      	adds	r4, r7, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	0018      	movs	r0, r3
 8000324:	f000 f8c0 	bl	80004a8 <capTouch_Recalibrate>
 8000328:	0003      	movs	r3, r0
 800032a:	7023      	strb	r3, [r4, #0]

			// Wait until calibration sequence completes
			while(capTouch_checkCal(capTouch)) {}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f8db 	bl	80004ec <capTouch_checkCal>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d1f9      	bne.n	800032e <capTouch_Init+0x112>

			if (halRet == HAL_OK)
 800033a:	231e      	movs	r3, #30
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d00b      	beq.n	800035c <capTouch_Init+0x140>
				break;

			numTries--;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	187b      	adds	r3, r7, r1
 800034c:	3a01      	subs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 8000350:	231f      	movs	r3, #31
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1e0      	bne.n	800031c <capTouch_Init+0x100>
 800035a:	e000      	b.n	800035e <capTouch_Init+0x142>
				break;
 800035c:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 800035e:	231f      	movs	r3, #31
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d101      	bne.n	800036c <capTouch_Init+0x150>
			return 2;
 8000368:	2302      	movs	r3, #2
 800036a:	e057      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 800036c:	231f      	movs	r3, #31
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]

	// Get initial reading of channels
		while(numTries != 0) {
 8000374:	e011      	b.n	800039a <capTouch_Init+0x17e>

			halRet = capTouch_readChannels(capTouch);
 8000376:	251e      	movs	r5, #30
 8000378:	197c      	adds	r4, r7, r5
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0018      	movs	r0, r3
 800037e:	f000 f8f9 	bl	8000574 <capTouch_readChannels>
 8000382:	0003      	movs	r3, r0
 8000384:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00b      	beq.n	80003a6 <capTouch_Init+0x18a>
				break;

			numTries--;
 800038e:	211f      	movs	r1, #31
 8000390:	187b      	adds	r3, r7, r1
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	187b      	adds	r3, r7, r1
 8000396:	3a01      	subs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 800039a:	231f      	movs	r3, #31
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e8      	bne.n	8000376 <capTouch_Init+0x15a>
 80003a4:	e000      	b.n	80003a8 <capTouch_Init+0x18c>
				break;
 80003a6:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003a8:	231f      	movs	r3, #31
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d101      	bne.n	80003b6 <capTouch_Init+0x19a>
			return 3;
 80003b2:	2303      	movs	r3, #3
 80003b4:	e032      	b.n	800041c <capTouch_Init+0x200>
		}

		numTries = 3;
 80003b6:	231f      	movs	r3, #31
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2203      	movs	r2, #3
 80003bc:	701a      	strb	r2, [r3, #0]

	// Enable keys based on passed initialization byte
		while(numTries != 0) {
 80003be:	e015      	b.n	80003ec <capTouch_Init+0x1d0>

			halRet = capTouch_enableKeys(capTouch, keyEnFlags);
 80003c0:	251e      	movs	r5, #30
 80003c2:	197c      	adds	r4, r7, r5
 80003c4:	2334      	movs	r3, #52	@ 0x34
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f914 	bl	80005fc <capTouch_enableKeys>
 80003d4:	0003      	movs	r3, r0
 80003d6:	7023      	strb	r3, [r4, #0]

			if (halRet == HAL_OK)
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <capTouch_Init+0x1dc>
				break;

			numTries--;
 80003e0:	211f      	movs	r1, #31
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3a01      	subs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		while(numTries != 0) {
 80003ec:	231f      	movs	r3, #31
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1e4      	bne.n	80003c0 <capTouch_Init+0x1a4>
 80003f6:	e000      	b.n	80003fa <capTouch_Init+0x1de>
				break;
 80003f8:	46c0      	nop			@ (mov r8, r8)

		}
		if(numTries == 0) {
 80003fa:	231f      	movs	r3, #31
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <capTouch_Init+0x1ec>
			return 4;
 8000404:	2304      	movs	r3, #4
 8000406:	e009      	b.n	800041c <capTouch_Init+0x200>
		}

		capTouch->keys = keyEnFlags;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2234      	movs	r2, #52	@ 0x34
 800040c:	18ba      	adds	r2, r7, r2
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	73da      	strb	r2, [r3, #15]

		numTries = 3;
 8000412:	231f      	movs	r3, #31
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]

	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	b008      	add	sp, #32
 8000422:	bdb0      	pop	{r4, r5, r7, pc}

08000424 <capTouch_ReadDeviceID>:

HAL_StatusTypeDef capTouch_ReadDeviceID(QT1070 *capTouch, uint8_t *dataBuff) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	uint8_t deviceIDRet_I2C = 0x00;
 800042e:	230e      	movs	r3, #14
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000436:	250f      	movs	r5, #15
 8000438:	197b      	adds	r3, r7, r5
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

	uint8_t capTouch_DeviceIDReg_TX[1] = {capTouch_DeviceIDReg};
 800043e:	210c      	movs	r1, #12
 8000440:	187b      	adds	r3, r7, r1
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <capTouch_ReadDeviceID+0x80>)
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	197c      	adds	r4, r7, r5
 800044e:	187a      	adds	r2, r7, r1
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2136      	movs	r1, #54	@ 0x36
 800045a:	f003 fa31 	bl	80038c0 <HAL_I2C_Master_Transmit>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
										&(capTouch_DeviceIDReg_TX[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000462:	197b      	adds	r3, r7, r5
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <capTouch_ReadDeviceID+0x4c>
		return halRet;
 800046a:	197b      	adds	r3, r7, r5
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	e014      	b.n	800049a <capTouch_ReadDeviceID+0x76>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &deviceIDRet_I2C, 1, HAL_MAX_DELAY);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	250f      	movs	r5, #15
 8000476:	197c      	adds	r4, r7, r5
 8000478:	260e      	movs	r6, #14
 800047a:	19ba      	adds	r2, r7, r6
 800047c:	2301      	movs	r3, #1
 800047e:	425b      	negs	r3, r3
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2136      	movs	r1, #54	@ 0x36
 8000486:	f003 fb45 	bl	8003b14 <HAL_I2C_Master_Receive>
 800048a:	0003      	movs	r3, r0
 800048c:	7023      	strb	r3, [r4, #0]

	*dataBuff = deviceIDRet_I2C;
 800048e:	19bb      	adds	r3, r7, r6
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	701a      	strb	r2, [r3, #0]

	return halRet;
 8000496:	197b      	adds	r3, r7, r5
 8000498:	781b      	ldrb	r3, [r3, #0]

}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b005      	add	sp, #20
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	08007df8 	.word	0x08007df8

080004a8 <capTouch_Recalibrate>:

HAL_StatusTypeDef capTouch_Recalibrate(QT1070 *capTouch) {
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004b0:	210f      	movs	r1, #15
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	/*
	 * Writing any non-zero value to the calibrate register
	 * will enter a recalibration mode
	 */

	uint8_t deviceCal[2] = {capTouch_CalibrateReg, 0xFF};
 80004b8:	260c      	movs	r6, #12
 80004ba:	19bb      	adds	r3, r7, r6
 80004bc:	22c8      	movs	r2, #200	@ 0xc8
 80004be:	4252      	negs	r2, r2
 80004c0:	801a      	strh	r2, [r3, #0]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	000d      	movs	r5, r1
 80004c8:	187c      	adds	r4, r7, r1
 80004ca:	19ba      	adds	r2, r7, r6
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2302      	movs	r3, #2
 80004d4:	2136      	movs	r1, #54	@ 0x36
 80004d6:	f003 f9f3 	bl	80038c0 <HAL_I2C_Master_Transmit>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
									deviceCal, 2, HAL_MAX_DELAY);

	return halRet;
 80004de:	197b      	adds	r3, r7, r5
 80004e0:	781b      	ldrb	r3, [r3, #0]

}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b005      	add	sp, #20
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004ec <capTouch_checkCal>:

uint8_t capTouch_checkCal(QT1070 *capTouch) {
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 80004f4:	210f      	movs	r1, #15
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]

	uint8_t detectionStatusRet = 0x00;
 80004fc:	230d      	movs	r3, #13
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	uint8_t calibrationFlag;

	uint8_t capTouch_DetectionStatusReg_I2C[1] = {capTouch_DetectionStatusReg};
 8000504:	260c      	movs	r6, #12
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <capTouch_checkCal+0x84>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	000d      	movs	r5, r1
 8000514:	187c      	adds	r4, r7, r1
 8000516:	19ba      	adds	r2, r7, r6
 8000518:	2301      	movs	r3, #1
 800051a:	425b      	negs	r3, r3
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	2136      	movs	r1, #54	@ 0x36
 8000522:	f003 f9cd 	bl	80038c0 <HAL_I2C_Master_Transmit>
 8000526:	0003      	movs	r3, r0
 8000528:	7023      	strb	r3, [r4, #0]
									&(capTouch_DetectionStatusReg_I2C[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 800052a:	197b      	adds	r3, r7, r5
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <capTouch_checkCal+0x4c>
		return halRet;
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	e016      	b.n	8000566 <capTouch_checkCal+0x7a>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &detectionStatusRet, 1, HAL_MAX_DELAY);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fc      	adds	r4, r7, r3
 8000540:	250d      	movs	r5, #13
 8000542:	197a      	adds	r2, r7, r5
 8000544:	2301      	movs	r3, #1
 8000546:	425b      	negs	r3, r3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	2136      	movs	r1, #54	@ 0x36
 800054e:	f003 fae1 	bl	8003b14 <HAL_I2C_Master_Receive>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]

	calibrationFlag = (detectionStatusRet & 0b10000000) >> 7;
 8000556:	197b      	adds	r3, r7, r5
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	210e      	movs	r1, #14
 800055c:	187b      	adds	r3, r7, r1
 800055e:	09d2      	lsrs	r2, r2, #7
 8000560:	701a      	strb	r2, [r3, #0]

	return calibrationFlag;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	781b      	ldrb	r3, [r3, #0]

}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b005      	add	sp, #20
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	08007dfc 	.word	0x08007dfc

08000574 <capTouch_readChannels>:

HAL_StatusTypeDef capTouch_readChannels(QT1070 *capTouch) {
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b087      	sub	sp, #28
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 800057c:	210f      	movs	r1, #15
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatusRet = 0x00;
 8000584:	230e      	movs	r3, #14
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]

	uint8_t keyStatReg[1] = {capTouch_KeyStatusReg};
 800058c:	260c      	movs	r6, #12
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	4a19      	ldr	r2, [pc, #100]	@ (80005f8 <capTouch_readChannels+0x84>)
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	000d      	movs	r5, r1
 800059c:	187c      	adds	r4, r7, r1
 800059e:	19ba      	adds	r2, r7, r6
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2136      	movs	r1, #54	@ 0x36
 80005aa:	f003 f989 	bl	80038c0 <HAL_I2C_Master_Transmit>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
									&(keyStatReg[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 80005b2:	197b      	adds	r3, r7, r5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <capTouch_readChannels+0x4c>
		return halRet;
 80005ba:	197b      	adds	r3, r7, r5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e017      	b.n	80005f0 <capTouch_readChannels+0x7c>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, &keyStatusRet, 1, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	260e      	movs	r6, #14
 80005ca:	19ba      	adds	r2, r7, r6
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2136      	movs	r1, #54	@ 0x36
 80005d6:	f003 fa9d 	bl	8003b14 <HAL_I2C_Master_Receive>
 80005da:	0003      	movs	r3, r0
 80005dc:	7023      	strb	r3, [r4, #0]

	capTouch->keyStat = keyStatusRet & 0b01111111;
 80005de:	19bb      	adds	r3, r7, r6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	227f      	movs	r2, #127	@ 0x7f
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	741a      	strb	r2, [r3, #16]

	return halRet;
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]

}
 80005f0:	0018      	movs	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b005      	add	sp, #20
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	08007e00 	.word	0x08007e00

080005fc <capTouch_enableKeys>:

HAL_StatusTypeDef capTouch_enableKeys(QT1070 *capTouch, uint8_t dataBuff) {
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	b08b      	sub	sp, #44	@ 0x2c
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800060a:	241e      	movs	r4, #30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000612:	2314      	movs	r3, #20
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	4a39      	ldr	r2, [pc, #228]	@ (80006fc <capTouch_enableKeys+0x100>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	6019      	str	r1, [r3, #0]
 800061c:	8891      	ldrh	r1, [r2, #4]
 800061e:	8099      	strh	r1, [r3, #4]
 8000620:	7992      	ldrb	r2, [r2, #6]
 8000622:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000624:	260c      	movs	r6, #12
 8000626:	19bb      	adds	r3, r7, r6
 8000628:	4a35      	ldr	r2, [pc, #212]	@ (8000700 <capTouch_enableKeys+0x104>)
 800062a:	6811      	ldr	r1, [r2, #0]
 800062c:	6019      	str	r1, [r3, #0]
 800062e:	8891      	ldrh	r1, [r2, #4]
 8000630:	8099      	strh	r1, [r3, #4]
 8000632:	7992      	ldrb	r2, [r2, #6]
 8000634:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	0025      	movs	r5, r4
 800063c:	193c      	adds	r4, r7, r4
 800063e:	19ba      	adds	r2, r7, r6
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	2136      	movs	r1, #54	@ 0x36
 800064a:	f003 f939 	bl	80038c0 <HAL_I2C_Master_Transmit>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <capTouch_enableKeys+0x64>
		return halRet;
 800065a:	197b      	adds	r3, r7, r5
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e049      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	251e      	movs	r5, #30
 8000666:	197c      	adds	r4, r7, r5
 8000668:	2314      	movs	r3, #20
 800066a:	18fa      	adds	r2, r7, r3
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2307      	movs	r3, #7
 8000674:	2136      	movs	r1, #54	@ 0x36
 8000676:	f003 fa4d 	bl	8003b14 <HAL_I2C_Master_Receive>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 800067e:	197b      	adds	r3, r7, r5
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <capTouch_enableKeys+0x90>
		return halRet;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	e033      	b.n	80006f4 <capTouch_enableKeys+0xf8>

	uint8_t i;

	for(i = 0; i <= 6; i++) {
 800068c:	231f      	movs	r3, #31
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01c      	b.n	80006d0 <capTouch_enableKeys+0xd4>
//			avgRet[i] = avgRet[i] | 0b00100000;
//		}

		// New value to pass only changes bits 2-6.
		// If bit i of dataBuff = 0, set these bits to 0, else leave them.
		avgRet[i] = (avgRet[i] >> 2) * ((dataBuff >> i) & 0b00000001);
 8000696:	201f      	movs	r0, #31
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2414      	movs	r4, #20
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	5cd3      	ldrb	r3, [r2, r3]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4119      	asrs	r1, r3
 80006b0:	000b      	movs	r3, r1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	400b      	ands	r3, r1
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	183b      	adds	r3, r7, r0
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	434a      	muls	r2, r1
 80006c0:	b2d1      	uxtb	r1, r2
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i <= 6; i++) {
 80006c6:	183b      	adds	r3, r7, r0
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	231f      	movs	r3, #31
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d9dd      	bls.n	8000696 <capTouch_enableKeys+0x9a>

	}

	halRet = capTouch_SetAveragingFactor(capTouch, avgRet);
 80006da:	251e      	movs	r5, #30
 80006dc:	197c      	adds	r4, r7, r5
 80006de:	2314      	movs	r3, #20
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f80c 	bl	8000704 <capTouch_SetAveragingFactor>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]

	return halRet;
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	781b      	ldrb	r3, [r3, #0]

}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b009      	add	sp, #36	@ 0x24
 80006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fc:	08007e04 	.word	0x08007e04
 8000700:	08007e0c 	.word	0x08007e0c

08000704 <capTouch_SetAveragingFactor>:

HAL_StatusTypeDef capTouch_SetAveragingFactor(QT1070 *capTouch, uint8_t *dataBuff) {
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 800070e:	241e      	movs	r4, #30
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	/*
	 *  Read in current averaging values for each key
	 *  The device will automatically increment register addressing for subsequent reads,
	 *  so only one Master Transmit call is required.
	 */
	uint8_t avgRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000716:	2314      	movs	r3, #20
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	4a5d      	ldr	r2, [pc, #372]	@ (8000890 <capTouch_SetAveragingFactor+0x18c>)
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	6019      	str	r1, [r3, #0]
 8000720:	8891      	ldrh	r1, [r2, #4]
 8000722:	8099      	strh	r1, [r3, #4]
 8000724:	7992      	ldrb	r2, [r2, #6]
 8000726:	719a      	strb	r2, [r3, #6]

	uint8_t avgRegs[7] = {capTouch_AvgFactor0Reg, capTouch_AvgFactor1Reg, capTouch_AvgFactor2Reg,
 8000728:	260c      	movs	r6, #12
 800072a:	19bb      	adds	r3, r7, r6
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <capTouch_SetAveragingFactor+0x190>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	6019      	str	r1, [r3, #0]
 8000732:	8891      	ldrh	r1, [r2, #4]
 8000734:	8099      	strh	r1, [r3, #4]
 8000736:	7992      	ldrb	r2, [r2, #6]
 8000738:	719a      	strb	r2, [r3, #6]
			capTouch_AvgFactor3Reg, capTouch_AvgFactor4Reg, capTouch_AvgFactor5Reg, capTouch_AvgFactor6Reg};

	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	0025      	movs	r5, r4
 8000740:	193c      	adds	r4, r7, r4
 8000742:	19ba      	adds	r2, r7, r6
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2136      	movs	r1, #54	@ 0x36
 800074e:	f003 f8b7 	bl	80038c0 <HAL_I2C_Master_Transmit>
 8000752:	0003      	movs	r3, r0
 8000754:	7023      	strb	r3, [r4, #0]
								&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000756:	197b      	adds	r3, r7, r5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <capTouch_SetAveragingFactor+0x60>
		return halRet;
 800075e:	197b      	adds	r3, r7, r5
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	e090      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	251e      	movs	r5, #30
 800076a:	197c      	adds	r4, r7, r5
 800076c:	2314      	movs	r3, #20
 800076e:	18fa      	adds	r2, r7, r3
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2307      	movs	r3, #7
 8000778:	2136      	movs	r1, #54	@ 0x36
 800077a:	f003 f9cb 	bl	8003b14 <HAL_I2C_Master_Receive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <capTouch_SetAveragingFactor+0x8c>
		return halRet;
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e07a      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>


	// 2-byte buffer to specify register address and new averaging factor
	uint8_t avgRegNew[2] = {0x00, 0x00};
 8000790:	2308      	movs	r3, #8
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	801a      	strh	r2, [r3, #0]
	uint8_t avgNew = 0x00;
 8000798:	231d      	movs	r3, #29
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80007a0:	231f      	movs	r3, #31
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e041      	b.n	800082e <capTouch_SetAveragingFactor+0x12a>
		 * Bits 0-1 contain adjacent key suppression information,
		 * which is independent of the averaging factor.
		 */

		// Clear bits 2-6
		avgNew = avgRet[i] & 0b00000011;
 80007aa:	241f      	movs	r4, #31
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2214      	movs	r2, #20
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	201d      	movs	r0, #29
 80007b8:	183b      	adds	r3, r7, r0
 80007ba:	2103      	movs	r1, #3
 80007bc:	400a      	ands	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		// Set bits 2-6 with new averaging factor
		uint8_t avgMask = ((dataBuff[i]) << 2);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	18d3      	adds	r3, r2, r3
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	251c      	movs	r5, #28
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]
		avgNew = avgNew | avgMask;
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	1839      	adds	r1, r7, r0
 80007d6:	197a      	adds	r2, r7, r5
 80007d8:	7809      	ldrb	r1, [r1, #0]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
//			halRet = HAL_ERROR;
//			return halRet;
//		}
		// ^^ Kills memory

		avgRegNew[0] = avgRegs[i];
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	220c      	movs	r2, #12
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	5cd2      	ldrb	r2, [r2, r3]
 80007ea:	2108      	movs	r1, #8
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	701a      	strb	r2, [r3, #0]
		avgRegNew[1] = avgNew;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	251e      	movs	r5, #30
 80007fe:	197c      	adds	r4, r7, r5
 8000800:	187a      	adds	r2, r7, r1
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2136      	movs	r1, #54	@ 0x36
 800080c:	f003 f858 	bl	80038c0 <HAL_I2C_Master_Transmit>
 8000810:	0003      	movs	r3, r0
 8000812:	7023      	strb	r3, [r4, #0]
									avgRegNew, 2, HAL_MAX_DELAY);
		if(halRet != HAL_OK)
 8000814:	197b      	adds	r3, r7, r5
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <capTouch_SetAveragingFactor+0x11e>
			return halRet;
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	e031      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	for(i = 0; i <= 6; i++) {
 8000822:	211f      	movs	r1, #31
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	3201      	adds	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	231f      	movs	r3, #31
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b06      	cmp	r3, #6
 8000836:	d9b8      	bls.n	80007aa <capTouch_SetAveragingFactor+0xa6>

	}

	// Debug check that avg register values have been set successfully
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	251e      	movs	r5, #30
 800083e:	197c      	adds	r4, r7, r5
 8000840:	230c      	movs	r3, #12
 8000842:	18fa      	adds	r2, r7, r3
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	2136      	movs	r1, #54	@ 0x36
 800084e:	f003 f837 	bl	80038c0 <HAL_I2C_Master_Transmit>
 8000852:	0003      	movs	r3, r0
 8000854:	7023      	strb	r3, [r4, #0]
									&(avgRegs[0]), 1, HAL_MAX_DELAY);
	if(halRet != HAL_OK)
 8000856:	197b      	adds	r3, r7, r5
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <capTouch_SetAveragingFactor+0x160>
		return halRet;
 800085e:	197b      	adds	r3, r7, r5
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e010      	b.n	8000886 <capTouch_SetAveragingFactor+0x182>
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, avgRet, 7, HAL_MAX_DELAY);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	251e      	movs	r5, #30
 800086a:	197c      	adds	r4, r7, r5
 800086c:	2314      	movs	r3, #20
 800086e:	18fa      	adds	r2, r7, r3
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2307      	movs	r3, #7
 8000878:	2136      	movs	r1, #54	@ 0x36
 800087a:	f003 f94b 	bl	8003b14 <HAL_I2C_Master_Receive>
 800087e:	0003      	movs	r3, r0
 8000880:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000882:	197b      	adds	r3, r7, r5
 8000884:	781b      	ldrb	r3, [r3, #0]

}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b009      	add	sp, #36	@ 0x24
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	08007e04 	.word	0x08007e04
 8000894:	08007e0c 	.word	0x08007e0c

08000898 <capTouch_SetDetectionIntegrator>:

HAL_StatusTypeDef capTouch_SetDetectionIntegrator(QT1070 *capTouch, uint8_t *dataBuff) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef halRet = HAL_OK;
 80008a2:	231e      	movs	r3, #30
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]

	uint8_t detIntRegs[7] = {capTouch_DetInteg0Reg, capTouch_DetInteg1Reg, capTouch_DetInteg2Reg,
 80008aa:	2314      	movs	r3, #20
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <capTouch_SetDetectionIntegrator+0xdc>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	6019      	str	r1, [r3, #0]
 80008b4:	8891      	ldrh	r1, [r2, #4]
 80008b6:	8099      	strh	r1, [r3, #4]
 80008b8:	7992      	ldrb	r2, [r2, #6]
 80008ba:	719a      	strb	r2, [r3, #6]
						capTouch_DetInteg3Reg, capTouch_DetInteg4Reg, capTouch_DetInteg5Reg, capTouch_DetInteg6Reg};

	// 2-byte buffer to specify register address and new averaging factor
	uint8_t detIntRegNew[2] = {0x00, 0x00};
 80008bc:	2310      	movs	r3, #16
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	for(i = 0; i <= 6; i++) {
 80008c4:	231f      	movs	r3, #31
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e022      	b.n	8000914 <capTouch_SetDetectionIntegrator+0x7c>

		detIntRegNew[0] = detIntRegs[i];
 80008ce:	251f      	movs	r5, #31
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2214      	movs	r2, #20
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	5cd2      	ldrb	r2, [r2, r3]
 80008da:	2110      	movs	r1, #16
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	701a      	strb	r2, [r3, #0]
		detIntRegNew[1] = dataBuff[i];
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	705a      	strb	r2, [r3, #1]

		halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	231e      	movs	r3, #30
 80008f4:	18fc      	adds	r4, r7, r3
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2302      	movs	r3, #2
 8000900:	2136      	movs	r1, #54	@ 0x36
 8000902:	f002 ffdd 	bl	80038c0 <HAL_I2C_Master_Transmit>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
	for(i = 0; i <= 6; i++) {
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	197b      	adds	r3, r7, r5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	231f      	movs	r3, #31
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9d7      	bls.n	80008ce <capTouch_SetDetectionIntegrator+0x36>
										detIntRegNew, 2, HAL_MAX_DELAY);

	}

	// Debug check that avg register values have been set successfully
	uint8_t detIntRet[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800091e:	2608      	movs	r6, #8
 8000920:	19bb      	adds	r3, r7, r6
 8000922:	4a15      	ldr	r2, [pc, #84]	@ (8000978 <capTouch_SetDetectionIntegrator+0xe0>)
 8000924:	6811      	ldr	r1, [r2, #0]
 8000926:	6019      	str	r1, [r3, #0]
 8000928:	8891      	ldrh	r1, [r2, #4]
 800092a:	8099      	strh	r1, [r3, #4]
 800092c:	7992      	ldrb	r2, [r2, #6]
 800092e:	719a      	strb	r2, [r3, #6]
	halRet = HAL_I2C_Master_Transmit(capTouch->hi2c, DEVICE_ADDRESS,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	251e      	movs	r5, #30
 8000936:	197c      	adds	r4, r7, r5
 8000938:	2314      	movs	r3, #20
 800093a:	18fa      	adds	r2, r7, r3
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	2136      	movs	r1, #54	@ 0x36
 8000946:	f002 ffbb 	bl	80038c0 <HAL_I2C_Master_Transmit>
 800094a:	0003      	movs	r3, r0
 800094c:	7023      	strb	r3, [r4, #0]
									&(detIntRegs[0]), 1, HAL_MAX_DELAY);
	halRet = HAL_I2C_Master_Receive(capTouch->hi2c, DEVICE_ADDRESS, detIntRet, 7, HAL_MAX_DELAY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	197c      	adds	r4, r7, r5
 8000954:	19ba      	adds	r2, r7, r6
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2307      	movs	r3, #7
 800095e:	2136      	movs	r1, #54	@ 0x36
 8000960:	f003 f8d8 	bl	8003b14 <HAL_I2C_Master_Receive>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

	return halRet;
 8000968:	197b      	adds	r3, r7, r5
 800096a:	781b      	ldrb	r3, [r3, #0]

}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	@ 0x24
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000974:	08007e14 	.word	0x08007e14
 8000978:	08007e04 	.word	0x08007e04

0800097c <NAU8315YG_Init>:

#ifndef NAU8315YG_H_
#include "../Inc/NAU8315YG.h"
#endif

void NAU8315YG_Init(NAU8315YG *nau, I2S_HandleTypeDef *hi2s, GPIO_TypeDef *enablePort, uint32_t enablePin) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]

	nau->hi2s = hi2s;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	601a      	str	r2, [r3, #0]

	nau->enablePort = enablePort;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	605a      	str	r2, [r3, #4]
	nau->enablePin = enablePin;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	609a      	str	r2, [r3, #8]

	NAU8315YG_AmpDisable(nau);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f818 	bl	80009d4 <NAU8315YG_AmpDisable>

}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b004      	add	sp, #16
 80009aa:	bd80      	pop	{r7, pc}

080009ac <NAU8315YG_AmpEnable>:

void NAU8315YG_AmpEnable(NAU8315YG *nau) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

	// Set enable pin high
	HAL_GPIO_WritePin(nau->enablePort, nau->enablePin, GPIO_PIN_SET);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6858      	ldr	r0, [r3, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	2201      	movs	r2, #1
 80009c0:	0019      	movs	r1, r3
 80009c2:	f002 fe74 	bl	80036ae <HAL_GPIO_WritePin>

	nau->ampEnableFlag = 1;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2201      	movs	r2, #1
 80009ca:	731a      	strb	r2, [r3, #12]

}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <NAU8315YG_AmpDisable>:


void NAU8315YG_AmpDisable(NAU8315YG *nau) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

	// Set enable pin high
	HAL_GPIO_WritePin(nau->enablePort, nau->enablePin, GPIO_PIN_RESET);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6858      	ldr	r0, [r3, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	2200      	movs	r2, #0
 80009e8:	0019      	movs	r1, r3
 80009ea:	f002 fe60 	bl	80036ae <HAL_GPIO_WritePin>

	nau->ampEnableFlag = 0;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	731a      	strb	r2, [r3, #12]

}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}

080009fc <W25Q_Init>:



uint8_t W25Q_Init(W25Q *wq, GPIO_TypeDef *nCSPort, GPIO_TypeDef *nWPPort, GPIO_TypeDef *nHOLDPort,
					uint32_t nCSPin, uint32_t nWPPin, uint32_t nHOLDPin, SPI_HandleTypeDef *hspi,
					uint8_t devID, uint8_t isQuadChip, uint8_t driveStrength) {
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	603b      	str	r3, [r7, #0]

	// Map struct GPIO Ports & Pins to passed parameters
	wq->nCSPort = nCSPort;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	601a      	str	r2, [r3, #0]
	wq->nWPPort = nWPPort;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	605a      	str	r2, [r3, #4]
	wq->nHOLDPort = nHOLDPort;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	609a      	str	r2, [r3, #8]

	wq->nCSPin = nCSPin;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a20:	60da      	str	r2, [r3, #12]
	wq->nWPPin = nWPPin;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a26:	611a      	str	r2, [r3, #16]
	wq->nHOLDPin = nHOLDPin;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a2c:	615a      	str	r2, [r3, #20]

	wq->hspi = hspi;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a32:	619a      	str	r2, [r3, #24]

	wq->quadEnable = isQuadChip;		// Default state depends on PN of chip.
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	223c      	movs	r2, #60	@ 0x3c
 8000a38:	2108      	movs	r1, #8
 8000a3a:	1852      	adds	r2, r2, r1
 8000a3c:	19d2      	adds	r2, r2, r7
 8000a3e:	2125      	movs	r1, #37	@ 0x25
 8000a40:	7812      	ldrb	r2, [r2, #0]
 8000a42:	545a      	strb	r2, [r3, r1]
	wq->writeEnable = 0;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2223      	movs	r2, #35	@ 0x23
 8000a48:	2100      	movs	r1, #0
 8000a4a:	5499      	strb	r1, [r3, r2]

	// Set CS pin high
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	2201      	movs	r2, #1
 8000a58:	0019      	movs	r1, r3
 8000a5a:	f002 fe28 	bl	80036ae <HAL_GPIO_WritePin>

	// Set hold pin high (Disable)
	HAL_GPIO_WritePin(wq->nHOLDPort, wq->nHOLDPin, GPIO_PIN_SET);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6898      	ldr	r0, [r3, #8]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	2201      	movs	r2, #1
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	f002 fe1f 	bl	80036ae <HAL_GPIO_WritePin>

	// Set WP pin high (disable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_SET);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6858      	ldr	r0, [r3, #4]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	f002 fe16 	bl	80036ae <HAL_GPIO_WritePin>

	// HAL status handle used to indicate error messages
	HAL_StatusTypeDef halRet = HAL_OK;
 8000a82:	2117      	movs	r1, #23
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]

	uint8_t returnInc = 1;			// Integer error code return, incremented after successful things.
 8000a8a:	2616      	movs	r6, #22
 8000a8c:	19bb      	adds	r3, r7, r6
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]

	uint8_t errorsEnabled = 1;		// Use for debugging
 8000a92:	2315      	movs	r3, #21
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]

	// Release from power down mode
	halRet = W25Q_ReleasePowerDown(wq);
 8000a9a:	000d      	movs	r5, r1
 8000a9c:	187c      	adds	r4, r7, r1
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f000 f83c 	bl	8000b1e <W25Q_ReleasePowerDown>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000aaa:	197b      	adds	r3, r7, r5
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d007      	beq.n	8000ac2 <W25Q_Init+0xc6>
 8000ab2:	2315      	movs	r3, #21
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d002      	beq.n	8000ac2 <W25Q_Init+0xc6>
		return returnInc;
 8000abc:	19bb      	adds	r3, r7, r6
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	e029      	b.n	8000b16 <W25Q_Init+0x11a>
	else
		returnInc++;
 8000ac2:	2516      	movs	r5, #22
 8000ac4:	197b      	adds	r3, r7, r5
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	197b      	adds	r3, r7, r5
 8000aca:	3201      	adds	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]

	// Reset Device
	halRet = W25Q_ChipReset(wq);
 8000ace:	2617      	movs	r6, #23
 8000ad0:	19bc      	adds	r4, r7, r6
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 f867 	bl	8000ba8 <W25Q_ChipReset>
 8000ada:	0003      	movs	r3, r0
 8000adc:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK && errorsEnabled)
 8000ade:	19bb      	adds	r3, r7, r6
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d007      	beq.n	8000af6 <W25Q_Init+0xfa>
 8000ae6:	2315      	movs	r3, #21
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <W25Q_Init+0xfa>
		return returnInc;
 8000af0:	197b      	adds	r3, r7, r5
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	e00f      	b.n	8000b16 <W25Q_Init+0x11a>
	else
		returnInc++;
 8000af6:	2116      	movs	r1, #22
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	3201      	adds	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
//		return returnInc;
//	else
//		returnInc++;

	// Set WP pin low (Enable)
	HAL_GPIO_WritePin(wq->nWPPort, wq->nWPPin, GPIO_PIN_RESET);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	6858      	ldr	r0, [r3, #4]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	691b      	ldr	r3, [r3, #16]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	0019      	movs	r1, r3
 8000b10:	f002 fdcd 	bl	80036ae <HAL_GPIO_WritePin>

	return 0;
 8000b14:	2300      	movs	r3, #0

}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b007      	add	sp, #28
 8000b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b1e <W25Q_ReleasePowerDown>:

HAL_StatusTypeDef W25Q_ReleasePowerDown(W25Q *wq) {
 8000b1e:	b590      	push	{r4, r7, lr}
 8000b20:	b085      	sub	sp, #20
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000b26:	240e      	movs	r4, #14
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]

	// TX release power-down instruction
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6818      	ldr	r0, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	2200      	movs	r2, #0
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	f002 fdb7 	bl	80036ae <HAL_GPIO_WritePin>
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_READ_RELEASE_ID}, 1, HAL_MAX_DELAY);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6998      	ldr	r0, [r3, #24]
 8000b44:	210c      	movs	r1, #12
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	22ab      	movs	r2, #171	@ 0xab
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	193c      	adds	r4, r7, r4
 8000b4e:	2301      	movs	r3, #1
 8000b50:	425b      	negs	r3, r3
 8000b52:	1879      	adds	r1, r7, r1
 8000b54:	2201      	movs	r2, #1
 8000b56:	f005 fdc9 	bl	80066ec <HAL_SPI_Transmit>
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6818      	ldr	r0, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	2201      	movs	r2, #1
 8000b6a:	0019      	movs	r1, r3
 8000b6c:	f002 fd9f 	bl	80036ae <HAL_GPIO_WritePin>

	// Delay for at least 3 us
	for(uint8_t i = 0; i < 15; i++) {
 8000b70:	230f      	movs	r3, #15
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
 8000b78:	e006      	b.n	8000b88 <W25Q_ReleasePowerDown+0x6a>
		__NOP();
 8000b7a:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 15; i++) {
 8000b7c:	210f      	movs	r1, #15
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	781a      	ldrb	r2, [r3, #0]
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	3201      	adds	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	230f      	movs	r3, #15
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b0e      	cmp	r3, #14
 8000b90:	d9f3      	bls.n	8000b7a <W25Q_ReleasePowerDown+0x5c>
	}

	wq->powerUp = 1; 		// We have now successfully exited power-down state
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2224      	movs	r2, #36	@ 0x24
 8000b96:	2101      	movs	r1, #1
 8000b98:	5499      	strb	r1, [r3, r2]

	return halRet;
 8000b9a:	230e      	movs	r3, #14
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	781b      	ldrb	r3, [r3, #0]

}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b005      	add	sp, #20
 8000ba6:	bd90      	pop	{r4, r7, pc}

08000ba8 <W25Q_ChipReset>:
//	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
//
//	return halRet;
//}

HAL_StatusTypeDef W25Q_ChipReset(W25Q *wq) {
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000bb0:	250e      	movs	r5, #14
 8000bb2:	197b      	adds	r3, r7, r5
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]

	/*
	 * Send both enable reset an reset device commands
	 */
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	f002 fd72 	bl	80036ae <HAL_GPIO_WritePin>
	// TX enable reset instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_ENABLE}, 1, HAL_MAX_DELAY);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6998      	ldr	r0, [r3, #24]
 8000bce:	210c      	movs	r1, #12
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2266      	movs	r2, #102	@ 0x66
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	197c      	adds	r4, r7, r5
 8000bd8:	2301      	movs	r3, #1
 8000bda:	425b      	negs	r3, r3
 8000bdc:	1879      	adds	r1, r7, r1
 8000bde:	2201      	movs	r2, #1
 8000be0:	f005 fd84 	bl	80066ec <HAL_SPI_Transmit>
 8000be4:	0003      	movs	r3, r0
 8000be6:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	f002 fd5a 	bl	80036ae <HAL_GPIO_WritePin>
	if(halRet != HAL_OK)
 8000bfa:	197b      	adds	r3, r7, r5
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <W25Q_ChipReset+0x60>
		return halRet;
 8000c02:	197b      	adds	r3, r7, r5
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	e035      	b.n	8000c74 <W25Q_ChipReset+0xcc>

	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_RESET);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6818      	ldr	r0, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	2200      	movs	r2, #0
 8000c14:	0019      	movs	r1, r3
 8000c16:	f002 fd4a 	bl	80036ae <HAL_GPIO_WritePin>
	// TX reset device instruction
	halRet = HAL_SPI_Transmit(wq->hspi, (uint8_t[1]){CMD_RESET_DEVICE}, 1, HAL_MAX_DELAY);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6998      	ldr	r0, [r3, #24]
 8000c1e:	2108      	movs	r1, #8
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2299      	movs	r2, #153	@ 0x99
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	230e      	movs	r3, #14
 8000c28:	18fc      	adds	r4, r7, r3
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	425b      	negs	r3, r3
 8000c2e:	1879      	adds	r1, r7, r1
 8000c30:	2201      	movs	r2, #1
 8000c32:	f005 fd5b 	bl	80066ec <HAL_SPI_Transmit>
 8000c36:	0003      	movs	r3, r0
 8000c38:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(wq->nCSPort, wq->nCSPin, GPIO_PIN_SET);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6818      	ldr	r0, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	2201      	movs	r2, #1
 8000c46:	0019      	movs	r1, r3
 8000c48:	f002 fd31 	bl	80036ae <HAL_GPIO_WritePin>

	// Delay at least 30 us
	for(uint8_t i = 0; i < 180; i++) {
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	e006      	b.n	8000c64 <W25Q_ChipReset+0xbc>
		__NOP();
 8000c56:	46c0      	nop			@ (mov r8, r8)
	for(uint8_t i = 0; i < 180; i++) {
 8000c58:	210f      	movs	r1, #15
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	781a      	ldrb	r2, [r3, #0]
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	3201      	adds	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	230f      	movs	r3, #15
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2bb3      	cmp	r3, #179	@ 0xb3
 8000c6c:	d9f3      	bls.n	8000c56 <W25Q_ChipReset+0xae>
	}


	return halRet;
 8000c6e:	230e      	movs	r3, #14
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	781b      	ldrb	r3, [r3, #0]

}
 8000c74:	0018      	movs	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b004      	add	sp, #16
 8000c7a:	bdb0      	pop	{r4, r5, r7, pc}

08000c7c <initRTCInternalAlarm>:
 */

#include "../Inc/alarm.h"


HAL_StatusTypeDef initRTCInternalAlarm(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000c7c:	b5b0      	push	{r4, r5, r7, lr}
 8000c7e:	b09a      	sub	sp, #104	@ 0x68
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef halRet = HAL_OK;
 8000c88:	2567      	movs	r5, #103	@ 0x67
 8000c8a:	197b      	adds	r3, r7, r5
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]

	RTC_AlarmTypeDef internalAlarm_init = {0};
 8000c90:	243c      	movs	r4, #60	@ 0x3c
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	0018      	movs	r0, r3
 8000c96:	2328      	movs	r3, #40	@ 0x28
 8000c98:	001a      	movs	r2, r3
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	f007 f86a 	bl	8007d74 <memset>
	internalAlarm_init.AlarmTime.Hours = currTime->Hours;
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	0021      	movs	r1, r4
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
	internalAlarm_init.AlarmTime.Minutes = currTime->Minutes + 1;
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	785b      	ldrb	r3, [r3, #1]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	705a      	strb	r2, [r3, #1]
	internalAlarm_init.AlarmTime.Seconds = currTime->Seconds;
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	789a      	ldrb	r2, [r3, #2]
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	709a      	strb	r2, [r3, #2]
	internalAlarm_init.AlarmTime.SubSeconds = currTime->SubSeconds;
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	605a      	str	r2, [r3, #4]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	78da      	ldrb	r2, [r3, #3]
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.TimeFormat = currTime->TimeFormat;
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	78da      	ldrb	r2, [r3, #3]
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	70da      	strb	r2, [r3, #3]
	internalAlarm_init.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cd6:	0008      	movs	r0, r1
 8000cd8:	183b      	adds	r3, r7, r0
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
	internalAlarm_init.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cde:	183b      	adds	r3, r7, r0
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
	internalAlarm_init.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000ce4:	183b      	adds	r3, r7, r0
 8000ce6:	4a19      	ldr	r2, [pc, #100]	@ (8000d4c <initRTCInternalAlarm+0xd0>)
 8000ce8:	615a      	str	r2, [r3, #20]
								  |RTC_ALARMMASK_SECONDS;
	internalAlarm_init.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000cea:	183b      	adds	r3, r7, r0
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
	internalAlarm_init.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000cf0:	183b      	adds	r3, r7, r0
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
	internalAlarm_init.AlarmDateWeekDay = 0x1;
 8000cf6:	183b      	adds	r3, r7, r0
 8000cf8:	2220      	movs	r2, #32
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	5499      	strb	r1, [r3, r2]
	internalAlarm_init.Alarm = internalAlarm;
 8000cfe:	0001      	movs	r1, r0
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	2280      	movs	r2, #128	@ 0x80
 8000d04:	0052      	lsls	r2, r2, #1
 8000d06:	625a      	str	r2, [r3, #36]	@ 0x24

	halRet = HAL_RTC_SetAlarm_IT(hrtc, &internalAlarm_init, RTCTimeFormat);
 8000d08:	197c      	adds	r4, r7, r5
 8000d0a:	1879      	adds	r1, r7, r1
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	0018      	movs	r0, r3
 8000d12:	f005 f813 	bl	8005d3c <HAL_RTC_SetAlarm_IT>
 8000d16:	0003      	movs	r3, r0
 8000d18:	7023      	strb	r3, [r4, #0]
	if(halRet != HAL_OK)
 8000d1a:	197b      	adds	r3, r7, r5
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <initRTCInternalAlarm+0xac>
		return halRet;
 8000d22:	197b      	adds	r3, r7, r5
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	e00d      	b.n	8000d44 <initRTCInternalAlarm+0xc8>

	RTC_AlarmTypeDef internalAlarm_initTest;
	halRet = HAL_RTC_GetAlarm(hrtc, &internalAlarm_initTest, internalAlarm, RTCTimeFormat);
 8000d28:	2567      	movs	r5, #103	@ 0x67
 8000d2a:	197c      	adds	r4, r7, r5
 8000d2c:	2380      	movs	r3, #128	@ 0x80
 8000d2e:	005a      	lsls	r2, r3, #1
 8000d30:	2314      	movs	r3, #20
 8000d32:	18f9      	adds	r1, r7, r3
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	2300      	movs	r3, #0
 8000d38:	f005 f940 	bl	8005fbc <HAL_RTC_GetAlarm>
 8000d3c:	0003      	movs	r3, r0
 8000d3e:	7023      	strb	r3, [r4, #0]
	return halRet;
 8000d40:	197b      	adds	r3, r7, r5
 8000d42:	781b      	ldrb	r3, [r3, #0]

}
 8000d44:	0018      	movs	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b01a      	add	sp, #104	@ 0x68
 8000d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d4c:	80800080 	.word	0x80800080

08000d50 <getRTCTime>:

void getRTCTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *currTime, RTC_DateTypeDef *currDate) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]

	// Store both current time and current date in time and date pointers.
	HAL_RTC_GetTime(hrtc, currTime, RTCTimeFormat);
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2200      	movs	r2, #0
 8000d62:	0018      	movs	r0, r3
 8000d64:	f004 ff40 	bl	8005be8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, currDate, RTCTimeFormat);
 8000d68:	6879      	ldr	r1, [r7, #4]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f004 ff96 	bl	8005ca0 <HAL_RTC_GetDate>

}
 8000d74:	46c0      	nop			@ (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b004      	add	sp, #16
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7e:	46de      	mov	lr, fp
 8000d80:	4657      	mov	r7, sl
 8000d82:	464e      	mov	r6, r9
 8000d84:	4645      	mov	r5, r8
 8000d86:	b5e0      	push	{r5, r6, r7, lr}
 8000d88:	b08f      	sub	sp, #60	@ 0x3c
 8000d8a:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8c:	f002 f81e 	bl	8002dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d90:	f000 f9d2 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d94:	f000 fc34 	bl	8001600 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d98:	f000 fc0c 	bl	80015b4 <MX_DMA_Init>
  MX_RTC_Init();
 8000d9c:	f000 faa2 	bl	80012e4 <MX_RTC_Init>
  MX_I2C1_Init();
 8000da0:	f000 fa36 	bl	8001210 <MX_I2C1_Init>
  MX_I2S1_Init();
 8000da4:	f000 fa74 	bl	8001290 <MX_I2S1_Init>
  MX_SPI2_Init();
 8000da8:	f000 fb16 	bl	80013d8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000dac:	f000 fb52 	bl	8001454 <MX_TIM2_Init>
  MX_TIM14_Init();
 8000db0:	f000 fbb0 	bl	8001514 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000db4:	f000 fbd4 	bl	8001560 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	  // HAL Status handle for error-checking
	  HAL_StatusTypeDef halRet = HAL_OK;
 8000db8:	2317      	movs	r3, #23
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]

	  // Determine which time format we will be using
	  	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 8000dc0:	4bb7      	ldr	r3, [pc, #732]	@ (80010a0 <main+0x324>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2210      	movs	r2, #16
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f002 fc53 	bl	8003674 <HAL_GPIO_ReadPin>
 8000dce:	0003      	movs	r3, r0
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	4bb4      	ldr	r3, [pc, #720]	@ (80010a4 <main+0x328>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d103      	bne.n	8000de2 <main+0x66>
	  	  userTimeFormat = RTC_HOURFORMAT_12;
 8000dda:	4bb3      	ldr	r3, [pc, #716]	@ (80010a8 <main+0x32c>)
 8000ddc:	2240      	movs	r2, #64	@ 0x40
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	e002      	b.n	8000de8 <main+0x6c>
	  	}
	  	else {
	  	  userTimeFormat = RTC_HOURFORMAT_24;
 8000de2:	4bb1      	ldr	r3, [pc, #708]	@ (80010a8 <main+0x32c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
	  	}

  	  // Set Smooth Calibration Value
	  halRet = HAL_RTCEx_SetSmoothCalib(&hrtc, RTC_SMOOTHCALIB_PERIOD_8SEC,
 8000de8:	4bb0      	ldr	r3, [pc, #704]	@ (80010ac <main+0x330>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2517      	movs	r5, #23
 8000dee:	197c      	adds	r4, r7, r5
 8000df0:	2280      	movs	r2, #128	@ 0x80
 8000df2:	01d1      	lsls	r1, r2, #7
 8000df4:	48ae      	ldr	r0, [pc, #696]	@ (80010b0 <main+0x334>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f005 fad5 	bl	80063a6 <HAL_RTCEx_SetSmoothCalib>
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	7023      	strb	r3, [r4, #0]
									RTC_SMOOTHCALIB_PLUSPULSES_RESET, rtcCalVal);
	  if(halRet != HAL_OK) {
 8000e00:	197b      	adds	r3, r7, r5
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <main+0x90>
		  // Failure to talk to RTC is a hard failure
		  dispFailure();
 8000e08:	f001 f980 	bl	800210c <dispFailure>
	  }

	  // Init the internal RTC alarm time to track the current time
	  halRet = initRTCInternalAlarm(&hrtc, &currTime, &currDate);
 8000e0c:	2517      	movs	r5, #23
 8000e0e:	197c      	adds	r4, r7, r5
 8000e10:	4aa8      	ldr	r2, [pc, #672]	@ (80010b4 <main+0x338>)
 8000e12:	49a9      	ldr	r1, [pc, #676]	@ (80010b8 <main+0x33c>)
 8000e14:	4ba6      	ldr	r3, [pc, #664]	@ (80010b0 <main+0x334>)
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff ff30 	bl	8000c7c <initRTCInternalAlarm>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	7023      	strb	r3, [r4, #0]
	  if(halRet != HAL_OK) {
 8000e20:	197b      	adds	r3, r7, r5
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <main+0xb0>
		  // Failure to initialize RTC alarm is a hard failure
		  dispFailure();
 8000e28:	f001 f970 	bl	800210c <dispFailure>
		}

	  // Initialize all GPIOs to be used with 7 segment display
		sevSeg_Init(shiftDataPin, shiftDataClockPin, shiftStoreClockPin,
 8000e2c:	2380      	movs	r3, #128	@ 0x80
 8000e2e:	009c      	lsls	r4, r3, #2
 8000e30:	2380      	movs	r3, #128	@ 0x80
 8000e32:	00dd      	lsls	r5, r3, #3
 8000e34:	2680      	movs	r6, #128	@ 0x80
 8000e36:	2340      	movs	r3, #64	@ 0x40
 8000e38:	469c      	mov	ip, r3
 8000e3a:	2380      	movs	r3, #128	@ 0x80
 8000e3c:	011a      	lsls	r2, r3, #4
 8000e3e:	4b9f      	ldr	r3, [pc, #636]	@ (80010bc <main+0x340>)
 8000e40:	6819      	ldr	r1, [r3, #0]
 8000e42:	4b9f      	ldr	r3, [pc, #636]	@ (80010c0 <main+0x344>)
 8000e44:	6818      	ldr	r0, [r3, #0]
 8000e46:	4b9f      	ldr	r3, [pc, #636]	@ (80010c4 <main+0x348>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	9304      	str	r3, [sp, #16]
 8000e4c:	9003      	str	r0, [sp, #12]
 8000e4e:	9102      	str	r1, [sp, #8]
 8000e50:	4b9d      	ldr	r3, [pc, #628]	@ (80010c8 <main+0x34c>)
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	9200      	str	r2, [sp, #0]
 8000e56:	4663      	mov	r3, ip
 8000e58:	0032      	movs	r2, r6
 8000e5a:	0029      	movs	r1, r5
 8000e5c:	0020      	movs	r0, r4
 8000e5e:	f001 fa0f 	bl	8002280 <sevSeg_Init>
					shiftOutputEnablePin, shiftMCLRPin,
					GPIOPortArray, timerDelay, timerPWM, tim_PWM_CHANNEL);


		halRet = updateAndDisplayTime();
 8000e62:	2517      	movs	r5, #23
 8000e64:	197c      	adds	r4, r7, r5
 8000e66:	f000 fcdd 	bl	8001824 <updateAndDisplayTime>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000e6e:	197b      	adds	r3, r7, r5
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <main+0xfe>
		  // Failure to display current time is a hard failure
		  dispFailure();
 8000e76:	f001 f949 	bl	800210c <dispFailure>
    /*
     * Initialize capacitive touch sensor
     */

		// Used to separate return initializations into critical and non-critical errors.
		uint8_t initRet = 0;
 8000e7a:	2116      	movs	r1, #22
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]

		initRet = capTouch_Init(&capTouch, &hi2c1, timerDelay,
 8000e82:	4b8e      	ldr	r3, [pc, #568]	@ (80010bc <main+0x340>)
 8000e84:	681d      	ldr	r5, [r3, #0]
 8000e86:	2380      	movs	r3, #128	@ 0x80
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4a90      	ldr	r2, [pc, #576]	@ (80010cc <main+0x350>)
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	187c      	adds	r4, r7, r1
 8000e90:	4e8f      	ldr	r6, [pc, #572]	@ (80010d0 <main+0x354>)
 8000e92:	4990      	ldr	r1, [pc, #576]	@ (80010d4 <main+0x358>)
 8000e94:	4890      	ldr	r0, [pc, #576]	@ (80010d8 <main+0x35c>)
 8000e96:	9201      	str	r2, [sp, #4]
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	0033      	movs	r3, r6
 8000e9c:	002a      	movs	r2, r5
 8000e9e:	f7ff f9bd 	bl	800021c <capTouch_Init>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	7023      	strb	r3, [r4, #0]
								&capTouchResetPort, capTouchResetPin, capTouchChannels);
		if( (initRet == 1) || (initRet == 3) || (initRet == 4)) {
 8000ea6:	2116      	movs	r1, #22
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d007      	beq.n	8000ec0 <main+0x144>
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	d003      	beq.n	8000ec0 <main+0x144>
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d102      	bne.n	8000ec6 <main+0x14a>
			/* Critical Errors:
			 * 1 = Failure to read correct device ID
			 * 2 = Failure to read Keys
			 * 3 = Failure to enable keys
			 */
			dispFailure();
 8000ec0:	f001 f924 	bl	800210c <dispFailure>
 8000ec4:	e00d      	b.n	8000ee2 <main+0x166>
		}
		else if (initRet == 2) {
 8000ec6:	2316      	movs	r3, #22
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d102      	bne.n	8000ed6 <main+0x15a>
			/*
			 * Non-critical Errors:
			 * 2 = Failure to Recalibrate
			 */
			dispFault();
 8000ed0:	f001 f90c 	bl	80020ec <dispFault>
 8000ed4:	e005      	b.n	8000ee2 <main+0x166>
		}
		else if(initRet == 0) {
 8000ed6:	2316      	movs	r3, #22
 8000ed8:	18fb      	adds	r3, r7, r3
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d100      	bne.n	8000ee2 <main+0x166>
			// initRet = 0 = all is well
			__NOP();
 8000ee0:	46c0      	nop			@ (mov r8, r8)
		}

		// Set averaging factor
		uint8_t avgFactors_New[7] = {AVGFact, AVGFact, AVGFact, AVGFact, 0, 0, 0};
 8000ee2:	4b7e      	ldr	r3, [pc, #504]	@ (80010dc <main+0x360>)
 8000ee4:	781a      	ldrb	r2, [r3, #0]
 8000ee6:	210c      	movs	r1, #12
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	4b7b      	ldr	r3, [pc, #492]	@ (80010dc <main+0x360>)
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	705a      	strb	r2, [r3, #1]
 8000ef4:	4b79      	ldr	r3, [pc, #484]	@ (80010dc <main+0x360>)
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	709a      	strb	r2, [r3, #2]
 8000efc:	4b77      	ldr	r3, [pc, #476]	@ (80010dc <main+0x360>)
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	70da      	strb	r2, [r3, #3]
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	2200      	movs	r2, #0
 8000f08:	711a      	strb	r2, [r3, #4]
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	715a      	strb	r2, [r3, #5]
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2200      	movs	r2, #0
 8000f14:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetAveragingFactor(&capTouch, avgFactors_New);
 8000f16:	2517      	movs	r5, #23
 8000f18:	197c      	adds	r4, r7, r5
 8000f1a:	187a      	adds	r2, r7, r1
 8000f1c:	4b6e      	ldr	r3, [pc, #440]	@ (80010d8 <main+0x35c>)
 8000f1e:	0011      	movs	r1, r2
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff fbef 	bl	8000704 <capTouch_SetAveragingFactor>
 8000f26:	0003      	movs	r3, r0
 8000f28:	7023      	strb	r3, [r4, #0]

		if(halRet != HAL_OK) {
 8000f2a:	197b      	adds	r3, r7, r5
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <main+0x1ba>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 8000f32:	f001 f8db 	bl	80020ec <dispFault>
		}

		// Set detection integration factors
		uint8_t detIntFactors_New[7] = {DIFact, DIFact, DIFact, DIFact, DIFact, DIFact, DIFact};
 8000f36:	4b6a      	ldr	r3, [pc, #424]	@ (80010e0 <main+0x364>)
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	4b68      	ldr	r3, [pc, #416]	@ (80010e0 <main+0x364>)
 8000f40:	781a      	ldrb	r2, [r3, #0]
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	705a      	strb	r2, [r3, #1]
 8000f46:	4b66      	ldr	r3, [pc, #408]	@ (80010e0 <main+0x364>)
 8000f48:	781a      	ldrb	r2, [r3, #0]
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	709a      	strb	r2, [r3, #2]
 8000f4e:	4b64      	ldr	r3, [pc, #400]	@ (80010e0 <main+0x364>)
 8000f50:	781a      	ldrb	r2, [r3, #0]
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	70da      	strb	r2, [r3, #3]
 8000f56:	4b62      	ldr	r3, [pc, #392]	@ (80010e0 <main+0x364>)
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	711a      	strb	r2, [r3, #4]
 8000f5e:	4b60      	ldr	r3, [pc, #384]	@ (80010e0 <main+0x364>)
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	715a      	strb	r2, [r3, #5]
 8000f66:	4b5e      	ldr	r3, [pc, #376]	@ (80010e0 <main+0x364>)
 8000f68:	781a      	ldrb	r2, [r3, #0]
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	719a      	strb	r2, [r3, #6]
		halRet = capTouch_SetDetectionIntegrator(&capTouch, detIntFactors_New);
 8000f6e:	2517      	movs	r5, #23
 8000f70:	197c      	adds	r4, r7, r5
 8000f72:	1d3a      	adds	r2, r7, #4
 8000f74:	4b58      	ldr	r3, [pc, #352]	@ (80010d8 <main+0x35c>)
 8000f76:	0011      	movs	r1, r2
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff fc8d 	bl	8000898 <capTouch_SetDetectionIntegrator>
 8000f7e:	0003      	movs	r3, r0
 8000f80:	7023      	strb	r3, [r4, #0]
		if(halRet != HAL_OK) {
 8000f82:	197b      	adds	r3, r7, r5
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <main+0x212>
			// This is sensitivity-setting and a non-critical error
			dispFault();
 8000f8a:	f001 f8af 	bl	80020ec <dispFault>
		}

		userAlarmToggle = false;			//Default to off
 8000f8e:	4b55      	ldr	r3, [pc, #340]	@ (80010e4 <main+0x368>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
     * initialize the alarm time to a default value.
     *
     * Else, initialize to whatever is stored in backup registers.
     */

		if((uint8_t)HAL_RTCEx_BKUPRead(&hrtc, bootstrapBackupReg) == 0) {
 8000f94:	4b54      	ldr	r3, [pc, #336]	@ (80010e8 <main+0x36c>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b45      	ldr	r3, [pc, #276]	@ (80010b0 <main+0x334>)
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f005 fad2 	bl	8006546 <HAL_RTCEx_BKUPRead>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d11c      	bne.n	8000fe4 <main+0x268>

			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, 0x01);
 8000faa:	4b50      	ldr	r3, [pc, #320]	@ (80010ec <main+0x370>)
 8000fac:	6819      	ldr	r1, [r3, #0]
 8000fae:	4b40      	ldr	r3, [pc, #256]	@ (80010b0 <main+0x334>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f005 faaa 	bl	800650c <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, 0x00);
 8000fb8:	4b4d      	ldr	r3, [pc, #308]	@ (80010f0 <main+0x374>)
 8000fba:	6819      	ldr	r1, [r3, #0]
 8000fbc:	4b3c      	ldr	r3, [pc, #240]	@ (80010b0 <main+0x334>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f005 faa3 	bl	800650c <HAL_RTCEx_BKUPWrite>
			HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, RTC_HOURFORMAT12_AM);
 8000fc6:	4b4b      	ldr	r3, [pc, #300]	@ (80010f4 <main+0x378>)
 8000fc8:	6819      	ldr	r1, [r3, #0]
 8000fca:	4b39      	ldr	r3, [pc, #228]	@ (80010b0 <main+0x334>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f005 fa9c 	bl	800650c <HAL_RTCEx_BKUPWrite>

			// Write backup register with a non-zero value to signify that it has been initialized before
			HAL_RTCEx_BKUPWrite(&hrtc, bootstrapBackupReg, 0xFFFFFFFF);
 8000fd4:	4b44      	ldr	r3, [pc, #272]	@ (80010e8 <main+0x36c>)
 8000fd6:	6819      	ldr	r1, [r3, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	425a      	negs	r2, r3
 8000fdc:	4b34      	ldr	r3, [pc, #208]	@ (80010b0 <main+0x334>)
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f005 fa94 	bl	800650c <HAL_RTCEx_BKUPWrite>

		}

		userAlarmTime.Hours = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmHourBackupReg);
 8000fe4:	4b41      	ldr	r3, [pc, #260]	@ (80010ec <main+0x370>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b31      	ldr	r3, [pc, #196]	@ (80010b0 <main+0x334>)
 8000fea:	0011      	movs	r1, r2
 8000fec:	0018      	movs	r0, r3
 8000fee:	f005 faaa 	bl	8006546 <HAL_RTCEx_BKUPRead>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b40      	ldr	r3, [pc, #256]	@ (80010f8 <main+0x37c>)
 8000ff8:	701a      	strb	r2, [r3, #0]
		userAlarmTime.Minutes = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmMinuteBackupReg);
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80010f0 <main+0x374>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80010b0 <main+0x334>)
 8001000:	0011      	movs	r1, r2
 8001002:	0018      	movs	r0, r3
 8001004:	f005 fa9f 	bl	8006546 <HAL_RTCEx_BKUPRead>
 8001008:	0003      	movs	r3, r0
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b3a      	ldr	r3, [pc, #232]	@ (80010f8 <main+0x37c>)
 800100e:	705a      	strb	r2, [r3, #1]
		userAlarmTime.TimeFormat = (uint8_t)HAL_RTCEx_BKUPRead(&hrtc, userAlarmTFBackupReg);
 8001010:	4b38      	ldr	r3, [pc, #224]	@ (80010f4 <main+0x378>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <main+0x334>)
 8001016:	0011      	movs	r1, r2
 8001018:	0018      	movs	r0, r3
 800101a:	f005 fa94 	bl	8006546 <HAL_RTCEx_BKUPRead>
 800101e:	0003      	movs	r3, r0
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <main+0x37c>)
 8001024:	70da      	strb	r2, [r3, #3]


  	  // TODO: Init Memory Chip

		initRet = W25Q_Init(&spiFlash, nCSPort, nWPPort, nHOLDPort,
 8001026:	4b35      	ldr	r3, [pc, #212]	@ (80010fc <main+0x380>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4698      	mov	r8, r3
 800102c:	4b34      	ldr	r3, [pc, #208]	@ (8001100 <main+0x384>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4699      	mov	r9, r3
 8001032:	4b34      	ldr	r3, [pc, #208]	@ (8001104 <main+0x388>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	469a      	mov	sl, r3
 8001038:	4b33      	ldr	r3, [pc, #204]	@ (8001108 <main+0x38c>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b33      	ldr	r3, [pc, #204]	@ (800110c <main+0x390>)
 800103e:	6819      	ldr	r1, [r3, #0]
 8001040:	4b33      	ldr	r3, [pc, #204]	@ (8001110 <main+0x394>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	469b      	mov	fp, r3
 8001046:	4833      	ldr	r0, [pc, #204]	@ (8001114 <main+0x398>)
 8001048:	7800      	ldrb	r0, [r0, #0]
 800104a:	4c33      	ldr	r4, [pc, #204]	@ (8001118 <main+0x39c>)
 800104c:	7825      	ldrb	r5, [r4, #0]
 800104e:	4c33      	ldr	r4, [pc, #204]	@ (800111c <main+0x3a0>)
 8001050:	7826      	ldrb	r6, [r4, #0]
 8001052:	2416      	movs	r4, #22
 8001054:	193c      	adds	r4, r7, r4
 8001056:	4b32      	ldr	r3, [pc, #200]	@ (8001120 <main+0x3a4>)
 8001058:	469c      	mov	ip, r3
 800105a:	9606      	str	r6, [sp, #24]
 800105c:	9505      	str	r5, [sp, #20]
 800105e:	9004      	str	r0, [sp, #16]
 8001060:	4830      	ldr	r0, [pc, #192]	@ (8001124 <main+0x3a8>)
 8001062:	9003      	str	r0, [sp, #12]
 8001064:	465b      	mov	r3, fp
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	9101      	str	r1, [sp, #4]
 800106a:	9200      	str	r2, [sp, #0]
 800106c:	4653      	mov	r3, sl
 800106e:	464a      	mov	r2, r9
 8001070:	4641      	mov	r1, r8
 8001072:	4660      	mov	r0, ip
 8001074:	f7ff fcc2 	bl	80009fc <W25Q_Init>
 8001078:	0003      	movs	r3, r0
 800107a:	7023      	strb	r3, [r4, #0]
				nCSPin, nWPPin, nHOLDPin, &hspi2, spiFlash_devID, spiFlash_isQuadChip, spiFlash_driveStrength);
		if(initRet != 0) {
 800107c:	2416      	movs	r4, #22
 800107e:	193b      	adds	r3, r7, r4
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <main+0x30e>
			dispFault();
 8001086:	f001 f831 	bl	80020ec <dispFault>
		}

     // Init i2s amplifier
		NAU8315YG_Init(&i2sAmp, &hi2s1, i2sAmp_enablePort, i2sAmp_enablePin);
 800108a:	4b27      	ldr	r3, [pc, #156]	@ (8001128 <main+0x3ac>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b27      	ldr	r3, [pc, #156]	@ (800112c <main+0x3b0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4927      	ldr	r1, [pc, #156]	@ (8001130 <main+0x3b4>)
 8001094:	4827      	ldr	r0, [pc, #156]	@ (8001134 <main+0x3b8>)
 8001096:	f7ff fc71 	bl	800097c <NAU8315YG_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	e7fd      	b.n	800109a <main+0x31e>
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000040 	.word	0x20000040
 80010a8:	200000e8 	.word	0x200000e8
 80010ac:	2000002c 	.word	0x2000002c
 80010b0:	200001d8 	.word	0x200001d8
 80010b4:	200000cc 	.word	0x200000cc
 80010b8:	200000b8 	.word	0x200000b8
 80010bc:	2000006c 	.word	0x2000006c
 80010c0:	20000068 	.word	0x20000068
 80010c4:	20000030 	.word	0x20000030
 80010c8:	20000014 	.word	0x20000014
 80010cc:	20000010 	.word	0x20000010
 80010d0:	2000000c 	.word	0x2000000c
 80010d4:	200000ec 	.word	0x200000ec
 80010d8:	20000408 	.word	0x20000408
 80010dc:	20000011 	.word	0x20000011
 80010e0:	20000012 	.word	0x20000012
 80010e4:	200000b5 	.word	0x200000b5
 80010e8:	2000003c 	.word	0x2000003c
 80010ec:	200000e4 	.word	0x200000e4
 80010f0:	20000034 	.word	0x20000034
 80010f4:	20000038 	.word	0x20000038
 80010f8:	200000d0 	.word	0x200000d0
 80010fc:	20000044 	.word	0x20000044
 8001100:	20000048 	.word	0x20000048
 8001104:	2000004c 	.word	0x2000004c
 8001108:	20000050 	.word	0x20000050
 800110c:	20000054 	.word	0x20000054
 8001110:	20000058 	.word	0x20000058
 8001114:	2000005c 	.word	0x2000005c
 8001118:	2000005d 	.word	0x2000005d
 800111c:	2000005e 	.word	0x2000005e
 8001120:	2000041c 	.word	0x2000041c
 8001124:	20000204 	.word	0x20000204
 8001128:	20000060 	.word	0x20000060
 800112c:	20000064 	.word	0x20000064
 8001130:	20000140 	.word	0x20000140
 8001134:	20000444 	.word	0x20000444

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b093      	sub	sp, #76	@ 0x4c
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	2410      	movs	r4, #16
 8001140:	193b      	adds	r3, r7, r4
 8001142:	0018      	movs	r0, r3
 8001144:	2338      	movs	r3, #56	@ 0x38
 8001146:	001a      	movs	r2, r3
 8001148:	2100      	movs	r1, #0
 800114a:	f006 fe13 	bl	8007d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114e:	003b      	movs	r3, r7
 8001150:	0018      	movs	r0, r3
 8001152:	2310      	movs	r3, #16
 8001154:	001a      	movs	r2, r3
 8001156:	2100      	movs	r1, #0
 8001158:	f006 fe0c 	bl	8007d74 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	0018      	movs	r0, r3
 8001162:	f003 fa5f 	bl	8004624 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001166:	f003 fa3f 	bl	80045e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800116a:	4b28      	ldr	r3, [pc, #160]	@ (800120c <SystemClock_Config+0xd4>)
 800116c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800116e:	4b27      	ldr	r3, [pc, #156]	@ (800120c <SystemClock_Config+0xd4>)
 8001170:	2118      	movs	r1, #24
 8001172:	438a      	bics	r2, r1
 8001174:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8001176:	193b      	adds	r3, r7, r4
 8001178:	220d      	movs	r2, #13
 800117a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800117c:	193b      	adds	r3, r7, r4
 800117e:	2280      	movs	r2, #128	@ 0x80
 8001180:	0252      	lsls	r2, r2, #9
 8001182:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001184:	0021      	movs	r1, r4
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2201      	movs	r2, #1
 800118a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2201      	movs	r2, #1
 8001190:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2202      	movs	r2, #2
 8001196:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001198:	187b      	adds	r3, r7, r1
 800119a:	2203      	movs	r2, #3
 800119c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	2200      	movs	r2, #0
 80011a2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	2208      	movs	r2, #8
 80011a8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	22c0      	movs	r2, #192	@ 0xc0
 80011ae:	02d2      	lsls	r2, r2, #11
 80011b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	2280      	movs	r2, #128	@ 0x80
 80011b6:	0492      	lsls	r2, r2, #18
 80011b8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2280      	movs	r2, #128	@ 0x80
 80011be:	0592      	lsls	r2, r2, #22
 80011c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	0018      	movs	r0, r3
 80011c6:	f003 fa79 	bl	80046bc <HAL_RCC_OscConfig>
 80011ca:	1e03      	subs	r3, r0, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ce:	f001 f850 	bl	8002272 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d2:	003b      	movs	r3, r7
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d8:	003b      	movs	r3, r7
 80011da:	2202      	movs	r2, #2
 80011dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011de:	003b      	movs	r3, r7
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011e4:	003b      	movs	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ea:	003b      	movs	r3, r7
 80011ec:	2102      	movs	r1, #2
 80011ee:	0018      	movs	r0, r3
 80011f0:	f003 fd7e 	bl	8004cf0 <HAL_RCC_ClockConfig>
 80011f4:	1e03      	subs	r3, r0, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011f8:	f001 f83b 	bl	8002272 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSI);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f004 fb31 	bl	8005864 <HAL_RCCEx_EnableLSCO>
}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	b013      	add	sp, #76	@ 0x4c
 8001208:	bd90      	pop	{r4, r7, pc}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	40021000 	.word	0x40021000

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001216:	4a1c      	ldr	r2, [pc, #112]	@ (8001288 <MX_I2C1_Init+0x78>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_I2C1_Init+0x74>)
 800121c:	4a1b      	ldr	r2, [pc, #108]	@ (800128c <MX_I2C1_Init+0x7c>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001228:	2201      	movs	r2, #1
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001232:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_I2C1_Init+0x74>)
 800124c:	0018      	movs	r0, r3
 800124e:	f002 fa91 	bl	8003774 <HAL_I2C_Init>
 8001252:	1e03      	subs	r3, r0, #0
 8001254:	d001      	beq.n	800125a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001256:	f001 f80c 	bl	8002272 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <MX_I2C1_Init+0x74>)
 800125c:	2100      	movs	r1, #0
 800125e:	0018      	movs	r0, r3
 8001260:	f003 f834 	bl	80042cc <HAL_I2CEx_ConfigAnalogFilter>
 8001264:	1e03      	subs	r3, r0, #0
 8001266:	d001      	beq.n	800126c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001268:	f001 f803 	bl	8002272 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800126c:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <MX_I2C1_Init+0x74>)
 800126e:	2100      	movs	r1, #0
 8001270:	0018      	movs	r0, r3
 8001272:	f003 f877 	bl	8004364 <HAL_I2CEx_ConfigDigitalFilter>
 8001276:	1e03      	subs	r3, r0, #0
 8001278:	d001      	beq.n	800127e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800127a:	f000 fffa 	bl	8002272 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200000ec 	.word	0x200000ec
 8001288:	40005400 	.word	0x40005400
 800128c:	00602173 	.word	0x00602173

08001290 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001294:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <MX_I2S1_Init+0x48>)
 8001296:	4a11      	ldr	r2, [pc, #68]	@ (80012dc <MX_I2S1_Init+0x4c>)
 8001298:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800129a:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <MX_I2S1_Init+0x48>)
 800129c:	2280      	movs	r2, #128	@ 0x80
 800129e:	0092      	lsls	r2, r2, #2
 80012a0:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80012a2:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <MX_I2S1_Init+0x48>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80012a8:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <MX_I2S1_Init+0x48>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80012ae:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <MX_I2S1_Init+0x48>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80012b4:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <MX_I2S1_Init+0x48>)
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <MX_I2S1_Init+0x50>)
 80012b8:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <MX_I2S1_Init+0x48>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80012c0:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <MX_I2S1_Init+0x48>)
 80012c2:	0018      	movs	r0, r3
 80012c4:	f003 f89a 	bl	80043fc <HAL_I2S_Init>
 80012c8:	1e03      	subs	r3, r0, #0
 80012ca:	d001      	beq.n	80012d0 <MX_I2S1_Init+0x40>
  {
    Error_Handler();
 80012cc:	f000 ffd1 	bl	8002272 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80012d0:	46c0      	nop			@ (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	20000140 	.word	0x20000140
 80012dc:	40013000 	.word	0x40013000
 80012e0:	0000ac44 	.word	0x0000ac44

080012e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	@ 0x28
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 0 */

//  RTC_TimeTypeDef sTime = {0};
//  RTC_DateTypeDef sDate = {0};
  RTC_AlarmTypeDef sAlarm = {0};
 80012ea:	003b      	movs	r3, r7
 80012ec:	0018      	movs	r0, r3
 80012ee:	2328      	movs	r3, #40	@ 0x28
 80012f0:	001a      	movs	r2, r3
 80012f2:	2100      	movs	r1, #0
 80012f4:	f006 fd3e 	bl	8007d74 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012f8:	4b33      	ldr	r3, [pc, #204]	@ (80013c8 <MX_RTC_Init+0xe4>)
 80012fa:	4a34      	ldr	r2, [pc, #208]	@ (80013cc <MX_RTC_Init+0xe8>)
 80012fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80012fe:	4b32      	ldr	r3, [pc, #200]	@ (80013c8 <MX_RTC_Init+0xe4>)
 8001300:	2240      	movs	r2, #64	@ 0x40
 8001302:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8001304:	4b30      	ldr	r3, [pc, #192]	@ (80013c8 <MX_RTC_Init+0xe4>)
 8001306:	227f      	movs	r2, #127	@ 0x7f
 8001308:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800130a:	4b2f      	ldr	r3, [pc, #188]	@ (80013c8 <MX_RTC_Init+0xe4>)
 800130c:	22ff      	movs	r2, #255	@ 0xff
 800130e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001310:	4b2d      	ldr	r3, [pc, #180]	@ (80013c8 <MX_RTC_Init+0xe4>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001316:	4b2c      	ldr	r3, [pc, #176]	@ (80013c8 <MX_RTC_Init+0xe4>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800131c:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <MX_RTC_Init+0xe4>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001322:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <MX_RTC_Init+0xe4>)
 8001324:	2280      	movs	r2, #128	@ 0x80
 8001326:	05d2      	lsls	r2, r2, #23
 8001328:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800132a:	4b27      	ldr	r3, [pc, #156]	@ (80013c8 <MX_RTC_Init+0xe4>)
 800132c:	2200      	movs	r2, #0
 800132e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001330:	4b25      	ldr	r3, [pc, #148]	@ (80013c8 <MX_RTC_Init+0xe4>)
 8001332:	0018      	movs	r0, r3
 8001334:	f004 fb0e 	bl	8005954 <HAL_RTC_Init>
 8001338:	1e03      	subs	r3, r0, #0
 800133a:	d001      	beq.n	8001340 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 800133c:	f000 ff99 	bl	8002272 <Error_Handler>
//    Error_Handler();
//  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8001340:	003b      	movs	r3, r7
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001346:	003b      	movs	r3, r7
 8001348:	2201      	movs	r2, #1
 800134a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800134c:	003b      	movs	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001352:	003b      	movs	r3, r7
 8001354:	2200      	movs	r2, #0
 8001356:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001358:	003b      	movs	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	70da      	strb	r2, [r3, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800135e:	003b      	movs	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001364:	003b      	movs	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 800136a:	003b      	movs	r3, r7
 800136c:	4a18      	ldr	r2, [pc, #96]	@ (80013d0 <MX_RTC_Init+0xec>)
 800136e:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001370:	003b      	movs	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001376:	003b      	movs	r3, r7
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800137c:	003b      	movs	r3, r7
 800137e:	2220      	movs	r2, #32
 8001380:	2101      	movs	r1, #1
 8001382:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001384:	003b      	movs	r3, r7
 8001386:	2280      	movs	r2, #128	@ 0x80
 8001388:	0052      	lsls	r2, r2, #1
 800138a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800138c:	0039      	movs	r1, r7
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <MX_RTC_Init+0xe4>)
 8001390:	2201      	movs	r2, #1
 8001392:	0018      	movs	r0, r3
 8001394:	f004 fcd2 	bl	8005d3c <HAL_RTC_SetAlarm_IT>
 8001398:	1e03      	subs	r3, r0, #0
 800139a:	d001      	beq.n	80013a0 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 800139c:	f000 ff69 	bl	8002272 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 80013a0:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <MX_RTC_Init+0xe4>)
 80013a2:	2100      	movs	r1, #0
 80013a4:	0018      	movs	r0, r3
 80013a6:	f005 f861 	bl	800646c <HAL_RTCEx_SetCalibrationOutPut>
 80013aa:	1e03      	subs	r3, r0, #0
 80013ac:	d001      	beq.n	80013b2 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80013ae:	f000 ff60 	bl	8002272 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Do not initialize time - pull from whatever is in register
    HAL_RTC_GetTime(&hrtc, &currTime, RTCTimeFormat);
 80013b2:	4908      	ldr	r1, [pc, #32]	@ (80013d4 <MX_RTC_Init+0xf0>)
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <MX_RTC_Init+0xe4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	0018      	movs	r0, r3
 80013ba:	f004 fc15 	bl	8005be8 <HAL_RTC_GetTime>

  /* USER CODE END RTC_Init 2 */

}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b00a      	add	sp, #40	@ 0x28
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	200001d8 	.word	0x200001d8
 80013cc:	40002800 	.word	0x40002800
 80013d0:	80800080 	.word	0x80800080
 80013d4:	200000b8 	.word	0x200000b8

080013d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <MX_SPI2_Init+0x74>)
 80013de:	4a1c      	ldr	r2, [pc, #112]	@ (8001450 <MX_SPI2_Init+0x78>)
 80013e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <MX_SPI2_Init+0x74>)
 80013e4:	2282      	movs	r2, #130	@ 0x82
 80013e6:	0052      	lsls	r2, r2, #1
 80013e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013ea:	4b18      	ldr	r3, [pc, #96]	@ (800144c <MX_SPI2_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f0:	4b16      	ldr	r3, [pc, #88]	@ (800144c <MX_SPI2_Init+0x74>)
 80013f2:	22e0      	movs	r2, #224	@ 0xe0
 80013f4:	00d2      	lsls	r2, r2, #3
 80013f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f8:	4b14      	ldr	r3, [pc, #80]	@ (800144c <MX_SPI2_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013fe:	4b13      	ldr	r3, [pc, #76]	@ (800144c <MX_SPI2_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <MX_SPI2_Init+0x74>)
 8001406:	2280      	movs	r2, #128	@ 0x80
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800140c:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <MX_SPI2_Init+0x74>)
 800140e:	2210      	movs	r2, #16
 8001410:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <MX_SPI2_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <MX_SPI2_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <MX_SPI2_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MX_SPI2_Init+0x74>)
 8001426:	2207      	movs	r2, #7
 8001428:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800142a:	4b08      	ldr	r3, [pc, #32]	@ (800144c <MX_SPI2_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <MX_SPI2_Init+0x74>)
 8001432:	2208      	movs	r2, #8
 8001434:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001436:	4b05      	ldr	r3, [pc, #20]	@ (800144c <MX_SPI2_Init+0x74>)
 8001438:	0018      	movs	r0, r3
 800143a:	f005 f89f 	bl	800657c <HAL_SPI_Init>
 800143e:	1e03      	subs	r3, r0, #0
 8001440:	d001      	beq.n	8001446 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001442:	f000 ff16 	bl	8002272 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000204 	.word	0x20000204
 8001450:	40003800 	.word	0x40003800

08001454 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145a:	231c      	movs	r3, #28
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	0018      	movs	r0, r3
 8001460:	230c      	movs	r3, #12
 8001462:	001a      	movs	r2, r3
 8001464:	2100      	movs	r1, #0
 8001466:	f006 fc85 	bl	8007d74 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146a:	003b      	movs	r3, r7
 800146c:	0018      	movs	r0, r3
 800146e:	231c      	movs	r3, #28
 8001470:	001a      	movs	r2, r3
 8001472:	2100      	movs	r1, #0
 8001474:	f006 fc7e 	bl	8007d74 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001478:	4b24      	ldr	r3, [pc, #144]	@ (800150c <MX_TIM2_Init+0xb8>)
 800147a:	2280      	movs	r2, #128	@ 0x80
 800147c:	05d2      	lsls	r2, r2, #23
 800147e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8001480:	4b22      	ldr	r3, [pc, #136]	@ (800150c <MX_TIM2_Init+0xb8>)
 8001482:	4a23      	ldr	r2, [pc, #140]	@ (8001510 <MX_TIM2_Init+0xbc>)
 8001484:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b21      	ldr	r3, [pc, #132]	@ (800150c <MX_TIM2_Init+0xb8>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800148c:	4b1f      	ldr	r3, [pc, #124]	@ (800150c <MX_TIM2_Init+0xb8>)
 800148e:	2263      	movs	r2, #99	@ 0x63
 8001490:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b1e      	ldr	r3, [pc, #120]	@ (800150c <MX_TIM2_Init+0xb8>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001498:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <MX_TIM2_Init+0xb8>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800149e:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <MX_TIM2_Init+0xb8>)
 80014a0:	0018      	movs	r0, r3
 80014a2:	f005 fd45 	bl	8006f30 <HAL_TIM_PWM_Init>
 80014a6:	1e03      	subs	r3, r0, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80014aa:	f000 fee2 	bl	8002272 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ae:	211c      	movs	r1, #28
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b6:	187b      	adds	r3, r7, r1
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014bc:	187a      	adds	r2, r7, r1
 80014be:	4b13      	ldr	r3, [pc, #76]	@ (800150c <MX_TIM2_Init+0xb8>)
 80014c0:	0011      	movs	r1, r2
 80014c2:	0018      	movs	r0, r3
 80014c4:	f006 fbd6 	bl	8007c74 <HAL_TIMEx_MasterConfigSynchronization>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80014cc:	f000 fed1 	bl	8002272 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d0:	003b      	movs	r3, r7
 80014d2:	2260      	movs	r2, #96	@ 0x60
 80014d4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80014d6:	003b      	movs	r3, r7
 80014d8:	2200      	movs	r2, #0
 80014da:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014dc:	003b      	movs	r3, r7
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e2:	003b      	movs	r3, r7
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014e8:	0039      	movs	r1, r7
 80014ea:	4b08      	ldr	r3, [pc, #32]	@ (800150c <MX_TIM2_Init+0xb8>)
 80014ec:	2208      	movs	r2, #8
 80014ee:	0018      	movs	r0, r3
 80014f0:	f005 ff5c 	bl	80073ac <HAL_TIM_PWM_ConfigChannel>
 80014f4:	1e03      	subs	r3, r0, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80014f8:	f000 febb 	bl	8002272 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <MX_TIM2_Init+0xb8>)
 80014fe:	0018      	movs	r0, r3
 8001500:	f001 fb80 	bl	8002c04 <HAL_TIM_MspPostInit>

}
 8001504:	46c0      	nop			@ (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b00a      	add	sp, #40	@ 0x28
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000320 	.word	0x20000320
 8001510:	0000031f 	.word	0x0000031f

08001514 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001518:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <MX_TIM14_Init+0x40>)
 800151a:	4a0f      	ldr	r2, [pc, #60]	@ (8001558 <MX_TIM14_Init+0x44>)
 800151c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 244*4;
 800151e:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <MX_TIM14_Init+0x40>)
 8001520:	22f4      	movs	r2, #244	@ 0xf4
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <MX_TIM14_Init+0x40>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800152c:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <MX_TIM14_Init+0x40>)
 800152e:	4a0b      	ldr	r2, [pc, #44]	@ (800155c <MX_TIM14_Init+0x48>)
 8001530:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <MX_TIM14_Init+0x40>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <MX_TIM14_Init+0x40>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800153e:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <MX_TIM14_Init+0x40>)
 8001540:	0018      	movs	r0, r3
 8001542:	f005 fba9 	bl	8006c98 <HAL_TIM_Base_Init>
 8001546:	1e03      	subs	r3, r0, #0
 8001548:	d001      	beq.n	800154e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800154a:	f000 fe92 	bl	8002272 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800154e:	46c0      	nop			@ (mov r8, r8)
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	2000036c 	.word	0x2000036c
 8001558:	40002000 	.word	0x40002000
 800155c:	0000ffff 	.word	0x0000ffff

08001560 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001564:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <MX_TIM16_Init+0x44>)
 8001566:	4a10      	ldr	r2, [pc, #64]	@ (80015a8 <MX_TIM16_Init+0x48>)
 8001568:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 58595;
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <MX_TIM16_Init+0x44>)
 800156c:	4a0f      	ldr	r2, [pc, #60]	@ (80015ac <MX_TIM16_Init+0x4c>)
 800156e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <MX_TIM16_Init+0x44>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <MX_TIM16_Init+0x44>)
 8001578:	4a0d      	ldr	r2, [pc, #52]	@ (80015b0 <MX_TIM16_Init+0x50>)
 800157a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <MX_TIM16_Init+0x44>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 10;
 8001582:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <MX_TIM16_Init+0x44>)
 8001584:	220a      	movs	r2, #10
 8001586:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <MX_TIM16_Init+0x44>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800158e:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <MX_TIM16_Init+0x44>)
 8001590:	0018      	movs	r0, r3
 8001592:	f005 fb81 	bl	8006c98 <HAL_TIM_Base_Init>
 8001596:	1e03      	subs	r3, r0, #0
 8001598:	d001      	beq.n	800159e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800159a:	f000 fe6a 	bl	8002272 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200003b8 	.word	0x200003b8
 80015a8:	40014400 	.word	0x40014400
 80015ac:	0000e4e3 	.word	0x0000e4e3
 80015b0:	0000ffff 	.word	0x0000ffff

080015b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <MX_DMA_Init+0x48>)
 80015bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015be:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <MX_DMA_Init+0x48>)
 80015c0:	2101      	movs	r1, #1
 80015c2:	430a      	orrs	r2, r1
 80015c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80015c6:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <MX_DMA_Init+0x48>)
 80015c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ca:	2201      	movs	r2, #1
 80015cc:	4013      	ands	r3, r2
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2009      	movs	r0, #9
 80015d8:	f001 fd2a 	bl	8003030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015dc:	2009      	movs	r0, #9
 80015de:	f001 fd3c 	bl	800305a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	200a      	movs	r0, #10
 80015e8:	f001 fd22 	bl	8003030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80015ec:	200a      	movs	r0, #10
 80015ee:	f001 fd34 	bl	800305a <HAL_NVIC_EnableIRQ>

}
 80015f2:	46c0      	nop			@ (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b002      	add	sp, #8
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			@ (mov r8, r8)
 80015fc:	40021000 	.word	0x40021000

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b08b      	sub	sp, #44	@ 0x2c
 8001604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	2414      	movs	r4, #20
 8001608:	193b      	adds	r3, r7, r4
 800160a:	0018      	movs	r0, r3
 800160c:	2314      	movs	r3, #20
 800160e:	001a      	movs	r2, r3
 8001610:	2100      	movs	r1, #0
 8001612:	f006 fbaf 	bl	8007d74 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b7d      	ldr	r3, [pc, #500]	@ (800180c <MX_GPIO_Init+0x20c>)
 8001618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800161a:	4b7c      	ldr	r3, [pc, #496]	@ (800180c <MX_GPIO_Init+0x20c>)
 800161c:	2104      	movs	r1, #4
 800161e:	430a      	orrs	r2, r1
 8001620:	635a      	str	r2, [r3, #52]	@ 0x34
 8001622:	4b7a      	ldr	r3, [pc, #488]	@ (800180c <MX_GPIO_Init+0x20c>)
 8001624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001626:	2204      	movs	r2, #4
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800162e:	4b77      	ldr	r3, [pc, #476]	@ (800180c <MX_GPIO_Init+0x20c>)
 8001630:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001632:	4b76      	ldr	r3, [pc, #472]	@ (800180c <MX_GPIO_Init+0x20c>)
 8001634:	2120      	movs	r1, #32
 8001636:	430a      	orrs	r2, r1
 8001638:	635a      	str	r2, [r3, #52]	@ 0x34
 800163a:	4b74      	ldr	r3, [pc, #464]	@ (800180c <MX_GPIO_Init+0x20c>)
 800163c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800163e:	2220      	movs	r2, #32
 8001640:	4013      	ands	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	4b71      	ldr	r3, [pc, #452]	@ (800180c <MX_GPIO_Init+0x20c>)
 8001648:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800164a:	4b70      	ldr	r3, [pc, #448]	@ (800180c <MX_GPIO_Init+0x20c>)
 800164c:	2101      	movs	r1, #1
 800164e:	430a      	orrs	r2, r1
 8001650:	635a      	str	r2, [r3, #52]	@ 0x34
 8001652:	4b6e      	ldr	r3, [pc, #440]	@ (800180c <MX_GPIO_Init+0x20c>)
 8001654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001656:	2201      	movs	r2, #1
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	4b6b      	ldr	r3, [pc, #428]	@ (800180c <MX_GPIO_Init+0x20c>)
 8001660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001662:	4b6a      	ldr	r3, [pc, #424]	@ (800180c <MX_GPIO_Init+0x20c>)
 8001664:	2102      	movs	r1, #2
 8001666:	430a      	orrs	r2, r1
 8001668:	635a      	str	r2, [r3, #52]	@ 0x34
 800166a:	4b68      	ldr	r3, [pc, #416]	@ (800180c <MX_GPIO_Init+0x20c>)
 800166c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800166e:	2202      	movs	r2, #2
 8001670:	4013      	ands	r3, r2
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001676:	4b65      	ldr	r3, [pc, #404]	@ (800180c <MX_GPIO_Init+0x20c>)
 8001678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800167a:	4b64      	ldr	r3, [pc, #400]	@ (800180c <MX_GPIO_Init+0x20c>)
 800167c:	2108      	movs	r1, #8
 800167e:	430a      	orrs	r2, r1
 8001680:	635a      	str	r2, [r3, #52]	@ 0x34
 8001682:	4b62      	ldr	r3, [pc, #392]	@ (800180c <MX_GPIO_Init+0x20c>)
 8001684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001686:	2208      	movs	r2, #8
 8001688:	4013      	ands	r3, r2
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_MCLR_Pin, GPIO_PIN_SET);
 800168e:	238e      	movs	r3, #142	@ 0x8e
 8001690:	0119      	lsls	r1, r3, #4
 8001692:	23a0      	movs	r3, #160	@ 0xa0
 8001694:	05db      	lsls	r3, r3, #23
 8001696:	2201      	movs	r2, #1
 8001698:	0018      	movs	r0, r3
 800169a:	f002 f808 	bl	80036ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_ENABLE_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 800169e:	495c      	ldr	r1, [pc, #368]	@ (8001810 <MX_GPIO_Init+0x210>)
 80016a0:	4b5c      	ldr	r3, [pc, #368]	@ (8001814 <MX_GPIO_Init+0x214>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	0018      	movs	r0, r3
 80016a6:	f002 f802 	bl	80036ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHIFT_DATA_IN_Pin|SHIFT_DATA_CLK_Pin, GPIO_PIN_RESET);
 80016aa:	23c0      	movs	r3, #192	@ 0xc0
 80016ac:	00d9      	lsls	r1, r3, #3
 80016ae:	23a0      	movs	r3, #160	@ 0xa0
 80016b0:	05db      	lsls	r3, r3, #23
 80016b2:	2200      	movs	r2, #0
 80016b4:	0018      	movs	r0, r3
 80016b6:	f001 fffa 	bl	80036ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIFT_STORE_CLK_GPIO_Port, SHIFT_STORE_CLK_Pin, GPIO_PIN_RESET);
 80016ba:	4b57      	ldr	r3, [pc, #348]	@ (8001818 <MX_GPIO_Init+0x218>)
 80016bc:	2200      	movs	r2, #0
 80016be:	2180      	movs	r1, #128	@ 0x80
 80016c0:	0018      	movs	r0, r3
 80016c2:	f001 fff4 	bl	80036ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAPTOUCH_RESET_GPIO_Port, CAPTOUCH_RESET_Pin, GPIO_PIN_SET);
 80016c6:	2380      	movs	r3, #128	@ 0x80
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4852      	ldr	r0, [pc, #328]	@ (8001814 <MX_GPIO_Init+0x214>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	0019      	movs	r1, r3
 80016d0:	f001 ffed 	bl	80036ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016d4:	193b      	adds	r3, r7, r4
 80016d6:	2204      	movs	r2, #4
 80016d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	2203      	movs	r2, #3
 80016de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	193b      	adds	r3, r7, r4
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	193a      	adds	r2, r7, r4
 80016e8:	23a0      	movs	r3, #160	@ 0xa0
 80016ea:	05db      	lsls	r3, r3, #23
 80016ec:	0011      	movs	r1, r2
 80016ee:	0018      	movs	r0, r3
 80016f0:	f001 fe5c 	bl	80033ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CHIP_SELECT_Pin MEM_nWP_Pin MEM_nHOLD_Pin SHIFT_DATA_IN_Pin
                           SHIFT_DATA_CLK_Pin SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SPI_CHIP_SELECT_Pin|MEM_nWP_Pin|MEM_nHOLD_Pin|SHIFT_DATA_IN_Pin
 80016f4:	0021      	movs	r1, r4
 80016f6:	187b      	adds	r3, r7, r1
 80016f8:	22ee      	movs	r2, #238	@ 0xee
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	601a      	str	r2, [r3, #0]
                          |SHIFT_DATA_CLK_Pin|SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	000c      	movs	r4, r1
 8001700:	193b      	adds	r3, r7, r4
 8001702:	2201      	movs	r2, #1
 8001704:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	193b      	adds	r3, r7, r4
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	193b      	adds	r3, r7, r4
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	193a      	adds	r2, r7, r4
 8001714:	23a0      	movs	r3, #160	@ 0xa0
 8001716:	05db      	lsls	r3, r3, #23
 8001718:	0011      	movs	r1, r2
 800171a:	0018      	movs	r0, r3
 800171c:	f001 fe46 	bl	80033ac <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_ENABLE_Pin DEBUG_LED_Pin CAPTOUCH_RESET_Pin */
  GPIO_InitStruct.Pin = AMP_ENABLE_Pin|DEBUG_LED_Pin|CAPTOUCH_RESET_Pin;
 8001720:	193b      	adds	r3, r7, r4
 8001722:	4a3e      	ldr	r2, [pc, #248]	@ (800181c <MX_GPIO_Init+0x21c>)
 8001724:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	193b      	adds	r3, r7, r4
 8001728:	2201      	movs	r2, #1
 800172a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	193b      	adds	r3, r7, r4
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	193b      	adds	r3, r7, r4
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001738:	193b      	adds	r3, r7, r4
 800173a:	4a36      	ldr	r2, [pc, #216]	@ (8001814 <MX_GPIO_Init+0x214>)
 800173c:	0019      	movs	r1, r3
 800173e:	0010      	movs	r0, r2
 8001740:	f001 fe34 	bl	80033ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIFT_STORE_CLK_Pin */
  GPIO_InitStruct.Pin = SHIFT_STORE_CLK_Pin;
 8001744:	193b      	adds	r3, r7, r4
 8001746:	2280      	movs	r2, #128	@ 0x80
 8001748:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	193b      	adds	r3, r7, r4
 800174c:	2201      	movs	r2, #1
 800174e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	193b      	adds	r3, r7, r4
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	193b      	adds	r3, r7, r4
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHIFT_STORE_CLK_GPIO_Port, &GPIO_InitStruct);
 800175c:	193b      	adds	r3, r7, r4
 800175e:	4a2e      	ldr	r2, [pc, #184]	@ (8001818 <MX_GPIO_Init+0x218>)
 8001760:	0019      	movs	r1, r3
 8001762:	0010      	movs	r0, r2
 8001764:	f001 fe22 	bl	80033ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_SET_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = ALARM_SET_BUTTON_EXTI_Pin;
 8001768:	193b      	adds	r3, r7, r4
 800176a:	2280      	movs	r2, #128	@ 0x80
 800176c:	0212      	lsls	r2, r2, #8
 800176e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001770:	193b      	adds	r3, r7, r4
 8001772:	2284      	movs	r2, #132	@ 0x84
 8001774:	0392      	lsls	r2, r2, #14
 8001776:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001778:	193b      	adds	r3, r7, r4
 800177a:	2201      	movs	r2, #1
 800177c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALARM_SET_BUTTON_EXTI_GPIO_Port, &GPIO_InitStruct);
 800177e:	193a      	adds	r2, r7, r4
 8001780:	23a0      	movs	r3, #160	@ 0xa0
 8001782:	05db      	lsls	r3, r3, #23
 8001784:	0011      	movs	r1, r2
 8001786:	0018      	movs	r0, r3
 8001788:	f001 fe10 	bl	80033ac <HAL_GPIO_Init>

  /*Configure GPIO pins : HOUR_SET_BUTTON_EXTI_Pin MINUTE_SET_BUTTON_EXTI_Pin ALARM_EN_BUTTON_EXTI_Pin DISPLAY_BUTTON_EXTI_Pin */
  GPIO_InitStruct.Pin = HOUR_SET_BUTTON_EXTI_Pin|MINUTE_SET_BUTTON_EXTI_Pin|ALARM_EN_BUTTON_EXTI_Pin|DISPLAY_BUTTON_EXTI_Pin;
 800178c:	0021      	movs	r1, r4
 800178e:	187b      	adds	r3, r7, r1
 8001790:	220f      	movs	r2, #15
 8001792:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001794:	187b      	adds	r3, r7, r1
 8001796:	2284      	movs	r2, #132	@ 0x84
 8001798:	0392      	lsls	r2, r2, #14
 800179a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179c:	187b      	adds	r3, r7, r1
 800179e:	2201      	movs	r2, #1
 80017a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a2:	000c      	movs	r4, r1
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <MX_GPIO_Init+0x220>)
 80017a8:	0019      	movs	r1, r3
 80017aa:	0010      	movs	r0, r2
 80017ac:	f001 fdfe 	bl	80033ac <HAL_GPIO_Init>

  /*Configure GPIO pin : TIME_SWITCH_EXTI_Pin */
  GPIO_InitStruct.Pin = TIME_SWITCH_EXTI_Pin;
 80017b0:	0021      	movs	r1, r4
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	2210      	movs	r2, #16
 80017b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	22c4      	movs	r2, #196	@ 0xc4
 80017bc:	0392      	lsls	r2, r2, #14
 80017be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	2201      	movs	r2, #1
 80017c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TIME_SWITCH_EXTI_GPIO_Port, &GPIO_InitStruct);
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	4a12      	ldr	r2, [pc, #72]	@ (8001814 <MX_GPIO_Init+0x214>)
 80017ca:	0019      	movs	r1, r3
 80017cc:	0010      	movs	r0, r2
 80017ce:	f001 fded 	bl	80033ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	2005      	movs	r0, #5
 80017d8:	f001 fc2a 	bl	8003030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80017dc:	2005      	movs	r0, #5
 80017de:	f001 fc3c 	bl	800305a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2101      	movs	r1, #1
 80017e6:	2006      	movs	r0, #6
 80017e8:	f001 fc22 	bl	8003030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80017ec:	2006      	movs	r0, #6
 80017ee:	f001 fc34 	bl	800305a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2101      	movs	r1, #1
 80017f6:	2007      	movs	r0, #7
 80017f8:	f001 fc1a 	bl	8003030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80017fc:	2007      	movs	r0, #7
 80017fe:	f001 fc2c 	bl	800305a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	46bd      	mov	sp, r7
 8001806:	b00b      	add	sp, #44	@ 0x2c
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	46c0      	nop			@ (mov r8, r8)
 800180c:	40021000 	.word	0x40021000
 8001810:	00001002 	.word	0x00001002
 8001814:	50000400 	.word	0x50000400
 8001818:	50000800 	.word	0x50000800
 800181c:	00001102 	.word	0x00001102
 8001820:	50000c00 	.word	0x50000c00

08001824 <updateAndDisplayTime>:
/* USER CODE BEGIN 4 */

/*
 * Pulls updated time from RTC and send new time to user display
 */
HAL_StatusTypeDef updateAndDisplayTime(void) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800182a:	2317      	movs	r3, #23
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]

	getRTCTime(&hrtc, &currTime, &currDate);
 8001832:	4a14      	ldr	r2, [pc, #80]	@ (8001884 <updateAndDisplayTime+0x60>)
 8001834:	4914      	ldr	r1, [pc, #80]	@ (8001888 <updateAndDisplayTime+0x64>)
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <updateAndDisplayTime+0x68>)
 8001838:	0018      	movs	r0, r3
 800183a:	f7ff fa89 	bl	8000d50 <getRTCTime>

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 800183e:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <updateAndDisplayTime+0x6c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10e      	bne.n	8001864 <updateAndDisplayTime+0x40>

		RTC_TimeTypeDef currTimeMil = conv2Mil(&currTime);
 8001846:	003b      	movs	r3, r7
 8001848:	4a0f      	ldr	r2, [pc, #60]	@ (8001888 <updateAndDisplayTime+0x64>)
 800184a:	0011      	movs	r1, r2
 800184c:	0018      	movs	r0, r3
 800184e:	f000 fcc9 	bl	80021e4 <conv2Mil>

		sevSeg_updateDigits(&currTimeMil, userAlarmToggle);
 8001852:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <updateAndDisplayTime+0x70>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	001a      	movs	r2, r3
 8001858:	003b      	movs	r3, r7
 800185a:	0011      	movs	r1, r2
 800185c:	0018      	movs	r0, r3
 800185e:	f000 fe2f 	bl	80024c0 <sevSeg_updateDigits>
 8001862:	e007      	b.n	8001874 <updateAndDisplayTime+0x50>

	}
	else {
		sevSeg_updateDigits(&currTime, userAlarmToggle);
 8001864:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <updateAndDisplayTime+0x70>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	001a      	movs	r2, r3
 800186a:	4b07      	ldr	r3, [pc, #28]	@ (8001888 <updateAndDisplayTime+0x64>)
 800186c:	0011      	movs	r1, r2
 800186e:	0018      	movs	r0, r3
 8001870:	f000 fe26 	bl	80024c0 <sevSeg_updateDigits>
	}

	return halRet;
 8001874:	2317      	movs	r3, #23
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	781b      	ldrb	r3, [r3, #0]

}
 800187a:	0018      	movs	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	b006      	add	sp, #24
 8001880:	bd80      	pop	{r7, pc}
 8001882:	46c0      	nop			@ (mov r8, r8)
 8001884:	200000cc 	.word	0x200000cc
 8001888:	200000b8 	.word	0x200000b8
 800188c:	200001d8 	.word	0x200001d8
 8001890:	200000e8 	.word	0x200000e8
 8001894:	200000b5 	.word	0x200000b5

08001898 <updateAndDisplayAlarm>:
/*
 * Sends current user alarm time to user display
 * This doesn't pull from the RTC because the RTC alarm is not being used for that
 */

HAL_StatusTypeDef updateAndDisplayAlarm(void) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 800189e:	2317      	movs	r3, #23
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]

	// If the user wants 24-hour time, shift the time accordingly
	if((userTimeFormat == RTC_HOURFORMAT_24)) {
 80018a6:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <updateAndDisplayAlarm+0x54>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10e      	bne.n	80018cc <updateAndDisplayAlarm+0x34>

		RTC_TimeTypeDef userAlarmTimeMil = conv2Mil(&userAlarmTime);
 80018ae:	003b      	movs	r3, r7
 80018b0:	4a0f      	ldr	r2, [pc, #60]	@ (80018f0 <updateAndDisplayAlarm+0x58>)
 80018b2:	0011      	movs	r1, r2
 80018b4:	0018      	movs	r0, r3
 80018b6:	f000 fc95 	bl	80021e4 <conv2Mil>

		sevSeg_updateDigits(&userAlarmTimeMil, userAlarmToggle);
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <updateAndDisplayAlarm+0x5c>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	001a      	movs	r2, r3
 80018c0:	003b      	movs	r3, r7
 80018c2:	0011      	movs	r1, r2
 80018c4:	0018      	movs	r0, r3
 80018c6:	f000 fdfb 	bl	80024c0 <sevSeg_updateDigits>
 80018ca:	e007      	b.n	80018dc <updateAndDisplayAlarm+0x44>

	}
	else {
		sevSeg_updateDigits(&userAlarmTime, userAlarmToggle);
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <updateAndDisplayAlarm+0x5c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	001a      	movs	r2, r3
 80018d2:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <updateAndDisplayAlarm+0x58>)
 80018d4:	0011      	movs	r1, r2
 80018d6:	0018      	movs	r0, r3
 80018d8:	f000 fdf2 	bl	80024c0 <sevSeg_updateDigits>
	}



	return halRet;
 80018dc:	2317      	movs	r3, #23
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	781b      	ldrb	r3, [r3, #0]

}
 80018e2:	0018      	movs	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b006      	add	sp, #24
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	200000e8 	.word	0x200000e8
 80018f0:	200000d0 	.word	0x200000d0
 80018f4:	200000b5 	.word	0x200000b5

080018f8 <HAL_RTC_AlarmAEventCallback>:
 * Occurs every minute increment
 *
 * Pulls alarm time from RTC, increments and sets new alarm time, and updates time.
 * Sets off user alarm if the alarm is enabled.
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b08d      	sub	sp, #52	@ 0x34
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

	  RTC_AlarmTypeDef sAlarm = {0};
 8001900:	2408      	movs	r4, #8
 8001902:	193b      	adds	r3, r7, r4
 8001904:	0018      	movs	r0, r3
 8001906:	2328      	movs	r3, #40	@ 0x28
 8001908:	001a      	movs	r2, r3
 800190a:	2100      	movs	r1, #0
 800190c:	f006 fa32 	bl	8007d74 <memset>
	  HAL_RTC_GetAlarm(hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001910:	2380      	movs	r3, #128	@ 0x80
 8001912:	005a      	lsls	r2, r3, #1
 8001914:	1939      	adds	r1, r7, r4
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	2300      	movs	r3, #0
 800191a:	f004 fb4f 	bl	8005fbc <HAL_RTC_GetAlarm>


	  if(sAlarm.AlarmTime.Minutes>58) {
 800191e:	193b      	adds	r3, r7, r4
 8001920:	785b      	ldrb	r3, [r3, #1]
 8001922:	2b3a      	cmp	r3, #58	@ 0x3a
 8001924:	d903      	bls.n	800192e <HAL_RTC_AlarmAEventCallback+0x36>
		sAlarm.AlarmTime.Minutes=0;
 8001926:	193b      	adds	r3, r7, r4
 8001928:	2200      	movs	r2, #0
 800192a:	705a      	strb	r2, [r3, #1]
 800192c:	e006      	b.n	800193c <HAL_RTC_AlarmAEventCallback+0x44>
	  } else {
		sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 800192e:	2108      	movs	r1, #8
 8001930:	187b      	adds	r3, r7, r1
 8001932:	785b      	ldrb	r3, [r3, #1]
 8001934:	3301      	adds	r3, #1
 8001936:	b2da      	uxtb	r2, r3
 8001938:	187b      	adds	r3, r7, r1
 800193a:	705a      	strb	r2, [r3, #1]
	  }
		while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 800193c:	46c0      	nop			@ (mov r8, r8)
 800193e:	2308      	movs	r3, #8
 8001940:	18f9      	adds	r1, r7, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	0018      	movs	r0, r3
 8001948:	f004 f9f8 	bl	8005d3c <HAL_RTC_SetAlarm_IT>
 800194c:	1e03      	subs	r3, r0, #0
 800194e:	d1f6      	bne.n	800193e <HAL_RTC_AlarmAEventCallback+0x46>

	  updateAndDisplayTime();
 8001950:	f7ff ff68 	bl	8001824 <updateAndDisplayTime>

	  // If alarm is enabled and current time matches user alarm time, set off the alarm.
	  if(userAlarmToggle && userAlarmTime.Hours == currTime.Hours
 8001954:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <HAL_RTC_AlarmAEventCallback+0x94>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d013      	beq.n	8001984 <HAL_RTC_AlarmAEventCallback+0x8c>
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <HAL_RTC_AlarmAEventCallback+0x98>)
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <HAL_RTC_AlarmAEventCallback+0x9c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d10d      	bne.n	8001984 <HAL_RTC_AlarmAEventCallback+0x8c>
			  && userAlarmTime.Minutes == currTime.Minutes && userAlarmTime.TimeFormat == currTime.TimeFormat) {
 8001968:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <HAL_RTC_AlarmAEventCallback+0x98>)
 800196a:	785a      	ldrb	r2, [r3, #1]
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_RTC_AlarmAEventCallback+0x9c>)
 800196e:	785b      	ldrb	r3, [r3, #1]
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_RTC_AlarmAEventCallback+0x8c>
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_RTC_AlarmAEventCallback+0x98>)
 8001976:	78da      	ldrb	r2, [r3, #3]
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_RTC_AlarmAEventCallback+0x9c>)
 800197a:	78db      	ldrb	r3, [r3, #3]
 800197c:	429a      	cmp	r2, r3
 800197e:	d101      	bne.n	8001984 <HAL_RTC_AlarmAEventCallback+0x8c>
		  userAlarmBeep();
 8001980:	f000 f80a 	bl	8001998 <userAlarmBeep>
	  }


}
 8001984:	46c0      	nop			@ (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b00d      	add	sp, #52	@ 0x34
 800198a:	bd90      	pop	{r4, r7, pc}
 800198c:	200000b5 	.word	0x200000b5
 8001990:	200000d0 	.word	0x200000d0
 8001994:	200000b8 	.word	0x200000b8

08001998 <userAlarmBeep>:
 * Functionality depends on whether or not this is the first or second snooze.
 * 		First Snooze: 10-minute timer is started and alarm
 * 		              is beeped again at the end of this 10 minutes.
 * 		Second Snooze: No timer is started and silencing the alarm silences it for good.
 */
void userAlarmBeep() {
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0

	if (secondSnooze) { 		//If the user has already snoozed once,
 800199e:	4b52      	ldr	r3, [pc, #328]	@ (8001ae8 <userAlarmBeep+0x150>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d02d      	beq.n	8001a02 <userAlarmBeep+0x6a>

			// Stop the timer and
			HAL_TIM_Base_Stop_IT(timerSnooze);
 80019a6:	4b51      	ldr	r3, [pc, #324]	@ (8001aec <userAlarmBeep+0x154>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	0018      	movs	r0, r3
 80019ac:	f005 fa92 	bl	8006ed4 <HAL_TIM_Base_Stop_IT>

			// Reset count to 0
			// only bits 0 - 15 should be changed.
			timerSnooze->Instance->CNT &= 0xFFFF0000;
 80019b0:	4b4e      	ldr	r3, [pc, #312]	@ (8001aec <userAlarmBeep+0x154>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019b8:	4b4c      	ldr	r3, [pc, #304]	@ (8001aec <userAlarmBeep+0x154>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	0c12      	lsrs	r2, r2, #16
 80019c0:	0412      	lsls	r2, r2, #16
 80019c2:	625a      	str	r2, [r3, #36]	@ 0x24

			// Reset interrupt status register
			timerSnooze->Instance->SR &= 0xFFFC;
 80019c4:	4b49      	ldr	r3, [pc, #292]	@ (8001aec <userAlarmBeep+0x154>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	4b47      	ldr	r3, [pc, #284]	@ (8001aec <userAlarmBeep+0x154>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4947      	ldr	r1, [pc, #284]	@ (8001af0 <userAlarmBeep+0x158>)
 80019d4:	400a      	ands	r2, r1
 80019d6:	611a      	str	r2, [r3, #16]

			// Re-write RCR with 10
			timerSnooze->Instance->RCR &= 0xFF00;
 80019d8:	4b44      	ldr	r3, [pc, #272]	@ (8001aec <userAlarmBeep+0x154>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019e0:	4b42      	ldr	r3, [pc, #264]	@ (8001aec <userAlarmBeep+0x154>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	22ff      	movs	r2, #255	@ 0xff
 80019e8:	0212      	lsls	r2, r2, #8
 80019ea:	400a      	ands	r2, r1
 80019ec:	631a      	str	r2, [r3, #48]	@ 0x30
			timerSnooze->Instance->RCR |= timerSnooze_RCR;
 80019ee:	4b3f      	ldr	r3, [pc, #252]	@ (8001aec <userAlarmBeep+0x154>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019f6:	2164      	movs	r1, #100	@ 0x64
 80019f8:	4b3c      	ldr	r3, [pc, #240]	@ (8001aec <userAlarmBeep+0x154>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	631a      	str	r2, [r3, #48]	@ 0x30

		}

	HAL_TIM_Base_Stop(timerDelay);
 8001a02:	4b3c      	ldr	r3, [pc, #240]	@ (8001af4 <userAlarmBeep+0x15c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	0018      	movs	r0, r3
 8001a08:	f005 f9ea 	bl	8006de0 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 8001a0c:	4b39      	ldr	r3, [pc, #228]	@ (8001af4 <userAlarmBeep+0x15c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f005 f999 	bl	8006d48 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001a16:	4b37      	ldr	r3, [pc, #220]	@ (8001af4 <userAlarmBeep+0x15c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1e:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8001a20:	1cfb      	adds	r3, r7, #3
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]

	// Begins streaming audio to user
	startAudioStream();
 8001a26:	f000 fc13 	bl	8002250 <startAudioStream>

	do {						// Beep buzzer and blink display until snooze button is pressed

		updateAndDisplayTime();				// Update to current time and display
 8001a2a:	f7ff fefb 	bl	8001824 <updateAndDisplayTime>

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 2)) {		// Use hardware timer to blink/beep display
 8001a2e:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <userAlarmBeep+0x15c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8001af8 <userAlarmBeep+0x160>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d91a      	bls.n	8001a76 <userAlarmBeep+0xde>

			sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);	// Toggle 0% to 50% duty cycle
 8001a40:	1cfb      	adds	r3, r7, #3
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4a2d      	ldr	r2, [pc, #180]	@ (8001afc <userAlarmBeep+0x164>)
 8001a46:	5cd3      	ldrb	r3, [r2, r3]
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f000 fded 	bl	8002628 <sevSeg_setIntensity>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8001a4e:	4b29      	ldr	r3, [pc, #164]	@ (8001af4 <userAlarmBeep+0x15c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a56:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8001a58:	1cfb      	adds	r3, r7, #3
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	1e5a      	subs	r2, r3, #1
 8001a5e:	4193      	sbcs	r3, r2
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2201      	movs	r2, #1
 8001a64:	4053      	eors	r3, r2
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	001a      	movs	r2, r3
 8001a6a:	1cfb      	adds	r3, r7, #3
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	781a      	ldrb	r2, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	400a      	ands	r2, r1
 8001a74:	701a      	strb	r2, [r3, #0]

		}


		capTouch_readChannels(&capTouch);
 8001a76:	4b22      	ldr	r3, [pc, #136]	@ (8001b00 <userAlarmBeep+0x168>)
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f7fe fd7b 	bl	8000574 <capTouch_readChannels>

	} while(capTouch.keyStat == 0x00 &&
 8001a7e:	4b20      	ldr	r3, [pc, #128]	@ (8001b00 <userAlarmBeep+0x168>)
 8001a80:	7c1b      	ldrb	r3, [r3, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d108      	bne.n	8001a98 <userAlarmBeep+0x100>
			(HAL_GPIO_ReadPin(alarmEnableButtonPort, alarmEnableButtonPin) != GPIO_PIN_RESET));
 8001a86:	4b1f      	ldr	r3, [pc, #124]	@ (8001b04 <userAlarmBeep+0x16c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	0011      	movs	r1, r2
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f001 fdf0 	bl	8003674 <HAL_GPIO_ReadPin>
 8001a94:	1e03      	subs	r3, r0, #0
	} while(capTouch.keyStat == 0x00 &&
 8001a96:	d1c8      	bne.n	8001a2a <userAlarmBeep+0x92>

	/*
	 * Stop blinking, turn off sound, set 50% duty cycle, update time
	 */
	HAL_TIM_Base_Stop(timerDelay);
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <userAlarmBeep+0x15c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f005 f99f 	bl	8006de0 <HAL_TIM_Base_Stop>
	stopAudioStream();
 8001aa2:	f000 fbe1 	bl	8002268 <stopAudioStream>
	updateAndDisplayTime();				// Update to current time and display
 8001aa6:	f7ff febd 	bl	8001824 <updateAndDisplayTime>
	sevSeg_setIntensity(sevSeg_intensityDuty[1]);	// Set to 50% duty cycle
 8001aaa:	2332      	movs	r3, #50	@ 0x32
 8001aac:	0018      	movs	r0, r3
 8001aae:	f000 fdbb 	bl	8002628 <sevSeg_setIntensity>
	displayToggle = 2;								// Set to 2 for future display button ISRs
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <userAlarmBeep+0x170>)
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	701a      	strb	r2, [r3, #0]


	// If this is the first snooze,
	if(!secondSnooze) {
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <userAlarmBeep+0x150>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2201      	movs	r2, #1
 8001abe:	4053      	eors	r3, r2
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d008      	beq.n	8001ad8 <userAlarmBeep+0x140>

		// Start the snooze timer to trigger an interrupt after 10 minutes
		HAL_TIM_Base_Start_IT(timerSnooze);
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <userAlarmBeep+0x154>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f005 f9ae 	bl	8006e2c <HAL_TIM_Base_Start_IT>

		// Set flag
		secondSnooze = true;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <userAlarmBeep+0x150>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
		 * in the top conditional, the secondSnooze is always true;
		 */
		secondSnooze = false;

	}
}
 8001ad6:	e002      	b.n	8001ade <userAlarmBeep+0x146>
		secondSnooze = false;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	@ (8001ae8 <userAlarmBeep+0x150>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
}
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b002      	add	sp, #8
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	20000405 	.word	0x20000405
 8001aec:	20000070 	.word	0x20000070
 8001af0:	0000fffc 	.word	0x0000fffc
 8001af4:	2000006c 	.word	0x2000006c
 8001af8:	00007ffe 	.word	0x00007ffe
 8001afc:	08007e1c 	.word	0x08007e1c
 8001b00:	20000408 	.word	0x20000408
 8001b04:	20000000 	.word	0x20000000
 8001b08:	200000b4 	.word	0x200000b4

08001b0c <HAL_GPIO_EXTI_Falling_Callback>:
 * General Falling-Edge EXTI Callback function
 *
 * Internal conditional determines which function to call
 * based on which button was pressed.
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	0002      	movs	r2, r0
 8001b14:	1dbb      	adds	r3, r7, #6
 8001b16:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef halRet;					// Flag for printing interrupt status

	if(GPIO_Pin == displayButtonPin) {
 8001b18:	2208      	movs	r2, #8
 8001b1a:	1dbb      	adds	r3, r7, #6
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d106      	bne.n	8001b30 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		halRet = displayButtonISR();
 8001b22:	230f      	movs	r3, #15
 8001b24:	18fc      	adds	r4, r7, r3
 8001b26:	f000 f86f 	bl	8001c08 <displayButtonISR>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	7023      	strb	r3, [r4, #0]

	else {			//Code should never reach here, but do nothing if it does.
		__NOP();
	}

}
 8001b2e:	e03d      	b.n	8001bac <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmEnableButtonPin) {
 8001b30:	2204      	movs	r2, #4
 8001b32:	1dbb      	adds	r3, r7, #6
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d106      	bne.n	8001b48 <HAL_GPIO_EXTI_Falling_Callback+0x3c>
		halRet = alarmEnableISR();
 8001b3a:	230f      	movs	r3, #15
 8001b3c:	18fc      	adds	r4, r7, r3
 8001b3e:	f000 f88b 	bl	8001c58 <alarmEnableISR>
 8001b42:	0003      	movs	r3, r0
 8001b44:	7023      	strb	r3, [r4, #0]
}
 8001b46:	e031      	b.n	8001bac <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == alarmSetButtonPin) {
 8001b48:	2380      	movs	r3, #128	@ 0x80
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	1dba      	adds	r2, r7, #6
 8001b4e:	8812      	ldrh	r2, [r2, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d106      	bne.n	8001b62 <HAL_GPIO_EXTI_Falling_Callback+0x56>
		halRet = alarmSetISR();
 8001b54:	230f      	movs	r3, #15
 8001b56:	18fc      	adds	r4, r7, r3
 8001b58:	f000 f8a8 	bl	8001cac <alarmSetISR>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	7023      	strb	r3, [r4, #0]
}
 8001b60:	e024      	b.n	8001bac <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == hourSetButtonPin) {
 8001b62:	2201      	movs	r2, #1
 8001b64:	1dbb      	adds	r3, r7, #6
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d106      	bne.n	8001b7a <HAL_GPIO_EXTI_Falling_Callback+0x6e>
		halRet = hourSetISR();
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	18fc      	adds	r4, r7, r3
 8001b70:	f000 f95c 	bl	8001e2c <hourSetISR>
 8001b74:	0003      	movs	r3, r0
 8001b76:	7023      	strb	r3, [r4, #0]
}
 8001b78:	e018      	b.n	8001bac <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == minuteSetButtonPin) {
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	1dbb      	adds	r3, r7, #6
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d106      	bne.n	8001b92 <HAL_GPIO_EXTI_Falling_Callback+0x86>
		halRet = minuteSetISR();
 8001b84:	230f      	movs	r3, #15
 8001b86:	18fc      	adds	r4, r7, r3
 8001b88:	f000 f97c 	bl	8001e84 <minuteSetISR>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	7023      	strb	r3, [r4, #0]
}
 8001b90:	e00c      	b.n	8001bac <HAL_GPIO_EXTI_Falling_Callback+0xa0>
	else if(GPIO_Pin == timeFormatSwitchPin) {
 8001b92:	2210      	movs	r2, #16
 8001b94:	1dbb      	adds	r3, r7, #6
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d106      	bne.n	8001baa <HAL_GPIO_EXTI_Falling_Callback+0x9e>
		halRet = timeFormatSwitchISR();
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	18fc      	adds	r4, r7, r3
 8001ba0:	f000 f9c2 	bl	8001f28 <timeFormatSwitchISR>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	7023      	strb	r3, [r4, #0]
}
 8001ba8:	e000      	b.n	8001bac <HAL_GPIO_EXTI_Falling_Callback+0xa0>
		__NOP();
 8001baa:	46c0      	nop			@ (mov r8, r8)
}
 8001bac:	46c0      	nop			@ (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b005      	add	sp, #20
 8001bb2:	bd90      	pop	{r4, r7, pc}

08001bb4 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	0002      	movs	r2, r0
 8001bbc:	1dbb      	adds	r3, r7, #6
 8001bbe:	801a      	strh	r2, [r3, #0]

	if(GPIO_Pin == timeFormatSwitchPin) {
 8001bc0:	2210      	movs	r2, #16
 8001bc2:	1dbb      	adds	r3, r7, #6
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d101      	bne.n	8001bce <HAL_GPIO_EXTI_Rising_Callback+0x1a>

		timeFormatSwitchISR();
 8001bca:	f000 f9ad 	bl	8001f28 <timeFormatSwitchISR>

	}

}
 8001bce:	46c0      	nop			@ (mov r8, r8)
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b002      	add	sp, #8
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <HAL_TIM_PeriodElapsedCallback>:
 * Used for second snooze functionality
 *
 * This is entered at the end of a 10-minute snooze, at
 * which point the timer kicks back an interrupt.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

	if((htim == timerSnooze) && (secondSnooze == true)) {
 8001be0:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d105      	bne.n	8001bf6 <HAL_TIM_PeriodElapsedCallback+0x1e>
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_TIM_PeriodElapsedCallback+0x1e>

		userAlarmBeep();
 8001bf2:	f7ff fed1 	bl	8001998 <userAlarmBeep>

	}

}
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b002      	add	sp, #8
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			@ (mov r8, r8)
 8001c00:	20000070 	.word	0x20000070
 8001c04:	20000405 	.word	0x20000405

08001c08 <displayButtonISR>:

/*
 * Toggles through user time display brightness settings
 */
HAL_StatusTypeDef displayButtonISR(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]

	updateAndDisplayTime();
 8001c14:	f7ff fe06 	bl	8001824 <updateAndDisplayTime>

	sevSeg_setIntensity(sevSeg_intensityDuty[displayToggle]);		//Turn display to proper duty cycle
 8001c18:	4b0d      	ldr	r3, [pc, #52]	@ (8001c50 <displayButtonISR+0x48>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	001a      	movs	r2, r3
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c54 <displayButtonISR+0x4c>)
 8001c20:	5c9b      	ldrb	r3, [r3, r2]
 8001c22:	0018      	movs	r0, r3
 8001c24:	f000 fd00 	bl	8002628 <sevSeg_setIntensity>

	if(displayToggle >= 1) {			// Increment display toggle or reset back down to 0;
 8001c28:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <displayButtonISR+0x48>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <displayButtonISR+0x30>
		displayToggle = 0;
 8001c30:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <displayButtonISR+0x48>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	e005      	b.n	8001c44 <displayButtonISR+0x3c>
	} else {
		displayToggle++;
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <displayButtonISR+0x48>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	4b03      	ldr	r3, [pc, #12]	@ (8001c50 <displayButtonISR+0x48>)
 8001c42:	701a      	strb	r2, [r3, #0]
	}

	return halRet;				// Return HAL status
 8001c44:	1dfb      	adds	r3, r7, #7
 8001c46:	781b      	ldrb	r3, [r3, #0]

}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b002      	add	sp, #8
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200000b4 	.word	0x200000b4
 8001c54:	08007e1c 	.word	0x08007e1c

08001c58 <alarmEnableISR>:

/*
 * Toggles user alarm enable bool and alarm enable LED.
 */
HAL_StatusTypeDef alarmEnableISR(void) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0



	//printf("Entered alarm toggle ISR\n\r");
	HAL_StatusTypeDef halRet = HAL_OK;
 8001c5e:	1dfb      	adds	r3, r7, #7
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]

	if(!userAlarmToggle) {					// If alarm is disabled, enable it.
 8001c64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <alarmEnableISR+0x4c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4053      	eors	r3, r2
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <alarmEnableISR+0x22>

		userAlarmToggle = true;								// Toggle internal flag to true
 8001c72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <alarmEnableISR+0x4c>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e008      	b.n	8001c8c <alarmEnableISR+0x34>

	}
	else if (userAlarmToggle) {				// If alarm is enabled, disable it.
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <alarmEnableISR+0x4c>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <alarmEnableISR+0x32>

		userAlarmToggle = false;							// Toggle internal flag to false
 8001c82:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <alarmEnableISR+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	e000      	b.n	8001c8c <alarmEnableISR+0x34>
	}
	else {
		__NOP();							//Code should never reach here.
 8001c8a:	46c0      	nop			@ (mov r8, r8)
	}

	updateAndDisplayTime();				// Update display with correct decimal point
 8001c8c:	f7ff fdca 	bl	8001824 <updateAndDisplayTime>

	// Reset snooze time
	secondSnooze = false;
 8001c90:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <alarmEnableISR+0x50>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]

	return halRet;
 8001c96:	1dfb      	adds	r3, r7, #7
 8001c98:	781b      	ldrb	r3, [r3, #0]

}
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b002      	add	sp, #8
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	200000b5 	.word	0x200000b5
 8001ca8:	20000405 	.word	0x20000405

08001cac <alarmSetISR>:
 * Delays for 3 seconds, checks if alarm set button is still pressed.
 * If it is, allow user to set the new alarm time
 * and blink display to indicate this
 *
 */
HAL_StatusTypeDef alarmSetISR(void) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 8001cb2:	1c7b      	adds	r3, r7, #1
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
	/*
	 * Wait for 3 seconds to see if alarm set button is still pressed
	 */

	// Delay for 3 * 1s intervals
	for(uint8_t i = 0; i < 3; i++) {
 8001cb8:	1dfb      	adds	r3, r7, #7
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	e01a      	b.n	8001cf6 <alarmSetISR+0x4a>

		HAL_TIM_Base_Stop(timerDelay);
 8001cc0:	4b55      	ldr	r3, [pc, #340]	@ (8001e18 <alarmSetISR+0x16c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f005 f88b 	bl	8006de0 <HAL_TIM_Base_Stop>
		timerDelay->Instance->CNT = 0;						// Reset timer base
 8001cca:	4b53      	ldr	r3, [pc, #332]	@ (8001e18 <alarmSetISR+0x16c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001cd4:	4b50      	ldr	r3, [pc, #320]	@ (8001e18 <alarmSetISR+0x16c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f005 f835 	bl	8006d48 <HAL_TIM_Base_Start>
	//	timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to

		do {

		} while(__HAL_TIM_GET_COUNTER(timerDelay) < (65535));
 8001cde:	4b4e      	ldr	r3, [pc, #312]	@ (8001e18 <alarmSetISR+0x16c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	4a4d      	ldr	r2, [pc, #308]	@ (8001e1c <alarmSetISR+0x170>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d9f8      	bls.n	8001cde <alarmSetISR+0x32>
	for(uint8_t i = 0; i < 3; i++) {
 8001cec:	1dfb      	adds	r3, r7, #7
 8001cee:	781a      	ldrb	r2, [r3, #0]
 8001cf0:	1dfb      	adds	r3, r7, #7
 8001cf2:	3201      	adds	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
 8001cf6:	1dfb      	adds	r3, r7, #7
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d9e0      	bls.n	8001cc0 <alarmSetISR+0x14>
	}

	// If button is still pressed, we are in alarm set mode.
	if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_RESET) {
 8001cfe:	4b48      	ldr	r3, [pc, #288]	@ (8001e20 <alarmSetISR+0x174>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2280      	movs	r2, #128	@ 0x80
 8001d04:	0212      	lsls	r2, r2, #8
 8001d06:	0011      	movs	r1, r2
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f001 fcb3 	bl	8003674 <HAL_GPIO_ReadPin>
 8001d0e:	1e03      	subs	r3, r0, #0
 8001d10:	d11f      	bne.n	8001d52 <alarmSetISR+0xa6>
		alarmSetMode = true;
 8001d12:	4b44      	ldr	r3, [pc, #272]	@ (8001e24 <alarmSetISR+0x178>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
	 * alarm set process until the button is pressed again
	 */


	// Reset Timer
	HAL_TIM_Base_Stop(timerDelay);
 8001d18:	4b3f      	ldr	r3, [pc, #252]	@ (8001e18 <alarmSetISR+0x16c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f005 f85f 	bl	8006de0 <HAL_TIM_Base_Stop>
	timerDelay->Instance->CNT = 0;
 8001d22:	4b3d      	ldr	r3, [pc, #244]	@ (8001e18 <alarmSetISR+0x16c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 1 s)
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e18 <alarmSetISR+0x16c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f005 f809 	bl	8006d48 <HAL_TIM_Base_Start>
	uint16_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8001d36:	4b38      	ldr	r3, [pc, #224]	@ (8001e18 <alarmSetISR+0x16c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	801a      	strh	r2, [r3, #0]

	bool alarmSetButtonReset = false;
 8001d42:	1cfb      	adds	r3, r7, #3
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {
 8001d48:	4b36      	ldr	r3, [pc, #216]	@ (8001e24 <alarmSetISR+0x178>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d059      	beq.n	8001e04 <alarmSetISR+0x158>
 8001d50:	e002      	b.n	8001d58 <alarmSetISR+0xac>
		return halRet;
 8001d52:	1c7b      	adds	r3, r7, #1
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	e05a      	b.n	8001e0e <alarmSetISR+0x162>

		bool displayBlink = false;
 8001d58:	1cbb      	adds	r3, r7, #2
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]

		do {											// while the alarm set button is not held down, blink display.

			// Check to make sure the user has released the set button from the initial hold
			if(HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) == GPIO_PIN_SET) {
 8001d5e:	4b30      	ldr	r3, [pc, #192]	@ (8001e20 <alarmSetISR+0x174>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2280      	movs	r2, #128	@ 0x80
 8001d64:	0212      	lsls	r2, r2, #8
 8001d66:	0011      	movs	r1, r2
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f001 fc83 	bl	8003674 <HAL_GPIO_ReadPin>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d102      	bne.n	8001d7a <alarmSetISR+0xce>
				alarmSetButtonReset = true;
 8001d74:	1cfb      	adds	r3, r7, #3
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
			}

			updateAndDisplayAlarm();
 8001d7a:	f7ff fd8d 	bl	8001898 <updateAndDisplayAlarm>

			if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65536 / 2)) {
 8001d7e:	4b26      	ldr	r3, [pc, #152]	@ (8001e18 <alarmSetISR+0x16c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	1ad2      	subs	r2, r2, r3
 8001d8c:	2380      	movs	r3, #128	@ 0x80
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d31b      	bcc.n	8001dcc <alarmSetISR+0x120>

				sevSeg_setIntensity(sevSeg_intensityDuty[displayBlink]);		// Initialize to whatever duty cycle
 8001d94:	1cbb      	adds	r3, r7, #2
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4a23      	ldr	r2, [pc, #140]	@ (8001e28 <alarmSetISR+0x17c>)
 8001d9a:	5cd3      	ldrb	r3, [r2, r3]
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f000 fc43 	bl	8002628 <sevSeg_setIntensity>

				timerVal = __HAL_TIM_GET_COUNTER(timerDelay);
 8001da2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <alarmSetISR+0x16c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	801a      	strh	r2, [r3, #0]
				displayBlink = !displayBlink;
 8001dae:	1cbb      	adds	r3, r7, #2
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	1e5a      	subs	r2, r3, #1
 8001db4:	4193      	sbcs	r3, r2
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2201      	movs	r2, #1
 8001dba:	4053      	eors	r3, r2
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	1cbb      	adds	r3, r7, #2
 8001dc2:	701a      	strb	r2, [r3, #0]
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	400a      	ands	r2, r1
 8001dca:	701a      	strb	r2, [r3, #0]

			}

		}while((HAL_GPIO_ReadPin(alarmSetButtonPort, alarmSetButtonPin) != GPIO_PIN_RESET)
 8001dcc:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <alarmSetISR+0x174>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2280      	movs	r2, #128	@ 0x80
 8001dd2:	0212      	lsls	r2, r2, #8
 8001dd4:	0011      	movs	r1, r2
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f001 fc4c 	bl	8003674 <HAL_GPIO_ReadPin>
 8001ddc:	1e03      	subs	r3, r0, #0
				|| !alarmSetButtonReset);
 8001dde:	d1be      	bne.n	8001d5e <alarmSetISR+0xb2>
 8001de0:	1cfb      	adds	r3, r7, #3
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2201      	movs	r2, #1
 8001de6:	4053      	eors	r3, r2
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1b7      	bne.n	8001d5e <alarmSetISR+0xb2>

		sevSeg_setIntensity(sevSeg_intensityDuty[1]);			// Turn display back to 50% intensity
 8001dee:	2332      	movs	r3, #50	@ 0x32
 8001df0:	0018      	movs	r0, r3
 8001df2:	f000 fc19 	bl	8002628 <sevSeg_setIntensity>

		HAL_TIM_Base_Stop(timerDelay);
 8001df6:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <alarmSetISR+0x16c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f004 fff0 	bl	8006de0 <HAL_TIM_Base_Stop>

		updateAndDisplayTime();
 8001e00:	f7ff fd10 	bl	8001824 <updateAndDisplayTime>

	}

	alarmSetMode = false;		// We have exited alarm set mode
 8001e04:	4b07      	ldr	r3, [pc, #28]	@ (8001e24 <alarmSetISR+0x178>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]

	//printf("Current time back to %u:%u:%u.\n\r", currTime.Hours, currTime.Minutes, currTime.Seconds);

	return halRet;
 8001e0a:	1c7b      	adds	r3, r7, #1
 8001e0c:	781b      	ldrb	r3, [r3, #0]

}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b002      	add	sp, #8
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	2000006c 	.word	0x2000006c
 8001e1c:	0000fffe 	.word	0x0000fffe
 8001e20:	20000004 	.word	0x20000004
 8001e24:	20000404 	.word	0x20000404
 8001e28:	08007e1c 	.word	0x08007e1c

08001e2c <hourSetISR>:

/*
 * Increment either user alarm hour value or RTC hour value
 */
HAL_StatusTypeDef hourSetISR(void) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001e38:	4b0e      	ldr	r3, [pc, #56]	@ (8001e74 <hourSetISR+0x48>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <hourSetISR+0x1a>

		alarmHourInc();
 8001e40:	f000 f89a 	bl	8001f78 <alarmHourInc>
 8001e44:	e00f      	b.n	8001e66 <hourSetISR+0x3a>

	}
	else {									// Otherwise, change current time hour.

		currHourInc();
 8001e46:	f000 f8c7 	bl	8001fd8 <currHourInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001e4a:	490b      	ldr	r1, [pc, #44]	@ (8001e78 <hourSetISR+0x4c>)
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <hourSetISR+0x50>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	0018      	movs	r0, r3
 8001e52:	f003 fe21 	bl	8005a98 <HAL_RTC_SetTime>

		updateAndDisplayTime();
 8001e56:	f7ff fce5 	bl	8001824 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001e5a:	4a09      	ldr	r2, [pc, #36]	@ (8001e80 <hourSetISR+0x54>)
 8001e5c:	4906      	ldr	r1, [pc, #24]	@ (8001e78 <hourSetISR+0x4c>)
 8001e5e:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <hourSetISR+0x50>)
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7fe ff75 	bl	8000d50 <getRTCTime>

		//printf("Current time hour incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}

	return halRet;
 8001e66:	1dfb      	adds	r3, r7, #7
 8001e68:	781b      	ldrb	r3, [r3, #0]

}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b002      	add	sp, #8
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			@ (mov r8, r8)
 8001e74:	20000404 	.word	0x20000404
 8001e78:	200000b8 	.word	0x200000b8
 8001e7c:	200001d8 	.word	0x200001d8
 8001e80:	200000cc 	.word	0x200000cc

08001e84 <minuteSetISR>:

/*
 * Increment either user alarm minute value or RTC minute value
 */
HAL_StatusTypeDef minuteSetISR(void) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08c      	sub	sp, #48	@ 0x30
 8001e88:	af00      	add	r7, sp, #0



	HAL_StatusTypeDef halRet = HAL_OK;
 8001e8a:	232f      	movs	r3, #47	@ 0x2f
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]

	if(alarmSetMode) {	// If the clock is in alarm set mode, change user alarm time hour
 8001e92:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <minuteSetISR+0x94>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <minuteSetISR+0x1c>

		alarmMinuteInc();
 8001e9a:	f000 f8dd 	bl	8002058 <alarmMinuteInc>
 8001e9e:	e034      	b.n	8001f0a <minuteSetISR+0x86>

	}
	else {									// Otherwise, change current time hour.

		currMinuteInc();
 8001ea0:	f000 f8f8 	bl	8002094 <currMinuteInc>

		HAL_RTC_SetTime(&hrtc, &currTime, RTCTimeFormat);
 8001ea4:	491d      	ldr	r1, [pc, #116]	@ (8001f1c <minuteSetISR+0x98>)
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <minuteSetISR+0x9c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f003 fdf4 	bl	8005a98 <HAL_RTC_SetTime>

		/*
		 * Change internal RTC alarm to keep it triggering
		 */

		RTC_AlarmTypeDef sAlarm = {0};
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	2328      	movs	r3, #40	@ 0x28
 8001eb6:	001a      	movs	r2, r3
 8001eb8:	2100      	movs	r1, #0
 8001eba:	f005 ff5b 	bl	8007d74 <memset>
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, internalAlarm, RTCTimeFormat);
 8001ebe:	2380      	movs	r3, #128	@ 0x80
 8001ec0:	005a      	lsls	r2, r3, #1
 8001ec2:	1d39      	adds	r1, r7, #4
 8001ec4:	4816      	ldr	r0, [pc, #88]	@ (8001f20 <minuteSetISR+0x9c>)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f004 f878 	bl	8005fbc <HAL_RTC_GetAlarm>

		if(sAlarm.AlarmTime.Minutes>58) {
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	785b      	ldrb	r3, [r3, #1]
 8001ed0:	2b3a      	cmp	r3, #58	@ 0x3a
 8001ed2:	d903      	bls.n	8001edc <minuteSetISR+0x58>
			sAlarm.AlarmTime.Minutes=0;
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	705a      	strb	r2, [r3, #1]
 8001eda:	e005      	b.n	8001ee8 <minuteSetISR+0x64>
			//printf("Reset alarm time\n\r");
		} else {
			sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	785b      	ldrb	r3, [r3, #1]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	705a      	strb	r2, [r3, #1]
		}
		while(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8001ee8:	46c0      	nop			@ (mov r8, r8)
 8001eea:	1d39      	adds	r1, r7, #4
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <minuteSetISR+0x9c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f003 ff23 	bl	8005d3c <HAL_RTC_SetAlarm_IT>
 8001ef6:	1e03      	subs	r3, r0, #0
 8001ef8:	d1f7      	bne.n	8001eea <minuteSetISR+0x66>

		updateAndDisplayTime();
 8001efa:	f7ff fc93 	bl	8001824 <updateAndDisplayTime>

		getRTCTime(&hrtc, &currTime, &currDate);
 8001efe:	4a09      	ldr	r2, [pc, #36]	@ (8001f24 <minuteSetISR+0xa0>)
 8001f00:	4906      	ldr	r1, [pc, #24]	@ (8001f1c <minuteSetISR+0x98>)
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <minuteSetISR+0x9c>)
 8001f04:	0018      	movs	r0, r3
 8001f06:	f7fe ff23 	bl	8000d50 <getRTCTime>
		//printf("Current time minute incremented to %u:%u:%u.\n\r", currTime.Hours,
				//currTime.Minutes, currTime.Seconds);
	}


	return halRet;
 8001f0a:	232f      	movs	r3, #47	@ 0x2f
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	781b      	ldrb	r3, [r3, #0]
}
 8001f10:	0018      	movs	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b00c      	add	sp, #48	@ 0x30
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000404 	.word	0x20000404
 8001f1c:	200000b8 	.word	0x200000b8
 8001f20:	200001d8 	.word	0x200001d8
 8001f24:	200000cc 	.word	0x200000cc

08001f28 <timeFormatSwitchISR>:

/*
 * Switch hour format (12 or 24 hr)
 */
HAL_StatusTypeDef timeFormatSwitchISR(void) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halRet = HAL_OK;
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]

	// Determine which time format we will be using
	if(HAL_GPIO_ReadPin(timeFormatSwitchPort, timeFormatSwitchPin) == userTimeFormatGPIO_12) {
 8001f34:	4b0d      	ldr	r3, [pc, #52]	@ (8001f6c <timeFormatSwitchISR+0x44>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2210      	movs	r2, #16
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f001 fb99 	bl	8003674 <HAL_GPIO_ReadPin>
 8001f42:	0003      	movs	r3, r0
 8001f44:	001a      	movs	r2, r3
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <timeFormatSwitchISR+0x48>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d103      	bne.n	8001f56 <timeFormatSwitchISR+0x2e>
	  userTimeFormat = RTC_HOURFORMAT_12;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <timeFormatSwitchISR+0x4c>)
 8001f50:	2240      	movs	r2, #64	@ 0x40
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e002      	b.n	8001f5c <timeFormatSwitchISR+0x34>
	}
	else {
	  userTimeFormat = RTC_HOURFORMAT_24;
 8001f56:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <timeFormatSwitchISR+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
	}

	updateAndDisplayTime();
 8001f5c:	f7ff fc62 	bl	8001824 <updateAndDisplayTime>

	return halRet;
 8001f60:	1dfb      	adds	r3, r7, #7
 8001f62:	781b      	ldrb	r3, [r3, #0]

}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b002      	add	sp, #8
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	20000040 	.word	0x20000040
 8001f74:	200000e8 	.word	0x200000e8

08001f78 <alarmHourInc>:

/*
 * Increment user alarm time hour
 */
void alarmHourInc(void) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0

	if(userAlarmTime.Hours >= 12) {
 8001f7c:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <alarmHourInc+0x5c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b0b      	cmp	r3, #11
 8001f82:	d903      	bls.n	8001f8c <alarmHourInc+0x14>
		userAlarmTime.Hours = 1;
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <alarmHourInc+0x5c>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	e01e      	b.n	8001fca <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours == 11) {
 8001f8c:	4b11      	ldr	r3, [pc, #68]	@ (8001fd4 <alarmHourInc+0x5c>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b0b      	cmp	r3, #11
 8001f92:	d10e      	bne.n	8001fb2 <alarmHourInc+0x3a>
		if(userAlarmTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001f94:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <alarmHourInc+0x5c>)
 8001f96:	78db      	ldrb	r3, [r3, #3]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d103      	bne.n	8001fa4 <alarmHourInc+0x2c>
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <alarmHourInc+0x5c>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	70da      	strb	r2, [r3, #3]
 8001fa2:	e002      	b.n	8001faa <alarmHourInc+0x32>
		}
		else {
			userAlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <alarmHourInc+0x5c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	70da      	strb	r2, [r3, #3]
		}
		userAlarmTime.Hours = 12;
 8001faa:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <alarmHourInc+0x5c>)
 8001fac:	220c      	movs	r2, #12
 8001fae:	701a      	strb	r2, [r3, #0]
 8001fb0:	e00b      	b.n	8001fca <alarmHourInc+0x52>
	}
	else if(userAlarmTime.Hours < 11) {
 8001fb2:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <alarmHourInc+0x5c>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b0a      	cmp	r3, #10
 8001fb8:	d806      	bhi.n	8001fc8 <alarmHourInc+0x50>
		userAlarmTime.Hours = userAlarmTime.Hours + 1;
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <alarmHourInc+0x5c>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <alarmHourInc+0x5c>)
 8001fc4:	701a      	strb	r2, [r3, #0]
 8001fc6:	e000      	b.n	8001fca <alarmHourInc+0x52>
	}
	else {
		__NOP();
 8001fc8:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8001fca:	f000 f8e1 	bl	8002190 <updateRTCBackupReg>

}
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200000d0 	.word	0x200000d0

08001fd8 <currHourInc>:

/*
 * Increment current time hour
 */
void currHourInc(void) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8001fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8002048 <currHourInc+0x70>)
 8001fde:	491b      	ldr	r1, [pc, #108]	@ (800204c <currHourInc+0x74>)
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <currHourInc+0x78>)
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f7fe feb4 	bl	8000d50 <getRTCTime>

	if(currTime.Hours >= 12) {
 8001fe8:	4b18      	ldr	r3, [pc, #96]	@ (800204c <currHourInc+0x74>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b0b      	cmp	r3, #11
 8001fee:	d903      	bls.n	8001ff8 <currHourInc+0x20>
		currTime.Hours = 1;
 8001ff0:	4b16      	ldr	r3, [pc, #88]	@ (800204c <currHourInc+0x74>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	e01e      	b.n	8002036 <currHourInc+0x5e>
	}
	else if(currTime.Hours == 11) {
 8001ff8:	4b14      	ldr	r3, [pc, #80]	@ (800204c <currHourInc+0x74>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b0b      	cmp	r3, #11
 8001ffe:	d10e      	bne.n	800201e <currHourInc+0x46>
		if(currTime.TimeFormat == RTC_HOURFORMAT12_AM) {
 8002000:	4b12      	ldr	r3, [pc, #72]	@ (800204c <currHourInc+0x74>)
 8002002:	78db      	ldrb	r3, [r3, #3]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d103      	bne.n	8002010 <currHourInc+0x38>
			currTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8002008:	4b10      	ldr	r3, [pc, #64]	@ (800204c <currHourInc+0x74>)
 800200a:	2201      	movs	r2, #1
 800200c:	70da      	strb	r2, [r3, #3]
 800200e:	e002      	b.n	8002016 <currHourInc+0x3e>
		}
		else {
			currTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002010:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <currHourInc+0x74>)
 8002012:	2200      	movs	r2, #0
 8002014:	70da      	strb	r2, [r3, #3]
		}
		currTime.Hours = 12;
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <currHourInc+0x74>)
 8002018:	220c      	movs	r2, #12
 800201a:	701a      	strb	r2, [r3, #0]
 800201c:	e00b      	b.n	8002036 <currHourInc+0x5e>
	}
	else if(userAlarmTime.Hours < 11) {
 800201e:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <currHourInc+0x7c>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b0a      	cmp	r3, #10
 8002024:	d806      	bhi.n	8002034 <currHourInc+0x5c>
		currTime.Hours = currTime.Hours + 1;
 8002026:	4b09      	ldr	r3, [pc, #36]	@ (800204c <currHourInc+0x74>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4b07      	ldr	r3, [pc, #28]	@ (800204c <currHourInc+0x74>)
 8002030:	701a      	strb	r2, [r3, #0]
 8002032:	e000      	b.n	8002036 <currHourInc+0x5e>
	}
	else {
		__NOP();
 8002034:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <currHourInc+0x74>)
 8002038:	2200      	movs	r2, #0
 800203a:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 800203c:	4b03      	ldr	r3, [pc, #12]	@ (800204c <currHourInc+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]

}
 8002042:	46c0      	nop			@ (mov r8, r8)
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200000cc 	.word	0x200000cc
 800204c:	200000b8 	.word	0x200000b8
 8002050:	200001d8 	.word	0x200001d8
 8002054:	200000d0 	.word	0x200000d0

08002058 <alarmMinuteInc>:

/*
 * Increment User alarm time minute
 */
void alarmMinuteInc(void) {
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0

	if(userAlarmTime.Minutes >= 59) {
 800205c:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <alarmMinuteInc+0x38>)
 800205e:	785b      	ldrb	r3, [r3, #1]
 8002060:	2b3a      	cmp	r3, #58	@ 0x3a
 8002062:	d903      	bls.n	800206c <alarmMinuteInc+0x14>
		/*
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		//alarmHourInc();
		userAlarmTime.Minutes = 0;
 8002064:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <alarmMinuteInc+0x38>)
 8002066:	2200      	movs	r2, #0
 8002068:	705a      	strb	r2, [r3, #1]
 800206a:	e00b      	b.n	8002084 <alarmMinuteInc+0x2c>
	}
	else if(userAlarmTime.Minutes < 59) {
 800206c:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <alarmMinuteInc+0x38>)
 800206e:	785b      	ldrb	r3, [r3, #1]
 8002070:	2b3a      	cmp	r3, #58	@ 0x3a
 8002072:	d806      	bhi.n	8002082 <alarmMinuteInc+0x2a>
		userAlarmTime.Minutes = userAlarmTime.Minutes + 1;
 8002074:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <alarmMinuteInc+0x38>)
 8002076:	785b      	ldrb	r3, [r3, #1]
 8002078:	3301      	adds	r3, #1
 800207a:	b2da      	uxtb	r2, r3
 800207c:	4b04      	ldr	r3, [pc, #16]	@ (8002090 <alarmMinuteInc+0x38>)
 800207e:	705a      	strb	r2, [r3, #1]
 8002080:	e000      	b.n	8002084 <alarmMinuteInc+0x2c>
	}
	else {
		__NOP();
 8002082:	46c0      	nop			@ (mov r8, r8)
	}

	// Update RTC backup registers with new user alarm time
	updateRTCBackupReg();
 8002084:	f000 f884 	bl	8002190 <updateRTCBackupReg>

}
 8002088:	46c0      	nop			@ (mov r8, r8)
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	200000d0 	.word	0x200000d0

08002094 <currMinuteInc>:

/*
 * Increment current time minute
 */
void currMinuteInc(void) {
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0

	getRTCTime(&hrtc, &currTime, &currDate);
 8002098:	4a11      	ldr	r2, [pc, #68]	@ (80020e0 <currMinuteInc+0x4c>)
 800209a:	4912      	ldr	r1, [pc, #72]	@ (80020e4 <currMinuteInc+0x50>)
 800209c:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <currMinuteInc+0x54>)
 800209e:	0018      	movs	r0, r3
 80020a0:	f7fe fe56 	bl	8000d50 <getRTCTime>

	if(currTime.Minutes >= 59) {
 80020a4:	4b0f      	ldr	r3, [pc, #60]	@ (80020e4 <currMinuteInc+0x50>)
 80020a6:	785b      	ldrb	r3, [r3, #1]
 80020a8:	2b3a      	cmp	r3, #58	@ 0x3a
 80020aa:	d903      	bls.n	80020b4 <currMinuteInc+0x20>
		 * The below function call is the old version in which
		 * the hour will increment when the minutes roll over.
		 */
		// currHourInc();

		currTime.Minutes = 0;
 80020ac:	4b0d      	ldr	r3, [pc, #52]	@ (80020e4 <currMinuteInc+0x50>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	705a      	strb	r2, [r3, #1]
 80020b2:	e00b      	b.n	80020cc <currMinuteInc+0x38>
	}
	else if(currTime.Minutes < 59) {
 80020b4:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <currMinuteInc+0x50>)
 80020b6:	785b      	ldrb	r3, [r3, #1]
 80020b8:	2b3a      	cmp	r3, #58	@ 0x3a
 80020ba:	d806      	bhi.n	80020ca <currMinuteInc+0x36>
		currTime.Minutes = currTime.Minutes + 1;
 80020bc:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <currMinuteInc+0x50>)
 80020be:	785b      	ldrb	r3, [r3, #1]
 80020c0:	3301      	adds	r3, #1
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	4b07      	ldr	r3, [pc, #28]	@ (80020e4 <currMinuteInc+0x50>)
 80020c6:	705a      	strb	r2, [r3, #1]
 80020c8:	e000      	b.n	80020cc <currMinuteInc+0x38>
	}
	else {
		__NOP();
 80020ca:	46c0      	nop			@ (mov r8, r8)
	}

	// Reset seconds
	currTime.Seconds = 0;
 80020cc:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <currMinuteInc+0x50>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	709a      	strb	r2, [r3, #2]
	currTime.SecondFraction = 0;
 80020d2:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <currMinuteInc+0x50>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]

}
 80020d8:	46c0      	nop			@ (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			@ (mov r8, r8)
 80020e0:	200000cc 	.word	0x200000cc
 80020e4:	200000b8 	.word	0x200000b8
 80020e8:	200001d8 	.word	0x200001d8

080020ec <dispFault>:

/*
 * Displays a non-critical fault to indicate reduced functionality
 */
void dispFault(void) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(debugLEDPort, debugLEDPin, GPIO_PIN_SET);
 80020f0:	4b05      	ldr	r3, [pc, #20]	@ (8002108 <dispFault+0x1c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2280      	movs	r2, #128	@ 0x80
 80020f6:	0151      	lsls	r1, r2, #5
 80020f8:	2201      	movs	r2, #1
 80020fa:	0018      	movs	r0, r3
 80020fc:	f001 fad7 	bl	80036ae <HAL_GPIO_WritePin>
}
 8002100:	46c0      	nop			@ (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			@ (mov r8, r8)
 8002108:	20000028 	.word	0x20000028

0800210c <dispFailure>:

/*
 * Displays a critical failure and ceases all operations
 */
void dispFailure(void) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(timerDelay);
 8002112:	4b1c      	ldr	r3, [pc, #112]	@ (8002184 <dispFailure+0x78>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	0018      	movs	r0, r3
 8002118:	f004 fe62 	bl	8006de0 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(timerDelay);						// Begin timer 16 counting (to 500 ms)
 800211c:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <dispFailure+0x78>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0018      	movs	r0, r3
 8002122:	f004 fe11 	bl	8006d48 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(timerDelay);	// Get initial timer value to compare to
 8002126:	4b17      	ldr	r3, [pc, #92]	@ (8002184 <dispFailure+0x78>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212e:	607b      	str	r3, [r7, #4]
	bool displayBlink = false;
 8002130:	1cfb      	adds	r3, r7, #3
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]


	do {

		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8002136:	4b13      	ldr	r3, [pc, #76]	@ (8002184 <dispFailure+0x78>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	4a11      	ldr	r2, [pc, #68]	@ (8002188 <dispFailure+0x7c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d9f6      	bls.n	8002136 <dispFailure+0x2a>

			HAL_GPIO_TogglePin(debugLEDPort, debugLEDPin);
 8002148:	4b10      	ldr	r3, [pc, #64]	@ (800218c <dispFailure+0x80>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2280      	movs	r2, #128	@ 0x80
 800214e:	0152      	lsls	r2, r2, #5
 8002150:	0011      	movs	r1, r2
 8002152:	0018      	movs	r0, r3
 8002154:	f001 fac8 	bl	80036e8 <HAL_GPIO_TogglePin>

			timerVal = __HAL_TIM_GET_COUNTER(timerDelay);				// Update timer value
 8002158:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <dispFailure+0x78>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002160:	607b      	str	r3, [r7, #4]

			displayBlink = !displayBlink;							// Toggle display blink counter
 8002162:	1cfb      	adds	r3, r7, #3
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	1e5a      	subs	r2, r3, #1
 8002168:	4193      	sbcs	r3, r2
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2201      	movs	r2, #1
 800216e:	4053      	eors	r3, r2
 8002170:	b2db      	uxtb	r3, r3
 8002172:	001a      	movs	r2, r3
 8002174:	1cfb      	adds	r3, r7, #3
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	781a      	ldrb	r2, [r3, #0]
 800217a:	2101      	movs	r1, #1
 800217c:	400a      	ands	r2, r1
 800217e:	701a      	strb	r2, [r3, #0]
		if(__HAL_TIM_GET_COUNTER(timerDelay) - timerVal >= (65535 / 4)) {		// Use hardware timer to blink/beep display
 8002180:	e7d9      	b.n	8002136 <dispFailure+0x2a>
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	2000006c 	.word	0x2000006c
 8002188:	00003ffe 	.word	0x00003ffe
 800218c:	20000028 	.word	0x20000028

08002190 <updateRTCBackupReg>:
}

/*
 * Updates RTC backup register with user alarm time to be later pulled from in the case of a power outage
 */
void updateRTCBackupReg(void) {
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0

	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmHourBackupReg, userAlarmTime.Hours);
 8002194:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <updateRTCBackupReg+0x40>)
 8002196:	6819      	ldr	r1, [r3, #0]
 8002198:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <updateRTCBackupReg+0x44>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	001a      	movs	r2, r3
 800219e:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <updateRTCBackupReg+0x48>)
 80021a0:	0018      	movs	r0, r3
 80021a2:	f004 f9b3 	bl	800650c <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmMinuteBackupReg, userAlarmTime.Minutes);
 80021a6:	4b0d      	ldr	r3, [pc, #52]	@ (80021dc <updateRTCBackupReg+0x4c>)
 80021a8:	6819      	ldr	r1, [r3, #0]
 80021aa:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <updateRTCBackupReg+0x44>)
 80021ac:	785b      	ldrb	r3, [r3, #1]
 80021ae:	001a      	movs	r2, r3
 80021b0:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <updateRTCBackupReg+0x48>)
 80021b2:	0018      	movs	r0, r3
 80021b4:	f004 f9aa 	bl	800650c <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, userAlarmTFBackupReg, userAlarmTime.TimeFormat);
 80021b8:	4b09      	ldr	r3, [pc, #36]	@ (80021e0 <updateRTCBackupReg+0x50>)
 80021ba:	6819      	ldr	r1, [r3, #0]
 80021bc:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <updateRTCBackupReg+0x44>)
 80021be:	78db      	ldrb	r3, [r3, #3]
 80021c0:	001a      	movs	r2, r3
 80021c2:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <updateRTCBackupReg+0x48>)
 80021c4:	0018      	movs	r0, r3
 80021c6:	f004 f9a1 	bl	800650c <HAL_RTCEx_BKUPWrite>

}
 80021ca:	46c0      	nop			@ (mov r8, r8)
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200000e4 	.word	0x200000e4
 80021d4:	200000d0 	.word	0x200000d0
 80021d8:	200001d8 	.word	0x200001d8
 80021dc:	20000034 	.word	0x20000034
 80021e0:	20000038 	.word	0x20000038

080021e4 <conv2Mil>:

/*
 * Converts the time in an AM/PM RTC time to 24-hour time
 * Returns this time in an RTC Time Def object
 */
RTC_TimeTypeDef conv2Mil(RTC_TimeTypeDef *oldTime) {
 80021e4:	b5b0      	push	{r4, r5, r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]

	RTC_TimeTypeDef convertedTime = *oldTime;
 80021ee:	250c      	movs	r5, #12
 80021f0:	197b      	adds	r3, r7, r5
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80021f6:	c313      	stmia	r3!, {r0, r1, r4}
 80021f8:	ca03      	ldmia	r2!, {r0, r1}
 80021fa:	c303      	stmia	r3!, {r0, r1}

	// If we are in PM, increment hours by 12 (but not if it is 12 p.m.)
	if(oldTime->TimeFormat == RTC_HOURFORMAT12_PM && oldTime->Hours != 12) {
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	78db      	ldrb	r3, [r3, #3]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d10a      	bne.n	800221a <conv2Mil+0x36>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b0c      	cmp	r3, #12
 800220a:	d006      	beq.n	800221a <conv2Mil+0x36>
		convertedTime.Hours += 12;
 800220c:	197b      	adds	r3, r7, r5
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	330c      	adds	r3, #12
 8002212:	b2da      	uxtb	r2, r3
 8002214:	197b      	adds	r3, r7, r5
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	e00b      	b.n	8002232 <conv2Mil+0x4e>
	}
	// If we are in AM and the hours are 12, set hours to 0.
	else if(oldTime->TimeFormat == RTC_HOURFORMAT12_AM && oldTime->Hours == 12) {
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	78db      	ldrb	r3, [r3, #3]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d107      	bne.n	8002232 <conv2Mil+0x4e>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d103      	bne.n	8002232 <conv2Mil+0x4e>
		convertedTime.Hours = 0;
 800222a:	230c      	movs	r3, #12
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
	else { // No change

	}

	// Make the update and display time function think that it is AM always
	convertedTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002232:	210c      	movs	r1, #12
 8002234:	187b      	adds	r3, r7, r1
 8002236:	2200      	movs	r2, #0
 8002238:	70da      	strb	r2, [r3, #3]

	return convertedTime;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	187a      	adds	r2, r7, r1
 800223e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002240:	c313      	stmia	r3!, {r0, r1, r4}
 8002242:	ca03      	ldmia	r2!, {r0, r1}
 8002244:	c303      	stmia	r3!, {r0, r1}

}
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	46bd      	mov	sp, r7
 800224a:	b008      	add	sp, #32
 800224c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002250 <startAudioStream>:

/*
 * Begins DMA streams to pull data from memory, process data, and push to i2s amplifier.
 */
void startAudioStream(void) {
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0

	// Enable Amp
	NAU8315YG_AmpEnable(&i2sAmp);
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <startAudioStream+0x14>)
 8002256:	0018      	movs	r0, r3
 8002258:	f7fe fba8 	bl	80009ac <NAU8315YG_AmpEnable>

//	W25Q_readDataDMA(&spiFlash, 0x00, BUFFER_SIZE, spiRxBuff1);


}
 800225c:	46c0      	nop			@ (mov r8, r8)
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	46c0      	nop			@ (mov r8, r8)
 8002264:	20000444 	.word	0x20000444

08002268 <stopAudioStream>:

/*
 * Halts double-buffered DMA streams, terminating audio output
 */
void stopAudioStream(void) {
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0

	// Disable Amp

}
 800226c:	46c0      	nop			@ (mov r8, r8)
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002276:	b672      	cpsid	i
}
 8002278:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	e7fd      	b.n	800227a <Error_Handler+0x8>
	...

08002280 <sevSeg_Init>:


void sevSeg_Init(uint16_t shiftDataPin, uint16_t shiftDataClockPin, uint16_t shiftStoreClockPin,
					uint16_t shiftOutputEnablePin, uint16_t shiftMCLRPin,
					GPIO_TypeDef **GPIOPortArray, TIM_HandleTypeDef *htim, TIM_HandleTypeDef *htim_PWM_pass,
					uint32_t tim_PWM_CHANNEL_pass) {
 8002280:	b5b0      	push	{r4, r5, r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	0005      	movs	r5, r0
 8002288:	000c      	movs	r4, r1
 800228a:	0010      	movs	r0, r2
 800228c:	0019      	movs	r1, r3
 800228e:	1dbb      	adds	r3, r7, #6
 8002290:	1c2a      	adds	r2, r5, #0
 8002292:	801a      	strh	r2, [r3, #0]
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	1c22      	adds	r2, r4, #0
 8002298:	801a      	strh	r2, [r3, #0]
 800229a:	1cbb      	adds	r3, r7, #2
 800229c:	1c02      	adds	r2, r0, #0
 800229e:	801a      	strh	r2, [r3, #0]
 80022a0:	003b      	movs	r3, r7
 80022a2:	1c0a      	adds	r2, r1, #0
 80022a4:	801a      	strh	r2, [r3, #0]

	shiftData = shiftDataPin;
 80022a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002498 <sevSeg_Init+0x218>)
 80022a8:	1dba      	adds	r2, r7, #6
 80022aa:	8812      	ldrh	r2, [r2, #0]
 80022ac:	801a      	strh	r2, [r3, #0]
	shiftDataClock = shiftDataClockPin;
 80022ae:	4b7b      	ldr	r3, [pc, #492]	@ (800249c <sevSeg_Init+0x21c>)
 80022b0:	1d3a      	adds	r2, r7, #4
 80022b2:	8812      	ldrh	r2, [r2, #0]
 80022b4:	801a      	strh	r2, [r3, #0]
	shiftStoreClock = shiftStoreClockPin;
 80022b6:	4b7a      	ldr	r3, [pc, #488]	@ (80024a0 <sevSeg_Init+0x220>)
 80022b8:	1cba      	adds	r2, r7, #2
 80022ba:	8812      	ldrh	r2, [r2, #0]
 80022bc:	801a      	strh	r2, [r3, #0]
	shiftOutputEnable = shiftOutputEnablePin;
 80022be:	4b79      	ldr	r3, [pc, #484]	@ (80024a4 <sevSeg_Init+0x224>)
 80022c0:	003a      	movs	r2, r7
 80022c2:	8812      	ldrh	r2, [r2, #0]
 80022c4:	801a      	strh	r2, [r3, #0]
	shiftMCLR = shiftMCLRPin;
 80022c6:	4a78      	ldr	r2, [pc, #480]	@ (80024a8 <sevSeg_Init+0x228>)
 80022c8:	2330      	movs	r3, #48	@ 0x30
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	8013      	strh	r3, [r2, #0]

	htim_PWM = *htim_PWM_pass;
 80022d0:	4a76      	ldr	r2, [pc, #472]	@ (80024ac <sevSeg_Init+0x22c>)
 80022d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022d4:	0010      	movs	r0, r2
 80022d6:	0019      	movs	r1, r3
 80022d8:	234c      	movs	r3, #76	@ 0x4c
 80022da:	001a      	movs	r2, r3
 80022dc:	f005 fd76 	bl	8007dcc <memcpy>
	tim_PWM_CHANNEL_shift = tim_PWM_CHANNEL_pass;
 80022e0:	4b73      	ldr	r3, [pc, #460]	@ (80024b0 <sevSeg_Init+0x230>)
 80022e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022e4:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 5; i++) {
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	e00b      	b.n	8002304 <sevSeg_Init+0x84>
		portArray[i] = GPIOPortArray[i];
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022f2:	18d3      	adds	r3, r2, r3
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	4b6f      	ldr	r3, [pc, #444]	@ (80024b4 <sevSeg_Init+0x234>)
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	0092      	lsls	r2, r2, #2
 80022fc:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++) {
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3301      	adds	r3, #1
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	2b04      	cmp	r3, #4
 8002308:	ddf0      	ble.n	80022ec <sevSeg_Init+0x6c>
	}

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 800230a:	4b6a      	ldr	r3, [pc, #424]	@ (80024b4 <sevSeg_Init+0x234>)
 800230c:	6918      	ldr	r0, [r3, #16]
 800230e:	4b66      	ldr	r3, [pc, #408]	@ (80024a8 <sevSeg_Init+0x228>)
 8002310:	8819      	ldrh	r1, [r3, #0]
 8002312:	4b69      	ldr	r3, [pc, #420]	@ (80024b8 <sevSeg_Init+0x238>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	001a      	movs	r2, r3
 8002318:	f001 f9c9 	bl	80036ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 800231c:	4b65      	ldr	r3, [pc, #404]	@ (80024b4 <sevSeg_Init+0x234>)
 800231e:	6918      	ldr	r0, [r3, #16]
 8002320:	4b61      	ldr	r3, [pc, #388]	@ (80024a8 <sevSeg_Init+0x228>)
 8002322:	8819      	ldrh	r1, [r3, #0]
 8002324:	4b64      	ldr	r3, [pc, #400]	@ (80024b8 <sevSeg_Init+0x238>)
 8002326:	785b      	ldrb	r3, [r3, #1]
 8002328:	001a      	movs	r2, r3
 800232a:	f001 f9c0 	bl	80036ae <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 800232e:	4b61      	ldr	r3, [pc, #388]	@ (80024b4 <sevSeg_Init+0x234>)
 8002330:	6898      	ldr	r0, [r3, #8]
 8002332:	4b5b      	ldr	r3, [pc, #364]	@ (80024a0 <sevSeg_Init+0x220>)
 8002334:	8819      	ldrh	r1, [r3, #0]
 8002336:	4b60      	ldr	r3, [pc, #384]	@ (80024b8 <sevSeg_Init+0x238>)
 8002338:	785b      	ldrb	r3, [r3, #1]
 800233a:	001a      	movs	r2, r3
 800233c:	f001 f9b7 	bl	80036ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002340:	4b5c      	ldr	r3, [pc, #368]	@ (80024b4 <sevSeg_Init+0x234>)
 8002342:	6898      	ldr	r0, [r3, #8]
 8002344:	4b56      	ldr	r3, [pc, #344]	@ (80024a0 <sevSeg_Init+0x220>)
 8002346:	8819      	ldrh	r1, [r3, #0]
 8002348:	4b5b      	ldr	r3, [pc, #364]	@ (80024b8 <sevSeg_Init+0x238>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	001a      	movs	r2, r3
 800234e:	f001 f9ae 	bl	80036ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[3], shiftOutputEnable, GPIOPinSet[0]);
 8002352:	4b58      	ldr	r3, [pc, #352]	@ (80024b4 <sevSeg_Init+0x234>)
 8002354:	68d8      	ldr	r0, [r3, #12]
 8002356:	4b53      	ldr	r3, [pc, #332]	@ (80024a4 <sevSeg_Init+0x224>)
 8002358:	8819      	ldrh	r1, [r3, #0]
 800235a:	4b57      	ldr	r3, [pc, #348]	@ (80024b8 <sevSeg_Init+0x238>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	001a      	movs	r2, r3
 8002360:	f001 f9a5 	bl	80036ae <HAL_GPIO_WritePin>

	// Set duty cycle to 50%

	sevSeg_setIntensity(50);
 8002364:	2032      	movs	r0, #50	@ 0x32
 8002366:	f000 f95f 	bl	8002628 <sevSeg_setIntensity>

	//Flash an initializing "Hof" symbol
	uint8_t hofSymb[4] = {0b00000000, 0b00110111, 0b00011101, 0b01000111};
 800236a:	2308      	movs	r3, #8
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	4a53      	ldr	r2, [pc, #332]	@ (80024bc <sevSeg_Init+0x23c>)
 8002370:	601a      	str	r2, [r3, #0]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 0; i <= 3; i++) {
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e038      	b.n	80023ea <sevSeg_Init+0x16a>

		sendByte = hofSymb[i];
 8002378:	231b      	movs	r3, #27
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	2208      	movs	r2, #8
 800237e:	18b9      	adds	r1, r7, r2
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	188a      	adds	r2, r1, r2
 8002384:	7812      	ldrb	r2, [r2, #0]
 8002386:	701a      	strb	r2, [r3, #0]

		for(int j = 0; j < 8; j++) {
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	e027      	b.n	80023de <sevSeg_Init+0x15e>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[sendByte & 1]);
 800238e:	4b49      	ldr	r3, [pc, #292]	@ (80024b4 <sevSeg_Init+0x234>)
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	4b41      	ldr	r3, [pc, #260]	@ (8002498 <sevSeg_Init+0x218>)
 8002394:	8819      	ldrh	r1, [r3, #0]
 8002396:	241b      	movs	r4, #27
 8002398:	193b      	adds	r3, r7, r4
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2201      	movs	r2, #1
 800239e:	4013      	ands	r3, r2
 80023a0:	4a45      	ldr	r2, [pc, #276]	@ (80024b8 <sevSeg_Init+0x238>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	001a      	movs	r2, r3
 80023a6:	f001 f982 	bl	80036ae <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 80023aa:	4b42      	ldr	r3, [pc, #264]	@ (80024b4 <sevSeg_Init+0x234>)
 80023ac:	6858      	ldr	r0, [r3, #4]
 80023ae:	4b3b      	ldr	r3, [pc, #236]	@ (800249c <sevSeg_Init+0x21c>)
 80023b0:	8819      	ldrh	r1, [r3, #0]
 80023b2:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <sevSeg_Init+0x238>)
 80023b4:	785b      	ldrb	r3, [r3, #1]
 80023b6:	001a      	movs	r2, r3
 80023b8:	f001 f979 	bl	80036ae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 80023bc:	4b3d      	ldr	r3, [pc, #244]	@ (80024b4 <sevSeg_Init+0x234>)
 80023be:	6858      	ldr	r0, [r3, #4]
 80023c0:	4b36      	ldr	r3, [pc, #216]	@ (800249c <sevSeg_Init+0x21c>)
 80023c2:	8819      	ldrh	r1, [r3, #0]
 80023c4:	4b3c      	ldr	r3, [pc, #240]	@ (80024b8 <sevSeg_Init+0x238>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	001a      	movs	r2, r3
 80023ca:	f001 f970 	bl	80036ae <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 80023ce:	193b      	adds	r3, r7, r4
 80023d0:	193a      	adds	r2, r7, r4
 80023d2:	7812      	ldrb	r2, [r2, #0]
 80023d4:	0852      	lsrs	r2, r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	3301      	adds	r3, #1
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b07      	cmp	r3, #7
 80023e2:	ddd4      	ble.n	800238e <sevSeg_Init+0x10e>
	for(int i = 0; i <= 3; i++) {
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	3301      	adds	r3, #1
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	ddc3      	ble.n	8002378 <sevSeg_Init+0xf8>

		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80023f0:	4b30      	ldr	r3, [pc, #192]	@ (80024b4 <sevSeg_Init+0x234>)
 80023f2:	6898      	ldr	r0, [r3, #8]
 80023f4:	4b2a      	ldr	r3, [pc, #168]	@ (80024a0 <sevSeg_Init+0x220>)
 80023f6:	8819      	ldrh	r1, [r3, #0]
 80023f8:	4b2f      	ldr	r3, [pc, #188]	@ (80024b8 <sevSeg_Init+0x238>)
 80023fa:	785b      	ldrb	r3, [r3, #1]
 80023fc:	001a      	movs	r2, r3
 80023fe:	f001 f956 	bl	80036ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 8002402:	4b2c      	ldr	r3, [pc, #176]	@ (80024b4 <sevSeg_Init+0x234>)
 8002404:	6898      	ldr	r0, [r3, #8]
 8002406:	4b26      	ldr	r3, [pc, #152]	@ (80024a0 <sevSeg_Init+0x220>)
 8002408:	8819      	ldrh	r1, [r3, #0]
 800240a:	4b2b      	ldr	r3, [pc, #172]	@ (80024b8 <sevSeg_Init+0x238>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	001a      	movs	r2, r3
 8002410:	f001 f94d 	bl	80036ae <HAL_GPIO_WritePin>

	// Delay for 500 ms using hardware timer
	HAL_TIM_Base_Stop(htim);
 8002414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002416:	0018      	movs	r0, r3
 8002418:	f004 fce2 	bl	8006de0 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Start(htim);							// Begin timer counting
 800241c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800241e:	0018      	movs	r0, r3
 8002420:	f004 fc92 	bl	8006d48 <HAL_TIM_Base_Start>
	uint32_t timerVal = __HAL_TIM_GET_COUNTER(htim);	// Get initial timer value to compare to
 8002424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	60fb      	str	r3, [r7, #12]

	//Hang in dead loop until 500 ms
	while(__HAL_TIM_GET_COUNTER(htim) - timerVal <= (65535 / 4)){
 800242c:	46c0      	nop			@ (mov r8, r8)
 800242e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1ad2      	subs	r2, r2, r3
 8002438:	2380      	movs	r3, #128	@ 0x80
 800243a:	01db      	lsls	r3, r3, #7
 800243c:	429a      	cmp	r2, r3
 800243e:	d3f6      	bcc.n	800242e <sevSeg_Init+0x1ae>
//		timerVal = __HAL_TIM_GET_COUNTER(htim);
	}

	HAL_TIM_Base_Stop(htim);
 8002440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002442:	0018      	movs	r0, r3
 8002444:	f004 fccc 	bl	8006de0 <HAL_TIM_Base_Stop>

	// Clear any existing shift register data
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[0]);
 8002448:	4b1a      	ldr	r3, [pc, #104]	@ (80024b4 <sevSeg_Init+0x234>)
 800244a:	6918      	ldr	r0, [r3, #16]
 800244c:	4b16      	ldr	r3, [pc, #88]	@ (80024a8 <sevSeg_Init+0x228>)
 800244e:	8819      	ldrh	r1, [r3, #0]
 8002450:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <sevSeg_Init+0x238>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	001a      	movs	r2, r3
 8002456:	f001 f92a 	bl	80036ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[4], shiftMCLR, GPIOPinSet[1]);
 800245a:	4b16      	ldr	r3, [pc, #88]	@ (80024b4 <sevSeg_Init+0x234>)
 800245c:	6918      	ldr	r0, [r3, #16]
 800245e:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <sevSeg_Init+0x228>)
 8002460:	8819      	ldrh	r1, [r3, #0]
 8002462:	4b15      	ldr	r3, [pc, #84]	@ (80024b8 <sevSeg_Init+0x238>)
 8002464:	785b      	ldrb	r3, [r3, #1]
 8002466:	001a      	movs	r2, r3
 8002468:	f001 f921 	bl	80036ae <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 800246c:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <sevSeg_Init+0x234>)
 800246e:	6898      	ldr	r0, [r3, #8]
 8002470:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <sevSeg_Init+0x220>)
 8002472:	8819      	ldrh	r1, [r3, #0]
 8002474:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <sevSeg_Init+0x238>)
 8002476:	785b      	ldrb	r3, [r3, #1]
 8002478:	001a      	movs	r2, r3
 800247a:	f001 f918 	bl	80036ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 800247e:	4b0d      	ldr	r3, [pc, #52]	@ (80024b4 <sevSeg_Init+0x234>)
 8002480:	6898      	ldr	r0, [r3, #8]
 8002482:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <sevSeg_Init+0x220>)
 8002484:	8819      	ldrh	r1, [r3, #0]
 8002486:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <sevSeg_Init+0x238>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	001a      	movs	r2, r3
 800248c:	f001 f90f 	bl	80036ae <HAL_GPIO_WritePin>

}
 8002490:	46c0      	nop			@ (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	b008      	add	sp, #32
 8002496:	bdb0      	pop	{r4, r5, r7, pc}
 8002498:	20000454 	.word	0x20000454
 800249c:	20000456 	.word	0x20000456
 80024a0:	20000458 	.word	0x20000458
 80024a4:	2000045a 	.word	0x2000045a
 80024a8:	2000045c 	.word	0x2000045c
 80024ac:	20000460 	.word	0x20000460
 80024b0:	200004ac 	.word	0x200004ac
 80024b4:	20000074 	.word	0x20000074
 80024b8:	20000088 	.word	0x20000088
 80024bc:	471d3700 	.word	0x471d3700

080024c0 <sevSeg_updateDigits>:

void sevSeg_updateDigits(RTC_TimeTypeDef *updateTime, uint8_t userAlarmEnable) {
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	000a      	movs	r2, r1
 80024ca:	1cfb      	adds	r3, r7, #3
 80024cc:	701a      	strb	r2, [r3, #0]
	/*
	 * Determine what time to send to shift registers
	 * digit 3 is a special case - the colons are always on, but the one can be on/off.
	 * Therefore, use array indexing to decide what to send.
	 */
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	210a      	movs	r1, #10
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7fd fe15 	bl	8000104 <__udivsi3>
 80024da:	0003      	movs	r3, r0
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	2408      	movs	r4, #8
 80024e0:	193b      	adds	r3, r7, r4
 80024e2:	701a      	strb	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	210a      	movs	r1, #10
 80024ea:	0018      	movs	r0, r3
 80024ec:	f7fd fe90 	bl	8000210 <__aeabi_uidivmod>
 80024f0:	000b      	movs	r3, r1
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	193b      	adds	r3, r7, r4
 80024f6:	705a      	strb	r2, [r3, #1]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 80024fc:	210a      	movs	r1, #10
 80024fe:	0018      	movs	r0, r3
 8002500:	f7fd fe00 	bl	8000104 <__udivsi3>
 8002504:	0003      	movs	r3, r0
 8002506:	b2da      	uxtb	r2, r3
 8002508:	193b      	adds	r3, r7, r4
 800250a:	709a      	strb	r2, [r3, #2]
							updateTime->Minutes / 10, updateTime->Minutes % 10};
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	785b      	ldrb	r3, [r3, #1]
	uint8_t sendTime[4] = {updateTime->Hours / 10, updateTime->Hours % 10,
 8002510:	210a      	movs	r1, #10
 8002512:	0018      	movs	r0, r3
 8002514:	f7fd fe7c 	bl	8000210 <__aeabi_uidivmod>
 8002518:	000b      	movs	r3, r1
 800251a:	b2da      	uxtb	r2, r3
 800251c:	193b      	adds	r3, r7, r4
 800251e:	70da      	strb	r2, [r3, #3]

	uint8_t sendByte;					// To be used to shift bits

	for(int i = 3; i >= 0; i--) {
 8002520:	2303      	movs	r3, #3
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	e05b      	b.n	80025de <sevSeg_updateDigits+0x11e>

		sendByte = dispDigits[sendTime[i]];
 8002526:	2308      	movs	r3, #8
 8002528:	18fa      	adds	r2, r7, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	18d3      	adds	r3, r2, r3
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	0019      	movs	r1, r3
 8002532:	2017      	movs	r0, #23
 8002534:	183b      	adds	r3, r7, r0
 8002536:	4a36      	ldr	r2, [pc, #216]	@ (8002610 <sevSeg_updateDigits+0x150>)
 8002538:	5c52      	ldrb	r2, [r2, r1]
 800253a:	701a      	strb	r2, [r3, #0]

		// If tenth's place of hour and zero, disable this segment
		if( (i == 0) && (sendByte == dispDigits[0])) {
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d107      	bne.n	8002552 <sevSeg_updateDigits+0x92>
 8002542:	2242      	movs	r2, #66	@ 0x42
 8002544:	183b      	adds	r3, r7, r0
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4293      	cmp	r3, r2
 800254a:	d102      	bne.n	8002552 <sevSeg_updateDigits+0x92>
			sendByte = 0xFF;
 800254c:	183b      	adds	r3, r7, r0
 800254e:	22ff      	movs	r2, #255	@ 0xff
 8002550:	701a      	strb	r2, [r3, #0]
		}

		// If one's place of hour, set decimal point based on AM/PM.
		// OR
		// If one's place of minute, set decimal place based on user alarm enabled
		if( ((i == 1) && (updateTime->TimeFormat == RTC_HOURFORMAT12_PM)) ||
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d103      	bne.n	8002560 <sevSeg_updateDigits+0xa0>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	78db      	ldrb	r3, [r3, #3]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d006      	beq.n	800256e <sevSeg_updateDigits+0xae>
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	2b03      	cmp	r3, #3
 8002564:	d10a      	bne.n	800257c <sevSeg_updateDigits+0xbc>
			((i == 3) && userAlarmEnable)	) {
 8002566:	1cfb      	adds	r3, r7, #3
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d006      	beq.n	800257c <sevSeg_updateDigits+0xbc>
			sendByte = (sendByte & 0b11111101);
 800256e:	2217      	movs	r2, #23
 8002570:	18bb      	adds	r3, r7, r2
 8002572:	18ba      	adds	r2, r7, r2
 8002574:	7812      	ldrb	r2, [r2, #0]
 8002576:	2102      	movs	r1, #2
 8002578:	438a      	bics	r2, r1
 800257a:	701a      	strb	r2, [r3, #0]
		}

		for(int j = 0; j < 8; j++) {
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	e027      	b.n	80025d2 <sevSeg_updateDigits+0x112>

			// Write data pin with LSB of data
			HAL_GPIO_WritePin(portArray[0], shiftData, GPIOPinSet[(sendByte & 1)]);
 8002582:	4b24      	ldr	r3, [pc, #144]	@ (8002614 <sevSeg_updateDigits+0x154>)
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	4b24      	ldr	r3, [pc, #144]	@ (8002618 <sevSeg_updateDigits+0x158>)
 8002588:	8819      	ldrh	r1, [r3, #0]
 800258a:	2417      	movs	r4, #23
 800258c:	193b      	adds	r3, r7, r4
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2201      	movs	r2, #1
 8002592:	4013      	ands	r3, r2
 8002594:	4a21      	ldr	r2, [pc, #132]	@ (800261c <sevSeg_updateDigits+0x15c>)
 8002596:	5cd3      	ldrb	r3, [r2, r3]
 8002598:	001a      	movs	r2, r3
 800259a:	f001 f888 	bl	80036ae <HAL_GPIO_WritePin>

			// Toggle clock GPIO to shift bit into register
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[1]);
 800259e:	4b1d      	ldr	r3, [pc, #116]	@ (8002614 <sevSeg_updateDigits+0x154>)
 80025a0:	6858      	ldr	r0, [r3, #4]
 80025a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002620 <sevSeg_updateDigits+0x160>)
 80025a4:	8819      	ldrh	r1, [r3, #0]
 80025a6:	4b1d      	ldr	r3, [pc, #116]	@ (800261c <sevSeg_updateDigits+0x15c>)
 80025a8:	785b      	ldrb	r3, [r3, #1]
 80025aa:	001a      	movs	r2, r3
 80025ac:	f001 f87f 	bl	80036ae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(portArray[1], shiftDataClock, GPIOPinSet[0]);
 80025b0:	4b18      	ldr	r3, [pc, #96]	@ (8002614 <sevSeg_updateDigits+0x154>)
 80025b2:	6858      	ldr	r0, [r3, #4]
 80025b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <sevSeg_updateDigits+0x160>)
 80025b6:	8819      	ldrh	r1, [r3, #0]
 80025b8:	4b18      	ldr	r3, [pc, #96]	@ (800261c <sevSeg_updateDigits+0x15c>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	001a      	movs	r2, r3
 80025be:	f001 f876 	bl	80036ae <HAL_GPIO_WritePin>

			// Once data pin has been written and shifted out, shift data right by one bit.
			sendByte >>= 1;
 80025c2:	193b      	adds	r3, r7, r4
 80025c4:	193a      	adds	r2, r7, r4
 80025c6:	7812      	ldrb	r2, [r2, #0]
 80025c8:	0852      	lsrs	r2, r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++) {
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3301      	adds	r3, #1
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b07      	cmp	r3, #7
 80025d6:	ddd4      	ble.n	8002582 <sevSeg_updateDigits+0xc2>
	for(int i = 3; i >= 0; i--) {
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	3b01      	subs	r3, #1
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	daa0      	bge.n	8002526 <sevSeg_updateDigits+0x66>
		}
	}

	// Once all data has been shifted out, toggle store clock register to display data.

	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[1]);
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <sevSeg_updateDigits+0x154>)
 80025e6:	6898      	ldr	r0, [r3, #8]
 80025e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002624 <sevSeg_updateDigits+0x164>)
 80025ea:	8819      	ldrh	r1, [r3, #0]
 80025ec:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <sevSeg_updateDigits+0x15c>)
 80025ee:	785b      	ldrb	r3, [r3, #1]
 80025f0:	001a      	movs	r2, r3
 80025f2:	f001 f85c 	bl	80036ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(portArray[2], shiftStoreClock, GPIOPinSet[0]);
 80025f6:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <sevSeg_updateDigits+0x154>)
 80025f8:	6898      	ldr	r0, [r3, #8]
 80025fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002624 <sevSeg_updateDigits+0x164>)
 80025fc:	8819      	ldrh	r1, [r3, #0]
 80025fe:	4b07      	ldr	r3, [pc, #28]	@ (800261c <sevSeg_updateDigits+0x15c>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	001a      	movs	r2, r3
 8002604:	f001 f853 	bl	80036ae <HAL_GPIO_WritePin>

	return;
 8002608:	46c0      	nop			@ (mov r8, r8)

}
 800260a:	46bd      	mov	sp, r7
 800260c:	b007      	add	sp, #28
 800260e:	bd90      	pop	{r4, r7, pc}
 8002610:	08007e20 	.word	0x08007e20
 8002614:	20000074 	.word	0x20000074
 8002618:	20000454 	.word	0x20000454
 800261c:	20000088 	.word	0x20000088
 8002620:	20000456 	.word	0x20000456
 8002624:	20000458 	.word	0x20000458

08002628 <sevSeg_setIntensity>:

void sevSeg_setIntensity(uint16_t dutyCycle) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	0002      	movs	r2, r0
 8002630:	1dbb      	adds	r3, r7, #6
 8002632:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, tim_PWM_CHANNEL_shift, dutyCycle);
 8002634:	4b20      	ldr	r3, [pc, #128]	@ (80026b8 <sevSeg_setIntensity+0x90>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d105      	bne.n	8002648 <sevSeg_setIntensity+0x20>
 800263c:	4b1f      	ldr	r3, [pc, #124]	@ (80026bc <sevSeg_setIntensity+0x94>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	1dba      	adds	r2, r7, #6
 8002642:	8812      	ldrh	r2, [r2, #0]
 8002644:	635a      	str	r2, [r3, #52]	@ 0x34
 8002646:	e02c      	b.n	80026a2 <sevSeg_setIntensity+0x7a>
 8002648:	4b1b      	ldr	r3, [pc, #108]	@ (80026b8 <sevSeg_setIntensity+0x90>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d105      	bne.n	800265c <sevSeg_setIntensity+0x34>
 8002650:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <sevSeg_setIntensity+0x94>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	1dbb      	adds	r3, r7, #6
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	6393      	str	r3, [r2, #56]	@ 0x38
 800265a:	e022      	b.n	80026a2 <sevSeg_setIntensity+0x7a>
 800265c:	4b16      	ldr	r3, [pc, #88]	@ (80026b8 <sevSeg_setIntensity+0x90>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d105      	bne.n	8002670 <sevSeg_setIntensity+0x48>
 8002664:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <sevSeg_setIntensity+0x94>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	1dbb      	adds	r3, r7, #6
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800266e:	e018      	b.n	80026a2 <sevSeg_setIntensity+0x7a>
 8002670:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <sevSeg_setIntensity+0x90>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d105      	bne.n	8002684 <sevSeg_setIntensity+0x5c>
 8002678:	4b10      	ldr	r3, [pc, #64]	@ (80026bc <sevSeg_setIntensity+0x94>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	1dbb      	adds	r3, r7, #6
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	6413      	str	r3, [r2, #64]	@ 0x40
 8002682:	e00e      	b.n	80026a2 <sevSeg_setIntensity+0x7a>
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <sevSeg_setIntensity+0x90>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b10      	cmp	r3, #16
 800268a:	d105      	bne.n	8002698 <sevSeg_setIntensity+0x70>
 800268c:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <sevSeg_setIntensity+0x94>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	1dbb      	adds	r3, r7, #6
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	6593      	str	r3, [r2, #88]	@ 0x58
 8002696:	e004      	b.n	80026a2 <sevSeg_setIntensity+0x7a>
 8002698:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <sevSeg_setIntensity+0x94>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	1dbb      	adds	r3, r7, #6
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(&htim_PWM, tim_PWM_CHANNEL_shift);
 80026a2:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <sevSeg_setIntensity+0x90>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <sevSeg_setIntensity+0x94>)
 80026a8:	0011      	movs	r1, r2
 80026aa:	0018      	movs	r0, r3
 80026ac:	f004 fc98 	bl	8006fe0 <HAL_TIM_PWM_Start>

}
 80026b0:	46c0      	nop			@ (mov r8, r8)
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b002      	add	sp, #8
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	200004ac 	.word	0x200004ac
 80026bc:	20000460 	.word	0x20000460

080026c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <HAL_MspInit+0x54>)
 80026c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026ca:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <HAL_MspInit+0x54>)
 80026cc:	2101      	movs	r1, #1
 80026ce:	430a      	orrs	r2, r1
 80026d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80026d2:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <HAL_MspInit+0x54>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	2201      	movs	r2, #1
 80026d8:	4013      	ands	r3, r2
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	4b0d      	ldr	r3, [pc, #52]	@ (8002714 <HAL_MspInit+0x54>)
 80026e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <HAL_MspInit+0x54>)
 80026e4:	2180      	movs	r1, #128	@ 0x80
 80026e6:	0549      	lsls	r1, r1, #21
 80026e8:	430a      	orrs	r2, r1
 80026ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026ec:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <HAL_MspInit+0x54>)
 80026ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	055b      	lsls	r3, r3, #21
 80026f4:	4013      	ands	r3, r2
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	2004      	movs	r0, #4
 8002700:	f000 fc96 	bl	8003030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002704:	2004      	movs	r0, #4
 8002706:	f000 fca8 	bl	800305a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b002      	add	sp, #8
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			@ (mov r8, r8)
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b095      	sub	sp, #84	@ 0x54
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	233c      	movs	r3, #60	@ 0x3c
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	0018      	movs	r0, r3
 8002726:	2314      	movs	r3, #20
 8002728:	001a      	movs	r2, r3
 800272a:	2100      	movs	r1, #0
 800272c:	f005 fb22 	bl	8007d74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002730:	2414      	movs	r4, #20
 8002732:	193b      	adds	r3, r7, r4
 8002734:	0018      	movs	r0, r3
 8002736:	2328      	movs	r3, #40	@ 0x28
 8002738:	001a      	movs	r2, r3
 800273a:	2100      	movs	r1, #0
 800273c:	f005 fb1a 	bl	8007d74 <memset>
  if(hi2c->Instance==I2C1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a22      	ldr	r2, [pc, #136]	@ (80027d0 <HAL_I2C_MspInit+0xb8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d13d      	bne.n	80027c6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800274a:	193b      	adds	r3, r7, r4
 800274c:	2220      	movs	r2, #32
 800274e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002750:	193b      	adds	r3, r7, r4
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002756:	193b      	adds	r3, r7, r4
 8002758:	0018      	movs	r0, r3
 800275a:	f002 fc71 	bl	8005040 <HAL_RCCEx_PeriphCLKConfig>
 800275e:	1e03      	subs	r3, r0, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002762:	f7ff fd86 	bl	8002272 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002766:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <HAL_I2C_MspInit+0xbc>)
 8002768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800276a:	4b1a      	ldr	r3, [pc, #104]	@ (80027d4 <HAL_I2C_MspInit+0xbc>)
 800276c:	2102      	movs	r1, #2
 800276e:	430a      	orrs	r2, r1
 8002770:	635a      	str	r2, [r3, #52]	@ 0x34
 8002772:	4b18      	ldr	r3, [pc, #96]	@ (80027d4 <HAL_I2C_MspInit+0xbc>)
 8002774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002776:	2202      	movs	r2, #2
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800277e:	213c      	movs	r1, #60	@ 0x3c
 8002780:	187b      	adds	r3, r7, r1
 8002782:	22c0      	movs	r2, #192	@ 0xc0
 8002784:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002786:	187b      	adds	r3, r7, r1
 8002788:	2212      	movs	r2, #18
 800278a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	187b      	adds	r3, r7, r1
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	187b      	adds	r3, r7, r1
 8002794:	2200      	movs	r2, #0
 8002796:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002798:	187b      	adds	r3, r7, r1
 800279a:	2206      	movs	r2, #6
 800279c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279e:	187b      	adds	r3, r7, r1
 80027a0:	4a0d      	ldr	r2, [pc, #52]	@ (80027d8 <HAL_I2C_MspInit+0xc0>)
 80027a2:	0019      	movs	r1, r3
 80027a4:	0010      	movs	r0, r2
 80027a6:	f000 fe01 	bl	80033ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027aa:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <HAL_I2C_MspInit+0xbc>)
 80027ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027ae:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <HAL_I2C_MspInit+0xbc>)
 80027b0:	2180      	movs	r1, #128	@ 0x80
 80027b2:	0389      	lsls	r1, r1, #14
 80027b4:	430a      	orrs	r2, r1
 80027b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027b8:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <HAL_I2C_MspInit+0xbc>)
 80027ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027bc:	2380      	movs	r3, #128	@ 0x80
 80027be:	039b      	lsls	r3, r3, #14
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b015      	add	sp, #84	@ 0x54
 80027cc:	bd90      	pop	{r4, r7, pc}
 80027ce:	46c0      	nop			@ (mov r8, r8)
 80027d0:	40005400 	.word	0x40005400
 80027d4:	40021000 	.word	0x40021000
 80027d8:	50000400 	.word	0x50000400

080027dc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b095      	sub	sp, #84	@ 0x54
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	233c      	movs	r3, #60	@ 0x3c
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	0018      	movs	r0, r3
 80027ea:	2314      	movs	r3, #20
 80027ec:	001a      	movs	r2, r3
 80027ee:	2100      	movs	r1, #0
 80027f0:	f005 fac0 	bl	8007d74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027f4:	2414      	movs	r4, #20
 80027f6:	193b      	adds	r3, r7, r4
 80027f8:	0018      	movs	r0, r3
 80027fa:	2328      	movs	r3, #40	@ 0x28
 80027fc:	001a      	movs	r2, r3
 80027fe:	2100      	movs	r1, #0
 8002800:	f005 fab8 	bl	8007d74 <memset>
  if(hi2s->Instance==SPI1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a4a      	ldr	r2, [pc, #296]	@ (8002934 <HAL_I2S_MspInit+0x158>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d000      	beq.n	8002810 <HAL_I2S_MspInit+0x34>
 800280e:	e08d      	b.n	800292c <HAL_I2S_MspInit+0x150>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8002810:	193b      	adds	r3, r7, r4
 8002812:	2280      	movs	r2, #128	@ 0x80
 8002814:	0112      	lsls	r2, r2, #4
 8002816:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8002818:	193b      	adds	r3, r7, r4
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800281e:	193b      	adds	r3, r7, r4
 8002820:	0018      	movs	r0, r3
 8002822:	f002 fc0d 	bl	8005040 <HAL_RCCEx_PeriphCLKConfig>
 8002826:	1e03      	subs	r3, r0, #0
 8002828:	d001      	beq.n	800282e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800282a:	f7ff fd22 	bl	8002272 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800282e:	4b42      	ldr	r3, [pc, #264]	@ (8002938 <HAL_I2S_MspInit+0x15c>)
 8002830:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002832:	4b41      	ldr	r3, [pc, #260]	@ (8002938 <HAL_I2S_MspInit+0x15c>)
 8002834:	2180      	movs	r1, #128	@ 0x80
 8002836:	0149      	lsls	r1, r1, #5
 8002838:	430a      	orrs	r2, r1
 800283a:	641a      	str	r2, [r3, #64]	@ 0x40
 800283c:	4b3e      	ldr	r3, [pc, #248]	@ (8002938 <HAL_I2S_MspInit+0x15c>)
 800283e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002840:	2380      	movs	r3, #128	@ 0x80
 8002842:	015b      	lsls	r3, r3, #5
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	4b3b      	ldr	r3, [pc, #236]	@ (8002938 <HAL_I2S_MspInit+0x15c>)
 800284c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800284e:	4b3a      	ldr	r3, [pc, #232]	@ (8002938 <HAL_I2S_MspInit+0x15c>)
 8002850:	2101      	movs	r1, #1
 8002852:	430a      	orrs	r2, r1
 8002854:	635a      	str	r2, [r3, #52]	@ 0x34
 8002856:	4b38      	ldr	r3, [pc, #224]	@ (8002938 <HAL_I2S_MspInit+0x15c>)
 8002858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800285a:	2201      	movs	r2, #1
 800285c:	4013      	ands	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002862:	4b35      	ldr	r3, [pc, #212]	@ (8002938 <HAL_I2S_MspInit+0x15c>)
 8002864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002866:	4b34      	ldr	r3, [pc, #208]	@ (8002938 <HAL_I2S_MspInit+0x15c>)
 8002868:	2102      	movs	r1, #2
 800286a:	430a      	orrs	r2, r1
 800286c:	635a      	str	r2, [r3, #52]	@ 0x34
 800286e:	4b32      	ldr	r3, [pc, #200]	@ (8002938 <HAL_I2S_MspInit+0x15c>)
 8002870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002872:	2202      	movs	r2, #2
 8002874:	4013      	ands	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA1     ------> I2S1_CK
    PB0     ------> I2S1_WS
    PA12 [PA10]     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 800287a:	243c      	movs	r4, #60	@ 0x3c
 800287c:	193b      	adds	r3, r7, r4
 800287e:	4a2f      	ldr	r2, [pc, #188]	@ (800293c <HAL_I2S_MspInit+0x160>)
 8002880:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	193b      	adds	r3, r7, r4
 8002884:	2202      	movs	r2, #2
 8002886:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	193b      	adds	r3, r7, r4
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	193b      	adds	r3, r7, r4
 8002890:	2200      	movs	r2, #0
 8002892:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002894:	193b      	adds	r3, r7, r4
 8002896:	2200      	movs	r2, #0
 8002898:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289a:	193a      	adds	r2, r7, r4
 800289c:	23a0      	movs	r3, #160	@ 0xa0
 800289e:	05db      	lsls	r3, r3, #23
 80028a0:	0011      	movs	r1, r2
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 fd82 	bl	80033ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028a8:	0021      	movs	r1, r4
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2201      	movs	r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	2202      	movs	r2, #2
 80028b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	187b      	adds	r3, r7, r1
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	187b      	adds	r3, r7, r1
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80028c2:	187b      	adds	r3, r7, r1
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c8:	187b      	adds	r3, r7, r1
 80028ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002940 <HAL_I2S_MspInit+0x164>)
 80028cc:	0019      	movs	r1, r3
 80028ce:	0010      	movs	r0, r2
 80028d0:	f000 fd6c 	bl	80033ac <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80028d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002944 <HAL_I2S_MspInit+0x168>)
 80028d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002948 <HAL_I2S_MspInit+0x16c>)
 80028d8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80028da:	4b1a      	ldr	r3, [pc, #104]	@ (8002944 <HAL_I2S_MspInit+0x168>)
 80028dc:	2211      	movs	r2, #17
 80028de:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028e0:	4b18      	ldr	r3, [pc, #96]	@ (8002944 <HAL_I2S_MspInit+0x168>)
 80028e2:	2210      	movs	r2, #16
 80028e4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028e6:	4b17      	ldr	r3, [pc, #92]	@ (8002944 <HAL_I2S_MspInit+0x168>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028ec:	4b15      	ldr	r3, [pc, #84]	@ (8002944 <HAL_I2S_MspInit+0x168>)
 80028ee:	2280      	movs	r2, #128	@ 0x80
 80028f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028f2:	4b14      	ldr	r3, [pc, #80]	@ (8002944 <HAL_I2S_MspInit+0x168>)
 80028f4:	2280      	movs	r2, #128	@ 0x80
 80028f6:	0052      	lsls	r2, r2, #1
 80028f8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028fa:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <HAL_I2S_MspInit+0x168>)
 80028fc:	2280      	movs	r2, #128	@ 0x80
 80028fe:	00d2      	lsls	r2, r2, #3
 8002900:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002902:	4b10      	ldr	r3, [pc, #64]	@ (8002944 <HAL_I2S_MspInit+0x168>)
 8002904:	2200      	movs	r2, #0
 8002906:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002908:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <HAL_I2S_MspInit+0x168>)
 800290a:	22c0      	movs	r2, #192	@ 0xc0
 800290c:	0192      	lsls	r2, r2, #6
 800290e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002910:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <HAL_I2S_MspInit+0x168>)
 8002912:	0018      	movs	r0, r3
 8002914:	f000 fbbe 	bl	8003094 <HAL_DMA_Init>
 8002918:	1e03      	subs	r3, r0, #0
 800291a:	d001      	beq.n	8002920 <HAL_I2S_MspInit+0x144>
    {
      Error_Handler();
 800291c:	f7ff fca9 	bl	8002272 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a08      	ldr	r2, [pc, #32]	@ (8002944 <HAL_I2S_MspInit+0x168>)
 8002924:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002926:	4b07      	ldr	r3, [pc, #28]	@ (8002944 <HAL_I2S_MspInit+0x168>)
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800292c:	46c0      	nop			@ (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b015      	add	sp, #84	@ 0x54
 8002932:	bd90      	pop	{r4, r7, pc}
 8002934:	40013000 	.word	0x40013000
 8002938:	40021000 	.word	0x40021000
 800293c:	00001002 	.word	0x00001002
 8002940:	50000400 	.word	0x50000400
 8002944:	2000017c 	.word	0x2000017c
 8002948:	40020030 	.word	0x40020030

0800294c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b08f      	sub	sp, #60	@ 0x3c
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002954:	2410      	movs	r4, #16
 8002956:	193b      	adds	r3, r7, r4
 8002958:	0018      	movs	r0, r3
 800295a:	2328      	movs	r3, #40	@ 0x28
 800295c:	001a      	movs	r2, r3
 800295e:	2100      	movs	r1, #0
 8002960:	f005 fa08 	bl	8007d74 <memset>
  if(hrtc->Instance==RTC)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a19      	ldr	r2, [pc, #100]	@ (80029d0 <HAL_RTC_MspInit+0x84>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d12c      	bne.n	80029c8 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800296e:	193b      	adds	r3, r7, r4
 8002970:	2280      	movs	r2, #128	@ 0x80
 8002972:	0292      	lsls	r2, r2, #10
 8002974:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002976:	193b      	adds	r3, r7, r4
 8002978:	2280      	movs	r2, #128	@ 0x80
 800297a:	0052      	lsls	r2, r2, #1
 800297c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800297e:	193b      	adds	r3, r7, r4
 8002980:	0018      	movs	r0, r3
 8002982:	f002 fb5d 	bl	8005040 <HAL_RCCEx_PeriphCLKConfig>
 8002986:	1e03      	subs	r3, r0, #0
 8002988:	d001      	beq.n	800298e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800298a:	f7ff fc72 	bl	8002272 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800298e:	4b11      	ldr	r3, [pc, #68]	@ (80029d4 <HAL_RTC_MspInit+0x88>)
 8002990:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <HAL_RTC_MspInit+0x88>)
 8002994:	2180      	movs	r1, #128	@ 0x80
 8002996:	0209      	lsls	r1, r1, #8
 8002998:	430a      	orrs	r2, r1
 800299a:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800299c:	4b0d      	ldr	r3, [pc, #52]	@ (80029d4 <HAL_RTC_MspInit+0x88>)
 800299e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029a0:	4b0c      	ldr	r3, [pc, #48]	@ (80029d4 <HAL_RTC_MspInit+0x88>)
 80029a2:	2180      	movs	r1, #128	@ 0x80
 80029a4:	00c9      	lsls	r1, r1, #3
 80029a6:	430a      	orrs	r2, r1
 80029a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80029aa:	4b0a      	ldr	r3, [pc, #40]	@ (80029d4 <HAL_RTC_MspInit+0x88>)
 80029ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029ae:	2380      	movs	r3, #128	@ 0x80
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4013      	ands	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2100      	movs	r1, #0
 80029bc:	2002      	movs	r0, #2
 80029be:	f000 fb37 	bl	8003030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80029c2:	2002      	movs	r0, #2
 80029c4:	f000 fb49 	bl	800305a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80029c8:	46c0      	nop			@ (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b00f      	add	sp, #60	@ 0x3c
 80029ce:	bd90      	pop	{r4, r7, pc}
 80029d0:	40002800 	.word	0x40002800
 80029d4:	40021000 	.word	0x40021000

080029d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b08b      	sub	sp, #44	@ 0x2c
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	2414      	movs	r4, #20
 80029e2:	193b      	adds	r3, r7, r4
 80029e4:	0018      	movs	r0, r3
 80029e6:	2314      	movs	r3, #20
 80029e8:	001a      	movs	r2, r3
 80029ea:	2100      	movs	r1, #0
 80029ec:	f005 f9c2 	bl	8007d74 <memset>
  if(hspi->Instance==SPI2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a50      	ldr	r2, [pc, #320]	@ (8002b38 <HAL_SPI_MspInit+0x160>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d000      	beq.n	80029fc <HAL_SPI_MspInit+0x24>
 80029fa:	e098      	b.n	8002b2e <HAL_SPI_MspInit+0x156>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029fc:	4b4f      	ldr	r3, [pc, #316]	@ (8002b3c <HAL_SPI_MspInit+0x164>)
 80029fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a00:	4b4e      	ldr	r3, [pc, #312]	@ (8002b3c <HAL_SPI_MspInit+0x164>)
 8002a02:	2180      	movs	r1, #128	@ 0x80
 8002a04:	01c9      	lsls	r1, r1, #7
 8002a06:	430a      	orrs	r2, r1
 8002a08:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8002b3c <HAL_SPI_MspInit+0x164>)
 8002a0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	01db      	lsls	r3, r3, #7
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a18:	4b48      	ldr	r3, [pc, #288]	@ (8002b3c <HAL_SPI_MspInit+0x164>)
 8002a1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a1c:	4b47      	ldr	r3, [pc, #284]	@ (8002b3c <HAL_SPI_MspInit+0x164>)
 8002a1e:	2101      	movs	r1, #1
 8002a20:	430a      	orrs	r2, r1
 8002a22:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a24:	4b45      	ldr	r3, [pc, #276]	@ (8002b3c <HAL_SPI_MspInit+0x164>)
 8002a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a28:	2201      	movs	r2, #1
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002a30:	193b      	adds	r3, r7, r4
 8002a32:	2209      	movs	r2, #9
 8002a34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	193b      	adds	r3, r7, r4
 8002a38:	2202      	movs	r2, #2
 8002a3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	193b      	adds	r3, r7, r4
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a42:	193b      	adds	r3, r7, r4
 8002a44:	2200      	movs	r2, #0
 8002a46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002a48:	193b      	adds	r3, r7, r4
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4e:	193a      	adds	r2, r7, r4
 8002a50:	23a0      	movs	r3, #160	@ 0xa0
 8002a52:	05db      	lsls	r3, r3, #23
 8002a54:	0011      	movs	r1, r2
 8002a56:	0018      	movs	r0, r3
 8002a58:	f000 fca8 	bl	80033ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a5c:	0021      	movs	r1, r4
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2210      	movs	r2, #16
 8002a62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2202      	movs	r2, #2
 8002a68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	2200      	movs	r2, #0
 8002a74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002a76:	187b      	adds	r3, r7, r1
 8002a78:	2201      	movs	r2, #1
 8002a7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7c:	187a      	adds	r2, r7, r1
 8002a7e:	23a0      	movs	r3, #160	@ 0xa0
 8002a80:	05db      	lsls	r3, r3, #23
 8002a82:	0011      	movs	r1, r2
 8002a84:	0018      	movs	r0, r3
 8002a86:	f000 fc91 	bl	80033ac <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel1;
 8002a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b40 <HAL_SPI_MspInit+0x168>)
 8002a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8002b44 <HAL_SPI_MspInit+0x16c>)
 8002a8e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002a90:	4b2b      	ldr	r3, [pc, #172]	@ (8002b40 <HAL_SPI_MspInit+0x168>)
 8002a92:	2212      	movs	r2, #18
 8002a94:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a96:	4b2a      	ldr	r3, [pc, #168]	@ (8002b40 <HAL_SPI_MspInit+0x168>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9c:	4b28      	ldr	r3, [pc, #160]	@ (8002b40 <HAL_SPI_MspInit+0x168>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002aa2:	4b27      	ldr	r3, [pc, #156]	@ (8002b40 <HAL_SPI_MspInit+0x168>)
 8002aa4:	2280      	movs	r2, #128	@ 0x80
 8002aa6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aa8:	4b25      	ldr	r3, [pc, #148]	@ (8002b40 <HAL_SPI_MspInit+0x168>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aae:	4b24      	ldr	r3, [pc, #144]	@ (8002b40 <HAL_SPI_MspInit+0x168>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002ab4:	4b22      	ldr	r3, [pc, #136]	@ (8002b40 <HAL_SPI_MspInit+0x168>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002aba:	4b21      	ldr	r3, [pc, #132]	@ (8002b40 <HAL_SPI_MspInit+0x168>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b40 <HAL_SPI_MspInit+0x168>)
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 fae6 	bl	8003094 <HAL_DMA_Init>
 8002ac8:	1e03      	subs	r3, r0, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8002acc:	f7ff fbd1 	bl	8002272 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b40 <HAL_SPI_MspInit+0x168>)
 8002ad4:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b40 <HAL_SPI_MspInit+0x168>)
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel2;
 8002adc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b48 <HAL_SPI_MspInit+0x170>)
 8002ade:	4a1b      	ldr	r2, [pc, #108]	@ (8002b4c <HAL_SPI_MspInit+0x174>)
 8002ae0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002ae2:	4b19      	ldr	r3, [pc, #100]	@ (8002b48 <HAL_SPI_MspInit+0x170>)
 8002ae4:	2213      	movs	r2, #19
 8002ae6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ae8:	4b17      	ldr	r3, [pc, #92]	@ (8002b48 <HAL_SPI_MspInit+0x170>)
 8002aea:	2210      	movs	r2, #16
 8002aec:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aee:	4b16      	ldr	r3, [pc, #88]	@ (8002b48 <HAL_SPI_MspInit+0x170>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002af4:	4b14      	ldr	r3, [pc, #80]	@ (8002b48 <HAL_SPI_MspInit+0x170>)
 8002af6:	2280      	movs	r2, #128	@ 0x80
 8002af8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002afa:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <HAL_SPI_MspInit+0x170>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b00:	4b11      	ldr	r3, [pc, #68]	@ (8002b48 <HAL_SPI_MspInit+0x170>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002b06:	4b10      	ldr	r3, [pc, #64]	@ (8002b48 <HAL_SPI_MspInit+0x170>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b48 <HAL_SPI_MspInit+0x170>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002b12:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <HAL_SPI_MspInit+0x170>)
 8002b14:	0018      	movs	r0, r3
 8002b16:	f000 fabd 	bl	8003094 <HAL_DMA_Init>
 8002b1a:	1e03      	subs	r3, r0, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8002b1e:	f7ff fba8 	bl	8002272 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a08      	ldr	r2, [pc, #32]	@ (8002b48 <HAL_SPI_MspInit+0x170>)
 8002b26:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b28:	4b07      	ldr	r3, [pc, #28]	@ (8002b48 <HAL_SPI_MspInit+0x170>)
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b2e:	46c0      	nop			@ (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b00b      	add	sp, #44	@ 0x2c
 8002b34:	bd90      	pop	{r4, r7, pc}
 8002b36:	46c0      	nop			@ (mov r8, r8)
 8002b38:	40003800 	.word	0x40003800
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	20000268 	.word	0x20000268
 8002b44:	40020008 	.word	0x40020008
 8002b48:	200002c4 	.word	0x200002c4
 8002b4c:	4002001c 	.word	0x4002001c

08002b50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	2380      	movs	r3, #128	@ 0x80
 8002b5e:	05db      	lsls	r3, r3, #23
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d10b      	bne.n	8002b7c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b64:	4b07      	ldr	r3, [pc, #28]	@ (8002b84 <HAL_TIM_PWM_MspInit+0x34>)
 8002b66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b68:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_TIM_PWM_MspInit+0x34>)
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b70:	4b04      	ldr	r3, [pc, #16]	@ (8002b84 <HAL_TIM_PWM_MspInit+0x34>)
 8002b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b74:	2201      	movs	r2, #1
 8002b76:	4013      	ands	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b7c:	46c0      	nop			@ (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b004      	add	sp, #16
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000

08002b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a18      	ldr	r2, [pc, #96]	@ (8002bf8 <HAL_TIM_Base_MspInit+0x70>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d10e      	bne.n	8002bb8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002b9a:	4b18      	ldr	r3, [pc, #96]	@ (8002bfc <HAL_TIM_Base_MspInit+0x74>)
 8002b9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b9e:	4b17      	ldr	r3, [pc, #92]	@ (8002bfc <HAL_TIM_Base_MspInit+0x74>)
 8002ba0:	2180      	movs	r1, #128	@ 0x80
 8002ba2:	0209      	lsls	r1, r1, #8
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ba8:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <HAL_TIM_Base_MspInit+0x74>)
 8002baa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bac:	2380      	movs	r3, #128	@ 0x80
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002bb6:	e01a      	b.n	8002bee <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM16)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a10      	ldr	r2, [pc, #64]	@ (8002c00 <HAL_TIM_Base_MspInit+0x78>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d115      	bne.n	8002bee <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bfc <HAL_TIM_Base_MspInit+0x74>)
 8002bc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bfc <HAL_TIM_Base_MspInit+0x74>)
 8002bc8:	2180      	movs	r1, #128	@ 0x80
 8002bca:	0289      	lsls	r1, r1, #10
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bfc <HAL_TIM_Base_MspInit+0x74>)
 8002bd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bd4:	2380      	movs	r3, #128	@ 0x80
 8002bd6:	029b      	lsls	r3, r3, #10
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2100      	movs	r1, #0
 8002be2:	2015      	movs	r0, #21
 8002be4:	f000 fa24 	bl	8003030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002be8:	2015      	movs	r0, #21
 8002bea:	f000 fa36 	bl	800305a <HAL_NVIC_EnableIRQ>
}
 8002bee:	46c0      	nop			@ (mov r8, r8)
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b004      	add	sp, #16
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	40002000 	.word	0x40002000
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40014400 	.word	0x40014400

08002c04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b089      	sub	sp, #36	@ 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	240c      	movs	r4, #12
 8002c0e:	193b      	adds	r3, r7, r4
 8002c10:	0018      	movs	r0, r3
 8002c12:	2314      	movs	r3, #20
 8002c14:	001a      	movs	r2, r3
 8002c16:	2100      	movs	r1, #0
 8002c18:	f005 f8ac 	bl	8007d74 <memset>
  if(htim->Instance==TIM2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	2380      	movs	r3, #128	@ 0x80
 8002c22:	05db      	lsls	r3, r3, #23
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d121      	bne.n	8002c6c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c28:	4b12      	ldr	r3, [pc, #72]	@ (8002c74 <HAL_TIM_MspPostInit+0x70>)
 8002c2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c2c:	4b11      	ldr	r3, [pc, #68]	@ (8002c74 <HAL_TIM_MspPostInit+0x70>)
 8002c2e:	2104      	movs	r1, #4
 8002c30:	430a      	orrs	r2, r1
 8002c32:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c34:	4b0f      	ldr	r3, [pc, #60]	@ (8002c74 <HAL_TIM_MspPostInit+0x70>)
 8002c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c38:	2204      	movs	r2, #4
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_SHIFT_nOE_Pin;
 8002c40:	0021      	movs	r1, r4
 8002c42:	187b      	adds	r3, r7, r1
 8002c44:	2240      	movs	r2, #64	@ 0x40
 8002c46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c48:	187b      	adds	r3, r7, r1
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	187b      	adds	r3, r7, r1
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c54:	187b      	adds	r3, r7, r1
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002c5a:	187b      	adds	r3, r7, r1
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_SHIFT_nOE_GPIO_Port, &GPIO_InitStruct);
 8002c60:	187b      	adds	r3, r7, r1
 8002c62:	4a05      	ldr	r2, [pc, #20]	@ (8002c78 <HAL_TIM_MspPostInit+0x74>)
 8002c64:	0019      	movs	r1, r3
 8002c66:	0010      	movs	r0, r2
 8002c68:	f000 fba0 	bl	80033ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c6c:	46c0      	nop			@ (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b009      	add	sp, #36	@ 0x24
 8002c72:	bd90      	pop	{r4, r7, pc}
 8002c74:	40021000 	.word	0x40021000
 8002c78:	50000800 	.word	0x50000800

08002c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c80:	46c0      	nop			@ (mov r8, r8)
 8002c82:	e7fd      	b.n	8002c80 <NMI_Handler+0x4>

08002c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c88:	46c0      	nop			@ (mov r8, r8)
 8002c8a:	e7fd      	b.n	8002c88 <HardFault_Handler+0x4>

08002c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c90:	46c0      	nop			@ (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ca4:	f000 f8fc 	bl	8002ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ca8:	46c0      	nop			@ (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002cb4:	4b03      	ldr	r3, [pc, #12]	@ (8002cc4 <RTC_TAMP_IRQHandler+0x14>)
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f003 fa46 	bl	8006148 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8002cbc:	46c0      	nop			@ (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	46c0      	nop			@ (mov r8, r8)
 8002cc4:	200001d8 	.word	0x200001d8

08002cc8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002ccc:	46c0      	nop			@ (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOUR_SET_BUTTON_EXTI_Pin);
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	f000 fd22 	bl	8003720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MINUTE_SET_BUTTON_EXTI_Pin);
 8002cdc:	2002      	movs	r0, #2
 8002cde:	f000 fd1f 	bl	8003720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002ce2:	46c0      	nop			@ (mov r8, r8)
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALARM_EN_BUTTON_EXTI_Pin);
 8002cec:	2004      	movs	r0, #4
 8002cee:	f000 fd17 	bl	8003720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DISPLAY_BUTTON_EXTI_Pin);
 8002cf2:	2008      	movs	r0, #8
 8002cf4:	f000 fd14 	bl	8003720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002cf8:	46c0      	nop			@ (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TIME_SWITCH_EXTI_Pin);
 8002d02:	2010      	movs	r0, #16
 8002d04:	f000 fd0c 	bl	8003720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALARM_SET_BUTTON_EXTI_Pin);
 8002d08:	2380      	movs	r3, #128	@ 0x80
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f000 fd07 	bl	8003720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002d1c:	4b03      	ldr	r3, [pc, #12]	@ (8002d2c <DMA1_Channel1_IRQHandler+0x14>)
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f000 fa42 	bl	80031a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d24:	46c0      	nop			@ (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	20000268 	.word	0x20000268

08002d30 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002d34:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002d36:	0018      	movs	r0, r3
 8002d38:	f000 fa36 	bl	80031a8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002d3c:	4b04      	ldr	r3, [pc, #16]	@ (8002d50 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 fa32 	bl	80031a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002d44:	46c0      	nop			@ (mov r8, r8)
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	200002c4 	.word	0x200002c4
 8002d50:	2000017c 	.word	0x2000017c

08002d54 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002d58:	4b03      	ldr	r3, [pc, #12]	@ (8002d68 <TIM16_IRQHandler+0x14>)
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f004 fa1e 	bl	800719c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002d60:	46c0      	nop			@ (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	200003b8 	.word	0x200003b8

08002d6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d70:	46c0      	nop			@ (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d78:	480d      	ldr	r0, [pc, #52]	@ (8002db0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d7c:	f7ff fff6 	bl	8002d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d80:	480c      	ldr	r0, [pc, #48]	@ (8002db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d82:	490d      	ldr	r1, [pc, #52]	@ (8002db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d84:	4a0d      	ldr	r2, [pc, #52]	@ (8002dbc <LoopForever+0xe>)
  movs r3, #0
 8002d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d88:	e002      	b.n	8002d90 <LoopCopyDataInit>

08002d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d8e:	3304      	adds	r3, #4

08002d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d94:	d3f9      	bcc.n	8002d8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d96:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d98:	4c0a      	ldr	r4, [pc, #40]	@ (8002dc4 <LoopForever+0x16>)
  movs r3, #0
 8002d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d9c:	e001      	b.n	8002da2 <LoopFillZerobss>

08002d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da0:	3204      	adds	r2, #4

08002da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da4:	d3fb      	bcc.n	8002d9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002da6:	f004 ffed 	bl	8007d84 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002daa:	f7fd ffe7 	bl	8000d7c <main>

08002dae <LoopForever>:

LoopForever:
  b LoopForever
 8002dae:	e7fe      	b.n	8002dae <LoopForever>
  ldr   r0, =_estack
 8002db0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002dbc:	08007ee8 	.word	0x08007ee8
  ldr r2, =_sbss
 8002dc0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002dc4:	200004b4 	.word	0x200004b4

08002dc8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dc8:	e7fe      	b.n	8002dc8 <ADC1_IRQHandler>
	...

08002dcc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dd2:	1dfb      	adds	r3, r7, #7
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <HAL_Init+0x3c>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <HAL_Init+0x3c>)
 8002dde:	2180      	movs	r1, #128	@ 0x80
 8002de0:	0049      	lsls	r1, r1, #1
 8002de2:	430a      	orrs	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002de6:	2003      	movs	r0, #3
 8002de8:	f000 f810 	bl	8002e0c <HAL_InitTick>
 8002dec:	1e03      	subs	r3, r0, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002df0:	1dfb      	adds	r3, r7, #7
 8002df2:	2201      	movs	r2, #1
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	e001      	b.n	8002dfc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002df8:	f7ff fc62 	bl	80026c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dfc:	1dfb      	adds	r3, r7, #7
 8002dfe:	781b      	ldrb	r3, [r3, #0]
}
 8002e00:	0018      	movs	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b002      	add	sp, #8
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40022000 	.word	0x40022000

08002e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e0c:	b590      	push	{r4, r7, lr}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e14:	230f      	movs	r3, #15
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e94 <HAL_InitTick+0x88>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d02b      	beq.n	8002e7c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002e24:	4b1c      	ldr	r3, [pc, #112]	@ (8002e98 <HAL_InitTick+0x8c>)
 8002e26:	681c      	ldr	r4, [r3, #0]
 8002e28:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <HAL_InitTick+0x88>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	23fa      	movs	r3, #250	@ 0xfa
 8002e30:	0098      	lsls	r0, r3, #2
 8002e32:	f7fd f967 	bl	8000104 <__udivsi3>
 8002e36:	0003      	movs	r3, r0
 8002e38:	0019      	movs	r1, r3
 8002e3a:	0020      	movs	r0, r4
 8002e3c:	f7fd f962 	bl	8000104 <__udivsi3>
 8002e40:	0003      	movs	r3, r0
 8002e42:	0018      	movs	r0, r3
 8002e44:	f000 f919 	bl	800307a <HAL_SYSTICK_Config>
 8002e48:	1e03      	subs	r3, r0, #0
 8002e4a:	d112      	bne.n	8002e72 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d80a      	bhi.n	8002e68 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	2301      	movs	r3, #1
 8002e56:	425b      	negs	r3, r3
 8002e58:	2200      	movs	r2, #0
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 f8e8 	bl	8003030 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e60:	4b0e      	ldr	r3, [pc, #56]	@ (8002e9c <HAL_InitTick+0x90>)
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	e00d      	b.n	8002e84 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002e68:	230f      	movs	r3, #15
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	e008      	b.n	8002e84 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e72:	230f      	movs	r3, #15
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e003      	b.n	8002e84 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e7c:	230f      	movs	r3, #15
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002e84:	230f      	movs	r3, #15
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	781b      	ldrb	r3, [r3, #0]
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b005      	add	sp, #20
 8002e90:	bd90      	pop	{r4, r7, pc}
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	20000094 	.word	0x20000094
 8002e98:	2000008c 	.word	0x2000008c
 8002e9c:	20000090 	.word	0x20000090

08002ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ea4:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <HAL_IncTick+0x1c>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <HAL_IncTick+0x20>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	18d2      	adds	r2, r2, r3
 8002eb0:	4b03      	ldr	r3, [pc, #12]	@ (8002ec0 <HAL_IncTick+0x20>)
 8002eb2:	601a      	str	r2, [r3, #0]
}
 8002eb4:	46c0      	nop			@ (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			@ (mov r8, r8)
 8002ebc:	20000094 	.word	0x20000094
 8002ec0:	200004b0 	.word	0x200004b0

08002ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec8:	4b02      	ldr	r3, [pc, #8]	@ (8002ed4 <HAL_GetTick+0x10>)
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			@ (mov r8, r8)
 8002ed4:	200004b0 	.word	0x200004b0

08002ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	0002      	movs	r2, r0
 8002ee0:	1dfb      	adds	r3, r7, #7
 8002ee2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ee4:	1dfb      	adds	r3, r7, #7
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002eea:	d809      	bhi.n	8002f00 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eec:	1dfb      	adds	r3, r7, #7
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	001a      	movs	r2, r3
 8002ef2:	231f      	movs	r3, #31
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	4b04      	ldr	r3, [pc, #16]	@ (8002f08 <__NVIC_EnableIRQ+0x30>)
 8002ef8:	2101      	movs	r1, #1
 8002efa:	4091      	lsls	r1, r2
 8002efc:	000a      	movs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002f00:	46c0      	nop			@ (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b002      	add	sp, #8
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	e000e100 	.word	0xe000e100

08002f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f0c:	b590      	push	{r4, r7, lr}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	0002      	movs	r2, r0
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	1dfb      	adds	r3, r7, #7
 8002f18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f1a:	1dfb      	adds	r3, r7, #7
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f20:	d828      	bhi.n	8002f74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f22:	4a2f      	ldr	r2, [pc, #188]	@ (8002fe0 <__NVIC_SetPriority+0xd4>)
 8002f24:	1dfb      	adds	r3, r7, #7
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b25b      	sxtb	r3, r3
 8002f2a:	089b      	lsrs	r3, r3, #2
 8002f2c:	33c0      	adds	r3, #192	@ 0xc0
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	589b      	ldr	r3, [r3, r2]
 8002f32:	1dfa      	adds	r2, r7, #7
 8002f34:	7812      	ldrb	r2, [r2, #0]
 8002f36:	0011      	movs	r1, r2
 8002f38:	2203      	movs	r2, #3
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	00d2      	lsls	r2, r2, #3
 8002f3e:	21ff      	movs	r1, #255	@ 0xff
 8002f40:	4091      	lsls	r1, r2
 8002f42:	000a      	movs	r2, r1
 8002f44:	43d2      	mvns	r2, r2
 8002f46:	401a      	ands	r2, r3
 8002f48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	019b      	lsls	r3, r3, #6
 8002f4e:	22ff      	movs	r2, #255	@ 0xff
 8002f50:	401a      	ands	r2, r3
 8002f52:	1dfb      	adds	r3, r7, #7
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	0018      	movs	r0, r3
 8002f58:	2303      	movs	r3, #3
 8002f5a:	4003      	ands	r3, r0
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f60:	481f      	ldr	r0, [pc, #124]	@ (8002fe0 <__NVIC_SetPriority+0xd4>)
 8002f62:	1dfb      	adds	r3, r7, #7
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b25b      	sxtb	r3, r3
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	33c0      	adds	r3, #192	@ 0xc0
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f72:	e031      	b.n	8002fd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f74:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe4 <__NVIC_SetPriority+0xd8>)
 8002f76:	1dfb      	adds	r3, r7, #7
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	230f      	movs	r3, #15
 8002f7e:	400b      	ands	r3, r1
 8002f80:	3b08      	subs	r3, #8
 8002f82:	089b      	lsrs	r3, r3, #2
 8002f84:	3306      	adds	r3, #6
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	18d3      	adds	r3, r2, r3
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	1dfa      	adds	r2, r7, #7
 8002f90:	7812      	ldrb	r2, [r2, #0]
 8002f92:	0011      	movs	r1, r2
 8002f94:	2203      	movs	r2, #3
 8002f96:	400a      	ands	r2, r1
 8002f98:	00d2      	lsls	r2, r2, #3
 8002f9a:	21ff      	movs	r1, #255	@ 0xff
 8002f9c:	4091      	lsls	r1, r2
 8002f9e:	000a      	movs	r2, r1
 8002fa0:	43d2      	mvns	r2, r2
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	019b      	lsls	r3, r3, #6
 8002faa:	22ff      	movs	r2, #255	@ 0xff
 8002fac:	401a      	ands	r2, r3
 8002fae:	1dfb      	adds	r3, r7, #7
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	4003      	ands	r3, r0
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fbc:	4809      	ldr	r0, [pc, #36]	@ (8002fe4 <__NVIC_SetPriority+0xd8>)
 8002fbe:	1dfb      	adds	r3, r7, #7
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	001c      	movs	r4, r3
 8002fc4:	230f      	movs	r3, #15
 8002fc6:	4023      	ands	r3, r4
 8002fc8:	3b08      	subs	r3, #8
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	3306      	adds	r3, #6
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	18c3      	adds	r3, r0, r3
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	601a      	str	r2, [r3, #0]
}
 8002fd8:	46c0      	nop			@ (mov r8, r8)
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b003      	add	sp, #12
 8002fde:	bd90      	pop	{r4, r7, pc}
 8002fe0:	e000e100 	.word	0xe000e100
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	1e5a      	subs	r2, r3, #1
 8002ff4:	2380      	movs	r3, #128	@ 0x80
 8002ff6:	045b      	lsls	r3, r3, #17
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d301      	bcc.n	8003000 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e010      	b.n	8003022 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003000:	4b0a      	ldr	r3, [pc, #40]	@ (800302c <SysTick_Config+0x44>)
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	3a01      	subs	r2, #1
 8003006:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003008:	2301      	movs	r3, #1
 800300a:	425b      	negs	r3, r3
 800300c:	2103      	movs	r1, #3
 800300e:	0018      	movs	r0, r3
 8003010:	f7ff ff7c 	bl	8002f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <SysTick_Config+0x44>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301a:	4b04      	ldr	r3, [pc, #16]	@ (800302c <SysTick_Config+0x44>)
 800301c:	2207      	movs	r2, #7
 800301e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003020:	2300      	movs	r3, #0
}
 8003022:	0018      	movs	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	b002      	add	sp, #8
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			@ (mov r8, r8)
 800302c:	e000e010 	.word	0xe000e010

08003030 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	210f      	movs	r1, #15
 800303c:	187b      	adds	r3, r7, r1
 800303e:	1c02      	adds	r2, r0, #0
 8003040:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	187b      	adds	r3, r7, r1
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	b25b      	sxtb	r3, r3
 800304a:	0011      	movs	r1, r2
 800304c:	0018      	movs	r0, r3
 800304e:	f7ff ff5d 	bl	8002f0c <__NVIC_SetPriority>
}
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	46bd      	mov	sp, r7
 8003056:	b004      	add	sp, #16
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	0002      	movs	r2, r0
 8003062:	1dfb      	adds	r3, r7, #7
 8003064:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003066:	1dfb      	adds	r3, r7, #7
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	b25b      	sxtb	r3, r3
 800306c:	0018      	movs	r0, r3
 800306e:	f7ff ff33 	bl	8002ed8 <__NVIC_EnableIRQ>
}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	b002      	add	sp, #8
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0018      	movs	r0, r3
 8003086:	f7ff ffaf 	bl	8002fe8 <SysTick_Config>
 800308a:	0003      	movs	r3, r0
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e077      	b.n	8003196 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a3d      	ldr	r2, [pc, #244]	@ (80031a0 <HAL_DMA_Init+0x10c>)
 80030ac:	4694      	mov	ip, r2
 80030ae:	4463      	add	r3, ip
 80030b0:	2114      	movs	r1, #20
 80030b2:	0018      	movs	r0, r3
 80030b4:	f7fd f826 	bl	8000104 <__udivsi3>
 80030b8:	0003      	movs	r3, r0
 80030ba:	009a      	lsls	r2, r3, #2
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2225      	movs	r2, #37	@ 0x25
 80030c4:	2102      	movs	r1, #2
 80030c6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4934      	ldr	r1, [pc, #208]	@ (80031a4 <HAL_DMA_Init+0x110>)
 80030d4:	400a      	ands	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6819      	ldr	r1, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	0018      	movs	r0, r3
 8003112:	f000 f8fb 	bl	800330c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	2380      	movs	r3, #128	@ 0x80
 800311c:	01db      	lsls	r3, r3, #7
 800311e:	429a      	cmp	r2, r3
 8003120:	d102      	bne.n	8003128 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003130:	213f      	movs	r1, #63	@ 0x3f
 8003132:	400a      	ands	r2, r1
 8003134:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800313e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d011      	beq.n	800316c <HAL_DMA_Init+0xd8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b04      	cmp	r3, #4
 800314e:	d80d      	bhi.n	800316c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	0018      	movs	r0, r3
 8003154:	f000 f906 	bl	8003364 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	e008      	b.n	800317e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2225      	movs	r2, #37	@ 0x25
 8003188:	2101      	movs	r1, #1
 800318a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2224      	movs	r2, #36	@ 0x24
 8003190:	2100      	movs	r1, #0
 8003192:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	0018      	movs	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	b002      	add	sp, #8
 800319c:	bd80      	pop	{r7, pc}
 800319e:	46c0      	nop			@ (mov r8, r8)
 80031a0:	bffdfff8 	.word	0xbffdfff8
 80031a4:	ffff800f 	.word	0xffff800f

080031a8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80031b0:	4b55      	ldr	r3, [pc, #340]	@ (8003308 <HAL_DMA_IRQHandler+0x160>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c2:	221c      	movs	r2, #28
 80031c4:	4013      	ands	r3, r2
 80031c6:	2204      	movs	r2, #4
 80031c8:	409a      	lsls	r2, r3
 80031ca:	0013      	movs	r3, r2
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4013      	ands	r3, r2
 80031d0:	d027      	beq.n	8003222 <HAL_DMA_IRQHandler+0x7a>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2204      	movs	r2, #4
 80031d6:	4013      	ands	r3, r2
 80031d8:	d023      	beq.n	8003222 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2220      	movs	r2, #32
 80031e2:	4013      	ands	r3, r2
 80031e4:	d107      	bne.n	80031f6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2104      	movs	r1, #4
 80031f2:	438a      	bics	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80031f6:	4b44      	ldr	r3, [pc, #272]	@ (8003308 <HAL_DMA_IRQHandler+0x160>)
 80031f8:	6859      	ldr	r1, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	221c      	movs	r2, #28
 8003200:	4013      	ands	r3, r2
 8003202:	2204      	movs	r2, #4
 8003204:	409a      	lsls	r2, r3
 8003206:	4b40      	ldr	r3, [pc, #256]	@ (8003308 <HAL_DMA_IRQHandler+0x160>)
 8003208:	430a      	orrs	r2, r1
 800320a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003210:	2b00      	cmp	r3, #0
 8003212:	d100      	bne.n	8003216 <HAL_DMA_IRQHandler+0x6e>
 8003214:	e073      	b.n	80032fe <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	0010      	movs	r0, r2
 800321e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003220:	e06d      	b.n	80032fe <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	221c      	movs	r2, #28
 8003228:	4013      	ands	r3, r2
 800322a:	2202      	movs	r2, #2
 800322c:	409a      	lsls	r2, r3
 800322e:	0013      	movs	r3, r2
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	d02e      	beq.n	8003294 <HAL_DMA_IRQHandler+0xec>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2202      	movs	r2, #2
 800323a:	4013      	ands	r3, r2
 800323c:	d02a      	beq.n	8003294 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2220      	movs	r2, #32
 8003246:	4013      	ands	r3, r2
 8003248:	d10b      	bne.n	8003262 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	210a      	movs	r1, #10
 8003256:	438a      	bics	r2, r1
 8003258:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2225      	movs	r2, #37	@ 0x25
 800325e:	2101      	movs	r1, #1
 8003260:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003262:	4b29      	ldr	r3, [pc, #164]	@ (8003308 <HAL_DMA_IRQHandler+0x160>)
 8003264:	6859      	ldr	r1, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	221c      	movs	r2, #28
 800326c:	4013      	ands	r3, r2
 800326e:	2202      	movs	r2, #2
 8003270:	409a      	lsls	r2, r3
 8003272:	4b25      	ldr	r3, [pc, #148]	@ (8003308 <HAL_DMA_IRQHandler+0x160>)
 8003274:	430a      	orrs	r2, r1
 8003276:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2224      	movs	r2, #36	@ 0x24
 800327c:	2100      	movs	r1, #0
 800327e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d03a      	beq.n	80032fe <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	0010      	movs	r0, r2
 8003290:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003292:	e034      	b.n	80032fe <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003298:	221c      	movs	r2, #28
 800329a:	4013      	ands	r3, r2
 800329c:	2208      	movs	r2, #8
 800329e:	409a      	lsls	r2, r3
 80032a0:	0013      	movs	r3, r2
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4013      	ands	r3, r2
 80032a6:	d02b      	beq.n	8003300 <HAL_DMA_IRQHandler+0x158>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2208      	movs	r2, #8
 80032ac:	4013      	ands	r3, r2
 80032ae:	d027      	beq.n	8003300 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	210e      	movs	r1, #14
 80032bc:	438a      	bics	r2, r1
 80032be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80032c0:	4b11      	ldr	r3, [pc, #68]	@ (8003308 <HAL_DMA_IRQHandler+0x160>)
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	221c      	movs	r2, #28
 80032ca:	4013      	ands	r3, r2
 80032cc:	2201      	movs	r2, #1
 80032ce:	409a      	lsls	r2, r3
 80032d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <HAL_DMA_IRQHandler+0x160>)
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2225      	movs	r2, #37	@ 0x25
 80032e0:	2101      	movs	r1, #1
 80032e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2224      	movs	r2, #36	@ 0x24
 80032e8:	2100      	movs	r1, #0
 80032ea:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	0010      	movs	r0, r2
 80032fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032fe:	46c0      	nop			@ (mov r8, r8)
 8003300:	46c0      	nop			@ (mov r8, r8)
}
 8003302:	46bd      	mov	sp, r7
 8003304:	b004      	add	sp, #16
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40020000 	.word	0x40020000

0800330c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	089b      	lsrs	r3, r3, #2
 800331a:	4a10      	ldr	r2, [pc, #64]	@ (800335c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800331c:	4694      	mov	ip, r2
 800331e:	4463      	add	r3, ip
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	001a      	movs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	001a      	movs	r2, r3
 800332e:	23ff      	movs	r3, #255	@ 0xff
 8003330:	4013      	ands	r3, r2
 8003332:	3b08      	subs	r3, #8
 8003334:	2114      	movs	r1, #20
 8003336:	0018      	movs	r0, r3
 8003338:	f7fc fee4 	bl	8000104 <__udivsi3>
 800333c:	0003      	movs	r3, r0
 800333e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a07      	ldr	r2, [pc, #28]	@ (8003360 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003344:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	221f      	movs	r2, #31
 800334a:	4013      	ands	r3, r2
 800334c:	2201      	movs	r2, #1
 800334e:	409a      	lsls	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003354:	46c0      	nop			@ (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b004      	add	sp, #16
 800335a:	bd80      	pop	{r7, pc}
 800335c:	10008200 	.word	0x10008200
 8003360:	40020880 	.word	0x40020880

08003364 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	223f      	movs	r2, #63	@ 0x3f
 8003372:	4013      	ands	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a0a      	ldr	r2, [pc, #40]	@ (80033a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800337a:	4694      	mov	ip, r2
 800337c:	4463      	add	r3, ip
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	001a      	movs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a07      	ldr	r2, [pc, #28]	@ (80033a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800338a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3b01      	subs	r3, #1
 8003390:	2203      	movs	r2, #3
 8003392:	4013      	ands	r3, r2
 8003394:	2201      	movs	r2, #1
 8003396:	409a      	lsls	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800339c:	46c0      	nop			@ (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b004      	add	sp, #16
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	1000823f 	.word	0x1000823f
 80033a8:	40020940 	.word	0x40020940

080033ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ba:	e147      	b.n	800364c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2101      	movs	r1, #1
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4091      	lsls	r1, r2
 80033c6:	000a      	movs	r2, r1
 80033c8:	4013      	ands	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d100      	bne.n	80033d4 <HAL_GPIO_Init+0x28>
 80033d2:	e138      	b.n	8003646 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2203      	movs	r2, #3
 80033da:	4013      	ands	r3, r2
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d005      	beq.n	80033ec <HAL_GPIO_Init+0x40>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2203      	movs	r2, #3
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d130      	bne.n	800344e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	2203      	movs	r2, #3
 80033f8:	409a      	lsls	r2, r3
 80033fa:	0013      	movs	r3, r2
 80033fc:	43da      	mvns	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4013      	ands	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	409a      	lsls	r2, r3
 800340e:	0013      	movs	r3, r2
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003422:	2201      	movs	r2, #1
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	409a      	lsls	r2, r3
 8003428:	0013      	movs	r3, r2
 800342a:	43da      	mvns	r2, r3
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	091b      	lsrs	r3, r3, #4
 8003438:	2201      	movs	r2, #1
 800343a:	401a      	ands	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	409a      	lsls	r2, r3
 8003440:	0013      	movs	r3, r2
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2203      	movs	r2, #3
 8003454:	4013      	ands	r3, r2
 8003456:	2b03      	cmp	r3, #3
 8003458:	d017      	beq.n	800348a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2203      	movs	r2, #3
 8003466:	409a      	lsls	r2, r3
 8003468:	0013      	movs	r3, r2
 800346a:	43da      	mvns	r2, r3
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	409a      	lsls	r2, r3
 800347c:	0013      	movs	r3, r2
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2203      	movs	r2, #3
 8003490:	4013      	ands	r3, r2
 8003492:	2b02      	cmp	r3, #2
 8003494:	d123      	bne.n	80034de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	08da      	lsrs	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3208      	adds	r2, #8
 800349e:	0092      	lsls	r2, r2, #2
 80034a0:	58d3      	ldr	r3, [r2, r3]
 80034a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2207      	movs	r2, #7
 80034a8:	4013      	ands	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	220f      	movs	r2, #15
 80034ae:	409a      	lsls	r2, r3
 80034b0:	0013      	movs	r3, r2
 80034b2:	43da      	mvns	r2, r3
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	691a      	ldr	r2, [r3, #16]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2107      	movs	r1, #7
 80034c2:	400b      	ands	r3, r1
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	409a      	lsls	r2, r3
 80034c8:	0013      	movs	r3, r2
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	08da      	lsrs	r2, r3, #3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3208      	adds	r2, #8
 80034d8:	0092      	lsls	r2, r2, #2
 80034da:	6939      	ldr	r1, [r7, #16]
 80034dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	2203      	movs	r2, #3
 80034ea:	409a      	lsls	r2, r3
 80034ec:	0013      	movs	r3, r2
 80034ee:	43da      	mvns	r2, r3
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4013      	ands	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2203      	movs	r2, #3
 80034fc:	401a      	ands	r2, r3
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	409a      	lsls	r2, r3
 8003504:	0013      	movs	r3, r2
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	23c0      	movs	r3, #192	@ 0xc0
 8003518:	029b      	lsls	r3, r3, #10
 800351a:	4013      	ands	r3, r2
 800351c:	d100      	bne.n	8003520 <HAL_GPIO_Init+0x174>
 800351e:	e092      	b.n	8003646 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003520:	4a50      	ldr	r2, [pc, #320]	@ (8003664 <HAL_GPIO_Init+0x2b8>)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	3318      	adds	r3, #24
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	589b      	ldr	r3, [r3, r2]
 800352c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2203      	movs	r2, #3
 8003532:	4013      	ands	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	220f      	movs	r2, #15
 8003538:	409a      	lsls	r2, r3
 800353a:	0013      	movs	r3, r2
 800353c:	43da      	mvns	r2, r3
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	23a0      	movs	r3, #160	@ 0xa0
 8003548:	05db      	lsls	r3, r3, #23
 800354a:	429a      	cmp	r2, r3
 800354c:	d013      	beq.n	8003576 <HAL_GPIO_Init+0x1ca>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a45      	ldr	r2, [pc, #276]	@ (8003668 <HAL_GPIO_Init+0x2bc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00d      	beq.n	8003572 <HAL_GPIO_Init+0x1c6>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a44      	ldr	r2, [pc, #272]	@ (800366c <HAL_GPIO_Init+0x2c0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d007      	beq.n	800356e <HAL_GPIO_Init+0x1c2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a43      	ldr	r2, [pc, #268]	@ (8003670 <HAL_GPIO_Init+0x2c4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d101      	bne.n	800356a <HAL_GPIO_Init+0x1be>
 8003566:	2303      	movs	r3, #3
 8003568:	e006      	b.n	8003578 <HAL_GPIO_Init+0x1cc>
 800356a:	2305      	movs	r3, #5
 800356c:	e004      	b.n	8003578 <HAL_GPIO_Init+0x1cc>
 800356e:	2302      	movs	r3, #2
 8003570:	e002      	b.n	8003578 <HAL_GPIO_Init+0x1cc>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_GPIO_Init+0x1cc>
 8003576:	2300      	movs	r3, #0
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	2103      	movs	r1, #3
 800357c:	400a      	ands	r2, r1
 800357e:	00d2      	lsls	r2, r2, #3
 8003580:	4093      	lsls	r3, r2
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003588:	4936      	ldr	r1, [pc, #216]	@ (8003664 <HAL_GPIO_Init+0x2b8>)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	089b      	lsrs	r3, r3, #2
 800358e:	3318      	adds	r3, #24
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003596:	4b33      	ldr	r3, [pc, #204]	@ (8003664 <HAL_GPIO_Init+0x2b8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	43da      	mvns	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	2380      	movs	r3, #128	@ 0x80
 80035ac:	035b      	lsls	r3, r3, #13
 80035ae:	4013      	ands	r3, r2
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003664 <HAL_GPIO_Init+0x2b8>)
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80035c0:	4b28      	ldr	r3, [pc, #160]	@ (8003664 <HAL_GPIO_Init+0x2b8>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	43da      	mvns	r2, r3
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4013      	ands	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	2380      	movs	r3, #128	@ 0x80
 80035d6:	039b      	lsls	r3, r3, #14
 80035d8:	4013      	ands	r3, r2
 80035da:	d003      	beq.n	80035e4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003664 <HAL_GPIO_Init+0x2b8>)
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003664 <HAL_GPIO_Init+0x2b8>)
 80035ec:	2384      	movs	r3, #132	@ 0x84
 80035ee:	58d3      	ldr	r3, [r2, r3]
 80035f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	43da      	mvns	r2, r3
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	2380      	movs	r3, #128	@ 0x80
 8003602:	029b      	lsls	r3, r3, #10
 8003604:	4013      	ands	r3, r2
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003610:	4914      	ldr	r1, [pc, #80]	@ (8003664 <HAL_GPIO_Init+0x2b8>)
 8003612:	2284      	movs	r2, #132	@ 0x84
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003618:	4a12      	ldr	r2, [pc, #72]	@ (8003664 <HAL_GPIO_Init+0x2b8>)
 800361a:	2380      	movs	r3, #128	@ 0x80
 800361c:	58d3      	ldr	r3, [r2, r3]
 800361e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	43da      	mvns	r2, r3
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	2380      	movs	r3, #128	@ 0x80
 8003630:	025b      	lsls	r3, r3, #9
 8003632:	4013      	ands	r3, r2
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800363e:	4909      	ldr	r1, [pc, #36]	@ (8003664 <HAL_GPIO_Init+0x2b8>)
 8003640:	2280      	movs	r2, #128	@ 0x80
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	3301      	adds	r3, #1
 800364a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	40da      	lsrs	r2, r3
 8003654:	1e13      	subs	r3, r2, #0
 8003656:	d000      	beq.n	800365a <HAL_GPIO_Init+0x2ae>
 8003658:	e6b0      	b.n	80033bc <HAL_GPIO_Init+0x10>
  }
}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	46c0      	nop			@ (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	b006      	add	sp, #24
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40021800 	.word	0x40021800
 8003668:	50000400 	.word	0x50000400
 800366c:	50000800 	.word	0x50000800
 8003670:	50000c00 	.word	0x50000c00

08003674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	000a      	movs	r2, r1
 800367e:	1cbb      	adds	r3, r7, #2
 8003680:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	1cba      	adds	r2, r7, #2
 8003688:	8812      	ldrh	r2, [r2, #0]
 800368a:	4013      	ands	r3, r2
 800368c:	d004      	beq.n	8003698 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800368e:	230f      	movs	r3, #15
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	2201      	movs	r2, #1
 8003694:	701a      	strb	r2, [r3, #0]
 8003696:	e003      	b.n	80036a0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003698:	230f      	movs	r3, #15
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80036a0:	230f      	movs	r3, #15
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	781b      	ldrb	r3, [r3, #0]
}
 80036a6:	0018      	movs	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b004      	add	sp, #16
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	0008      	movs	r0, r1
 80036b8:	0011      	movs	r1, r2
 80036ba:	1cbb      	adds	r3, r7, #2
 80036bc:	1c02      	adds	r2, r0, #0
 80036be:	801a      	strh	r2, [r3, #0]
 80036c0:	1c7b      	adds	r3, r7, #1
 80036c2:	1c0a      	adds	r2, r1, #0
 80036c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036c6:	1c7b      	adds	r3, r7, #1
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d004      	beq.n	80036d8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036ce:	1cbb      	adds	r3, r7, #2
 80036d0:	881a      	ldrh	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036d6:	e003      	b.n	80036e0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036d8:	1cbb      	adds	r3, r7, #2
 80036da:	881a      	ldrh	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036e0:	46c0      	nop			@ (mov r8, r8)
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b002      	add	sp, #8
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	000a      	movs	r2, r1
 80036f2:	1cbb      	adds	r3, r7, #2
 80036f4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036fc:	1cbb      	adds	r3, r7, #2
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4013      	ands	r3, r2
 8003704:	041a      	lsls	r2, r3, #16
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	43db      	mvns	r3, r3
 800370a:	1cb9      	adds	r1, r7, #2
 800370c:	8809      	ldrh	r1, [r1, #0]
 800370e:	400b      	ands	r3, r1
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	619a      	str	r2, [r3, #24]
}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	46bd      	mov	sp, r7
 800371a:	b004      	add	sp, #16
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	0002      	movs	r2, r0
 8003728:	1dbb      	adds	r3, r7, #6
 800372a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800372c:	4b10      	ldr	r3, [pc, #64]	@ (8003770 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	1dba      	adds	r2, r7, #6
 8003732:	8812      	ldrh	r2, [r2, #0]
 8003734:	4013      	ands	r3, r2
 8003736:	d008      	beq.n	800374a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003738:	4b0d      	ldr	r3, [pc, #52]	@ (8003770 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800373a:	1dba      	adds	r2, r7, #6
 800373c:	8812      	ldrh	r2, [r2, #0]
 800373e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003740:	1dbb      	adds	r3, r7, #6
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	0018      	movs	r0, r3
 8003746:	f7fe fa35 	bl	8001bb4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800374a:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	1dba      	adds	r2, r7, #6
 8003750:	8812      	ldrh	r2, [r2, #0]
 8003752:	4013      	ands	r3, r2
 8003754:	d008      	beq.n	8003768 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003756:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003758:	1dba      	adds	r2, r7, #6
 800375a:	8812      	ldrh	r2, [r2, #0]
 800375c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800375e:	1dbb      	adds	r3, r7, #6
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	0018      	movs	r0, r3
 8003764:	f7fe f9d2 	bl	8001b0c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003768:	46c0      	nop			@ (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	b002      	add	sp, #8
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021800 	.word	0x40021800

08003774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e08f      	b.n	80038a6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2241      	movs	r2, #65	@ 0x41
 800378a:	5c9b      	ldrb	r3, [r3, r2]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d107      	bne.n	80037a2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2240      	movs	r2, #64	@ 0x40
 8003796:	2100      	movs	r1, #0
 8003798:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	0018      	movs	r0, r3
 800379e:	f7fe ffbb 	bl	8002718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2241      	movs	r2, #65	@ 0x41
 80037a6:	2124      	movs	r1, #36	@ 0x24
 80037a8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2101      	movs	r1, #1
 80037b6:	438a      	bics	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	493b      	ldr	r1, [pc, #236]	@ (80038b0 <HAL_I2C_Init+0x13c>)
 80037c4:	400a      	ands	r2, r1
 80037c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4938      	ldr	r1, [pc, #224]	@ (80038b4 <HAL_I2C_Init+0x140>)
 80037d4:	400a      	ands	r2, r1
 80037d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d108      	bne.n	80037f2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2180      	movs	r1, #128	@ 0x80
 80037ea:	0209      	lsls	r1, r1, #8
 80037ec:	430a      	orrs	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	e007      	b.n	8003802 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2184      	movs	r1, #132	@ 0x84
 80037fc:	0209      	lsls	r1, r1, #8
 80037fe:	430a      	orrs	r2, r1
 8003800:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d109      	bne.n	800381e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2180      	movs	r1, #128	@ 0x80
 8003816:	0109      	lsls	r1, r1, #4
 8003818:	430a      	orrs	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
 800381c:	e007      	b.n	800382e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4923      	ldr	r1, [pc, #140]	@ (80038b8 <HAL_I2C_Init+0x144>)
 800382a:	400a      	ands	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4920      	ldr	r1, [pc, #128]	@ (80038bc <HAL_I2C_Init+0x148>)
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	491a      	ldr	r1, [pc, #104]	@ (80038b4 <HAL_I2C_Init+0x140>)
 800384a:	400a      	ands	r2, r1
 800384c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	431a      	orrs	r2, r3
 8003858:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69d9      	ldr	r1, [r3, #28]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1a      	ldr	r2, [r3, #32]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2101      	movs	r1, #1
 8003884:	430a      	orrs	r2, r1
 8003886:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2241      	movs	r2, #65	@ 0x41
 8003892:	2120      	movs	r1, #32
 8003894:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2242      	movs	r2, #66	@ 0x42
 80038a0:	2100      	movs	r1, #0
 80038a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b002      	add	sp, #8
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	f0ffffff 	.word	0xf0ffffff
 80038b4:	ffff7fff 	.word	0xffff7fff
 80038b8:	fffff7ff 	.word	0xfffff7ff
 80038bc:	02008000 	.word	0x02008000

080038c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b089      	sub	sp, #36	@ 0x24
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	0008      	movs	r0, r1
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	0019      	movs	r1, r3
 80038ce:	230a      	movs	r3, #10
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	1c02      	adds	r2, r0, #0
 80038d4:	801a      	strh	r2, [r3, #0]
 80038d6:	2308      	movs	r3, #8
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	1c0a      	adds	r2, r1, #0
 80038dc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2241      	movs	r2, #65	@ 0x41
 80038e2:	5c9b      	ldrb	r3, [r3, r2]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d000      	beq.n	80038ec <HAL_I2C_Master_Transmit+0x2c>
 80038ea:	e10a      	b.n	8003b02 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2240      	movs	r2, #64	@ 0x40
 80038f0:	5c9b      	ldrb	r3, [r3, r2]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_I2C_Master_Transmit+0x3a>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e104      	b.n	8003b04 <HAL_I2C_Master_Transmit+0x244>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2240      	movs	r2, #64	@ 0x40
 80038fe:	2101      	movs	r1, #1
 8003900:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003902:	f7ff fadf 	bl	8002ec4 <HAL_GetTick>
 8003906:	0003      	movs	r3, r0
 8003908:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800390a:	2380      	movs	r3, #128	@ 0x80
 800390c:	0219      	lsls	r1, r3, #8
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	2319      	movs	r3, #25
 8003916:	2201      	movs	r2, #1
 8003918:	f000 fa26 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 800391c:	1e03      	subs	r3, r0, #0
 800391e:	d001      	beq.n	8003924 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0ef      	b.n	8003b04 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2241      	movs	r2, #65	@ 0x41
 8003928:	2121      	movs	r1, #33	@ 0x21
 800392a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2242      	movs	r2, #66	@ 0x42
 8003930:	2110      	movs	r1, #16
 8003932:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2208      	movs	r2, #8
 8003944:	18ba      	adds	r2, r7, r2
 8003946:	8812      	ldrh	r2, [r2, #0]
 8003948:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2bff      	cmp	r3, #255	@ 0xff
 8003958:	d906      	bls.n	8003968 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	22ff      	movs	r2, #255	@ 0xff
 800395e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003960:	2380      	movs	r3, #128	@ 0x80
 8003962:	045b      	lsls	r3, r3, #17
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e007      	b.n	8003978 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003972:	2380      	movs	r3, #128	@ 0x80
 8003974:	049b      	lsls	r3, r3, #18
 8003976:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	d027      	beq.n	80039d0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	781a      	ldrb	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	3301      	adds	r3, #1
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	697c      	ldr	r4, [r7, #20]
 80039bc:	230a      	movs	r3, #10
 80039be:	18fb      	adds	r3, r7, r3
 80039c0:	8819      	ldrh	r1, [r3, #0]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	4b51      	ldr	r3, [pc, #324]	@ (8003b0c <HAL_I2C_Master_Transmit+0x24c>)
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	0023      	movs	r3, r4
 80039ca:	f000 fc45 	bl	8004258 <I2C_TransferConfig>
 80039ce:	e06f      	b.n	8003ab0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	697c      	ldr	r4, [r7, #20]
 80039d8:	230a      	movs	r3, #10
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	8819      	ldrh	r1, [r3, #0]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	4b4a      	ldr	r3, [pc, #296]	@ (8003b0c <HAL_I2C_Master_Transmit+0x24c>)
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	0023      	movs	r3, r4
 80039e6:	f000 fc37 	bl	8004258 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80039ea:	e061      	b.n	8003ab0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	0018      	movs	r0, r3
 80039f4:	f000 fa10 	bl	8003e18 <I2C_WaitOnTXISFlagUntilTimeout>
 80039f8:	1e03      	subs	r3, r0, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e081      	b.n	8003b04 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d03a      	beq.n	8003ab0 <HAL_I2C_Master_Transmit+0x1f0>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d136      	bne.n	8003ab0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	0013      	movs	r3, r2
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2180      	movs	r1, #128	@ 0x80
 8003a50:	f000 f98a 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 8003a54:	1e03      	subs	r3, r0, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e053      	b.n	8003b04 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2bff      	cmp	r3, #255	@ 0xff
 8003a64:	d911      	bls.n	8003a8a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	22ff      	movs	r2, #255	@ 0xff
 8003a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	2380      	movs	r3, #128	@ 0x80
 8003a74:	045c      	lsls	r4, r3, #17
 8003a76:	230a      	movs	r3, #10
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	8819      	ldrh	r1, [r3, #0]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	0023      	movs	r3, r4
 8003a84:	f000 fbe8 	bl	8004258 <I2C_TransferConfig>
 8003a88:	e012      	b.n	8003ab0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	2380      	movs	r3, #128	@ 0x80
 8003a9c:	049c      	lsls	r4, r3, #18
 8003a9e:	230a      	movs	r3, #10
 8003aa0:	18fb      	adds	r3, r7, r3
 8003aa2:	8819      	ldrh	r1, [r3, #0]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	0023      	movs	r3, r4
 8003aac:	f000 fbd4 	bl	8004258 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d198      	bne.n	80039ec <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f000 f9ef 	bl	8003ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ac6:	1e03      	subs	r3, r0, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e01a      	b.n	8003b04 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	490b      	ldr	r1, [pc, #44]	@ (8003b10 <HAL_I2C_Master_Transmit+0x250>)
 8003ae2:	400a      	ands	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2241      	movs	r2, #65	@ 0x41
 8003aea:	2120      	movs	r1, #32
 8003aec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2242      	movs	r2, #66	@ 0x42
 8003af2:	2100      	movs	r1, #0
 8003af4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2240      	movs	r2, #64	@ 0x40
 8003afa:	2100      	movs	r1, #0
 8003afc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e000      	b.n	8003b04 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003b02:	2302      	movs	r3, #2
  }
}
 8003b04:	0018      	movs	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b007      	add	sp, #28
 8003b0a:	bd90      	pop	{r4, r7, pc}
 8003b0c:	80002000 	.word	0x80002000
 8003b10:	fe00e800 	.word	0xfe00e800

08003b14 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003b14:	b590      	push	{r4, r7, lr}
 8003b16:	b089      	sub	sp, #36	@ 0x24
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	0008      	movs	r0, r1
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	0019      	movs	r1, r3
 8003b22:	230a      	movs	r3, #10
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	1c02      	adds	r2, r0, #0
 8003b28:	801a      	strh	r2, [r3, #0]
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	1c0a      	adds	r2, r1, #0
 8003b30:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2241      	movs	r2, #65	@ 0x41
 8003b36:	5c9b      	ldrb	r3, [r3, r2]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d000      	beq.n	8003b40 <HAL_I2C_Master_Receive+0x2c>
 8003b3e:	e0e8      	b.n	8003d12 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2240      	movs	r2, #64	@ 0x40
 8003b44:	5c9b      	ldrb	r3, [r3, r2]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d101      	bne.n	8003b4e <HAL_I2C_Master_Receive+0x3a>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e0e2      	b.n	8003d14 <HAL_I2C_Master_Receive+0x200>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2240      	movs	r2, #64	@ 0x40
 8003b52:	2101      	movs	r1, #1
 8003b54:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b56:	f7ff f9b5 	bl	8002ec4 <HAL_GetTick>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b5e:	2380      	movs	r3, #128	@ 0x80
 8003b60:	0219      	lsls	r1, r3, #8
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	2319      	movs	r3, #25
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f000 f8fc 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 8003b70:	1e03      	subs	r3, r0, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0cd      	b.n	8003d14 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2241      	movs	r2, #65	@ 0x41
 8003b7c:	2122      	movs	r1, #34	@ 0x22
 8003b7e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2242      	movs	r2, #66	@ 0x42
 8003b84:	2110      	movs	r1, #16
 8003b86:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2208      	movs	r2, #8
 8003b98:	18ba      	adds	r2, r7, r2
 8003b9a:	8812      	ldrh	r2, [r2, #0]
 8003b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2bff      	cmp	r3, #255	@ 0xff
 8003bac:	d911      	bls.n	8003bd2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	22ff      	movs	r2, #255	@ 0xff
 8003bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	2380      	movs	r3, #128	@ 0x80
 8003bbc:	045c      	lsls	r4, r3, #17
 8003bbe:	230a      	movs	r3, #10
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	8819      	ldrh	r1, [r3, #0]
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	4b55      	ldr	r3, [pc, #340]	@ (8003d1c <HAL_I2C_Master_Receive+0x208>)
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	0023      	movs	r3, r4
 8003bcc:	f000 fb44 	bl	8004258 <I2C_TransferConfig>
 8003bd0:	e076      	b.n	8003cc0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	2380      	movs	r3, #128	@ 0x80
 8003be4:	049c      	lsls	r4, r3, #18
 8003be6:	230a      	movs	r3, #10
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	8819      	ldrh	r1, [r3, #0]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	4b4b      	ldr	r3, [pc, #300]	@ (8003d1c <HAL_I2C_Master_Receive+0x208>)
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	0023      	movs	r3, r4
 8003bf4:	f000 fb30 	bl	8004258 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003bf8:	e062      	b.n	8003cc0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 f993 	bl	8003f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c06:	1e03      	subs	r3, r0, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e082      	b.n	8003d14 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d03a      	beq.n	8003cc0 <HAL_I2C_Master_Receive+0x1ac>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d136      	bne.n	8003cc0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	0013      	movs	r3, r2
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2180      	movs	r1, #128	@ 0x80
 8003c60:	f000 f882 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 8003c64:	1e03      	subs	r3, r0, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e053      	b.n	8003d14 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2bff      	cmp	r3, #255	@ 0xff
 8003c74:	d911      	bls.n	8003c9a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	22ff      	movs	r2, #255	@ 0xff
 8003c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	2380      	movs	r3, #128	@ 0x80
 8003c84:	045c      	lsls	r4, r3, #17
 8003c86:	230a      	movs	r3, #10
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	8819      	ldrh	r1, [r3, #0]
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	0023      	movs	r3, r4
 8003c94:	f000 fae0 	bl	8004258 <I2C_TransferConfig>
 8003c98:	e012      	b.n	8003cc0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	2380      	movs	r3, #128	@ 0x80
 8003cac:	049c      	lsls	r4, r3, #18
 8003cae:	230a      	movs	r3, #10
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	8819      	ldrh	r1, [r3, #0]
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	0023      	movs	r3, r4
 8003cbc:	f000 facc 	bl	8004258 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d197      	bne.n	8003bfa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f000 f8e7 	bl	8003ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cd6:	1e03      	subs	r3, r0, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e01a      	b.n	8003d14 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	490b      	ldr	r1, [pc, #44]	@ (8003d20 <HAL_I2C_Master_Receive+0x20c>)
 8003cf2:	400a      	ands	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2241      	movs	r2, #65	@ 0x41
 8003cfa:	2120      	movs	r1, #32
 8003cfc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2242      	movs	r2, #66	@ 0x42
 8003d02:	2100      	movs	r1, #0
 8003d04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2240      	movs	r2, #64	@ 0x40
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e000      	b.n	8003d14 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003d12:	2302      	movs	r3, #2
  }
}
 8003d14:	0018      	movs	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b007      	add	sp, #28
 8003d1a:	bd90      	pop	{r4, r7, pc}
 8003d1c:	80002400 	.word	0x80002400
 8003d20:	fe00e800 	.word	0xfe00e800

08003d24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	2202      	movs	r2, #2
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d103      	bne.n	8003d42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d007      	beq.n	8003d60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	619a      	str	r2, [r3, #24]
  }
}
 8003d60:	46c0      	nop			@ (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b002      	add	sp, #8
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	1dfb      	adds	r3, r7, #7
 8003d76:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d78:	e03a      	b.n	8003df0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	6839      	ldr	r1, [r7, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	0018      	movs	r0, r3
 8003d82:	f000 f971 	bl	8004068 <I2C_IsErrorOccurred>
 8003d86:	1e03      	subs	r3, r0, #0
 8003d88:	d001      	beq.n	8003d8e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e040      	b.n	8003e10 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	3301      	adds	r3, #1
 8003d92:	d02d      	beq.n	8003df0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d94:	f7ff f896 	bl	8002ec4 <HAL_GetTick>
 8003d98:	0002      	movs	r2, r0
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d302      	bcc.n	8003daa <I2C_WaitOnFlagUntilTimeout+0x42>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d122      	bne.n	8003df0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	4013      	ands	r3, r2
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	425a      	negs	r2, r3
 8003dba:	4153      	adcs	r3, r2
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	001a      	movs	r2, r3
 8003dc0:	1dfb      	adds	r3, r7, #7
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d113      	bne.n	8003df0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dcc:	2220      	movs	r2, #32
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2241      	movs	r2, #65	@ 0x41
 8003dd8:	2120      	movs	r1, #32
 8003dda:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2242      	movs	r2, #66	@ 0x42
 8003de0:	2100      	movs	r1, #0
 8003de2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2240      	movs	r2, #64	@ 0x40
 8003de8:	2100      	movs	r1, #0
 8003dea:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e00f      	b.n	8003e10 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	425a      	negs	r2, r3
 8003e00:	4153      	adcs	r3, r2
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	001a      	movs	r2, r3
 8003e06:	1dfb      	adds	r3, r7, #7
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d0b5      	beq.n	8003d7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b004      	add	sp, #16
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e24:	e032      	b.n	8003e8c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f000 f91b 	bl	8004068 <I2C_IsErrorOccurred>
 8003e32:	1e03      	subs	r3, r0, #0
 8003e34:	d001      	beq.n	8003e3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e030      	b.n	8003e9c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	d025      	beq.n	8003e8c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e40:	f7ff f840 	bl	8002ec4 <HAL_GetTick>
 8003e44:	0002      	movs	r2, r0
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d302      	bcc.n	8003e56 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d11a      	bne.n	8003e8c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d013      	beq.n	8003e8c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e68:	2220      	movs	r2, #32
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2241      	movs	r2, #65	@ 0x41
 8003e74:	2120      	movs	r1, #32
 8003e76:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2242      	movs	r2, #66	@ 0x42
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2240      	movs	r2, #64	@ 0x40
 8003e84:	2100      	movs	r1, #0
 8003e86:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e007      	b.n	8003e9c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	2202      	movs	r2, #2
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d1c5      	bne.n	8003e26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	b004      	add	sp, #16
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eb0:	e02f      	b.n	8003f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f000 f8d5 	bl	8004068 <I2C_IsErrorOccurred>
 8003ebe:	1e03      	subs	r3, r0, #0
 8003ec0:	d001      	beq.n	8003ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e02d      	b.n	8003f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec6:	f7fe fffd 	bl	8002ec4 <HAL_GetTick>
 8003eca:	0002      	movs	r2, r0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d302      	bcc.n	8003edc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d11a      	bne.n	8003f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b20      	cmp	r3, #32
 8003ee8:	d013      	beq.n	8003f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eee:	2220      	movs	r2, #32
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2241      	movs	r2, #65	@ 0x41
 8003efa:	2120      	movs	r1, #32
 8003efc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2242      	movs	r2, #66	@ 0x42
 8003f02:	2100      	movs	r1, #0
 8003f04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2240      	movs	r2, #64	@ 0x40
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e007      	b.n	8003f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d1c8      	bne.n	8003eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	0018      	movs	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b004      	add	sp, #16
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f38:	2317      	movs	r3, #23
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003f40:	e07b      	b.n	800403a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f000 f88d 	bl	8004068 <I2C_IsErrorOccurred>
 8003f4e:	1e03      	subs	r3, r0, #0
 8003f50:	d003      	beq.n	8003f5a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003f52:	2317      	movs	r3, #23
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	2201      	movs	r2, #1
 8003f58:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	2220      	movs	r2, #32
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d140      	bne.n	8003fea <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003f68:	2117      	movs	r1, #23
 8003f6a:	187b      	adds	r3, r7, r1
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d13b      	bne.n	8003fea <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2204      	movs	r2, #4
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d106      	bne.n	8003f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003f88:	187b      	adds	r3, r7, r1
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2210      	movs	r2, #16
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d123      	bne.n	8003fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2210      	movs	r2, #16
 8003fa2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4929      	ldr	r1, [pc, #164]	@ (8004064 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003fbe:	400a      	ands	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2241      	movs	r2, #65	@ 0x41
 8003fc6:	2120      	movs	r1, #32
 8003fc8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2242      	movs	r2, #66	@ 0x42
 8003fce:	2100      	movs	r1, #0
 8003fd0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2240      	movs	r2, #64	@ 0x40
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003fda:	2317      	movs	r3, #23
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	2201      	movs	r2, #1
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	e002      	b.n	8003fea <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003fea:	f7fe ff6b 	bl	8002ec4 <HAL_GetTick>
 8003fee:	0002      	movs	r2, r0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d302      	bcc.n	8004000 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d11c      	bne.n	800403a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004000:	2017      	movs	r0, #23
 8004002:	183b      	adds	r3, r7, r0
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d117      	bne.n	800403a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	2204      	movs	r2, #4
 8004012:	4013      	ands	r3, r2
 8004014:	2b04      	cmp	r3, #4
 8004016:	d010      	beq.n	800403a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401c:	2220      	movs	r2, #32
 800401e:	431a      	orrs	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2241      	movs	r2, #65	@ 0x41
 8004028:	2120      	movs	r1, #32
 800402a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2240      	movs	r2, #64	@ 0x40
 8004030:	2100      	movs	r1, #0
 8004032:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004034:	183b      	adds	r3, r7, r0
 8004036:	2201      	movs	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	2204      	movs	r2, #4
 8004042:	4013      	ands	r3, r2
 8004044:	2b04      	cmp	r3, #4
 8004046:	d005      	beq.n	8004054 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004048:	2317      	movs	r3, #23
 800404a:	18fb      	adds	r3, r7, r3
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d100      	bne.n	8004054 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004052:	e776      	b.n	8003f42 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004054:	2317      	movs	r3, #23
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	781b      	ldrb	r3, [r3, #0]
}
 800405a:	0018      	movs	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	b006      	add	sp, #24
 8004060:	bd80      	pop	{r7, pc}
 8004062:	46c0      	nop			@ (mov r8, r8)
 8004064:	fe00e800 	.word	0xfe00e800

08004068 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	@ 0x28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004074:	2327      	movs	r3, #39	@ 0x27
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2210      	movs	r2, #16
 8004090:	4013      	ands	r3, r2
 8004092:	d100      	bne.n	8004096 <I2C_IsErrorOccurred+0x2e>
 8004094:	e079      	b.n	800418a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2210      	movs	r2, #16
 800409c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800409e:	e057      	b.n	8004150 <I2C_IsErrorOccurred+0xe8>
 80040a0:	2227      	movs	r2, #39	@ 0x27
 80040a2:	18bb      	adds	r3, r7, r2
 80040a4:	18ba      	adds	r2, r7, r2
 80040a6:	7812      	ldrb	r2, [r2, #0]
 80040a8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	3301      	adds	r3, #1
 80040ae:	d04f      	beq.n	8004150 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040b0:	f7fe ff08 	bl	8002ec4 <HAL_GetTick>
 80040b4:	0002      	movs	r2, r0
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d302      	bcc.n	80040c6 <I2C_IsErrorOccurred+0x5e>
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d144      	bne.n	8004150 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	2380      	movs	r3, #128	@ 0x80
 80040ce:	01db      	lsls	r3, r3, #7
 80040d0:	4013      	ands	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80040d4:	2013      	movs	r0, #19
 80040d6:	183b      	adds	r3, r7, r0
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	2142      	movs	r1, #66	@ 0x42
 80040dc:	5c52      	ldrb	r2, [r2, r1]
 80040de:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	2380      	movs	r3, #128	@ 0x80
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	401a      	ands	r2, r3
 80040ec:	2380      	movs	r3, #128	@ 0x80
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d126      	bne.n	8004142 <I2C_IsErrorOccurred+0xda>
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	2380      	movs	r3, #128	@ 0x80
 80040f8:	01db      	lsls	r3, r3, #7
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d021      	beq.n	8004142 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80040fe:	183b      	adds	r3, r7, r0
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b20      	cmp	r3, #32
 8004104:	d01d      	beq.n	8004142 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2180      	movs	r1, #128	@ 0x80
 8004112:	01c9      	lsls	r1, r1, #7
 8004114:	430a      	orrs	r2, r1
 8004116:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004118:	f7fe fed4 	bl	8002ec4 <HAL_GetTick>
 800411c:	0003      	movs	r3, r0
 800411e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004120:	e00f      	b.n	8004142 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004122:	f7fe fecf 	bl	8002ec4 <HAL_GetTick>
 8004126:	0002      	movs	r2, r0
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b19      	cmp	r3, #25
 800412e:	d908      	bls.n	8004142 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	2220      	movs	r2, #32
 8004134:	4313      	orrs	r3, r2
 8004136:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004138:	2327      	movs	r3, #39	@ 0x27
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	2201      	movs	r2, #1
 800413e:	701a      	strb	r2, [r3, #0]

              break;
 8004140:	e006      	b.n	8004150 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	2220      	movs	r2, #32
 800414a:	4013      	ands	r3, r2
 800414c:	2b20      	cmp	r3, #32
 800414e:	d1e8      	bne.n	8004122 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2220      	movs	r2, #32
 8004158:	4013      	ands	r3, r2
 800415a:	2b20      	cmp	r3, #32
 800415c:	d004      	beq.n	8004168 <I2C_IsErrorOccurred+0x100>
 800415e:	2327      	movs	r3, #39	@ 0x27
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d09b      	beq.n	80040a0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004168:	2327      	movs	r3, #39	@ 0x27
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d103      	bne.n	800417a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2220      	movs	r2, #32
 8004178:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	2204      	movs	r2, #4
 800417e:	4313      	orrs	r3, r2
 8004180:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004182:	2327      	movs	r3, #39	@ 0x27
 8004184:	18fb      	adds	r3, r7, r3
 8004186:	2201      	movs	r2, #1
 8004188:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	2380      	movs	r3, #128	@ 0x80
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	4013      	ands	r3, r2
 800419a:	d00c      	beq.n	80041b6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	2201      	movs	r2, #1
 80041a0:	4313      	orrs	r3, r2
 80041a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2280      	movs	r2, #128	@ 0x80
 80041aa:	0052      	lsls	r2, r2, #1
 80041ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041ae:	2327      	movs	r3, #39	@ 0x27
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	2201      	movs	r2, #1
 80041b4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	2380      	movs	r3, #128	@ 0x80
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4013      	ands	r3, r2
 80041be:	d00c      	beq.n	80041da <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	2208      	movs	r2, #8
 80041c4:	4313      	orrs	r3, r2
 80041c6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2280      	movs	r2, #128	@ 0x80
 80041ce:	00d2      	lsls	r2, r2, #3
 80041d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041d2:	2327      	movs	r3, #39	@ 0x27
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	2201      	movs	r2, #1
 80041d8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	2380      	movs	r3, #128	@ 0x80
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4013      	ands	r3, r2
 80041e2:	d00c      	beq.n	80041fe <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	2202      	movs	r2, #2
 80041e8:	4313      	orrs	r3, r2
 80041ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2280      	movs	r2, #128	@ 0x80
 80041f2:	0092      	lsls	r2, r2, #2
 80041f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041f6:	2327      	movs	r3, #39	@ 0x27
 80041f8:	18fb      	adds	r3, r7, r3
 80041fa:	2201      	movs	r2, #1
 80041fc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80041fe:	2327      	movs	r3, #39	@ 0x27
 8004200:	18fb      	adds	r3, r7, r3
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01d      	beq.n	8004244 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	0018      	movs	r0, r3
 800420c:	f7ff fd8a 	bl	8003d24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	490e      	ldr	r1, [pc, #56]	@ (8004254 <I2C_IsErrorOccurred+0x1ec>)
 800421c:	400a      	ands	r2, r1
 800421e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	431a      	orrs	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2241      	movs	r2, #65	@ 0x41
 8004230:	2120      	movs	r1, #32
 8004232:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2242      	movs	r2, #66	@ 0x42
 8004238:	2100      	movs	r1, #0
 800423a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2240      	movs	r2, #64	@ 0x40
 8004240:	2100      	movs	r1, #0
 8004242:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004244:	2327      	movs	r3, #39	@ 0x27
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	781b      	ldrb	r3, [r3, #0]
}
 800424a:	0018      	movs	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	b00a      	add	sp, #40	@ 0x28
 8004250:	bd80      	pop	{r7, pc}
 8004252:	46c0      	nop			@ (mov r8, r8)
 8004254:	fe00e800 	.word	0xfe00e800

08004258 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004258:	b590      	push	{r4, r7, lr}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	0008      	movs	r0, r1
 8004262:	0011      	movs	r1, r2
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	240a      	movs	r4, #10
 8004268:	193b      	adds	r3, r7, r4
 800426a:	1c02      	adds	r2, r0, #0
 800426c:	801a      	strh	r2, [r3, #0]
 800426e:	2009      	movs	r0, #9
 8004270:	183b      	adds	r3, r7, r0
 8004272:	1c0a      	adds	r2, r1, #0
 8004274:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004276:	193b      	adds	r3, r7, r4
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	059b      	lsls	r3, r3, #22
 800427c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800427e:	183b      	adds	r3, r7, r0
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	0419      	lsls	r1, r3, #16
 8004284:	23ff      	movs	r3, #255	@ 0xff
 8004286:	041b      	lsls	r3, r3, #16
 8004288:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800428a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004292:	4313      	orrs	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042a2:	0d51      	lsrs	r1, r2, #21
 80042a4:	2280      	movs	r2, #128	@ 0x80
 80042a6:	00d2      	lsls	r2, r2, #3
 80042a8:	400a      	ands	r2, r1
 80042aa:	4907      	ldr	r1, [pc, #28]	@ (80042c8 <I2C_TransferConfig+0x70>)
 80042ac:	430a      	orrs	r2, r1
 80042ae:	43d2      	mvns	r2, r2
 80042b0:	401a      	ands	r2, r3
 80042b2:	0011      	movs	r1, r2
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042be:	46c0      	nop			@ (mov r8, r8)
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b007      	add	sp, #28
 80042c4:	bd90      	pop	{r4, r7, pc}
 80042c6:	46c0      	nop			@ (mov r8, r8)
 80042c8:	03ff63ff 	.word	0x03ff63ff

080042cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2241      	movs	r2, #65	@ 0x41
 80042da:	5c9b      	ldrb	r3, [r3, r2]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d138      	bne.n	8004354 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2240      	movs	r2, #64	@ 0x40
 80042e6:	5c9b      	ldrb	r3, [r3, r2]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e032      	b.n	8004356 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2240      	movs	r2, #64	@ 0x40
 80042f4:	2101      	movs	r1, #1
 80042f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2241      	movs	r2, #65	@ 0x41
 80042fc:	2124      	movs	r1, #36	@ 0x24
 80042fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2101      	movs	r1, #1
 800430c:	438a      	bics	r2, r1
 800430e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4911      	ldr	r1, [pc, #68]	@ (8004360 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800431c:	400a      	ands	r2, r1
 800431e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6819      	ldr	r1, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2101      	movs	r1, #1
 800433c:	430a      	orrs	r2, r1
 800433e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2241      	movs	r2, #65	@ 0x41
 8004344:	2120      	movs	r1, #32
 8004346:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2240      	movs	r2, #64	@ 0x40
 800434c:	2100      	movs	r1, #0
 800434e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	e000      	b.n	8004356 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004354:	2302      	movs	r3, #2
  }
}
 8004356:	0018      	movs	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	b002      	add	sp, #8
 800435c:	bd80      	pop	{r7, pc}
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	ffffefff 	.word	0xffffefff

08004364 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2241      	movs	r2, #65	@ 0x41
 8004372:	5c9b      	ldrb	r3, [r3, r2]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b20      	cmp	r3, #32
 8004378:	d139      	bne.n	80043ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2240      	movs	r2, #64	@ 0x40
 800437e:	5c9b      	ldrb	r3, [r3, r2]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004384:	2302      	movs	r3, #2
 8004386:	e033      	b.n	80043f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2240      	movs	r2, #64	@ 0x40
 800438c:	2101      	movs	r1, #1
 800438e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2241      	movs	r2, #65	@ 0x41
 8004394:	2124      	movs	r1, #36	@ 0x24
 8004396:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2101      	movs	r1, #1
 80043a4:	438a      	bics	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4a11      	ldr	r2, [pc, #68]	@ (80043f8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2101      	movs	r1, #1
 80043d6:	430a      	orrs	r2, r1
 80043d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2241      	movs	r2, #65	@ 0x41
 80043de:	2120      	movs	r1, #32
 80043e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2240      	movs	r2, #64	@ 0x40
 80043e6:	2100      	movs	r1, #0
 80043e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e000      	b.n	80043f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043ee:	2302      	movs	r3, #2
  }
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b004      	add	sp, #16
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	fffff0ff 	.word	0xfffff0ff

080043fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e0e5      	b.n	80045da <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2235      	movs	r2, #53	@ 0x35
 8004412:	5c9b      	ldrb	r3, [r3, r2]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d107      	bne.n	800442a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2234      	movs	r2, #52	@ 0x34
 800441e:	2100      	movs	r1, #0
 8004420:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	0018      	movs	r0, r3
 8004426:	f7fe f9d9 	bl	80027dc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2235      	movs	r2, #53	@ 0x35
 800442e:	2102      	movs	r1, #2
 8004430:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4969      	ldr	r1, [pc, #420]	@ (80045e4 <HAL_I2S_Init+0x1e8>)
 800443e:	400a      	ands	r2, r1
 8004440:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2202      	movs	r2, #2
 8004448:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	2b02      	cmp	r3, #2
 8004450:	d100      	bne.n	8004454 <HAL_I2S_Init+0x58>
 8004452:	e076      	b.n	8004542 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d102      	bne.n	8004462 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800445c:	2310      	movs	r3, #16
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	e001      	b.n	8004466 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004462:	2320      	movs	r3, #32
 8004464:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b20      	cmp	r3, #32
 800446c:	d802      	bhi.n	8004474 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004474:	2380      	movs	r3, #128	@ 0x80
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	0018      	movs	r0, r3
 800447a:	f000 ff5b 	bl	8005334 <HAL_RCCEx_GetPeriphCLKFreq>
 800447e:	0003      	movs	r3, r0
 8004480:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691a      	ldr	r2, [r3, #16]
 8004486:	2380      	movs	r3, #128	@ 0x80
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	429a      	cmp	r2, r3
 800448c:	d131      	bne.n	80044f2 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d016      	beq.n	80044c4 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	0019      	movs	r1, r3
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7fb fe31 	bl	8000104 <__udivsi3>
 80044a2:	0003      	movs	r3, r0
 80044a4:	001a      	movs	r2, r3
 80044a6:	0013      	movs	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	189b      	adds	r3, r3, r2
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	001a      	movs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	0019      	movs	r1, r3
 80044b6:	0010      	movs	r0, r2
 80044b8:	f7fb fe24 	bl	8000104 <__udivsi3>
 80044bc:	0003      	movs	r3, r0
 80044be:	3305      	adds	r3, #5
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	e02a      	b.n	800451a <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	0019      	movs	r1, r3
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f7fb fe1a 	bl	8000104 <__udivsi3>
 80044d0:	0003      	movs	r3, r0
 80044d2:	001a      	movs	r2, r3
 80044d4:	0013      	movs	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	189b      	adds	r3, r3, r2
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	001a      	movs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	0019      	movs	r1, r3
 80044e4:	0010      	movs	r0, r2
 80044e6:	f7fb fe0d 	bl	8000104 <__udivsi3>
 80044ea:	0003      	movs	r3, r0
 80044ec:	3305      	adds	r3, #5
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	e013      	b.n	800451a <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80044f2:	6979      	ldr	r1, [r7, #20]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7fb fe05 	bl	8000104 <__udivsi3>
 80044fa:	0003      	movs	r3, r0
 80044fc:	001a      	movs	r2, r3
 80044fe:	0013      	movs	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	189b      	adds	r3, r3, r2
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	001a      	movs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	0019      	movs	r1, r3
 800450e:	0010      	movs	r0, r2
 8004510:	f7fb fdf8 	bl	8000104 <__udivsi3>
 8004514:	0003      	movs	r3, r0
 8004516:	3305      	adds	r3, #5
 8004518:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	210a      	movs	r1, #10
 800451e:	0018      	movs	r0, r3
 8004520:	f7fb fdf0 	bl	8000104 <__udivsi3>
 8004524:	0003      	movs	r3, r0
 8004526:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2201      	movs	r2, #1
 800452c:	4013      	ands	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	085b      	lsrs	r3, r3, #1
 8004538:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	e003      	b.n	800454a <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004542:	2302      	movs	r3, #2
 8004544:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d902      	bls.n	8004556 <HAL_I2S_Init+0x15a>
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2bff      	cmp	r3, #255	@ 0xff
 8004554:	d907      	bls.n	8004566 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455a:	2210      	movs	r2, #16
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e039      	b.n	80045da <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	431a      	orrs	r2, r3
 800456e:	0011      	movs	r1, r2
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	430a      	orrs	r2, r1
 8004578:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	4a18      	ldr	r2, [pc, #96]	@ (80045e4 <HAL_I2S_Init+0x1e8>)
 8004582:	401a      	ands	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6859      	ldr	r1, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4319      	orrs	r1, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	4319      	orrs	r1, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	430b      	orrs	r3, r1
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2180      	movs	r1, #128	@ 0x80
 80045a2:	0109      	lsls	r1, r1, #4
 80045a4:	430a      	orrs	r2, r1
 80045a6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b30      	cmp	r3, #48	@ 0x30
 80045ae:	d003      	beq.n	80045b8 <HAL_I2S_Init+0x1bc>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2bb0      	cmp	r3, #176	@ 0xb0
 80045b6:	d108      	bne.n	80045ca <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	69da      	ldr	r2, [r3, #28]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2180      	movs	r1, #128	@ 0x80
 80045c4:	0149      	lsls	r1, r1, #5
 80045c6:	430a      	orrs	r2, r1
 80045c8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2235      	movs	r2, #53	@ 0x35
 80045d4:	2101      	movs	r1, #1
 80045d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	0018      	movs	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	b008      	add	sp, #32
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	fffff040 	.word	0xfffff040

080045e8 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045ec:	4b04      	ldr	r3, [pc, #16]	@ (8004600 <HAL_PWR_EnableBkUpAccess+0x18>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	4b03      	ldr	r3, [pc, #12]	@ (8004600 <HAL_PWR_EnableBkUpAccess+0x18>)
 80045f2:	2180      	movs	r1, #128	@ 0x80
 80045f4:	0049      	lsls	r1, r1, #1
 80045f6:	430a      	orrs	r2, r1
 80045f8:	601a      	str	r2, [r3, #0]
}
 80045fa:	46c0      	nop			@ (mov r8, r8)
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40007000 	.word	0x40007000

08004604 <HAL_PWR_DisableBkUpAccess>:
/**
  * @brief  Disable access to the backup domain
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8004608:	4b04      	ldr	r3, [pc, #16]	@ (800461c <HAL_PWR_DisableBkUpAccess+0x18>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4b03      	ldr	r3, [pc, #12]	@ (800461c <HAL_PWR_DisableBkUpAccess+0x18>)
 800460e:	4904      	ldr	r1, [pc, #16]	@ (8004620 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8004610:	400a      	ands	r2, r1
 8004612:	601a      	str	r2, [r3, #0]
}
 8004614:	46c0      	nop			@ (mov r8, r8)
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	46c0      	nop			@ (mov r8, r8)
 800461c:	40007000 	.word	0x40007000
 8004620:	fffffeff 	.word	0xfffffeff

08004624 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800462c:	4b19      	ldr	r3, [pc, #100]	@ (8004694 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a19      	ldr	r2, [pc, #100]	@ (8004698 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004632:	4013      	ands	r3, r2
 8004634:	0019      	movs	r1, r3
 8004636:	4b17      	ldr	r3, [pc, #92]	@ (8004694 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	430a      	orrs	r2, r1
 800463c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	2380      	movs	r3, #128	@ 0x80
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	429a      	cmp	r2, r3
 8004646:	d11f      	bne.n	8004688 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004648:	4b14      	ldr	r3, [pc, #80]	@ (800469c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	0013      	movs	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	189b      	adds	r3, r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4912      	ldr	r1, [pc, #72]	@ (80046a0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004656:	0018      	movs	r0, r3
 8004658:	f7fb fd54 	bl	8000104 <__udivsi3>
 800465c:	0003      	movs	r3, r0
 800465e:	3301      	adds	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004662:	e008      	b.n	8004676 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3b01      	subs	r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e001      	b.n	8004676 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e009      	b.n	800468a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004676:	4b07      	ldr	r3, [pc, #28]	@ (8004694 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	2380      	movs	r3, #128	@ 0x80
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	401a      	ands	r2, r3
 8004680:	2380      	movs	r3, #128	@ 0x80
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	429a      	cmp	r2, r3
 8004686:	d0ed      	beq.n	8004664 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	0018      	movs	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	b004      	add	sp, #16
 8004690:	bd80      	pop	{r7, pc}
 8004692:	46c0      	nop			@ (mov r8, r8)
 8004694:	40007000 	.word	0x40007000
 8004698:	fffff9ff 	.word	0xfffff9ff
 800469c:	2000008c 	.word	0x2000008c
 80046a0:	000f4240 	.word	0x000f4240

080046a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80046a8:	4b03      	ldr	r3, [pc, #12]	@ (80046b8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	23e0      	movs	r3, #224	@ 0xe0
 80046ae:	01db      	lsls	r3, r3, #7
 80046b0:	4013      	ands	r3, r2
}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40021000 	.word	0x40021000

080046bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e2fe      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2201      	movs	r2, #1
 80046d4:	4013      	ands	r3, r2
 80046d6:	d100      	bne.n	80046da <HAL_RCC_OscConfig+0x1e>
 80046d8:	e07c      	b.n	80047d4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046da:	4bc3      	ldr	r3, [pc, #780]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2238      	movs	r2, #56	@ 0x38
 80046e0:	4013      	ands	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046e4:	4bc0      	ldr	r3, [pc, #768]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	2203      	movs	r2, #3
 80046ea:	4013      	ands	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d102      	bne.n	80046fa <HAL_RCC_OscConfig+0x3e>
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d002      	beq.n	8004700 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d10b      	bne.n	8004718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004700:	4bb9      	ldr	r3, [pc, #740]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	2380      	movs	r3, #128	@ 0x80
 8004706:	029b      	lsls	r3, r3, #10
 8004708:	4013      	ands	r3, r2
 800470a:	d062      	beq.n	80047d2 <HAL_RCC_OscConfig+0x116>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d15e      	bne.n	80047d2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e2d9      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	2380      	movs	r3, #128	@ 0x80
 800471e:	025b      	lsls	r3, r3, #9
 8004720:	429a      	cmp	r2, r3
 8004722:	d107      	bne.n	8004734 <HAL_RCC_OscConfig+0x78>
 8004724:	4bb0      	ldr	r3, [pc, #704]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	4baf      	ldr	r3, [pc, #700]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 800472a:	2180      	movs	r1, #128	@ 0x80
 800472c:	0249      	lsls	r1, r1, #9
 800472e:	430a      	orrs	r2, r1
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	e020      	b.n	8004776 <HAL_RCC_OscConfig+0xba>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	23a0      	movs	r3, #160	@ 0xa0
 800473a:	02db      	lsls	r3, r3, #11
 800473c:	429a      	cmp	r2, r3
 800473e:	d10e      	bne.n	800475e <HAL_RCC_OscConfig+0xa2>
 8004740:	4ba9      	ldr	r3, [pc, #676]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	4ba8      	ldr	r3, [pc, #672]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004746:	2180      	movs	r1, #128	@ 0x80
 8004748:	02c9      	lsls	r1, r1, #11
 800474a:	430a      	orrs	r2, r1
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	4ba6      	ldr	r3, [pc, #664]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4ba5      	ldr	r3, [pc, #660]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004754:	2180      	movs	r1, #128	@ 0x80
 8004756:	0249      	lsls	r1, r1, #9
 8004758:	430a      	orrs	r2, r1
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	e00b      	b.n	8004776 <HAL_RCC_OscConfig+0xba>
 800475e:	4ba2      	ldr	r3, [pc, #648]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4ba1      	ldr	r3, [pc, #644]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004764:	49a1      	ldr	r1, [pc, #644]	@ (80049ec <HAL_RCC_OscConfig+0x330>)
 8004766:	400a      	ands	r2, r1
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	4b9f      	ldr	r3, [pc, #636]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b9e      	ldr	r3, [pc, #632]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004770:	499f      	ldr	r1, [pc, #636]	@ (80049f0 <HAL_RCC_OscConfig+0x334>)
 8004772:	400a      	ands	r2, r1
 8004774:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d014      	beq.n	80047a8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477e:	f7fe fba1 	bl	8002ec4 <HAL_GetTick>
 8004782:	0003      	movs	r3, r0
 8004784:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004788:	f7fe fb9c 	bl	8002ec4 <HAL_GetTick>
 800478c:	0002      	movs	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b64      	cmp	r3, #100	@ 0x64
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e298      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800479a:	4b93      	ldr	r3, [pc, #588]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	2380      	movs	r3, #128	@ 0x80
 80047a0:	029b      	lsls	r3, r3, #10
 80047a2:	4013      	ands	r3, r2
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0xcc>
 80047a6:	e015      	b.n	80047d4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fe fb8c 	bl	8002ec4 <HAL_GetTick>
 80047ac:	0003      	movs	r3, r0
 80047ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b2:	f7fe fb87 	bl	8002ec4 <HAL_GetTick>
 80047b6:	0002      	movs	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b64      	cmp	r3, #100	@ 0x64
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e283      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047c4:	4b88      	ldr	r3, [pc, #544]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	2380      	movs	r3, #128	@ 0x80
 80047ca:	029b      	lsls	r3, r3, #10
 80047cc:	4013      	ands	r3, r2
 80047ce:	d1f0      	bne.n	80047b2 <HAL_RCC_OscConfig+0xf6>
 80047d0:	e000      	b.n	80047d4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2202      	movs	r2, #2
 80047da:	4013      	ands	r3, r2
 80047dc:	d100      	bne.n	80047e0 <HAL_RCC_OscConfig+0x124>
 80047de:	e099      	b.n	8004914 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047e0:	4b81      	ldr	r3, [pc, #516]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2238      	movs	r2, #56	@ 0x38
 80047e6:	4013      	ands	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047ea:	4b7f      	ldr	r3, [pc, #508]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	2203      	movs	r2, #3
 80047f0:	4013      	ands	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d102      	bne.n	8004800 <HAL_RCC_OscConfig+0x144>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d002      	beq.n	8004806 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d135      	bne.n	8004872 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004806:	4b78      	ldr	r3, [pc, #480]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	2380      	movs	r3, #128	@ 0x80
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4013      	ands	r3, r2
 8004810:	d005      	beq.n	800481e <HAL_RCC_OscConfig+0x162>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e256      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481e:	4b72      	ldr	r3, [pc, #456]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	4a74      	ldr	r2, [pc, #464]	@ (80049f4 <HAL_RCC_OscConfig+0x338>)
 8004824:	4013      	ands	r3, r2
 8004826:	0019      	movs	r1, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	021a      	lsls	r2, r3, #8
 800482e:	4b6e      	ldr	r3, [pc, #440]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004830:	430a      	orrs	r2, r1
 8004832:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d112      	bne.n	8004860 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800483a:	4b6b      	ldr	r3, [pc, #428]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a6e      	ldr	r2, [pc, #440]	@ (80049f8 <HAL_RCC_OscConfig+0x33c>)
 8004840:	4013      	ands	r3, r2
 8004842:	0019      	movs	r1, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	4b67      	ldr	r3, [pc, #412]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 800484a:	430a      	orrs	r2, r1
 800484c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800484e:	4b66      	ldr	r3, [pc, #408]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	0adb      	lsrs	r3, r3, #11
 8004854:	2207      	movs	r2, #7
 8004856:	4013      	ands	r3, r2
 8004858:	4a68      	ldr	r2, [pc, #416]	@ (80049fc <HAL_RCC_OscConfig+0x340>)
 800485a:	40da      	lsrs	r2, r3
 800485c:	4b68      	ldr	r3, [pc, #416]	@ (8004a00 <HAL_RCC_OscConfig+0x344>)
 800485e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004860:	4b68      	ldr	r3, [pc, #416]	@ (8004a04 <HAL_RCC_OscConfig+0x348>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	0018      	movs	r0, r3
 8004866:	f7fe fad1 	bl	8002e0c <HAL_InitTick>
 800486a:	1e03      	subs	r3, r0, #0
 800486c:	d051      	beq.n	8004912 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e22c      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d030      	beq.n	80048dc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800487a:	4b5b      	ldr	r3, [pc, #364]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a5e      	ldr	r2, [pc, #376]	@ (80049f8 <HAL_RCC_OscConfig+0x33c>)
 8004880:	4013      	ands	r3, r2
 8004882:	0019      	movs	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	4b57      	ldr	r3, [pc, #348]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 800488a:	430a      	orrs	r2, r1
 800488c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800488e:	4b56      	ldr	r3, [pc, #344]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4b55      	ldr	r3, [pc, #340]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004894:	2180      	movs	r1, #128	@ 0x80
 8004896:	0049      	lsls	r1, r1, #1
 8004898:	430a      	orrs	r2, r1
 800489a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489c:	f7fe fb12 	bl	8002ec4 <HAL_GetTick>
 80048a0:	0003      	movs	r3, r0
 80048a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a6:	f7fe fb0d 	bl	8002ec4 <HAL_GetTick>
 80048aa:	0002      	movs	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e209      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048b8:	4b4b      	ldr	r3, [pc, #300]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	2380      	movs	r3, #128	@ 0x80
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4013      	ands	r3, r2
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c4:	4b48      	ldr	r3, [pc, #288]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4a4a      	ldr	r2, [pc, #296]	@ (80049f4 <HAL_RCC_OscConfig+0x338>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	0019      	movs	r1, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	021a      	lsls	r2, r3, #8
 80048d4:	4b44      	ldr	r3, [pc, #272]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	e01b      	b.n	8004914 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80048dc:	4b42      	ldr	r3, [pc, #264]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4b41      	ldr	r3, [pc, #260]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 80048e2:	4949      	ldr	r1, [pc, #292]	@ (8004a08 <HAL_RCC_OscConfig+0x34c>)
 80048e4:	400a      	ands	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fe faec 	bl	8002ec4 <HAL_GetTick>
 80048ec:	0003      	movs	r3, r0
 80048ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f2:	f7fe fae7 	bl	8002ec4 <HAL_GetTick>
 80048f6:	0002      	movs	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e1e3      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004904:	4b38      	ldr	r3, [pc, #224]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	2380      	movs	r3, #128	@ 0x80
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	4013      	ands	r3, r2
 800490e:	d1f0      	bne.n	80048f2 <HAL_RCC_OscConfig+0x236>
 8004910:	e000      	b.n	8004914 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004912:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2208      	movs	r2, #8
 800491a:	4013      	ands	r3, r2
 800491c:	d047      	beq.n	80049ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800491e:	4b32      	ldr	r3, [pc, #200]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2238      	movs	r2, #56	@ 0x38
 8004924:	4013      	ands	r3, r2
 8004926:	2b18      	cmp	r3, #24
 8004928:	d10a      	bne.n	8004940 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800492a:	4b2f      	ldr	r3, [pc, #188]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 800492c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800492e:	2202      	movs	r2, #2
 8004930:	4013      	ands	r3, r2
 8004932:	d03c      	beq.n	80049ae <HAL_RCC_OscConfig+0x2f2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d138      	bne.n	80049ae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e1c5      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d019      	beq.n	800497c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004948:	4b27      	ldr	r3, [pc, #156]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 800494a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800494c:	4b26      	ldr	r3, [pc, #152]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 800494e:	2101      	movs	r1, #1
 8004950:	430a      	orrs	r2, r1
 8004952:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fe fab6 	bl	8002ec4 <HAL_GetTick>
 8004958:	0003      	movs	r3, r0
 800495a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800495e:	f7fe fab1 	bl	8002ec4 <HAL_GetTick>
 8004962:	0002      	movs	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e1ad      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004970:	4b1d      	ldr	r3, [pc, #116]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004974:	2202      	movs	r2, #2
 8004976:	4013      	ands	r3, r2
 8004978:	d0f1      	beq.n	800495e <HAL_RCC_OscConfig+0x2a2>
 800497a:	e018      	b.n	80049ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800497c:	4b1a      	ldr	r3, [pc, #104]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 800497e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004980:	4b19      	ldr	r3, [pc, #100]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 8004982:	2101      	movs	r1, #1
 8004984:	438a      	bics	r2, r1
 8004986:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004988:	f7fe fa9c 	bl	8002ec4 <HAL_GetTick>
 800498c:	0003      	movs	r3, r0
 800498e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004992:	f7fe fa97 	bl	8002ec4 <HAL_GetTick>
 8004996:	0002      	movs	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e193      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049a4:	4b10      	ldr	r3, [pc, #64]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 80049a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049a8:	2202      	movs	r2, #2
 80049aa:	4013      	ands	r3, r2
 80049ac:	d1f1      	bne.n	8004992 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2204      	movs	r2, #4
 80049b4:	4013      	ands	r3, r2
 80049b6:	d100      	bne.n	80049ba <HAL_RCC_OscConfig+0x2fe>
 80049b8:	e0c6      	b.n	8004b48 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ba:	231f      	movs	r3, #31
 80049bc:	18fb      	adds	r3, r7, r3
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80049c2:	4b09      	ldr	r3, [pc, #36]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2238      	movs	r2, #56	@ 0x38
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d11e      	bne.n	8004a0c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80049ce:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <HAL_RCC_OscConfig+0x32c>)
 80049d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d2:	2202      	movs	r2, #2
 80049d4:	4013      	ands	r3, r2
 80049d6:	d100      	bne.n	80049da <HAL_RCC_OscConfig+0x31e>
 80049d8:	e0b6      	b.n	8004b48 <HAL_RCC_OscConfig+0x48c>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d000      	beq.n	80049e4 <HAL_RCC_OscConfig+0x328>
 80049e2:	e0b1      	b.n	8004b48 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e171      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
 80049e8:	40021000 	.word	0x40021000
 80049ec:	fffeffff 	.word	0xfffeffff
 80049f0:	fffbffff 	.word	0xfffbffff
 80049f4:	ffff80ff 	.word	0xffff80ff
 80049f8:	ffffc7ff 	.word	0xffffc7ff
 80049fc:	00f42400 	.word	0x00f42400
 8004a00:	2000008c 	.word	0x2000008c
 8004a04:	20000090 	.word	0x20000090
 8004a08:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a0c:	4bb1      	ldr	r3, [pc, #708]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004a0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a10:	2380      	movs	r3, #128	@ 0x80
 8004a12:	055b      	lsls	r3, r3, #21
 8004a14:	4013      	ands	r3, r2
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_OscConfig+0x360>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e000      	b.n	8004a1e <HAL_RCC_OscConfig+0x362>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d011      	beq.n	8004a46 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004a22:	4bac      	ldr	r3, [pc, #688]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004a24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a26:	4bab      	ldr	r3, [pc, #684]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004a28:	2180      	movs	r1, #128	@ 0x80
 8004a2a:	0549      	lsls	r1, r1, #21
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a30:	4ba8      	ldr	r3, [pc, #672]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004a32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a34:	2380      	movs	r3, #128	@ 0x80
 8004a36:	055b      	lsls	r3, r3, #21
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004a3e:	231f      	movs	r3, #31
 8004a40:	18fb      	adds	r3, r7, r3
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a46:	4ba4      	ldr	r3, [pc, #656]	@ (8004cd8 <HAL_RCC_OscConfig+0x61c>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	2380      	movs	r3, #128	@ 0x80
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d11a      	bne.n	8004a88 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a52:	4ba1      	ldr	r3, [pc, #644]	@ (8004cd8 <HAL_RCC_OscConfig+0x61c>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4ba0      	ldr	r3, [pc, #640]	@ (8004cd8 <HAL_RCC_OscConfig+0x61c>)
 8004a58:	2180      	movs	r1, #128	@ 0x80
 8004a5a:	0049      	lsls	r1, r1, #1
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004a60:	f7fe fa30 	bl	8002ec4 <HAL_GetTick>
 8004a64:	0003      	movs	r3, r0
 8004a66:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a6a:	f7fe fa2b 	bl	8002ec4 <HAL_GetTick>
 8004a6e:	0002      	movs	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e127      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a7c:	4b96      	ldr	r3, [pc, #600]	@ (8004cd8 <HAL_RCC_OscConfig+0x61c>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	2380      	movs	r3, #128	@ 0x80
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	4013      	ands	r3, r2
 8004a86:	d0f0      	beq.n	8004a6a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d106      	bne.n	8004a9e <HAL_RCC_OscConfig+0x3e2>
 8004a90:	4b90      	ldr	r3, [pc, #576]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004a92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a94:	4b8f      	ldr	r3, [pc, #572]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004a96:	2101      	movs	r1, #1
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a9c:	e01c      	b.n	8004ad8 <HAL_RCC_OscConfig+0x41c>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b05      	cmp	r3, #5
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x404>
 8004aa6:	4b8b      	ldr	r3, [pc, #556]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004aa8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004aaa:	4b8a      	ldr	r3, [pc, #552]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004aac:	2104      	movs	r1, #4
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ab2:	4b88      	ldr	r3, [pc, #544]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004ab4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ab6:	4b87      	ldr	r3, [pc, #540]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004ab8:	2101      	movs	r1, #1
 8004aba:	430a      	orrs	r2, r1
 8004abc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004abe:	e00b      	b.n	8004ad8 <HAL_RCC_OscConfig+0x41c>
 8004ac0:	4b84      	ldr	r3, [pc, #528]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004ac2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ac4:	4b83      	ldr	r3, [pc, #524]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	438a      	bics	r2, r1
 8004aca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004acc:	4b81      	ldr	r3, [pc, #516]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004ace:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ad0:	4b80      	ldr	r3, [pc, #512]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004ad2:	2104      	movs	r1, #4
 8004ad4:	438a      	bics	r2, r1
 8004ad6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d014      	beq.n	8004b0a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fe f9f0 	bl	8002ec4 <HAL_GetTick>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ae8:	e009      	b.n	8004afe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aea:	f7fe f9eb 	bl	8002ec4 <HAL_GetTick>
 8004aee:	0002      	movs	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	4a79      	ldr	r2, [pc, #484]	@ (8004cdc <HAL_RCC_OscConfig+0x620>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e0e6      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004afe:	4b75      	ldr	r3, [pc, #468]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b02:	2202      	movs	r2, #2
 8004b04:	4013      	ands	r3, r2
 8004b06:	d0f0      	beq.n	8004aea <HAL_RCC_OscConfig+0x42e>
 8004b08:	e013      	b.n	8004b32 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0a:	f7fe f9db 	bl	8002ec4 <HAL_GetTick>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b12:	e009      	b.n	8004b28 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b14:	f7fe f9d6 	bl	8002ec4 <HAL_GetTick>
 8004b18:	0002      	movs	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	4a6f      	ldr	r2, [pc, #444]	@ (8004cdc <HAL_RCC_OscConfig+0x620>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e0d1      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b28:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d1f0      	bne.n	8004b14 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004b32:	231f      	movs	r3, #31
 8004b34:	18fb      	adds	r3, r7, r3
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d105      	bne.n	8004b48 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004b3c:	4b65      	ldr	r3, [pc, #404]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004b3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b40:	4b64      	ldr	r3, [pc, #400]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004b42:	4967      	ldr	r1, [pc, #412]	@ (8004ce0 <HAL_RCC_OscConfig+0x624>)
 8004b44:	400a      	ands	r2, r1
 8004b46:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d100      	bne.n	8004b52 <HAL_RCC_OscConfig+0x496>
 8004b50:	e0bb      	b.n	8004cca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b52:	4b60      	ldr	r3, [pc, #384]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2238      	movs	r2, #56	@ 0x38
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b10      	cmp	r3, #16
 8004b5c:	d100      	bne.n	8004b60 <HAL_RCC_OscConfig+0x4a4>
 8004b5e:	e07b      	b.n	8004c58 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d156      	bne.n	8004c16 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b68:	4b5a      	ldr	r3, [pc, #360]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	4b59      	ldr	r3, [pc, #356]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004b6e:	495d      	ldr	r1, [pc, #372]	@ (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004b70:	400a      	ands	r2, r1
 8004b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b74:	f7fe f9a6 	bl	8002ec4 <HAL_GetTick>
 8004b78:	0003      	movs	r3, r0
 8004b7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b7e:	f7fe f9a1 	bl	8002ec4 <HAL_GetTick>
 8004b82:	0002      	movs	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e09d      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b90:	4b50      	ldr	r3, [pc, #320]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	2380      	movs	r3, #128	@ 0x80
 8004b96:	049b      	lsls	r3, r3, #18
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d1f0      	bne.n	8004b7e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4a51      	ldr	r2, [pc, #324]	@ (8004ce8 <HAL_RCC_OscConfig+0x62c>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1a      	ldr	r2, [r3, #32]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	021b      	lsls	r3, r3, #8
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	4b42      	ldr	r3, [pc, #264]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bd0:	4b40      	ldr	r3, [pc, #256]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004bd6:	2180      	movs	r1, #128	@ 0x80
 8004bd8:	0449      	lsls	r1, r1, #17
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004bde:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	4b3c      	ldr	r3, [pc, #240]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004be4:	2180      	movs	r1, #128	@ 0x80
 8004be6:	0549      	lsls	r1, r1, #21
 8004be8:	430a      	orrs	r2, r1
 8004bea:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bec:	f7fe f96a 	bl	8002ec4 <HAL_GetTick>
 8004bf0:	0003      	movs	r3, r0
 8004bf2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf6:	f7fe f965 	bl	8002ec4 <HAL_GetTick>
 8004bfa:	0002      	movs	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e061      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c08:	4b32      	ldr	r3, [pc, #200]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	2380      	movs	r3, #128	@ 0x80
 8004c0e:	049b      	lsls	r3, r3, #18
 8004c10:	4013      	ands	r3, r2
 8004c12:	d0f0      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x53a>
 8004c14:	e059      	b.n	8004cca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c16:	4b2f      	ldr	r3, [pc, #188]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004c1c:	4931      	ldr	r1, [pc, #196]	@ (8004ce4 <HAL_RCC_OscConfig+0x628>)
 8004c1e:	400a      	ands	r2, r1
 8004c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c22:	f7fe f94f 	bl	8002ec4 <HAL_GetTick>
 8004c26:	0003      	movs	r3, r0
 8004c28:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2c:	f7fe f94a 	bl	8002ec4 <HAL_GetTick>
 8004c30:	0002      	movs	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e046      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c3e:	4b25      	ldr	r3, [pc, #148]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	2380      	movs	r3, #128	@ 0x80
 8004c44:	049b      	lsls	r3, r3, #18
 8004c46:	4013      	ands	r3, r2
 8004c48:	d1f0      	bne.n	8004c2c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004c4a:	4b22      	ldr	r3, [pc, #136]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	4b21      	ldr	r3, [pc, #132]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004c50:	4926      	ldr	r1, [pc, #152]	@ (8004cec <HAL_RCC_OscConfig+0x630>)
 8004c52:	400a      	ands	r2, r1
 8004c54:	60da      	str	r2, [r3, #12]
 8004c56:	e038      	b.n	8004cca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e033      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004c64:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd4 <HAL_RCC_OscConfig+0x618>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2203      	movs	r2, #3
 8004c6e:	401a      	ands	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d126      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2270      	movs	r2, #112	@ 0x70
 8004c7c:	401a      	ands	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d11f      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	23fe      	movs	r3, #254	@ 0xfe
 8004c8a:	01db      	lsls	r3, r3, #7
 8004c8c:	401a      	ands	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c92:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d116      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	23f8      	movs	r3, #248	@ 0xf8
 8004c9c:	039b      	lsls	r3, r3, #14
 8004c9e:	401a      	ands	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d10e      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	23e0      	movs	r3, #224	@ 0xe0
 8004cac:	051b      	lsls	r3, r3, #20
 8004cae:	401a      	ands	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d106      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	0f5b      	lsrs	r3, r3, #29
 8004cbc:	075a      	lsls	r2, r3, #29
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d001      	beq.n	8004cca <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	0018      	movs	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	b008      	add	sp, #32
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40007000 	.word	0x40007000
 8004cdc:	00001388 	.word	0x00001388
 8004ce0:	efffffff 	.word	0xefffffff
 8004ce4:	feffffff 	.word	0xfeffffff
 8004ce8:	11c1808c 	.word	0x11c1808c
 8004cec:	eefefffc 	.word	0xeefefffc

08004cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0e9      	b.n	8004ed8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d04:	4b76      	ldr	r3, [pc, #472]	@ (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2207      	movs	r2, #7
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d91e      	bls.n	8004d50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d12:	4b73      	ldr	r3, [pc, #460]	@ (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2207      	movs	r2, #7
 8004d18:	4393      	bics	r3, r2
 8004d1a:	0019      	movs	r1, r3
 8004d1c:	4b70      	ldr	r3, [pc, #448]	@ (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d24:	f7fe f8ce 	bl	8002ec4 <HAL_GetTick>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004d2c:	e009      	b.n	8004d42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d2e:	f7fe f8c9 	bl	8002ec4 <HAL_GetTick>
 8004d32:	0002      	movs	r2, r0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	4a6a      	ldr	r2, [pc, #424]	@ (8004ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e0ca      	b.n	8004ed8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004d42:	4b67      	ldr	r3, [pc, #412]	@ (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2207      	movs	r2, #7
 8004d48:	4013      	ands	r3, r2
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d1ee      	bne.n	8004d2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2202      	movs	r2, #2
 8004d56:	4013      	ands	r3, r2
 8004d58:	d015      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2204      	movs	r2, #4
 8004d60:	4013      	ands	r3, r2
 8004d62:	d006      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004d64:	4b60      	ldr	r3, [pc, #384]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	4b5f      	ldr	r3, [pc, #380]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8004d6a:	21e0      	movs	r1, #224	@ 0xe0
 8004d6c:	01c9      	lsls	r1, r1, #7
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d72:	4b5d      	ldr	r3, [pc, #372]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	4a5d      	ldr	r2, [pc, #372]	@ (8004eec <HAL_RCC_ClockConfig+0x1fc>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	0019      	movs	r1, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	4b59      	ldr	r3, [pc, #356]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8004d82:	430a      	orrs	r2, r1
 8004d84:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d057      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d107      	bne.n	8004da8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d98:	4b53      	ldr	r3, [pc, #332]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	2380      	movs	r3, #128	@ 0x80
 8004d9e:	029b      	lsls	r3, r3, #10
 8004da0:	4013      	ands	r3, r2
 8004da2:	d12b      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e097      	b.n	8004ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d107      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004db0:	4b4d      	ldr	r3, [pc, #308]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	2380      	movs	r3, #128	@ 0x80
 8004db6:	049b      	lsls	r3, r3, #18
 8004db8:	4013      	ands	r3, r2
 8004dba:	d11f      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e08b      	b.n	8004ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d107      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dc8:	4b47      	ldr	r3, [pc, #284]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	2380      	movs	r3, #128	@ 0x80
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d113      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e07f      	b.n	8004ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d106      	bne.n	8004dee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004de0:	4b41      	ldr	r3, [pc, #260]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8004de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de4:	2202      	movs	r2, #2
 8004de6:	4013      	ands	r3, r2
 8004de8:	d108      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e074      	b.n	8004ed8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dee:	4b3e      	ldr	r3, [pc, #248]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8004df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df2:	2202      	movs	r2, #2
 8004df4:	4013      	ands	r3, r2
 8004df6:	d101      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e06d      	b.n	8004ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2207      	movs	r2, #7
 8004e02:	4393      	bics	r3, r2
 8004e04:	0019      	movs	r1, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	4b37      	ldr	r3, [pc, #220]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e10:	f7fe f858 	bl	8002ec4 <HAL_GetTick>
 8004e14:	0003      	movs	r3, r0
 8004e16:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e18:	e009      	b.n	8004e2e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e1a:	f7fe f853 	bl	8002ec4 <HAL_GetTick>
 8004e1e:	0002      	movs	r2, r0
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	4a2f      	ldr	r2, [pc, #188]	@ (8004ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e054      	b.n	8004ed8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2e:	4b2e      	ldr	r3, [pc, #184]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2238      	movs	r2, #56	@ 0x38
 8004e34:	401a      	ands	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d1ec      	bne.n	8004e1a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e40:	4b27      	ldr	r3, [pc, #156]	@ (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2207      	movs	r2, #7
 8004e46:	4013      	ands	r3, r2
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d21e      	bcs.n	8004e8c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2207      	movs	r2, #7
 8004e54:	4393      	bics	r3, r2
 8004e56:	0019      	movs	r1, r3
 8004e58:	4b21      	ldr	r3, [pc, #132]	@ (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e60:	f7fe f830 	bl	8002ec4 <HAL_GetTick>
 8004e64:	0003      	movs	r3, r0
 8004e66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e68:	e009      	b.n	8004e7e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e6a:	f7fe f82b 	bl	8002ec4 <HAL_GetTick>
 8004e6e:	0002      	movs	r2, r0
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e02c      	b.n	8004ed8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e7e:	4b18      	ldr	r3, [pc, #96]	@ (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2207      	movs	r2, #7
 8004e84:	4013      	ands	r3, r2
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d1ee      	bne.n	8004e6a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2204      	movs	r2, #4
 8004e92:	4013      	ands	r3, r2
 8004e94:	d009      	beq.n	8004eaa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004e96:	4b14      	ldr	r3, [pc, #80]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	4a15      	ldr	r2, [pc, #84]	@ (8004ef0 <HAL_RCC_ClockConfig+0x200>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	0019      	movs	r1, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	4b10      	ldr	r3, [pc, #64]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004eaa:	f000 f829 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8004eae:	0001      	movs	r1, r0
 8004eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	0a1b      	lsrs	r3, r3, #8
 8004eb6:	220f      	movs	r2, #15
 8004eb8:	401a      	ands	r2, r3
 8004eba:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef4 <HAL_RCC_ClockConfig+0x204>)
 8004ebc:	0092      	lsls	r2, r2, #2
 8004ebe:	58d3      	ldr	r3, [r2, r3]
 8004ec0:	221f      	movs	r2, #31
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	000a      	movs	r2, r1
 8004ec6:	40da      	lsrs	r2, r3
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef8 <HAL_RCC_ClockConfig+0x208>)
 8004eca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8004efc <HAL_RCC_ClockConfig+0x20c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f7fd ff9b 	bl	8002e0c <HAL_InitTick>
 8004ed6:	0003      	movs	r3, r0
}
 8004ed8:	0018      	movs	r0, r3
 8004eda:	46bd      	mov	sp, r7
 8004edc:	b004      	add	sp, #16
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40022000 	.word	0x40022000
 8004ee4:	00001388 	.word	0x00001388
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	fffff0ff 	.word	0xfffff0ff
 8004ef0:	ffff8fff 	.word	0xffff8fff
 8004ef4:	08007e2c 	.word	0x08007e2c
 8004ef8:	2000008c 	.word	0x2000008c
 8004efc:	20000090 	.word	0x20000090

08004f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f06:	4b3c      	ldr	r3, [pc, #240]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2238      	movs	r2, #56	@ 0x38
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d10f      	bne.n	8004f30 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004f10:	4b39      	ldr	r3, [pc, #228]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	0adb      	lsrs	r3, r3, #11
 8004f16:	2207      	movs	r2, #7
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	409a      	lsls	r2, r3
 8004f1e:	0013      	movs	r3, r2
 8004f20:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004f22:	6839      	ldr	r1, [r7, #0]
 8004f24:	4835      	ldr	r0, [pc, #212]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004f26:	f7fb f8ed 	bl	8000104 <__udivsi3>
 8004f2a:	0003      	movs	r3, r0
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	e05d      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f30:	4b31      	ldr	r3, [pc, #196]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2238      	movs	r2, #56	@ 0x38
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d102      	bne.n	8004f42 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f3c:	4b2f      	ldr	r3, [pc, #188]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	e054      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f42:	4b2d      	ldr	r3, [pc, #180]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2238      	movs	r2, #56	@ 0x38
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d138      	bne.n	8004fc0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	2203      	movs	r2, #3
 8004f54:	4013      	ands	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f58:	4b27      	ldr	r3, [pc, #156]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	091b      	lsrs	r3, r3, #4
 8004f5e:	2207      	movs	r2, #7
 8004f60:	4013      	ands	r3, r2
 8004f62:	3301      	adds	r3, #1
 8004f64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d10d      	bne.n	8004f88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	4823      	ldr	r0, [pc, #140]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004f70:	f7fb f8c8 	bl	8000104 <__udivsi3>
 8004f74:	0003      	movs	r3, r0
 8004f76:	0019      	movs	r1, r3
 8004f78:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	0a1b      	lsrs	r3, r3, #8
 8004f7e:	227f      	movs	r2, #127	@ 0x7f
 8004f80:	4013      	ands	r3, r2
 8004f82:	434b      	muls	r3, r1
 8004f84:	617b      	str	r3, [r7, #20]
        break;
 8004f86:	e00d      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	481c      	ldr	r0, [pc, #112]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004f8c:	f7fb f8ba 	bl	8000104 <__udivsi3>
 8004f90:	0003      	movs	r3, r0
 8004f92:	0019      	movs	r1, r3
 8004f94:	4b18      	ldr	r3, [pc, #96]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	0a1b      	lsrs	r3, r3, #8
 8004f9a:	227f      	movs	r2, #127	@ 0x7f
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	434b      	muls	r3, r1
 8004fa0:	617b      	str	r3, [r7, #20]
        break;
 8004fa2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004fa4:	4b14      	ldr	r3, [pc, #80]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	0f5b      	lsrs	r3, r3, #29
 8004faa:	2207      	movs	r2, #7
 8004fac:	4013      	ands	r3, r2
 8004fae:	3301      	adds	r3, #1
 8004fb0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	6978      	ldr	r0, [r7, #20]
 8004fb6:	f7fb f8a5 	bl	8000104 <__udivsi3>
 8004fba:	0003      	movs	r3, r0
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	e015      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	2238      	movs	r2, #56	@ 0x38
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d103      	bne.n	8004fd4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004fcc:	2380      	movs	r3, #128	@ 0x80
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	e00b      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004fd4:	4b08      	ldr	r3, [pc, #32]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2238      	movs	r2, #56	@ 0x38
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b18      	cmp	r3, #24
 8004fde:	d103      	bne.n	8004fe8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004fe0:	23fa      	movs	r3, #250	@ 0xfa
 8004fe2:	01db      	lsls	r3, r3, #7
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	e001      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004fec:	693b      	ldr	r3, [r7, #16]
}
 8004fee:	0018      	movs	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	b006      	add	sp, #24
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	46c0      	nop			@ (mov r8, r8)
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	00f42400 	.word	0x00f42400

08005000 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005004:	4b02      	ldr	r3, [pc, #8]	@ (8005010 <HAL_RCC_GetHCLKFreq+0x10>)
 8005006:	681b      	ldr	r3, [r3, #0]
}
 8005008:	0018      	movs	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	46c0      	nop			@ (mov r8, r8)
 8005010:	2000008c 	.word	0x2000008c

08005014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005014:	b5b0      	push	{r4, r5, r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005018:	f7ff fff2 	bl	8005000 <HAL_RCC_GetHCLKFreq>
 800501c:	0004      	movs	r4, r0
 800501e:	f7ff fb41 	bl	80046a4 <LL_RCC_GetAPB1Prescaler>
 8005022:	0003      	movs	r3, r0
 8005024:	0b1a      	lsrs	r2, r3, #12
 8005026:	4b05      	ldr	r3, [pc, #20]	@ (800503c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005028:	0092      	lsls	r2, r2, #2
 800502a:	58d3      	ldr	r3, [r2, r3]
 800502c:	221f      	movs	r2, #31
 800502e:	4013      	ands	r3, r2
 8005030:	40dc      	lsrs	r4, r3
 8005032:	0023      	movs	r3, r4
}
 8005034:	0018      	movs	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	bdb0      	pop	{r4, r5, r7, pc}
 800503a:	46c0      	nop			@ (mov r8, r8)
 800503c:	08007e6c 	.word	0x08007e6c

08005040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005048:	2313      	movs	r3, #19
 800504a:	18fb      	adds	r3, r7, r3
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005050:	2312      	movs	r3, #18
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	2200      	movs	r2, #0
 8005056:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	2380      	movs	r3, #128	@ 0x80
 800505e:	029b      	lsls	r3, r3, #10
 8005060:	4013      	ands	r3, r2
 8005062:	d100      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005064:	e0a3      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005066:	2011      	movs	r0, #17
 8005068:	183b      	adds	r3, r7, r0
 800506a:	2200      	movs	r2, #0
 800506c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800506e:	4ba5      	ldr	r3, [pc, #660]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005070:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005072:	2380      	movs	r3, #128	@ 0x80
 8005074:	055b      	lsls	r3, r3, #21
 8005076:	4013      	ands	r3, r2
 8005078:	d110      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800507a:	4ba2      	ldr	r3, [pc, #648]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800507c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800507e:	4ba1      	ldr	r3, [pc, #644]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005080:	2180      	movs	r1, #128	@ 0x80
 8005082:	0549      	lsls	r1, r1, #21
 8005084:	430a      	orrs	r2, r1
 8005086:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005088:	4b9e      	ldr	r3, [pc, #632]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800508a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800508c:	2380      	movs	r3, #128	@ 0x80
 800508e:	055b      	lsls	r3, r3, #21
 8005090:	4013      	ands	r3, r2
 8005092:	60bb      	str	r3, [r7, #8]
 8005094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005096:	183b      	adds	r3, r7, r0
 8005098:	2201      	movs	r2, #1
 800509a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800509c:	4b9a      	ldr	r3, [pc, #616]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b99      	ldr	r3, [pc, #612]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80050a2:	2180      	movs	r1, #128	@ 0x80
 80050a4:	0049      	lsls	r1, r1, #1
 80050a6:	430a      	orrs	r2, r1
 80050a8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050aa:	f7fd ff0b 	bl	8002ec4 <HAL_GetTick>
 80050ae:	0003      	movs	r3, r0
 80050b0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050b2:	e00b      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b4:	f7fd ff06 	bl	8002ec4 <HAL_GetTick>
 80050b8:	0002      	movs	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d904      	bls.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80050c2:	2313      	movs	r3, #19
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	2203      	movs	r2, #3
 80050c8:	701a      	strb	r2, [r3, #0]
        break;
 80050ca:	e005      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050cc:	4b8e      	ldr	r3, [pc, #568]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	2380      	movs	r3, #128	@ 0x80
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	4013      	ands	r3, r2
 80050d6:	d0ed      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80050d8:	2313      	movs	r3, #19
 80050da:	18fb      	adds	r3, r7, r3
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d154      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050e2:	4b88      	ldr	r3, [pc, #544]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80050e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80050e6:	23c0      	movs	r3, #192	@ 0xc0
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4013      	ands	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d019      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d014      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050fe:	4b81      	ldr	r3, [pc, #516]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005102:	4a82      	ldr	r2, [pc, #520]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005104:	4013      	ands	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005108:	4b7e      	ldr	r3, [pc, #504]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800510a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800510c:	4b7d      	ldr	r3, [pc, #500]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800510e:	2180      	movs	r1, #128	@ 0x80
 8005110:	0249      	lsls	r1, r1, #9
 8005112:	430a      	orrs	r2, r1
 8005114:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005116:	4b7b      	ldr	r3, [pc, #492]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005118:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800511a:	4b7a      	ldr	r3, [pc, #488]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800511c:	497c      	ldr	r1, [pc, #496]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800511e:	400a      	ands	r2, r1
 8005120:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005122:	4b78      	ldr	r3, [pc, #480]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2201      	movs	r2, #1
 800512c:	4013      	ands	r3, r2
 800512e:	d016      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005130:	f7fd fec8 	bl	8002ec4 <HAL_GetTick>
 8005134:	0003      	movs	r3, r0
 8005136:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005138:	e00c      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513a:	f7fd fec3 	bl	8002ec4 <HAL_GetTick>
 800513e:	0002      	movs	r2, r0
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	4a73      	ldr	r2, [pc, #460]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d904      	bls.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800514a:	2313      	movs	r3, #19
 800514c:	18fb      	adds	r3, r7, r3
 800514e:	2203      	movs	r2, #3
 8005150:	701a      	strb	r2, [r3, #0]
            break;
 8005152:	e004      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005154:	4b6b      	ldr	r3, [pc, #428]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005158:	2202      	movs	r2, #2
 800515a:	4013      	ands	r3, r2
 800515c:	d0ed      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800515e:	2313      	movs	r3, #19
 8005160:	18fb      	adds	r3, r7, r3
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10a      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005168:	4b66      	ldr	r3, [pc, #408]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800516a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800516c:	4a67      	ldr	r2, [pc, #412]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800516e:	4013      	ands	r3, r2
 8005170:	0019      	movs	r1, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005176:	4b63      	ldr	r3, [pc, #396]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005178:	430a      	orrs	r2, r1
 800517a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800517c:	e00c      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800517e:	2312      	movs	r3, #18
 8005180:	18fb      	adds	r3, r7, r3
 8005182:	2213      	movs	r2, #19
 8005184:	18ba      	adds	r2, r7, r2
 8005186:	7812      	ldrb	r2, [r2, #0]
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	e005      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	2312      	movs	r3, #18
 800518e:	18fb      	adds	r3, r7, r3
 8005190:	2213      	movs	r2, #19
 8005192:	18ba      	adds	r2, r7, r2
 8005194:	7812      	ldrb	r2, [r2, #0]
 8005196:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005198:	2311      	movs	r3, #17
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d105      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a2:	4b58      	ldr	r3, [pc, #352]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051a6:	4b57      	ldr	r3, [pc, #348]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051a8:	495b      	ldr	r1, [pc, #364]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80051aa:	400a      	ands	r2, r1
 80051ac:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2201      	movs	r2, #1
 80051b4:	4013      	ands	r3, r2
 80051b6:	d009      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051b8:	4b52      	ldr	r3, [pc, #328]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051bc:	2203      	movs	r2, #3
 80051be:	4393      	bics	r3, r2
 80051c0:	0019      	movs	r1, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	4b4f      	ldr	r3, [pc, #316]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051c8:	430a      	orrs	r2, r1
 80051ca:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2210      	movs	r2, #16
 80051d2:	4013      	ands	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051da:	4a50      	ldr	r2, [pc, #320]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80051dc:	4013      	ands	r3, r2
 80051de:	0019      	movs	r1, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	4b47      	ldr	r3, [pc, #284]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051e6:	430a      	orrs	r2, r1
 80051e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	2380      	movs	r3, #128	@ 0x80
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4013      	ands	r3, r2
 80051f4:	d009      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051f6:	4b43      	ldr	r3, [pc, #268]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fa:	4a49      	ldr	r2, [pc, #292]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	0019      	movs	r1, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695a      	ldr	r2, [r3, #20]
 8005204:	4b3f      	ldr	r3, [pc, #252]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005206:	430a      	orrs	r2, r1
 8005208:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	2380      	movs	r3, #128	@ 0x80
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4013      	ands	r3, r2
 8005214:	d009      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005216:	4b3b      	ldr	r3, [pc, #236]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521a:	4a42      	ldr	r2, [pc, #264]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800521c:	4013      	ands	r3, r2
 800521e:	0019      	movs	r1, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699a      	ldr	r2, [r3, #24]
 8005224:	4b37      	ldr	r3, [pc, #220]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005226:	430a      	orrs	r2, r1
 8005228:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2220      	movs	r2, #32
 8005230:	4013      	ands	r3, r2
 8005232:	d009      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005234:	4b33      	ldr	r3, [pc, #204]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005238:	4a3b      	ldr	r2, [pc, #236]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800523a:	4013      	ands	r3, r2
 800523c:	0019      	movs	r1, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	4b30      	ldr	r3, [pc, #192]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005244:	430a      	orrs	r2, r1
 8005246:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	2380      	movs	r3, #128	@ 0x80
 800524e:	01db      	lsls	r3, r3, #7
 8005250:	4013      	ands	r3, r2
 8005252:	d015      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005254:	4b2b      	ldr	r3, [pc, #172]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	0899      	lsrs	r1, r3, #2
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	4b28      	ldr	r3, [pc, #160]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005262:	430a      	orrs	r2, r1
 8005264:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69da      	ldr	r2, [r3, #28]
 800526a:	2380      	movs	r3, #128	@ 0x80
 800526c:	05db      	lsls	r3, r3, #23
 800526e:	429a      	cmp	r2, r3
 8005270:	d106      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005272:	4b24      	ldr	r3, [pc, #144]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	4b23      	ldr	r3, [pc, #140]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005278:	2180      	movs	r1, #128	@ 0x80
 800527a:	0249      	lsls	r1, r1, #9
 800527c:	430a      	orrs	r2, r1
 800527e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	2380      	movs	r3, #128	@ 0x80
 8005286:	039b      	lsls	r3, r3, #14
 8005288:	4013      	ands	r3, r2
 800528a:	d016      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800528c:	4b1d      	ldr	r3, [pc, #116]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800528e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005290:	4a26      	ldr	r2, [pc, #152]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005292:	4013      	ands	r3, r2
 8005294:	0019      	movs	r1, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1a      	ldr	r2, [r3, #32]
 800529a:	4b1a      	ldr	r3, [pc, #104]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800529c:	430a      	orrs	r2, r1
 800529e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1a      	ldr	r2, [r3, #32]
 80052a4:	2380      	movs	r3, #128	@ 0x80
 80052a6:	03db      	lsls	r3, r3, #15
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d106      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80052ac:	4b15      	ldr	r3, [pc, #84]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	4b14      	ldr	r3, [pc, #80]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052b2:	2180      	movs	r1, #128	@ 0x80
 80052b4:	0449      	lsls	r1, r1, #17
 80052b6:	430a      	orrs	r2, r1
 80052b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	2380      	movs	r3, #128	@ 0x80
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	4013      	ands	r3, r2
 80052c4:	d016      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80052c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ca:	4a19      	ldr	r2, [pc, #100]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	0019      	movs	r1, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052d6:	430a      	orrs	r2, r1
 80052d8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	2380      	movs	r3, #128	@ 0x80
 80052e0:	01db      	lsls	r3, r3, #7
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d106      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80052e6:	4b07      	ldr	r3, [pc, #28]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	4b06      	ldr	r3, [pc, #24]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052ec:	2180      	movs	r1, #128	@ 0x80
 80052ee:	0249      	lsls	r1, r1, #9
 80052f0:	430a      	orrs	r2, r1
 80052f2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80052f4:	2312      	movs	r3, #18
 80052f6:	18fb      	adds	r3, r7, r3
 80052f8:	781b      	ldrb	r3, [r3, #0]
}
 80052fa:	0018      	movs	r0, r3
 80052fc:	46bd      	mov	sp, r7
 80052fe:	b006      	add	sp, #24
 8005300:	bd80      	pop	{r7, pc}
 8005302:	46c0      	nop			@ (mov r8, r8)
 8005304:	40021000 	.word	0x40021000
 8005308:	40007000 	.word	0x40007000
 800530c:	fffffcff 	.word	0xfffffcff
 8005310:	fffeffff 	.word	0xfffeffff
 8005314:	00001388 	.word	0x00001388
 8005318:	efffffff 	.word	0xefffffff
 800531c:	fffff3ff 	.word	0xfffff3ff
 8005320:	fff3ffff 	.word	0xfff3ffff
 8005324:	ffcfffff 	.word	0xffcfffff
 8005328:	ffffcfff 	.word	0xffffcfff
 800532c:	ffbfffff 	.word	0xffbfffff
 8005330:	ffff3fff 	.word	0xffff3fff

08005334 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	2380      	movs	r3, #128	@ 0x80
 8005344:	029b      	lsls	r3, r3, #10
 8005346:	429a      	cmp	r2, r3
 8005348:	d136      	bne.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800534a:	4bcd      	ldr	r3, [pc, #820]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800534c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800534e:	23c0      	movs	r3, #192	@ 0xc0
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4013      	ands	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005356:	4bca      	ldr	r3, [pc, #808]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800535a:	2202      	movs	r2, #2
 800535c:	4013      	ands	r3, r2
 800535e:	2b02      	cmp	r3, #2
 8005360:	d108      	bne.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	2380      	movs	r3, #128	@ 0x80
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	429a      	cmp	r2, r3
 800536a:	d103      	bne.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 800536c:	2380      	movs	r3, #128	@ 0x80
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	e26b      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005374:	4bc2      	ldr	r3, [pc, #776]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005378:	2202      	movs	r2, #2
 800537a:	4013      	ands	r3, r2
 800537c:	2b02      	cmp	r3, #2
 800537e:	d108      	bne.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	2380      	movs	r3, #128	@ 0x80
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	429a      	cmp	r2, r3
 8005388:	d103      	bne.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 800538a:	23fa      	movs	r3, #250	@ 0xfa
 800538c:	01db      	lsls	r3, r3, #7
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	e25c      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005392:	4bbb      	ldr	r3, [pc, #748]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	2380      	movs	r3, #128	@ 0x80
 8005398:	029b      	lsls	r3, r3, #10
 800539a:	401a      	ands	r2, r3
 800539c:	2380      	movs	r3, #128	@ 0x80
 800539e:	029b      	lsls	r3, r3, #10
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d000      	beq.n	80053a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80053a4:	e252      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	23c0      	movs	r3, #192	@ 0xc0
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d000      	beq.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 80053b0:	e24c      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
    {
      frequency = HSE_VALUE / 32U;
 80053b2:	4bb4      	ldr	r3, [pc, #720]	@ (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	e249      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 80053b8:	4bb1      	ldr	r3, [pc, #708]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	2203      	movs	r2, #3
 80053be:	4013      	ands	r3, r2
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d102      	bne.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 80053c4:	4bb0      	ldr	r3, [pc, #704]	@ (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	e00a      	b.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 80053ca:	4bad      	ldr	r3, [pc, #692]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	2203      	movs	r2, #3
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d102      	bne.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 80053d6:	4bac      	ldr	r3, [pc, #688]	@ (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	e001      	b.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80053e0:	4ba7      	ldr	r3, [pc, #668]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	091b      	lsrs	r3, r3, #4
 80053e6:	2207      	movs	r2, #7
 80053e8:	4013      	ands	r3, r2
 80053ea:	3301      	adds	r3, #1
 80053ec:	0019      	movs	r1, r3
 80053ee:	6938      	ldr	r0, [r7, #16]
 80053f0:	f7fa fe88 	bl	8000104 <__udivsi3>
 80053f4:	0003      	movs	r3, r0
 80053f6:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	2380      	movs	r3, #128	@ 0x80
 80053fc:	039b      	lsls	r3, r3, #14
 80053fe:	429a      	cmp	r2, r3
 8005400:	d100      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8005402:	e1e3      	b.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	2380      	movs	r3, #128	@ 0x80
 8005408:	039b      	lsls	r3, r3, #14
 800540a:	429a      	cmp	r2, r3
 800540c:	d900      	bls.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800540e:	e20c      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	2380      	movs	r3, #128	@ 0x80
 8005414:	01db      	lsls	r3, r3, #7
 8005416:	429a      	cmp	r2, r3
 8005418:	d100      	bne.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800541a:	e0a5      	b.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	2380      	movs	r3, #128	@ 0x80
 8005420:	01db      	lsls	r3, r3, #7
 8005422:	429a      	cmp	r2, r3
 8005424:	d900      	bls.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005426:	e200      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	2380      	movs	r3, #128	@ 0x80
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	429a      	cmp	r2, r3
 8005430:	d100      	bne.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005432:	e0fc      	b.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	2380      	movs	r3, #128	@ 0x80
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	429a      	cmp	r2, r3
 800543c:	d900      	bls.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800543e:	e1f4      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	2380      	movs	r3, #128	@ 0x80
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	429a      	cmp	r2, r3
 8005448:	d100      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 800544a:	e181      	b.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	2380      	movs	r3, #128	@ 0x80
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	429a      	cmp	r2, r3
 8005454:	d900      	bls.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005456:	e1e8      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	2380      	movs	r3, #128	@ 0x80
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	429a      	cmp	r2, r3
 8005460:	d100      	bne.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8005462:	e135      	b.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	2380      	movs	r3, #128	@ 0x80
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	429a      	cmp	r2, r3
 800546c:	d900      	bls.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800546e:	e1dc      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b20      	cmp	r3, #32
 8005474:	d100      	bne.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8005476:	e0af      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b20      	cmp	r3, #32
 800547c:	d900      	bls.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800547e:	e1d4      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d003      	beq.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b10      	cmp	r3, #16
 800548a:	d033      	beq.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 800548c:	e1cd      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800548e:	4b7c      	ldr	r3, [pc, #496]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005492:	2203      	movs	r2, #3
 8005494:	4013      	ands	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d104      	bne.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
          frequency = HAL_RCC_GetPCLK1Freq();
 800549e:	f7ff fdb9 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 80054a2:	0003      	movs	r3, r0
 80054a4:	617b      	str	r3, [r7, #20]
        break;
 80054a6:	e1c2      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d104      	bne.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
          frequency = HAL_RCC_GetSysClockFreq();
 80054ae:	f7ff fd27 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 80054b2:	0003      	movs	r3, r0
 80054b4:	617b      	str	r3, [r7, #20]
        break;
 80054b6:	e1ba      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80054b8:	4b71      	ldr	r3, [pc, #452]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	2380      	movs	r3, #128	@ 0x80
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	401a      	ands	r2, r3
 80054c2:	2380      	movs	r3, #128	@ 0x80
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d105      	bne.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d102      	bne.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
          frequency = HSI_VALUE;
 80054d0:	4b6d      	ldr	r3, [pc, #436]	@ (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80054d2:	617b      	str	r3, [r7, #20]
        break;
 80054d4:	e1ab      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80054d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80054d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054da:	2202      	movs	r2, #2
 80054dc:	4013      	ands	r3, r2
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d000      	beq.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 80054e2:	e1a4      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d000      	beq.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80054ea:	e1a0      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
          frequency = LSE_VALUE;
 80054ec:	2380      	movs	r3, #128	@ 0x80
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	617b      	str	r3, [r7, #20]
        break;
 80054f2:	e19c      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80054f4:	4b62      	ldr	r3, [pc, #392]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80054f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054f8:	23c0      	movs	r3, #192	@ 0xc0
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	4013      	ands	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d104      	bne.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005506:	f7ff fd85 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 800550a:	0003      	movs	r3, r0
 800550c:	617b      	str	r3, [r7, #20]
        break;
 800550e:	e190      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	2380      	movs	r3, #128	@ 0x80
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	429a      	cmp	r2, r3
 8005518:	d104      	bne.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800551a:	f7ff fcf1 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 800551e:	0003      	movs	r3, r0
 8005520:	617b      	str	r3, [r7, #20]
        break;
 8005522:	e186      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005524:	4b56      	ldr	r3, [pc, #344]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	2380      	movs	r3, #128	@ 0x80
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	401a      	ands	r2, r3
 800552e:	2380      	movs	r3, #128	@ 0x80
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	429a      	cmp	r2, r3
 8005534:	d107      	bne.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	2380      	movs	r3, #128	@ 0x80
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	429a      	cmp	r2, r3
 800553e:	d102      	bne.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = HSI_VALUE;
 8005540:	4b51      	ldr	r3, [pc, #324]	@ (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005542:	617b      	str	r3, [r7, #20]
        break;
 8005544:	e175      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005546:	4b4e      	ldr	r3, [pc, #312]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800554a:	2202      	movs	r2, #2
 800554c:	4013      	ands	r3, r2
 800554e:	2b02      	cmp	r3, #2
 8005550:	d000      	beq.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 8005552:	e16e      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	23c0      	movs	r3, #192	@ 0xc0
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	429a      	cmp	r2, r3
 800555c:	d000      	beq.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800555e:	e168      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
          frequency = LSE_VALUE;
 8005560:	2380      	movs	r3, #128	@ 0x80
 8005562:	021b      	lsls	r3, r3, #8
 8005564:	617b      	str	r3, [r7, #20]
        break;
 8005566:	e164      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005568:	4b45      	ldr	r3, [pc, #276]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800556a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556c:	0f9b      	lsrs	r3, r3, #30
 800556e:	079b      	lsls	r3, r3, #30
 8005570:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005578:	f7ff fcc2 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 800557c:	0003      	movs	r3, r0
 800557e:	617b      	str	r3, [r7, #20]
        break;
 8005580:	e159      	b.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	2380      	movs	r3, #128	@ 0x80
 8005586:	061b      	lsls	r3, r3, #24
 8005588:	429a      	cmp	r2, r3
 800558a:	d102      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          frequency = HSI_VALUE;
 800558c:	4b3e      	ldr	r3, [pc, #248]	@ (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800558e:	617b      	str	r3, [r7, #20]
        break;
 8005590:	e151      	b.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	2380      	movs	r3, #128	@ 0x80
 8005596:	05db      	lsls	r3, r3, #23
 8005598:	429a      	cmp	r2, r3
 800559a:	d000      	beq.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800559c:	e14b      	b.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800559e:	4b38      	ldr	r3, [pc, #224]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	2380      	movs	r3, #128	@ 0x80
 80055a4:	025b      	lsls	r3, r3, #9
 80055a6:	4013      	ands	r3, r2
 80055a8:	d100      	bne.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 80055aa:	e144      	b.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80055ac:	4b34      	ldr	r3, [pc, #208]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	0a1b      	lsrs	r3, r3, #8
 80055b2:	227f      	movs	r2, #127	@ 0x7f
 80055b4:	4013      	ands	r3, r2
 80055b6:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	435a      	muls	r2, r3
 80055be:	4b30      	ldr	r3, [pc, #192]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	0c5b      	lsrs	r3, r3, #17
 80055c4:	211f      	movs	r1, #31
 80055c6:	400b      	ands	r3, r1
 80055c8:	3301      	adds	r3, #1
 80055ca:	0019      	movs	r1, r3
 80055cc:	0010      	movs	r0, r2
 80055ce:	f7fa fd99 	bl	8000104 <__udivsi3>
 80055d2:	0003      	movs	r3, r0
 80055d4:	617b      	str	r3, [r7, #20]
        break;
 80055d6:	e12e      	b.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80055d8:	4b29      	ldr	r3, [pc, #164]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80055da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055dc:	23c0      	movs	r3, #192	@ 0xc0
 80055de:	019b      	lsls	r3, r3, #6
 80055e0:	4013      	ands	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d104      	bne.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 80055ea:	f7ff fd13 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 80055ee:	0003      	movs	r3, r0
 80055f0:	617b      	str	r3, [r7, #20]
        break;
 80055f2:	e122      	b.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	2380      	movs	r3, #128	@ 0x80
 80055f8:	015b      	lsls	r3, r3, #5
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d104      	bne.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
          frequency = HAL_RCC_GetSysClockFreq();
 80055fe:	f7ff fc7f 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8005602:	0003      	movs	r3, r0
 8005604:	617b      	str	r3, [r7, #20]
        break;
 8005606:	e118      	b.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005608:	4b1d      	ldr	r3, [pc, #116]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	2380      	movs	r3, #128	@ 0x80
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	401a      	ands	r2, r3
 8005612:	2380      	movs	r3, #128	@ 0x80
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	429a      	cmp	r2, r3
 8005618:	d000      	beq.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800561a:	e10e      	b.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	2380      	movs	r3, #128	@ 0x80
 8005620:	019b      	lsls	r3, r3, #6
 8005622:	429a      	cmp	r2, r3
 8005624:	d000      	beq.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8005626:	e108      	b.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          frequency = HSI_VALUE;
 8005628:	4b17      	ldr	r3, [pc, #92]	@ (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800562a:	617b      	str	r3, [r7, #20]
        break;
 800562c:	e105      	b.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 800562e:	4b14      	ldr	r3, [pc, #80]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005630:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005632:	23c0      	movs	r3, #192	@ 0xc0
 8005634:	021b      	lsls	r3, r3, #8
 8005636:	4013      	ands	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	2380      	movs	r3, #128	@ 0x80
 800563e:	01db      	lsls	r3, r3, #7
 8005640:	429a      	cmp	r2, r3
 8005642:	d123      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005644:	4b0e      	ldr	r3, [pc, #56]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	2380      	movs	r3, #128	@ 0x80
 800564a:	025b      	lsls	r3, r3, #9
 800564c:	4013      	ands	r3, r2
 800564e:	d100      	bne.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005650:	e0f5      	b.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005652:	4b0b      	ldr	r3, [pc, #44]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	0a1b      	lsrs	r3, r3, #8
 8005658:	227f      	movs	r2, #127	@ 0x7f
 800565a:	4013      	ands	r3, r2
 800565c:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	435a      	muls	r2, r3
 8005664:	4b06      	ldr	r3, [pc, #24]	@ (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	0c5b      	lsrs	r3, r3, #17
 800566a:	211f      	movs	r1, #31
 800566c:	400b      	ands	r3, r1
 800566e:	3301      	adds	r3, #1
 8005670:	0019      	movs	r1, r3
 8005672:	0010      	movs	r0, r2
 8005674:	f7fa fd46 	bl	8000104 <__udivsi3>
 8005678:	0003      	movs	r3, r0
 800567a:	617b      	str	r3, [r7, #20]
        break;
 800567c:	e0df      	b.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800567e:	46c0      	nop			@ (mov r8, r8)
 8005680:	40021000 	.word	0x40021000
 8005684:	0007a120 	.word	0x0007a120
 8005688:	00f42400 	.word	0x00f42400
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d104      	bne.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
          frequency = HAL_RCC_GetSysClockFreq();
 8005692:	f7ff fc35 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8005696:	0003      	movs	r3, r0
 8005698:	617b      	str	r3, [r7, #20]
        break;
 800569a:	e0d0      	b.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 800569c:	4b6e      	ldr	r3, [pc, #440]	@ (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	2380      	movs	r3, #128	@ 0x80
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	401a      	ands	r2, r3
 80056a6:	2380      	movs	r3, #128	@ 0x80
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d107      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	2380      	movs	r3, #128	@ 0x80
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d102      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
          frequency = HSI_VALUE;
 80056b8:	4b68      	ldr	r3, [pc, #416]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80056ba:	617b      	str	r3, [r7, #20]
        break;
 80056bc:	e0bf      	b.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	23c0      	movs	r3, #192	@ 0xc0
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d000      	beq.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80056c8:	e0b9      	b.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 80056ca:	4b65      	ldr	r3, [pc, #404]	@ (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80056cc:	617b      	str	r3, [r7, #20]
        break;
 80056ce:	e0b6      	b.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80056d0:	4b61      	ldr	r3, [pc, #388]	@ (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80056d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056d4:	23c0      	movs	r3, #192	@ 0xc0
 80056d6:	031b      	lsls	r3, r3, #12
 80056d8:	4013      	ands	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d104      	bne.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80056e2:	f7ff fc97 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 80056e6:	0003      	movs	r3, r0
 80056e8:	617b      	str	r3, [r7, #20]
        break;
 80056ea:	e0aa      	b.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80056ec:	4b5a      	ldr	r3, [pc, #360]	@ (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80056ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056f0:	2202      	movs	r2, #2
 80056f2:	4013      	ands	r3, r2
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d108      	bne.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	2380      	movs	r3, #128	@ 0x80
 80056fc:	02db      	lsls	r3, r3, #11
 80056fe:	429a      	cmp	r2, r3
 8005700:	d103      	bne.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = LSI_VALUE;
 8005702:	23fa      	movs	r3, #250	@ 0xfa
 8005704:	01db      	lsls	r3, r3, #7
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	e021      	b.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800570a:	4b53      	ldr	r3, [pc, #332]	@ (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	2380      	movs	r3, #128	@ 0x80
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	401a      	ands	r2, r3
 8005714:	2380      	movs	r3, #128	@ 0x80
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	429a      	cmp	r2, r3
 800571a:	d107      	bne.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	2380      	movs	r3, #128	@ 0x80
 8005720:	031b      	lsls	r3, r3, #12
 8005722:	429a      	cmp	r2, r3
 8005724:	d102      	bne.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          frequency = HSI_VALUE;
 8005726:	4b4d      	ldr	r3, [pc, #308]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	e010      	b.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800572c:	4b4a      	ldr	r3, [pc, #296]	@ (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800572e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005730:	2202      	movs	r2, #2
 8005732:	4013      	ands	r3, r2
 8005734:	2b02      	cmp	r3, #2
 8005736:	d000      	beq.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
 8005738:	e083      	b.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	23c0      	movs	r3, #192	@ 0xc0
 800573e:	031b      	lsls	r3, r3, #12
 8005740:	429a      	cmp	r2, r3
 8005742:	d000      	beq.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8005744:	e07d      	b.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
          frequency = LSE_VALUE;
 8005746:	2380      	movs	r3, #128	@ 0x80
 8005748:	021b      	lsls	r3, r3, #8
 800574a:	617b      	str	r3, [r7, #20]
        break;
 800574c:	e079      	b.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800574e:	e078      	b.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005750:	4b41      	ldr	r3, [pc, #260]	@ (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005752:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005754:	23c0      	movs	r3, #192	@ 0xc0
 8005756:	039b      	lsls	r3, r3, #14
 8005758:	4013      	ands	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d104      	bne.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005762:	f7ff fc57 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 8005766:	0003      	movs	r3, r0
 8005768:	617b      	str	r3, [r7, #20]
        break;
 800576a:	e06c      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800576c:	4b3a      	ldr	r3, [pc, #232]	@ (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800576e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005770:	2202      	movs	r2, #2
 8005772:	4013      	ands	r3, r2
 8005774:	2b02      	cmp	r3, #2
 8005776:	d108      	bne.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	2380      	movs	r3, #128	@ 0x80
 800577c:	035b      	lsls	r3, r3, #13
 800577e:	429a      	cmp	r2, r3
 8005780:	d103      	bne.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          frequency = LSI_VALUE;
 8005782:	23fa      	movs	r3, #250	@ 0xfa
 8005784:	01db      	lsls	r3, r3, #7
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	e01f      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800578a:	4b33      	ldr	r3, [pc, #204]	@ (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	2380      	movs	r3, #128	@ 0x80
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	401a      	ands	r2, r3
 8005794:	2380      	movs	r3, #128	@ 0x80
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	429a      	cmp	r2, r3
 800579a:	d107      	bne.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	2380      	movs	r3, #128	@ 0x80
 80057a0:	039b      	lsls	r3, r3, #14
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d102      	bne.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HSI_VALUE;
 80057a6:	4b2d      	ldr	r3, [pc, #180]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	e00e      	b.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80057ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80057ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b0:	2202      	movs	r2, #2
 80057b2:	4013      	ands	r3, r2
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d146      	bne.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	23c0      	movs	r3, #192	@ 0xc0
 80057bc:	039b      	lsls	r3, r3, #14
 80057be:	429a      	cmp	r2, r3
 80057c0:	d141      	bne.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          frequency = LSE_VALUE;
 80057c2:	2380      	movs	r3, #128	@ 0x80
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	617b      	str	r3, [r7, #20]
        break;
 80057c8:	e03d      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
 80057ca:	e03c      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80057cc:	4b22      	ldr	r3, [pc, #136]	@ (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80057ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057d0:	2380      	movs	r3, #128	@ 0x80
 80057d2:	03db      	lsls	r3, r3, #15
 80057d4:	4013      	ands	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	2380      	movs	r3, #128	@ 0x80
 80057dc:	03db      	lsls	r3, r3, #15
 80057de:	429a      	cmp	r2, r3
 80057e0:	d11b      	bne.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80057e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	2380      	movs	r3, #128	@ 0x80
 80057e8:	045b      	lsls	r3, r3, #17
 80057ea:	4013      	ands	r3, r2
 80057ec:	d02d      	beq.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80057ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	0a1b      	lsrs	r3, r3, #8
 80057f4:	227f      	movs	r2, #127	@ 0x7f
 80057f6:	4013      	ands	r3, r2
 80057f8:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	435a      	muls	r2, r3
 8005800:	4b15      	ldr	r3, [pc, #84]	@ (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	0e5b      	lsrs	r3, r3, #25
 8005806:	2107      	movs	r1, #7
 8005808:	400b      	ands	r3, r1
 800580a:	3301      	adds	r3, #1
 800580c:	0019      	movs	r1, r3
 800580e:	0010      	movs	r0, r2
 8005810:	f7fa fc78 	bl	8000104 <__udivsi3>
 8005814:	0003      	movs	r3, r0
 8005816:	617b      	str	r3, [r7, #20]
        break;
 8005818:	e017      	b.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d114      	bne.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005820:	f7ff fbf8 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 8005824:	0003      	movs	r3, r0
 8005826:	617b      	str	r3, [r7, #20]
        break;
 8005828:	e00f      	b.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        break;
 800582a:	46c0      	nop			@ (mov r8, r8)
 800582c:	e00e      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800582e:	46c0      	nop			@ (mov r8, r8)
 8005830:	e00c      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8005832:	46c0      	nop			@ (mov r8, r8)
 8005834:	e00a      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8005836:	46c0      	nop			@ (mov r8, r8)
 8005838:	e008      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800583a:	46c0      	nop			@ (mov r8, r8)
 800583c:	e006      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800583e:	46c0      	nop			@ (mov r8, r8)
 8005840:	e004      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8005842:	46c0      	nop			@ (mov r8, r8)
 8005844:	e002      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 8005846:	46c0      	nop			@ (mov r8, r8)
 8005848:	e000      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
        break;
 800584a:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return (frequency);
 800584c:	697b      	ldr	r3, [r7, #20]
}
 800584e:	0018      	movs	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	b006      	add	sp, #24
 8005854:	bd80      	pop	{r7, pc}
 8005856:	46c0      	nop			@ (mov r8, r8)
 8005858:	40021000 	.word	0x40021000
 800585c:	00f42400 	.word	0x00f42400
 8005860:	00bb8000 	.word	0x00bb8000

08005864 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 8005864:	b590      	push	{r4, r7, lr}
 8005866:	b08b      	sub	sp, #44	@ 0x2c
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 800586c:	2427      	movs	r4, #39	@ 0x27
 800586e:	193b      	adds	r3, r7, r4
 8005870:	2200      	movs	r2, #0
 8005872:	701a      	strb	r2, [r3, #0]
  FlagStatus       backupchanged = RESET;
 8005874:	2326      	movs	r3, #38	@ 0x26
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  LSCO_CLK_ENABLE();
 800587c:	4b31      	ldr	r3, [pc, #196]	@ (8005944 <HAL_RCCEx_EnableLSCO+0xe0>)
 800587e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005880:	4b30      	ldr	r3, [pc, #192]	@ (8005944 <HAL_RCCEx_EnableLSCO+0xe0>)
 8005882:	2101      	movs	r1, #1
 8005884:	430a      	orrs	r2, r1
 8005886:	635a      	str	r2, [r3, #52]	@ 0x34
 8005888:	4b2e      	ldr	r3, [pc, #184]	@ (8005944 <HAL_RCCEx_EnableLSCO+0xe0>)
 800588a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800588c:	2201      	movs	r2, #1
 800588e:	4013      	ands	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	68fb      	ldr	r3, [r7, #12]

  /* Configure the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8005894:	2110      	movs	r1, #16
 8005896:	187b      	adds	r3, r7, r1
 8005898:	2204      	movs	r2, #4
 800589a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800589c:	187b      	adds	r3, r7, r1
 800589e:	2203      	movs	r2, #3
 80058a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058a2:	187b      	adds	r3, r7, r1
 80058a4:	2203      	movs	r2, #3
 80058a6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a8:	187b      	adds	r3, r7, r1
 80058aa:	2200      	movs	r2, #0
 80058ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 80058ae:	187a      	adds	r2, r7, r1
 80058b0:	23a0      	movs	r3, #160	@ 0xa0
 80058b2:	05db      	lsls	r3, r3, #23
 80058b4:	0011      	movs	r1, r2
 80058b6:	0018      	movs	r0, r3
 80058b8:	f7fd fd78 	bl	80033ac <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058bc:	4b21      	ldr	r3, [pc, #132]	@ (8005944 <HAL_RCCEx_EnableLSCO+0xe0>)
 80058be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058c0:	2380      	movs	r3, #128	@ 0x80
 80058c2:	055b      	lsls	r3, r3, #21
 80058c4:	4013      	ands	r3, r2
 80058c6:	d110      	bne.n	80058ea <HAL_RCCEx_EnableLSCO+0x86>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80058c8:	4b1e      	ldr	r3, [pc, #120]	@ (8005944 <HAL_RCCEx_EnableLSCO+0xe0>)
 80058ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005944 <HAL_RCCEx_EnableLSCO+0xe0>)
 80058ce:	2180      	movs	r1, #128	@ 0x80
 80058d0:	0549      	lsls	r1, r1, #21
 80058d2:	430a      	orrs	r2, r1
 80058d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80058d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005944 <HAL_RCCEx_EnableLSCO+0xe0>)
 80058d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058da:	2380      	movs	r3, #128	@ 0x80
 80058dc:	055b      	lsls	r3, r3, #21
 80058de:	4013      	ands	r3, r2
 80058e0:	60bb      	str	r3, [r7, #8]
 80058e2:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 80058e4:	193b      	adds	r3, r7, r4
 80058e6:	2201      	movs	r2, #1
 80058e8:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058ea:	4b17      	ldr	r3, [pc, #92]	@ (8005948 <HAL_RCCEx_EnableLSCO+0xe4>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	2380      	movs	r3, #128	@ 0x80
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	4013      	ands	r3, r2
 80058f4:	d105      	bne.n	8005902 <HAL_RCCEx_EnableLSCO+0x9e>
  {
    HAL_PWR_EnableBkUpAccess();
 80058f6:	f7fe fe77 	bl	80045e8 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 80058fa:	2326      	movs	r3, #38	@ 0x26
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	2201      	movs	r2, #1
 8005900:	701a      	strb	r2, [r3, #0]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8005902:	4b10      	ldr	r3, [pc, #64]	@ (8005944 <HAL_RCCEx_EnableLSCO+0xe0>)
 8005904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005906:	4a11      	ldr	r2, [pc, #68]	@ (800594c <HAL_RCCEx_EnableLSCO+0xe8>)
 8005908:	401a      	ands	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	431a      	orrs	r2, r3
 800590e:	4b0d      	ldr	r3, [pc, #52]	@ (8005944 <HAL_RCCEx_EnableLSCO+0xe0>)
 8005910:	2180      	movs	r1, #128	@ 0x80
 8005912:	0449      	lsls	r1, r1, #17
 8005914:	430a      	orrs	r2, r1
 8005916:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (backupchanged == SET)
 8005918:	2326      	movs	r3, #38	@ 0x26
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_RCCEx_EnableLSCO+0xc2>
  {
    HAL_PWR_DisableBkUpAccess();
 8005922:	f7fe fe6f 	bl	8004604 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 8005926:	2327      	movs	r3, #39	@ 0x27
 8005928:	18fb      	adds	r3, r7, r3
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d105      	bne.n	800593c <HAL_RCCEx_EnableLSCO+0xd8>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8005930:	4b04      	ldr	r3, [pc, #16]	@ (8005944 <HAL_RCCEx_EnableLSCO+0xe0>)
 8005932:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005934:	4b03      	ldr	r3, [pc, #12]	@ (8005944 <HAL_RCCEx_EnableLSCO+0xe0>)
 8005936:	4906      	ldr	r1, [pc, #24]	@ (8005950 <HAL_RCCEx_EnableLSCO+0xec>)
 8005938:	400a      	ands	r2, r1
 800593a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800593c:	46c0      	nop			@ (mov r8, r8)
 800593e:	46bd      	mov	sp, r7
 8005940:	b00b      	add	sp, #44	@ 0x2c
 8005942:	bd90      	pop	{r4, r7, pc}
 8005944:	40021000 	.word	0x40021000
 8005948:	40007000 	.word	0x40007000
 800594c:	fcffffff 	.word	0xfcffffff
 8005950:	efffffff 	.word	0xefffffff

08005954 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005954:	b5b0      	push	{r4, r5, r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800595c:	230f      	movs	r3, #15
 800595e:	18fb      	adds	r3, r7, r3
 8005960:	2201      	movs	r2, #1
 8005962:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d100      	bne.n	800596c <HAL_RTC_Init+0x18>
 800596a:	e08c      	b.n	8005a86 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2229      	movs	r2, #41	@ 0x29
 8005970:	5c9b      	ldrb	r3, [r3, r2]
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10b      	bne.n	8005990 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2228      	movs	r2, #40	@ 0x28
 800597c:	2100      	movs	r1, #0
 800597e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2288      	movs	r2, #136	@ 0x88
 8005984:	0212      	lsls	r2, r2, #8
 8005986:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	0018      	movs	r0, r3
 800598c:	f7fc ffde 	bl	800294c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2229      	movs	r2, #41	@ 0x29
 8005994:	2102      	movs	r1, #2
 8005996:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	2210      	movs	r2, #16
 80059a0:	4013      	ands	r3, r2
 80059a2:	2b10      	cmp	r3, #16
 80059a4:	d062      	beq.n	8005a6c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	22ca      	movs	r2, #202	@ 0xca
 80059ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2253      	movs	r2, #83	@ 0x53
 80059b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80059b6:	250f      	movs	r5, #15
 80059b8:	197c      	adds	r4, r7, r5
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	0018      	movs	r0, r3
 80059be:	f000 fc27 	bl	8006210 <RTC_EnterInitMode>
 80059c2:	0003      	movs	r3, r0
 80059c4:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80059c6:	0028      	movs	r0, r5
 80059c8:	183b      	adds	r3, r7, r0
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d12c      	bne.n	8005a2a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	492e      	ldr	r1, [pc, #184]	@ (8005a94 <HAL_RTC_Init+0x140>)
 80059dc:	400a      	ands	r2, r1
 80059de:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6999      	ldr	r1, [r3, #24]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	431a      	orrs	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6912      	ldr	r2, [r2, #16]
 8005a06:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6919      	ldr	r1, [r3, #16]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	041a      	lsls	r2, r3, #16
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005a1c:	183c      	adds	r4, r7, r0
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	0018      	movs	r0, r3
 8005a22:	f000 fc37 	bl	8006294 <RTC_ExitInitMode>
 8005a26:	0003      	movs	r3, r0
 8005a28:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005a2a:	230f      	movs	r3, #15
 8005a2c:	18fb      	adds	r3, r7, r3
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d116      	bne.n	8005a62 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699a      	ldr	r2, [r3, #24]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	00d2      	lsls	r2, r2, #3
 8005a40:	08d2      	lsrs	r2, r2, #3
 8005a42:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6999      	ldr	r1, [r3, #24]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	22ff      	movs	r2, #255	@ 0xff
 8005a68:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a6a:	e003      	b.n	8005a74 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005a6c:	230f      	movs	r3, #15
 8005a6e:	18fb      	adds	r3, r7, r3
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005a74:	230f      	movs	r3, #15
 8005a76:	18fb      	adds	r3, r7, r3
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d103      	bne.n	8005a86 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2229      	movs	r2, #41	@ 0x29
 8005a82:	2101      	movs	r1, #1
 8005a84:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005a86:	230f      	movs	r3, #15
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	781b      	ldrb	r3, [r3, #0]
}
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	b004      	add	sp, #16
 8005a92:	bdb0      	pop	{r4, r5, r7, pc}
 8005a94:	fb8fffbf 	.word	0xfb8fffbf

08005a98 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a98:	b5b0      	push	{r4, r5, r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2228      	movs	r2, #40	@ 0x28
 8005aa8:	5c9b      	ldrb	r3, [r3, r2]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_RTC_SetTime+0x1a>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e092      	b.n	8005bd8 <HAL_RTC_SetTime+0x140>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2228      	movs	r2, #40	@ 0x28
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2229      	movs	r2, #41	@ 0x29
 8005abe:	2102      	movs	r1, #2
 8005ac0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	22ca      	movs	r2, #202	@ 0xca
 8005ac8:	625a      	str	r2, [r3, #36]	@ 0x24
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2253      	movs	r2, #83	@ 0x53
 8005ad0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ad2:	2513      	movs	r5, #19
 8005ad4:	197c      	adds	r4, r7, r5
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	0018      	movs	r0, r3
 8005ada:	f000 fb99 	bl	8006210 <RTC_EnterInitMode>
 8005ade:	0003      	movs	r3, r0
 8005ae0:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005ae2:	197b      	adds	r3, r7, r5
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d162      	bne.n	8005bb0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d125      	bne.n	8005b3c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	2240      	movs	r2, #64	@ 0x40
 8005af8:	4013      	ands	r3, r2
 8005afa:	d102      	bne.n	8005b02 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2200      	movs	r2, #0
 8005b00:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	0018      	movs	r0, r3
 8005b08:	f000 fc08 	bl	800631c <RTC_ByteToBcd2>
 8005b0c:	0003      	movs	r3, r0
 8005b0e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	0018      	movs	r0, r3
 8005b16:	f000 fc01 	bl	800631c <RTC_ByteToBcd2>
 8005b1a:	0003      	movs	r3, r0
 8005b1c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b1e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	789b      	ldrb	r3, [r3, #2]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f000 fbf9 	bl	800631c <RTC_ByteToBcd2>
 8005b2a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b2c:	0022      	movs	r2, r4
 8005b2e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	78db      	ldrb	r3, [r3, #3]
 8005b34:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	e017      	b.n	8005b6c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	2240      	movs	r2, #64	@ 0x40
 8005b44:	4013      	ands	r3, r2
 8005b46:	d102      	bne.n	8005b4e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b5a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b60:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	78db      	ldrb	r3, [r3, #3]
 8005b66:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	491b      	ldr	r1, [pc, #108]	@ (8005be0 <HAL_RTC_SetTime+0x148>)
 8005b74:	400a      	ands	r2, r1
 8005b76:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4918      	ldr	r1, [pc, #96]	@ (8005be4 <HAL_RTC_SetTime+0x14c>)
 8005b84:	400a      	ands	r2, r1
 8005b86:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6999      	ldr	r1, [r3, #24]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ba0:	2313      	movs	r3, #19
 8005ba2:	18fc      	adds	r4, r7, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	f000 fb74 	bl	8006294 <RTC_ExitInitMode>
 8005bac:	0003      	movs	r3, r0
 8005bae:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	22ff      	movs	r2, #255	@ 0xff
 8005bb6:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8005bb8:	2313      	movs	r3, #19
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d103      	bne.n	8005bca <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2229      	movs	r2, #41	@ 0x29
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2228      	movs	r2, #40	@ 0x28
 8005bce:	2100      	movs	r1, #0
 8005bd0:	5499      	strb	r1, [r3, r2]

  return status;
 8005bd2:	2313      	movs	r3, #19
 8005bd4:	18fb      	adds	r3, r7, r3
 8005bd6:	781b      	ldrb	r3, [r3, #0]
}
 8005bd8:	0018      	movs	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	b006      	add	sp, #24
 8005bde:	bdb0      	pop	{r4, r5, r7, pc}
 8005be0:	007f7f7f 	.word	0x007f7f7f
 8005be4:	fffbffff 	.word	0xfffbffff

08005be8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	045b      	lsls	r3, r3, #17
 8005c06:	0c5a      	lsrs	r2, r3, #17
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a22      	ldr	r2, [pc, #136]	@ (8005c9c <HAL_RTC_GetTime+0xb4>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	0c1b      	lsrs	r3, r3, #16
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	223f      	movs	r2, #63	@ 0x3f
 8005c20:	4013      	ands	r3, r2
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	0a1b      	lsrs	r3, r3, #8
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	227f      	movs	r2, #127	@ 0x7f
 8005c30:	4013      	ands	r3, r2
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	227f      	movs	r2, #127	@ 0x7f
 8005c3e:	4013      	ands	r3, r2
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	0d9b      	lsrs	r3, r3, #22
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	4013      	ands	r3, r2
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d11a      	bne.n	8005c92 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	0018      	movs	r0, r3
 8005c62:	f000 fb83 	bl	800636c <RTC_Bcd2ToByte>
 8005c66:	0003      	movs	r3, r0
 8005c68:	001a      	movs	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	785b      	ldrb	r3, [r3, #1]
 8005c72:	0018      	movs	r0, r3
 8005c74:	f000 fb7a 	bl	800636c <RTC_Bcd2ToByte>
 8005c78:	0003      	movs	r3, r0
 8005c7a:	001a      	movs	r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	789b      	ldrb	r3, [r3, #2]
 8005c84:	0018      	movs	r0, r3
 8005c86:	f000 fb71 	bl	800636c <RTC_Bcd2ToByte>
 8005c8a:	0003      	movs	r3, r0
 8005c8c:	001a      	movs	r2, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	0018      	movs	r0, r3
 8005c96:	46bd      	mov	sp, r7
 8005c98:	b006      	add	sp, #24
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	007f7f7f 	.word	0x007f7f7f

08005ca0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4a21      	ldr	r2, [pc, #132]	@ (8005d38 <HAL_RTC_GetDate+0x98>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	0c1b      	lsrs	r3, r3, #16
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	0a1b      	lsrs	r3, r3, #8
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	221f      	movs	r2, #31
 8005cca:	4013      	ands	r3, r2
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	223f      	movs	r2, #63	@ 0x3f
 8005cd8:	4013      	ands	r3, r2
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	0b5b      	lsrs	r3, r3, #13
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2207      	movs	r2, #7
 8005ce8:	4013      	ands	r3, r2
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d11a      	bne.n	8005d2c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	78db      	ldrb	r3, [r3, #3]
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f000 fb36 	bl	800636c <RTC_Bcd2ToByte>
 8005d00:	0003      	movs	r3, r0
 8005d02:	001a      	movs	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	785b      	ldrb	r3, [r3, #1]
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	f000 fb2d 	bl	800636c <RTC_Bcd2ToByte>
 8005d12:	0003      	movs	r3, r0
 8005d14:	001a      	movs	r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	789b      	ldrb	r3, [r3, #2]
 8005d1e:	0018      	movs	r0, r3
 8005d20:	f000 fb24 	bl	800636c <RTC_Bcd2ToByte>
 8005d24:	0003      	movs	r3, r0
 8005d26:	001a      	movs	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	0018      	movs	r0, r3
 8005d30:	46bd      	mov	sp, r7
 8005d32:	b006      	add	sp, #24
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	46c0      	nop			@ (mov r8, r8)
 8005d38:	00ffff3f 	.word	0x00ffff3f

08005d3c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005d3c:	b590      	push	{r4, r7, lr}
 8005d3e:	b089      	sub	sp, #36	@ 0x24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2228      	movs	r2, #40	@ 0x28
 8005d4c:	5c9b      	ldrb	r3, [r3, r2]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d101      	bne.n	8005d56 <HAL_RTC_SetAlarm_IT+0x1a>
 8005d52:	2302      	movs	r3, #2
 8005d54:	e127      	b.n	8005fa6 <HAL_RTC_SetAlarm_IT+0x26a>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2228      	movs	r2, #40	@ 0x28
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2229      	movs	r2, #41	@ 0x29
 8005d62:	2102      	movs	r1, #2
 8005d64:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d136      	bne.n	8005dda <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	2240      	movs	r2, #64	@ 0x40
 8005d74:	4013      	ands	r3, r2
 8005d76:	d102      	bne.n	8005d7e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	0018      	movs	r0, r3
 8005d84:	f000 faca 	bl	800631c <RTC_ByteToBcd2>
 8005d88:	0003      	movs	r3, r0
 8005d8a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	0018      	movs	r0, r3
 8005d92:	f000 fac3 	bl	800631c <RTC_ByteToBcd2>
 8005d96:	0003      	movs	r3, r0
 8005d98:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005d9a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	789b      	ldrb	r3, [r3, #2]
 8005da0:	0018      	movs	r0, r3
 8005da2:	f000 fabb 	bl	800631c <RTC_ByteToBcd2>
 8005da6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005da8:	0022      	movs	r2, r4
 8005daa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	78db      	ldrb	r3, [r3, #3]
 8005db0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005db2:	431a      	orrs	r2, r3
 8005db4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2220      	movs	r2, #32
 8005dba:	5c9b      	ldrb	r3, [r3, r2]
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f000 faad 	bl	800631c <RTC_ByteToBcd2>
 8005dc2:	0003      	movs	r3, r0
 8005dc4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005dc6:	0022      	movs	r2, r4
 8005dc8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005dce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	e022      	b.n	8005e20 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	2240      	movs	r2, #64	@ 0x40
 8005de2:	4013      	ands	r3, r2
 8005de4:	d102      	bne.n	8005dec <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2200      	movs	r2, #0
 8005dea:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	785b      	ldrb	r3, [r3, #1]
 8005df6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005df8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005dfe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	78db      	ldrb	r3, [r3, #3]
 8005e04:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005e06:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2120      	movs	r1, #32
 8005e0c:	5c5b      	ldrb	r3, [r3, r1]
 8005e0e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005e10:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005e16:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	22ca      	movs	r2, #202	@ 0xca
 8005e32:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2253      	movs	r2, #83	@ 0x53
 8005e3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e40:	2380      	movs	r3, #128	@ 0x80
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d14c      	bne.n	8005ee2 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4957      	ldr	r1, [pc, #348]	@ (8005fb0 <HAL_RTC_SetAlarm_IT+0x274>)
 8005e54:	400a      	ands	r2, r1
 8005e56:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2101      	movs	r1, #1
 8005e64:	430a      	orrs	r2, r1
 8005e66:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8005e68:	f7fd f82c 	bl	8002ec4 <HAL_GetTick>
 8005e6c:	0003      	movs	r3, r0
 8005e6e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005e70:	e016      	b.n	8005ea0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e72:	f7fd f827 	bl	8002ec4 <HAL_GetTick>
 8005e76:	0002      	movs	r2, r0
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	1ad2      	subs	r2, r2, r3
 8005e7c:	23fa      	movs	r3, #250	@ 0xfa
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d90d      	bls.n	8005ea0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	22ff      	movs	r2, #255	@ 0xff
 8005e8a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2229      	movs	r2, #41	@ 0x29
 8005e90:	2103      	movs	r1, #3
 8005e92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2228      	movs	r2, #40	@ 0x28
 8005e98:	2100      	movs	r1, #0
 8005e9a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e082      	b.n	8005fa6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	d0e2      	beq.n	8005e72 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2180      	movs	r1, #128	@ 0x80
 8005ec8:	0049      	lsls	r1, r1, #1
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699a      	ldr	r2, [r3, #24]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2180      	movs	r1, #128	@ 0x80
 8005eda:	0149      	lsls	r1, r1, #5
 8005edc:	430a      	orrs	r2, r1
 8005ede:	619a      	str	r2, [r3, #24]
 8005ee0:	e04b      	b.n	8005f7a <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	699a      	ldr	r2, [r3, #24]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4931      	ldr	r1, [pc, #196]	@ (8005fb4 <HAL_RTC_SetAlarm_IT+0x278>)
 8005eee:	400a      	ands	r2, r1
 8005ef0:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2102      	movs	r1, #2
 8005efe:	430a      	orrs	r2, r1
 8005f00:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8005f02:	f7fc ffdf 	bl	8002ec4 <HAL_GetTick>
 8005f06:	0003      	movs	r3, r0
 8005f08:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005f0a:	e016      	b.n	8005f3a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005f0c:	f7fc ffda 	bl	8002ec4 <HAL_GetTick>
 8005f10:	0002      	movs	r2, r0
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	1ad2      	subs	r2, r2, r3
 8005f16:	23fa      	movs	r3, #250	@ 0xfa
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d90d      	bls.n	8005f3a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	22ff      	movs	r2, #255	@ 0xff
 8005f24:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2229      	movs	r2, #41	@ 0x29
 8005f2a:	2103      	movs	r1, #3
 8005f2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2228      	movs	r2, #40	@ 0x28
 8005f32:	2100      	movs	r1, #0
 8005f34:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e035      	b.n	8005fa6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	2202      	movs	r2, #2
 8005f42:	4013      	ands	r3, r2
 8005f44:	d0e2      	beq.n	8005f0c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699a      	ldr	r2, [r3, #24]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2180      	movs	r1, #128	@ 0x80
 8005f62:	0089      	lsls	r1, r1, #2
 8005f64:	430a      	orrs	r2, r1
 8005f66:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2180      	movs	r1, #128	@ 0x80
 8005f74:	0189      	lsls	r1, r1, #6
 8005f76:	430a      	orrs	r2, r1
 8005f78:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005f7a:	4a0f      	ldr	r2, [pc, #60]	@ (8005fb8 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005f7c:	2380      	movs	r3, #128	@ 0x80
 8005f7e:	58d3      	ldr	r3, [r2, r3]
 8005f80:	490d      	ldr	r1, [pc, #52]	@ (8005fb8 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005f82:	2280      	movs	r2, #128	@ 0x80
 8005f84:	0312      	lsls	r2, r2, #12
 8005f86:	4313      	orrs	r3, r2
 8005f88:	2280      	movs	r2, #128	@ 0x80
 8005f8a:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	22ff      	movs	r2, #255	@ 0xff
 8005f92:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2229      	movs	r2, #41	@ 0x29
 8005f98:	2101      	movs	r1, #1
 8005f9a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2228      	movs	r2, #40	@ 0x28
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	b009      	add	sp, #36	@ 0x24
 8005fac:	bd90      	pop	{r4, r7, pc}
 8005fae:	46c0      	nop			@ (mov r8, r8)
 8005fb0:	fffffeff 	.word	0xfffffeff
 8005fb4:	fffffdff 	.word	0xfffffdff
 8005fb8:	40021800 	.word	0x40021800

08005fbc <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	2380      	movs	r3, #128	@ 0x80
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d144      	bne.n	800605e <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	2280      	movs	r2, #128	@ 0x80
 8005fd8:	0052      	lsls	r2, r2, #1
 8005fda:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe2:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fea:	045b      	lsls	r3, r3, #17
 8005fec:	0c5b      	lsrs	r3, r3, #17
 8005fee:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	0c1b      	lsrs	r3, r3, #16
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	223f      	movs	r2, #63	@ 0x3f
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	0a1b      	lsrs	r3, r3, #8
 8006004:	b2db      	uxtb	r3, r3
 8006006:	227f      	movs	r2, #127	@ 0x7f
 8006008:	4013      	ands	r3, r2
 800600a:	b2da      	uxtb	r2, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	b2db      	uxtb	r3, r3
 8006014:	227f      	movs	r2, #127	@ 0x7f
 8006016:	4013      	ands	r3, r2
 8006018:	b2da      	uxtb	r2, r3
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	0d9b      	lsrs	r3, r3, #22
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2201      	movs	r2, #1
 8006026:	4013      	ands	r3, r2
 8006028:	b2da      	uxtb	r2, r3
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	0e1b      	lsrs	r3, r3, #24
 8006038:	b2db      	uxtb	r3, r3
 800603a:	223f      	movs	r2, #63	@ 0x3f
 800603c:	4013      	ands	r3, r2
 800603e:	b2d9      	uxtb	r1, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2220      	movs	r2, #32
 8006044:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	2380      	movs	r3, #128	@ 0x80
 800604a:	05db      	lsls	r3, r3, #23
 800604c:	401a      	ands	r2, r3
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	4a3b      	ldr	r2, [pc, #236]	@ (8006144 <HAL_RTC_GetAlarm+0x188>)
 8006056:	401a      	ands	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	615a      	str	r2, [r3, #20]
 800605c:	e043      	b.n	80060e6 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2280      	movs	r2, #128	@ 0x80
 8006062:	0092      	lsls	r2, r2, #2
 8006064:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800606c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006074:	045b      	lsls	r3, r3, #17
 8006076:	0c5b      	lsrs	r3, r3, #17
 8006078:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	0c1b      	lsrs	r3, r3, #16
 800607e:	b2db      	uxtb	r3, r3
 8006080:	223f      	movs	r2, #63	@ 0x3f
 8006082:	4013      	ands	r3, r2
 8006084:	b2da      	uxtb	r2, r3
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	0a1b      	lsrs	r3, r3, #8
 800608e:	b2db      	uxtb	r3, r3
 8006090:	227f      	movs	r2, #127	@ 0x7f
 8006092:	4013      	ands	r3, r2
 8006094:	b2da      	uxtb	r2, r3
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	227f      	movs	r2, #127	@ 0x7f
 80060a0:	4013      	ands	r3, r2
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	0d9b      	lsrs	r3, r3, #22
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2201      	movs	r2, #1
 80060b0:	4013      	ands	r3, r2
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	0e1b      	lsrs	r3, r3, #24
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	223f      	movs	r2, #63	@ 0x3f
 80060c6:	4013      	ands	r3, r2
 80060c8:	b2d9      	uxtb	r1, r3
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2220      	movs	r2, #32
 80060ce:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	2380      	movs	r3, #128	@ 0x80
 80060d4:	05db      	lsls	r3, r3, #23
 80060d6:	401a      	ands	r2, r3
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	4a19      	ldr	r2, [pc, #100]	@ (8006144 <HAL_RTC_GetAlarm+0x188>)
 80060e0:	401a      	ands	r2, r3
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d125      	bne.n	8006138 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	0018      	movs	r0, r3
 80060f2:	f000 f93b 	bl	800636c <RTC_Bcd2ToByte>
 80060f6:	0003      	movs	r3, r0
 80060f8:	001a      	movs	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	785b      	ldrb	r3, [r3, #1]
 8006102:	0018      	movs	r0, r3
 8006104:	f000 f932 	bl	800636c <RTC_Bcd2ToByte>
 8006108:	0003      	movs	r3, r0
 800610a:	001a      	movs	r2, r3
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	789b      	ldrb	r3, [r3, #2]
 8006114:	0018      	movs	r0, r3
 8006116:	f000 f929 	bl	800636c <RTC_Bcd2ToByte>
 800611a:	0003      	movs	r3, r0
 800611c:	001a      	movs	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2220      	movs	r2, #32
 8006126:	5c9b      	ldrb	r3, [r3, r2]
 8006128:	0018      	movs	r0, r3
 800612a:	f000 f91f 	bl	800636c <RTC_Bcd2ToByte>
 800612e:	0003      	movs	r3, r0
 8006130:	0019      	movs	r1, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2220      	movs	r2, #32
 8006136:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	0018      	movs	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	b006      	add	sp, #24
 8006140:	bd80      	pop	{r7, pc}
 8006142:	46c0      	nop			@ (mov r8, r8)
 8006144:	80808080 	.word	0x80808080

08006148 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	2380      	movs	r3, #128	@ 0x80
 8006158:	015b      	lsls	r3, r3, #5
 800615a:	4013      	ands	r3, r2
 800615c:	d011      	beq.n	8006182 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006164:	2201      	movs	r2, #1
 8006166:	4013      	ands	r3, r2
 8006168:	d00b      	beq.n	8006182 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2101      	movs	r1, #1
 8006176:	430a      	orrs	r2, r1
 8006178:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	0018      	movs	r0, r3
 800617e:	f7fb fbbb 	bl	80018f8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699a      	ldr	r2, [r3, #24]
 8006188:	2380      	movs	r3, #128	@ 0x80
 800618a:	019b      	lsls	r3, r3, #6
 800618c:	4013      	ands	r3, r2
 800618e:	d011      	beq.n	80061b4 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006196:	2202      	movs	r2, #2
 8006198:	4013      	ands	r3, r2
 800619a:	d00b      	beq.n	80061b4 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2102      	movs	r1, #2
 80061a8:	430a      	orrs	r2, r1
 80061aa:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	0018      	movs	r0, r3
 80061b0:	f000 f9a4 	bl	80064fc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2229      	movs	r2, #41	@ 0x29
 80061b8:	2101      	movs	r1, #1
 80061ba:	5499      	strb	r1, [r3, r2]
}
 80061bc:	46c0      	nop			@ (mov r8, r8)
 80061be:	46bd      	mov	sp, r7
 80061c0:	b002      	add	sp, #8
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a0e      	ldr	r2, [pc, #56]	@ (800620c <HAL_RTC_WaitForSynchro+0x48>)
 80061d2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80061d4:	f7fc fe76 	bl	8002ec4 <HAL_GetTick>
 80061d8:	0003      	movs	r3, r0
 80061da:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80061dc:	e00a      	b.n	80061f4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80061de:	f7fc fe71 	bl	8002ec4 <HAL_GetTick>
 80061e2:	0002      	movs	r2, r0
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	1ad2      	subs	r2, r2, r3
 80061e8:	23fa      	movs	r3, #250	@ 0xfa
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d901      	bls.n	80061f4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e006      	b.n	8006202 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	4013      	ands	r3, r2
 80061fe:	d0ee      	beq.n	80061de <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	0018      	movs	r0, r3
 8006204:	46bd      	mov	sp, r7
 8006206:	b004      	add	sp, #16
 8006208:	bd80      	pop	{r7, pc}
 800620a:	46c0      	nop			@ (mov r8, r8)
 800620c:	0001005f 	.word	0x0001005f

08006210 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006218:	230f      	movs	r3, #15
 800621a:	18fb      	adds	r3, r7, r3
 800621c:	2200      	movs	r2, #0
 800621e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	2240      	movs	r2, #64	@ 0x40
 8006228:	4013      	ands	r3, r2
 800622a:	d12c      	bne.n	8006286 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2180      	movs	r1, #128	@ 0x80
 8006238:	430a      	orrs	r2, r1
 800623a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800623c:	f7fc fe42 	bl	8002ec4 <HAL_GetTick>
 8006240:	0003      	movs	r3, r0
 8006242:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006244:	e014      	b.n	8006270 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006246:	f7fc fe3d 	bl	8002ec4 <HAL_GetTick>
 800624a:	0002      	movs	r2, r0
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	1ad2      	subs	r2, r2, r3
 8006250:	200f      	movs	r0, #15
 8006252:	183b      	adds	r3, r7, r0
 8006254:	1839      	adds	r1, r7, r0
 8006256:	7809      	ldrb	r1, [r1, #0]
 8006258:	7019      	strb	r1, [r3, #0]
 800625a:	23fa      	movs	r3, #250	@ 0xfa
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	429a      	cmp	r2, r3
 8006260:	d906      	bls.n	8006270 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8006262:	183b      	adds	r3, r7, r0
 8006264:	2203      	movs	r2, #3
 8006266:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2229      	movs	r2, #41	@ 0x29
 800626c:	2103      	movs	r1, #3
 800626e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	2240      	movs	r2, #64	@ 0x40
 8006278:	4013      	ands	r3, r2
 800627a:	d104      	bne.n	8006286 <RTC_EnterInitMode+0x76>
 800627c:	230f      	movs	r3, #15
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b03      	cmp	r3, #3
 8006284:	d1df      	bne.n	8006246 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006286:	230f      	movs	r3, #15
 8006288:	18fb      	adds	r3, r7, r3
 800628a:	781b      	ldrb	r3, [r3, #0]
}
 800628c:	0018      	movs	r0, r3
 800628e:	46bd      	mov	sp, r7
 8006290:	b004      	add	sp, #16
 8006292:	bd80      	pop	{r7, pc}

08006294 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006294:	b590      	push	{r4, r7, lr}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800629c:	240f      	movs	r4, #15
 800629e:	193b      	adds	r3, r7, r4
 80062a0:	2200      	movs	r2, #0
 80062a2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80062a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006318 <RTC_ExitInitMode+0x84>)
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006318 <RTC_ExitInitMode+0x84>)
 80062aa:	2180      	movs	r1, #128	@ 0x80
 80062ac:	438a      	bics	r2, r1
 80062ae:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80062b0:	4b19      	ldr	r3, [pc, #100]	@ (8006318 <RTC_ExitInitMode+0x84>)
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	2220      	movs	r2, #32
 80062b6:	4013      	ands	r3, r2
 80062b8:	d10d      	bne.n	80062d6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	0018      	movs	r0, r3
 80062be:	f7ff ff81 	bl	80061c4 <HAL_RTC_WaitForSynchro>
 80062c2:	1e03      	subs	r3, r0, #0
 80062c4:	d021      	beq.n	800630a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2229      	movs	r2, #41	@ 0x29
 80062ca:	2103      	movs	r1, #3
 80062cc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80062ce:	193b      	adds	r3, r7, r4
 80062d0:	2203      	movs	r2, #3
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	e019      	b.n	800630a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80062d6:	4b10      	ldr	r3, [pc, #64]	@ (8006318 <RTC_ExitInitMode+0x84>)
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	4b0f      	ldr	r3, [pc, #60]	@ (8006318 <RTC_ExitInitMode+0x84>)
 80062dc:	2120      	movs	r1, #32
 80062de:	438a      	bics	r2, r1
 80062e0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	0018      	movs	r0, r3
 80062e6:	f7ff ff6d 	bl	80061c4 <HAL_RTC_WaitForSynchro>
 80062ea:	1e03      	subs	r3, r0, #0
 80062ec:	d007      	beq.n	80062fe <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2229      	movs	r2, #41	@ 0x29
 80062f2:	2103      	movs	r1, #3
 80062f4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80062f6:	230f      	movs	r3, #15
 80062f8:	18fb      	adds	r3, r7, r3
 80062fa:	2203      	movs	r2, #3
 80062fc:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80062fe:	4b06      	ldr	r3, [pc, #24]	@ (8006318 <RTC_ExitInitMode+0x84>)
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	4b05      	ldr	r3, [pc, #20]	@ (8006318 <RTC_ExitInitMode+0x84>)
 8006304:	2120      	movs	r1, #32
 8006306:	430a      	orrs	r2, r1
 8006308:	619a      	str	r2, [r3, #24]
  }

  return status;
 800630a:	230f      	movs	r3, #15
 800630c:	18fb      	adds	r3, r7, r3
 800630e:	781b      	ldrb	r3, [r3, #0]
}
 8006310:	0018      	movs	r0, r3
 8006312:	46bd      	mov	sp, r7
 8006314:	b005      	add	sp, #20
 8006316:	bd90      	pop	{r4, r7, pc}
 8006318:	40002800 	.word	0x40002800

0800631c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	0002      	movs	r2, r0
 8006324:	1dfb      	adds	r3, r7, #7
 8006326:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800632c:	230b      	movs	r3, #11
 800632e:	18fb      	adds	r3, r7, r3
 8006330:	1dfa      	adds	r2, r7, #7
 8006332:	7812      	ldrb	r2, [r2, #0]
 8006334:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8006336:	e008      	b.n	800634a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3301      	adds	r3, #1
 800633c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800633e:	220b      	movs	r2, #11
 8006340:	18bb      	adds	r3, r7, r2
 8006342:	18ba      	adds	r2, r7, r2
 8006344:	7812      	ldrb	r2, [r2, #0]
 8006346:	3a0a      	subs	r2, #10
 8006348:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800634a:	210b      	movs	r1, #11
 800634c:	187b      	adds	r3, r7, r1
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b09      	cmp	r3, #9
 8006352:	d8f1      	bhi.n	8006338 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	b2db      	uxtb	r3, r3
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	b2da      	uxtb	r2, r3
 800635c:	187b      	adds	r3, r7, r1
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	4313      	orrs	r3, r2
 8006362:	b2db      	uxtb	r3, r3
}
 8006364:	0018      	movs	r0, r3
 8006366:	46bd      	mov	sp, r7
 8006368:	b004      	add	sp, #16
 800636a:	bd80      	pop	{r7, pc}

0800636c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	0002      	movs	r2, r0
 8006374:	1dfb      	adds	r3, r7, #7
 8006376:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006378:	1dfb      	adds	r3, r7, #7
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	091b      	lsrs	r3, r3, #4
 800637e:	b2db      	uxtb	r3, r3
 8006380:	001a      	movs	r2, r3
 8006382:	0013      	movs	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	189b      	adds	r3, r3, r2
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	b2da      	uxtb	r2, r3
 8006390:	1dfb      	adds	r3, r7, #7
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	210f      	movs	r1, #15
 8006396:	400b      	ands	r3, r1
 8006398:	b2db      	uxtb	r3, r3
 800639a:	18d3      	adds	r3, r2, r3
 800639c:	b2db      	uxtb	r3, r3
}
 800639e:	0018      	movs	r0, r3
 80063a0:	46bd      	mov	sp, r7
 80063a2:	b004      	add	sp, #16
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_RTCEx_SetSmoothCalib>:
  * @param  SmoothCalibMinusPulsesValue Select the value of CALM[8:0] bits.
  *          This parameter can be one any value from 0 to 0x000001FF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b086      	sub	sp, #24
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	607a      	str	r2, [r7, #4]
 80063b2:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2228      	movs	r2, #40	@ 0x28
 80063b8:	5c9b      	ldrb	r3, [r3, r2]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d101      	bne.n	80063c2 <HAL_RTCEx_SetSmoothCalib+0x1c>
 80063be:	2302      	movs	r3, #2
 80063c0:	e04f      	b.n	8006462 <HAL_RTCEx_SetSmoothCalib+0xbc>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2228      	movs	r2, #40	@ 0x28
 80063c6:	2101      	movs	r1, #1
 80063c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2229      	movs	r2, #41	@ 0x29
 80063ce:	2102      	movs	r1, #2
 80063d0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	22ca      	movs	r2, #202	@ 0xca
 80063d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2253      	movs	r2, #83	@ 0x53
 80063e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	2380      	movs	r3, #128	@ 0x80
 80063ea:	025b      	lsls	r3, r3, #9
 80063ec:	4013      	ands	r3, r2
 80063ee:	d022      	beq.n	8006436 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 80063f0:	f7fc fd68 	bl	8002ec4 <HAL_GetTick>
 80063f4:	0003      	movs	r3, r0
 80063f6:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 80063f8:	e016      	b.n	8006428 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80063fa:	f7fc fd63 	bl	8002ec4 <HAL_GetTick>
 80063fe:	0002      	movs	r2, r0
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	1ad2      	subs	r2, r2, r3
 8006404:	23fa      	movs	r3, #250	@ 0xfa
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	429a      	cmp	r2, r3
 800640a:	d90d      	bls.n	8006428 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	22ff      	movs	r2, #255	@ 0xff
 8006412:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2229      	movs	r2, #41	@ 0x29
 8006418:	2103      	movs	r1, #3
 800641a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2228      	movs	r2, #40	@ 0x28
 8006420:	2100      	movs	r1, #0
 8006422:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e01c      	b.n	8006462 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while((hrtc->Instance->ICSR & RTC_ICSR_RECALPF) != 0U)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	2380      	movs	r3, #128	@ 0x80
 8006430:	025b      	lsls	r3, r3, #9
 8006432:	4013      	ands	r3, r2
 8006434:	d1e1      	bne.n	80063fa <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	431a      	orrs	r2, r3
 800643c:	0011      	movs	r1, r2
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	22ff      	movs	r2, #255	@ 0xff
 800644e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2229      	movs	r2, #41	@ 0x29
 8006454:	2101      	movs	r1, #1
 8006456:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2228      	movs	r2, #40	@ 0x28
 800645c:	2100      	movs	r1, #0
 800645e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	0018      	movs	r0, r3
 8006464:	46bd      	mov	sp, r7
 8006466:	b006      	add	sp, #24
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2228      	movs	r2, #40	@ 0x28
 800647a:	5c9b      	ldrb	r3, [r3, r2]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8006480:	2302      	movs	r3, #2
 8006482:	e035      	b.n	80064f0 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2228      	movs	r2, #40	@ 0x28
 8006488:	2101      	movs	r1, #1
 800648a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2229      	movs	r2, #41	@ 0x29
 8006490:	2102      	movs	r1, #2
 8006492:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	22ca      	movs	r2, #202	@ 0xca
 800649a:	625a      	str	r2, [r3, #36]	@ 0x24
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2253      	movs	r2, #83	@ 0x53
 80064a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699a      	ldr	r2, [r3, #24]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4912      	ldr	r1, [pc, #72]	@ (80064f8 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 80064b0:	400a      	ands	r2, r1
 80064b2:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6999      	ldr	r1, [r3, #24]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2180      	movs	r1, #128	@ 0x80
 80064d0:	0409      	lsls	r1, r1, #16
 80064d2:	430a      	orrs	r2, r1
 80064d4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	22ff      	movs	r2, #255	@ 0xff
 80064dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2229      	movs	r2, #41	@ 0x29
 80064e2:	2101      	movs	r1, #1
 80064e4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2228      	movs	r2, #40	@ 0x28
 80064ea:	2100      	movs	r1, #0
 80064ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	0018      	movs	r0, r3
 80064f2:	46bd      	mov	sp, r7
 80064f4:	b002      	add	sp, #8
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	fff7ffff 	.word	0xfff7ffff

080064fc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006504:	46c0      	nop			@ (mov r8, r8)
 8006506:	46bd      	mov	sp, r7
 8006508:	b002      	add	sp, #8
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	001a      	movs	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	18d3      	adds	r3, r2, r3
 8006524:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	3301      	adds	r3, #1
 800652a:	33ff      	adds	r3, #255	@ 0xff
 800652c:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	18d3      	adds	r3, r2, r3
 8006536:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	601a      	str	r2, [r3, #0]
}
 800653e:	46c0      	nop			@ (mov r8, r8)
 8006540:	46bd      	mov	sp, r7
 8006542:	b006      	add	sp, #24
 8006544:	bd80      	pop	{r7, pc}

08006546 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	001a      	movs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	18d3      	adds	r3, r2, r3
 800655c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3301      	adds	r3, #1
 8006562:	33ff      	adds	r3, #255	@ 0xff
 8006564:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	18d3      	adds	r3, r2, r3
 800656e:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	681b      	ldr	r3, [r3, #0]
}
 8006574:	0018      	movs	r0, r3
 8006576:	46bd      	mov	sp, r7
 8006578:	b004      	add	sp, #16
 800657a:	bd80      	pop	{r7, pc}

0800657c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e0a8      	b.n	80066e0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006592:	2b00      	cmp	r3, #0
 8006594:	d109      	bne.n	80065aa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	2382      	movs	r3, #130	@ 0x82
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	429a      	cmp	r2, r3
 80065a0:	d009      	beq.n	80065b6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	61da      	str	r2, [r3, #28]
 80065a8:	e005      	b.n	80065b6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	225d      	movs	r2, #93	@ 0x5d
 80065c0:	5c9b      	ldrb	r3, [r3, r2]
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d107      	bne.n	80065d8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	225c      	movs	r2, #92	@ 0x5c
 80065cc:	2100      	movs	r1, #0
 80065ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	0018      	movs	r0, r3
 80065d4:	f7fc fa00 	bl	80029d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	225d      	movs	r2, #93	@ 0x5d
 80065dc:	2102      	movs	r1, #2
 80065de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2140      	movs	r1, #64	@ 0x40
 80065ec:	438a      	bics	r2, r1
 80065ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	23e0      	movs	r3, #224	@ 0xe0
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d902      	bls.n	8006602 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80065fc:	2300      	movs	r3, #0
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	e002      	b.n	8006608 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006602:	2380      	movs	r3, #128	@ 0x80
 8006604:	015b      	lsls	r3, r3, #5
 8006606:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	23f0      	movs	r3, #240	@ 0xf0
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	429a      	cmp	r2, r3
 8006612:	d008      	beq.n	8006626 <HAL_SPI_Init+0xaa>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	23e0      	movs	r3, #224	@ 0xe0
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	429a      	cmp	r2, r3
 800661e:	d002      	beq.n	8006626 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	2382      	movs	r3, #130	@ 0x82
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	401a      	ands	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6899      	ldr	r1, [r3, #8]
 8006634:	2384      	movs	r3, #132	@ 0x84
 8006636:	021b      	lsls	r3, r3, #8
 8006638:	400b      	ands	r3, r1
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	2102      	movs	r1, #2
 8006642:	400b      	ands	r3, r1
 8006644:	431a      	orrs	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	2101      	movs	r1, #1
 800664c:	400b      	ands	r3, r1
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6999      	ldr	r1, [r3, #24]
 8006654:	2380      	movs	r3, #128	@ 0x80
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	400b      	ands	r3, r1
 800665a:	431a      	orrs	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	2138      	movs	r1, #56	@ 0x38
 8006662:	400b      	ands	r3, r1
 8006664:	431a      	orrs	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	2180      	movs	r1, #128	@ 0x80
 800666c:	400b      	ands	r3, r1
 800666e:	431a      	orrs	r2, r3
 8006670:	0011      	movs	r1, r2
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006676:	2380      	movs	r3, #128	@ 0x80
 8006678:	019b      	lsls	r3, r3, #6
 800667a:	401a      	ands	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	0c1b      	lsrs	r3, r3, #16
 800668a:	2204      	movs	r2, #4
 800668c:	401a      	ands	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006692:	2110      	movs	r1, #16
 8006694:	400b      	ands	r3, r1
 8006696:	431a      	orrs	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800669c:	2108      	movs	r1, #8
 800669e:	400b      	ands	r3, r1
 80066a0:	431a      	orrs	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68d9      	ldr	r1, [r3, #12]
 80066a6:	23f0      	movs	r3, #240	@ 0xf0
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	400b      	ands	r3, r1
 80066ac:	431a      	orrs	r2, r3
 80066ae:	0011      	movs	r1, r2
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	2380      	movs	r3, #128	@ 0x80
 80066b4:	015b      	lsls	r3, r3, #5
 80066b6:	401a      	ands	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	69da      	ldr	r2, [r3, #28]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4907      	ldr	r1, [pc, #28]	@ (80066e8 <HAL_SPI_Init+0x16c>)
 80066cc:	400a      	ands	r2, r1
 80066ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	225d      	movs	r2, #93	@ 0x5d
 80066da:	2101      	movs	r1, #1
 80066dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	0018      	movs	r0, r3
 80066e2:	46bd      	mov	sp, r7
 80066e4:	b004      	add	sp, #16
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	fffff7ff 	.word	0xfffff7ff

080066ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	1dbb      	adds	r3, r7, #6
 80066fa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066fc:	231f      	movs	r3, #31
 80066fe:	18fb      	adds	r3, r7, r3
 8006700:	2200      	movs	r2, #0
 8006702:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	225c      	movs	r2, #92	@ 0x5c
 8006708:	5c9b      	ldrb	r3, [r3, r2]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_SPI_Transmit+0x26>
 800670e:	2302      	movs	r3, #2
 8006710:	e147      	b.n	80069a2 <HAL_SPI_Transmit+0x2b6>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	225c      	movs	r2, #92	@ 0x5c
 8006716:	2101      	movs	r1, #1
 8006718:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800671a:	f7fc fbd3 	bl	8002ec4 <HAL_GetTick>
 800671e:	0003      	movs	r3, r0
 8006720:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006722:	2316      	movs	r3, #22
 8006724:	18fb      	adds	r3, r7, r3
 8006726:	1dba      	adds	r2, r7, #6
 8006728:	8812      	ldrh	r2, [r2, #0]
 800672a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	225d      	movs	r2, #93	@ 0x5d
 8006730:	5c9b      	ldrb	r3, [r3, r2]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b01      	cmp	r3, #1
 8006736:	d004      	beq.n	8006742 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006738:	231f      	movs	r3, #31
 800673a:	18fb      	adds	r3, r7, r3
 800673c:	2202      	movs	r2, #2
 800673e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006740:	e128      	b.n	8006994 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_SPI_Transmit+0x64>
 8006748:	1dbb      	adds	r3, r7, #6
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d104      	bne.n	800675a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006750:	231f      	movs	r3, #31
 8006752:	18fb      	adds	r3, r7, r3
 8006754:	2201      	movs	r2, #1
 8006756:	701a      	strb	r2, [r3, #0]
    goto error;
 8006758:	e11c      	b.n	8006994 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	225d      	movs	r2, #93	@ 0x5d
 800675e:	2103      	movs	r1, #3
 8006760:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	1dba      	adds	r2, r7, #6
 8006772:	8812      	ldrh	r2, [r2, #0]
 8006774:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	1dba      	adds	r2, r7, #6
 800677a:	8812      	ldrh	r2, [r2, #0]
 800677c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2244      	movs	r2, #68	@ 0x44
 8006788:	2100      	movs	r1, #0
 800678a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2246      	movs	r2, #70	@ 0x46
 8006790:	2100      	movs	r1, #0
 8006792:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	2380      	movs	r3, #128	@ 0x80
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d110      	bne.n	80067ce <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2140      	movs	r1, #64	@ 0x40
 80067b8:	438a      	bics	r2, r1
 80067ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2180      	movs	r1, #128	@ 0x80
 80067c8:	01c9      	lsls	r1, r1, #7
 80067ca:	430a      	orrs	r2, r1
 80067cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2240      	movs	r2, #64	@ 0x40
 80067d6:	4013      	ands	r3, r2
 80067d8:	2b40      	cmp	r3, #64	@ 0x40
 80067da:	d007      	beq.n	80067ec <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2140      	movs	r1, #64	@ 0x40
 80067e8:	430a      	orrs	r2, r1
 80067ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	23e0      	movs	r3, #224	@ 0xe0
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d952      	bls.n	800689e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d004      	beq.n	800680a <HAL_SPI_Transmit+0x11e>
 8006800:	2316      	movs	r3, #22
 8006802:	18fb      	adds	r3, r7, r3
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d143      	bne.n	8006892 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680e:	881a      	ldrh	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681a:	1c9a      	adds	r2, r3, #2
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800682e:	e030      	b.n	8006892 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	2202      	movs	r2, #2
 8006838:	4013      	ands	r3, r2
 800683a:	2b02      	cmp	r3, #2
 800683c:	d112      	bne.n	8006864 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006842:	881a      	ldrh	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684e:	1c9a      	adds	r2, r3, #2
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006858:	b29b      	uxth	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	b29a      	uxth	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006862:	e016      	b.n	8006892 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006864:	f7fc fb2e 	bl	8002ec4 <HAL_GetTick>
 8006868:	0002      	movs	r2, r0
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d802      	bhi.n	800687a <HAL_SPI_Transmit+0x18e>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	3301      	adds	r3, #1
 8006878:	d102      	bne.n	8006880 <HAL_SPI_Transmit+0x194>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d108      	bne.n	8006892 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8006880:	231f      	movs	r3, #31
 8006882:	18fb      	adds	r3, r7, r3
 8006884:	2203      	movs	r2, #3
 8006886:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	225d      	movs	r2, #93	@ 0x5d
 800688c:	2101      	movs	r1, #1
 800688e:	5499      	strb	r1, [r3, r2]
          goto error;
 8006890:	e080      	b.n	8006994 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006896:	b29b      	uxth	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1c9      	bne.n	8006830 <HAL_SPI_Transmit+0x144>
 800689c:	e053      	b.n	8006946 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <HAL_SPI_Transmit+0x1c4>
 80068a6:	2316      	movs	r3, #22
 80068a8:	18fb      	adds	r3, r7, r3
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d145      	bne.n	800693c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	330c      	adds	r3, #12
 80068ba:	7812      	ldrb	r2, [r2, #0]
 80068bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	3b01      	subs	r3, #1
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80068d6:	e031      	b.n	800693c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	2202      	movs	r2, #2
 80068e0:	4013      	ands	r3, r2
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d113      	bne.n	800690e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	330c      	adds	r3, #12
 80068f0:	7812      	ldrb	r2, [r2, #0]
 80068f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006902:	b29b      	uxth	r3, r3
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800690c:	e016      	b.n	800693c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800690e:	f7fc fad9 	bl	8002ec4 <HAL_GetTick>
 8006912:	0002      	movs	r2, r0
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d802      	bhi.n	8006924 <HAL_SPI_Transmit+0x238>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	3301      	adds	r3, #1
 8006922:	d102      	bne.n	800692a <HAL_SPI_Transmit+0x23e>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d108      	bne.n	800693c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800692a:	231f      	movs	r3, #31
 800692c:	18fb      	adds	r3, r7, r3
 800692e:	2203      	movs	r2, #3
 8006930:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	225d      	movs	r2, #93	@ 0x5d
 8006936:	2101      	movs	r1, #1
 8006938:	5499      	strb	r1, [r3, r2]
          goto error;
 800693a:	e02b      	b.n	8006994 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006940:	b29b      	uxth	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1c8      	bne.n	80068d8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	0018      	movs	r0, r3
 800694e:	f000 f95d 	bl	8006c0c <SPI_EndRxTxTransaction>
 8006952:	1e03      	subs	r3, r0, #0
 8006954:	d002      	beq.n	800695c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2220      	movs	r2, #32
 800695a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10a      	bne.n	800697a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006964:	2300      	movs	r3, #0
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	613b      	str	r3, [r7, #16]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800697e:	2b00      	cmp	r3, #0
 8006980:	d004      	beq.n	800698c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8006982:	231f      	movs	r3, #31
 8006984:	18fb      	adds	r3, r7, r3
 8006986:	2201      	movs	r2, #1
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	e003      	b.n	8006994 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	225d      	movs	r2, #93	@ 0x5d
 8006990:	2101      	movs	r1, #1
 8006992:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	225c      	movs	r2, #92	@ 0x5c
 8006998:	2100      	movs	r1, #0
 800699a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800699c:	231f      	movs	r3, #31
 800699e:	18fb      	adds	r3, r7, r3
 80069a0:	781b      	ldrb	r3, [r3, #0]
}
 80069a2:	0018      	movs	r0, r3
 80069a4:	46bd      	mov	sp, r7
 80069a6:	b008      	add	sp, #32
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b088      	sub	sp, #32
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	1dfb      	adds	r3, r7, #7
 80069ba:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069bc:	f7fc fa82 	bl	8002ec4 <HAL_GetTick>
 80069c0:	0002      	movs	r2, r0
 80069c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c4:	1a9b      	subs	r3, r3, r2
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	18d3      	adds	r3, r2, r3
 80069ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069cc:	f7fc fa7a 	bl	8002ec4 <HAL_GetTick>
 80069d0:	0003      	movs	r3, r0
 80069d2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069d4:	4b3a      	ldr	r3, [pc, #232]	@ (8006ac0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	015b      	lsls	r3, r3, #5
 80069da:	0d1b      	lsrs	r3, r3, #20
 80069dc:	69fa      	ldr	r2, [r7, #28]
 80069de:	4353      	muls	r3, r2
 80069e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069e2:	e058      	b.n	8006a96 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	3301      	adds	r3, #1
 80069e8:	d055      	beq.n	8006a96 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069ea:	f7fc fa6b 	bl	8002ec4 <HAL_GetTick>
 80069ee:	0002      	movs	r2, r0
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	69fa      	ldr	r2, [r7, #28]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d902      	bls.n	8006a00 <SPI_WaitFlagStateUntilTimeout+0x54>
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d142      	bne.n	8006a86 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	21e0      	movs	r1, #224	@ 0xe0
 8006a0c:	438a      	bics	r2, r1
 8006a0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	2382      	movs	r3, #130	@ 0x82
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d113      	bne.n	8006a44 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	2380      	movs	r3, #128	@ 0x80
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d005      	beq.n	8006a34 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	2380      	movs	r3, #128	@ 0x80
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d107      	bne.n	8006a44 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2140      	movs	r1, #64	@ 0x40
 8006a40:	438a      	bics	r2, r1
 8006a42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a48:	2380      	movs	r3, #128	@ 0x80
 8006a4a:	019b      	lsls	r3, r3, #6
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d110      	bne.n	8006a72 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	491a      	ldr	r1, [pc, #104]	@ (8006ac4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006a5c:	400a      	ands	r2, r1
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2180      	movs	r1, #128	@ 0x80
 8006a6c:	0189      	lsls	r1, r1, #6
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	225d      	movs	r2, #93	@ 0x5d
 8006a76:	2101      	movs	r1, #1
 8006a78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	225c      	movs	r2, #92	@ 0x5c
 8006a7e:	2100      	movs	r1, #0
 8006a80:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e017      	b.n	8006ab6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	425a      	negs	r2, r3
 8006aa6:	4153      	adcs	r3, r2
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	001a      	movs	r2, r3
 8006aac:	1dfb      	adds	r3, r7, #7
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d197      	bne.n	80069e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	b008      	add	sp, #32
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	46c0      	nop			@ (mov r8, r8)
 8006ac0:	2000008c 	.word	0x2000008c
 8006ac4:	ffffdfff 	.word	0xffffdfff

08006ac8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b08a      	sub	sp, #40	@ 0x28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006ad6:	2317      	movs	r3, #23
 8006ad8:	18fb      	adds	r3, r7, r3
 8006ada:	2200      	movs	r2, #0
 8006adc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ade:	f7fc f9f1 	bl	8002ec4 <HAL_GetTick>
 8006ae2:	0002      	movs	r2, r0
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae6:	1a9b      	subs	r3, r3, r2
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	18d3      	adds	r3, r2, r3
 8006aec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006aee:	f7fc f9e9 	bl	8002ec4 <HAL_GetTick>
 8006af2:	0003      	movs	r3, r0
 8006af4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	330c      	adds	r3, #12
 8006afc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006afe:	4b41      	ldr	r3, [pc, #260]	@ (8006c04 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	0013      	movs	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	189b      	adds	r3, r3, r2
 8006b08:	00da      	lsls	r2, r3, #3
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	0d1b      	lsrs	r3, r3, #20
 8006b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b10:	4353      	muls	r3, r2
 8006b12:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b14:	e068      	b.n	8006be8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	23c0      	movs	r3, #192	@ 0xc0
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d10a      	bne.n	8006b36 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d107      	bne.n	8006b36 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	2117      	movs	r1, #23
 8006b2e:	187b      	adds	r3, r7, r1
 8006b30:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006b32:	187b      	adds	r3, r7, r1
 8006b34:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	d055      	beq.n	8006be8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b3c:	f7fc f9c2 	bl	8002ec4 <HAL_GetTick>
 8006b40:	0002      	movs	r2, r0
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d902      	bls.n	8006b52 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d142      	bne.n	8006bd8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	21e0      	movs	r1, #224	@ 0xe0
 8006b5e:	438a      	bics	r2, r1
 8006b60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	2382      	movs	r3, #130	@ 0x82
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d113      	bne.n	8006b96 <SPI_WaitFifoStateUntilTimeout+0xce>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	2380      	movs	r3, #128	@ 0x80
 8006b74:	021b      	lsls	r3, r3, #8
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d005      	beq.n	8006b86 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	2380      	movs	r3, #128	@ 0x80
 8006b80:	00db      	lsls	r3, r3, #3
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d107      	bne.n	8006b96 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2140      	movs	r1, #64	@ 0x40
 8006b92:	438a      	bics	r2, r1
 8006b94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b9a:	2380      	movs	r3, #128	@ 0x80
 8006b9c:	019b      	lsls	r3, r3, #6
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d110      	bne.n	8006bc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4916      	ldr	r1, [pc, #88]	@ (8006c08 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006bae:	400a      	ands	r2, r1
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2180      	movs	r1, #128	@ 0x80
 8006bbe:	0189      	lsls	r1, r1, #6
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	225d      	movs	r2, #93	@ 0x5d
 8006bc8:	2101      	movs	r1, #1
 8006bca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	225c      	movs	r2, #92	@ 0x5c
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e010      	b.n	8006bfa <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d18e      	bne.n	8006b16 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b00a      	add	sp, #40	@ 0x28
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	46c0      	nop			@ (mov r8, r8)
 8006c04:	2000008c 	.word	0x2000008c
 8006c08:	ffffdfff 	.word	0xffffdfff

08006c0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af02      	add	r7, sp, #8
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	23c0      	movs	r3, #192	@ 0xc0
 8006c1c:	0159      	lsls	r1, r3, #5
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	0013      	movs	r3, r2
 8006c26:	2200      	movs	r2, #0
 8006c28:	f7ff ff4e 	bl	8006ac8 <SPI_WaitFifoStateUntilTimeout>
 8006c2c:	1e03      	subs	r3, r0, #0
 8006c2e:	d007      	beq.n	8006c40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c34:	2220      	movs	r2, #32
 8006c36:	431a      	orrs	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e027      	b.n	8006c90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	0013      	movs	r3, r2
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2180      	movs	r1, #128	@ 0x80
 8006c4e:	f7ff fead 	bl	80069ac <SPI_WaitFlagStateUntilTimeout>
 8006c52:	1e03      	subs	r3, r0, #0
 8006c54:	d007      	beq.n	8006c66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e014      	b.n	8006c90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	23c0      	movs	r3, #192	@ 0xc0
 8006c6a:	00d9      	lsls	r1, r3, #3
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	0013      	movs	r3, r2
 8006c74:	2200      	movs	r2, #0
 8006c76:	f7ff ff27 	bl	8006ac8 <SPI_WaitFifoStateUntilTimeout>
 8006c7a:	1e03      	subs	r3, r0, #0
 8006c7c:	d007      	beq.n	8006c8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c82:	2220      	movs	r2, #32
 8006c84:	431a      	orrs	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e000      	b.n	8006c90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	0018      	movs	r0, r3
 8006c92:	46bd      	mov	sp, r7
 8006c94:	b004      	add	sp, #16
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e04a      	b.n	8006d40 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	223d      	movs	r2, #61	@ 0x3d
 8006cae:	5c9b      	ldrb	r3, [r3, r2]
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d107      	bne.n	8006cc6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	223c      	movs	r2, #60	@ 0x3c
 8006cba:	2100      	movs	r1, #0
 8006cbc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f7fb ff61 	bl	8002b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	223d      	movs	r2, #61	@ 0x3d
 8006cca:	2102      	movs	r1, #2
 8006ccc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	0019      	movs	r1, r3
 8006cd8:	0010      	movs	r0, r2
 8006cda:	f000 fc87 	bl	80075ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2248      	movs	r2, #72	@ 0x48
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	223e      	movs	r2, #62	@ 0x3e
 8006cea:	2101      	movs	r1, #1
 8006cec:	5499      	strb	r1, [r3, r2]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	223f      	movs	r2, #63	@ 0x3f
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	5499      	strb	r1, [r3, r2]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2240      	movs	r2, #64	@ 0x40
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	5499      	strb	r1, [r3, r2]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2241      	movs	r2, #65	@ 0x41
 8006d02:	2101      	movs	r1, #1
 8006d04:	5499      	strb	r1, [r3, r2]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2242      	movs	r2, #66	@ 0x42
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	5499      	strb	r1, [r3, r2]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2243      	movs	r2, #67	@ 0x43
 8006d12:	2101      	movs	r1, #1
 8006d14:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2244      	movs	r2, #68	@ 0x44
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	5499      	strb	r1, [r3, r2]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2245      	movs	r2, #69	@ 0x45
 8006d22:	2101      	movs	r1, #1
 8006d24:	5499      	strb	r1, [r3, r2]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2246      	movs	r2, #70	@ 0x46
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	5499      	strb	r1, [r3, r2]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2247      	movs	r2, #71	@ 0x47
 8006d32:	2101      	movs	r1, #1
 8006d34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	223d      	movs	r2, #61	@ 0x3d
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	0018      	movs	r0, r3
 8006d42:	46bd      	mov	sp, r7
 8006d44:	b002      	add	sp, #8
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	223d      	movs	r2, #61	@ 0x3d
 8006d54:	5c9b      	ldrb	r3, [r3, r2]
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d001      	beq.n	8006d60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e035      	b.n	8006dcc <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	223d      	movs	r2, #61	@ 0x3d
 8006d64:	2102      	movs	r1, #2
 8006d66:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a19      	ldr	r2, [pc, #100]	@ (8006dd4 <HAL_TIM_Base_Start+0x8c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d00a      	beq.n	8006d88 <HAL_TIM_Base_Start+0x40>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	2380      	movs	r3, #128	@ 0x80
 8006d78:	05db      	lsls	r3, r3, #23
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d004      	beq.n	8006d88 <HAL_TIM_Base_Start+0x40>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a15      	ldr	r2, [pc, #84]	@ (8006dd8 <HAL_TIM_Base_Start+0x90>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d116      	bne.n	8006db6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	4a13      	ldr	r2, [pc, #76]	@ (8006ddc <HAL_TIM_Base_Start+0x94>)
 8006d90:	4013      	ands	r3, r2
 8006d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b06      	cmp	r3, #6
 8006d98:	d016      	beq.n	8006dc8 <HAL_TIM_Base_Start+0x80>
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	2380      	movs	r3, #128	@ 0x80
 8006d9e:	025b      	lsls	r3, r3, #9
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d011      	beq.n	8006dc8 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2101      	movs	r1, #1
 8006db0:	430a      	orrs	r2, r1
 8006db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db4:	e008      	b.n	8006dc8 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	e000      	b.n	8006dca <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	0018      	movs	r0, r3
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	b004      	add	sp, #16
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	40012c00 	.word	0x40012c00
 8006dd8:	40000400 	.word	0x40000400
 8006ddc:	00010007 	.word	0x00010007

08006de0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	4a0d      	ldr	r2, [pc, #52]	@ (8006e24 <HAL_TIM_Base_Stop+0x44>)
 8006df0:	4013      	ands	r3, r2
 8006df2:	d10d      	bne.n	8006e10 <HAL_TIM_Base_Stop+0x30>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	4a0b      	ldr	r2, [pc, #44]	@ (8006e28 <HAL_TIM_Base_Stop+0x48>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d107      	bne.n	8006e10 <HAL_TIM_Base_Stop+0x30>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	438a      	bics	r2, r1
 8006e0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	223d      	movs	r2, #61	@ 0x3d
 8006e14:	2101      	movs	r1, #1
 8006e16:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b002      	add	sp, #8
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	46c0      	nop			@ (mov r8, r8)
 8006e24:	00001111 	.word	0x00001111
 8006e28:	00000444 	.word	0x00000444

08006e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	223d      	movs	r2, #61	@ 0x3d
 8006e38:	5c9b      	ldrb	r3, [r3, r2]
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d001      	beq.n	8006e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e03d      	b.n	8006ec0 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	223d      	movs	r2, #61	@ 0x3d
 8006e48:	2102      	movs	r1, #2
 8006e4a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2101      	movs	r1, #1
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a19      	ldr	r2, [pc, #100]	@ (8006ec8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d00a      	beq.n	8006e7c <HAL_TIM_Base_Start_IT+0x50>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	2380      	movs	r3, #128	@ 0x80
 8006e6c:	05db      	lsls	r3, r3, #23
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d004      	beq.n	8006e7c <HAL_TIM_Base_Start_IT+0x50>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a15      	ldr	r2, [pc, #84]	@ (8006ecc <HAL_TIM_Base_Start_IT+0xa0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d116      	bne.n	8006eaa <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	4a13      	ldr	r2, [pc, #76]	@ (8006ed0 <HAL_TIM_Base_Start_IT+0xa4>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b06      	cmp	r3, #6
 8006e8c:	d016      	beq.n	8006ebc <HAL_TIM_Base_Start_IT+0x90>
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	2380      	movs	r3, #128	@ 0x80
 8006e92:	025b      	lsls	r3, r3, #9
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d011      	beq.n	8006ebc <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ea8:	e008      	b.n	8006ebc <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	e000      	b.n	8006ebe <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ebc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	b004      	add	sp, #16
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	40012c00 	.word	0x40012c00
 8006ecc:	40000400 	.word	0x40000400
 8006ed0:	00010007 	.word	0x00010007

08006ed4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	438a      	bics	r2, r1
 8006eea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8006f28 <HAL_TIM_Base_Stop_IT+0x54>)
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	d10d      	bne.n	8006f14 <HAL_TIM_Base_Stop_IT+0x40>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	4a0b      	ldr	r2, [pc, #44]	@ (8006f2c <HAL_TIM_Base_Stop_IT+0x58>)
 8006f00:	4013      	ands	r3, r2
 8006f02:	d107      	bne.n	8006f14 <HAL_TIM_Base_Stop_IT+0x40>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2101      	movs	r1, #1
 8006f10:	438a      	bics	r2, r1
 8006f12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	223d      	movs	r2, #61	@ 0x3d
 8006f18:	2101      	movs	r1, #1
 8006f1a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	0018      	movs	r0, r3
 8006f20:	46bd      	mov	sp, r7
 8006f22:	b002      	add	sp, #8
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	46c0      	nop			@ (mov r8, r8)
 8006f28:	00001111 	.word	0x00001111
 8006f2c:	00000444 	.word	0x00000444

08006f30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e04a      	b.n	8006fd8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	223d      	movs	r2, #61	@ 0x3d
 8006f46:	5c9b      	ldrb	r3, [r3, r2]
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d107      	bne.n	8006f5e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	223c      	movs	r2, #60	@ 0x3c
 8006f52:	2100      	movs	r1, #0
 8006f54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f7fb fdf9 	bl	8002b50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	223d      	movs	r2, #61	@ 0x3d
 8006f62:	2102      	movs	r1, #2
 8006f64:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	0019      	movs	r1, r3
 8006f70:	0010      	movs	r0, r2
 8006f72:	f000 fb3b 	bl	80075ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2248      	movs	r2, #72	@ 0x48
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	223e      	movs	r2, #62	@ 0x3e
 8006f82:	2101      	movs	r1, #1
 8006f84:	5499      	strb	r1, [r3, r2]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	223f      	movs	r2, #63	@ 0x3f
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	5499      	strb	r1, [r3, r2]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2240      	movs	r2, #64	@ 0x40
 8006f92:	2101      	movs	r1, #1
 8006f94:	5499      	strb	r1, [r3, r2]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2241      	movs	r2, #65	@ 0x41
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	5499      	strb	r1, [r3, r2]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2242      	movs	r2, #66	@ 0x42
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	5499      	strb	r1, [r3, r2]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2243      	movs	r2, #67	@ 0x43
 8006faa:	2101      	movs	r1, #1
 8006fac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2244      	movs	r2, #68	@ 0x44
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	5499      	strb	r1, [r3, r2]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2245      	movs	r2, #69	@ 0x45
 8006fba:	2101      	movs	r1, #1
 8006fbc:	5499      	strb	r1, [r3, r2]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2246      	movs	r2, #70	@ 0x46
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	5499      	strb	r1, [r3, r2]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2247      	movs	r2, #71	@ 0x47
 8006fca:	2101      	movs	r1, #1
 8006fcc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	223d      	movs	r2, #61	@ 0x3d
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	0018      	movs	r0, r3
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	b002      	add	sp, #8
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d108      	bne.n	8007002 <HAL_TIM_PWM_Start+0x22>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	223e      	movs	r2, #62	@ 0x3e
 8006ff4:	5c9b      	ldrb	r3, [r3, r2]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	1e5a      	subs	r2, r3, #1
 8006ffc:	4193      	sbcs	r3, r2
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	e037      	b.n	8007072 <HAL_TIM_PWM_Start+0x92>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b04      	cmp	r3, #4
 8007006:	d108      	bne.n	800701a <HAL_TIM_PWM_Start+0x3a>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	223f      	movs	r2, #63	@ 0x3f
 800700c:	5c9b      	ldrb	r3, [r3, r2]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	3b01      	subs	r3, #1
 8007012:	1e5a      	subs	r2, r3, #1
 8007014:	4193      	sbcs	r3, r2
 8007016:	b2db      	uxtb	r3, r3
 8007018:	e02b      	b.n	8007072 <HAL_TIM_PWM_Start+0x92>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b08      	cmp	r3, #8
 800701e:	d108      	bne.n	8007032 <HAL_TIM_PWM_Start+0x52>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2240      	movs	r2, #64	@ 0x40
 8007024:	5c9b      	ldrb	r3, [r3, r2]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	1e5a      	subs	r2, r3, #1
 800702c:	4193      	sbcs	r3, r2
 800702e:	b2db      	uxtb	r3, r3
 8007030:	e01f      	b.n	8007072 <HAL_TIM_PWM_Start+0x92>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b0c      	cmp	r3, #12
 8007036:	d108      	bne.n	800704a <HAL_TIM_PWM_Start+0x6a>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2241      	movs	r2, #65	@ 0x41
 800703c:	5c9b      	ldrb	r3, [r3, r2]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	3b01      	subs	r3, #1
 8007042:	1e5a      	subs	r2, r3, #1
 8007044:	4193      	sbcs	r3, r2
 8007046:	b2db      	uxtb	r3, r3
 8007048:	e013      	b.n	8007072 <HAL_TIM_PWM_Start+0x92>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b10      	cmp	r3, #16
 800704e:	d108      	bne.n	8007062 <HAL_TIM_PWM_Start+0x82>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2242      	movs	r2, #66	@ 0x42
 8007054:	5c9b      	ldrb	r3, [r3, r2]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	1e5a      	subs	r2, r3, #1
 800705c:	4193      	sbcs	r3, r2
 800705e:	b2db      	uxtb	r3, r3
 8007060:	e007      	b.n	8007072 <HAL_TIM_PWM_Start+0x92>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2243      	movs	r2, #67	@ 0x43
 8007066:	5c9b      	ldrb	r3, [r3, r2]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	3b01      	subs	r3, #1
 800706c:	1e5a      	subs	r2, r3, #1
 800706e:	4193      	sbcs	r3, r2
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e081      	b.n	800717e <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d104      	bne.n	800708a <HAL_TIM_PWM_Start+0xaa>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	223e      	movs	r2, #62	@ 0x3e
 8007084:	2102      	movs	r1, #2
 8007086:	5499      	strb	r1, [r3, r2]
 8007088:	e023      	b.n	80070d2 <HAL_TIM_PWM_Start+0xf2>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b04      	cmp	r3, #4
 800708e:	d104      	bne.n	800709a <HAL_TIM_PWM_Start+0xba>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	223f      	movs	r2, #63	@ 0x3f
 8007094:	2102      	movs	r1, #2
 8007096:	5499      	strb	r1, [r3, r2]
 8007098:	e01b      	b.n	80070d2 <HAL_TIM_PWM_Start+0xf2>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b08      	cmp	r3, #8
 800709e:	d104      	bne.n	80070aa <HAL_TIM_PWM_Start+0xca>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2240      	movs	r2, #64	@ 0x40
 80070a4:	2102      	movs	r1, #2
 80070a6:	5499      	strb	r1, [r3, r2]
 80070a8:	e013      	b.n	80070d2 <HAL_TIM_PWM_Start+0xf2>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b0c      	cmp	r3, #12
 80070ae:	d104      	bne.n	80070ba <HAL_TIM_PWM_Start+0xda>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2241      	movs	r2, #65	@ 0x41
 80070b4:	2102      	movs	r1, #2
 80070b6:	5499      	strb	r1, [r3, r2]
 80070b8:	e00b      	b.n	80070d2 <HAL_TIM_PWM_Start+0xf2>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b10      	cmp	r3, #16
 80070be:	d104      	bne.n	80070ca <HAL_TIM_PWM_Start+0xea>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2242      	movs	r2, #66	@ 0x42
 80070c4:	2102      	movs	r1, #2
 80070c6:	5499      	strb	r1, [r3, r2]
 80070c8:	e003      	b.n	80070d2 <HAL_TIM_PWM_Start+0xf2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2243      	movs	r2, #67	@ 0x43
 80070ce:	2102      	movs	r1, #2
 80070d0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	2201      	movs	r2, #1
 80070da:	0018      	movs	r0, r3
 80070dc:	f000 fda6 	bl	8007c2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a28      	ldr	r2, [pc, #160]	@ (8007188 <HAL_TIM_PWM_Start+0x1a8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d009      	beq.n	80070fe <HAL_TIM_PWM_Start+0x11e>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a27      	ldr	r2, [pc, #156]	@ (800718c <HAL_TIM_PWM_Start+0x1ac>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d004      	beq.n	80070fe <HAL_TIM_PWM_Start+0x11e>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a25      	ldr	r2, [pc, #148]	@ (8007190 <HAL_TIM_PWM_Start+0x1b0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d101      	bne.n	8007102 <HAL_TIM_PWM_Start+0x122>
 80070fe:	2301      	movs	r3, #1
 8007100:	e000      	b.n	8007104 <HAL_TIM_PWM_Start+0x124>
 8007102:	2300      	movs	r3, #0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d008      	beq.n	800711a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2180      	movs	r1, #128	@ 0x80
 8007114:	0209      	lsls	r1, r1, #8
 8007116:	430a      	orrs	r2, r1
 8007118:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a1a      	ldr	r2, [pc, #104]	@ (8007188 <HAL_TIM_PWM_Start+0x1a8>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00a      	beq.n	800713a <HAL_TIM_PWM_Start+0x15a>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	2380      	movs	r3, #128	@ 0x80
 800712a:	05db      	lsls	r3, r3, #23
 800712c:	429a      	cmp	r2, r3
 800712e:	d004      	beq.n	800713a <HAL_TIM_PWM_Start+0x15a>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a17      	ldr	r2, [pc, #92]	@ (8007194 <HAL_TIM_PWM_Start+0x1b4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d116      	bne.n	8007168 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	4a15      	ldr	r2, [pc, #84]	@ (8007198 <HAL_TIM_PWM_Start+0x1b8>)
 8007142:	4013      	ands	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b06      	cmp	r3, #6
 800714a:	d016      	beq.n	800717a <HAL_TIM_PWM_Start+0x19a>
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	2380      	movs	r3, #128	@ 0x80
 8007150:	025b      	lsls	r3, r3, #9
 8007152:	429a      	cmp	r2, r3
 8007154:	d011      	beq.n	800717a <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2101      	movs	r1, #1
 8007162:	430a      	orrs	r2, r1
 8007164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007166:	e008      	b.n	800717a <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2101      	movs	r1, #1
 8007174:	430a      	orrs	r2, r1
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	e000      	b.n	800717c <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800717a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	0018      	movs	r0, r3
 8007180:	46bd      	mov	sp, r7
 8007182:	b004      	add	sp, #16
 8007184:	bd80      	pop	{r7, pc}
 8007186:	46c0      	nop			@ (mov r8, r8)
 8007188:	40012c00 	.word	0x40012c00
 800718c:	40014400 	.word	0x40014400
 8007190:	40014800 	.word	0x40014800
 8007194:	40000400 	.word	0x40000400
 8007198:	00010007 	.word	0x00010007

0800719c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2202      	movs	r2, #2
 80071b8:	4013      	ands	r3, r2
 80071ba:	d021      	beq.n	8007200 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2202      	movs	r2, #2
 80071c0:	4013      	ands	r3, r2
 80071c2:	d01d      	beq.n	8007200 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2203      	movs	r2, #3
 80071ca:	4252      	negs	r2, r2
 80071cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	2203      	movs	r2, #3
 80071dc:	4013      	ands	r3, r2
 80071de:	d004      	beq.n	80071ea <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	0018      	movs	r0, r3
 80071e4:	f000 f9ea 	bl	80075bc <HAL_TIM_IC_CaptureCallback>
 80071e8:	e007      	b.n	80071fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	0018      	movs	r0, r3
 80071ee:	f000 f9dd 	bl	80075ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	0018      	movs	r0, r3
 80071f6:	f000 f9e9 	bl	80075cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2204      	movs	r2, #4
 8007204:	4013      	ands	r3, r2
 8007206:	d022      	beq.n	800724e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2204      	movs	r2, #4
 800720c:	4013      	ands	r3, r2
 800720e:	d01e      	beq.n	800724e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2205      	movs	r2, #5
 8007216:	4252      	negs	r2, r2
 8007218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2202      	movs	r2, #2
 800721e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	23c0      	movs	r3, #192	@ 0xc0
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4013      	ands	r3, r2
 800722c:	d004      	beq.n	8007238 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	0018      	movs	r0, r3
 8007232:	f000 f9c3 	bl	80075bc <HAL_TIM_IC_CaptureCallback>
 8007236:	e007      	b.n	8007248 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	0018      	movs	r0, r3
 800723c:	f000 f9b6 	bl	80075ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	0018      	movs	r0, r3
 8007244:	f000 f9c2 	bl	80075cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2208      	movs	r2, #8
 8007252:	4013      	ands	r3, r2
 8007254:	d021      	beq.n	800729a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2208      	movs	r2, #8
 800725a:	4013      	ands	r3, r2
 800725c:	d01d      	beq.n	800729a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2209      	movs	r2, #9
 8007264:	4252      	negs	r2, r2
 8007266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2204      	movs	r2, #4
 800726c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	2203      	movs	r2, #3
 8007276:	4013      	ands	r3, r2
 8007278:	d004      	beq.n	8007284 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	0018      	movs	r0, r3
 800727e:	f000 f99d 	bl	80075bc <HAL_TIM_IC_CaptureCallback>
 8007282:	e007      	b.n	8007294 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	0018      	movs	r0, r3
 8007288:	f000 f990 	bl	80075ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	0018      	movs	r0, r3
 8007290:	f000 f99c 	bl	80075cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2210      	movs	r2, #16
 800729e:	4013      	ands	r3, r2
 80072a0:	d022      	beq.n	80072e8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2210      	movs	r2, #16
 80072a6:	4013      	ands	r3, r2
 80072a8:	d01e      	beq.n	80072e8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2211      	movs	r2, #17
 80072b0:	4252      	negs	r2, r2
 80072b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2208      	movs	r2, #8
 80072b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69da      	ldr	r2, [r3, #28]
 80072c0:	23c0      	movs	r3, #192	@ 0xc0
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4013      	ands	r3, r2
 80072c6:	d004      	beq.n	80072d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	0018      	movs	r0, r3
 80072cc:	f000 f976 	bl	80075bc <HAL_TIM_IC_CaptureCallback>
 80072d0:	e007      	b.n	80072e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	0018      	movs	r0, r3
 80072d6:	f000 f969 	bl	80075ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	0018      	movs	r0, r3
 80072de:	f000 f975 	bl	80075cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2201      	movs	r2, #1
 80072ec:	4013      	ands	r3, r2
 80072ee:	d00c      	beq.n	800730a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2201      	movs	r2, #1
 80072f4:	4013      	ands	r3, r2
 80072f6:	d008      	beq.n	800730a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2202      	movs	r2, #2
 80072fe:	4252      	negs	r2, r2
 8007300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	0018      	movs	r0, r3
 8007306:	f7fa fc67 	bl	8001bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2280      	movs	r2, #128	@ 0x80
 800730e:	4013      	ands	r3, r2
 8007310:	d104      	bne.n	800731c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	2380      	movs	r3, #128	@ 0x80
 8007316:	019b      	lsls	r3, r3, #6
 8007318:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800731a:	d00b      	beq.n	8007334 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2280      	movs	r2, #128	@ 0x80
 8007320:	4013      	ands	r3, r2
 8007322:	d007      	beq.n	8007334 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a1e      	ldr	r2, [pc, #120]	@ (80073a4 <HAL_TIM_IRQHandler+0x208>)
 800732a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	0018      	movs	r0, r3
 8007330:	f000 fd10 	bl	8007d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	2380      	movs	r3, #128	@ 0x80
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	4013      	ands	r3, r2
 800733c:	d00b      	beq.n	8007356 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2280      	movs	r2, #128	@ 0x80
 8007342:	4013      	ands	r3, r2
 8007344:	d007      	beq.n	8007356 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a17      	ldr	r2, [pc, #92]	@ (80073a8 <HAL_TIM_IRQHandler+0x20c>)
 800734c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	0018      	movs	r0, r3
 8007352:	f000 fd07 	bl	8007d64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2240      	movs	r2, #64	@ 0x40
 800735a:	4013      	ands	r3, r2
 800735c:	d00c      	beq.n	8007378 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2240      	movs	r2, #64	@ 0x40
 8007362:	4013      	ands	r3, r2
 8007364:	d008      	beq.n	8007378 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2241      	movs	r2, #65	@ 0x41
 800736c:	4252      	negs	r2, r2
 800736e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	0018      	movs	r0, r3
 8007374:	f000 f932 	bl	80075dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2220      	movs	r2, #32
 800737c:	4013      	ands	r3, r2
 800737e:	d00c      	beq.n	800739a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	4013      	ands	r3, r2
 8007386:	d008      	beq.n	800739a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2221      	movs	r2, #33	@ 0x21
 800738e:	4252      	negs	r2, r2
 8007390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	0018      	movs	r0, r3
 8007396:	f000 fcd5 	bl	8007d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800739a:	46c0      	nop			@ (mov r8, r8)
 800739c:	46bd      	mov	sp, r7
 800739e:	b004      	add	sp, #16
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	46c0      	nop			@ (mov r8, r8)
 80073a4:	ffffdf7f 	.word	0xffffdf7f
 80073a8:	fffffeff 	.word	0xfffffeff

080073ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073b8:	2317      	movs	r3, #23
 80073ba:	18fb      	adds	r3, r7, r3
 80073bc:	2200      	movs	r2, #0
 80073be:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	223c      	movs	r2, #60	@ 0x3c
 80073c4:	5c9b      	ldrb	r3, [r3, r2]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d101      	bne.n	80073ce <HAL_TIM_PWM_ConfigChannel+0x22>
 80073ca:	2302      	movs	r3, #2
 80073cc:	e0e5      	b.n	800759a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	223c      	movs	r2, #60	@ 0x3c
 80073d2:	2101      	movs	r1, #1
 80073d4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b14      	cmp	r3, #20
 80073da:	d900      	bls.n	80073de <HAL_TIM_PWM_ConfigChannel+0x32>
 80073dc:	e0d1      	b.n	8007582 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	009a      	lsls	r2, r3, #2
 80073e2:	4b70      	ldr	r3, [pc, #448]	@ (80075a4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80073e4:	18d3      	adds	r3, r2, r3
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	0011      	movs	r1, r2
 80073f2:	0018      	movs	r0, r3
 80073f4:	f000 f97e 	bl	80076f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	699a      	ldr	r2, [r3, #24]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2108      	movs	r1, #8
 8007404:	430a      	orrs	r2, r1
 8007406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2104      	movs	r1, #4
 8007414:	438a      	bics	r2, r1
 8007416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6999      	ldr	r1, [r3, #24]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	691a      	ldr	r2, [r3, #16]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	619a      	str	r2, [r3, #24]
      break;
 800742a:	e0af      	b.n	800758c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	0011      	movs	r1, r2
 8007434:	0018      	movs	r0, r3
 8007436:	f000 f9dd 	bl	80077f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	699a      	ldr	r2, [r3, #24]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2180      	movs	r1, #128	@ 0x80
 8007446:	0109      	lsls	r1, r1, #4
 8007448:	430a      	orrs	r2, r1
 800744a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699a      	ldr	r2, [r3, #24]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4954      	ldr	r1, [pc, #336]	@ (80075a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007458:	400a      	ands	r2, r1
 800745a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6999      	ldr	r1, [r3, #24]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	021a      	lsls	r2, r3, #8
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	619a      	str	r2, [r3, #24]
      break;
 8007470:	e08c      	b.n	800758c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	0011      	movs	r1, r2
 800747a:	0018      	movs	r0, r3
 800747c:	f000 fa38 	bl	80078f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69da      	ldr	r2, [r3, #28]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2108      	movs	r1, #8
 800748c:	430a      	orrs	r2, r1
 800748e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	69da      	ldr	r2, [r3, #28]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2104      	movs	r1, #4
 800749c:	438a      	bics	r2, r1
 800749e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	69d9      	ldr	r1, [r3, #28]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	691a      	ldr	r2, [r3, #16]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	61da      	str	r2, [r3, #28]
      break;
 80074b2:	e06b      	b.n	800758c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	0011      	movs	r1, r2
 80074bc:	0018      	movs	r0, r3
 80074be:	f000 fa99 	bl	80079f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69da      	ldr	r2, [r3, #28]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2180      	movs	r1, #128	@ 0x80
 80074ce:	0109      	lsls	r1, r1, #4
 80074d0:	430a      	orrs	r2, r1
 80074d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	69da      	ldr	r2, [r3, #28]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4932      	ldr	r1, [pc, #200]	@ (80075a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80074e0:	400a      	ands	r2, r1
 80074e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69d9      	ldr	r1, [r3, #28]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	021a      	lsls	r2, r3, #8
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	61da      	str	r2, [r3, #28]
      break;
 80074f8:	e048      	b.n	800758c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	0011      	movs	r1, r2
 8007502:	0018      	movs	r0, r3
 8007504:	f000 fada 	bl	8007abc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2108      	movs	r1, #8
 8007514:	430a      	orrs	r2, r1
 8007516:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2104      	movs	r1, #4
 8007524:	438a      	bics	r2, r1
 8007526:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	691a      	ldr	r2, [r3, #16]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800753a:	e027      	b.n	800758c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	0011      	movs	r1, r2
 8007544:	0018      	movs	r0, r3
 8007546:	f000 fb13 	bl	8007b70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2180      	movs	r1, #128	@ 0x80
 8007556:	0109      	lsls	r1, r1, #4
 8007558:	430a      	orrs	r2, r1
 800755a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4910      	ldr	r1, [pc, #64]	@ (80075a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007568:	400a      	ands	r2, r1
 800756a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	021a      	lsls	r2, r3, #8
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007580:	e004      	b.n	800758c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007582:	2317      	movs	r3, #23
 8007584:	18fb      	adds	r3, r7, r3
 8007586:	2201      	movs	r2, #1
 8007588:	701a      	strb	r2, [r3, #0]
      break;
 800758a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	223c      	movs	r2, #60	@ 0x3c
 8007590:	2100      	movs	r1, #0
 8007592:	5499      	strb	r1, [r3, r2]

  return status;
 8007594:	2317      	movs	r3, #23
 8007596:	18fb      	adds	r3, r7, r3
 8007598:	781b      	ldrb	r3, [r3, #0]
}
 800759a:	0018      	movs	r0, r3
 800759c:	46bd      	mov	sp, r7
 800759e:	b006      	add	sp, #24
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	46c0      	nop			@ (mov r8, r8)
 80075a4:	08007e8c 	.word	0x08007e8c
 80075a8:	fffffbff 	.word	0xfffffbff

080075ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075b4:	46c0      	nop			@ (mov r8, r8)
 80075b6:	46bd      	mov	sp, r7
 80075b8:	b002      	add	sp, #8
 80075ba:	bd80      	pop	{r7, pc}

080075bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075c4:	46c0      	nop			@ (mov r8, r8)
 80075c6:	46bd      	mov	sp, r7
 80075c8:	b002      	add	sp, #8
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075d4:	46c0      	nop			@ (mov r8, r8)
 80075d6:	46bd      	mov	sp, r7
 80075d8:	b002      	add	sp, #8
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075e4:	46c0      	nop			@ (mov r8, r8)
 80075e6:	46bd      	mov	sp, r7
 80075e8:	b002      	add	sp, #8
 80075ea:	bd80      	pop	{r7, pc}

080075ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a37      	ldr	r2, [pc, #220]	@ (80076dc <TIM_Base_SetConfig+0xf0>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d008      	beq.n	8007616 <TIM_Base_SetConfig+0x2a>
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	2380      	movs	r3, #128	@ 0x80
 8007608:	05db      	lsls	r3, r3, #23
 800760a:	429a      	cmp	r2, r3
 800760c:	d003      	beq.n	8007616 <TIM_Base_SetConfig+0x2a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a33      	ldr	r2, [pc, #204]	@ (80076e0 <TIM_Base_SetConfig+0xf4>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d108      	bne.n	8007628 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2270      	movs	r2, #112	@ 0x70
 800761a:	4393      	bics	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	4313      	orrs	r3, r2
 8007626:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a2c      	ldr	r2, [pc, #176]	@ (80076dc <TIM_Base_SetConfig+0xf0>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d014      	beq.n	800765a <TIM_Base_SetConfig+0x6e>
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	2380      	movs	r3, #128	@ 0x80
 8007634:	05db      	lsls	r3, r3, #23
 8007636:	429a      	cmp	r2, r3
 8007638:	d00f      	beq.n	800765a <TIM_Base_SetConfig+0x6e>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a28      	ldr	r2, [pc, #160]	@ (80076e0 <TIM_Base_SetConfig+0xf4>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d00b      	beq.n	800765a <TIM_Base_SetConfig+0x6e>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a27      	ldr	r2, [pc, #156]	@ (80076e4 <TIM_Base_SetConfig+0xf8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d007      	beq.n	800765a <TIM_Base_SetConfig+0x6e>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a26      	ldr	r2, [pc, #152]	@ (80076e8 <TIM_Base_SetConfig+0xfc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d003      	beq.n	800765a <TIM_Base_SetConfig+0x6e>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a25      	ldr	r2, [pc, #148]	@ (80076ec <TIM_Base_SetConfig+0x100>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d108      	bne.n	800766c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4a24      	ldr	r2, [pc, #144]	@ (80076f0 <TIM_Base_SetConfig+0x104>)
 800765e:	4013      	ands	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	4313      	orrs	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2280      	movs	r2, #128	@ 0x80
 8007670:	4393      	bics	r3, r2
 8007672:	001a      	movs	r2, r3
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	4313      	orrs	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	689a      	ldr	r2, [r3, #8]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a11      	ldr	r2, [pc, #68]	@ (80076dc <TIM_Base_SetConfig+0xf0>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d007      	beq.n	80076aa <TIM_Base_SetConfig+0xbe>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a12      	ldr	r2, [pc, #72]	@ (80076e8 <TIM_Base_SetConfig+0xfc>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d003      	beq.n	80076aa <TIM_Base_SetConfig+0xbe>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a11      	ldr	r2, [pc, #68]	@ (80076ec <TIM_Base_SetConfig+0x100>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d103      	bne.n	80076b2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	691a      	ldr	r2, [r3, #16]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	2201      	movs	r2, #1
 80076be:	4013      	ands	r3, r2
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d106      	bne.n	80076d2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	2201      	movs	r2, #1
 80076ca:	4393      	bics	r3, r2
 80076cc:	001a      	movs	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	611a      	str	r2, [r3, #16]
  }
}
 80076d2:	46c0      	nop			@ (mov r8, r8)
 80076d4:	46bd      	mov	sp, r7
 80076d6:	b004      	add	sp, #16
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	46c0      	nop			@ (mov r8, r8)
 80076dc:	40012c00 	.word	0x40012c00
 80076e0:	40000400 	.word	0x40000400
 80076e4:	40002000 	.word	0x40002000
 80076e8:	40014400 	.word	0x40014400
 80076ec:	40014800 	.word	0x40014800
 80076f0:	fffffcff 	.word	0xfffffcff

080076f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	2201      	movs	r2, #1
 800770a:	4393      	bics	r3, r2
 800770c:	001a      	movs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4a2e      	ldr	r2, [pc, #184]	@ (80077dc <TIM_OC1_SetConfig+0xe8>)
 8007722:	4013      	ands	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2203      	movs	r2, #3
 800772a:	4393      	bics	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	4313      	orrs	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	2202      	movs	r2, #2
 800773c:	4393      	bics	r3, r2
 800773e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	4313      	orrs	r3, r2
 8007748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a24      	ldr	r2, [pc, #144]	@ (80077e0 <TIM_OC1_SetConfig+0xec>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d007      	beq.n	8007762 <TIM_OC1_SetConfig+0x6e>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a23      	ldr	r2, [pc, #140]	@ (80077e4 <TIM_OC1_SetConfig+0xf0>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d003      	beq.n	8007762 <TIM_OC1_SetConfig+0x6e>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a22      	ldr	r2, [pc, #136]	@ (80077e8 <TIM_OC1_SetConfig+0xf4>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d10c      	bne.n	800777c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2208      	movs	r2, #8
 8007766:	4393      	bics	r3, r2
 8007768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	4313      	orrs	r3, r2
 8007772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2204      	movs	r2, #4
 8007778:	4393      	bics	r3, r2
 800777a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a18      	ldr	r2, [pc, #96]	@ (80077e0 <TIM_OC1_SetConfig+0xec>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d007      	beq.n	8007794 <TIM_OC1_SetConfig+0xa0>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a17      	ldr	r2, [pc, #92]	@ (80077e4 <TIM_OC1_SetConfig+0xf0>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d003      	beq.n	8007794 <TIM_OC1_SetConfig+0xa0>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a16      	ldr	r2, [pc, #88]	@ (80077e8 <TIM_OC1_SetConfig+0xf4>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d111      	bne.n	80077b8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	4a15      	ldr	r2, [pc, #84]	@ (80077ec <TIM_OC1_SetConfig+0xf8>)
 8007798:	4013      	ands	r3, r2
 800779a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	4a14      	ldr	r2, [pc, #80]	@ (80077f0 <TIM_OC1_SetConfig+0xfc>)
 80077a0:	4013      	ands	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	621a      	str	r2, [r3, #32]
}
 80077d2:	46c0      	nop			@ (mov r8, r8)
 80077d4:	46bd      	mov	sp, r7
 80077d6:	b006      	add	sp, #24
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	46c0      	nop			@ (mov r8, r8)
 80077dc:	fffeff8f 	.word	0xfffeff8f
 80077e0:	40012c00 	.word	0x40012c00
 80077e4:	40014400 	.word	0x40014400
 80077e8:	40014800 	.word	0x40014800
 80077ec:	fffffeff 	.word	0xfffffeff
 80077f0:	fffffdff 	.word	0xfffffdff

080077f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	2210      	movs	r2, #16
 800780a:	4393      	bics	r3, r2
 800780c:	001a      	movs	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	4a2c      	ldr	r2, [pc, #176]	@ (80078d4 <TIM_OC2_SetConfig+0xe0>)
 8007822:	4013      	ands	r3, r2
 8007824:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4a2b      	ldr	r2, [pc, #172]	@ (80078d8 <TIM_OC2_SetConfig+0xe4>)
 800782a:	4013      	ands	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	021b      	lsls	r3, r3, #8
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2220      	movs	r2, #32
 800783e:	4393      	bics	r3, r2
 8007840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	4313      	orrs	r3, r2
 800784c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a22      	ldr	r2, [pc, #136]	@ (80078dc <TIM_OC2_SetConfig+0xe8>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d10d      	bne.n	8007872 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2280      	movs	r2, #128	@ 0x80
 800785a:	4393      	bics	r3, r2
 800785c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	011b      	lsls	r3, r3, #4
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	4313      	orrs	r3, r2
 8007868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2240      	movs	r2, #64	@ 0x40
 800786e:	4393      	bics	r3, r2
 8007870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a19      	ldr	r2, [pc, #100]	@ (80078dc <TIM_OC2_SetConfig+0xe8>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d007      	beq.n	800788a <TIM_OC2_SetConfig+0x96>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a18      	ldr	r2, [pc, #96]	@ (80078e0 <TIM_OC2_SetConfig+0xec>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d003      	beq.n	800788a <TIM_OC2_SetConfig+0x96>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a17      	ldr	r2, [pc, #92]	@ (80078e4 <TIM_OC2_SetConfig+0xf0>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d113      	bne.n	80078b2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	4a16      	ldr	r2, [pc, #88]	@ (80078e8 <TIM_OC2_SetConfig+0xf4>)
 800788e:	4013      	ands	r3, r2
 8007890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	4a15      	ldr	r2, [pc, #84]	@ (80078ec <TIM_OC2_SetConfig+0xf8>)
 8007896:	4013      	ands	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	621a      	str	r2, [r3, #32]
}
 80078cc:	46c0      	nop			@ (mov r8, r8)
 80078ce:	46bd      	mov	sp, r7
 80078d0:	b006      	add	sp, #24
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	feff8fff 	.word	0xfeff8fff
 80078d8:	fffffcff 	.word	0xfffffcff
 80078dc:	40012c00 	.word	0x40012c00
 80078e0:	40014400 	.word	0x40014400
 80078e4:	40014800 	.word	0x40014800
 80078e8:	fffffbff 	.word	0xfffffbff
 80078ec:	fffff7ff 	.word	0xfffff7ff

080078f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	4a31      	ldr	r2, [pc, #196]	@ (80079cc <TIM_OC3_SetConfig+0xdc>)
 8007906:	401a      	ands	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4a2d      	ldr	r2, [pc, #180]	@ (80079d0 <TIM_OC3_SetConfig+0xe0>)
 800791c:	4013      	ands	r3, r2
 800791e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2203      	movs	r2, #3
 8007924:	4393      	bics	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	4313      	orrs	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	4a27      	ldr	r2, [pc, #156]	@ (80079d4 <TIM_OC3_SetConfig+0xe4>)
 8007936:	4013      	ands	r3, r2
 8007938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	021b      	lsls	r3, r3, #8
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	4313      	orrs	r3, r2
 8007944:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a23      	ldr	r2, [pc, #140]	@ (80079d8 <TIM_OC3_SetConfig+0xe8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d10d      	bne.n	800796a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	4a22      	ldr	r2, [pc, #136]	@ (80079dc <TIM_OC3_SetConfig+0xec>)
 8007952:	4013      	ands	r3, r2
 8007954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	021b      	lsls	r3, r3, #8
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	4313      	orrs	r3, r2
 8007960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	4a1e      	ldr	r2, [pc, #120]	@ (80079e0 <TIM_OC3_SetConfig+0xf0>)
 8007966:	4013      	ands	r3, r2
 8007968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a1a      	ldr	r2, [pc, #104]	@ (80079d8 <TIM_OC3_SetConfig+0xe8>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d007      	beq.n	8007982 <TIM_OC3_SetConfig+0x92>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a1b      	ldr	r2, [pc, #108]	@ (80079e4 <TIM_OC3_SetConfig+0xf4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d003      	beq.n	8007982 <TIM_OC3_SetConfig+0x92>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a1a      	ldr	r2, [pc, #104]	@ (80079e8 <TIM_OC3_SetConfig+0xf8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d113      	bne.n	80079aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	4a19      	ldr	r2, [pc, #100]	@ (80079ec <TIM_OC3_SetConfig+0xfc>)
 8007986:	4013      	ands	r3, r2
 8007988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	4a18      	ldr	r2, [pc, #96]	@ (80079f0 <TIM_OC3_SetConfig+0x100>)
 800798e:	4013      	ands	r3, r2
 8007990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	011b      	lsls	r3, r3, #4
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	4313      	orrs	r3, r2
 800799c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	011b      	lsls	r3, r3, #4
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	621a      	str	r2, [r3, #32]
}
 80079c4:	46c0      	nop			@ (mov r8, r8)
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b006      	add	sp, #24
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	fffffeff 	.word	0xfffffeff
 80079d0:	fffeff8f 	.word	0xfffeff8f
 80079d4:	fffffdff 	.word	0xfffffdff
 80079d8:	40012c00 	.word	0x40012c00
 80079dc:	fffff7ff 	.word	0xfffff7ff
 80079e0:	fffffbff 	.word	0xfffffbff
 80079e4:	40014400 	.word	0x40014400
 80079e8:	40014800 	.word	0x40014800
 80079ec:	ffffefff 	.word	0xffffefff
 80079f0:	ffffdfff 	.word	0xffffdfff

080079f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	4a24      	ldr	r2, [pc, #144]	@ (8007a9c <TIM_OC4_SetConfig+0xa8>)
 8007a0a:	401a      	ands	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4a20      	ldr	r2, [pc, #128]	@ (8007aa0 <TIM_OC4_SetConfig+0xac>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4a1f      	ldr	r2, [pc, #124]	@ (8007aa4 <TIM_OC4_SetConfig+0xb0>)
 8007a28:	4013      	ands	r3, r2
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8007aa8 <TIM_OC4_SetConfig+0xb4>)
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	031b      	lsls	r3, r3, #12
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a17      	ldr	r2, [pc, #92]	@ (8007aac <TIM_OC4_SetConfig+0xb8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d007      	beq.n	8007a64 <TIM_OC4_SetConfig+0x70>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a16      	ldr	r2, [pc, #88]	@ (8007ab0 <TIM_OC4_SetConfig+0xbc>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d003      	beq.n	8007a64 <TIM_OC4_SetConfig+0x70>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a15      	ldr	r2, [pc, #84]	@ (8007ab4 <TIM_OC4_SetConfig+0xc0>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d109      	bne.n	8007a78 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	4a14      	ldr	r2, [pc, #80]	@ (8007ab8 <TIM_OC4_SetConfig+0xc4>)
 8007a68:	4013      	ands	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	019b      	lsls	r3, r3, #6
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	621a      	str	r2, [r3, #32]
}
 8007a92:	46c0      	nop			@ (mov r8, r8)
 8007a94:	46bd      	mov	sp, r7
 8007a96:	b006      	add	sp, #24
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	46c0      	nop			@ (mov r8, r8)
 8007a9c:	ffffefff 	.word	0xffffefff
 8007aa0:	feff8fff 	.word	0xfeff8fff
 8007aa4:	fffffcff 	.word	0xfffffcff
 8007aa8:	ffffdfff 	.word	0xffffdfff
 8007aac:	40012c00 	.word	0x40012c00
 8007ab0:	40014400 	.word	0x40014400
 8007ab4:	40014800 	.word	0x40014800
 8007ab8:	ffffbfff 	.word	0xffffbfff

08007abc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	4a21      	ldr	r2, [pc, #132]	@ (8007b58 <TIM_OC5_SetConfig+0x9c>)
 8007ad2:	401a      	ands	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8007b5c <TIM_OC5_SetConfig+0xa0>)
 8007ae8:	4013      	ands	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	4a19      	ldr	r2, [pc, #100]	@ (8007b60 <TIM_OC5_SetConfig+0xa4>)
 8007afa:	4013      	ands	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	041b      	lsls	r3, r3, #16
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a15      	ldr	r2, [pc, #84]	@ (8007b64 <TIM_OC5_SetConfig+0xa8>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d007      	beq.n	8007b22 <TIM_OC5_SetConfig+0x66>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a14      	ldr	r2, [pc, #80]	@ (8007b68 <TIM_OC5_SetConfig+0xac>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d003      	beq.n	8007b22 <TIM_OC5_SetConfig+0x66>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a13      	ldr	r2, [pc, #76]	@ (8007b6c <TIM_OC5_SetConfig+0xb0>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d109      	bne.n	8007b36 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	4a0c      	ldr	r2, [pc, #48]	@ (8007b58 <TIM_OC5_SetConfig+0x9c>)
 8007b26:	4013      	ands	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	021b      	lsls	r3, r3, #8
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	621a      	str	r2, [r3, #32]
}
 8007b50:	46c0      	nop			@ (mov r8, r8)
 8007b52:	46bd      	mov	sp, r7
 8007b54:	b006      	add	sp, #24
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	fffeffff 	.word	0xfffeffff
 8007b5c:	fffeff8f 	.word	0xfffeff8f
 8007b60:	fffdffff 	.word	0xfffdffff
 8007b64:	40012c00 	.word	0x40012c00
 8007b68:	40014400 	.word	0x40014400
 8007b6c:	40014800 	.word	0x40014800

08007b70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	4a22      	ldr	r2, [pc, #136]	@ (8007c10 <TIM_OC6_SetConfig+0xa0>)
 8007b86:	401a      	ands	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8007c14 <TIM_OC6_SetConfig+0xa4>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	4a1a      	ldr	r2, [pc, #104]	@ (8007c18 <TIM_OC6_SetConfig+0xa8>)
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	051b      	lsls	r3, r3, #20
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a16      	ldr	r2, [pc, #88]	@ (8007c1c <TIM_OC6_SetConfig+0xac>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d007      	beq.n	8007bd8 <TIM_OC6_SetConfig+0x68>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a15      	ldr	r2, [pc, #84]	@ (8007c20 <TIM_OC6_SetConfig+0xb0>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d003      	beq.n	8007bd8 <TIM_OC6_SetConfig+0x68>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a14      	ldr	r2, [pc, #80]	@ (8007c24 <TIM_OC6_SetConfig+0xb4>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d109      	bne.n	8007bec <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	4a13      	ldr	r2, [pc, #76]	@ (8007c28 <TIM_OC6_SetConfig+0xb8>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	029b      	lsls	r3, r3, #10
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	621a      	str	r2, [r3, #32]
}
 8007c06:	46c0      	nop			@ (mov r8, r8)
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	b006      	add	sp, #24
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	46c0      	nop			@ (mov r8, r8)
 8007c10:	ffefffff 	.word	0xffefffff
 8007c14:	feff8fff 	.word	0xfeff8fff
 8007c18:	ffdfffff 	.word	0xffdfffff
 8007c1c:	40012c00 	.word	0x40012c00
 8007c20:	40014400 	.word	0x40014400
 8007c24:	40014800 	.word	0x40014800
 8007c28:	fffbffff 	.word	0xfffbffff

08007c2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	221f      	movs	r2, #31
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	2201      	movs	r2, #1
 8007c40:	409a      	lsls	r2, r3
 8007c42:	0013      	movs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	43d2      	mvns	r2, r2
 8007c4e:	401a      	ands	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6a1a      	ldr	r2, [r3, #32]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	211f      	movs	r1, #31
 8007c5c:	400b      	ands	r3, r1
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	4099      	lsls	r1, r3
 8007c62:	000b      	movs	r3, r1
 8007c64:	431a      	orrs	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	621a      	str	r2, [r3, #32]
}
 8007c6a:	46c0      	nop			@ (mov r8, r8)
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	b006      	add	sp, #24
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	223c      	movs	r2, #60	@ 0x3c
 8007c82:	5c9b      	ldrb	r3, [r3, r2]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d101      	bne.n	8007c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e050      	b.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	223c      	movs	r2, #60	@ 0x3c
 8007c90:	2101      	movs	r1, #1
 8007c92:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	223d      	movs	r2, #61	@ 0x3d
 8007c98:	2102      	movs	r1, #2
 8007c9a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a21      	ldr	r2, [pc, #132]	@ (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d108      	bne.n	8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4a20      	ldr	r2, [pc, #128]	@ (8007d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2270      	movs	r2, #112	@ 0x70
 8007ccc:	4393      	bics	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a14      	ldr	r2, [pc, #80]	@ (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d00a      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	2380      	movs	r3, #128	@ 0x80
 8007cf2:	05db      	lsls	r3, r3, #23
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d004      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a10      	ldr	r2, [pc, #64]	@ (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d10c      	bne.n	8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2280      	movs	r2, #128	@ 0x80
 8007d06:	4393      	bics	r3, r2
 8007d08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	223d      	movs	r2, #61	@ 0x3d
 8007d20:	2101      	movs	r1, #1
 8007d22:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	223c      	movs	r2, #60	@ 0x3c
 8007d28:	2100      	movs	r1, #0
 8007d2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	0018      	movs	r0, r3
 8007d30:	46bd      	mov	sp, r7
 8007d32:	b004      	add	sp, #16
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	46c0      	nop			@ (mov r8, r8)
 8007d38:	40012c00 	.word	0x40012c00
 8007d3c:	ff0fffff 	.word	0xff0fffff
 8007d40:	40000400 	.word	0x40000400

08007d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d4c:	46c0      	nop			@ (mov r8, r8)
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	b002      	add	sp, #8
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d5c:	46c0      	nop			@ (mov r8, r8)
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	b002      	add	sp, #8
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d6c:	46c0      	nop			@ (mov r8, r8)
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	b002      	add	sp, #8
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <memset>:
 8007d74:	0003      	movs	r3, r0
 8007d76:	1882      	adds	r2, r0, r2
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d100      	bne.n	8007d7e <memset+0xa>
 8007d7c:	4770      	bx	lr
 8007d7e:	7019      	strb	r1, [r3, #0]
 8007d80:	3301      	adds	r3, #1
 8007d82:	e7f9      	b.n	8007d78 <memset+0x4>

08007d84 <__libc_init_array>:
 8007d84:	b570      	push	{r4, r5, r6, lr}
 8007d86:	2600      	movs	r6, #0
 8007d88:	4c0c      	ldr	r4, [pc, #48]	@ (8007dbc <__libc_init_array+0x38>)
 8007d8a:	4d0d      	ldr	r5, [pc, #52]	@ (8007dc0 <__libc_init_array+0x3c>)
 8007d8c:	1b64      	subs	r4, r4, r5
 8007d8e:	10a4      	asrs	r4, r4, #2
 8007d90:	42a6      	cmp	r6, r4
 8007d92:	d109      	bne.n	8007da8 <__libc_init_array+0x24>
 8007d94:	2600      	movs	r6, #0
 8007d96:	f000 f823 	bl	8007de0 <_init>
 8007d9a:	4c0a      	ldr	r4, [pc, #40]	@ (8007dc4 <__libc_init_array+0x40>)
 8007d9c:	4d0a      	ldr	r5, [pc, #40]	@ (8007dc8 <__libc_init_array+0x44>)
 8007d9e:	1b64      	subs	r4, r4, r5
 8007da0:	10a4      	asrs	r4, r4, #2
 8007da2:	42a6      	cmp	r6, r4
 8007da4:	d105      	bne.n	8007db2 <__libc_init_array+0x2e>
 8007da6:	bd70      	pop	{r4, r5, r6, pc}
 8007da8:	00b3      	lsls	r3, r6, #2
 8007daa:	58eb      	ldr	r3, [r5, r3]
 8007dac:	4798      	blx	r3
 8007dae:	3601      	adds	r6, #1
 8007db0:	e7ee      	b.n	8007d90 <__libc_init_array+0xc>
 8007db2:	00b3      	lsls	r3, r6, #2
 8007db4:	58eb      	ldr	r3, [r5, r3]
 8007db6:	4798      	blx	r3
 8007db8:	3601      	adds	r6, #1
 8007dba:	e7f2      	b.n	8007da2 <__libc_init_array+0x1e>
 8007dbc:	08007ee0 	.word	0x08007ee0
 8007dc0:	08007ee0 	.word	0x08007ee0
 8007dc4:	08007ee4 	.word	0x08007ee4
 8007dc8:	08007ee0 	.word	0x08007ee0

08007dcc <memcpy>:
 8007dcc:	2300      	movs	r3, #0
 8007dce:	b510      	push	{r4, lr}
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d100      	bne.n	8007dd6 <memcpy+0xa>
 8007dd4:	bd10      	pop	{r4, pc}
 8007dd6:	5ccc      	ldrb	r4, [r1, r3]
 8007dd8:	54c4      	strb	r4, [r0, r3]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	e7f8      	b.n	8007dd0 <memcpy+0x4>
	...

08007de0 <_init>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	46c0      	nop			@ (mov r8, r8)
 8007de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de6:	bc08      	pop	{r3}
 8007de8:	469e      	mov	lr, r3
 8007dea:	4770      	bx	lr

08007dec <_fini>:
 8007dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dee:	46c0      	nop			@ (mov r8, r8)
 8007df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007df2:	bc08      	pop	{r3}
 8007df4:	469e      	mov	lr, r3
 8007df6:	4770      	bx	lr
